Body
```
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

@github I had spent some time and implemented HW intrinstics for Min/Max and as asmdiffs shows more regressions I assume I did it wrong. I also couldn't figured it how to force the containment, I've always gotten something like this:
![image](https://user-images.githubusercontent.com/18483133/168826648-56318a63-73fd-4b23-bc8c-c7fcc264ea35.png)
if I understand the role of ""containment"" right then vmovss must go away.

Alternatively, I tried to investigagate the lowering way and change **ContainCheckIntrinsic** method, but ended up with the IsContainableMemoryOp check is never true for Math.Min/Math.Max. The only option I had was marking both op's with SetRegOptional which doesn't seem right.

I would be so happy if you pushed me to the right direction :) 

This PR was created due https://github.com/dotnet/runtime/pull/65700 had been closed.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>SkiFoD</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-CodeGen-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Should `IsImplicitByrefParameterValue` be fixed instead? At least the documentation on it seems wrong, I imagine we have a mismatched OBJ/LCL_VAR tree here."
nit: looks like wrong indentation here
"@github Just so we can understand what the right APIs are to use in the future, could you clarify why `WaitForUrl` is wrong? Does it not wait in the right way or something?"
"Nit: not wrong, but not as correct as it could be, i.e. handling null and empty separately. Helps developer more easily know what's wrong, but again - nit."
This test failed when I was running locally. Using `Browser.Exists` gets us the build logs which this one does not. In my case it was because something about the build had gone wrong and it failed to download a bunch of files which is the next mystery to solve.
"Nit: Please use predefined type names (like `int/string/object`, instead of framework type names (like `Int32/String/Object`). You might have the option set wrong at Tools\Options\Text Editor\C#\Code style\General.
"
"Good question. It's the same behavior as `GetForEachStatementInfo`, but does seem wrong.
For comparison, `GetAwaitExpressionInfo` returns `default` in such cases. I'll change foreach and deconstruction methods to do the same.


---
In reply to: [149514253](https://github.com/dotnet/roslyn/pull/22934#discussion_r149514253) [](ancestors = 149514253)"
">ILabeledOperation (Label: continue) (OperationKind.Labeled, Type: null, IsImplicit) (Syntax: 'For i = 0 To 10') [](start = 6, length = 111)

I believe this is a wrong place for the continue label. Do we have any adjusted test that actually uses Continue and Exit statements?"
"Sorry about that. There is definitely something wrong. Investigating.

---
In reply to: [172339570](https://github.com/dotnet/roslyn/pull/23356#discussion_r172339570) [](ancestors = 172339570)"
"people could of course implement these properties however they want so the result could technically be wrong, but they can already do that when implementing these interfaces... although it's true that at least they're explicitly saying what the purpose of a Count property is by implementing the interface so I'm not entirely sure if it's a good idea.. @github what are your thoughts on that?"
"Currently, we throw an exception with a helpful error message for the wrong language. We should do the same for a language agnostic conversion as well.

---
In reply to: [178665972](https://github.com/dotnet/roslyn/pull/25828#discussion_r178665972) [](ancestors = 178665972,178665399)"
">!parameter.IsParams [](start = 25, length = 19)

This looks like a wrong assumption #Closed"
"this is the wrong cancellation token to use.   you need the one that was passed (but ignored) in ```_ => CreateChangedDocument(diagnostic),```."
"> > Today the following is happening, and I don't feel it is completely right.
> 
> We'd wanted the rules to be easy to reason about. It's fairly unusual to have a parameter be bound from the route for one template but not the other. That said, it would be a breaking change to tweak this behavior particularly since nobody's really complained about the runtime behavior.

Got it, so, in this case my fix is wrong because what should happen in this case, if I understood correctly, is the API explorer not include the parameter as part of the API description, is that right?"
"> This is a common failure class we'll see during active development of a release - when Runtime changes API surface area, we can't ingest that change until we get an SDK with the new surface area (what we're building against has different surface area than what we're running against).

My memory is wrong, this is only an issue for projects using the Razor SDK. Regular projects don't hit this because of our workaround where we update the SDK's `FrameworkReference`s to match the incoming runtime version"
"Accessing `t_currentProcessorId` gets noticeably more expensive in `SimpleCoreIdSpeedCheck` if it is in the same class. It looks like JIT takes slow path while class is still not done with static initialization.

I could be wrong about the actual reasons (would be interesting to know what really happened), but moving the field into a nested class made access times from static field initializer in the outer more reasonable.

---
In reply to: [352949830](https://github.com/dotnet/runtime/pull/467#discussion_r352949830) [](ancestors = 352949830)"
"Yes, it's #if false but we should still make the code not be more wrong. :smile:"
"I noticed I placed this class in the wrong namespace. I have to move it to System.IO.MemoryMappedFiles, like we have it in [netfx](https://apisof.net/catalog/System.IO.MemoryMappedFiles.MemoryMappedFileSecurity)."
"You're right, wrong assumption. Fixed."
"I'm generally marking things as nullable or not nullable based on their actual behavior to avoid ""back compat"" issues in that sense, except in a few places where it's a clear bug. For example, there's some APIs that *should* take a null, they do the wrong thing today, but I'm marking it as nullable because that's what the contract should have been and filing a bug to track actually fixing it."
note: this is wrong.  discussing with @github getting an actual CSharp9 lang version that we can test against.
"No. There are no other diagnostics.

At the moment this isn't a user visible diagnostic. This is deliberately an implementation detail because this can happen in completely well functioning build. Surfacing a real diagnostic here would essentially be giving users false and unactionable information.

In this very specific scenario, a controlled bootstrap build, we know that this is wrong and hence we can emit an error.
"
"@github I haven't looked at the ownership chain closely but I question why CommandHistory needs be a shared_ptr for this class. (and some of the other const shared_ptr references in this PR)
Take a look at [this](https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/) for guidance for shared_ptr.
I could be wrong because I haven't looked at this close enough.   The thing to look for here which classes are sharing ownership?  Those are the classes that need to have shared_ptrs.   If the class doesn't share ownership then they should be raw pointer or references.  Hope this makes sense. "
"Do we need any tests for broken code cases? My gut is saying no because the parser would parse as a parenthesized expression in various cases but I could be very, very wrong."
"That seems wrong to me or at least surprising, but if it's already been discussed and resolved then it's okay. Where did the discussion happen? 
I didn't see it in [https://github.com/dotnet/roslyn/pull/44803](https://github.com/dotnet/roslyn/pull/44803)

---
In reply to: [454465241](https://github.com/dotnet/roslyn/pull/45898#discussion_r454465241) [](ancestors = 454465241,454451705)"
"Ok so something wrong with this fix :P you need to investigate the work it's done on the tracker and this i think. "
"Only if I call `ToImmutableArray` after the `OrderBy`. Doesn't seem worth it to me, but I could be wrong..."
"the usages of the check are correct, I just renamed this wrong - I'm going to switch the impl to be the name as it makes more sense to me to do the check that way"
"My preferred API surface when smart wrappers is involved -- and this extends to WRL::ComPtr and all similar variants -- is this:

```
smart_wrapper_thing GetAThing(); // produce shared wrapper
thing GetAThing(); // produce dumb thing, see note 1
void TakeAThingOptional(thing*); // consume only -- non-owning and non-shared -- optional
void TakeAThing(thing&); // consume only -- non-owning and non-shared -- required
```

_Of course, ref vs pointer is a decision you can make for the specific type. `HKEY` is by nature optional._

Putting the `smart_wrapper` into the consuming contract forces the caller to have that type (bad) and implies some ownership semantics (dependent on the type).

(1) In general, a function that returns a smart wrapper is subject to the same restrictions as one that returns the thing directly (like `HKEY openWslRegKey`): it must ensure that if an exception is encountered before the smart wrapper is populated, it does not leak the resource. Registry functions don't _throw_, so the need for returning a smart wrapper is reduced. That makes `HKEY open...` _okay_ in my book so long as we make sure to cover the error conditions."
"Second time today GitHub has quote comments onto the wrong thread :(.

I am unsure why VS decided to add <Prefer32Bit> to only this one project.  Perhaps it is a result of the output of the project?  This is an .exe and the other 2 are Library."
"Passing `999` for milliseconds here wasn't in the original implementation.  Before, 60.5 seconds would have been adjusted to 59.5, whereas now it would be adjusted to 59.999.

Not sure if we should leave it as was before (to allow representation of partial leap seconds) or if we should use 59.9999999 as with `UtcNow` (to prevent possible out-of-order sequences), but 59.9990000 feels wrong.

Same for the other `WithLeapSecond` implementations.  (Also why do we need multiple copies of this function?)"
"Oops, the wrong working directory was specified."
Could this print any info. on what failed? I think it'd be a little bit difficult for users to understand where things went wrong from this message.
"**NB** I haven't profiled this particular case so I could be completely wrong. Also this is way off the hot loop so I doubt performance even matters at all in this case with any reasonable choice.

With that said, if the full deduplication is left in, in general since we have so few things I am willing to bet that a plain linear scan over a std::vector will be faster than a fancier algorithm or data structure."
Wrong copy and paste (:
"wrong path delimiter ;-) and likely extension (.exe or .bat ...)
"
Same: wrong comparison.
"On a second thought, I think these tests that use `ExpectEvent(watcher, 0, ...)` are wrong and instead should use `ExpectNoEvent`."
"Sorry, this looks to have tagged the wrong line.

I meant `AreUpper32BitsZero` defaulting to `true` for any instruction with a ""supported format"" which deals with a 4-byte size: https://github.com/dotnet/runtime/pull/55129/files/f058b59c7eea2d743d728dc080613e8b6c710e61#diff-6b4e0f32449f2f144e05699f59f74415a564693637f643084a896dfbd081830dR313
```cpp
// Else rely on operation size.
return (id->idOpSize() == EA_4BYTE);
```

This is basically assuming that any instruction that has a 4BYTE op size zeroes the upper bits and this isn't strictly true for every instruction. I expect its mostly correct due to most machines having the VEX encoding and due to most GPR instructions on 64-bit zeroing the upper bits for the 32-bit version, but it would also be nice if we had this explicitly codified (such as via an instruction flag)."
"Ah, I see, I missed that Tom's PR updated this project from just targeting NetCoreAppCurrent to special-casing it for Windows, Unix, and Browser.

I checked with @github.  The RID graph has all those other platforms as derivatives of Unix, so the Unix target is covering them:
https://github.com/dotnet/runtime/blob/main/src/libraries/OSGroups.json
https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/eng/targetframeworksuffix.props
We probably need to either say that these do work on those platforms (but to my knowledge signal APIs don't... I could be wrong), fix the build to special-case each of those platforms, or do so by moving this into corelib as you suggested.  The already merged PR introduced this, so I won't tackle it here; we can do it subsequently."
"something feels wrong about this fix to me.  i'd also like to see a repro/test.  calling through _original.Equals(obj) should be correct.  If not, something about hte underlying equals isn't properly handling things."
"> we normally expect this StringBuilder instance to be released unless something goes wrong during the format operation itself, correct?

Correct"
"@github It ""looks wrong"" because it is peeking at characters offset from the `at` position.
Think of `_lineBufferOffset` as where we are in the source text. 
If you examine the internal of it's overload.

```
 For i = skip To (size - 1)
     If Peek(at + i) <> chars(i - skip) Then Return False
 Next
```

chars:=""HELP""

```
source  chars{ ]
(at+1)   +0
(at+2)   +1
(at+3)   +2
(at+4)   +3
```

The overload handles most of the cases where `skip` isn't 1. Some I didn't bother with as I thought that the existing code would be better.
"
"To be clear code bringing down the process is not my area of concern.  Code is always free to bring down the process and there is literally nothing we can do to prevent it.  Analyzer could decide for example to call `Environment.FailFast` and we are powerless to stop it.  This is understood and expected.  

What I am concerned about is whether the compiler needs to be hardened against exceptions that originate from the analyzer layer.  The compiler is not hardened against that and there is no intent to do so.  This change though is making it so the compiler needs to understand exceptions can happen and react appropriately.  That is wrong.  
"
"About just putting a value there. I'm pretty sure it works only for simple getters (autoexpandable), without a custom return. In case I'm wrong then I will exchange the mechanism with your suggestion while refactoring."
"Personally, I would have left these as magic numbers of ""what's the right answer?"" vs ""well, the const was wrong, so it produced the wrong sized output... but it did so faithfully!""; but I don't feel strongly.

It's a slight bit weird that for HMACMD5 you used the MD5 (non-HMAC) const, but for the SHA ones you used the HMACSHA* ones.

But, again, it merely falls in the ""worth commenting on"" zone that's not quite at ""I have a real opinion here""."
"hmmm I was trying to mimic how normal call-expression does when there is an error. I swear I thought it goto the first declaration but I was wrong. I think then it should go to the last one

---

In reply to: [87302820](https://github.com/Microsoft/TypeScript/pull/12107#discussion_r87302820) [](ancestors = 87302820)
"
"My understanding is that the `NativeMemory` APIs are preferred when allocating memory (correct me if I am wrong), and [`Unsafe.SizeOf` gets optimized](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIAYACY8gOgBUALWbAEwEsAdgHMA3DXpNWAJQCuAjH3wwWASXkwoEAA4BlDQDc+YGLjG1GzFrPmLlAYQj4tfADYa9UQ8dM0aAbR0MKBkwDAAZbABPCBkMAAoI6NiAaUEeFj0ARxkYG2wXAEoAXRpBDA0BfIY5XGwAMxgGXCCQjAYAeQA1AFEpMIBBAAVB7oARAH1ugDk2KQBNGgBvGgZVpgBmBgBVNQxBoIYXLQcnNwUIAWSYSLM1jYYp7AV9GHaXqBdsLS0YHgAqQ5aN4aT7fX63NbETY7eT7KAMXYVfIQ1ZQ6plBg8ADuUxk+GAGnadQAQpFyrg2FBsAJcA0oLAeCjJEgGBidHwAF6vOoAWTiBQYAF4AHwMHnYKC4Dj5DKc7kAHi6vQGwzGkxm82F/KZzBZbLlRK2/KFoq2NPqynZXKJip6fSGIwm01mcy1BTMAF8aEA=).

```suggestion
                    NativeMemory.Alloc(NativeEventCapacity, Unsafe.SizeOf<Interop.Kernel32.OVERLAPPED_ENTRY>());
```"
"I know this doesn't technically affect us until there's some file in `_framework` that has the `.gz` extension naturally (not due to the compression feature you're adding here). But if we do add such a file one day, we'll get really confused about why it's being served with the wrong content type."
"Sorry, copied the wrong url: https://github.com/dotnet/roslyn-analyzers/issues/4105"
"Is this just to make sure we don't pass the wrong context type (since they all have the same name and are hard to distinguish in source code), or for a more complex reason?"
"This directory name seems pretty odd.  It's not meant for general purpose NuGetAdditionalFiles, it's assets for our NuGet compiler toolset.  Feel like this directory is misnamed or possibly just in the wrong place. "
What was wrong w/ using `DataProtectionCommonExtensions` explicitly❔ Seems you're making the opposite change in src/DataProtection/Extensions/test/DataProtectionAdvancedExtensionsTests.cs
This is assigning a new handler every time we create an instance of this type.  Seems wrong.  Feel like this needs to be done more centrally so that it's done only once per AppDomain instance.  #Resolved
":memo: This is based on the idea that #17393 is one of the following:

* A focus bug (command is sent to the wrong handler chain)
* A timing bug (command is sent before the command handler is registered)

`Activate` seemed like a low-risk way to rule out the first case."
"here's one idea: 

the part that gets confusing here is htat we're in instance methods computing new data, which we'll then use to create a totally new instance.   There's nothing per-se wrong with this.  But there's always this nagging concern in my head of: OMG, is he going to accidently mutate state of hte object.

I realize that's a somewhat silly concern as all the fields are readonly and Immutable objects.  But at teh same time, it still makes it a bit hard to reason about.

So a little suggestion i might have would be to call into some sort of static helper that computes all the new fields, and then construct the new value out of that.  Or, alternatively, have N static helpers that do nothing but interrogate the old data and return the new data for that particular field.  The top level algorithm is just:

```c#
var newXField = ComputeIncrementalUpdateToX(this.xField, args...)
var newYField = ComputeIncrementalUpdateToY(this.yField, args...)
...
return new Graph(new...);
```

This would also have hte added benefit of having each part of hte algorithm independent and easier to review.  Right now it's super hard to check to ensrue that you're not accidently using the wrong local vs. field in many of these sibling loops.

What do you think?"
"sorry, i feel dumb.  

> This is the only compiler-layer change. ReadOnlySpan<T> isn't available in the code style layer.

Where is readonlyspan used in this code?"
"> ""Cannot"" isn't strictly true. Of course it can. But that would end up being three lookups per symbol, rather than three per compilation. Do you prefer an extension method here all the same?

I would.  Three lookups seems like nothing... especially since Compilations cache these calls to GetTypeByMetadataName.  Now, if we had perf data indicating a cost here, i would feel differently.

*That said*: i'm not opposed to this PR in this form.  So don't go changing it for me :)   I was just pointing out that a bunch of this felt like premature-optimization territory, and i'd prefer to avoid that as a general principle.  But, there's nothing wrong with this work at all, and you've gotten it this far, so i'm totally ok taking as-is :)  "
"but my question is why? is there an issue having transaction outside covering everything? otherwise, transaction seems too fragile and easy to get wrong."
"This looks wrong. Won't this change cause 

`readonly ref Widget Property => ...`

To be emitted the same as 

`ref readonly Widget Proprety => ` #Resolved"
"> Forgetting CheckValidInstance is just wrong.  It means that InvalidOperationException wouldn't be thrown on a `default` value, which they should add a test for.  If they fail to add it, they'll get a NullReferenceException, and then the fix is to call CheckValidInstance and have the exception be thrown.

Sure. The point with annotating it with nullability is that the contributor will catch the issue at build time rather than at test/run time. They may not add a test (and requires PR reviewers to point it out).

> Describing the field as non-null seems to match what I want the caller code to look like (call CheckValidInstance and then know that you're happy), without caring how the nullability feature is implemented.

Sure, that's fine by me. I was mainly pointing out what we lose out by not marking it as nullable, which to me seemed like the main value prop of using the nullability feature to begin with."
"Yes, and also: The Level 1 of the specification seems most solid, whereas Level 2 and Level 3 are undergoing change.  Level 3 is proposed to be completely removed in the next version, subject to vendor feedback.  They're basically asking, ""Is this too crazy for anyone to implement?""

They've seemed to have taken feedback from EcmaScript Tc39 as some basic guideline on what's reasonable, as part of JavaScript's major contribution to humanity in the last decade: making sure you can Regex match emojis via RegEx character class:

```javascript
const reRgiEmoji = /\p{RGI_Emoji}/u;
```"
"```suggestion
        internal void SetWorkspaceAndRaiseEvents(Workspace? workspace)
```

Due to this:

https://github.com/dotnet/roslyn/blob/7daa213b210ba67d7eef65848cb27b0bfadda4de/src/Workspaces/Core/Portable/Workspace/Workspace_Registration.cs#L65

That other file might be tricky to annotate, but didn't want to leave this one ""obviously wrong""."
"Also, I think `Range` is the wrong class to use here because the `Range` is not guaranteed to be on the current line number. This rendering code is line number agnostic to allow for optimizations in cases like pressing Enter... so I would like to please remove the `lineNumber` ""knowledge"" out of here. I suggest to create something like:

```ts
class LineRange { 
	public readonly startIndex; // or startOffset
	public readonly length; // or perhaps endIndex, endOffset
}
```

You can create a new class that only contains the info captured in `startColumn` and `endColumn`. I also tried to leave the `column` world behind in these methods and talk about character offsets so that's why I recommend using `offset` or `index` and not `column` in the above suggested class. When I wrote this code I was a big fan of calling everything index, in the meantime I have a better preference towards offset when talking about a position inside a string and a preference towards index when talking about a position inside an array..."
Another thought: The Unix PAL may be a wrong places for these redirects. Doing the redirects for PAL would not work on Windows - there is no Unix PAL on Windows. Would it be better to do these redirects in `LoadNativeLibraryBySearch` ?
"I assumed that an instance of XmlEmptyNavigator would never call `GetAttribute` nor `GetNamespace` methods but I could be wrong.
I can change this to have a `Debug.Fail` to prove such point."
"Sorry, line numbers may be wrong. VS diff isn't smart to keep track in inline-diff view..."
"Happens automatically; been using it to try to workout what was wrong with the packaging for the trimming tests in the very many commits of https://github.com/dotnet/runtime/pull/40877; which were from missing a few build steps to deal with the `net5.0`+`net5.0-Browser` which was choking NuGet

![image](https://user-images.githubusercontent.com/1142958/90801261-97423500-e30d-11ea-9423-dac960519367.png)
"
"> there are a good amount of places in the application that do it like this

Oh, I know. Those places are wrong. :("
"> I think it's better called ""git.openAfterClone"" or something, current name doesn't express that ""you can open the folder"".

@github  Yes, you are right. I think that current name is not the best. I will work on it.

> And it looks like you didn't set your Git credentials correctly (probably wrong email), so GitHub doesn't link your commits to your profile.

Yes I've recently changed my email address. I am working to fix this issue.

"
"@github You're right, I changed the wrong setting! It is in fact working for me."
Actually I might be wrong.. cause for some reason SwitchToTabCommand stores index rather than the tab itself.. Checking..
"Questions that came up today

- Jupyter can update outputs from a background Thread, after the cell has finished ""running"". To update outputs without a WorkspaceEdit they can create a dummy Task for that cell, we had discussed this possibility earlier, but it results in blinking the run state and execution order, so I can try to delay/debounce that or we can just live with it 
- The output methods on the Task are not correct for modifying outputs on other cells, need to be able to pass in an index
  - Jupyter only needs replaceOutputItems for modifying outputs on other cells, but do we want the full set of methods for setting outputs and output items on the Task's cell and other cells? This would be 8 in total.
- What is the right way to guarantee that edits will be applied? I added a method that applies edits without checking the model version, but this is wrong, because edits use an index that could be invalid. I think we just have to loop retrying to apply these from the EH. If edits used a URI instead of a cell index maybe it would work to just force apply the edit."
"The FD standard specifies `file://localhost/some/path` or `file:///some/path` but allows `file://some/path` for bug-compatiblity, if I recall the research from the other OSC 7 PR. I think `file://myhost/some/path` was messy, because if I recall correctly, the FD spec would be looking for `/myhost/some/path` on the local system (`file://` can only refer to local system file paths in the FD spec, so this falls into the back-compat processing) while on Windows, `file://myhost/some/path` means `\\myhost\some\path`, i.e. a UNC path using the hostname as the hostname.

Windows is happy with `file://localhost/C:/games` and `file:///C:/games` and takes them both as 'local' when asked via ""Run"".

So `file://WIN-DESKTOP-1/D:` would be very likely to be invalid, as I don't think a CIFS share can have `:` in its name. (I could be wrong. Either way, it's certainly not what the user intended).

I think my suggestion at the time was to receive a URL, and if the hostname was the local system name, replace it with `localhost` before letting any Windows APIs see it.

It all gets super-messy with WSL though, as `file://wsl$/Ubuntu/home/users` is the correct file URL for `/home/users` in the Ubuntu WSL instance, but there was definitely _strong_ objection to using `file:$(wslpath -m ${PWD})` to generate this, in favour of some magic at another level so that the WSL environment could ignore that it was in WSL when generating OSC 7."
"wow crazy how many times we were actually using the guid in the return value of this function too. Shame WinRT won't let us return the pair. Shame. "
"this seems wrong.  the previous logic would dive into the child if it was a node.  indicating that this was a DFS type walk.  the current logic puts it at the end, indicating more of a BFS approach to the nodes.  "
"We can't use indexed type parameters because (1) they don't have names, and (2) they don't have constraints (so the logic in `AreParameterAnnotationsCompatible` which simulates an assignment produces wrong values/states in `GetParameterState`).
We could fix the first problem by introducing a new type parameter symbol. But the second problem is tougher, and I don't see a good way to solve it. 
So using a new annotation seems a better fit to solve this problem. #Resolved"
Indentation is wrong.
fwiw this is some unusual layering -- giving the general interface knowledge of D2D primitives seems like the wrong way to go given that 4/6 of the engines _aren't D2D-based_
"this feels super weird.  you're updating the full solution, but then you go back and use old diagnositcs against new document.  how is that safe/  won't the positions be wrong?"
"Why do we have this restriction? I can't exactly see a good reason to have both but it doesn't seem inherently wrong to do so either. "
"This comment is wrong in multiple ways -- it's not a byte array, it can't be null.

Is this just copied from existing docs? If so, please add it to the existing overloads, and then revise this one to be appropriate for the new overload."
">this.CurrentToken.Kind == SyntaxKind.ColonColonToken; [](start = 30, length = 53)

I understand that there is no change in behavior for this line, but I am curious. Is it possible that we skip more than just an identifier token here and stop at ```::``` token? It feels like it would be wrong to set ```isAlias``` to true in that case. #Closed"
"Yeah, this is a very fair concern, any project level change might be problematic in current design. Additionally, I think we could end up caching ""wrong"" diagnostics in IDE caused by incorrect project restore, which user fixed in commandline w/o changes to projects. I don't have a good solution to this at the moment."
"I swear I'm not crazy. On my machine (with 16.7.1) it says that `erase` is `noexcept` despite the CI failing the static analysis build saying it is not:

![image](https://user-images.githubusercontent.com/18221333/90536836-6dccb200-e131-11ea-81ef-cbcfcccd70eb.png)
"
"This negation is confusing, probably wrong? If `DOTNET_SYSTEM_IO_USELEGACYFILESTREAM=1`, then `UseLegacyStrategy=false`."
And src/Workspaces/Core/Portable/Serialization/SerializationExtensions.cs too...since this is test only I don't terribly have a problem with this. The alternative is write the crazy multiple times.
"> > @github msftbot bot deleted the branch **main** 2 hours ago
> 
> 😱 what just happened ?

HAHAHAHAHA

I guess github has an event type for ""deleted base branch""... so if you reopen it, and then CHANGE the base branch . . . it gets the wrong name"
"This method should handle the error cases explicitly only, I still posit that property should never be null, maybe instance can be null, but something has gone really wrong if null gets into GetPropertyName, so you don't want to swallow that kind of exception.  I don't believe we check for property to be non null elseware, so you could just drop the check and let it null ref too."
"@github  mmm let me doublecheck the generated code because then we have some wrong bindings, shouldn't it get it from BaseType if it exists?"
"> Note that it doesn't scroll when the content reaches the bottom - it just seems to clamp everything.


_wat_. Yep, I see that. Wonder what I did wrong here. "
"The more I read the Teams thread and the documentation for `AssemblyLoadContext` the more I think we should just go with the allow list approach here. Imagine if we built the allow list and then integrated it into `AnalyzerAssemblyLoader.ShouldLoad`. That makes the logic here a lot more simple, it's a simple `ShouldLoad` check to determine whose responsibility it is to load. 

The other reason comes down to the invariants around `AssemblyLoadContext`. Specifically [this one](https://docs.microsoft.com/en-us/dotnet/core/dependency-loading/understanding-assemblyloadcontext): 

> Be repeatable. A query for a specific dependency must always result in the same response. The same loaded dependency instance must be returned. This requirement is fundamental for cache consistency. For managed assemblies in particular, we're creating an Assembly cache. The cache key is a simple assembly name, AssemblyName.Name.

The current implementation is not going to meet that because it's using the runtime state of the default `AssemblyLoadContext` to determine the load behavior in the child one. As the runtime state evolves the answers in the child `AssemblyLoadContext` will change. Hence we violate this invariant. 

Sorry to go back and forth on this one. It wasn't until this morning where I was re-reading the thread, doing some experiments and re-reading the docs that I saw this invariant and realized we may be on the wrong path here."
"Can't quite tell, but it appears SendUnableToUpdateRuleSetNotification is going to pop a dialog, which means we need to have done TakeOwnership() on the original UIThreadOperationContext or we might end up with dialogs improperly stacked. This may have worked fine before since I think (the diff is crazy to read) that we were only showing a threaded wait dialog in the one branch, as opposed to starting it right away."
"I see what you mean, and understand your concerns 👌 Following the same logical argument as earlier, I think it is correct not to log _Application started. Press Ctrl+C to shut down._, since the application did not transit from starting to started state. I definitely think this can be made clearer by adding logging, as you suggest.

A few thoughts on your cache example:

1. I don't think it is unreasonable to ask the developer to check the state of the host (using `IHostApplicationLifetime`) here. Correct me if I'm wrong, but it is the one source of truth for the host's state. I understand that what I'm suggesting is a changed behavior. It would be interesting to know how common of a scenario it is to have code like that in combination with a call to `StopApplication` made in a hosted service. 
2. If we would throw on `_applicationLifetime.ApplicationStopping` instead of returning, the behavior changes from how it works today, as it is currently possible that all hosted services starts even though the application is instructed to stop.
3. A wild idea, that probably is not feasible:  It is possible to decorate the host's `IServiceProvider` so that if services are resolved from a not fully started host, it logs a warning before resolving the service, or perhaps it should not be possible to resolve services if the start is interrupted? This is probably overkill, and the logging from the incomplete start would probably suffice - just widening the solution space 😆 "
"This was merged in https://github.com/dotnet/runtime-assets/pull/143

However, I am having trouble restoring this package locally. I get the following error when I do `build.cmd -vs System.Runtime`:

```
D:\repos\runtime_2\src\libraries\System.Runtime\tests\System.Runtime.Tests.csproj : error NU1101: Unable to find package System.Runtime.NumericsTestData. No packages exist with this id in source(s): dotnet-eng, dotnet-public, dotnet-tools, dotnet6, dotnet6-transport, richnav [D:\repos\runtime_2\src\libraries\System.Runtime\System.Runtime.sln]
```

What am I doing wrong? @github @github "
"That's the wrong path for .NET, this is the correct one:

```suggestion
				return Path.Combine (GetSDKRoot (), ""lib"", ""Xamarin.Apple.BindingAttributes.dll"");
```

and that's the right value for all platforms, so this can go at the top of the method, something like this:

```csharp
if (IsDotNet)
    return Path.Combine (GetSDKRoot (), ""lib"", ""Xamarin.Apple.BindingAttributes.dll"");
```"
I'm assuming this is one of the places that the attributes were wrong?
"this is teh same issue as https://github.com/dotnet/roslyn/pull/59586/files#diff-5f6cf0794827f40d6b8b8abae0080ef94419f1cffc0d7343a0c21fcf6c6ceb9fR483

Specifically, our tests end up creating a CodeFixService with codefixproviders that have no CodeFixMetadata on them.  So we end up not knowing anything about them and these later bits of code have to be resilient to that.  I don't know if htis is intentional and the real codefixservice is supposed to be able to handle thsi.  Or if this is jsut a case of badly behaving tests doing the wrong thing."
"It's unlikely to break in this PR as we are always dealing with methodref here. But this is the standard pattern I found for digging into names. Felt wrong to delete it, hit the break ltare and have someone sleuth to find the correct one "
"I think we need to only set isFinalized when both IsFullyLoaded is true _and_ the getcompilation task for the fully loaded solution is done (I think)

Otherwise the project might be fully loaded, but the compilation not complete so we give razor wrong tokens and cache wrong tokens"
"This parse and diagnostic are just awful. I know you're not really changing it that much, but this is just wrong."
"Correct me if I'm wrong, but if we got past the previous check, so we know there are no new projects, we can therefore just check if `oldSolution.Projects.Count == newSolution.Projects.Count`, right?"
"There was a bug for a while where the default for an option was wrong, and when we fixed it many people had the wrong value persisted already.  Go to Tools\Options\Text Editor\C#\Formatting\Indentation and make sure both ""Indent case labels"" and ""Indent case contents"" are checked.
"
"> with this change I assume we will swap the `(col, row)` in the error message with `(row, col)` for XSLT, it will be more consistent with rest of the XML but it will produce different message than on older versions.

no, pr is simply fixing 4th and 5th arguments which were wrong before:
https://github.com/dotnet/runtime/blob/08aff106db7ddbb58cc341ce6a178cec4cd516ef/src/libraries/System.Private.Xml/src/System/Xml/Xslt/XsltException.cs#L86
"
"`parseDelimitedList` is called in a lot of different places, so it seems wrong to put something in here that would only be used in one particular situation. It also looks like this would be the only place in the parser that we compare `parsingContext` to a particular value. Could this be moved into the `parseElement` handler?"
"It doesn't make them wrong either. I can follow up cleaning up both helpers. For now I'm gonna keep it in sync.
"
"That’s what I currently have, it’s just that none of the existing SortText members describe the scenario, and I think I recall that adding a new one messed something up for @github one time, but he can correct me if that’s wrong."
"This is wrong. The call to `Release` should be done in `CreateIfSupported()` after the call to `QueryInterface()` is made. I would add the following line after the `QueryInterface()` call but before the `if` check.

`Marshal.Release(ptr);`"
"This one is reverting the state as if the d.ts signature was computed for the nominal.ts : That is as if buildinfo was generated before #43314
Having said that exportedModulesMap is a list of files that are imported/referenced in .d.ts so any change to those files changes their d.ts as well indirectly.
So looking at this, it does look like type.d.ts is needed in nominal.ts so i will check whats wrong.. But whatever it is, it has been that way from start.. (#39645) adds this test and its same."
"The test wasn't wrong, it was just very confusing because the code was in a CJS file. I've updated the check there."
"> So this is wrong anyway. Example:

I'm not sure what i'm looking at here.  Can you clarify?"
"It is a grammar error and this is where the modifiers are checked. 

EDIT: this is completely wrong, Sorry.
"
"That's a good idea, but I looked around and didn't see an easy way to distinguish `globalNumberType`, for example, from any other type. Any ideas? I could add a function to check if `type === globalNumberType || type === ...`, but that seems like the wrong approach.
"
"We are leaving support for custom Promise return types for ES5 and earlier which do not have a global Promise, so we want to keep the same argument list. The default behavior now will be to use the Promise captured in the same scope as `__awaiter`. This is to avoid issues when creating closures in namespaces:

``` ts
// input.ts
export namespace x {
  var Promise = ""Not a Promise constructor."";
  async function f(): Promise { // references global Promise type
  }
}

// output.js
var __awaiter = ...; // captures global Promise here
export var x = (function (x) {
  var Promise = ""Not a Promise constructor.""; // local Promise var shadows global Promise
  function f() {
    // Before this change, we would capture Promise here, which would be the wrong Promise:
    // return __awaiter(this, void 0, Promise, function *() { });

    // After this change, we use the Promise captured at the top-level of the module.
    return __awaiter(this, void 0, void 0, function *() { });
  }
})(x || (x = {}));
```
"
"Tagging subscribers to this area: @github/ncl
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

I noticed two byte encoding is wrong. Usable bits is 14, not 16 - https://tools.ietf.org/html/draft-ietf-quic-transport-16#section-16

Also adds const field that aspnetcore will use to calculate header sizes.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>JamesNK</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Net.Http`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

SIGSEGV occur in src/vm/i386/cgenx86.cpp `HelperMethodFrame::UpdateRegDisplay()` at line `pRD->pCurrentContext->Eip = pRD->ControlPC = m_MachState.GetRetAddr();`, since `pRD->pCurrentContext` is NULL.
https://github.com/dotnet/runtime/blob/7691aa88ef3e7837e903ce95389e38a112a981c9/src/coreclr/vm/i386/cgenx86.cpp#L328

The point of issue - wrong code block compilation in DebuggerWalkStack() in case of Linux x86.
https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/coreclr/debug/ee/frameinfo.cpp#L2106-L2123


CC @github

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>viewizard</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Diagnostics-coreclr`, `community-contribution`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
Sorry I merged something wrong and so GitHub automatically added you as a reviewer.
"I would ask for your apologies for the rant you’re about to read, but after 6 years and all the patience I can muster, I believe I’ve earned it.

The original issue and PR for this bug is about to celebrate it’s SEVENTH BIRTHDAY. Over that time Skye and I have expended **so much energy** trying to get this over the finish line. It is incredibly disappointing that there are so many at Microsoft *continuing* to get in the way of getting this done.

.NET Core was sold to us developers as a way to break from the past, and major releases were going to be places where breaking changes could be made. Yet for 6 years I’ve continued to hear excuse after excuse. To quote Yoda, “always with you it cannot be done.”

Had this been fixed with .NET Core 2 when I submitted the first PR, MAUI and the other platforms would have dealt with it when they were being built, and WPF would have been fixed when it was being migrated. But it was punted to .NET Core 3.

Then, after the PR was already accepted and integrated, I was told WPF was already late and had too many bugs to be able to get the work done in time for the .NET Core 3 release. Our work was held up because the WPF team over-promised and couldn’t get its act together. Victory was ripped away from us at the last possible second.

In the time since, instead of guiding people building new frameworks like MAUI towards making decisions that would allow this work to get done more easily, Microsoft finds time to invest in things like “Minimal APIs” that only marginally impact developers.

So you’ll have to forgive me if, after missing it in .NET Core 2, 3, 5, 6, AND 7, that maybe I don’t believe we’ll see it in .NET 8.

It’s cool though. Maybe we’ll see this get fixed by the time .NET 12 rolls around. In the meantime, I’ll just continue to wonder how anyone EVER let WPF get past a code review with exceptions being thrown in event handlers, and why it seems like the same people are being allowed to hold back amazing frameworks like Blazor from taking advantage of these features.

@github thank you so much for your efforts. I can only imagine the emotional toll that having your status as “.NET contributor” ripped away year after year after effing year has had on you. It sucks having so many people stand in the way of something so obviously broken."
"> That way we can fix violations (slowly-slowly) and can increase community contributions as well!

Contributions that just move a brace from one line to the next aren't particularly interesting to us; we even ask that PRs just about style not be submitted:
https://github.com/dotnet/runtime/blob/main/CONTRIBUTING.md#dos-and-donts
""DON'T make PRs for style changes.""

By rough search, there are ~34,000 cases of a `{` in the ""wrong"" place.  It's not a good use of anyone's time to proactively move those to their own line nor review PRs to do so, nor a good use of our CI resources to validate such changes."
"For now the entry assembly isn't the right assembly in some key scenarios: if you're using multi-project scenarios then the entry assembly will either be null, or will be the wrong assembly (e.g. MyApp.WinUI.dll), whereas we need MyApp.dll.

But, yes, with MauiAssets, this wouldn't be needed at all, because MauiAssets itself will always Do The Needful™."
"This was using the wrong build targets. Regardless, writing an explicit Import is way easier to follow. Took me a while to realize setting this property resulted in side-effects."
"The supposed convention you mention is _wrong_ and isn't used in most of our infrastructure. The problem is it prevents use of the explicit `/p:EnforceE2ETestPrerequisites=false` on the command line: An empty property means use the default, not `false`."
"Hmm, that's not the behavior I remember observing, but I could be wrong."
"> Spicy thought, instead of doing this, we could code-generate this class as part of the compiler work

Hmmm....what's the benefit of doing this?

> I'm confused as to how this get wires up right now.

The `ConsolidatedAssemblyApplicationPartFactory` isn't used anywhere at the moment. Eventually, we'll be including the compiled views in the application assembly, which will be stamped stamped with a `ConsolidatedAssembly` attribute, and then using this API to look for `RazorCompiledItem`s that are baked into the app assembly, in addition to it's own types.

@github Correct me if I got any details wrong."
"Why are these `""suppressParent"": ""all""`? I understand the RoslynDependencies* ones might be due to us not having proper packages so they can't ""flow"" like a NuGet package should and handle versioning with higher versioned and shipped packages.

(I'm not asking because I think it's _wrong_, it's just because I can't read your mind.)"
"It seems like a lot of the binaries changed locations though based on the path changes in the file.  Won't that affect internal references?  

I'm making a lot of assumptions about how this file is used.  Could be very wrong :( "
"How should I localize it?
I only see localizations for comments.

What's wrong with `bar` and `baz`?
"
"Well, either block, which can be bad/dead-locky, or throw! This whole problem came about because the ServiceScope thing _throws_ if you call the wrong one."
">// (10,17): warning CS0028: 'Program.Main()' has the wrong signature to be an entry point [](start = 16, length = 89)

Please add a prototype comment to make this diagnostics more specific. #Closed"
"@github Yes, I thought I had fixed these up in features/IOperation, but master still has the wrong expected dump for these tests."
"💭 Whoever wrote this was wrong 😆 "
"Hmmm, this PR changes versions used by the gRPC interop tests website - https://github.com/dotnet/aspnetcore/pull/25790/files#diff-016fa755746abada907d870814dee7c8

I wonder if this might be the cause of gRPC interop tests failing in my PR - https://github.com/dotnet/aspnetcore/pull/25587

Offline discussion with @github:

> I'm trying to update the gRPC template with a new package version for RC2. It uses new fields added to HeaderNames and the interop tests are failing because they not in the aspnetcore runtime that it is using. This is blocking me from merging for RC2.
> 
> The test writes assembly versions in the logs and this is what the server reports:
> 
>   NetCoreAppVersion: 5.0.0-rc.1.20371.13+d8cf13e0ba9b369a15a83472b6b97463c6d07fe2
>   AspNetCoreAppVersion: 5.0.0-rc.1.20379.2
> 
> Oddly, the client writes a different version:
> 
>   NetCoreAppVersion: 5.0.0-rc.2.20458.14+482494f9ecc9a630599278b80893841462c90a5b
> 
> It looks like the server is using a wrong version. It reports RC1 and this PR is targeting the RC2 branch.

Possible fix John added to that PR - [`29a835f` (#25587)](https://github.com/dotnet/aspnetcore/pull/25587/commits/29a835f7a41ddccae69ad3e26f2b0f95c4053a8c)

Could this issue be the cause instead?"
"Anyone who wants to know ""what are these spans valid against"".  Right now we just say things like ""there is an error in document 'Foo.cs' at span 1-5"".  But that is lossy data.  Clients who get this data can't properly know if that span is accurate.  For example, if someone wanted to navigate there, it could put the caret in the wrong place.  

--

I would turn it around.  Right now we lose data, assuming that no one wants it.  But i think that's wrong.  I think people care greatly about the spans for diagnostics, especially knowing where they actually are.

Roslyn has been built hugely on hte non-lossy snapshot model of the world.  We don't have any other APIs that say things like ""here's data associated with some non-snapshot concept"".  i.e. we don't say ""here's the tree for this filename"" or ""here's the semantic model for this document id"".  We always associate data with a real snapshot so we know it is accurate, and also so we can appropriately map between snapshots in a cohesive manner."
"Sorry I was missing full context on the previous conversation: should this just be GetTextAsync? In theory still instant, but if we're wrong it's less terrible?

(still OK with this more than TryGetText)"
"Oops, wrong reference. Issue is #36854"
"Hum, this does seem wrong. I would think that both checks should be:
```
if (<options changed>&& (!CanApplyChange() || !CanApplyXyzOptionChange()) ...
```
I'll let @github confirm, since I'm not very familiar with workspaces.

---
In reply to: [178513336](https://github.com/dotnet/roslyn/pull/25875#discussion_r178513336) [](ancestors = 178513336)"
"> I think the type should be inferred from the property itself down when generating a named constant but not the other way around. I just don't see how that's useful.

I have given two concrete examples of how i think it would be useful to some subsets of our customer base.  That is sufficient to me.  I see no reason to think that that pattern matching will not *commonly* be used for this case.  i.e. someone simply wants to deconstruct, and they just like explicit types.  As such, they will do ```X: type x, Y: type y, ...``` as the *norm* for how they deconstruct.  Inferring thusly what the types of X and Y are seems very sensible to me. 

In the case where we're wrong, the user fixes up the type.  That's the same with the type-inferred *already* today.  THis is 100% a heuristic-based approach to *guess* at what we think is the most reasonable thing to infer.  It's often wrong because the user intends something different.  That's ok."
"@github either my english is wrong or we have some misunderstanding. if JTF.Run(... delegate ) runs the delegate in threadpool, then current code should be fine. UI thread never holds the private lock. GetService doesn't acquire lock only GetServiceAsync does. and it does before switching to UI thread. so when JTF switch to UI thread under Run, there should be no deadlock situation."
"I made a compiler change to report the error on the base type instead of the deriving type declaration. I think this is better for a few reasons:
- It just seems better for clarity. If I see a squiggle on the base type, I immediately know where the problem is, but seeing a squiggle on the type declaration doesn't give me much of an idea as to what could be wrong. The problem is really with the base type, so why not make the location more specific to that?
- In case of a partial class, the current location might not even be at the same declaration. I don't think it's a good experience to show a squiggle for a problem that's in a completely different location.
- Other errors that have to do with invalid bases already report a location of the base itself, see below for `ERR_StaticDerivedFromNonObject`, `ERR_DuplicateInterfaceInBaseList` etc.
- This is what VB does as well."
"That didn't change from the call above? The comment ""verify that objOutputPath changes"" implies it should have (or the comment is wrong)"
"fwiw I don't think `1` is a sensible value here - `96` would be more appropriate, but leaving it as `1` would definitely do something obviously wrong if we ever tried using it before initializing"
Not 100% sure this won't break VS2012 since I'm not sure if that IDE can load v4.5.1 assemblies (afaik VS2012 was released before v4.5.1 was out... I'm happy to be wrong though :) ). It will need testing.
"> this is also the first of possibly many format-specific options like ""do italics work? 

crazy that you say that - it's exactly why I gave it a whole section. I could have sworn there was a feature request for ""disable italics"" but I couldn't find it."
"I gave you a wrong explanation, we are not adding it, we are actually only removing it from api 24 to api 28
we replace lines like:

`<remove-node path=""/api/package[@github='android.media']/interface[@github='AudioRouting']"" />`

to

`<remove-node path=""/api/package[@github='android.media']/interface[@github='AudioRouting']"" api-since=""24"" api-until=""28""/>`

the issue was introduced when we fixed: https://github.com/xamarin/java.interop/commit/7a31216bfec938a15fb915b959ced6ef6a1a7dc4
"
"IIRC we explicitly need the `-prerelease` versions of the MUX package to get the symbols hooked up right? I might be wrong on that, but I think there was a reason. "
"```suggestion
        //           Activity.DefaultIdFormat, Activity.Create(idFormat), Activity.Current.IdFormat,   parent id,  default parent context, validate trace Id,  expected create format, expected start format
        //           (ForceIdFormat=true)
```
I got the wrong idea about what these columns meant until I reverse engineered it from the source. This might help clarify the intent."
"And you know what, I did try just adding `$(OpenConsoleDir)\cascadia\TerminalApp\lib\;` to `<AdditionalIncludeDirectories>` in `TerminalApp.vcxproj`, and removing the `lib/pch.h` line from TerminalPage.cpp, but that gave me the same list of Intellisense errors as always. Maybe I'm doing it wrong?"
"This only has a couple runtime test failures:
```
07-27 15:40:11.583  3847  3867 I NUnit   : 1) System.NetTests.NetworkInterfacesTest.DotNetInterfacesShouldEqualJavaInterfaces (Mono.Android.NET-Tests)
07-27 15:40:11.583  3847  3867 I NUnit   : System.Net.NetworkInformation.NetworkInformationException : No such file or directory
07-27 15:40:11.583  3847  3867 I NUnit   :    at System.Net.NetworkInformation.LinuxNetworkInterface.GetLinuxNetworkInterfaces() in System.Net.NetworkInformation.dll:token 0x600009b+0x40
07-27 15:40:11.583  3847  3867 I NUnit   :    at System.Net.NetworkInformation.NetworkInterfacePal.GetAllNetworkInterfaces() in System.Net.NetworkInformation.dll:token 0x6000098+0x0
07-27 15:40:11.583  3847  3867 I NUnit   :    at System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces() in System.Net.NetworkInformation.dll:token 0x600004e+0x0
07-27 15:40:11.583  3847  3867 I NUnit   :    at System.NetTests.NetworkInterfacesTest.DotNetInterfacesShouldEqualJavaInterfaces() in Mono.Android.NET-Tests.dll:token 0x6000133+0x0
07-27 15:40:11.583  3847  3867 I NUnit   :    at System.Reflection.RuntimeMethodInfo.Invoke(Object , BindingFlags , Binder , Object[] , CultureInfo ) in System.Private.CoreLib.dll:token 0x600283b+0x6a
```
Then:
```
07-27 15:40:11.583  3847  3867 I NUnit   : 2) SystemTests.AppDomainTest.DateTime_Now_Works (Mono.Android.NET-Tests)
07-27 15:40:11.583  3847  3867 I NUnit   : System.PlatformNotSupportedException : PlatformNotSupported_AppDomains
07-27 15:40:11.583  3847  3867 I NUnit   :    at System.AppDomain.CreateDomain(String ) in System.Private.CoreLib.dll:token 0x6000656+0x13
07-27 15:40:11.583  3847  3867 I NUnit   :    at SystemTests.AppDomainTest.DateTime_Now_Works() in Mono.Android.NET-Tests.dll:token 0x600007b+0xa
07-27 15:40:11.583  3847  3867 I NUnit   :    at System.Reflection.RuntimeMethodInfo.Invoke(Object , BindingFlags , Binder , Object[] , CultureInfo ) in System.Private.CoreLib.dll:token 0x600283b+0x6a
```

https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=5024995&view=results

I have a mistake where the test results file is wrong, looking into that:

```
##[warning]No test result files matching TestResult-Mono.Android.NET_Tests-Release-Aot.xml were found.
```"
"> I've written this 5 days ago in the ticket 😛

Yea you're not wrong. I thought I could solve it quick without reading 🤦‍♂️ 

As a team, we thought maybe the best way to go about this would be to do just the tab switching solution for the timeframe of 1.6, and come back to this discussion for 1.7. @github You still cool spinning up that fix?"
I agree. But the original spacing was _wrong_ spaces instead of tabs.
"I dont think so, but I might be wrong. That `*REMOVED*` entry is from the shipped.txt (from 16.9). I've added a new optional parameter, and added an overload for binary compat (as described here: https://github.com/dotnet/roslyn/blob/main/docs/Adding%20Optional%20Parameters%20in%20Public%20API.md)"
"I can't think of a reason why System.Runtime.Serialization.Xml.Tests would need the NoWarn.

If it's explicitly testing serialization for one of the obsoleted types, a pragma around that/those test(s) is more appropriate.  Otherwise, it would probably be a place that's doing the old/wrong pattern that should be updated to better code."
">Diagnostic [](http://example.com/codeflow?start=16&length=10)

The alignment looks wrong. #Closed"
"we are calling GenTreeCast constructor:
https://github.com/dotnet/runtime/blob/419765391c14cb12366ee111b16e91a481ef7bc7/src/coreclr/jit/gentree.h#L3531-L3535
and after that we call `CanonicalizeCastNode` to clear the flag in some cases, is it worth it?
One option is to do 
```
inline GenTreeCast* Compiler::gtNewCastNode(var_types typ, GenTree* op1, bool fromUnsigned, var_types castType)
{
  if (varTypeIsFloating(cast->CastOp())) { fromUnsigned = false; }
  GenTreeCast* cast = new (this, GT_CAST) GenTreeCast(typ, op1, fromUnsigned, castType);
```

or add this logic to `GenTreeCast` constructor (note it will affect more cases then).

Often I set conditional breakpoints on flag values so I would prefer not to change it back and forth without a reason.

Have you tried to add `assert(!varTypeIsFloating(cast->CastOp() || !fromUnsigned)` and fix the callers who call it with wrong value of `bool fromUnsigned`?"
"> _If this was not explicitly discussed during the API review_

We did mention that Windows differentiates between a symlink to a file and a symlink to a directory, hence why we needed to have separate creation APIs for directories and for files.

> _having this check and subsequent throw requires processing in user code (try-catch)_

We want to throw an exception because we think it's safer to tell the user early that they are using the wrong API for creating a symlink to the desired target.

> _it can be argued that a link is almost always created in a situation where the target is well known. I can't even think of a scenario where someone creates a link without knowing anything about the target._

I would consider this an argument in favor of throwing to let the user know they are creating a symlink using the wrong API, especially since they know the file was either a file or a directory.

Here are a couple of examples of the `mklink` command with the wrong target.

<details>
  <summary>Creating a directory link that points to a file</summary>

  ```
D:\repos\tests\symlinks>dir

 Directory of D:\repos\tests\symlinks

2021-06-22  09:09 PM    <DIR>          .
2021-06-22  09:09 PM    <DIR>          ..
2021-05-28  01:24 PM                 5 file.txt
2021-05-28  01:25 PM    <DIR>          folder
               1 File(s)              5 bytes
               3 Dir(s)  83,665,231,872 bytes free

D:\repos\tests\symlinks>mklink /d linkdir file.txt
symbolic link created for linkdir <<===>> file.txt
  ```
  Notice it says `<SYMLINKD>`:
  ```
D:\repos\tests\symlinks>dir

 Directory of D:\repos\tests\symlinks

2021-06-22  09:09 PM    <DIR>          .
2021-06-22  09:09 PM    <DIR>          ..
2021-05-28  01:24 PM                 5 file.txt
2021-05-28  01:25 PM    <DIR>          folder
2021-06-22  09:09 PM    <SYMLINKD>     linkdir [file.txt]
               1 File(s)              5 bytes
               4 Dir(s)  83,665,231,872 bytes free

D:\repos\tests\symlinks>cd linkdir
The directory name is invalid.
  ```
</details>

<details>
  <summary>Creating a file link that points to a directory</summary>

  ```
D:\repos\tests\symlinks>mklink linkfile folder
symbolic link created for linkfile <<===>> folder
  ```
  Notice it says `<SYMLINK>`:
  ```
D:\repos\tests\symlinks>dir

 Directory of D:\repos\tests\symlinks

2021-06-22  09:09 PM    <DIR>          .
2021-06-22  09:09 PM    <DIR>          ..
2021-05-28  01:24 PM                 5 file.txt
2021-05-28  01:25 PM    <DIR>          folder
2021-06-22  09:09 PM    <SYMLINKD>     linkdir [file.txt]
2021-06-22  09:09 PM    <SYMLINK>      linkfile [folder]
               2 File(s)              5 bytes
               4 Dir(s)  83,665,231,872 bytes free

D:\repos\tests\symlinks>cd linkfile
The directory name is invalid.
  ```
</details>"
i have.  and the FinalCompilationWithGeneratedDocuments is non-nullable.  the contract call is to really just have us die if we're wrong.
Was this just wrong before?
"I guess I am just crazy, because I saw failures this morning when trying to get rid of this.

Except...I didn't just try to get rid of it, I tried to refactor it earlier in the function. So I guess it is indeed vestigial from my work yesterday."
"> for instance var { x } = foo() if foo had side effects, then deleting it would be wrong..

But that's exactly what we do for `var x = foo()`... I think it's better to assume that any side effects are unwanted, since the function was being called for a result *before* and not merely for a side effect -- the situation is similar to #17624."
But then using this is wrong if host provided custom resolution.... Because it completely ignore's host;s resolve module name.
"this was wrong--for the expression `numberPromise.then(n => n.toString())`, it would infer `Promise<string>` not `Promise<number>` for `numberPromise`."
"We need to separate the `object` input type out into a subsequent overload as otherwise it also matches a `Function` input value, i.e.

```ts
const a: string = JSON.stringify(() => null); // This is wrong
const b: undefined = JSON.stringify(() => null);
// Type 'string' is not assignable to type 'undefined'.
```

Separating out the overloads means that we don't need to make the type unnecessarily non-specific:

```ts
const c: string = JSON.stringify({...}); // 👍 
const d: string = JSON.stringify(new Object()); // 👍
const e: string = JSON.stringify(x as any);
// Type 'string | undefined' is not assignable to type 'string'. 👍
const f: string = JSON.stringify(() => null);
// Type 'undefined' is not assignable to type 'string'. 👍 
```
"
"I'd rather not touch it in this PR, but create a follow-up PR in the next days instead.

* Create named types for the options above, remove duplicate `""best fit""`
* Investigate if `ResolvedDateTimeFormatOptions` is even correct (at a first glance, it seems wrong, but might be to match some unique browser behavior?)

Feel free to disagree, I can also tackle them here"
"Yup, that is wrong.
"
"> Resolves #33309
> Contributes towards #33308 (All the work items under BitArray)
> 
> Due to network issues I have with the home network I was not run able to run tests / benchmarks on my only ARM machine (Raspberry Pi). In the meantime, hopefully the CI would be able to verify if anything is wrong with my code.

@github Thank you for your contribution! I will collect jitDisasm and post here. In the meantime, I will also try to run benchmarks - not sure if they are supported on arm64 yet."
"nothing wrong with the unused variable. we are guaranteed to have the variable name unique. i would rather have a single code path/pattern when possible.
"
"Hmm, the issues.targets bloat looks somewhat worrisome to me; I've always thought that issues.targets should cater for ""fixable bugs"" (regressions, features soon to be implemented or not yet 100% functional etc.) as opposed to ""known limitations"" that should be ideally expressed in the project files. Why can't we just state that a particular test is <code>CLRTestTargetUnspported</code> (e.g. on Linux or on ARM64) without having to duplicate this information in the issues.targets file? Or am I reading it all wrong?"
"You're unconditionally returning `false`, which looks wrong with respect to `tryAddCallSignature`.
"
"@github: I checked. The manifest is all good. The DAC signature in the packages that flow to upstream (zips, runtime packs, transport packs). The only place where it is unsigned it's in the CrossOSDiag package and its symbol package. Those used to be signed in the `prepare-artifacts` signing pass as they are a specially crafted package - it has assets built in several legs.

- One big question I had: In the post build plan, will symbols only be indexed after they've been signed at the top of staging?
  - If so, all intermediate repositories will have to fetch symbols manually for their failures. The use of cross OS diagnostics will also not work - all dumps will have to be debugged directly in that platform and downloading the DAC will be a manual process. darc could probably help here. This just warrants long documentation as current investigation of dumps will be heavily degraded.
  - If not, then we have issues signing here. Unless you can somehow - which I thought wasn't possible, but maybe I'm just wrong - we will need the cross OS artifacts to be signed before indexing at a minimum. And then we get to the same discussion as earlier of a public symbol server with unsigned assets. One thing we could do is use an interim symbol server that's not MSDL + SymWeb (either sleet - though we've had perf bottlenecks there - or AzDO artifact services)."
"@github 

> I was under the impression that the C# team was still promoting == null and != null as the preferred equality checking mechanism and that is null and is not null were more of a secondary thing

Think I'm not quite getting my point across. The C# team doesn't have any type of official position here (at least not that I'm aware of). Hence this isn't about conforming to some guidelines. Different teams make different choices about this. I personally love `is null` & `is object` but that's just me :smile:

My comments are mostly in response to this 

> If we had a fixer that targeted types that has user defined equality operators, it could potentially result in a much smaller PR

My read here is that you preferred the use of `is null` and variants applied only to types that have equality operators. If that interpretation is wrong I apologize. 

I feel like that approach though misses the point of embracing `is null`. That style is all about developers writing code that unambiguously operates as they intend around checking for `null` or the absence of it. The intent is to make it as simple as straight forward as possible. There is no need to go searching around for equality operators because `is null` has only one interpretation. If the only use is reserved for cases where equality operators exist then it really defeats the purpose of the change. 

> @github's recommendation seems viable. 

Indeed. If the runtime team wants to embrace `is null` as a style then that is a very reasonable way to approach it. 

"
"I would use **20145.1000** from these reasons:
- It encompasses Server builds we know support Schannel for QUIC.
- It was in the Readme for a reason.
- If it was wrong for client Insider builds, we would have heard about it by now I hope.
- Even if it was wrong and nobody told us, it is unlikely anyone will be using ancient client Insider builds (which are even not officially supported), so all we need to make sure is that recent client Insider builds are higher version than the one we check for ... which they are."
"I think a managed in-proc implementation is still useful - it's a better fit for WASM and iOS+Android.  We don't get a lot of freedom to launch new processes on mobile, and in any case relying on shared FS access is probably the wrong thing."
"> What's the expected behavior if multiple of these new commands are supplied? Does one override the others, do multiple take effect, or does the script error out?

It looks like multiple seperate commands take a effect (-dir/-tree), but using for example -test twice for two different tests doesn't. I'm not sure this is wrong exactly, but it is a little odd?"
"Yes, the docker container `mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.14-WithNode-20210812132848-d90babf` is the one failing CI leg is using which I tested earlier. It has all the required stuff and capable of building runtime. Something else in AzDo is apparently going wrong. Nothing jumping out at me from logs of `Initialize containers` step, all looks normal until `Build CoreCLR Runtime` step, which seems to be using a different environment."
I think we can catch it if we turn on `runtimeTargets` for .NETFramework.  That will give us coverage for the runtime-specific scenario.  We might want to ignore any `runtimeTargets` that don't start with `win` (since we don't really care if someone who builds a .NETFramework project for RID = linux gets wrong asset).
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Fixes: https://github.com/dotnet/runtime/issues/63987

The condition for the debugger tests was wrong so it is not running on Rolling.

Change the condition to install the windows certs to be based on platform rather than name suffix, that way it makes it more resilient for future additions and to be able to share the same template reference for windows and non windows if needed to add this platform to an existing template reference scenario.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>safern</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>safern</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Infrastructure-mono`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github/area-system-reflection
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

In several cases, NullabilityInfoContext would return values which were
out of sync with the C# compiler's interpretation of the nullability
metadata. This fixes the following cases:
* The `NullablePublicOnly` attribute was not considered when analyzing
private constructor parameters.
* CodeAnalysis attributes on indexer properties were not recognized.
* CodeAnalysis attributes were not recognized in a `#nullable disabled`
context.
* Private value-typed members lacking nullable annotations were not
properly marked as nullable/notnull.
* Mixing CodeAnalysis attributes with opposite meanings (e. g.
`AllowNull` and `DisallowNull` produced the wrong result.
* Analysis of members inherited from generic base types did not
incorporate the nullable metadata associated with the inheritance.

Fix #63555
Fix #63846
Fix #63847
Fix #63848
Fix #63849
Fix #63853

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>madelson</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Reflection`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Backport of #63814 to release/6.0

/cc @github

A 6.0 PR introduced a regression in the profiling APIs, where the ObjectsAllocatedByClass API was triggered by the wrong profiler keyword.

## Customer Impact
As it stands in 6.0 profilers cannot enable ObjectsAllocatedByClass without enabling object allocation callbacks, which is extremely expensive, perturbs the process, and is impossible to do on attach.

## Testing
Manual and automated tests

## Risk
Low, the fix is targeted to just the ObjectsAllocatedByClass API.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>davmason</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>davmason</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Diagnostics-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> I fixed the wrong queue name in #65093.
> 
> The arm64 will have to go to 11.00 which might not pass as well as 10.15 does. Can we, for the time being, ignore that leg and move the rest? I will work on the exit codes and maybe we'll have a solution for it soon.

Updated to keep arm64 in runtime-staging for now"
"What I'd like would be a simple new compilation flag on a project per project basis: `<Nullable>enableStrong</Nullable>` or `<Nullable>enable!!</Nullable>` (or whatever) that will consider any parameter T as being a ""T!!"" and nicely handles the throw for me.
I have plenty of projects that are ready for this.... 
No impacts on the signatures of my methods, no surprises for the caller... What's wrong with this ?

"
"hmm, that definitely would cause this type of stuff. And looks like things passed after it? Is there a bug in the livebuild.targets or something doing binplacing wrong?"
"Tagging subscribers to this area: @github/area-system-numerics
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Fixes #68042

This is unfinished, but I'm leaving for vacation, so I wanted to share the current state of this effort.

## Problems with previous code
The previous conversion code is buggy. 
* It relies on false assumptions 
  * ""Round the input to a 15-digit integer. The R8 format has only 15 digits of precision, and we want to keep garbage digits out of the Decimal were making.""  This is an incorrect assumption, and the cause of the linked bug.
* It seems to have solved an off-by-one error in a hacky way 
  * `const uint DBLBIAS = 1022;` is conceptually incorrect; the exponent bias for `double` is `1023`
* It generally doesn't take advantage of a lot of functionality we now expose in `double` and `decimal`

## Summary of approach
This PR is a general refactor of the conversion code. The primary goal is to solve the reported bug, but secondarily make this process more efficient by reusing fast code we have written elsewhere. To achieve this, @github and I brainstormed reusing a section of the Dragon4 algorithm for `double` to `string` conversion, as printing a `double` already involves converting it to base 10.

To do this, I split up the code for the Dragon4 algorithm into two parts and added an additional API that allows `Decimal.DecCalc.cs` access to the first half of Dragon4. This API is structured to return everything `Decimal.DecCalc.cs` needs to construct a `decimal` representation of the original `double`.

## Status of the work
The rough draft of the approach is complete, and the original bug reported in #68042 is now fixed. Unfortunately, the logic does not seem to be holding up for all code paths, as there are a number of failing test cases in `DecimalTests.cs`. For example:

![image](https://user-images.githubusercontent.com/18474647/173167981-811fca87-1009-4a2f-afdf-bc2b5f0e2fa8.png)

I haven't had enough time to dive deep into what is causing these issues, but I'm adding GitHub comments to the logic that I think is shaky.

## What is left to do

* Fix the logic to handle all the failing edge cases
* Ensure we have proper test coverage
* (Possibly) perf analysis to see if borrowing from Dragon4 is giving the performance we are expecting
* If we determine this Dragon4 method is barking up the wrong tree, use another method @github and I have brainstormed. In my opinion, correctness and maintainability is more important than performance here. 
* Backport to previous versions of .NET?


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>dakersnar</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Numerics`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to 'linkable-framework': @github, @github, @github, @github, @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

The suppression on `System.Attribute` is wrong. Ran into this in #70201 where `EditorBrowsableAttributeTests.EqualsTest` is failing because we didn't generate any reflection metadata for the field. This proves beyond any doubt that even I can't write a correct trim warning suppression.

There's a difference between ""a field is kept"" and ""a field is accessible from reflection without issues"". The issue is more pronounced in Native AOT (where the field can be completely erased from reflection). The implementation of `Attribute.Equals` didn't see any fields on the attribute type because the static analysis didn't deem any of them necessary.

Fields (or methods) that are provably not visible from reflection without warnings are free to be optimized in any way by trimming (e.g. how we strip method parameter names in illink).

This fixes the suppression and replaces it with a more correct DAM on type.

Cc @github/ilc-contrib 

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>MichalStrehovsky</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>MichalStrehovsky</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`new-api-needs-documentation`, `linkable-framework`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"yep! We're trying to get the SearchView, and it looks like that TextView is being uesd as the SearchView.
The SearchButton stuff we were using before was wrong / not quite relevant
"
Is there a really good reason to make these extension methods? Would anything go wrong if they were just defined on the `EditContext`?
"Can you pass in purp and purpose to the log and print that out in the log, that should help diagnose when the wrong token is used"
"Put another way, my low-pri suggestion here might have been **Just Wrong:tm:** Oopsies"
"This line implies that csc.exe is going to be written to this directory.  That feels wrong as it's build deliberately modifying the source tree. 
"
"It's a typo and a dumb one -- cut and paste error ☹️ Fortunately the outer `Condition` is rarely, if ever `true`. PR incoming&hellip;"
"> It looks like there is an existing bug which leads to DeclarationDiagnostics returning an empty DiagnosticBag when it was not yet initialized.

This is a bug in the test, it is using wrong API, ```GetDeclarationDiagnostics(CancellationToken cancellationToken = default(CancellationToken))``` should be used instead. This property does what it is supposed to do. #Closed"
"It doesn't look fixed to me, though I am not sure if there is anything wrong with this code. To clarify, I was commenting on the fact that statement syntax was pulled from expression. Shouldn't it be pulled from the statement instead?"
Aren't we still targeting `netstandard2.1` for Preview 6?  Seems wrong that this says `net5.0`.
"@github I'm seeing gRPC test failures on other platforms that seem to indicate the newly-built 6.0.0-ci copy of Microsoft.AspNetCore.App.Runtime was installed to the wrong location. What needs to change❔

For example, from https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-aspnetcore-refs-pull-24983-merge-e4e47cb7c8b8484ca9/InteropTests--net5.0/console.ab71631b.log?sv=2019-02-02&se=2020-09-09T20%3A08%3A14Z&sr=c&sp=rl&sig=YqU17c32Tp8rRlY3EZdxU9Vo%2BSHqmJYs5K7gpC6QeuE%3D:
``` text
Found AspNetRuntime: Microsoft.AspNetCore.App.Runtime.win-x64.6.0.0-ci.nupkg, extracting *.txt,json,dll to /datadisks/disk1/work/B8880A11/w/B18309D8/e/.dotnet28088/shared/Microsoft.AspNetCore.App/5.0.0-rc.1.20417.14
```"
"> > Something is wrong with the way we build our shared framework.
> 
> Any ideas on how to resolve it?

@github Might have some thoughts, since this stuff just changed."
"Initial binding doesn't currently check for existing of `IDisposable.Dispose()`.
There are other examples of well-known types and members which are only checked during rewriting, such as `AsyncRewriter.VerifyPresenceOfRequiredAPIs()`. 

I don't see anything wrong with that, especially since getting in a situation where `IDisposable.Dispose()` is missing, but `IDisposable` exists wouldn't seem common. The same applies to async counterpart APIs. #Resolved"
"I'll take a look, that does seem wrong.
What's the expression used in `semanticModel.GetSymbolInfo` in this example?

Filed https://github.com/dotnet/roslyn/issues/25377
"
"Regardless of which pattern we use, this code just seems wrong.  You're not always disposing the disposable.  That very much goes against how disposables are almost always used.  i.e. the way people normally intend disposables to be used is such that they're always disposed. i.e. in synchronous code we don't do:


```c#
var disposable = ...
code...
disposable.Dispose();
```

Because an exception/early-return wil prevent disposing.  Instead we either use a try/finally, or just a using-block.

This is one of the benefit of just using the built in language constructs.  this sort of mistake would have been immediately noticeable.  Someone would have seen the naked 'dispose' and said 'that should go in some sort of try/finally'.  When you hand roll your own deconstruction of async/await, it's very easy to get it wrong and to not actually provide the semantics that are wanted.

In this case, regardless of hte choice about aysnc/await or ContinueWith, we still need to likely ensure that we actually dispose our disposables."
"No; what might throw you off here is _sourceFiles is a type that is doing all the batching-or-not logic inside RemoveTextContainer; it's not a dumb list.

The logic for regular documents and additional documents is identical except for the methods it has to call to interact with the workspace, so it's refactored into a separate class and this is just forwarding to it.
"
"i don't understand this.  NO other features do this, so it feels very wrong to me for this feature to do this."
"please make into an IMmutableArray.  It prevents accidentally doing things lazily, computing things too many times, or doing things on the wrong threads."
this seems wrong.  how will this work if they don't have an import for the namespace where these types live?  We should be fully qualifying these.
"I were assuming that the syntax tree is just an implementation detail of the compiler, which seems to be wrong since one could directly observe the syntax nodes. I agree putting a hack on a publicly observable tree seems weird and will abandon this approach.

Please ignore the push - I am just saving my changes to the unit tests."
"1. ""Zusammenstellung"" is not the right word in this context. Maybe ""Kompilierung""? Not sure.
2. The inflection is wrong: it should be ""oder *einer referenzierten* Assembly"""
"The explanation doesn't make sense to me -- it says both the IExperimentationServiceFactory can be fetched without threading dependencies (which is incorrect since it has UI thread dependencies -- see comments below), and then says IExperimentationService can be used without threading dependencies. I'm assuming that the description is wrong and you were trying to split this between a UI-thread dependent and UI-thread independent portion and just have a typo there. Put another way: if both can be used without threading dependencies, why split them?"
"dumb question. how does this work if you have a normal char lit with something like `\u000a` and you have that in either an `$""""` interpolated string or an `@$""""` interpolated string?  Presumably we need to do some escaping for one or hte other."
"With my changes, these started failing, as the test checks for non-equality, but I think it's wrong. Let me know though."
"If you have a wrong property ""Foo"", does it show up on the path?"
">SynthesizedRootModuleType [](start = 26, length = 25)

Addition of this symbol feels wrong given its purpose stated in the doc comment above #Closed"
"> is there any risk of user code throwing an exception here and us not bubbling it up? 

Yes, it happens in the tests on CI. It's what I'm describing above. The connection `Dispose` propagation might be faster than the completion of `sendRequestContentTask`. Effectively bubbling up `HttpRequestException` instead of the one thrown by the content.

As I said, very similar thing happens in HTTP/2. There wasn't and isn't any hang problem, but sometimes the exception from abort is faster than completion of request sending task and we bubble up the ""wrong"" exception. This already exists, I just caught it with my new test.

If we do want to bubble up the right exception (the one from request content sending), I'd need change the HTTP/2 flow as well."
"@github In my day job, we don't add {} for classes/objects.  
Our rule has more detail with proper ""c++ legalese""  but it is basicallly
Use {} for all POD,  structs.  (i.e. - any object that doesn't get initialized at declaration)
For enums and enum class we require that you provide a default enum value.  (enums with {} have the potential to be completely wrong)

Since structs can be default initialized correctly with member initializing you could argue that they don't need to use {}.   But again to keep this simple we require the use of {} because most structs do not member initialize their variables.

Not sure if this is right, but seeing objects that have ctors that have {} seems wrong to us. 
"
"Again split terminal this looks wrong being here, whether it's a split terminal depends on alt below"
Wrong issue number; 4341 -> 4314
"This logic looks like it may not be right: we are looping through prefixes, but we only ever handle the LAST occurrence of the design prefix. I might be a crazy dude and have defined the design twice.

```csharp
if (UseDesignProperties) { // if we're in design mode for this file
    for (var i = 0; i < prefixes.Count; i++) {
        if (node.NamespaceResolver.LookupNamespace(prefixes[i]) == XamlParser.XFDesignUri) {
            prefixes.RemoveAt(i);
            i--;
        }
    }
}
```"
Outside of intentionally setting the SupportActionBar to the wrong instance of the Toolbar and thus breaking software back button events. I'm not quite sure what the purpose of this code is
"This appears to be modifying the original API `void StartTimer(TimeSpan interval, Func<bool> callback)`, where this PR is to only add a new API. 

Is this code wrong and needs to be updated? 

If I understand the event wire-up code correctly it removes the event handler when the result is true. I believe the intent of the API is to continue if it is true. Something doesn't quite add up here to me.

Given the code snippet below we should stop the timer after the first run since it returns false
```c#
Device.StartTimer(TimeSpan.FromMilliseconds(250), () =>
{
    MyMethod();
    return false;
}
```

After typing this out, I agree with the change. I am confused on how this currently works because the same code I provided above currently works in Xamarin.Forms 4.1 and I don't want to add a change that may cause problems if it reverses the behavior."
"> Approach seems fine, it's a shame we need to jump through these hoops though.

Tell me about it. 🤦‍♂️ 

---

@github Says:

> Hey Joao! I was following your work on https://github.com/microsoft/vscode/compare/joao/snap , isn't the core problem related to the incorrect path to gdk-pixbuf-2.0 on these platforms ? for 64 bit we always default to x86_64-linux-gnu https://github.com/microsoft/vscode/blob/master/resources/linux/snap/electron-launch#L8 but the library is under /usr/lib/. Am i understanding the problem incorrectly ?

The actual problem is that Code should always use the gdk-pixbuf inside the snap. But by removing the env very early on (https://github.com/microsoft/vscode/commit/7d62a5b857e41d43e62bb6a17aa2fe6bd58019df) we hit the situation in which the About dialog reads the wrong env later on and looks up a path which doesn't exist in the snap, so ends up falling back to the OS. In Ubuntu this isn't a problem, but in other Linuxes the path doesn't exist.

https://github.com/microsoft/vscode/commit/7d62a5b857e41d43e62bb6a17aa2fe6bd58019df must be reverted, but we still need to address spawning other processes (eg Firefox), that's what this PR does."
"@github I believe ExceptionUtilities is available for use in Features layer through an InternalsVisibleTo.

It's used for example in:

https://github.com/dotnet/roslyn/blob/cf55f3a58e47298426fa971d3bd9d8857c746c65/src/Features/Core/Portable/Diagnostics/EngineV2/DiagnosticIncrementalAnalyzer.ActiveFileState.cs#L59

Throwing may reveal wrong assumptions (if any). So IMO it's better than just returning here. But I'd defer to @github."
"this is an API we're exposing right?  if the data is wrong, we shoudl throw an ArugmentException."
Wrong branch
What's wrong with pattern matching? Seems like overkill to me to avoid one condition.
"> You might prove it wrong in ways that we haven't thought about yet!

I can only proof my local VS wrong which didn't report any warning in the analysis. But of course it's my fault. I should have seen that additional overloads for arrays are necessary to avoid the array decay. I don't want to tinker with that any longer. At least not in this PR. Maybe I start another one if the time is right ...

"
"Hmm. I'm a bit dumb. I did this PR so quickly that I forgot that the original solution in the issue is to use the DWM API to make the frame dark like explorer.exe.

Still, I don't know what solution is the best.

Recap according to what I know:

**Imitation of the system top border (this PR):**
- Done by Chromium and it looks like also Firefox and the thing that powers UWP apps (because they are affected by the same weird bugs, see below)
- Not perfect in this PR (see PR description)
- Must be updated if an OS update changes the behavior (like 1809 which removed accented borders when ""Title bars and window borders"" is disabled)
- No one seems to do it correctly when the accent color setting is disabled
  - Chrome (continues to paint the top border with the accent color even when the setting is disabled): ![Chrome](https://user-images.githubusercontent.com/56923875/74543318-76a3b780-4f45-11ea-9fc6-d92b897ca197.png)
  - Firefox (no transparency, wrong color): ![image](https://user-images.githubusercontent.com/56923875/74544965-56c1c300-4f48-11ea-8d71-2c3166c9bd33.png)
  - UWP apps, the best imitation (have transparency ✔️ but the color isn't the exact same, really hard to notice): 
![UWP apps](https://user-images.githubusercontent.com/56923875/74544728-ea46c400-4f47-11ea-8da7-973955451e94.png)
- BTW, weird bugs start happening once you starting switching between light/dark mode (I'm running 1903)
  - Settings app: ![UWP Settings](https://user-images.githubusercontent.com/56923875/74543007-ee251700-4f44-11ea-888d-2de0bbc87ff3.png)
  - Firefox: ![Firefox](https://user-images.githubusercontent.com/56923875/74543601-f03ba580-4f45-11ea-897e-f1f190af4b88.png)
- But you have to be looking really hard to notice any difference

**`DwmExtendFrameIntoClientArea` + DWM API to force dark border (the original idea in the issue):**
- Solution used by explorer.exe (I think) when dark mode is enabled to not have a white border across the window like we have now
- Unofficial API = might break = must be updated if the API changes
- Probably wasn't made for that use case (of always enabling it to prevent the white border bug)"
"> 
> 
> Oh, fair point! Then I'm totally cool with this. I don't hate `maximizedFocus` either - I think `maximized|focus` would be wrong, because that would imply the whole set is flags that could be combined (they aren't). It's basically either `maximizedFocus` or `focusMaximized`, and I don't feel like there's a tangible difference between the two, so let's go with what's already been implemented 😛

Yay :) 
Should I add some UTs? If so - can you please guide me to the framework that I can base on? 
If not - should I mark this as ""Ready for review""? (I am quite new with the Draft PRs, work with Azure DevOps mostly)."
"I was a little bit afraid to change `return null` at the end to `return field.Kinds` in case I'll be returning wrong kinds, but with a second thought this seems impossible."
" I accidently used the wrong issue template, my bad."
"This was the result of the wrap refactoring
![image](https://user-images.githubusercontent.com/5749229/120378553-6dbe2d00-c2d3-11eb-9083-6c06d808381e.png)

I'm not sure if this is wrong, are you expecting an indentation starting at the column where CompletionHelper starts, instead of where the if starts?"
"> Why's that? I actually thought a signed int was the right choice.

It's just... It kind of feels wrong to me at times. For instance your code does `std::min(r, 100)`, which is 100% exactly what I'd do myself. But shouldn't it be `std::clamp(r, 0, 100)`? Because if `r` was negative, the computation would result in a negative number and thus in a red value of `255` instead of `0`. We know it works, because `VTInt`s are never negative.
So I've been thinking whether it would make sense to make `VTInt` a `uint32_t` or maybe even a `uint16_t`. The former would contractually guarantee that negative numbers can't exist and the latter would even make it possible to freely convert it to both `uint32_t` or `int32_t` without any AuditCheck naggings. Hmm... 🤔
But it's not that important really...

> I've done some initial experiments with a LUT, and it's a big improvement for `ColorFromRGB100`, but in `ColorFromHLS` it actually seems somewhat slower.

Oh nice! I'm glad it works in practice! BTW here's a SO answer with a low-level HLS-RGB routine: https://stackoverflow.com/a/45450486
That post is [CC BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/) so we can easily use it here if we choose to do so. I think the last line is supposed to read `(r+m)<<16`, etc., which makes me question whether the code is correctly tested. But it does seem reasonable."
"I'll add a test with different names. The issue will always be if there is something with the same name in the containing member. We could try to reverse engineer it but likely it would be wrong. 

I wonder if just going to the containing method in those cases would be a good compromise. "
"This is wrong, VSMac tricked you. You need to revert this file."
"this is how we do everything everwyereh.  for example in Workspaces.csproj:

```
  <ItemGroup>
    <PublicAPI Include=""PublicAPI.Shipped.txt"" />
    <PublicAPI Include=""PublicAPI.Unshipped.txt"" />
  </ItemGroup>
```

I'm just going to follow this pattern.  if it's wrong, it can be fixed up everywhere."
"I guess the `rsGetRsvdReg()` might be available, and you know that the instructions and addressing modes you're generating won't require it (in the emitter), but it kind of seems wrong, anyway. It seems like you should request another temp reg from LSRA and use that instead.

One reason why: ideally, we would be able to only allocate `rsGetRsvdReg()` if the size of the frame (and maximum local variable offset) required it. We haven't done that on arm64 because we have ""enough"" registers, so always reserving one didn't seem expensive.

"
this comment (and the next) are wrong
"This is a habit from C/C++, but it it's not a bad habit to have. Putting the constant on the left is called a ""Yoda conditional"" and in languages like C/C++ that don't present warnings on assignments in conditionals this prevents you from accidentally using `=` instead of `==`. It's not necessary in C#, but I think a lot of people will want to use the same style and since it isn't wrong to do so in C# I don't think we should go about changing it.
"
"Yeah, the socket limit should keep it sane as long as it's filtered by `sysctl`. It's anywhere we intend to walk the entirety that it becomes a very big problem and will need OS-specificity. `xinpcb` contains not only TCP and UDP but also SCTP and raw, so `kptr_t` becomes much more necessary.
I don't think we should change to a `long` here though; TCP/UDP is still defined as 65535 possible ports maximum. If we're seeing more than 65535, something else has probably gone wrong. ;)"
"`xinpcb` is correct. However as I mentioned above, on FreeBSD this might be incorrect and possibly problematic behavior as `xinpcb` _may_ be an `int64_t`. I think 'absolute correctness' here would be for `count` to be `sizeof(kptr_t)` and `kptr_t_alias count = (kptr_t)...` but I definitely could be wrong.
But `int32_t` isn't likely to break things, since this operates off `net.inet.udp.pcblist` and so should never exceed ~64511."
"This seems like a good approach assuming that the allocated byte count is reliable.

I could be wrong but I don't think we actually need the NoGC region because GetAllocatedBytesForCurrentThread() does not go down after a garbage collection (it returns the number of bytes that have *ever* been allocated). Does that sound right?"
">bool IsCultureInvariant(ReadOnlySpan<char> cultureName) [](http://example.com/codeflow?start=12&length=55)

This looks wrong to me passing the cultureName and not using it?

```C#

 bool IsCultureInvariant(ReadOnlySpan<char> cultureName) => cultureName.Length == 0;

``` #Resolved"
The emit here has the wrong runtime semantics.
Do all ActiveIssue ids map to an issue? Wondering if devs also used pr ids here which would be wrong.
"this seems wrong.  A more appropriate pattern would be:

```
var savedWriter = writer;
allDiagnostics ...
writer = savedWriter;
```
"
"Oops, I'm thinking of the wrong getDeclarationName, nvm
"
"> Could you please elaborate what exactly is wrong with copying the structure? 

We recently did a performance investigation which revealed a large number of allocations (10+GB) in calls to `MetadataTypeName.NamespaceSegments`. This is a lazily-computed value which is persisted to a mutable value type, so part of the investigation time involved determining if the code was operating on the ""original"" instance of this type or a copy (where the latter would fail to persist the lazily-computed value such that subsequent calls return the cached copy).

> What effect is this going to have?

An analyzer will report a warning if a copy of an instance of this type is made (as opposed to _moving_ the instance, which is safe). The attribute eliminates the need to perform the investigation described previously (in fact, the evaluation was actually performed by applying this attribute and seeing what happened).

Current usage of this type produced one true positive report from this analyzer, and zero false positives. The analyzer is good, but not perfect, so it is possible that some future use would report a false positive that needs to be suppressed or fixed."
"> However, this isn't necessarily the wrong choice. Crossgen2 does not use the IsSupported function call mechanism, but instead it performs speculative compilation assuming the processor intrinsic IS available which yields excellent performance for this case on Haswell and newer processors.

Do we have a rough percentage of CPUs that are Haswell or later that would justify whether or not this is actually worthwhile? If you go based off of the March 2020 Steam Hardware Survey: https://store.steampowered.com/hwsurvey/

Then roughly 75% of reported CPUs support AVX2 (and would therefore have BMI1/BMI2/LZCNT, based on what Intel/AMD have shipped):
![image](https://user-images.githubusercontent.com/10487869/80646078-f0b1eb80-8a20-11ea-8eed-568daf0f3d37.png)

This naturally doesn't take into account developer machines, server hardware, etc. But, if we are saying LZCNT is likely to be supported, then there is an equal number of AVX2/BMI1/BMI2 machines in the same boat and a greater number of AVX machines and we should likely consider what is a ""good baseline""."
">  Why are we trying to make LSP only depend on the features layer?

The main concern I have with this is that the editor layer needs an implementation for every editor (as I understand it, anyway). O# can't use it because of this today, and if we ever want Roslyn's LSP to be usable by things other than VS it will need to be independent of that layer. If my understanding of the layering concerns here is wrong, then do please let me know, as I could totally be wrong about my understanding of how our layering works."
"Yes, the JS would error at runtime. The JS decl emit differs because the original declaration of `A` isn't actually a class and a lot of our code in the checker for resolving base constructor types depends on it being a class, regardless of what the binder says. Its probably fine to have the decl emit be wrong here if we report an error when you subclass."
"If I understand this PR correctly, here's the current approach (please correct me if I'm wrong):

(1) Every time a RawValue is added, we also add the same value as an OriginalRawValue.
(2) On parse, we parse the RawValue and set the ParsedValues, then clear the RawValue (as today), but we leave the existing OriginalRawValue in place
(3) On add of a strongly-typed value to ParsedValues, we also add a new OriginalRawValue.

Question: What happens if a user modifies an existing ParsedValue? E.g. update a single-valued header, or remove an item from a multi-valued header. Seems like we are not handling this case.

Beyond that, I have two concerns with the current implementation:
(1) It increases the size of the header store by adding OriginalRawValues (as @github mentioned above)
(2) It adds overhead in the common case of setting strongly typed values, because we need to also store an OriginalRawValue whenever this happens (as I mentioned above)

I'd suggest the following changes:

First, I don't think we actually need OriginalRawValue. We can just keep RawValue around after parsing is done. We can know the RawValues have been parsed by the presence of Parsed and/or Invalid values and not re-parse the RawValues again once it's parsed.

Second, I think we can avoid the overhead of keeping the RawValue in sync with any changes the user makes to ParsedValue by simply clearing the RawValue if they make changes. We can then generate a new RawValue if/when they enumerate NonValidatedHeaders. This also fixes the update issue I mentioned above. 

In short, at a given time, a header is in one of these states:
(1) Just parsed values. E.g. user adds parsed values. We can generate a raw value from these when needed (we do this today anyway when enumerating).
(2) Just raw values. E.g. user adds raw values via TryAddWithoutValidation. If the user does something to cause parsing, then we parse and end up in state (3) below.
(3) Both parsed values and raw values. In this case, the parsed values and raw values are always guaranteed to be in sync. If the user modifies either, we discard the other and end up in state (1) or (2).

Thoughts?
"
"> Test failures look legit:
> 
> ```
> Assert.Equal() Failure\n          ↓ (pos 0)\nExpected: CN¥\nActual:   ¥\n          ↑ (pos 0)
> Stack trace
>    at System.Globalization.Tests.RegionInfoPropertyTests.CurrencySymbol()
>    at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
> ```
> 
> ```
> Wrong currency English Name\nExpected: True\nActual:   False
> Stack trace
>    at System.Globalization.Tests.RegionInfoPropertyTests.MiscTest(Int32 lcid, Int32 geoId, String currencyEnglishName, String alternativeCurrencyEnglishName, String currencyNativeName, String threeLetterISORegionName, String threeLetterWindowsRegionName)
>    at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
> ```

Yes, this workaround should be deleted: https://github.com/dotnet/runtime/blob/0db8ecbea291c09cfd84d7f33ea049f5c0cec94f/src/libraries/System.Globalization/tests/System/Globalization/RegionInfoTests.cs#L184"
"Hey @github, something went wrong when publishing results. ([You can check the log here](https://typescript.visualstudio.com/TypeScript/_build/index?buildId=101534&_a=summary))."
"We’ve always known this change would be dead simple, but the issue is “Awaiting More Feedback.” The fairly low amount of feedback we’ve received on it has been positive, and I’ve been cautiously open to this change from the beginning. I think the downside is just adding to the confusion/complexity around what `import type` and `isolatedModules` each mean. I think we possibly need to have a broader conversation about the interaction between `isolatedModules` and const enums now that esbuild can inline them. If that becomes the norm for transpiling/minifying TS, then `isolatedModules` may be the wrong flag to toggle this behavior. At any rate, I don’t think I can unilaterally approve this PR."
"From the conversion, it seems like the Azure VPN ignores the dual-mode socket and the packet is than routed to physical interface instead of private VPN and then rejected by firewall (or lost as it missed tunnel) 
It seems like 3.1 worked by pure luck IMHO -> there is nothing really wrong with 5.0. The fundamental flaw lives in the Azure implementation as far as I can tell.  
"
"> Strictly speaking

And if you're optimizing at that level with string, such an analyzer is actually moving you in the wrong direction. "
"Just curious as I am not knowledgeable about timezones -- what would be the impact of the user picking the wrong one of the several Alaska time zones? They are all -9:00. I'm not sure which -8:00 I should pick for Seattle, even when they are marked Los Angeles and Vancouver."
"> we already even in Default mode expand casts to non-sealed classes with a quick fast-path that can be wrong 

What do you mean that it can be wrong? I do not see anything wrong with it."
"@github The title of the issue was wrong, it should have been `APP_NI_PATHS` :-) That being said, I don't see uses of the stored values in mono's case. Was it never fully integrated?"
"https://github.com/dotnet/runtime/blob/c0630d29214b2c91f75e3df5b82136974e096978/src/coreclr/inc/corhdr.h#L1724-L1725 this is also wrong, there is no such namespace, Attribute has just been spelt wrong."
"> ReadFile doc was wrong:

Should we also offer a PR to the ReadFile doc? 

~~Also, is there any value here in reaching out to Windows IO dev to confirm the behavior is expected by them, and won't change?~~ edit: never mind, it's clearly safe to change from an arbitrary value to zero."
"@github - I have experimentally added one more wrapper project for the <code>JIT\Methodical\Arrays\range</code> tests to this PR to let me exercise the new functionality in faster Pri0 runs, however the wrapper doesn't seem to be picking up any of the [Fact] methods in the referenced ilproj projects. Can you please advise me how to debug the source generator logic so that I can investigate what's wrong?"
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Fixes: https://github.com/dotnet/runtime/issues/62218

## Customer Impact

When doing some refactoring on how we calculate assembly versions we accidentally removed a property that calculated the file version embedded into the assembly.  When an application is compiled as self-contained and bundled into an MSI file, upgrading from a previous (e.g. .NET 5) which can lead to this assembly missing on the installation location or the wrong assembly to be used.

## Testing

VIsual inspection of the assembly to make sure the file version is correct and higher than the ones in previous releases. 

![image](https://user-images.githubusercontent.com/22899328/146410539-58962225-6fe2-4711-8d77-bb1f850ed25c.png)

## Risk

Low, this is just changing the file version embedded into the assembly.


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>safern</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Microsoft.VisualBasic`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Getting one more failure locally, on Linux the SPN is not propagated.

Looks like something is wrong with the AVID parsing on GSS-NTLMSSP. Need to investigate..."
"`_HelixLocalNodePath` is set to wrong location?

```
+ ls /datadisks/disk1/work/BC460A00/p/build/emsdk-node
ls: cannot access '/datadisks/disk1/work/BC460A00/p/build/emsdk-node': No such file or directory
+ export _HELIX_NODEJS_VERSION=
+ export _HELIX_NODEJS_PATH=/datadisks/disk1/work/BC460A00/p/build/emsdk-node/
```"
"Tagging subscribers to this area: @github/area-system-text-regularexpressions
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

We weren't properly resetting the stack position, so if we had an atomic group that contained something that backtracked, any backtracking positions left on the stack by that nested construct would then be consumed by a previous backtracking construct and lead to it reading the wrong state.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>stephentoub</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Text.RegularExpressions`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>7.0.0</td>
  </tr>
</table>
</details>"
"> > Rebased. But I'm not entirely sure what I'm looking for with this
> 
> I wanted to see if you are still seeing the constants being propagated to the loop body as discussed in

The main loop is looking really good now:

```
            ld1     {v23.16b}, [x10]
            ushr    v24.4s, v23.4s, #4
            and     v25.16b, v23.16b, v22.16b
            tbl     v25.16b, {v17.16b}, v25.16b
            and     v26.16b, v24.16b, v22.16b
            tbl     v26.16b, {v16.16b}, v26.16b
            and     v25.16b, v25.16b, v26.16b
            umov    x14, v25.d[0]
            cbnz    x14, G_M5947_IG07
            cmeq    v25.16b, v23.16b, v20.16b
            add     v24.16b, v25.16b, v24.16b
            and     v24.16b, v24.16b, v22.16b
            tbl     v24.16b, {v18.16b}, v24.16b
            add     v23.16b, v23.16b, v24.16b
            uzp1    v24.16b, v23.16b, v21.16b
            ushll   v24.8h, v24.8b, #6
            movi    v25.4s, #0x00
            trn2    v23.16b, v23.16b, v25.16b
            add     v23.8h, v24.8h, v23.8h
            uzp1    v24.8h, v23.8h, v21.8h
            sshll   v24.4s, v24.4h, #12
            trn2    v23.8h, v23.8h, v25.8h
            add     v23.4s, v24.4s, v23.4s
            and     v24.16b, v19.16b, v22.16b
            tbl     v23.16b, {v23.16b}, v24.16b
            st1     {v23.16b}, [x11]
            add     x10, x10, #16
            add     x11, x11, #12
            cmp     x10, x8
            bls     G_M5947_IG06
```

And the full dump is here:  [dumpde.txt](https://github.com/dotnet/runtime/files/8928507/dumpde.txt)

EDIT: pasted wrong from file"
"capitalizing `Und` is wrong here, and it also removed the `Catalyst` from the string

```suggestion
  ""description"": ""Ein Projekt zum Erstellen einer .NET MAUI-Anwendung für iOS, Android, Mac Catalyst und WinUI mit Blazor"",
```"
Oops clicked wrong button somehow. Re-opened.
"This is unrelated, I just noticed that we were checking the wrong wait timeout here."
"This seems wrong to have public. "
"Wrong format, see my comments in the tests."
Sorted wrong
Sure.  I can add that.  It's more a test that nothing goes horribly wrong (like crashing/index-out-of-bounds) vs actually verifying that we classify correctly.
"Dumb question: what is ""43""? (I have no clue what this helper does)"
🤷‍♀️ maybe I'm wrong and it's something else
"> Why are we choosing to rewrite the key? Keys are entirely opaque to the framework - they may happen to look like .NET member accessors, but that doesn't mean we should arbitrarily transform them.

I think this is a reasonable argument for not adding this feature to System.Text.Json. However, based on the amount of feedback on the issue, this seems to be clearly the default behavior customers want from `ValidationProblemDetails.Errors` when using camelCased JSON properties.

The original issue mentioned nothing about the `DictionaryKeyPolicy`. To most people, the fact that the `ValidationProblemDetails.Errors` is a dictionary is merely an implementation detail. They just want the error keys to look like JSON member accessors. Later comments merely point out that a `DictionaryKeyPolicy` couldn't even be used to work around the current behavior.

I don't we should be using `DictionaryKeyPolicy` to gate this behavior especially if we're going to camelCase after every `.` meaning we're not really following any built-in `DictionaryKeyPolicy` to begin with. It would probably be better to continue to ignore the `DictionaryKeyPolicy` in here and gate this on the `PropertyNamingPolicy` instead. It might be *technically* wrong, but it behaves the way people want it to. That said, it would make this change more breaking.

https://github.com/dotnet/aspnetcore/issues/17999#issuecomment-810913391"
">UsingDeclarationSyntaxNotNull [](start = 19, length = 29)

Please assert diagnostics in all new tests, we should see if there is anything wrong with the code and what exactly is wrong. #Closed"
">ExceptionDeclarationOrExpression: IVariableDeclaration (1 variables) (OperationKind.VariableDeclaration) (Syntax: 'e') [](start = 8, length = 118)

This is wrong, the variable is declared outside of the catch. #Closed"
Could you add a test with C# 7.1? I suspect it will give the wrong error message.
">Dim isLifted As Boolean = boundAssignmentOperator.Type.IsNullableType() [](start = 16, length = 71)

This is a wrong way to calculate ```isLifted```, see CreateBoundBinaryOperatorOperation #Closed"
"@github we merged the original backport into 6.0 but we didn't merge this, am I wrong here?"
">new BoundIfStatement(condition.Syntax, SyntheticBoundNodeFactory.NotCore(condition) [](start = 29, length = 83)

>new BoundIfStatement(condition.Syntax, SyntheticBoundNodeFactory.NotCore(condition) [](start = 29, length = 83)

I think generating bound nodes in this walker is the wrong thing to do. #Closed"
"Mentioned offline that the names seem wrong. This should be called EvaluateItems or VisitAndPush, but also that if there were a helper method to combine these two things then the helper could assert that the stack is balanced, which I've found in a number of places in the code. #Pending"
This `lookupResult` logic is crazy complicated (not your fault and not something I would necessarily fix in this PR).
This is wrong.  You should be making a public property.  but this will make a private property.
"It's seems problematic if we never clean this up; It means the actual immediate window IWpfTextView will hold onto our buffer graph, which will hold onto our projection buffer. This will then root the workspace. I guess we're cleaning the workspace instance in the call to _workspace.Dispose() in AbstractDebuggerIntelliSenseContext.Dispose() so this isn't crazy expensive, but it's still not great. #Resolved"
"so SmartIndent never changes buffer but SmartTokenFormatter does.

I am not sure how SmartIndent can do what SmartTokenFormatter does...

I can't remember all different cases but, something like

void Method()  | <= enter here { 

regular smart indenter do something like
void Method()
| <= caret { 

which ""{"" is at wrong place, 

so, smart token formatter override default smart indenter behavior (again, like I said multiple time, I dont know who made this decision or since when we had this behavior, I just know this should be at least since orcas or whidbey)

it basically edit buffer so that ""{"" goes to like place like

void Method()
|{ <= here

this test is making sure that edit happened so that things are at right location."
A bit concerned that we aren't explicitly grabbing the unique non-★ item to report as the `uniqueItem`. Will it work out that the equivalent ★'d item always wins? Is there any way this could go wrong? Also a detailed comment would be nice. #Resolved
I was wrong: this was used.
"> The second argument has to be size of the destination buffer, ie. sizeof(localeWithCalendarName).

Really. According to the strncpy_s documentation it says it has to be the numberOfElements and the examples use _countof...  https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=vs-2019

What am I reading wrong?

> And you do not need the fourth argument at all.

Right, will update."
This comment seems wrong now that we're no longer passing a `BoundCall` and instead passing a method symbol. It's probably reasonable to assert at the top that the MethodSymbol is not a constructor.
"This was the wrong place. You should do it in the `hasChangelog` and `getChangelog`. While you're at it, just delete the `readmeUrl` and `changelogUrl`; the former was an old implementation which I forgot to delete.
"
"Sure, I was just testing my theory that this was why the wrong thing was happening. It's a bad fix as-is"
"This is somewhat confusing. I would probably say
```suggestion
            // If simdSize == 8 then we have only two elements, not the 4 that we got from getSIMDVectorLength,
            // which we gave a simdSize of 16. So, we set the simd16Count to 2 so that only 1 hadd will
            // be emitted rather than 2, so that the upper two elements will be ignored.
```
Of course, please correct if I've got this wrong!"
"I believe it's safer to pass FALSE for this param.

I thought we fixed whatever the issue was with the client app inheriting the handles of the console application acting as a terminal, but for whatever reason node-pty was still acting weird if we passed TRUE here. 

I think it'd be safer to have this param as FALSE, so no-one else hits this gotcha, at least until we figure out exactly what's wrong with node-pty."
"Not sure what went wrong with the image, but I replaced it with an existing one."
It's probably an issue that this render method is async. What happens if the template is assigned to a different element while awaiting? It will then continue to write data from the wrong element into the template
Any reason we're removing the existing value before we've replaced it? If something goes wrong do we want to preserve the old value?
"For example on Switch I do this

https://github.com/xamarin/Xamarin.Forms/pull/12196/files#diff-abebb275026c8510de8beeb9b1b1cb717f886959f66de018ec1f3d5a8c772099R39

Because if no default is passed in and the color used is Color.Default

It needs to do something useful...  Setting the color to null is wrong

It should either just set it back to the default or if it's Color.Default it should maybe do nothing?"
"> That seems wrong? editorIndex: event.target is not correct or is it? event.target is the group identifier, not the index of the tab.

I think event.target is the index of the tab. Since these are group events there really isn't a concept of moving between groups. I've added tests and it seems to work."
"No, do it. Please. It honestly was deferred like 7 years ago and I think I screwed it up and it's how I've been grinding out ""cursor turds"" bugs ever since. And if I'm wrong.... well it won't be the first or last time."
"For anybody that was curious, I messed up by looking at `utr` instead of `result`. So I was straight up comparing the wrong UTR hahaha."
"> Using whose for an object always felt wrong so I consulted an expert first 😆 https://www.merriam-webster.com/words-at-play/whose-used-for-inanimate-objects

Yeah it just seems to flow better in this sentence. Although I think it was originally which and then was suggested to change to whose which is how it was accidentally turned back back to which."
"I look more closely and I think the behavior today is broken and the behavior of this PR is ""okayish"" (example uses the unimported `Microsoft.VisualBasic.FileIO` namespace).

### Today

![PNtnkVbJHm](https://user-images.githubusercontent.com/24472128/102513783-f3368380-408b-11eb-8938-8bca6ba56630.gif)

`FieldType` is from an unimported namespace and listed as `FieldType`. `<tab>`ing it, inserts *FieldType*, which is wrong and should be `FileIO.FieldType`

### Now (this PR)

![TQGVTdm6Vx](https://user-images.githubusercontent.com/24472128/102514337-a2735a80-408c-11eb-991d-cb2aadde9417.gif)

`FieldType` is no longer offered, as the test above also shows.

So this PR removes a broken suggestion. Note: This is only true for unimported namespaces. If the enum type is in scope, it is suggested as expected."
crazy idea: we also change the icon to the one we're using for Split Tab in the tab context menu. This is a crazy idea that could be a follow-up.
It absolutely is. I'm dumb
"Oh I just found out that there's a ""D3D12onWin7"" document!
But it's only for x64 and doesn't support WARP, which we need because we have to support DirectX 9 hardware. 😔

One day I'll probably check out D3D12 anyways, because it's interesting. 😄
I suspect that it won't improve performance, because - as far as I understand it - D3D12 helps parallelize things, whereas this engine doesn't have enough complexity to benefit from this. But maybe I'm wrong and in that case it'd be fun having a cool D3D12 engine for modern hardware."
"What's wrong with ""reallocation""?"
Note that this is draft PR with wrong `Xamarin.Forms_Performance_Integration-Signed-Debug.apkdesc` to test the creation of `TestResult`  xml file and picking it up by CI.
How crazy is it that you and I both made module changes in the past _30 seconds_?
"honestly, i can't read these tests and understand what they're doing.  this is why i'm not a fan of theories that do crazy stuff.  it just means that i spend an excess amount of time examining the code to support the theory. "
Indentation is wrong here.
"Are we going to fail starting the app because of this? Currently we don't.
We should not print out errors in ""working"" cases. This should be ""warning"" which is only produced when tracing is enabled. I know this kind of sucks since if the user makes a mistake nothing will warn about it, but we simply can't print out to `stdout` or `stderr` on successful app start - the output is owned by the app, we would be effectively breaking the app."
"I'm super sorry. My previous suggestion was wrong. Please add the `$(NetCoreAppCurrent)` configuration back.

```suggestion
    <TargetFrameworks>$(NetCoreAppCurrent)-windows;$(NetCoreAppCurrent);netcoreapp3.1-windows;netcoreapp3.1;netstandard2.0-windows;netstandard2.0;net461-windows</TargetFrameworks>
```"
"What is wrong with reentering the same lock? Is it a performance hit? We don't do anything similar anywhere else as far as I can see, so I'm curious."
"@github It's annoying that I put so much effort into this and waited so long (8 months!) and don't get to be in the commit history. Why did this go so bad? What mistakes did I make in this PR that it was never accepted?

**Edit** Sorry, I don't want to be petty. But this was a huge investment of time and energy for me and I want to understand what went wrong."
"This is called with response `Dispose`. Which works great for cancelling partially consumed responses. But for fully consumed response - if the user doesn't Dispose the response - we would be waiting for GC to collect the stream and send the RST. Shouldn't we rather send it immediately after we reach the end of response stream?

Note that I'm not saying this is wrong, just thinking of possible scenarios that could happen."
"This may be a dumb question, but why do we even need the second check? Can null ever be something other than null?"
"Modifying the environment seems wrong, if the proposal is to do that.

I'm not sure how that will affect the way I set up branches. E.g., I have remotes:
```
origin  https://github.com/BruceForstall/runtime (fetch)             
origin  https://github.com/BruceForstall/runtime (push)              
upstream        https://github.com/dotnet/runtime (fetch)            
upstream        Don't push here. Fork and send PR.runtime (push)     
```
and currently `git merge-base xxx main` will my local main, which I keep up-to-date with my origin/main (Actually, maybe it should specify `origin/main` instead of `main`, to match jitrollingbuild.py?)

With the change, it will use `upstream/main` instead. But then I need to keep upstream fetched before running the command? (or at least fetch it when I create my branches?)
"
"The assertion in AsTypeSymbol could fail if the awaited expression's GetAwaiter() method has a custom modifier. Is an assertion failure the behavior we want?

Oh, perhaps I'm wrong that a custom modifier could result here.
"
"this is wrong; the error is IN `Network.NetworkRequestNode`, where `requestOrFirstKnownChildRequest` should indeed be accessible."
"> This brings up the larger issue that we should probably not just be passing null into parameters that are missing unless they have a default value or are nullable.

I didn't see this earlier comment addressed. If I were to update the above line to the following, `CanBindRecordOptions` would still pass. `string Foo` would just be null despite having a non-nullable annotation.

```suggestion
#nullable enable
        public record RecordTypeOptions(string Color, int Length, string Foo);
#nullable restore
```

When we set properties, we can just skip over the property if config doesn't provide a value, but calling a constructor that we can observe requires a non-nullable parameter with a null argument seems very wrong."
"Because I like seeing multiple kindModifiers in the rest of the baseline updates, I'd lean toward using a Set...except that we don't target ES6 yet, so you'll have to use `const modifiers = createMap<true>()` to mimic a set, then `arrayFrom(modifiers.keys())` to get the keys.
Edit: I am wrong, just use `new Set()` -- we have a polyfill for it now.

Resolving the alias first is going to mimic the old behaviour the closest, but I feel like it missed information compared to the baselines diffs in this PR."
"I will add an explanatory comment, but I don't think it will be valuable to add comments that explain why the previous code was wrong.

---

In reply to: [67029427](https://github.com/dotnet/roslyn/pull/11981#discussion_r67029427) [](ancestors = 67029427,67028724,67027973,67027377,67019197)
"
"Both options were provided, it's just that both of them resulted in the same code action, despite presenting differently. This test shows that the one that resolved to the wrong code action now resolves to the right code action, but doesn’t actually demonstrate that both completions are offered—I’ll add that so it’s more clear."
"@github If we're talking about _`ambient`_ context and decorators, I think we can avoid the new variables and use the original expression., because _`ambient`_ elements are skipped in JavaScript files. Maybe I'm wrong and we need to use a temp variable to store _computed property name for _`ambient`_ context  too 

Do you prefer to have the output for non-ambient names like this 

```ts
function dec(klass, name) {}
const isSymbol = Symbol('isSymbol');
class Foo {
}
__decorate([
    dec,
    __metadata(""design:type"", Number)
], Foo.prototype, isSymbol, void 0);
```

instead of 

```ts
var _a;
function dec(klass, name) {}
const isSymbol = Symbol('isSymbol');
class Foo {
}
_a = isSymbol;
__decorate([
    dec,
    __metadata(""design:type"", Number)
], Foo.prototype, _a, void 0);
```

Need to check this case, maybe there are cases in which a temporary variable is required to store a member name.
"
"```ts
class C1 {
    /**
     * @github {A}
     */
    value;
}

class C2 extends C1 {
    /**
     * @github {A & B}
     */
    value;
}
```

We set properties from `C2` to `seen`,
```ts
Map({ value /* A & B */ })
```

then we iterate over all the properties of the base types. In this case, we only have one property `[value / * A * /]`.

```ts
!isPropertyIdenticalTo(existing /* value: A & B*/, prop /* A */)
```
props are not identical, so we drop value from `seen`, as a result, `seen` is empty. 
```ts
arrayFrom(seen.values()); // []
```

I found that we can filter properties based on property `parent`

```ts
class C1 {
    /**
     * @github {A}
     */
    value;
}

class C2 extends C1 {
}
```

```ts
const seen = Map({ value /* A */ })
```

```ts
const baseProps = [value /* A */ ]
```

if props / * existing / prop * / refer to the same `parent`, it can be inherited in the child class, then we compare with the identity. Maybe it is a completely wrong way and needs to use another one. In this case, I'm really sorry that you wasted time reviewing this PR., I'll close the PR later.





"
"@github @github @github .  After this change goes in, you'll want to recompile any binaries you have that depend on this internal enum.  Otherwise, you'll be referencing the wrong items.

For APIs you have that use the new 'Tag' based appraoch, there's nothing you'll need to do.
"
"Once you get this merged I'll remove the existing MSBuild property here that is leading people down the wrong path here. "
"Correct me if i'm wrong, but if we have:  `{ id }`    then it will always be rewritten as `{ id: ... }`    So we always can just write out the 'id' as is initially.  The question is only what we need to write after the colon.  And, in that case, we don't need to pass this flag along stating if we're the value side of the shorthand property assignment. 
"
"True. but some checks are also made here. For example It checks the method symbol of each parameter, and whether it or its name are null. They don't determine whether a parameter is ""valid"" for refactoring - but they help determine which parameters are NOT valid - and those ones don't make it into the new list (which is now renamed to avoid confusion into ""listOfPotentiallyValidParametersNodes"". Let me know what you think - I could be wrong."
"I must be missing something here, but I can't see how this works. `m_edge` is initially set to `m_node->AsSIMD()->GetUse(1).NodeRef()` and this method is set as `m_advance`, but then here we assert that `m_edge == &m_node->AsSIMD()->GetUse(0).NodeRef()`, and then we set it to the second operand (`GetUse(1)`), which also seems wrong."
"Actually, maybe I'm using the wrong term. Just arbitrary code points where the first byte is not null."
"I believe the existing HttpClient APIs allow null to be passed for the url (string or Uri), in which case just the base url set on the client is used.  Do we want to differ in these APIs?  Or am I wrong?"
"I am having difficulty checking the code coverage.  I can't even get most of the tests to run.  I'm pretty sure I'm doing something wrong.  Maybe you can advise me.

Here is how I'm building the runtime.  (I'm using git bash as the command line.)
`$ git clean -xdf`
`$ git fetch upstream master`
`$ git merge upstream/master`
`$ git push origin master`
`$ ./build.cmd -subsetCategory coreclr-runtime -c Checked`
`$ ./build.cmd -subsetCategory coreclr-libraries -runtimeConfiguration Checked`
`$ ./build.cmd -vs System.Private.Xml`

In Visual Studio, I press Ctrl + Shift + B to build the solution.  Only 15 of 29 projects build successfully.

The first error in the output window is:

> NuGet package restore failed. Please see Error List window for detailed warnings and errors.

However, there is no additional information in the Output window.  Additionally, building at the command line does not experience this problem.

The test projects which do not build all show this error:

> error NU1201: Project XmlCoreTest is not compatible with netcoreapp5.0 (.NETCoreApp,Version=v5.0). Project XmlCoreTest supports: net50 (.NETFramework,Version=v5.0)

I'm using Community Edition, so I'll have to check code coverage via command line testing anyway, so I tried this:
`cd src/libraries/System.Private.Xml`
`../../../.dotnet/dotnet test -p:CollectCoverage=true -p:CoverletOutputFormat=cobertura`

This results in numerous errors like this:

> Starting test execution, please wait...
>
>A total of 1 test files matched the specified pattern.
>Testhost process exited with error: It was not possible to find any compatible framework >version
>The framework 'Microsoft.NETCore.App', version '5.0.0' was not found.
 > - The following frameworks were found:
 >    2.1.11 at [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
 >     2.1.12 at [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
 >     2.1.13 at [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
 >     2.1.16 at [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
>      3.0.0-preview9-19423-09 at [C:\Program  Files\dotnet\shared\Microsoft.NETCore.App]
>      3.0.0 at [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
>      3.1.2 at [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
>      5.0.0-preview.3.20167.12 at >[C:\Users\mrj00\source\repos\runtime\.dotnet\shared\Microsoft.NETCore.App]
>You can resolve the problem by installing the specified framework and/or SDK.
>The specified framework can be found at:
>  - https://aka.ms/dotnet-core-applaunch?>framework=Microsoft.NETCore.App&framework_version=5.0.0&arch=x64&rid=win10-x64
>. Please check the diagnostic logs for more information.
>
>Test Run Aborted.

This appears to be the same error.  Any ideas what I'm doing wrong?  No coverlet.cobertura.xml file is then found anywhere in the project folders."
"I think the text is wrong, if specified this does not launch the browser, right?"
"> I removed it because its behavior is wrong on big-endian. I ran the benchmark for 32bit and there is a ~4% regression in the worst-case.

Rather than deleting it, can you instead just make it:
```C#
if (IntPtr.Size == 4 && BitConverter.IsLittleEndian)
```
?"
"@github , I am actually adding this check back.

It handles the following case:
Let's say we run this command multiple times without making any edits to the content of the file.

`<script type=""text/plain"">
  <p></p>
</script>`

First time, in the HTML tree corresponding to the document-root, there will have no children for the script tag and we would create one children.

Second time, in the HTML tree corresponding  to the document-root, there will be one child for the script tag (The one we added in previous step). If we dont have this check, we would add another child which would make script node having 2 children (which is incorrect)

Third time, in the HTML tree corresponding  to the document-root, there will be two children for the script tag (The one  previous step). if we dont have this check, we would add another child which would make script node having 2 children (which again is incorrect as it should have 1 children only)


So if the file is not edited, looks like there is some cached HTML tree that is returned and running this command more that 1 times would result in wrong HTML tree structure (a one that does not correspond to the text in the file).

So adding a 0 check to ensure that we don't add children to the script-node that has already been set up. Alternative approach is to clear the children array of script-node before setting up its subtree but that would again be not as performant as this check."
"Humm you are absolutely right.  It seems I committed the wrong working repo branch. "
"I really don't think that we should support users passing in coordinates in the wrong order, _especially_ now that you've mentioned how poorly it interacts with exclusivity ;)"
"Is there any specific reason that you are requesting this? I see that it is an extra check and it makes sense, but I don't see how this could go wrong. It has been like this for ages in the AppCompat library and never seen any issues with it"
"Correct, this warning is wrong. We need another scenario which assigns `(string)null`."
"To me, the second version scans better. The abbreviated version just looks like a bunch of typos at first glance. It's subjective.

Given that it's subjective, we should aim for consistency. General C#/.NET naming guidelines suggest using full words rather than abbreviations, and that's the guideline we follow in the rest of Xamarin.Forms [1]. Keeping the terms consistent throughout the API makes them more discoverable - if I type ""horizontal"" into a search or Intellisense, ""CenterHorizontal"" will show up while ""CenterH"" will not. 

If folks want to find the API to deal with columns, they should be able to trust that we call them ""column"" everywhere; not ""column"" in some places and ""col"" in others. 

[1] We've probably gotten at least one property name wrong somewhere, but it's _mostly_ consistent.
"
maybe something wrong with my local build (i tuned the inliner a bit) but sharplab shows the same output: https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIGYACMhgYQYG8aaGeHvf+PGsXJIGASwB2GBgHEYGALLYEAGRiSA5hgAWAHgAqAPgAUASgYBeI03IA6AEoBXaePww7LCPgAO4gDYwUADKQQBu4mAwuHYAqpK42ABmHsHiAF4wAPJJhqYWlpYM5AwA/MXklQwgDKR1pADcXLSiEtIMAGIQEOZWNvJKKupaunoAQgCeGDD5TdS8fNQAvkA===
"Was looking at this and thinking that even one minute probably isn't enough here. Seen CI have hiccups where threads stalled for considerable amounts of time in the past. 

This lead me to think about how this problem is approached elsewhere in our code base. Specifically how is `SpinWaitComplete` handled when called outside a `ForceComplete` method chain where there is an explicit `CancellationToken` to use. Found the following examples:

- `AliasSymbol.GetTarget`
- `SourceMemberContainerSymbol.GetMembersByNameSlow`

In these cases we always pass `default` for the `CancellationToken`. I think that is the approach we should take here. This means that well written code will behave correctly, even under extreme CPU load. While the current approach could exhibit incorrect behavior under extreme load. 

The upside is that when this is done wrong, if we make the mistake you mention, the code will deadlock and deadlocks are very easy to debug. :smile:
"
"For this particular example nothing is gonna be wrong because we wouldn't even iterate backwards if we see ASCII at the end of the string. However, I understand your concern. The comparison should have been
`if (codePointLen > sequenceLen)`
If the lead byte indicates 2 bytes but we iterated already through 3 bytes then we got invalid UTF-8. In this case nothing is to be captured and the invalid sequence is to be converted into replacement characters."
"Correct me if I'm wrong, but this is only executed once during start right? In that case I wouldn't make this a singleton."
"There will be some hiccups when we migrate to Helix, complex system stuff will go wrong. I feel like it's invetible we'll hit a few periods where we want to flip away from Helix, go back to the old system while we work out the kinks and then flip back. 

Ideally there would just be a nice global variable we flip in the YML to achieve this. That though feels like it will make the scripts really awkward: double the queue information, lot more `if` in them to change how it works. Definitely would be hard to follow and a bit more up front work. 

At the same time the only other option for ""temporarily disable Helix"" is revert this change. This change is more than just flipping our infra to Helix, it's also changing how run tests work, changing how our scripts work, etc ... That could be done independently because they're all designed to work on Helix or without Helix. Wonder if we should do the following: 

1. Get this change to a point where we all agree and approve it. 
1. Do not commit this change 
1. Open two new PRs: one PR that contains everything but the YML changes and one that contains only the YML changes. Merge them in that order. 

Then if we do hit a bug where we need to temporarily disable Helix we would just be reverting the YML. That's probably more managable than all the other work that is coming along here. 

Thoughts? Basically typing while I'm thinking on this one. "
"Hmmm. I thought we had something in the Numerics library that would just throw on fail here with a typed math exception instead of packing up the HRESULT in a generic wil_exception. @github am I crazy or does this exist?

(@github, not strictly necessary for this PR... but moving to the base:: numerics might make things look cleaner around these conversions.)"
Should this throw intentionally now if `_pData` is null given that it's not checked in the constructor anymore? Now it's implicitly crashing if someone did it wrong instead.
"This is kinda/sorta done, actually, as `ReadVersion()` contains some logging.

The ""problem""/""concern"" is one of ""scope"" & expectations: since I saw `LogCodedError()` previously in this method, I *expected* a similar log here.  Perhaps my expectation is wrong.

Additionally, `ReadVersion()` has a code path which could throw an exception, which would result in XA5104 *not* being raised, which could be differently underirable."
"For my records here...

The weird crash I was experiencing in the middle `OpenConsole.exe` while testing off the handoffs from the operating system, especially from background tasks running out of things like Visual Studio, VS Code, and on login, were because there was TOO MUCH handoff occuring.

I had a torn state. My inbox console was doing the very aggressive handoff strategy, including in the case of connect of a second client. That's no bueno. The handoff happens just fine, but the `OpenConsole.exe` accepting the handoff doesn't have the process list table or other records of the already connected clients. Therefore when it eventually receives a disconnect message for them... it tries to look them up in its table and horks because it was the `conhost.exe` that accepted the initial connection, not the `OpenConsole.exe`.

I already solved this problem in https://github.com/microsoft/terminal/commit/1cf4fb180634333b24fb1cda2797e45c3d18490d by blocking handoff for attaches and for consoles that are already initialized the first time.

I'm putting my foot down that there's no half way state here right now. Either the inbox one, when it initially starts up, hands everything off and is done with the matter OR something goes wrong and the inbox one remains the console server for the remainder of that session. Otherwise there's this state and countless other state that would have to pass, and that's beyond the scope of what I'm trying to accomplish right now.

Also, technically, we probably should be having some opaque value stored in `CONSOLE_API_MSG.Descriptor.Process` instead of a `(ConsoleProcessHandle*)` so this would fail in a table-lookup sort of way not an access violation from a weird pointer dereference off of a foreign heap value. But I'm just going to put this over here...
![image](https://user-images.githubusercontent.com/18221333/111551128-c18d9100-873c-11eb-8d60-c9a4cf875eff.png)
"
"> The behaviour of 12 bit variants is to repeat the first digit at the end, e.g. rgb:123/456/789 becomes rgb:1231/4564/7897. This is done by caculating value / 0xfff * 0xffff.

I didn't see any unit tests for the 12 or 16-bit channel values, but I think this algorithm _description_ is wrong. For example, this turns `0x600` into `0x6005`, according to Windows' calculator.

The algorithm itself seems correct, it's the same thing `XcmsLRGB_RGB_ParseString` does to turn any number of digits into a 16-bit channel value. It's just the text that confused me.

That said, it looks like this never happens, because the colour parser ends up scaling _down_ to 8-bits-per-channel, rather than _up_ to 16-bits per channel.

I'm a bit suspicious of that scale-down algorithm too, as it appears to just be trimming the least-significant digits (it seems `scaleMultiplier` appearing in `scaleDivisor` cancels out?) For example, given `0x6fff`, it gets scaled down as `(0x6fff * 0x11 / (0x11 << 8))` => `0x6f`. I'd have expected `0x70` there. Scaling up those two possible values, again, we get 0x6f6f and 0x7070. That's a difference from the original of 0x90 and 0x71 respectively, suggesting that 0x70 was the more-correct value to scale down to.

That said, I'm basing this on rounding-to-nearest behaviour: if there's specific rules about scaling colour channel values down, I'm unaware of them. For example, I tried to invert the round-up rule above as `0x6fff * 0xff / 0xffff`, and that also comes out with `0x6f`. However, the same rule for `0x6f00` comes out with `0x6e`, while the algorithm in the code still gives `0x6f`. There's a good change this last thing was _not_ how one inverts that rule though, since in its native habitat, it only ever scales up."
"This is the wrong license header: https://github.com/dotnet/runtime/blob/0a5ee51f72196253fb5b9c7207451123db631c62/src/libraries/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs#L1-L2

```suggestion
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
```"
"Yes. I have a list. The places that previously only handled RecordDeclarationSyntax are guarded (kind check or base type check). Some are guarded locally and are checked elsewhere (unreachable).
For the latter cases, I didn't see anything wrong with them. I could add assertions if you think that's useful.
An example is `ExpressionVariableFinder.VisitRecordDeclaration`.

---
In reply to: [616728346](https://github.com/dotnet/roslyn/pull/52702#discussion_r616728346) [](ancestors = 616728346)"
"> Is it just a matter of the wrong exception?

That's it, now it looks good. Thanks!"
It would be wrong to return `tempOptions` here?
"such assert won't stand nowadays, first because there are many cases where `dstIndType` is not integral, second because VN tries to handle GC heap and for it the type is always `TYP_REF`, so we could have `srcType = TYP_REF`, `dstIndType = TYP_DOUBLE`.

There are many cases where VN is potentially wrong and we uncover more of them by improving our optimizations but for now, the CQ benefits from it still outweigh potential undiscovered bugs from it.
"
"Yes, it seems crazy but there are multiple entry points to this feature so maybe it's related to that?"
from what I understood `_hostOS` is the OS where the build runs right? in that case Browser doesn't make sense here (I assume we have some other wrong assumption about this somewhere else so this is needed right now).
"I know that this was here before, but it is wrong. The widening has to do proper sign-extension like what the regular invoke does (regular invoke does it using `InvokeUtil::CopyArg` method).

For example:
```csharp
using System.Reflection;

var ctor = typeof(int[,]).GetConstructor(new[] { typeof(int), typeof(int), typeof(int), typeof(int) });
var arr = (int[,])ctor.Invoke(new object[] { (sbyte)-1, (sbyte)2, (sbyte)-3, (sbyte)4 });
Console.WriteLine(arr.GetLowerBound(0));
Console.WriteLine(arr.GetLowerBound(1));
```
prints 255 253, but it should print -1 -3 instead."
"> This is going to be wrong for `SSE` as its not the binary representation of `BitDecrement(0.5f)` for float
> 

yeah, copy-paste"
"I did, and something went wrong : [

I've run exactly

```
jake
jake runtests-parallel
jake baseline-accept
```

Now there are tons of changed and new files in the PR.

What should I've done differently?"
I guess I just hit the wrong button :)
The indentation here is wrong.
"I don't think so. The entire idea of this is the call is a synchronous operation and the caller is blocked waiting for a response. Hangs here are bugs that need to be fix and if we timeout or throw then we risk disabling the code path and falling back to the managed impl. I realize that may be worrisome, but the idea that we can timeout and then succeed is going to hide a bug and that seems like the wrong thing to do."
"Comment is wrong.  but i dont' care that much.  If you do change this, indicate that null means ""i don't care"", and then things with a higher match priority are picked over those that are lower or null.
"
"It's part of a if/else cascade - we only need to add the `TypeNonGCStaticsSymbol` if there's a class constructor, or the field is non-GC static. There's no quick way to check if a field is non-GC static - one has to ask the ""is it RVA/ThreadStatic/GCStatic"" questions first.

The best we could do here is change this `else` block to `needsNonGcStaticBase = true;` and delete the `dependencies.Add` line but then the reason string will be wrong."
"As pointed out in the mail thread, this is the wrong variable name. Setting this doesn't do anything.
"
I think this code is in the wrong place - you are likely walking more of the tree than you need. Wouldn't it be better to stop the walk at the very top of this function?
Having said that -- if we think doing this is not going to help those customers be successful (eg because we're not happy with the API) -- then I certainly am not arguing to do the wrong thing 😄  I think it would be better to sit on the problem until we feel confident we can do something useful.
"> Should it also have a general fallback at the bottom sort of like we give errorType when type checking?

It has a ""fallback"" already - emit the node as-is, which is used for _most_ typenodes. We only map away jsdoc-y typenodes here, cause printing them in not jsdoc is probably wrong. Namepath is even more special in that it doesn't even have emitter code, so actually just printed as an empty string."
"It looks like the DT failures are issues in DT:
- `eventsource` has an incompatible definitions for `MessageEventInit` and `MessageEvent` due to changes in lib.dom.d.ts (https://github.com/DefinitelyTyped/DefinitelyTyped/issues/45935)
- `testing-library__vue` is broken because `GetByRole` in `@github/dom` is overloaded and the `BoundFunction` type uses a conditional type with `infer` on a function type so it only picks one of the two overloads (which happens to be the wrong one for this case) (https://github.com/DefinitelyTyped/DefinitelyTyped/issues/45937)
- `knockout` is failing because `ko.observable` is overloaded with a `<T = any>(value: null): KnockoutObservable<T | null>` which breaks its own tests. (https://github.com/DefinitelyTyped/DefinitelyTyped/issues/45938)"
"Yeah, I doubt we'll see anything significant, and I will likely merge if it's not too crazy seeing as we can optimize later."
"@github, I don't really think that more details are all that useful, unfortunately, the real difficult details of what's wrong tend to be in unusual structure handling, which isn't actually well represented in the gc ref map in any case, except as an unfortunate side effect. From a crash dump of the assert it shouldn't be all that hard to find method that is being handled incorrectly, and then run that portion of the crossgen2 codebase to see what the argument layout engine is doing wrong. As I recall, the difficult bit of the investigations we did before was finding the exact method that had a problem reliably, and this should make that process much faster."
"> It looks like something is going wrong in the Correctness_Build. IIRC, error code 57005 (0xDEAD) means some kind of memory fault is occurring. Not sure what in this PR could be causing it.

I have no idea how to start investigating something like that."
"So how crazy an idea is it to add a bunch more tests to Roslyn?
<img width=""545"" alt=""image"" src=""https://user-images.githubusercontent.com/754264/162732606-06035e59-006d-4406-a890-a12afde2faa7.png"">

Maybe I'll just run them once on my machine for my own sanity and leave it at that :)

(The idea is to ensure that there isn't any byte arrays that have characters we would offer to convert, but where the conversion does something that makes the result not compile)"
"Details on where things can go wrong. Here is a struct return CSE
```
;;; System.Data.SqlTypes.SqlByte:op_Explicit(System.Data.SqlTypes.SqlInt16):System.Data.SqlTypes.SqlByte

STMT00017 (IL 0x009...0x00E)
N012 ( 30, 40)              [000071] --CXG-------              *  RETURN    struct $485
N011 ( 29, 39) CSE #06 (def)[000070] --CXG-------              \--*  COMMA     struct <l:$445, c:$447>
N005 ( 17, 21) CSE #03 (def)[000069] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $381
N003 (  2, 10)              [000067] ------------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffdaf1ca418 $340
N004 (  1,  4)              [000068] ------------ arg1 in rdx     |  \--*  CNS_INT   int    269 $45
N010 ( 12, 18)              [000065] ---XG-------                 \--*  OBJ       struct<System.Data.SqlTypes.SqlByte, 2> <l:$443, c:$446>
N009 (  6, 14) CSE #05 (def)[000064] ----G-------                    \--*  ADD       byref  <l:$401, c:$402>
N007 (  4, 12) CSE #04 (def)[000062] n---G-------                       +--*  IND       ref    <l:$3c0, c:$22c>
N006 (  2, 10)              [000197] I-----------                       |  \--*  CNS_INT(h) long   0x1d21a4a6058 static Fseq[Null] $105
N008 (  1,  1)              [000063] ------------                       \--*  CNS_INT   long   8 Fseq[#FirstElem] $341

```
after introducing the cse temp:
```
STMT00017 (IL 0x009...0x00E)
N016 ( 37, 45) [000071] -ACXG-------              *  RETURN    struct $485
N015 ( 36, 44) [000268] -ACXG-------              \--*  COMMA     struct <l:$445, c:$447>
N013 ( 33, 42) [000070] -ACXG-------                 +--*  COMMA     void   <l:$445, c:$447>
N005 ( 17, 21) [000069] H-CXG-------                 |  +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $381
N003 (  2, 10) [000067] ------------ arg0 in rcx     |  |  +--*  CNS_INT   long   0x7ffdaf1ca418 $340
N004 (  1,  4) [000068] ------------ arg1 in rdx     |  |  \--*  CNS_INT   int    269 $45
N012 ( 16, 21) [000266] -A-XG---R---                 |  \--*  ASG       struct (copy) $VN.Void
N011 (  3,  2) [000264] D------N----                 |     +--*  LCL_VAR   struct<System.Data.SqlTypes.SqlByte, 2> V18 cse0         d:1 <l:$445, c:$447>
N010 ( 12, 18) [000065] ---XG--N----                 |     \--*  OBJ       struct<System.Data.SqlTypes.SqlByte, 2> <l:$443, c:$446>
N009 (  6, 14) [000064] ----G-------                 |        \--*  ADD       byref  <l:$401, c:$402>
N007 (  4, 12) [000062] n---G-------                 |           +--*  IND       ref    <l:$3c0, c:$22c>
N006 (  2, 10) [000197] I-----------                 |           |  \--*  CNS_INT(h) long   0x1d21a4a6058 static Fseq[Null] $105
N008 (  1,  1) [000063] ------------                 |           \--*  CNS_INT   long   8 Fseq[#FirstElem] $341
N014 (  3,  2) [000267] ------------                 \--*  LCL_VAR   struct<System.Data.SqlTypes.SqlByte, 2> V18 cse0         u:1 <l:$445, c:$447>
```
Then `LowerBlockStore` blows up as it doesn't expect a `GT_OBJ` source."
"Hey @github, looks like something went wrong with the autoscaler. We've scaled in and out on this queue, and it is now taking work. @github will take a look into what happened."
Why would jit produce all that code for structs instead of a GC allocate call like with reference types? I might be wrong but it tries to get size from runtime handle first? Isn't it known at jit time?
"Personally, I don't have strong feelings between `GetEntryPointModuleHandle`, `GetMainProgramHandle`, and `GetMainProgramLibraryHandle`.  I'll even square the triangle with `GetEntryPointLibraryHandle`.

I do have weak feelings, which produce a preference order.

* GetEntryPointModuleHandle: The entrypoint is a unique thing.  You can have multiple methods named Main, but only one is the actual entrypoint.
* GetEntryPointLibraryHandle: While I think of .netmodules before I think of any Windows-specific use of ""Module"", I'm happy to say ""library"" instead of ""module"" here.  Maybe I'm wrong and this is my top choice.
* GetMainProgramLibraryHandle: In addition to Main being a non-unique target, lowercase ""main"" is subjective.  If you wrote a thin exe that hosts a big worker library, you may think of the worker library as the ""main"" aspect of your program.  It's probably not a likely mistake, but I like precision.
* GetMainProgramHandle: This could be a method handle, a function pointer handle, a library handle, a process handle, ... anything.  I don't like how vague it is.  Though, given that the type is `NativeLibrary`, maybe it's OK, and maybe it's better than the longer version.

Now that I'm done, I think GetEntryPointLibraryHandle is, in fact, my probably weak top choice (it's, at most, ""barely strong"").  But I don't want to rewrite my narrative bullet points."
"> Thank you for your contribution here, @github. Unfortunately as proposed we cannot accept this documentation. It is publicly documenting internal implementation details that are not appropriate in public XML documentation.
> 
> Given you see no way forward with this, I'm closing this PR.

What can I say?  I hope we shall manage to fix the implementation some day; I agree it would be a better thing to do than just write down how wrong this is now."
"> have you locally tried building/annotating MS.Ext.Caching.Memory to ensure these annotations are correct?

Yep, I've also annotated `Caching.Memory`. Didn't create a PR for it, since PR for `Extensions.Options` is not merged yet, so some annotations might be wrong."
"Tagging subscribers to this area: @github/area-system-diagnostics-process
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Currently, when process Handle can't be opened for any reason (local machine case), `ProcessManager.IsProcessRunning` enumerates all processes in the system to ensure that no process with given Id exists. This enumeration implemented via `EnumProcesses` call which is very slow (~10ms) compared to good case when process exists and handle is successfully opened

I want to suggest some improvements to (mostly) get rid of this fallback to achieve better performance.

Main suggestion is assume that process doesn't exists when `OpenProcess` failed not due to lack of permissions (`ERROR_ACCESS_DENIED`).

But there are some special cases should be considered.

Handle to process couldn't be opened:

- for Idle processes (`id=0`) (`ERROR_INVALID_PARAMETER`)
- for protected (e.g. csrss.exe) processes (`ERROR_ACCESS_DENIED`)
- any other cases when our process is limited? maybe there is something special on Nano Server or old/future versions of Windows (who knows?)

In these cases we could (1 OR 2 OR 3):

1. fall back to slow enumeration (looks like the safest way, cases when enumeration does happen don't seem to be common)
2. optimistically assume that process is still running (allows to fully remove enumeration for local machine, but who knows if any other corner cases exists)
3. other suggestions?

`System.Diagnostics.ProcessManager.OpenProcess` still assumes `ERROR_ACCESS_DENIED` means still running process. So second way doesn't look completely wrong.

What do you think, which way should be used? In this PR, I've implemented the first way, but it's not a problem to rewrite with second way if these optimistic assumptions are reasonable.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>epeshk</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Diagnostics.Process`, `community-contribution`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
This looks like a  previous wrong merge since nothing was done here. Applied changes to fix applying the IsReadOnly property.
"Agree. I started without but later I brought it back to have similar abstractions with the same level of indirection. I don't think there was a technical reason to use this, but I could be wrong as it was a while back. I'll try to remove it."
"This logic looks wrong to me. What happens if `isWithinBaseUriSpace(absoluteUri)` is false, `force` is false, and `replace` is true?

What I'd expect is: since this is an external navigation, the force param is irrelevant, and the `replace` flag means we should be calling `location.replace`.

What the logic appears to do is call `history.replaceState`, which won't produce a useful behavior because it's only doing HTML5-style client-side navigation and won't trigger an actual external page load.

Here's the full truth table I'd expect:

| isWithinBaseUriSpace(absoluteUri) | Force | Replace | Expected behavior |
| ------------- |-------------| -----| ---| 
| false | false | false | `location.href = url` (append external page load to history) |
| false | false | true | `location.replace` (replace with external page load on history) |
| false | true | false | `location.href = url` (append external page load to history) |
| false | true | true | `location.replace` (replace with external page load on history) |
| true | false | false | `performInternalNavigation(absoluteUri, false, false)` (calls `history.pushState`) |
| true | false | true | `performInternalNavigation(absoluteUri, false, true)` (calls `history.replaceState`) |
| true | true | false | `location.href = url` (append external page load to history) |
| true | true | true | `location.replace` (replace with external page load on history) |

Do you agree with this list? Could you check how it corresponds to the implementation? I think the only combination that's currently wrong is the one I mentioned at the top of this comment.

I suspect that before this PR, the logic here was already wrong in that it didn't handle `replace` without also `force`. That was OK before because it wasn't really proper public API. But since this is becoming proper public API now, we should make sure all the combinations of parameters work correctly."
"I don't think there's any concern here. Nothing would go wrong unless we receives one of these messages before the first page connection, and that's impossible, because it's the page that sends them."
"They represent different checks:

- Imports.targets: This guards every build of our code base. It provides a polite failure when the wrong version of MSBuild is used.
- Powershell: Here we are discovering MSBuild instances on the machine and need to filter to 15.1 only. This covers items like running Build.cmd, CI machines, etc ... It helps us not hit the error that is issued in Imports.targets."
Do we understand if this does the right thing if the wrong version of the `ef` tool is installed?
"Hmm the strangeness comes from the fact that the version of S.IO.Pipelines that's in 6.0.0-alpha.1.20569.2 is versioned 6.0.0.0 for its assembly version, and that's what M.A.Components.Web references. However, the S.IO.Pipelines that's built into the aspnetcore shared framework is 5.0.0.0 and that's breaking crossgen since it can't find the 6.0.0.0 assembly. Something is wrong with the way we build our shared framework."
"So we are adding a jenkins job that will fail, by design, in the commit queues? That seems wrong. "
"> it's an add-on.

I think if it's part of the DefaultBuilder or not. This currently isn't part of the default builder.

> I'd generally lean toward keeping another middleware in its own assembly but am curious: What looked or felt wrong @github❔

It was mostly that the middleware itself was more code than the rest of Http.Extensions. Like I don't think there are any middleware as part of the Http solution at all.

"
"Looks like a legitimate CI failure. `BenchmarksRunWithoutError` is another test which was quarantined due to https://github.com/dotnet/aspnetcore/issues/23366 but was later unquarantined via https://github.com/dotnet/aspnetcore/pull/31156. So it seems the tests fail when they're both ""active"". @github wondering if you have any context on the relation here?

```
OpenQA.Selenium.BrowserAssertFailedException : Xunit.Sdk.EmptyException: Assert.Empty() Failure
Collection: [Element (id = 998de1bd-fcd8-4799-8dad-14a452284a07), Element (id = 55fd5e9a-f85d-4d58-9b66-bfb75ed57e14), Element (id = 78b326ec-137d-4fee-ae58-12912cd24578), Element (id = b126de36-52b2-46c1-bdd7-fa9fad7381a5), Element (id = a3d7b7a9-4a29-42ae-9219-4656f8626ca6), ...]
   at Xunit.Assert.Empty(IEnumerable collection) in C:\Dev\xunit\xunit\src\xunit.assert\Asserts\CollectionAsserts.cs:line 284
   at Microsoft.AspNetCore.E2ETesting.WaitAssert.<>c__DisplayClass17_0.<WaitAssertCore>b__0() in /_/src/Shared/E2ETesting/WaitAssert.cs:line 83
   at Microsoft.AspNetCore.E2ETesting.WaitAssert.<>c__DisplayClass18_0`1.<WaitAssertCore>b__0(IWebDriver ) in //src/Shared/E2ETesting/WaitAssert.cs:line 109
Screen shot captured at 'D:\workspace\_work\1\s\artifacts\TestResults\Release\Microsoft.AspNetCore.Components.E2ETests\92efa74db8e842dca7b5c80a40d6154b.png'
Encountered browser errors
[2021-04-29T21:49:31Z] [Debug] http://127.0.0.1:53201/_framework/dotnet.6.0.0-preview.4.21221.4.js 0:142749 ""mono_wasm_runtime_ready"" ""fe00e07a-5519-4dfe-b35a-f867dbaf2e28""
[2021-04-29T21:49:32Z] [Debug] http://127.0.0.1:53201/_framework/dotnet.6.0.0-preview.4.21221.4.js 0:142749 ""mono_wasm_runtime_ready"" ""fe00e07a-5519-4dfe-b35a-f867dbaf2e28""
[2021-04-29T21:49:33Z] [Severe] http://127.0.0.1:53201/benchmarks/lib/minibench/minibench.js 218:28 Error: Wrong number of items rendered
    at measureRenderList (http://127.0.0.1:53201/benchmarks/renderListBenchmark.js:22:11)
    at async ExecutionTimer._runBlock (http://127.0.0.1:53201/benchmarks/lib/minibench/minibench.js:149:17)
    at async ExecutionTimer.run (http://127.0.0.1:53201/benchmarks/lib/minibench/minibench.js:121:56)
    at async Benchmark._measureTimings (http://127.0.0.1:53201/benchmarks/lib/minibench/minibench.js:248:9)
    at async http://127.0.0.1:53201/benchmarks/lib/minibench/minibench.js:201:21
[2021-04-29T21:49:33Z] [Severe] http://127.0.0.1:53201/benchmarks/lib/minibench/minibench.js 218:28 Error: Wrong number of items rendered
    at measureRenderList (http://127.0.0.1:53201/benchmarks/renderListBenchmark.js:22:11)
    at async ExecutionTimer._runBlock (http://127.0.0.1:53201/benchmarks/lib/minibench/minibench.js:149:17)
    at async ExecutionTimer.run (http://127.0.0.1:53201/benchmarks/lib/minibench/minibench.js:121:56)
    at async Benchmark._measureTimings (http://127.0.0.1:53201/benchmarks/lib/minibench/minibench.js:248:9)
    at async http://127.0.0.1:53201/benchmarks/lib/minibench/minibench.js:201:21
[2021-04-29T21:49:33Z] [Debug] http://127.0.0.1:53201/_framework/dotnet.6.0.0-preview.4.21221.4.js 0:142749 ""mono_wasm_runtime_ready"" ""fe00e07a-5519-4dfe-b35a-f867dbaf2e28""
[2021-04-29T21:49:35Z] [Debug] http://127.0.0.1:53201/_framework/dotnet.6.0.0-preview.4.21221.4.js 0:142749 ""mono_wasm_runtime_ready"" ""fe00e07a-5519-4dfe-b35a-f867dbaf2e28""
[2021-04-29T21:49:36Z] [Debug] http://127.0.0.1:53201/_framework/dotnet.6.0.0-preview.4.21221.4.js 0:142749 ""mono_wasm_runtime_ready"" ""fe00e07a-5519-4dfe-b35a-f867dbaf2e28""
[2021-04-29T21:49:37Z] [Severe] http://127.0.0.1:53201/_framework/blazor.webassembly.js 0:27256 ""crit: Microsoft.AspNetCore.Components.WebAssembly.Rendering.WebAssemblyRenderer[100]
      Unhandled exception rendering component: Failed to execute 'setAttribute' on 'Element': '@github' is not a valid attribute name.
      Error: Failed to execute 'setAttribute' on 'Element': '@github' is not a valid attribute name.
          at V.applyAttribute (http://127.0.0.1:53201/_framework/blazor.webassembly.js:1:20408)
          at V.insertElement (http://127.0.0.1:53201/_framework/blazor.webassembly.js:1:19455)
          at V.insertFrame (http://127.0.0.1:53201/_framework/blazor.webassembly.js:1:18439)
          at V.insertFrameRange (http://127.0.0.1:53201/_framework/blazor.webassembly.js:1
```"
"I probably resolved the merge conflict wrong, let me revert it"
">  looked at merging the two cases into the new code but it seemed riskier.

we can address risk by adding enough tests.  we shoudl make this code clear and easy to understand.  otherwise the chance of breaking things in the future (or getting something wrong now), is much higher.  "
"this comment doesn't seem accurate (it talks about semantic models... but that doesn't seem to apply here)...

(note: i recognize that comment existed before... but it still seems wrong :))."
"Not really. projectIds in this case is a list of projects that already contains this file, presumably they have the right references, or at least much better references than Miscellaneous Files would provide.

This is really the ""last resort"" call; I should add a comment clarifying that we really don't ever want to end up here, but if anything goes wrong with another project system, we can't entirely blow up."
Dumb question.  'AnalyzerConfig' is more abstract.  Do we ever expect this to not be a .editorconfig file though?  Should this just be ContainsEditorConfigDocument?  (same question for all the rest of the names).
"@github The analyzer was not created because reference equality is disallowed or bad. The analyzer was created because reference equality returns the wrong answer and has caused bugs in code operating on symbols. I was able to special case nearly every scenario used by the compiler's VB code (`is` will not warn for _concrete types_ where `=` is also allowed), but this one is the outlier."
"Out of scope, but I wonder how common it will be for people to misuse the attributes like this.

I think any usage of [MaybeNull] on a non-annotated reference type is probably wrong. The correct attribute usage would probably be to annotate as nullable, right?"
"> As we control both sides it shouldn't ever be in the wrong format afaik

Any third party analyzer can report a diagnostic with a property bag which has a key named Unnecessary. I think we should handle this gracefully if possible."
"Well, doing ```baseType = method?.ContainingType;``` is wrong. We should do ```baseType = baseType.BaseTypeNoUseSiteDiagnostics``` for both cases, but ```break``` once ```method``` is null.

---
In reply to: [384830098](https://github.com/dotnet/roslyn/pull/41918#discussion_r384830098) [](ancestors = 384830098,384828048)"
"> As a side not for those plans, when publishing as a self contained, you need to have the runtime pack for that RID, so that won't allow us sharing the build of tests on multiple RID test runs

When I was talking about switching to use the Publish target I didn't mean to switch to self-contained as well. I don't think that would apply here, right?

FWIW we will need to publish self-contained at least for code coverage in the future (talking about local inner-loop) as the current model is easy to break (we instrument referenced assemblies from the testhost directory and then undo the instrumentation when the coverage run is finished). In the case of something going wrong or the process being killed, the testhost is broken and you need to rebuild."
"This section's getting a bit crazy, how about we organize it like this:

- `mergeEnvironments` now takes a base environment and an array of secondary environments
- The secondary environments are filtered through a `resolveConfigurationVariables`

I think we could then minimize the number of lines dealing with the env in this function and de-duplicate the `_configurationResolverService` parts. What do you think?"
dumb q but now can we reorder these to match VT order instead of .. this
"So here's my thought - the client app was already emitting all these spaces intentionally. This was actually an optimization that conpty was doing _for them_, and an optimization that we were doing wrong (in this scenario). 

We'll still be sending the optimized sequences if the app does something like ""Y &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X"", or if the app uses `^[[K` to clear the line (like a sane application should)"
"@github, clearly something went wrong from mobile. I've now made sure it's in."
"@github oh.. my code is totally wrong

For example: MinValue: 1, MaxValue : 7, Step: 2, Value: 3

Round(3 / 2) * 2 = 4 .... I need to rewrite it
 "
"Looks like the only usage of `nextcharA` is wrong as it is comparing function pointers instead of result of functions, so this condition always returns true:
https://github.com/dotnet/runtime/blob/342d9d342a440121def32c09735881ba64bd0cdc/src/coreclr/src/ilasm/grammar_after.cpp#L938"
"I would like provide to users to create their own gesture recognizer based on TouchGestureRecognizer.
Therefore, making this class internal will be wrong.
I can also add all this functionality to GestureRecognizer if it is not superfluous."
"Here's a crazy idea.

I think we should move this into utils.cpp right under `ColorFromHexString`.

This will move us one step closer to having a unified color parser, just like `XParseColor`.

We can then start to make use of it in other parts of the code, like Terminal's settings handler, to get support for ""any kind of color the terminal can handle""."
"It's for this reason that I encouraged Pankaj to propagate an event for a rename request. If we live update the title in the HeaderControl, we are (even momentarily!) giving it _control_ over the title[2]. It should never have that control, because it cannot see from where it is sitting how it plays a part in the bigger picture[1]. It violates the principle that this is a dumb data container.

What do you think?

[1] If the tab doesn't want the title to have changed (for various reasons), it has to listen to the ""a property changed event"" and _revert it_ if it was the title.

[2] The tab needs to know about what the user-overridden title is _anyway_ so that it wins out over pane titles or app titles; there's no value in having two masters for the title."
"@github Maybe it's better to remove it. Because the way that `ImageElementManager` works on Android is different from iOS and UWP. On Android, we set the Image using an [external method ](https://github.com/xamarin/Xamarin.Forms/blob/4a2b823045a48b704d7cea561f3ed59bdf9f5c0f/Xamarin.Forms.Platform.Android/Extensions/ImageViewExtensions.cs#L24) and we have an isolated [method to set the placeholder](https://github.com/xamarin/Xamarin.Forms/blob/4a2b823045a48b704d7cea561f3ed59bdf9f5c0f/Xamarin.Forms.Platform.Android/Extensions/ImageViewExtensions.cs#L110), this doesn't occur on UWP and iOS.

For UWP, if the `ImageSource` doesn't exist or something went wrong the value will be `null` if that is the case, we will set the `ErrorSource`, as you can[ see here](https://github.com/xamarin/Xamarin.Forms/pull/11682/files#diff-8d87756798298b7c41f0e38383d8b106R160)
For iOS is similar also, as you can see [here](https://github.com/xamarin/Xamarin.Forms/pull/11682/files#diff-e7e02ce38379deb0c027bd4e04e17265R239) 

If you have any thoughts about it, please let me know."
"I'm now verifying IL for all tests I added modified, except a couple @github said not to because they're too long.

There is a test directly below which github thinks I modified, but that's just the git diff going wrong."
this was wrong
"Yea. sucks, this would be a very good feature :("
"That's coming from the wrong window. You need to build and run VS Code out of sources for me to accept this PR. Here are steps:

https://github.com/microsoft/vscode/wiki/How-to-Contribute

Also remember what I said about Testing in the issue:

> Testing
>
> Testing this change is a little tricky because nothing inbox in the OSS version of vscode uses the Microsoft auth stuff, but what you can do is download my Microsoft To Do extension (using the ""Download extension"" button on the right side) and then install it in Code OSS using ""Install from VSIX"""
"i trust you.  i just like to know with 'code moves' if it's effectively substantively unchanged or not.  my presumption is that it is unchanged.  but if i'm wrong, it's good to know to review more carefully."
This is wrong. You should be reading from `pipe.Reader` -- not `pipe.Writer`.
"Link is wrong
```suggestion
    <Compile Include=""$(MSBuildThisFileDirectory)..\..\..\..\Compilers\Core\Portable\InternalUtilities\SharedStopwatch.cs"" Link=""InternalUtilities\SharedStopwatch.cs"" />
```"
"If the `??` evaluates, then something really went wrong. I thought an empty dictionary would be better than a `null`.

It could `LogError` instead, but it means we have something broken not-actionable for users. Should it be an error instead?"
"It seems wrong for this to be configurable as always `.js` or `.jsx`. I think the right policy is: if the file you're importing from is a `.ts` or `.js` file you should import with `.js` (if the setting is on), if the file is `.tsx` or `.jsx` you should import with `.jsx` (if the setting is on). Then all the user has to set is: yes add extensions, or no don't add extensions."
"Oops, yeah, that's wrong. Should be just `if` instead of `else if`, and unifyFromContext will handle the resulting type set correctly."
"Because interfaces/types can’t have property declarations, and classes/objects can’t have method signatures (or any other member that starts with an open paren, AFAICT.)

Unfortunately, due to the definition of where ASI occurs, determining whether ASI occurs while parsing is really easy, but determining whether a given semicolon in an already-parsed tree _would_ have been inserted by ASI were it not explicitly included (which is what this function tries to determine) is _extremely_ wishy washy. The definition is (paraphrasing a bit) “ASI occurs just about any time the parser can’t understand the next token without inserting a semicolon first.” Which means, to truly tell whether a semicolon was necessary, you have to try parsing without it, and see if you get the same result. That’s why this function appears so strange, and why the chances that this misses an opportunity to delete a semicolon is _much_ higher than the chance that `isSemicolonInsertionContext` is wrong—that one essentially just enumerates the places where `parser.ts` parses an optional semicolon."
"I'm dumb.  Will switch to a better approach.
"
"This feels wrong. It looks like ValueAndDecision should use actual value of a constant as a key, but here we are trying to lookup using BoundExpression as a key. Is there a unit-test verifying that we enter this if when expected?
"
"Hi, I'm the reporter of this issue - thanks for the swift fix! I was really curious why this has been happening (because seemingly it didn't really look that much different from other code that has been working) and I got into reading this PR to see how it got fixed.

I'm obviously just a bystander and I lack *a lot* of context but understanding this fix probably would allow me to understand the TS compiler better. I'm wondering if you would be able to share a little bit more in-depth explanation behind this? I will totally understand if you won't have time for that though.

I suspect that `SymbolFlags.TypeAlias` checks if this is a `type` type and not the `interface` - does it mean that one could use the `interface` for `LibraryManagedAttributes`? I kinda assumed that this is not possible but maybe I was wrong - I can't quite check this quickly myself because this has not been yet released to the nightly channel.

This change later checks the `typeParameters.length >= 2` - this looks quite odd for me because the given code uses exactly 2 type parameters, so why this is even relevant for this fix? I would more expect that this piece of code would provide exactly as many type parameters as the `managedSym` accepts (up to 2 as no more will be ever provided). Shouldn't also maybe `JSX.LibraryManagedAttributes` with more than 2 type parameters result in an error since those extras won't ever be provided? And how ""fillMissingTypeArguments"" is relevant here for the ""top most"" `managedSym`? Will this fix the other case that I've mentioned (albeit without repro because I've concluded that the underlying issue is probably the same):
```ts
type LibraryManagedAttributes<C, P> = WithConditionalCSSProp<
  ReactJSXLibraryManagedAttributes<C, P>
>
```
This snippet is using both type parameters so I would expect that nothing is missing here but yet it doesn't work either.

I was wondering about an additional thing for quite a bit - maybe you could describe this shortly as well. What's the difference between `aliasTypeArguments` and `typeArguments`, between `symbol` and `aliasSymbol`, between `type` and `typeAlias`? 🤔 "
"Oops, wrong resource.
"
"I'm still not convinced the current behavior is best choice. We would throw exception on wrong type, but marshal null as false or zero. That's kind of consistent with JS native behavior.

Cons of current approach is that it's not consistent from if you think about `undefined` and `null` as different types.
Cons of throwing exception on `null` and `undefined` is that exceptions are very expensive."
"Ignore this, I'm a fool and am checking the wrong node's kind."
"this is needed by rename. if we do not trim it, renaming foo to bar we will replace a[""foo""] with a[bar], which is wrong.
"
"@github Thanks, I hadn't realized I had the wrong base. Rebased and ready for review!"
"It looks like making the synthesized record properties implicitly declared has negative consequences for completion. After thinking about it more I'm also not convinced it matches our other behavior. For instance, `get` accessors are not considered implicitly declared because they have some syntax associated with them. I think the same thing is true for record properties. That syntax is also associated with the primary constructor parameter, but I don't think it's wrong to consider the syntax as declaring both symbols.

I'll change `IsImplicitlyDeclared` for the properties back to what we have right now and we can think about changing it later if it's important. The accessors will remain implicitly declared because they really have no associated syntax."
"Some background on the change in this PR...

For a type `keyof { [K in X as Y]: ... }` we want to determine if it is correct to simplify to an instantiation of `Y` with `X` substituted for `K`. Let's say `X` is a union type `'a' | 'b' | 'c'`. Without simplification, the `keyof` operation becomes a union of three instantiations of `Y` with `'a'`, `'b'`, and `'c'` respectively substituted for `K`. We want to determine if it is correct to simplify to a single instantiation of `Y` with `'a' | 'b' | 'c'` substituted for `K`, which it will be when `Y` distributes over union types in `K`. A complication is that we can't always inspect every constituent of `Y` because it might be circular or infinitely expanding. So, for some types we can't easily provide an answer. However, unless we can prove otherwise, it is reasonable to assume that `Y` depends on `K` _in some way_, or else the entire construct is just a needlessly complicated way of writing just `Y`. 

With that in mind, the best approach is to not simplify unless we can definitely prove a type to be distributive. Originally the code was doing it the other way around (assuming distributive and attempting to prove otherwise), but that meant we'd get it wrong in cases where the analysis was incomplete."
"> Any way you can make those results more readable?

Well, I could hand-construct a table. That seems like a lot of work when BDN should be able to output something I could copy/paste directly.

I run BDN using (e.g., with ""runtime2"" as baseline build and ""runtime"" as diff):
```
pushd C:\gh\performance\src\benchmarks\micro
dotnet run -c Release -f net6.0 -- --filter *ByteMark* *BenchI* *BenchF* *SciMark2* *SpectralNorm_1* *FannkuchRedux_2* --coreRun C:\gh\runtime2\artifacts\tests\coreclr\windows.x64.Checked\Tests\Core_Root\CoreRun.exe C:\gh\runtime\artifacts\tests\coreclr\windows.x64.Checked\Tests\Core_Root\CoreRun.exe -e GitHub
```

The `--join` option would seem tailor-made to put all the different results together, but BDN crashes when using it: https://github.com/dotnet/performance/issues/1855.

> Would be great if you could pick one or two regressions and try to figure out why it's slower.

And the big winner.

It's hard to compare base/diff perf numbers: are the branch predictions wrong/slow? Is the straight-line code more pipeline-able? Not sure how to figure this out... Need some Vtune magic probably."
"> @github Is this fixing #56766 ? 

Yes. Sorry, don't know how I ended up linking the wrong one."
"Thanks @github, I believe I have reached the stage where I have all CoreCLR tests working and some Mono tests too, there are just two remaining failure buckets I haven't yet managed to get my head around and I would definitely appreciate your help:

1) For the two arm64 test legs there's some problem with building the native components; the <code>gen-buildsys.sh</code> script claims the targeting architecture is wrong even though it does seem to get passed in the command-line argument.

2) For the two arm legs there's a configuration inconsistency - we're pulling down a debug version of the framework (just like in pre-existing PR runs without my change) but we seem to be expecting release during the LLVM AOT Compile CoreCLR tests step. Have you got any idea where we're supposed to be overriding the LibraryConfiguration property in this case? In the scripts it defaults to release and I haven't yet found out where we've been switching it over to Debug previously.

Thanks a lot

Tomas"
"Tagging subscribers to this area: @github/area-system-runtime
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

https://github.com/dotnet/runtime/issues/59636

When enabling the globalization invariant mode on Linux, we'll always fallback to `UTC` time zone which is wrong and a regression from .NET 5.0. We have some docker containers which enable the globalization invariant mode by default on the whole image; the problem will be obvious there.

In .NET 6.0 we have introduced the [Globalization Invariant Mode Breaking Change](https://docs.microsoft.com/en-us/dotnet/core/compatibility/globalization/6.0/culture-creation-invariant-mode). This breaking change causes throwing exception when enabling the globalization invariant mode and creating any culture other than Invariant culture. 
If the globalization invariant mode is enabled and trying to get the local time zone when running on Linux platform, the creation process will try to initialize the display names of the time zone. This initialization tries to reset the UI culture to `en-US` if it is set to Invariant culture. When we have the globalization invariant mode is on, the UI culture will always be Invariant and cause the time zone initialization to fallback to `en-US` which will throw exception because it is not allowed to create any other cultures in the Invariant mode. We catch the exception and then fallback to use `UTC` time zone instead of the actual time zone set on the running machine.

The fix is simple and not risky which is avoid creating any culture during time zone initialization when the globalization invariant mode is on.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>tarekgh</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>tarekgh</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Runtime`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
@github @github Looks like I was wrong about the llvmfullaot scenario. I don't have that working. Are there instructions on how to use it on Windows or macOS? I'm not even sure if I am compiling the runtime correctly so guidance here would be appreciated.
"@github Since I'm learning to work with the project, I got a question. Let's say you have a piece of code failing (like the assertion in the log). How do you run clr against this piece of code to debug what is wrong? I believe there must be a better way than just ""copy pasting"" the code into a simple ""Hello world"" project to emulate the behaviour.  Thank you in advance.
"
"> But there's something else: I think the existing fallback routing logic could still cause problems anyway for URLs ending in .<something>. I wonder if we should do something like re-processing the request as a navigation event if we fail to load an internal resource from the request URL (basically falling back to the host page if our initial guess was wrong). That way, users hopefully won't ever get the weird ""There was no content at _____"" page.

Hmm, it's unfortunate that Android's webview doesn't tell us the reason for the URL load event. WebView2 tells us whether or not it's a navigation, so we know unambiguously whether to use fallback logic or whether to regard it as a 404 if there's no match.

On Blazor WebAssembly/Server, we already have a strategy for dealing with not knowing whether it's a navigation: 

 * If a request matches some existing static content, we serve it
 * Otherwise, if it looks like a non-file (has no potential filename extension in the URL) we fall back on the index page
 * Otherwise, 404

It's not a perfect strategy as `/users/bob.gif` won't get the fallback when maybe you want it to (if that's meant to match `/users/{fullname}`). However people can customize this by editing their `Program.cs`. In practice, very few people have ever hit problems with this and complained about it.

> I think the big remaining question here is how we want to handle URLs that look like they point to internal files, but actually refer to pages. Do you have any thoughts on this @github @github?

(Merging the threads as these perhaps come down to the same question)

I'm definitely happy to give developers control over this. In fact I expect we'll *have to*, because otherwise they have no way to customize this equivalent to what's available for Blazor WebAssembly/Server (i.e., changing the routing config).

The bit I was most thrown off by was referring to loading `/content/file.pdf` as **external** navigation when it's clearly internal to the base href.

Is it possible that the underlying problem here is a matter of terminology? We have this event called `ExternalNavigationStarting`. What if we just passed the whole question on to the app developer by generalizing this to be about all navigations, both internal and external? If we fired an event on *every* URL load, we could preconfigure some `UrlLoadingEventArgs` with a property called `UrlLoadingStrategy` set to whatever our basic guess is (e.g., load internally if an only if it's within the base href - and perhaps in the WebView2 case we take account of whether it's a navigation event since we have that info), then developers can add a handler to customize the logic any way they like for both internal and external loads. Developers who want to override the behavior for a specific subset of URL patterns can match those patterns in their handler, and for all other URLs, leave the preconfigured behavior unchanged.

Does this make sense? Am I up-to-date with all this, or was this already considered before?"
"Reversing a list is not the correct solution. It means that some part of the system is using the wrong representation and possibly exposing it to extensibility. "
"> It's not going to fail if the string is wrong, right? It just won't light up the fixed behavior until you're running on a runtime with the updated OS platform string.

That'd be my understanding, it won't fail, it just won't do anything until the corresponding change is made. I'll make the change"
This seems wrong
"Yes, it was wrong now that declaration expressions can appear in new and novel contexts. However, perhaps it would be better to replace the (incorrect) cast with an `as` operator. #Resolved"
"Actually, I reviewed that and initially I was confused by how the `EndpointMetadataApiDescriptionProvider` works but after taking a closer look to it I am confident that my convention is wrong and should be removed. We will be able to do something like this when Results type are self-describing."
"Exactly. You are right and I was wrong.
@github Had added MapGroup(https://github.com/dotnet/aspnetcore/pull/41265) pre conditions with param names and I continued the same."
"We were losing ref-ness here, so the conditions for these errors were not even detected. 
Considering this is an error scenario overall, I am not sure if these errors should be reported, but they were not reported originally for a wrong reason - we were not detecting them at all. 
Now the errors are produced as a byproduct of the binding. Whether these errors should be reported or dropped is a separate question and not a part of this fix IMO.

---
In reply to: [160800083](https://github.com/dotnet/roslyn/pull/24128#discussion_r160800083) [](ancestors = 160800083)"
"Test failure:
https://github.com/dotnet/aspnetcore/blob/49a10149bc62df40ac21c1227f792c8b4edb0d8d/src/Mvc/test/Mvc.FunctionalTests/RoutingDynamicTest.cs#L108-L116

This test was making the wrong assumptions about %2F and should be updated."
"It's definitely not high priority for me as I don't even use the localized version, but the approved terminology is clearly wrong then, as would seem obvious to anyone both familiar with the language and knowing that the ""hash"" in ""hash algorithm"" is an adjective, not a name of the algorithm."
"Based on what's in MSBuildTask, I think this is wrong. It should be `debug:none`. Will fix."
">This always ends up being parsed as a BinaryExpression, as when a generic type declaration cannot be parsed correctly, it seems we parse ```<``` as Less Than.

>I can't think of any cases where we would parse an expression type as type syntax which would contain an invalid dimension other than an ArrayTypeSyntax.

Can one create such a tree manually by using SyntaxFactory? Also, I might be wrong, but I think with the recent changes to the parser an element type of the array type could be a nullable array type with sizes as well. Also, since we are going to do the collection of misplaced sizes for other contexts too, and in those contexts parser's behavior around handling of ```<``` might be slightly different, or it might change in the future, I think it would be more robust to create a helper that doesn't make any assumption on how the parser works, simply visits the syntax (by using a syntax visitor) and collects all size expressions from array types in the syntax. 


---
In reply to: [253308012](https://github.com/dotnet/roslyn/pull/32843#discussion_r253308012) [](ancestors = 253308012)"
"dumb question, why no-op?  The other internal visit methods don't do that. #Closed"
">Debug.Assert(_lazyRemappedSymbols is object || this is AttributeSemanticModel || !Compilation.NullableSemanticAnalysisEnabled); [](start = 12, length = 127)

It feels like the assert is too relaxed now. Looking at it, one might get a wrong idea that it is always Ok for an AttributeSemanticModel to not have a map. However, I believe an AttributeSemanticModel for an attribute within a local function (on parameter or type parameter) is expected to have a map. If that is correct, consider tightening the assert to reflect that."
"I agree that publishing experimental packages to nuget.org sends the wrong message. A developer can easily get confused about what is supported.

Keeping experimental packages off of nuget.org, and forcing users to opt-in by using a different package feed, makes it even more clear that this package isn't intended for production usage."
">Option [](start = 23, length = 6)

Do we use `default(OptionKey)` as a dictionary key somewhere? That seems wrong since that does not represent a valid value of `OptionKey`."
"why? This is wrong, we use the registry to build the image tag. "
"I'm not saying this is _wrong_, but if this is where commit messages and PR messages are really important to clarify some intent here."
"> This is an existing diagnostic for this identical scenario.  I am not attempting to improve it in the context of this set of changes.

I think we should improve that because before one could almost never run into this existing diagnostics and it would most likely mean what it says. For this scenario, the diagnostic should be improved to explain what is wrong in a way the people can understand. Please, either ad a PROTOTYPE comment or open an issue for this.

---
In reply to: [416983969](https://github.com/dotnet/roslyn/pull/43673#discussion_r416983969) [](ancestors = 416983969,416949513)"
Was this approach wrong for the AdvSimd case?
"Those directions are wrong now for .NET 3.x and above.  SOS is shipped out of band, not part of the runtime anymore but is automatically loaded from the extension gallery for recent internal windbg versions."
"This is an interesting style of iterator, but I looked it up and confirmed to myself that you're not crazy."
"My gut tells me the interface would be good _now_, but bad _in the future_. As we implement UI-driven features that diverge from the representation in the settings model (which we _will_, make no mistake), we'll have to add things to this idl manually anyway.

_Already_, this is incorrect. We should move the bindable enum stuff up to the ViewModel because _it's a viewmodel of an enum value_, and make the active values in the ProfileViewModel use EnumEntries for enum fields. Much of the logic that is in the Profiles page CodeBehind should be here.

This is just a start, and I think doing the interface thing would take us on the wrong path. What do you think?"
"To be honest, I don't remember why I added that check for '_' there. It looks wrong. Thanks for the fix @github !"
"Could you fix the grammar here? Was wrong before of course. (""XPath failed to match any 
```suggestion
    <value>XPath failed to match any elements</value>
```"
"I thought of some `TextEditorSelectionChangeKind` too, but that might give the wrong impression that the enum is exhaustive.

```ts
enum TextEditorSelectionChangeKind {
    Undo,
    Redo,
    Other // or unknown
}
```

Then users can check for `if (event.changeKind === TextEditorSelectionChangeKind.Other)`.
If there ever will be the variant `typeInput` (or `remoteEdit`), that would break extensions.
Another boolean flag `isTypeInput: boolean` would not break extensions though, as they cannot really depend on its non-presence.

Alternatively, the enum has no `Other` variant but is stored in a field that can be undefined.
But then users could check if that field is undefined."
"I wonder what the right thing to do is in that situation. Right now it would report on all of them if they mismatch (or some subset), but maybe that's wrong? "
"You know this is actually wrong. I just remembered the real reason:
While the D2D-based DxEngine only draws what needs to be drawn, the D3D-shader-based AtlasEngine needs to do alpha blending with the VT foreground and background colors for all pixels. If you don't enable alpha explicitly in WT (which breaks conhost support and thus isn't neabled by default) then AtlasEngine will draw everything opaque."
"This is actually the way I had it initially, but it felt wrong to me hanging on to the pointer like that. I wasn't particularly happy with the current solution either, so I don't mind changing it back if that's what you prefer.

The other option I considered was using a `reinterpret_cast` to get the `OutputStateMachineEngine` from the `_stateMachine`, and from there you can easily get the dispatcher. Something like this:

    auto& engine = reinterpret_cast<OutputStateMachineEngine&>(_stateMachine->Engine());
    engine.Dispatch().SetCursorStyle(cursorStyle);

I like that it doesn't require storing any additional members, but the `reinterpret_cast` seems dodgy to me. I'm not sure that's valid, but we are using that exact pattern elsewhere in the code.

As for holding on to the pointer and just giving the `OutputStateMachineEngine` a reference, I considered that too, but we're instantiating `OutputStateMachineEngine` in a whole lot of places, and having to update all of them seemed like a lot of work. Maybe I'm just being lazy though.

But as I say, I'm happy to go with whichever option you prefer, because I can't make up my mind one way or the other. I just wanted to bring up that `reinterpret_cast` idea first in case you like it."
"I wouldn't have thought so. Obviously the destructor itself is going to be using the object while it is being destructed, so I don't see why it should be any different for other methods. It's just not something that can be relied on in general, because a destructor may be busy cleaning up resources that the other methods depend on. But that's not the case here.

I may be wrong though. I'm not an expert on the standard. Do you have a reference to somewhere that documents this as undefined behavior? If necessary we could always call the `Lock` method manually before the destructor is reached - that's just a bit messier."
"Given that we're immediately returning, there is no ""context"" to this message. *Anything* could cause it.  Additionally, this message looks very similar to the `GetModuleFileName failed` message, meaning *I* will get confused when trying to deduce what went wrong. :-)

The messages should thus be updated to mention what's happening, e.g.

```cpp
log_warn (LOG_DEFAULT, ""Unable to get filename to `libmono-android.debug.dll`; GetModuleFileName returned %d\n"", ret);
```"
"IIRC, the trick was that the renderer->NotifyScroll was accumulating the delta into the psrSelectionRects, and that overflow was what caused the original bug. If there's no selection, then there's no selection rects in the renderer to accumulate the delta into.

(variable names might be wrong here)"
"> Are we testing behavior for this case?

Could we get in trouble by referring to ""wrong"" parameters? Perhaps with getting additional confusing diagnostics, etc. 
"
"> afaik it's possible to determine statically.

We can determine if a cycle is *possible*. We speculate that in some situations where a cycle is possible it will be irritating to warn the user on the basis of the declaration alone. For example, if a mutable record field is of an 'object' or interface type, the value in the field could be some record that leads back to the original record, and we stack overflow.

We are considering several possible strategies for how to warn on a cyclic record, since ideally we would deliver something which is a warning by default in new .NET projects, and would strongly prefer that the warnings occur only in ""something is definitely wrong"" scenarios.

We also don't have to worry about derived records as much with this strategy. For example, a derived record doesn't need to insert a potentially ""redundant"" call to EnsureSufficientExecutionStack, and it doesn't need to be suspicious that at runtime its base class may contain different private fields than it did at compile time, for example. It can simply assume that its base record derived from object does the check.
"
"odd to use threadingContext.Disposable token *in* the body of the lambda, but not pass that to StartNew.  indeed... that seems strictly wrong here to me.  if it isn't wrong, please doc why it's ok.  thanks!"
"it's already on the `getter` ?
looks like the test code is wrong (and should be fixed)
but we should not duplicate it on both the property and the getter (too much metadata if the linker is not enabled)"
">VisitRvalue(node.Argument); [](http://example.com/codeflow?start=12&length=27)

The order of evaluation looks wrong here. It should be receiver, then argument, ...  #Closed"
"> Yes, `dsymutil` works on fat executables. My mistake again : I thought that the AOT compiler stripped the symbols afterward from the output, but it actually doesn't. Xamarin.Mac doesn't seem to strip those executables (I actually do on my own projects with an extra MSBuild task). I'll change it to use `dsymutil` instead, it should simplify that code quite a bit.

And turns out I was wrong on this one as well, I tried with `CreateDsym` from the content of the lipo-ed file and turns out there is no debug section in those files, it's all in the dsym. Since I already need that logic for the main executable dSYM, I'll write a common function for merging multiple abi dsyms and use that in both locations"
"I looked at that too and after pondering for few minutes I came to the conclusion that it was intentional and the generated `xammac_setup` method is called somewhere... Well, perhaps a wrong conclusion on my part :-)"
"Rather than keep doing this in a loop unnecessarily, why not set the `_tokenType` field outside the loop after `reader.Read()` returns false? Does that give the wrong value?"
"> The .lastrun files are wiped out on a git clean so xliff-tasks complains about translations being out of date even when they aren't.

No, that's not quite right. The .lastrun files are used to know if the xliff-tasks should check if the translations are out of date, it doesn't determine if the translations actually are out of date.

Looking at the source for xliff-tasks, when they check if a translation is out of date, they actually compare the documents: https://github.com/dotnet/xliff-tasks/blob/cc53f75b404500236364694ff514dcdee2427a94/src/XliffTasks/Model/XlfDocument.cs#L68-L200, but something obviously goes wrong and then that function says that the translation should be updated when it wasn't (because when you run with `/t:UpdateXlfOnBuild` no files are actually modified).

This looks like a bug in the xliff-tasks, I suggest trying to create a small test case and report it to them (or use the small test case to track down the bug in xliff-tasks and just fix it)."
"1. This is my theory: I think recently CLR assembly resolution seems to have undergone a change in that unhandled exceptions from custom assembly resolvers are not masked and go unhandled. When we moved to a new baseline drop with .NET 4.6 recently, we started seeing exceptions in custom assembly resolver in our Tao StartTargetAction (see our TFS changeset 1394695 and 1408896). The prior code was obviously wrong and would have thrown for both cases that were fixed, but it seemed this exception never showed up, and a subsequent resolver resolved the assembly. My _guess_ is before v4.6, CLR was catching the exceptions from custom assembly resolvers while trying to load these assemblies and moving ahead with next resolver to attempt resolution, but now it doesn't (at least not for Load in no context). Someone from CLR team should confirm though.
2. IDE scenario: In the IDE we never seemed to be getting a callback for the satellite assembly. I debugged through the CLR assembly resolution and it seems to be taking a different code path for IDE and command line scenarios (IDE: _http://referencesource.microsoft.com/#mscorlib/system/reflection/assembly.cs,3012_ while in command line case: _http://referencesource.microsoft.com/#mscorlib/system/reflection/assembly.cs,3028_ , the later one seems to call custom resolvers and former bails out without event doing so). It seems to be taking different paths on Assembly.CodeBase value, which I am not sure makes any sense for Load in no context. I am not going to dig further into this, but my best guess is Load in no context comes with its own adventures :)
"
"Purpose of removing the entry once found `count `will be zero is to avoid every further check in future count value check: so that for same value, only checking `Unsafe.IsNullRef(ref count)` will be enough.
Also I feel it is unnecessary to calculate `count` to negative value by `count--` in condition statement.

Although it uses more code, but seems during runtime, it runs shortly. Correct me if wrong, thanks."
"Yes. I tried dropping errors from arguments and it becomes really hard to figure what went wrong and what action to take to fix the error.
"
"I would say that this is the wrong span to error on. Either error on the comma, or the parameter itself."
"Ahh.... But a generator _is_ a function type. You call it and get back an iterator, just like how you call an async function and get a promise. This error is straight wrong, then."
"If we don't specify the value explicitly then we will try to run the command inside `MyWorkingDirectory()` directory. This scenario holds true only when called from csx files. 

In short, both calling `InitUtilities()` from within library and not setting the value of _workingDirectory are wrong. The correct approach is to always provide the directory to run the command if it is run outside of the context of csx.
"
"The runtime doesn't mind the ordering of the modifiers.

`SuppressGCTransition, MemberFunction` is treated the same as `MemberFunction, SuppressGCTransition`. We should make them compare the same.

I would really just do the dumb thing with `O(n^2)` complexity I suggested in https://github.com/dotnet/runtime/pull/70105#discussion_r887623570 and for each modopt on the left side, check if the modopt exists on the right side. And make sure the count of interesting modopts is the same."
"This looks wrong - why are you setting them to the same path? if you need 'obj' force me to pass it to you.

This state of this object is very unclear - we set to obj to bin, only to set it again to the real 'obj'? 
"
"I wrote a test case to to set the branch where `nullishCoalescingOp` is true.  However, that case seemed to be routed first through  `narrowTypeByOptionality` and never ended up calling `narrowTypeByCallExpression`.  From a software design perspective, that seems wrong in the sense that it makes it harder to verify and maintain the code.   However, the result of the test case was correct - ""working as intended"".  For now I'm leaving this untested branch in here as is - perhaps it would be better to code an  excepting assertion that `nullishCoalescingOp` is false?  @github what do you think?"
Ok.  I looked through this all.  Seems like nothing crazy is going on.  Note sure waht the long term plan is for all these `2` types is though.  But i think @github and @github will have to look since they understand this stuff better.
"`dotnet.exe` is manifested to support Windows 10, so if someone is using `dotnet app.dll` or `dotnet run`, Environment.OSVersion is already going to return the same value this will.  Same goes if they've added an appropriate manifest to their app.

I believe your concerns are the same as David's, and as this is a major release of .NET, even if it is technically breaking, I think it's the right trade-off.

A ton of code is doing its own P/Invoke to get a better version, since the version that Environment.OSVersion returns is often either wrong or inconsistent based on how the app is run.  We already use RtlGetVersion in RuntimeInformation:
https://github.com/dotnet/runtime/blob/0d19a5e18a988ad52ca0c2907edeb40ba4e00d9b/src/libraries/System.Runtime.InteropServices.RuntimeInformation/src/System/Runtime/InteropServices/RuntimeInformation/RuntimeInformation.Windows.cs#L22
.NET Framework's mscorlib uses it:
https://referencesource.microsoft.com/#mscorlib/microsoft/win32/win32native.cs,2798
Windows Forms uses it:
https://github.com/dotnet/winforms/blob/084afd290719163557de1b78d85ade45c3aa0e59/src/System.Windows.Forms.Primitives/src/System/Windows/Forms/Internals/OsVersion.cs#L19
A bazillion uses of it show up in arbitrary code on GitHub:
https://github.com/search?l=C%23&q=RtlGetVersion&type=Code
Even our public samples use it:
https://github.com/dotnet/aspnetcore/blob/37399bc2175cc253e83bd2d7b2a66e613daad38a/src/MusicStore/samples/MusicStore/Platform.cs#L43
I think it's much better if we just fix Environment.OSVersion to actually be meaningful."
"> could you present a potential future scenario that you're worried about that would break this?

The cost is on maintainability. Anyone who has to maintain this now needs to hold all this complexity in their head and get things right on framework/core for any changes here in the future. That added complexity is more chance to get things wrong and to introduce subtle issues (like potential corruption). "
@github @github I think String.Format benchmarks are also need to be included as it's one of the most useful cases for this optimization. This PR might bring string.format to almost allocation free behaviour as we have a thread-static string builder (of 256 chars avg I believe). And we have to track perf difference for this scenario. Or am I wrong and it only works when builder is resizing?
"@github 
> What is the type of `value`?

```ts
{ bar: 1 }
```
It's not a postfix to change the type, it's a postfix to *validate* the type. It's making sure whatever value is there has a type which, in this case, is assignable to `Foo`

*I'm pretty sure there's some other stuff going on with like, turning parts of the value's type into the type in `satisfies` via contextual typing, most likely exclusively in cases that don't widen it. I might be wrong on that front though? That's stuff I don't really understand besides how to use it haha"
"This is the wrong fix as-is, as `updateProgram` can print out the `Watching for file changes` message _immediately_, whereas I assumed it would be scheduled for some unspecified time in the future."
"@github I'm looking at the logs for this - https://dev.azure.com/dnceng/public/_build/results?buildId=1040170&view=logs&jobId=108d2c4a-8a62-5a58-8dad-8e1042acc93c&j=108d2c4a-8a62-5a58-8dad-8e1042acc93c&t=568f884b-cc12-5fd3-e7fe-790b5ac403f4 .

(raw log with timestamps: https://dev.azure.com/dnceng/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_apis/build/builds/1040170/logs/1779)

There are four jobs submitted:
1. Debug wasm.build.tests
2. Release wasm.build.tests
3. normal (running with v8, I think)
4. wasmtestonbrowser (running with chrome)

* wasm.build tests submission

```
2021-03-15T23:07:41.1142549Z   Sent Helix Job; see work items at https://helix.dot.net/api/jobs/22c04ee1-52bb-40cf-b859-5ec490aba39b/workitems?api-version=2019-06-17
2021-03-15T23:07:41.1336632Z   Sent Helix Job; see work items at https://helix.dot.net/api/jobs/a32b297a-d4a1-46c0-8ae4-c631e096edd2/workitems?api-version=2019-06-17
```

* library tests submission
```
2021-03-15T23:07:55.4873872Z   Sent Helix Job; see work items at https://helix.dot.net/api/jobs/ef5ecd49-671c-4d2c-a48f-e262dec9ba9d/workitems?api-version=2019-06-17
2021-03-15T23:07:55.5659204Z   Sent Helix Job; see work items at https://helix.dot.net/api/jobs/e5a3970e-87c2-4b3e-8a30-fc6c4330fa59/workitems?api-version=2019-06-17
```

They get submitted at roughly the same time. Then (3), and (4) complete after ~23mins.

```
2021-03-15T23:31:37.9796887Z   Job ef5ecd49-671c-4d2c-a48f-e262dec9ba9d on Ubuntu.1804.Amd64.Open is completed with 216 finished work items.
2021-03-15T23:34:58.3293216Z   Job e5a3970e-87c2-4b3e-8a30-fc6c4330fa59 on Ubuntu.1804.Amd64.Open is completed with 216 finished work items.
```

And (1), and (2) complete after ~42mins after submission:
```
2021-03-15T23:49:57.6478348Z   Job 22c04ee1-52bb-40cf-b859-5ec490aba39b on Ubuntu.1804.Amd64.Open is completed with 2 finished work items.
2021-03-15T23:50:57.5418212Z   Job a32b297a-d4a1-46c0-8ae4-c631e096edd2 on Ubuntu.1804.Amd64.Open is completed with 2 finished work items.
```

But looking at the logs for the wasm build test runs, those seem to complete in roughly 25mins each. What could be causing them to take extra 17mins to return from helix?

Console log for (1), and (2):
[a32b297ad4a146c08a](https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-49559-merge-a32b297ad4a146c08a/Wasm.Build.Tests/console.b55a5550.log/?sv\=2019-07-07\&se\=2021-04-04T23%3A07%3A41Z\&sr\=c\&sp\=rl\&sig\=xtFf7DVquJc%2FM3%2BR%2BapzSn%2FoxiS4XpduGLkIBm8tE1E%3)
[22c04ee152bb40cfb8](https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-49559-merge-22c04ee152bb40cfb8/Wasm.Build.Tests/console.89307f03.log\?sv\=2019-07-07\&se\=2021-04-04T23%3A07%3A41Z\&sr\=c\&sp\=rl\&sig\=WdhWJ5qbA9zo7%2FiEHfFEkHWCEE7q4rt0oVO1vSAWieE%3D)

Am I doing something wrong, or is this expected?"
"@github @github @github could you please advise what is wrong here? 
https://dev.azure.com/dnceng/public/_build/results?buildId=1082685&view=logs&jobId=f217f715-90ad-5404-53bd-b93e3b80f465&j=f217f715-90ad-5404-53bd-b93e3b80f465&t=d9b45970-da80-576b-c4ba-5d7bc638e9e8

This is browser/AOT/Mono error. do we need to add something to Mono's runtime or should I exclude it? "
" I'm trying to follow @github suggestions to include only necessary ComWrappers projects, and now i get the following error building tests:


`/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.cs(648,76): error CS1514: { expected [/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.csproj]
/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.cs(648,76): error CS1513: } expected [/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.csproj]
/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.cs(649,10): error CS1513: } expected [/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.csproj]
/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.cs(652,128): error CS1002: ; expected [/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.csproj]
/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.cs(659,87): error CS1002: ; expected [/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.csproj]
/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.cs(2037,1): error CS1022: Type or namespace definition, or end-of-file expected [/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.csproj]
    21 Warning(s)
    6 Error(s)
`

I've tried to discard changes but nothing, the errors still remains; could it be something dirty in artifacts folder?
The error is due to a wrong generated class (public class _ComWrappers_GlobalInstance_GlobalInstanceTrackerSupportTests _TargetUnix_GlobalInstanceTrackerSupportTests _TargetUnix_)  inside Interop.COM.XUnitWrapper.cs; it has a space inside the class name and i suppose is generated starting from the new unix dedicated project I've created (GlobalInstanceTrackerSupportTests_TargetUnix.csproj )"
"> Maybe it's just me doing something completely wrong but this seems to have broken workload installs in 6.0.2xx previews (using the dotnet6 feed) since there's no 6.0.1 version of Microsoft.NET.Workload.Emscripten on it. Adding the darc-pub-dotnet-emsdk-e8ffccb feed fixed it temporarily but that's probably not the best way to go about it.

Thanks for the heads up.  Looking into it."
"cc @github/jit-contrib PTAL @github 

@github this is practically just your fix, but generalized to any small typed local (for normalize-on-store locals it is necessary too). I think the problem in your PR was just the `genActualType(lclVar) != genActualType(op2)` check, which is always true in this case.

For normalize-on-load locals it seems kind of arbitrary whether we even do this on the creation of the assertion, and it might seem better to do this when using the assertion instead (the ""load""). But since the home of normalize-on-load locals cannot even fit the upper part of the values it seems kind of wrong to leave those bits in the created assertion, so I just went with always doing this when the assertions are created. This would be more complex if we tried doing assertion prop for mismatched accesses of these locals, but we bail on that quite early."
We shouldn't copy this code from XF. 100 percent of the code in XF that influenced focus is wrong and was most likely created to work around fundamental flaws of things that XF made clickable and focusable that stacks of hacks had to be built against.
"This might sound crazy, but I caution against using a timeout of less than 30 seconds if you can avoid it. While you hope it doesn't happen, you never know when this test might be run in a resource-starved environment. 30 seconds is the default timeout for most SignalR and Kestrel tests."
Isn't this wrong if there is buffered data and another send comes in?
"That's why I'm checking the flags and not the RequestQueueMode enum.

Edit: Nevermind, I answered the wrong question. No, you want this detailed error for both Attach and CreateOrAttach. You tried to attach to a thing by name and it wasn't there. For CreateOrAttach that should only happen with a strange race condition."
Please delete these two lines entirely. Mapping `NETCOREAPP3_1` to `netcoreapp3.0` is the **Wrong Thing:tm:** to do.
This code sucks.  I will fix it up later and resend.
Indentation wrong on this line and two lines down.
"Technically compile items can be empty and extension doesn't necessarily mean language. Crazy people could put C# code into .vb files if they choose. This infrastructure was already in place hence just leveraging it for this change. "
it would have returned f(2)=2 which is wrong
"> /usr/bin/docker network create --label 3be3ec vsts_network_984dde3b6bb04daeb5f57aa88c94df39
b0ed27abb2050df37f1bf9a03552a2cf0792e6ea05ad2a8a020bf1d926018790
/usr/bin/docker inspect --format=""{{index .Config.Labels \""com.azure.dev.pipelines.agent.handler.node.path\""}}"" mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.12-helix-20200602002622-e06dc59
/usr/bin/docker create --name 1af8b7352de94885bbea0cdf1cd6aedb_mcrmicrosoftcomdotnetbuildtoolsprereqsalpine312helix20200602002622e06dc59_376c2d --label 3be3ec --network vsts_network_984dde3b6bb04daeb5f57aa88c94df39  -v ""/var/run/docker.sock"":""/var/run/docker.sock"" -v ""/home/vsts/work/1"":""/__w/1"" -v ""/home/vsts/work/_temp"":""/__w/_temp"" -v ""/home/vsts/work/_tasks"":""/__w/_tasks"" -v ""/opt/hostedtoolcache"":""/__t"" -v ""/home/vsts/agents/2.184.2/externals"":""/__a/externals"":ro -v ""/home/vsts/work/.taskkey"":""/__w/.taskkey"" mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.12-helix-20200602002622-e06dc59 ""/__a/externals/node/bin/node"" -e ""setInterval(function(){}, 24 * 60 * 60 * 1000);""
006abd9224e4ed7394c9bc7b24ccdc5420c44c4785759bcc1b9759f517472294
/usr/bin/docker start 006abd9224e4ed7394c9bc7b24ccdc5420c44c4785759bcc1b9759f517472294
006abd9224e4ed7394c9bc7b24ccdc5420c44c4785759bcc1b9759f517472294
/usr/bin/docker ps --all --filter id=006abd9224e4ed7394c9bc7b24ccdc5420c44c4785759bcc1b9759f517472294 --filter status=running --no-trunc --format ""{{.ID}} {{.Status}}""
006abd9224e4ed7394c9bc7b24ccdc5420c44c4785759bcc1b9759f517472294 Up Less than a second
/usr/bin/docker exec  006abd9224e4ed7394c9bc7b24ccdc5420c44c4785759bcc1b9759f517472294 sh -c ""command -v bash""
Error response from daemon: Container 006abd9224e4ed7394c9bc7b24ccdc5420c44c4785759bcc1b9759f517472294 is not running
##[error]Docker exec fail with exit code 1

@github I grabbed a recent alpine image from https://github.com/dotnet/dotnet-buildtools-prereqs-docker but it doesn't seem to be working here, any idea what might be wrong?"
not sure what you mean? it is all divide. doesn't matter where parentheses are. :) actually wrong. parantheses matter :)
"This shouldn't be here, since this layer isn't consuming UI.Wpf...right? Unless there's something else wrong?"
"@github Is the following message is the reason for the failure or there is something wrong with the PR itself?

![image](https://user-images.githubusercontent.com/31348972/85203473-6eea8a00-b30e-11ea-8bb3-13bc6fce6d28.png)

"
"@github I think it is hard to keep track of the current state of the PR for you. So I tried to collect what is done/missing or needs review/design.

### General

#### Sorting

Sorting is done via the magical `SortingPrefix = ""\uFFFD""` followed by `abstract int SortingGroupIndex` to make sure:
* The items are below other SymbolCompletionItems
* Conversions, Operators, and Indexers are kept together

I have not found any other mechanism for the sorting of the completion items, but using the `SortingPrefix` feels wrong to me.
✔️ Accepted https://github.com/dotnet/roslyn/pull/47511#issuecomment-702265486

Do we need to have a test in place to make sure operator/indexer/conversions are between normal members and ""Add using"" (see https://github.com/dotnet/roslyn/pull/47511#pullrequestreview-495669239)
✔️ 9d94034c

#### Broken syntax trees

`IRecommenderService`, which provides the methods/properties for completion, handles (probably lots of) corner cases to find the right `container` to look up the symbols. How far should we go to mimic that behavior?
See https://github.com/dotnet/roslyn/pull/47511#pullrequestreview-495669239
🔜 

#### String manipulation in `GetChangesAsync`

Needs review. Your markers:
https://github.com/dotnet/roslyn/pull/47511#discussion_r496120383
https://github.com/dotnet/roslyn/pull/47511#discussion_r496118056
https://github.com/dotnet/roslyn/pull/47511#discussion_r493840482

### Conversion

#### General

Conversions can be defined either on the source type or the target type. We only show the conversions defined on the source type, so the conversions list may not be complete. I did so because otherwise, all types (in scope) need to be searched for a fitting conversion. Test case:

https://github.com/dotnet/roslyn/blob/3b4e1aa7ff61500ae4c78f06ddf01c3d4250530e/src/EditorFeatures/CSharpTest/Completion/CompletionProviders/ConversionCompletionProviderTests.cs#L274-L294
✔️ Accepted. Keep as is.

#### Nullable lifting and conditional access

I added support for nullable lifting (`Nullable<int>` -> `Nullable<byte>`) and conditional access `c?.Id -> ((int?)c.Id)`. The related discussion can be found in https://github.com/dotnet/roslyn/pull/47511#discussion_r497436721

#### Built-in numeric conversions

Should be fine now. One concern is `decimal` here. The spec defines some explicit conversions and `decimal` is the only built-in numeric type that exposes these as `op_Explicit` methods. I implemented the conversions according to the spec in `GetBuiltInNumericConversions` (including `decimal`), and opt-out of decimal here https://github.com/dotnet/roslyn/pull/47511#discussion_r496965837

#### Built-in numeric enum conversions

Added in da2260cc. Only parts of the [built-in conversions](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions#explicit-enumeration-conversions) are covered:
* [ ] From sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double, or decimal to any enum_type.
* [x] From any enum_type to sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double, or decimal.
* [ ] From any enum_type to any other enum_type.

✔️ Accepted. 

#### Description and glyph

I would like to change the description for conversions. Currently, the description is given for the `IMethodSymbol` of `op_Explicit`. I think it would be better to use the `ReturnType` aka the target of the conversion to build the description. The advantage would be, that we could unify built-in conversions (no `IMethodSymbol`, but a target type) and user-defined conversions.
✔️  Try to mimic the behavior of normal operators. If that is not feasible, fall back to the target type for built-in conversions.

The glyph should be `Operator` for user-defined and built-in conversions. https://github.com/dotnet/roslyn/pull/47511#discussion_r496955665
✔️ 

#### Inheritance

Conversion and inheritance are not covered yet.
✔️

### Operators

General test coverage for operators is limited (e.g. no trivia tests) in comparison with conversions.

#### Sorting
Operators are now sorted https://github.com/dotnet/roslyn/pull/47511#discussion_r496964177 but the sort order needs to be reviewed. Sorting is tested.

#### Description

Currently, the `IMethodSymbol` description of the operator is shown. I think this is more confusing than helpful. It also suffers from the same problem as conversions for the built-in numeric operators: `IMethodSymbol` is not available. We may present a textual description of the operator.
✔️ Accepted as is. Built-in operators are excluded.

#### Operator lifting

Implemented according to the [spec](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#lifted-operators). Tests: f36861b Implementation: 0d758cd

#### Built-in operators

Not started yet. But I have a test in place that shows the operators, that can be found on the `ITypeSymbol`. See https://github.com/dotnet/roslyn/pull/47511#discussion_r496959643
I'm not convinced if we should support the built-in operators.
✔️ Accepted as is. Built-in operators are excluded.

#### Numeric promotion

[Numeric promotion](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#numeric-promotions) might be relevant, but I have not looked into it too much.
❓ Optional

#### Inheritance

Operators and inheritance are not covered yet.

✔️

#### Special operators

Other operators that might be useful to suggest could be (not necessarily as part of this PR)
* `await` for task-like types in an `async` method.
* `?.` in a `#nullable enable` context with expression *maybe null*
* `??` in a `#nullable enable` context with expression *maybe null*

### Indexers

Test coverage needs some improvements (e.g. trivia), but in general, I think indexers are feature complete.
✔️ 

#### Inheritance

No tests yet, but should just work.
✔️ "
"I noticed some interesting differences between the JIT disasm and windbg disassembly (not all related to this change):

```
JIT:
eb29011f cmp x8,x9,uxtb
eb29211f cmp x8,x9,uxth
eb29811f cmp x8,x9,sxtb
eb29a11f cmp x8,x9,sxth
eb29051f cmp x8,x9,uxtb #1
eb29291f cmp x8,x9,uxth #2
eb29851f cmp x8,x9,sxtb #1
eb29a91f cmp x8,x9,sxth #2
6b29011f cmp w8,x9,uxtb
6b29291f cmp w8,x9,uxth #2
6b29811f cmp w8,x9,sxtb
6b29a91f cmp w8,x9,sxth #2
8b2a0128 add x8,x9,x10,uxtb
8b2a2128 add x8,x9,x10,uxth
8b2a8128 add x8,x9,x10,sxtb
8b2aa128 add x8,x9,x10,sxth
8b2a1128 add x8,x9,x10,uxtb #4
8b2a3128 add x8,x9,x10,uxth #4
8b2a9128 add x8,x9,x10,sxtb #4
8b2ab128 add x8,x9,x10,sxth #4
4b2a0128 sub w8,w9,x10,uxtb
4b2a2128 sub w8,w9,x10,uxth
4b2a6128 sub w8,w9,x10,uxtx
4b2a8128 sub w8,w9,x10,sxtb
4b2aa128 sub w8,w9,x10,sxth
4b2ae128 sub w8,w9,x10,sxtx
4b2a1128 sub w8,w9,x10,uxtb #4
4b2a3128 sub w8,w9,x10,uxth #4
4b2a7128 sub w8,w9,x10,uxtx #4
4b2a9128 sub w8,w9,x10,sxtb #4
4b2ab128 sub w8,w9,x10,sxth #4
4b2af128 sub w8,w9,x10,sxtx #4

windbg:
eb29011f cmp x8,w9,uxtb
eb29211f cmp x8,w9,uxth
eb29811f cmp x8,w9,sxtb
eb29a11f cmp x8,w9,sxth
eb29051f cmp x8,w9,uxtb #1
eb29291f cmp x8,w9,uxth #2
eb29851f cmp x8,w9,sxtb #1
eb29a91f cmp x8,w9,sxth #2
6b29011f cmp w8,w9,uxtb
6b29291f cmp w8,w9,uxth #2
6b29811f cmp w8,w9,sxtb
6b29a91f cmp w8,w9,sxth #2
8b2a0128 add x8,x9,w10,uxtb
8b2a2128 add x8,x9,w10,uxth
8b2a8128 add x8,x9,w10,sxtb
8b2aa128 add x8,x9,w10,sxth
8b2a1128 add x8,x9,w10,uxtb #4
8b2a3128 add x8,x9,w10,uxth #4
8b2a9128 add x8,x9,w10,sxtb #4
8b2ab128 add x8,x9,w10,sxth #4
4b2a0128 sub w8,w9,w10,uxtb
4b2a2128 sub w8,w9,w10,uxth
4b2a6128 sub w8,w9,w10,uxtx
4b2a8128 sub w8,w9,w10,sxtb
4b2aa128 sub w8,w9,w10,sxth
4b2ae128 sub w8,w9,w10,sxtx
4b2a1128 sub w8,w9,w10,uxtb #4
4b2a3128 sub w8,w9,w10,uxth #4
4b2a7128 sub w8,w9,w10,uxtx #4
4b2a9128 sub w8,w9,w10,sxtb #4
4b2ab128 sub w8,w9,w10,sxth #4
4b2af128 sub w8,w9,w10,sxtx #4
```
in the `uxtw` case, the JIT emits w9, but in the `uxtb`/`uxth` cases, it incorrectly emits `x9` instead of `w9`.

Similar:
```
JIT:
9b2afd28 smnegl x8,x9,x10
9baa7d28 umull x8,x9,x10
9baafd28 umnegl x8,x9,x10
9b2afd28 smnegl w8,w9,w10
9baa7d28 umull w8,w9,w10
9baafd28 umnegl w8,w9,w10
9bca7d28 umulh w8,w9,w10
9b2031c2 smaddl w2,w14,w0,w12
9b21b5e3 smsubl w3,w15,w1,w13
9ba23a64 umaddl w4,w19,w2,w14
9ba3be85 umsubl w5,w20,w3,w15
9b2656e8 smaddl x8,x23,x6,x21
9b27db09 smsubl x9,x24,x7,x22
9ba85f2a umaddl x10,x25,x8,x23
9ba9e34b umsubl x11,x26,x9,x24

windbg:
9b2afd28 smnegl x8,w9,w10
9baa7d28 umull x8,w9,w10
9baafd28 umnegl x8,w9,w10
9b2afd28 smnegl x8,w9,w10
9baa7d28 umull x8,w9,w10
9baafd28 umnegl x8,w9,w10
9bca7d28 umulh x8,x9,x10
9b2031c2 smaddl x2,w14,w0,x12
9b21b5e3 smsubl x3,w15,w1,x13
9ba23a64 umaddl x4,w19,w2,x14
9ba3be85 umsubl x5,w20,w3,x15
9b2656e8 smaddl x8,w23,w6,x21
9b27db09 smsubl x9,w24,w7,x22
9ba85f2a umaddl x10,w25,w8,x23
9ba9e34b umsubl x11,w26,w9,x24
```

Your windbg is missing decoding for many instructions:
```
08a87d49 casb w8,w9,[x10]
08e87d49 casab w8,w9,[x10]
08e8fd49 casalb w8,w9,[x10]
08a8fd49 caslb w8,w9,[x10]
48a87d49 cash w8,w9,[x10]
48e87d49 casah w8,w9,[x10]
48e8fd49 casalh w8,w9,[x10]
48a8fd49 caslh w8,w9,[x10]
88a87d49 cas w8,w9,[x10]
88e87d49 casa w8,w9,[x10]
88e8fd49 casal w8,w9,[x10]
88a8fd49 casl w8,w9,[x10]
c8a87d49 cas x8,x9,[x10]
c8e87d49 casa x8,x9,[x10]
c8e8fd49 casal x8,x9,[x10]
c8a8fd49 casl x8,x9,[x10]
38280149 ldaddb w8,w9,[x10]
38a80149 ldaddab w8,w9,[x10]
38e80149 ldaddalb w8,w9,[x10]
38680149 ldaddlb w8,w9,[x10]
78280149 ldaddh w8,w9,[x10]
78a80149 ldaddah w8,w9,[x10]
78e80149 ldaddalh w8,w9,[x10]
78680149 ldaddlh w8,w9,[x10]
b8280149 ldadd w8,w9,[x10]
b8a80149 ldadda w8,w9,[x10]
b8e80149 ldaddal w8,w9,[x10]
b8680149 ldaddl w8,w9,[x10]
f8280149 ldadd x8,x9,[x10]
f8a80149 ldadda x8,x9,[x10]
f8e80149 ldaddal x8,x9,[x10]
f8680149 ldaddl x8,x9,[x10]
38288149 swpb w8,w9,[x10]
38a88149 swpab w8,w9,[x10]
38e88149 swpalb w8,w9,[x10]
38688149 swplb w8,w9,[x10]
78288149 swph w8,w9,[x10]
78a88149 swpah w8,w9,[x10]
78e88149 swpalh w8,w9,[x10]
78688149 swplh w8,w9,[x10]
b8288149 swp w8,w9,[x10]
b8a88149 swpa w8,w9,[x10]
b8e88149 swpal w8,w9,[x10]
b8688149 swpl w8,w9,[x10]
f8288149 swp x8,x9,[x10]
f8a88149 swpa x8,x9,[x10]
f8e88149 swpal x8,x9,[x10]
f8688149 swpl x8,x9,[x10]
3828015f ldaddb w8,wzr,[x10]
3868015f ldaddlb w8,wzr,[x10]
7828015f ldaddh w8,wzr,[x10]
7868015f ldaddlh w8,wzr,[x10]
b828015f ldadd w8,wzr,[x10]
b868015f ldaddl w8,wzr,[x10]
f828015f ldadd x8,xzr,[x10]
f868015f ldaddl x8,xzr,[x10]
```
Are you up to date? Does it not support ARMv8.1 and beyond?

These have the wrong destination width:
```
JIT:
0e3038a4 saddlv b4,v5.8b
4e3038e6 saddlv b6,v7.16b
0e703928 saddlv h8,v9.4h
4e70396a saddlv h10,v11.8h
4eb039ee saddlv s14,v15.4s
2e3038a4 uaddlv b4,v5.8b
6e3038e6 uaddlv b6,v7.16b
2e703928 uaddlv h8,v9.4h
6e70396a uaddlv h10,v11.8h
6eb039ee uaddlv s14,v15.4s

windbg:
0e3038a4 saddlv h4,v5.8b
4e3038e6 saddlv h6,v7.16b
0e703928 saddlv s8,v9.4h
4e70396a saddlv s10,v11.8h
4eb039ee saddlv d14,v15.4s
2e3038a4 uaddlv h4,v5.8b
6e3038e6 uaddlv h6,v7.16b
2e703928 uaddlv s8,v9.4h
6e70396a uaddlv s10,v11.8h
6eb039ee uaddlv d14,v15.4s
```

These have an incorrect source width:
```
JIT:
5f0f9c20 sqrshrn b0,b1,#1
5f089c62 sqrshrn b2,b3,#8
5f179ca4 sqrshrn h4,h5,#9
5f109ce6 sqrshrn h6,h7,#16
5f2f9d28 sqrshrn s8,s9,#17
5f209d6a sqrshrn s10,s11,#32
7f0f8c20 sqrshrun b0,b1,#1
7f088c20 sqrshrun b0,b1,#8
7f178c62 sqrshrun h2,h3,#9
7f108c62 sqrshrun h2,h3,#16
7f2f8ca4 sqrshrun s4,s5,#17
7f208ca4 sqrshrun s4,s5,#32
5f0f9420 sqshrn b0,b1,#1
5f089462 sqshrn b2,b3,#8
5f1794a4 sqshrn h4,h5,#9
5f1094e6 sqshrn h6,h7,#16
5f2f9528 sqshrn s8,s9,#17
5f20956a sqshrn s10,s11,#32
7f0f8420 sqshrun b0,b1,#1
7f088462 sqshrun b2,b3,#8
7f1784a4 sqshrun h4,h5,#9
7f1084e6 sqshrun h6,h7,#16
7f2f8528 sqshrun s8,s9,#17
7f20856a sqshrun s10,s11,#32
7f0f9c20 uqrshrn b0,b1,#1
7f089c62 uqrshrn b2,b3,#8
7f179ca4 uqrshrn h4,h5,#9
7f109ce6 uqrshrn h6,h7,#16
7f2f9d28 uqrshrn s8,s9,#17
7f209d6a uqrshrn s10,s11,#32
7f0f9420 uqshrn b0,b1,#1
7f089462 uqshrn b2,b3,#8
7f1794a4 uqshrn h4,h5,#9
7f1094e6 uqshrn h6,h7,#16
7f2f9528 uqshrn s8,s9,#17
7f20956a uqshrn s10,s11,#32

windbg:
5f0f9c20 sqrshrn b0,h1,#1
5f089c62 sqrshrn b2,h3,#8
5f179ca4 sqrshrn h4,s5,#9
5f109ce6 sqrshrn h6,s7,#16
5f2f9d28 sqrshrn s8,d9,#17
5f209d6a sqrshrn s10,d11,#32
7f0f8c20 sqrshrun b0,h1,#1
7f088c20 sqrshrun b0,h1,#8
7f178c62 sqrshrun h2,s3,#9
7f108c62 sqrshrun h2,s3,#16
7f2f8ca4 sqrshrun s4,d5,#17
7f208ca4 sqrshrun s4,d5,#32
5f0f9420 sqshrn b0,h1,#1
5f089462 sqshrn b2,h3,#8
5f1794a4 sqshrn h4,s5,#9
5f1094e6 sqshrn h6,s7,#16
5f2f9528 sqshrn s8,d9,#17
5f20956a sqshrn s10,d11,#32
7f0f8420 sqshrun b0,h1,#1
7f088462 sqshrun b2,h3,#8
7f1784a4 sqshrun h4,s5,#9
7f1084e6 sqshrun h6,s7,#16
7f2f8528 sqshrun s8,d9,#17
7f20856a sqshrun s10,d11,#32
7f0f9c20 uqrshrn b0,h1,#1
7f089c62 uqrshrn b2,h3,#8
7f179ca4 uqrshrn h4,s5,#9
7f109ce6 uqrshrn h6,s7,#16
7f2f9d28 uqrshrn s8,d9,#17
7f209d6a uqrshrn s10,d11,#32
7f0f9420 uqshrn b0,h1,#1
7f089462 uqshrn b2,h3,#8
7f1794a4 uqshrn h4,s5,#9
7f1094e6 uqshrn h6,s7,#16
7f2f9528 uqshrn s8,d9,#17
7f20956a uqshrn s10,d11,#32
```
"
"> It would be good to update `JIT/Regression/JitBlue/Runtime_34587` to validate the hierarchy of the new ISAs

It looks that this tests was merged in the wrong place (under src/coreclr/tests/src instead of src/tests) - I will move it and update as you suggested"
"@github Thanks for your changes 👍, you are right the `return` statement was useless., I'm not sure that new changes for ternary operator have the right indentation., it seems that condition has been formatted without addition indentation. Some time ago I was working on migration the repo to the eslint and as I remember correctly, the following formatting was not acceptable for eslint/indent before we disabled it due to performance reasons. Can @github you check?, maybe I'm wrong. 

```ts
expression
? true
: false
```

Is it acceptable to do like so?

```ts
 symbols: type.getApparentProperties().filter(prop =>
     !isPrivateIdentifierPropertyDeclaration(isTransientSymbol(prop) && prop.syntheticOrigin ? prop.syntheticOrigin.valueDeclaration : prop.valueDeclaration)),

```

or 

```ts
symbols: type.getApparentProperties().filter(prop =>
    !isPrivateIdentifierPropertyDeclaration(
        isTransientSymbol(prop) && prop.syntheticOrigin ? prop.syntheticOrigin.valueDeclaration : prop.valueDeclaration)),

```

cc @github "
"Also not sure if @github wants to look at any of the options stuff being done here. Nothing looks ""wrong"" to me but still not sure exactly what the new patterns should look like."
"@github There are failing tests for `RegisterCodeBlockAction`. Can you please confirm whether the test is expecting something wrong? I'm not sure if `RegisterCodeBlockAction` should get called for primary constructor? Here is the current test.

```csharp
        [Fact]
        public void AnalyzerActions_07()
        {
            var text1 = @""
record A([Attr1(100)]int X = 0) : I1
{}

record B([Attr2(200)]int Y = 1) : A(2), I1
{
    int M() => 3;
}

record C : A, I1
{
    C([Attr3(300)]int Z = 4) : base(5)
    {}
}

interface I1 {}
"";

            var analyzer = new AnalyzerActions_07_Analyzer();
            var comp = CreateCompilation(text1);
            comp.GetAnalyzerDiagnostics(new[] { analyzer }, null).Verify();

            Assert.Equal(1, analyzer.FireCount1);
            Assert.Equal(1, analyzer.FireCount2);
            Assert.Equal(1, analyzer.FireCount3);
            Assert.Equal(1, analyzer.FireCount4);
        }

        private class AnalyzerActions_07_Analyzer : DiagnosticAnalyzer
        {
            public int FireCount1;
            public int FireCount2;
            public int FireCount3;
            public int FireCount4;

            private static readonly DiagnosticDescriptor Descriptor =
               new DiagnosticDescriptor(""XY0000"", ""Test"", ""Test"", ""Test"", DiagnosticSeverity.Warning, true, ""Test"", ""Test"");

            public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics
            => ImmutableArray.Create(Descriptor);

            public override void Initialize(AnalysisContext context)
            {
                context.RegisterCodeBlockAction(Handle);
            }

            private void Handle(CodeBlockAnalysisContext context)
            {
                switch (context.OwningSymbol.ToTestDisplayString())
                {
                    case ""A..ctor([System.Int32 X = 0])"":

                        switch (context.CodeBlock)
                        {
                            case RecordDeclarationSyntax { Identifier: { ValueText: ""A"" } }:
                                Interlocked.Increment(ref FireCount1);
                                break;
                            default:
                                Assert.True(false);
                                break;
                        }
                        break;
                    case ""B..ctor([System.Int32 Y = 1])"":
                        switch (context.CodeBlock)
                        {
                            case RecordDeclarationSyntax { Identifier: { ValueText: ""B"" } }:
                                Interlocked.Increment(ref FireCount2);
                                break;
                            default:
                                Assert.True(false);
                                break;
                        }
                        break;
                    case ""C..ctor([System.Int32 Z = 4])"":
                        switch (context.CodeBlock)
                        {
                            case ConstructorDeclarationSyntax { Identifier: { ValueText: ""C"" } }:
                                Interlocked.Increment(ref FireCount3);
                                break;
                            default:
                                Assert.True(false);
                                break;
                        }
                        break;
                    case ""System.Int32 B.M()"":
                        switch (context.CodeBlock)
                        {
                            case MethodDeclarationSyntax { Identifier: { ValueText: ""M"" } }:
                                Interlocked.Increment(ref FireCount4);
                                break;
                            default:
                                Assert.True(false);
                                break;
                        }
                        break;
                    default:
                        Assert.True(false);
                        break;
                }
            }
        }
```"
Hit wrong button...
"I'm gonna go ahead and ask the dumb question: Why can't we _automatically_ derive the constraint of an inferred type binding from the constraint of the type being matched?

For example, given
```ts
type Quote<AString extends string> = `""${AString}""`;

type QuotedFirstElement<AStringTuple extends readonly string[]> =
  AStringTuple extends readonly [infer FirstElement, ...infer Rest]
    ? Quote<FirstElement> // Currently errors here, because `FirstElement` is only constrained to `unknown`
    : never;
```
why can't we say ""well, since `AStringTuple` has a constraint of `readonly string[]`, any _elements_ we infer from it should therefore have a constraint of `string`""?

Intuitively, I suspect there's a very good reason for this and that I just haven't thought it through enough, but someone's gotta spring the trap! 😁"
"Tagging subscribers to this area: @github/gc
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

**What's wrong?**

When I was prototyping the NoGC support for regions, I notice that my code ran into a deadlock when running under server GC. When I observe the threads in detail, it appears the threads are blocking on different joins.

**Why does that happen?**
The majority of the code requires that the server GC threads all start together, follow the same path (with respect to joins), and therefore they should all be before the same join and all march towards the next join. 

The issue with this bug is that in a special case, a particular GC thread started earlier than the others and lead towards a different path. 

In particular, in a normal case, we expect all threads to be waiting at the beginning of the `gc_thread_function`. Except for the heap 0 thread, which blocks on the `ee_suspend_event`, all other threads should be blocking on the `gc_start_event`.

However, in the case of `minimal_gc_p == TRUE`, the work to reset the `gc_start_event` is skipped. Therefore when one thread is done with the work, it proceeds to run the next iteration right away without being blocked in the `gc_start_event`, and that is bad because the heap 0 thread will be waiting regardless, so all threads are not running in locked steps.

**The fix?**
I make sure the last thread entered the initial join reset the `gc_start_event` before letting all threads return from `garbage_collect`. This will ensure all threads get blocked on the same waiting condition, just like it was for the `minimal_gc_p == FALSE` case after `generation_to_condemn`.

Note that this fix is independent of `USE_REGIONS`, meaning it might happen in previous releases. We might want to consider backport this fix to earlier LTS.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>cshung</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-GC-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github/gc
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

When we are returning a large region during LOH compaction, the bit shift operator results in an integer overflow (note that `i` is 32 bits integer). With that, `basic_region_start` will be wrong, and thus accidentally reset the allocated pointer on the wrong region, leading to downstream issues.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>cshung</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-GC-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"@github @github  I'm concerned about the failed test cases. Most of them are ""Assertion failed 'OperIsSimple()'"" .It might mean that the optimization is applied not only to the return statements. Do you have any ideas what went wrong ? :)"
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

This change fixes mergeability of tailcall tests: apart from simple
deduplication of the test class names and visibility fixes
I have modified the pointer and reference tests to stop using
Environment.Exit for exiting the test as that kills the merged
wrapper in in-proc execution; I have also fixed them to have main
within a class. In two cases (recurse_ep_void and test_virt)
I found out that I had previously put the Fact attribute on the
wrong method so I fixed that too. I renamed the two C# test
projects to better match the test of tests (widen to widen_r to
indicate it's a release test and thread-race_il_r to thread-race_r
as it's not an IL test).

Thanks

Tomas

/cc @github/jit-contrib 

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>trylek</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Infrastructure-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
Do you want the likely wrong value in the fallback or a value you know indicates it’s incorrect and you can choose 1f if you want in that case?
"Should this be embedded into the dll or stored in the app package ""assets"" system? Not sure of the perf here. Probably better in the dll as we do not have to touch the filesystem - but I may be wrong. @github once the dll is loded into memory on Android, is it fully loaded, or will this still read off disk? Are there any pros/cons with embedded resources vs assets?"
It is indeed wrong in *some* other templates. I filed https://github.com/aspnet/AspNetCore/issues/10414 to fix other templates. But please fix this one here.
Wrong program.cs :)
"It's pretty much the theme with the other ones. While adding a null check would certainly not hurt, most of these APIs are introspecting MVC's code. Some of it is specifically annotated for these analyzers to function correctly. We would have to do done something wrong in our code for these to null-ref."
"ignoreIAssemblykey seems wrong here.
"
">this.ConsumeOneToken(closeKind) [](start = 33, length = 31)

Why consume the ']' or ')' if it's not the close kind expected? Is it more likely the user closed with the wrong kind or that the expected kind is missing? #Resolved"
"If these new types come from dotnet/aspnetcore, something is very wrong if they aren't just showing up. Fine if, on the other hand, the main thing we need is @github' dotnet/templating#3078 fix."
Name wrong
Actually that's wrong fixing.
We don't want to seal this. We want to do the crazy generic trick
What's wrong with `exception.ToString()`? Are we trying to avoid stack traces?
"Ugh.  I see that `IsOverridable` is an extension method that allows null input, but that's just wrong."
"this seems wrong.  We're only getting the first diagnostic with a fix... but how do we know the first diagnostic is the one that is the most severe?  For example, we might have a hidden diagnostic saying ""you can make this expression-bodied method into a block-bodied method"".  If that's the first diagnostic we get back, we won't show the .ErrorFix category even though that might appear there."
"Ditto @github's point. This is a temporary stopgap until we get Selenium working on Helix. Once that is done, we can refactor our test setup on the assumption that we are only targeting one environment. Hopefully, we'll be able to get Selenium working on Helix before the blazor-wasm branch is merged into master so that our Selenium-based tests can run alongside everything there.

> Looks good I think, looks like the project template tests are skipped in the output, only thing that looks a bit sketchy is that it only takes 9 seconds to run the blazor tests?

~~Yes, it looks like the test project is detected by the actual the cases are not running, I will take a look into this.~~

This is actually running. I had the wrong filter in the AzDO UI.

"
My apologies @github This PR shouldn't have triggered a validation build. Something is wrong with the exclusions I added in #27484. I'll play a bit more&hellip;
"This is the wrong file. Look at the one called ""post 2017"""
"1. you call root.FindToken 3 times with teh same arg.  Considre just doing it once.
2. you coudl simplify with ```token.GetAncestor<VarDecl>() ?? token.GetAncestor<...>() ?? token.GetAncestor<...>()```.
3. this logic looks wrong.  esp the log about variable declaration and foreach.  Specifically (due to lambdas) you could have these nodes contained within each other.  What you're really trying to say is ""find the closest containing ancestor of any of these types"".  However, this code is saying ""find the closest variable, then find the closest foreach"" with the presumption that the closest variable is closer than the closest foreach.

For '3' you sholud be able to make a test whre you're inside a foreach-variable inside a lambda inside var-decl.  The feature will fail in this case i believe. #Resolved"
"> Is there a way I could see a demo of the options?

Sure.

 * For an example that uses the same technique as in this PR, check [this demo site](https://github.com/GoogleChromeLabs/a11ycasts/tree/master/examples/managing-focus-spa) (which you'll have to clone and run locally). Alternatively wait until a nightly preview 6 build shows up containing the change from this PR, probably today or tomorrow, then do `dotnet new blazorwasm` or `dotnet new blazorserver`.
 * For an example that uses the more complex technique, see [this demo site](https://ns7t5.csb.app/).

In both cases you'll need to run a screen reader such as the Windows 10 Narrator or NVDA. For evaluating them, it's not purely a comparison of the UX, as we also have to make tradeoffs about how general it is across site types, and how well we think developers will understand it and get good results from it even if they don't have a good grasp of accessibility. We need the code to be simple enough that you pretty much can't get it wrong even if you're new or confused.

One other good point about the `FocusOnNavigate` component added in this PR is that, if you do want the ""auto-focus skip-to-content link after navigation"" UX, then you can use `FocusOnNavigate` to achieve that. The main thing the developer would have to implement is the skip link itself."
"Oops, copied comment at the wrong location. Fixed now, thanks!

---
In reply to: [234799909](https://github.com/dotnet/roslyn/pull/30777#discussion_r234799909) [](ancestors = 234799909)"
"I'm not sure what `CheckValidInstance_ThrowInvalidOperationExceptionIfNull(_parent == null, _parent);` is trying to solve, but anything that involves repeating code over and over instead of letting the instance method do the right thing seems wrong in my book."
"would indicate a program error in the actual code that registers the diagnostic.  i.e. we should always create the diagnostics with these locations so it's always safe to assume they're there when fixing.  If they're not, that means the underlying system did something wrong, at which point we can't figure out anythign safe to do at all."
"I'm not understanding the concern.  The original test runs the getter on the item to get the original time and stores it:
```C#
times.Add(timeFunction, timeFunction.Getter(item));
```
It then deletes the file:
```C#
// Deleting shouldn't change any info state
item.Delete();
```
And then it runs the getter again and validates that it hasn't changed from what was stored:
```C#
Assert.Equal(time.Value, time.Key.Getter(item));
```
validating the behavior prior to your PR that Delete doesn't invalidate the instance.  Can you elaborate on what's wrong?"
"I do want it to be collected in the test, I am testing profiler behavior with unloadable statics. The behavior that I want is that the test loads an assembly and unloads it, then verify that GetAppDomainStaticAddress always either returns a valid object or CORPROF_E_DATAINCOMPLETE. 

The problem is that before this change the ALC wouldn't last for the whole LoadCollectibleAssembly method. It would work sometimes but if a GC happened at the wrong point the call to `dynamicLibrary.GetType` would crash the runtime because the ALC was collected and then finalized.

Having the call to unload at the end of the method forces the behavior I want, where the assembly is loaded and then unloaded."
"I think prop.type is probably a subset of SettingValueType, but I don't want to use SettingValueType at this level because it gives the wrong impression. It's not really a type of the setting itself but has some info about what kind of control should be used to edit it."
"This command would still be wrong, since users would simply like to stage all files which are *not* in the merge group. And this command would simply stage all untracked files."
"I added this to `LayerJson` but I didn't add it to `Profile::CreateTerminalSettings(...)`. I wanted to add it under
`terminalSettings.StartingTitle(_tabTitle ? _tabTitle.value() : _name);`
but turns out that it works just fine without that...

I know I did something wrong here but I can't figure out what. @github "
"Snapshot the element ""pointer"" to avoid writing to the wrong cell.  I am 100% sure how it works with dispose."
"Thanks for the comments.  I believe I have updated as per the last comment.  I tried the Wasm Generics test in a loop 100 times and it completed without errors, so this fix looks good for CoreRT/Wasm.  I'm sure you experts will advise if I have it wrong."
"💡 Also add a test just like this one, but with the argument to the indexer being `int` instead of `Range`. The refactoring should work in this case because the indexer syntax will continue to use the `Slice` method instead of the indexer with the wrong type."
"ClickedItem contains the BindingContext not the Cell.  It's only a cell if the BindingContext is also a Cell which isn't a case where we would still want to pass it in as the cell argument. *NotifyRowTapped* needs to just locate the Cell itself where the event fires. Which is also broken on UWP but this change makes it less broken.

This scenario was fairly edge case anyway because since ClickedItem is the BindingContext it will almost never be a Cell unless it's binding to itself or the BindingContext for some reason implements Cell (which it normally won't). So in almost all cases this cast will just be null and in the cases where it's not null then it's passing the wrong Cell into *NotifyRowTapped*"
"It looks like there are a number of other places in this file that are wrong (`locate`, et al). I think a safer approach than trying to modify all the use sites is to have `file_entry_t::read` take an extra `force_extract` parameter, then pass it through to each `file_entry_t` constructor and store it in a field. Then we can check the field in `needs_extraction` and avoid changing all the call sites"
"so, it really doesn't matter. `lifetime` anchors the page so that it stays alive while the button click handler is being run.

That's _a good thing_.

We've gone crazy with the weak references in Terminal. We make them weak, check if they're alive, all the dang time"
"Not a warning, just info. Nothing wrong with the user deciding they're happy with the search as-is, and we'd also like to use this to say things like ""Searching based on XXX index"". "
Whoops that's wrong. This condition can never be true.
"What is wrong about
```ts
// export function setModelMarkers(model: ITextModel, owner: string, markers: IMarkerData[]): void;

setModelMarkers(model, myOwner, []);
```
?"
maybe a dumb nit: consider titling this 'Unit testing of generators' so nobody gets the notion at a glance that this is about writing a source generator which generates unit test cases
"I am not aware of, but it seemed reasonable to me because the `ClientWebSocketOptions` is a property inside the `ClientWebSocket` and it seemed wrong to me to have deflate options there which don't represent the actual state.

Also if we don't do it, I can't really test the negotiation of the deflate, without exposing/making other properties."
"Ok, I decided to systematically test every combination I could think of, and determine when XS offers autocomplete:
- Directly on NSObject - Yes, obviously, but we're adding yet more mess on NSObject
- Protocol (Informal) w\ BaseType - Yes, but it is wrong.
- Protocol (Informal) w\o BaseType - No
- Protocol w\o BaseType - No
- Category - No

¯\_(ツ)_/¯

I think we're out of luck on autocomplete, unless we add it on NSObject directly.

@github @github @github - Do we expect XS to offer autocomplete on case 3 and 4 above? Should I file a bug?
"
start with either `!unknown-` or `!wrong-` so it gets sorted along other important/critical logs
The test is now stuck in an infinite loop so something's wrong here.
"> foreach (var boundNode in GetBoundNodes(node)) [](http://example.com/codeflow?start=11&length=47)

We should not be inventing new ways to locate nodes. If ```GetLowerBoundNode``` isn't working, I would like to understand why. Otherwise, we should simply use it because it appears that the bug was caused by the usage of the wrong API. #Closed"
The way this is written makes it very hard to tell what it's doing.  There is nothing wrong with this code and it obviously works but it would be great to see a brief comment explaining why this index is calculated the way it is
"The description for this is ""changing a reloadable type (marked by {0})"", which made me think the argument would be the attribute, not the type name. Am I reading the line wrong?"
wrong - that can't go in master
"How strongly do you feel about this? I was trying to avoid duplicating code that exists in the Rebuild project, and will eventually become part of the compiler, but can't currently be re-used.

I don't feel like there is necessarily a downside to using the command line parser (though I know it doesn't map everything correctly), but maybe I'm wrong?"
I reapplied this change and the differences are now what we'd expect to see.  I don't know what went wrong there!
"> I don't see what's wrong with the new suggested name. Can you elaborate please?

""**One**DoesNotUseField"", but it looks like `field` keyword isn't used anywhere.
"
"ah, just use `throw new InvalidatiOperationException()` here. No need for helper since it's not a hot path (when exception is being thrown in this case). Also, `string? s_defaultTempPath = null` is correct. string.Empty is wrong."
since it's pointing at the wrong path and passing those old exclusions can probably be removed.  I'll do it in a separate pr
"Did you mean `interface Wrong<T = number, U> {}`?"
"If either of these aren't true, then something went really wrong, right? Maybe throw an argument exception in that case?
"
"Why the crazy lambda here? You've already passed in the IVsTextView, which has a nice 1:1 mapping to IWpfTextView.
"
"It's probably worth mentioning that JS is crazy and, I believe, can have both an `export=` and non-`export=` exports, via a file like

```ts
module.exports = class Foo {}
module.exports.a = ""yes""
```

and I have no idea how that should behave with respect to find-all-refs. @github knows our current behavior here, it's a bit in flux."
"either `Record<string, any>` or `object`. `{}` is the wrong type here."
"The `-2` is a ""something has gone horribly wrong"" code.  For this particular case it would require that the X509_STORE_CTX value has no associated chain (had never tried chain building, or someone had just reset it), which is pretty unexpected by the time you're calling this."
"I'm really interested in the reason why it should be marked as `@github`. Don't get me wrong, I'm one of those people ecstatic that this found it's way to the API, now I can ditch my [custom typescript version](https://github.com/SamVerschueren/tsd/tree/master/libraries/typescript) from my library which exposed this. I'm just super curious about the reasoning behind this decision :)"
"I'm pretty sure this is wrong. If the contracts exist in net46 to forward then we don't need to generate binding redirects. Moreover, we shouldn't generate redirects because it overrides fusion.
"
"I don't know all the JS string manipulation idioms, but it seems crazy to me to search (a suffix of) the whole file when you only care about one start position."
"I don't know how crazy we want to get with this one but we could also do

```suggestion
                return to.concat(ar || (from instanceof Array ? from : Array.prototype.slice.call(from)));
```"
"I've filed #34826 based on your comment. It looks like a bug to me.

Unfortunately, if that fixed things it means that something is wrong with having the IsSupported check be an actual call instead of a jit intrinsic I think. That's very odd, and I want you to track why that is happening before I think its reasonable to sign off on the change."
"There's also the idea of making optional the elements whose binding elements have default initializers, even if they are present in the top level initializer:

``` ts
function g7([x = 0, y = 0] = [0, 0]) { }
g7([]);  // Should work because first and second element should be optional
g7([0]); // Should work because second element should be optional
g7([0, """"]); // Should not work because type is wrong for second element
```
"
@github I got the numbering scheme wrong. The next non-servicing version for .NET SDK will be 6.0.200 (we just shipped 6.0.100 and servicing will stay in the 100 range).
"Consumers of `isDefinition`:

1. [VS Code](https://github.com/microsoft/vscode/blob/872e6715b4c528c563782d783913a68ca48b3a76/src/vs/editor/contrib/gotoSymbol/browser/goToSymbol.ts#L75) - if regular FAR returns exactly two results, ""compact"" results are requested, and exactly one of the results is not a definition, then the single non-definition will be returned.  (Unfortunately, this is accomplished using two separate tsserver requests.)
2. [VS Code](https://github.com/microsoft/vscode/blob/main/extensions/typescript-language-features/src/languageFeatures/codeLens/referencesCodeLens.ts#L45) - CodeLens always drops `isDefinition` results from the references count.
3. VS - The old implementation ignores it.
4. VS - The new implementation appears to (incorrectly?) assume that there will be exactly one definition in the result and uses it (or, in practice, the last occurrence) to determine whether the definition is read or written.

Edit: I filed a bug suggesting VS ignore it entirely.
Edit: The command name for (1) is ""Go to References"" or  `editor.action.goToReferences`
Edit: Using `isDefinition` for (1) will produce slightly wrong behavior if both ""references"" are declarations (e.g. an exported class and an import of that class) - the editor will jump to the other declaration, rather than showing the peek window.  This doesn't seem worth fixing."
"Sadly there are still issues with the fix in this PR as well as the fix in (the now closed) #45628. The core issue looks to be mutually recursive types in which variance is flipped by one of the types. For example:

```ts
type Foo<T> = {
  x: T;
  f: FooFn<T>;
}

type FooFn<T> = (foo: Foo<T>) => void;

declare let foo1: Foo<string>;
declare let foo2: Foo<unknown>;

declare let fn1: FooFn<string>;
declare let fn2: FooFn<unknown>;

foo1 = foo2;  // Error
foo2 = foo1;  // Error

fn1 = fn2;  // Error
fn2 = fn1;  // Error
```

Above, the `x` property in `Foo<T>` witnesses `T` co-variantly and the `f` property witnesses `T` recursively and contra-variantly. The combination should cause `T` to be considered invariant, and it is in the example above. But with a small change to `FooFn<T>` things fall apart:

```ts
type FooFn<T> = (foo: Foo<T[]) => void;
```

Now, because `T` isn't referenced as a ""naked"" type parameter, we don't examine the `Foo<T[]>` reference structurally, but rather attempt to rely on the computed variance--which is in the process of being computed. So, results come out wrong and are potentially sensitive to order of computation. For example, with this PR we get the following behavior:

```ts
foo1 = foo2;  // Error
foo2 = foo1;

fn1 = fn2;
fn2 = fn1;
```

meaning co-variance for `Foo<T>` and no witnessing in `FooFn<T>`. With #45628 we get

```ts
foo1 = foo2;  // Error
foo2 = foo1;

fn1 = fn2;
fn2 = fn1;  // Error
```

i.e. contra-variance for `FooFn<T>` which is slightly more consistent, but still wrong.

The tricky aspect of this example (and others like it) is that invariance isn't revealed unless we examine multiple circular type references structurally and in-depth. Which of course is exactly what we're trying to avoid with the variance computation in the first place."
"> Oh, wait. es2022.sharedmemory needs to be added to the list of libs (I think in program.ts?) and the new baselines need to be added after the test passes.

I searched for occurencies of es2020.sharedmemory and there was missing es2022.sharedmemory declaration in commandLineParser
but still wont pass in tests 😢 maybe I'm looking in the wrong place ?
"
"> @github, I'm not sure who order this assemblies, but yes, if they are in a wrong order will be a problem. I thought that when blazor generates blazor.boot.json it was being ordered there. @github do you know if the assemblies are ordered before being loaded on blazor?

I think we may be sort of getting lucky because the results of the resolver step insert things in a working order into the json but the runtime doesn't actually require that, it waits for everything to transfer before attempting to load.  I wonder if we should do the same here, it might actually speed up loading because we wouldn't be loading all the other assemblies multiple times."
"Tagging subscribers to this area: @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

- When using ValidateOnBuild we build the callsite for each ServiceDescriptor but using the wrong slot. This didn't matter before but it breaks service overrides.
- Run the spec tests with ValidateOnBuild set to true when it doesn't throw.

Currently blocking https://github.com/dotnet/aspnetcore/pull/32315

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>davidfowl</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Extensions-DependencyInjection`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Hi @github, and thanks for submitting this PR. .NET API documentation actually lives in a separate repo, [dotnet/dotnet-api-docs](https://github.com/dotnet/dotnet-api-docs). The documentation for the [List.Remove](https://github.com/dotnet/dotnet-api-docs/blob/11242b9ba428e75dcebb3e166c462fdcf2449493/xml/System.Collections.Generic/List%601.xml#L3243) method as defined there seems to be accurate. 

We plan to eventually backport the the contents of dotnet-api-docs back into source code, which should help minimize divergence and/or wrong documentation. For now though, I'm going to close this PR."
"Simple repro
```c#
using System;
using System.Threading;
using System.Threading.Tasks;

class X
{
    public static void RunSimpleParallelForeachAddTest_Array(int count, out int o_counter, out int o_expectCounter)
    {
        var data = new int[count];
        int expectCounter = 0;
        for (int i = 0; i < data.Length; i++)
        {
            data[i] = i;
            expectCounter = unchecked(expectCounter + i);
        }
        
        int counter = 0;
        
        // run inside of a separate task mgr to isolate impacts to other tests.
        Task t = Task.Run(
            delegate
            {
                Parallel.ForEach(data, (x) => Interlocked.Add(ref counter, x));
            });
        t.Wait();

        o_counter = counter;
        o_expectCounter = expectCounter;
    }

    public static void Main()
    {
        int counter;
        int expectCounter;
        RunSimpleParallelForeachAddTest_Array(100, out counter, out expectCounter);
        Console.WriteLine($""got {counter} expected {expectCounter}"");
    }
}
```
This is the same as the libraries test but with smaller data size. Run with a variant of OSR stress to force OSR to happen even at lower iteration counts:
```
complus_OSR_HitLimit=0
complus_TC_OnStackReplacement_InitialCounter=10
```
The results are wrong and vary from run to run
```
got 5001 expected 4950
got 5129 expected 4950
got 5001 expected 4950
got 5049 expected 4950
got 5129 expected 4950
```
Two methods get rejitted with OSR:
```
Compiling    8 X::RunSimpleParallelForeachAddTest_Array, IL size = 93, hash=0xa33b9cbc Tier1-OSR @github
Compiling   53 <>c__DisplayClass19_0`1[__Canon][System.__Canon]::<ForWorker>b__1, IL size = 575, hash=0x4b0449a5 Tier1-OSR @github
```
I've looked at the first one in some detail and it seems ok. So likely the issue is in the second one."
System.Globalization is failing because of ReadLine which is the same as ReadLineAsync. So probably something is wrong with the logic here for both. Analyzing.
"Well, that sucks. We'll see if there's a way to have your voice represented in that issue (worst case scenario we'll create a new one)."
"> The type or namespace name 'Activity' could not be found (are you missing a using directive or an assembly reference?)

Looks like it might be using the wrong reference pack."
"Ah, I'm dumb. I didn't notice that Internals were already exposed for Maui.Controls. I needed to add Controls.Xaml to InternalsVisibleTo and now it all works.

https://github.com/dotnet/maui/pull/4333/commits/0310b4ab20916542bb11a521a3893571320d61cb"
This seems wrong. Going from 3.0.0 -> 2.1.1? @github  expected?
"Actually this is the wrong behavior. We wrote in the spec that the server can ignore `StreamItem` and `Completion` messages after the stream has been closed.

We also should consider sending a completion message to the client when the server completes the stream early so the client knows to stop sending stream items. I'll file an issue for both the problems and we can do them in preview3."
"Metadata is always `most significant = last`. so whatever is putting them in the wrong order is what needs the fix. "
This text is wrong. 403's aren't the result of exceptions.
"> Another thing I've realized is that if the customer creates their own class deriving from IJSObjectReference and attempts to grab an instance of it via JS interop, the new exception will not be thrown since their own type is from a different assembly. Should we handle this case as well?

That doesn't seem like a problem to me either. We don't need to recognize 3rd-party subtypes of `IJSObjectReference` since there's no way we'd know which concrete instance type to create. So I'd expect it to be treated as `JSCallResultType.Default`, as it already is here.

Good catch on `DotNetObjectReference` though! To be honest, I'm not massively bothered about providing a specific exception if people try to use `JSObjectReference` instead of `IJSObjectReference`. The equivalent would be trying to `@github JSRuntime JS` instead of `IJSRuntime`, and we don't have any exception for that except the default one from DI.

I think if someone does mistakenly use `InvokeAsync<JSObjectReference>(...)` then they'll get an exception from the JSON deserializer saying it doesn't have a default constructor, which is basically good enough because then the developer will have no choice but to realise they are doing it wrong and will have to check docs again or another working implementation to copy/paste.

So in summary I'd be fine with a simplified update like:

```cs
if ((resultType.Assembly == _currentAssembly)
  && (resultType is one of the three known IJSObjectReference ones))
{
    return JSCallResultType.JSObjectReference;
}
else
{
    return JSCallResultType.Default;
}
```

We could even choose to leave the previous implementation as-is, but adding the `resultType.Assembly == _currentAssembly` check seems at least marginally useful."
"> @github @github getting an error with the new queue:
> 
> > Sending Job to Helix-Client-Enterprise-Win11-Preview-08-30-2021...
> > D:\workspace_work\1\s.packages\microsoft.dotnet.helix.sdk\6.0.0-beta.21427.6\tools\Microsoft.DotNet.Helix.Sdk.MonoQueue.targets(55,5): error : ArgumentException: Unknown QueueId. Check that authentication is used and user is in correct groups. [D:\workspace_work\1\s\eng\helix\helix.proj]

Taking a peek (this is the wrong queue name I'm just fetching it for you)"
What's going wrong at the moment @github❔
"I think what happened is runtime switched to VS 17.3 / MSVC v143 (see https://github.com/dotnet/runtime/commit/f14aa5d03e8bbf7e7700e9cf021b91867fb7e775) finally so we are using the wrong toolset since we are static linking against libnethost, I'll try bumping us up and seeing if that resolves things "
"Rather than 2, can we do `TestCompilationExtensions`? Suffixing 2 feels wrong. #Resolved"
you are correct!  i am dumb.
"What happens if the caller adds their own `JsonConverter<JsonElement>`? It seems wrong to always fetch our own.

**Edit:**
Yep, this seems wrong (or is at least a breaking change from 3.1). User defined converter is not getting called.
```C#
[Fact]
public static void ExtensionDeserializer()
{
    string json = ""{\""hello\"": \""world\""}"";
    Poco p = JsonSerializer.Deserialize<Poco>(json,
        new JsonSerializerOptions
        {
            Converters =
            {
                new JsonElementConverter(),
                new JsonObjectConverter()
            }
        });

    // We shouldn't get here, but rather fail with NotImplementedException
    Assert.Equal(1, p.Overflow.Count);
}

public class Poco
{
    [JsonExtensionData]
    public Dictionary<string, object> Overflow { get; set; }
}

public class JsonElementConverter : JsonConverter<JsonElement>
{
    public override JsonElement Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        throw new NotImplementedException();
    }

    public override void Write(Utf8JsonWriter writer, JsonElement value, JsonSerializerOptions options)
    {
        throw new NotImplementedException();
    }
}

public class JsonObjectConverter : JsonConverter<object>
{
    public override object Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        throw new NotImplementedException();
    }

    public override void Write(Utf8JsonWriter writer, object value, JsonSerializerOptions options)
    {
        throw new NotImplementedException();
    }
}
```"
"Profilers achieve this modification using either [SetILFunctionBody](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/icorprofilerinfo-setilfunctionbody-method) or [RequestReJIT](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/icorprofilerinfo4-requestrejit-method). The ReJIT case has its safety enforced by the runtime - each time the profiler calls RequestReJIT we allocate a new ILCodeVersion and every JIT request is bound to a particular NativeCodeVersion which in turn implies a specific ILCodeVersion. In the case of tiered compilation or OSR the NativeCodeVersion being constructed was bound to the same ILCodeVersion as the tier0 native code, regardless if the profiler has created some new IL versions in the meantime. For ReJIT GetAndVerifyILHeader() allows the IL code for a given ILCodeVersion to be provided by the profiler lazily, but it is still logically immutable. Whatever IL the profiler gives the runtime is cached in the ILCodeVersion object and that same IL is returned on every future query. We know that the tier0 code would have already requested IL so all the tier1 requests will be working off the runtime cached copy.

SetILFunction body is the older and less safe variation that currently relies on correct usage by profiler authors rather than runtime enforcement. The documentation tells them that they should not do this:

    > The SetILFunctionBody method can be called on only those functions that have never been compiled by a just-in-time (JIT) compiler.

The current implementation of SetILFunctionBody overrides the IL of the initial ILCodeVersion. The runtime code treats that IL as if it were immutable, but clearly with abuse by the profiler author it wouldn't be. If a profiler is making these types of modifications and leaving tiered compilation enabled then they have already broken the tiered compilation case (tier0 and tier1 would use different IL). I could imagine that getting it wrong in the OSR case has more visble failure modes though. I haven't thought it through all the way, but probably a safer place to be in the future is to re-implement SetILFunctionBody so that it allocates new ILCodeVersions similar to ReJIT so that we can version it explicitly.

cc @github
"
"The old code produced an [error](https://sharplab.io/#v2:D4AQTAjAsAULDaBBALsgTgSwEYFdkFMBVAZwEMBzfAChXWz3wBVS1LliA6AYQBtTjiASgC6scAAIAsgE9aaOfQLiAXOIW4CsAN6wAvrAQy5VCGADMAGnEA1fGmIYA9gDtxAXnEQRYsOIAi2nqwQA).

`error CS1069: The type name 'Version' could not be found in the namespace 'System'. This type has been forwarded to assembly 'System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e' Consider adding a reference to that assembly.`

I could try and figure out exactly what is wrong with assembly references and redirects, but I don't think this test is worth risking my sanity ;-) #Resolved"
"Anyways, my intent was not to derail this PR with unrelated issues... :)

This was mostly just wanting to point something out that I noticed while looking at the change. I was somewhat surprised to see this kind of manipulation of locale tags, and I (mistakenly) thought the code was trying to do some kind of mapping here, and getting it wrong, so I wanted to try to help out by pointing it out. It might be worth discussing this offline later on I suppose."
"I realized I missed adding these annotations, but regening the ref assembly using `/t:GenerateReferenceSource=true` doesn't appear to pick these up. What am I doing wrong?"
Was this that we made a change to not look at `EditorConfigFiles` and our targets were wrong?
"OK if anything went wrong here, it's with this function or its two similar friends below. Review them harder. Maybe they should be templated?"
"@github it works perfectly on my ARM chromebook. I am even able to install Codespaces but I can't actually connect to any codespace:
1. sign in to Codespaces
2. attempt to connect to a Codespace
3. VSCode Insiders asks you to sign in again
4. after re-signing in, the extension keeps saying ""signing in..."" and hangs there forever

(this might be the wrong repo to report in though)"
"I moved to wrong file, with the same namespace `Microsoft.CodeAnalysis.Shared.Extensions`. It really confuses me that there are so many files named `ISymbolExtension`."
"The two potential problems with fire-and-forget in a case like this are:
1. The thing being disposed (whatever is calling CaptureDisposable) borrowed some resources that end up still being in use when its Dispose returns, and the caller then rightfully assumes they've regained sole ownership but suffers strange race conditions because they're assumption was wrong.
2. Failures that occur asynchronously end up being masked.

In general (1) is the more impactful issue if it's applicable... is it applicable here?

(2) can be mitigated if there's some logging mechanism that could be employed as part of a continuation.

How common is it for a service to implement IAsyncDisposable but not IDisposable?"
"I didn't want to add an assert in the case that I'm wrong, but since the methods are just taking locks and immediately doing stuff that doesn't require the UI thread, it seemed easiest to do nothing special at all."
"thanks for the explanation.  however, i'm still missing the ""why"" of this.  i.e. why is it important that we be able to map back to this particular parameter symbol once ths snippet is actually inserted?  (i'm literally just dumb.  i'm sure the answer is obvious. however, having not written or used this feature yet, it's not readily apparent during review, and would be appreciated) :) "
this comment is technically wrong now
"I was about to comment that this line shouldn't be necessary, but I see from the implementation that it is, which makes me think we should also be setting this here:
https://github.com/dotnet/runtime/blob/d776e5b6d7e46eac4713ed31ff17a22ec0329f25/src/libraries/System.Net.Sockets/src/System/Net/Sockets/Socket.Tasks.cs#L111
It's super rare that it would be an issue, as it would require disconnecting and then reconnecting the same socket, end up using the same args instance that was previously used via NetworkStream, and hit a failure condition as part of the connect... and even then the impact would just be the wrong exception message.  But, still, probably worth fixing."
"BTW did something change recently?
My Dev build feels ***crazy*** snappy nowadays, even if I got a debugger attached. 🤯
That definitely wasn't the case a month ago or so. Is this because of the new `til::bitmap` rendering?"
"I think these have the wrong message: `Properties.Resources.XA4310`, and the code is `XA4314`."
"WIP commit message:

```markdown
Context: https://github.com/xamarin/xamarin-android/issues/5838

Setting `$(AndroidEnablePreloadAssemblies)`=False, which disables
assembly preloading (see af02a65a), could result in a crash when:

 1. The launched `Activity` isn't located within the ""main App
    assembly"", the assembly built as part of the `App.apk` build, and

 2. The launched `Activity` uses Android Resource IDs, and

 3. Those Android Resource IDs differ between the Library project
    build and the Application project build (usually the case).

This setup is exemplified by the
`DebuggingTest.ClassLibraryMainLauncherRuns()` unit test.

Our current Resource architecture assumes/ensures that there is
Only One™ `Resource` type mentioned by an assembly-level
`ResourceDesignerAttribute` custom attribute, with
`ResourceDesignerAttribute.IsApplication`=true:

	[assembly: global::Android.Runtime.ResourceDesignerAttribute(""My.Resource"", IsApplication=true)]

The `ResourceIdManager.UpdateIdValues()` method looks for this
attribute in all loaded assemblies, and when (if) found, will
invoke the `UpdateIdValues()` static method on the specified type.

The problem is that only the *App assembly* `Resource.UpdateIdValues()`
method does anything, and if the App assembly isn't loaded -- which
may be the case when the `Activity` loaded isn't from the App assembly
and assembly preload is disabled -- then:

 1. `ResourceIdManager.UpdateIdValues()` never finds the
    `ResourceDesignerAttribute`, and

 2. `Resource.UpdateIdValues()` is never invoked, and

 3. Android Resource IDs in non-App assemblies are never updated to
    contain their correct values.

Thus, attempting to use an Android resource may result in unexpected
failures:

	var button = FindViewById<Button> (Resource.Id.myButton);
	// `button` is null, because `Resource.Id.myButton` has the wrong value.

This can result in `NullReferenceException`s:

	android.runtime.JavaProxyThrowable: System.NullReferenceException: Object reference not set to an instance of an object
	    at MyLibrary.MainActivity.OnCreate(Bundle bundle)
	    at Android.App.Activity.n_OnCreate_Landroid_os_Bundle_(IntPtr jnienv, IntPtr native__this, IntPtr native_savedInstanceState)
	    at com.xamarin.classlibrarymainlauncherruns.MainActivity.n_onCreate(Native Method)
	    at com.xamarin.classlibrarymainlauncherruns.MainActivity.onCreate(MainActivity.java:29)

Fix this by *always* loading the App assembly during process startup,
which also happens to be the *first* assembly listed within the
generated `mono.MonoPackageManager_Resources.Assemblies` array, which
is provided to `Runtime.initInternal()`.
```"
"@github, @github - **Disclaimer** before you read the bellow: I really love the team, the technology and the product (so please don't hate me :angel:)

You are working on a huge stuff nowadays (RPC, buffer rewrite, settings UI, state  storage, and so much more) and I really don't want to delay you, but I feel somewhat frustrated lately and want to share it. My major issue is that after a week of inactivity, PR goes off my L1 cache and restoring it there requires an effort.

I tried different approaches:
* Several small contributions - the sum of all context switches is expensive compared to the actual work.
* Medium contribution - getting back to the zone is difficult
* Large contribution split into many - is endless :smile:

Don't get me wrong - I know that you are putting a lot of effort in reviewing my commits and in majority of cases your feedback is very timely. I totally value that! And yet, even few PRs that are stuck / having no assignee / reviewer spoil the impression as it feels as irrational use of time.

I still continue contributing, as I really believe in you and the product I use every day, but this frustration persists and I haven't found a cure myself yet :blush:

I absolutely understand the challenge you are facing as a small team under MSFT's quality requirements and I am not coming with a specific suggestion of how and whether to solve this, but just wanted to raise a flag that if a contributor needs to wait a week for a follow up / several weeks to close all required cycles, this can make an  establishment of robust community challenging.

Another **disclaimer**: This above is probably my personal issue and other contributors don't feel so.

In addition, I know I asked this is in the past, but if there are specific areas that can make my contributions more impactful (increasing the ROI of more frequent reviews) please let me know. I tried to solve P1s or tickets with many up-votes - but empirically it hardly increases the odds :blush:

Sorry if it was emotional - simply we are reaching another week-end where I don't know how to advance.. 

"
"What happens with this code?

    [return: BindAs (typeof (string))]
    [Export (""stringMethod:"")]
    NSNumber StringMethod (int arg1);

it's obviously wrong, but do we show a good error?"
Any reason for not using `PrintSession` ? i.e. drop the `PM` prefix. The other properties of `NSPrintInfo` don't seems to be prefixed and if they were they would be wrong ;-)
"@github This is probably naive or just plain wrong.  Do you have any objections? If not, I will add some more tests."
Seems like it would be wrong to fire NotifyStarted if we didn't successfully start but I'm not sure. It's weird to return from StartAsync without an error if we haven't successfully started.
">_isCreatingPropertySymbol [](http://example.com/codeflow?start=53&length=25)

This approach doesn't look thread-safe. In general, I think an approach that temporarily affects output of GetMembers and the like APIs is wrong. #Closed"
">ContainingTypeParameters [](http://example.com/codeflow?start=66&length=24)

Something feels wrong about this set of type parameters. If we say that this type should have type parameters on its own, then this what we should implement. Another way to somehow express that is to set ```ContainingSymbol``` to be the first generic container that contains the code that creates the type. This feels strange too, because we will be introducing a concept of a type contained within a method. Also, these type parameters feel important, yet they do not participate in equality. The structure of symbols that we create doesn't feel sound. Let's discuss offline in more details. #Closed"
"All this, I got th first interface wrong and forgot to update the delegates, updated in https://github.com/xamarin/xamarin-macios/pull/12183/commits/a9c90671922a8fac77fa8580605bae1715fdf4ed"
We spoke offline. This code was wrong. I was able to simplify the implementation once I changed away from calling 'RootSlot' here.
"Thanks for pointing that out! Correct me if I'm wrong but I believe that in this case, we don't need this to retrigger since the user would be selecting the exact same symbol node which is already highlighted. "
"> I prefer CreateA and CreateB because they give an indication on when each should be used (I'm the same way on overloads generally, I prefer to have different names indicating when to use each if they are really for different purposes)

My main concern here is following existing patterns in the code base (personal pref is CreateA, CreateB methods).  I tried searching through the code base for guidance and unfortunately there isn't a lot to be had.  
- Types which have CreateA / CreateB factory model: 1
- Types which have Create only: 0

There are more examples for `internal` types but for `public` types there is very little data (or my program to look for it had a bug).  

> I think the new public API here should have a name which discourages actually using it, because we don't want people to use it.

I'm not opposed to this, but I think using `Serialized` is the wrong terminology.  It's implying a very specific use which we are currently removing from the compiler.  
"
"this is a case where the resource is clearly wrong. both these resources are the same string.

probably the right fix for these two is to change the resource to eg `File ""{0}"" has an invalid file format.` or similar, and leave the sourceUri in it."
"(To be clear, I am not arguing nor saying that you are wrong.)"
"This is a change in behavior, I wonder if we need to document it.  If the pinvoke search directories include multiple platform directories (ie, a folder with arm64 shared libraries and another with x64) and we see the ""wrong"" architecture before the correct one, we will fail.

How hard would it be to only return the ""bad image"" error after we scan the whole search path?

(There's no nice way to clone a MonoError, but you can convert it into a MonoErrorBoxed, and use the boxed error to set the contents of a MonoError, and then free the boxed error)"
"Good catch on getEffectiveTypeAnnotationNode!

Unfortunately, I tried your proposed change and `node` ends up 1-too-high after the loop -- that is, it's the node above the ParameterDeclaration in the tests below, so `node.parent.type` ends up looking for the type two nodes above the ParameterDeclaration. Also I still had to use `Node` as the type for binding.parent, since `node.parent.parent` is a big union type that isn't assignable to BindingPattern. The elaboration points out that CallSignatureDeclaration, at least, is wrong.

I did work around the 2-too-high problem by tracking the previous parent on each iteration:

```ts
            let node: Node = binding.parent;
            let decl = binding.parent.parent;
            while (isBindingPattern(node)) {
                decl = node.parent;
                node = node.parent.parent;
            }
            return !!getEffectiveTypeAnnotationNode(decl);
```

But this looks worse to me than the original."
"I think the Socket.Close docs are wrong and thus this is, too.  The docs say it accepts a timeout in seconds, but on both Windows and Unix it's passed through raw to setsockopt, which expects milliseconds."
"It feels to me that compilation.GetTypeByReflectionType should locate proper symbol without a need to special case System.Object. Otherwise, why other special types not special cased (System.Int32, for example)? Perhaps submissionReturnType is set to the wrong Type instance, perhaps that is what should be fixed?
"
"It is the wrong bag, it should go into parameter.
"
"I'm calling robocopy from `ShellOut` in `fetch_build.csx`.  If needed, we should just create a CopyDirectory function that wraps that.  The code below troubles me for two reasons:
1.  We never check the exit code of the process
2.  We drop the stderr/stdout of the process on the floor.

If something goes wrong, it's going to be very difficult to diagnose it from a log of the script output. 
"
"well, uh, sort of. It's now silently `any`, which seems wrong. I filed a bug #33106."
"> `The getgrgid() function need not be thread-safe.`

This sounds to me like they are saying ""you don't need to worry about thread safety with this method"". But maybe my interpretation is wrong. What do you read from that?"
"ha ha spreading a RegExpExecArray will surely never go wrong.

seriously, this is annoying if You Know What You're Doing, but I would feel comfortable making people write a cast for this."
This comment might have shown up in the wrong place. You have an `else` on [line 265](https://github.com/microsoft/TypeScript/pull/39579/files#diff-46de2fd0324aef6e77de5b5b11a8239cR265) immediately followed by an `if`. Could you not do an `else if` here?
"That's not what is causing this issue, this happens after removing my
parenthesizing. It's an existing method that's adding them.
Op 21 jun. 2016 02:27 schreef ""CyrusNajmabadi"" notifications@github.com:

> In src/Workspaces/CSharp/Portable/CodeGeneration/CSharpSyntaxGenerator.cs
> https://github.com/dotnet/roslyn/pull/11647#discussion_r67790671:
> 
> > @@ -3531,6 +3531,11 @@ public override SyntaxNode ExpressionStatement(SyntaxNode expression)
> >              return SyntaxFactory.ExpressionStatement((ExpressionSyntax)expression);
> >          }
> > -        public override SyntaxNode ConditionalAccessExpression(SyntaxNode expression, SyntaxNode whenNotNull)
> > -        {
> > -            return SyntaxFactory.ConditionalAccessExpression(Parenthesize(expression), SyntaxFactory.MemberBindingExpression((SimpleNameSyntax)whenNotNull));
> 
> Yes. Your code generation logic is wrong :) As kevin mentioned, you should
> not be parenthesizing the whenNotNull portion.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/dotnet/roslyn/pull/11647/files/717e2490e2a35559b6db7f2ff6b05e0f83b9ce52#r67790671,
> or mute the thread
> https://github.com/notifications/unsubscribe/AJ2JlKF8va4z2BV301bJCpCpbJNlvxitks5qNy_sgaJpZM4IqIKZ
> .
"
I think both the assertion created is wrong and it also seems wrong that we allow the replacement of a ubyte typed `LCL_VAR` with a non zero-extended value.
"This method turns out to have no references and can be deleted. GetAllItems above also returns an IEnumerable. Its only caller implements a CCI interface method that returns an IEnumerable, so there's presently little chance for anything to go wrong, but I can change it to return an ImmutableArray.
"
"```suggestion
        private unsafe void WriteText(ReadOnlySpan<char> chars)
```
I see your conversation above about that causing issues, but if it really resulted in things using the string version, as Jan says something is wrong that needs to be investigated."
"The parameterless Split should split on anything for which char.IsWhitespace returns true. There's nothing fundamentally wrong with that behavior for string, and any such subtle differences like that from string are going to lead to bugs."
"So in case the returned type is a tuple type (which I now realize it may be a simpler condition here) we don't have a mapped type to check, one condition is implicitly checked, as the type can only be homomorphic if it has no nameType (the `AS rest` component of the type parameter) the other on assignability of the constraint to the keyOfConstraintType should be once again implicit given the constraint is the keyof of a tuple BUT I may be wrong :)"
Yeah that is weird. Even if it were to match ICloneable interface annotation would be wrong as it defines the return value as `object` not `object?`. Will open an issue in arcade.
"@github 

> does this mean that the assemblies in the ""stable"" version of these reference assemblies are wrong, and the ones in the earlier ""preview"" version are right?

That matches my memories of this. I tracked down the point where we moved to this package and it's PR #29827. 

@github may remember why we needed the non-RTM packages here. My vague memory is that this is still the time when we were dealing with the issues around MS.VB.dll being incomplete. It took a while to find all the places where the incomplete version was being published and fix it to have the complete one. This is likely another one of those cases

"
"As an experiment, I have renamed cmake.exe to see the error I get from build.cmd with wrong or missing cmake. Unfortunately, it is still:
```
CROSSGEN-CORELIB : error : CrossGen System.Private.CoreLib build failed. Refer to D:\runtime\src\coreclr\..\..\artifacts\log\CrossgenCoreLib_Windows_NT__x64__Debug.log [D:\runtime\src\coreclr\crossgen-corelib.proj]
```
The crossgen error is in red. The message about missing cmake is two screens above this error in while and very hard to find. The PR in the current shape is not going to make this better.

I got this error message after 2.5 minutes. Most of this time is spent in restoring packages. This time can be a lot more without fast internet - downloads close to 1GB."
"Note: breaks jest types in the following call:

```ts
const spy3Mock = spy3
    .mockImplementation(() => '')
    .mockImplementation()
    // $ExpectError
    .mockImplementation((arg: {}) => arg)
    .mockImplementation((...args: string[]) => args.join(''))
    .mockImplementationOnce(() => '')
    .mockName('name')
    .mockReturnThis()
    .mockReturnValue('value')
    .mockReturnValueOnce('value')
    .mockResolvedValue('value')
    .mockResolvedValueOnce('value')
    .mockRejectedValue('value')
    .mockRejectedValueOnce('value');
```

The last four calls expect an argument of type `never` now instead of `string`. This seems wrong, or at least unintended."
"> This is effectively a test issue and not a product issue
> the test server is supposed to be doing the wrong thing and the runtime should be able to handle it.

These sound contradictory? : ) If the runtime can't handle something that it should be able to handle, that is the definition of a product issue.

I think the discussion is making one of a few assumptions. I want to make it explicit which one and make sure everyone agrees with the choice:
a) [Test issue] It was never intended for the runtime to work with a tool that does what the test did (prior to this change)
b) [Product Issue] It was intended to make the runtime work with a tool that does what the test did, however the value in doing so is not enough to justify the dev time, risk, or whatever else involved in resolving it
c) [Product issue] It was intended to make the runtime work with a tool that does what the test did, but it is impossible to implement this behavior on MacOS
d) something else?

A few other misc thoughts:
1. None of the examples I see online suggest that a well-written unix domain socket server would need to delete the socket file prior to closing the socket. If customers write their own servers they probably aren't going to do it unless we doc it and they are diligently reading our docs (a dubious assumption).
2. A tool that repeatedly creates and destroys the socket in a loop probably isn't something a customer would write. However a tool that calls unlink(), socket(), bind(), listen(), accept() in that order and then crashes and restarts at the beginning of the sequence seems pretty reasonable. In theory doing that in a loop with close() at the end simulates what would happen if that server crashed a lot, or if it crashed at just the right moment in time to cause us trouble. I assume we don't know definitively if crashing and relaunching does reproduce the same problem that we see with looping?
3. The description of the issue certainly seemed surprising. If I understand correctly you are saying that poll() returns HUP after the server socket is closed, but calling connect() immediately afterwards is able to reconnect to the closed socket, this generates no error and future calls to poll() do not return HUP? 

"
"I'm not sure I understand how #42485 helps. Before the fix in this PR we'd end up hitting the panic limit at 100 recursive invocations and output an `Excessive stack depth comparing types...` diagnostic, which prints the two types. This happed relatively quickly, but it is nonetheless wrong behavior.

With the PR we keep successfully relating types until we get to 50 levels of instantiations and then stop--but without printing any types, so #42485 wouldn't affect anything. It takes longer for this to occur but that isn't surprising given the very large number of types `XMLHpptRequest` touches if you recursively iterate over all of its properties."
"Another possible conclusion:

We need more analysis of the new errors to figure out how the codefix causes the new errors. I thought that adding `undefined` wouldn't change anything since that used to be the semantics, but it sounds like I was wrong.

In the meantime, we need to decide between shipping a half-baked codefix or not. We've done this before! But for a new pedantic feature, I don't think we'll do much better than codemods written by the experts who adopt new features. So I'm leaning toward not shipping it.

@github do you have an opinion about this?"
"As mentioned - I'm very open to revisiting XState types to see if we can improve the situation anyhow there. I know that this is just a single library whereas this PR potentially impacts a lot more than that though. However, as a dev, I would always take a slower compilation over random errors - so this PR is a big improvement from my point of view.

Is there any rough description for the overall algorithm of how the variance is computed? If I understand correctly then:
- each type parameter has its own variance type
- to compute it we may need to traverse the whole type structurally, because if `T` is passed down through multiple layers then any layer can impact the variance type of the associated type parameter at the root level (and on each level in between)
- potentially when assessing that a type param is invariant you can return early from the algorithm since nothing else can change that
- this information can mostly be cached per uninstantiated type unless conditional types/mapped types do some weird-ish transformations under the hood (not saying that you are caching it, but that such a heuristic could potentially be used, I have no idea if it would be worth it - this is just me trying to understand the problem space better)

I wonder if there is any type construct that makes it impossible for you to take the associated ""slot"" into consideration? Like - I see how ""makes"" type params are taken into consideration, even when a type is ""boxed"" using some other type I can see how the relation gets transitive etc But when I think about crazy conditional & mapped types... I'm getting lost.

In somewhat other words - I wonder if there is anything that we possibly could do to make TS not descend into a particular branch of the structure?"
" geoffkizer : I went back and checked the docs one more time. The documentation for Dns.GetHostName says it ""A string that contains the DNS host name of the local computer."" and ComputerNameDnsDomain says ""The name of the DNS domain assigned to the local computer."" I don't have a cluster to test it on but the documentation for gethostname() says it returns the cluster name. So if `gethostname()` is returning something else, the code is already wrong."
"> I'm just going to close this. Was opportunistically improving something that jumped out at me while reviewing the code for another reason, but it's resulting in diving head first into the world of we don't really like how all of this header parsing is structured in general and not wanting to make these kinds of changes until the whole thing is just overhauled, whenever that may be.

If the PR was just about spanification then I don't think we'd be diving, head-first or otherwise. 

Where we started diving into trouble, I think, was the changes re HttpRuleParser.GetNumberLength. This change isn't just an obvious improvement; it changes the behavior of the method in certain cases, which is naturally going to induce various questions about whether and how to make those changes.

The conversation also got unnecessarily complicated because I read your code wrong initially and was confused; sorry for that, I should have read the code more closely."
"Re: 
```
System.Net.Requests.Tests.dll   Failed: 8

Test collection for System.Net.Tests.HttpWebRequestTest_Sync
System.Net.Tests.HttpWebRequestTest_Sync.HaveResponse_GetResponseAsync_ExpectTrue(useSsl: True)
    System.AggregateException : One or more errors occurred. (One or more errors occurred. (The operation has timed out.)) (One or more errors occurred. (Unexpected EOF trying to read request header))\n---- System.AggregateException : One or more errors occurred. (The operation has timed out.)\n-------- System.Net.WebException : The operation has timed out.\n---- System.AggregateException : One or more errors occurred. (Unexpected EOF trying to read request header)\n-------- System.IO.IOException : Unexpected EOF trying to read request header
System.Net.Tests.HttpWebRequestTest_Sync.HaveResponse_GetResponseAsync_ExpectTrue(useSsl: False)
    System.AggregateException : One or more errors occurred. (One or more errors occurred. (Operation timed out [::ffff:127.0.0.1]:50415 (127.0.0.1:50415))) (One or more errors occurred. (Unexpected EOF trying to read request header))\n---- System.AggregateException : One or more errors occurred. (Operation timed out [::ffff:127.0.0.1]:50415 (127.0.0.1:50415))\n-------- System.Net.WebException : Operation timed out [::ffff:127.0.0.1]:50415 (127.0.0.1:50415)\n------------ System.Net.Http.HttpRequestException : Operation timed out [::ffff:127.0.0.1]:50415 (127.0.0.1:50415)\n---------------- System.Net.Internals.SocketExceptionFactory+ExtendedSocketException : Operation timed out [::ffff:127.0.0.1]:50415\n---- System.AggregateException : One or more errors occurred. (Unexpected EOF trying to read request header)\n-------- System.IO.IOException : Unexpected EOF trying to read request header
System.Net.Tests.HttpWebRequestTest_Sync.GetResponseAsync_UseDefaultCredentials_ExpectSuccess(useSsl: True)
    System.AggregateException : One or more errors occurred. (One or more errors occurred. (The operation has timed out.)) (One or more errors occurred. (Unexpected EOF trying to read request header))\n---- System.AggregateException : One or more errors occurred. (The operation has timed out.)\n-------- System.Net.WebException : The operation has timed out.\n---- System.AggregateException : One or more errors occurred. (Unexpected EOF trying to read request header)\n-------- System.IO.IOException : Unexpected EOF trying to read request header
System.Net.Tests.HttpWebRequestTest_Sync.GetResponseAsync_UseDefaultCredentials_ExpectSuccess(useSsl: False)
    System.AggregateException : One or more errors occurred. (One or more errors occurred. (Operation timed out [::ffff:127.0.0.1]:50515 (127.0.0.1:50515))) (One or more errors occurred. (Unexpected EOF trying to read request header))\n---- System.AggregateException : One or more errors occurred. (Operation timed out [::ffff:127.0.0.1]:50515 (127.0.0.1:50515))\n-------- System.Net.WebException : Operation timed out [::ffff:127.0.0.1]:50515 (127.0.0.1:50515)\n------------ System.Net.Http.HttpRequestException : Operation timed out [::ffff:127.0.0.1]:50515 (127.0.0.1:50515)\n---------------- System.Net.Internals.SocketExceptionFactory+ExtendedSocketException : Operation timed out [::ffff:127.0.0.1]:50515\n---- System.AggregateException : One or more errors occurred. (Unexpected EOF trying to read request header)\n-------- System.IO.IOException : Unexpected EOF trying to read request header

Test collection for System.Net.Tests.HttpWebRequestTest_Async
System.Net.Tests.HttpWebRequestTest_Async.GetResponseAsync_UseDefaultCredentials_ExpectSuccess(useSsl: True)
    System.AggregateException : One or more errors occurred. (One or more errors occurred. (The operation has timed out.)) (One or more errors occurred. (Unexpected EOF trying to read request header))\n---- System.AggregateException : One or more errors occurred. (The operation has timed out.)\n-------- System.Net.WebException : The operation has timed out.\n---- System.AggregateException : One or more errors occurred. (Unexpected EOF trying to read request header)\n-------- System.IO.IOException : Unexpected EOF trying to read request header
System.Net.Tests.HttpWebRequestTest_Async.GetResponseAsync_UseDefaultCredentials_ExpectSuccess(useSsl: False)
    System.AggregateException : One or more errors occurred. (One or more errors occurred. (Operation timed out (127.0.0.1:50645))) (One or more errors occurred. (Unexpected EOF trying to read request header))\n---- System.AggregateException : One or more errors occurred. (Operation timed out (127.0.0.1:50645))\n-------- System.Net.WebException : Operation timed out (127.0.0.1:50645)\n------------ System.Net.Http.HttpRequestException : Operation timed out (127.0.0.1:50645)\n---------------- System.Net.Sockets.SocketException : Operation timed out\n---- System.AggregateException : One or more errors occurred. (Unexpected EOF trying to read request header)\n-------- System.IO.IOException : Unexpected EOF trying to read request header
System.Net.Tests.HttpWebRequestTest_Async.HaveResponse_GetResponseAsync_ExpectTrue(useSsl: True)
    System.AggregateException : One or more errors occurred. (One or more errors occurred. (The operation has timed out.)) (One or more errors occurred. (Unexpected EOF trying to read request header))\n---- System.AggregateException : One or more errors occurred. (The operation has timed out.)\n-------- System.Net.WebException : The operation has timed out.\n---- System.AggregateException : One or more errors occurred. (Unexpected EOF trying to read request header)\n-------- System.IO.IOException : Unexpected EOF trying to read request header
System.Net.Tests.HttpWebRequestTest_Async.HaveResponse_GetResponseAsync_ExpectTrue(useSsl: False)
    System.AggregateException : One or more errors occurred. (One or more errors occurred. (Operation timed out (127.0.0.1:50739))) (One or more errors occurred. (Unexpected EOF trying to read request header))\n---- System.AggregateException : One or more errors occurred. (Operation timed out (127.0.0.1:50739))\n-------- System.Net.WebException : Operation timed out (127.0.0.1:50739)\n------------ System.Net.Http.HttpRequestException : Operation timed out (127.0.0.1:50739)\n---------------- System.Net.Sockets.SocketException : Operation timed out\n---- System.AggregateException : One or more errors occurred. (Unexpected EOF trying to read request header)\n-------- System.IO.IOException : Unexpected EOF trying to read request header
```

I'm not sure where tvOS and iOS are differing since the iOS tests pass.
From the stack trace, it looks like 
```
at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in System.Net.Requests.Tests.dll:token 0x6000065+0x247
   at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass15_0.<<CreateClientAndServerAsync>b__0>d.MoveNext() in System.Net.Requests.Tests.dll:token 0x60005e7+0xc4
--- End of stack trace from previous location ---
   at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in System.Net.Requests.Tests.dll:token 0x6000079+0x104
   at System.Net.Tests.HttpWebRequestTest.HaveResponse_GetResponseAsync_ExpectTrue(Boolean useSsl) in System.Net.Requests.Tests.dll:token 0x6000146+0xb4
--- End of stack trace from previous location ---
----- Inner Stack Trace #1 (System.AggregateException) -----
----- Inner Stack Trace -----
   at System.Net.HttpWebRequest.GetResponse() in System.Net.Requests.dll:token 0x6000124+0x2c
   at System.Net.Tests.HttpWebRequestTest_Sync.<>c__DisplayClass1_0.<GetResponseAsync>b__0() in System.Net.Requests.Tests.dll:token 0x60002c1+0x0
   at System.Threading.Tasks.Task`1[[System.Net.WebResponse, System.Net.Requests, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].InnerInvoke() in System.Private.CoreLib.dll:token 0x60033a3+0x25
   at System.Threading.Tasks.Task.<>c.<.cctor>b__271_0(Object obj) in System.Private.CoreLib.dll:token 0x6003544+0x16
   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in System.Private.CoreLib.dll:token 0x6003002+0x36
--- End of stack trace from previous location ---
   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in System.Private.CoreLib.dll:token 0x6003002+0x79
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in System.Private.CoreLib.dll:token 0x600349e+0xd3
--- End of stack trace from previous location ---
   at System.Net.Tests.HttpWebRequestTest.<HaveResponse_GetResponseAsync_ExpectTrue>b__118_0(Uri uri) in System.Net.Requests.Tests.dll:token 0x6000170+0xbe
   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in System.Net.Requests.Tests.dll:token 0x6000065+0x13e
----- Inner Stack Trace #2 (System.AggregateException) -----
----- Inner Stack Trace -----
   at System.Net.Test.Common.LoopbackServer.Connection.ReadRequestHeaderBytesAsync() in System.Net.Requests.Tests.dll:token 0x600026c+0xf0
   at System.Net.Test.Common.LoopbackServer.Connection.ReadRequestDataAsync(Boolean readBody) in System.Net.Requests.Tests.dll:token 0x6000274+0x8c
   at System.Net.Test.Common.LoopbackServer.Connection.HandleRequestAsync(HttpStatusCode statusCode, IList`1 headers, String content) in System.Net.Requests.Tests.dll:token 0x600027d+0x82
   at System.Net.Test.Common.LoopbackServer.HandleRequestAsync(HttpStatusCode statusCode, IList`1 headers, String content) in System.Net.Requests.Tests.dll:token 0x600008c+0x125
   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in System.Net.Requests.Tests.dll:token 0x6000065+0x90
```

So `ReadLineBytesAsync` is called by `ReadRequestHeaderBytesAsync` and there must be something going wrong with reading the bytes"
"Tagging subscribers to this area: @github/area-system-io
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

- Use F_SETLK64 for fcntl to fix an issue where 32bit arm Android apps would get the wrong flag
- Add numerical magic numbers for missing file systems to Interop.UnixFileSystemTypes so they are correctly recognized
- Make ping test a bit more forgiving if the process returns a few milliseconds _before_ the timeout
- Disable System.IO.Net5Compat.Tests.csproj on Helix for non-Windows platforms like intended, we were still building it since we pass `/p:ArchiveTests=true` on CI

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>akoeplinger</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.IO`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Note for reviewers: GitHub diff view seems to suggest the indentation for this is ""wrong"" but the actual changes look correct when not looking at the diff view."
"> Actually, forget my idea above; [I implemented it](https://github.com/dotnet/runtime/pull/68234), but method overload resolution means it _likely_ will call the wrong overload. Examples in the PR.

Thanks for trying that out, @github. The idea was intriguing."
This condition seems wrong. Wouldn't this project fail to build using `dotnet build` even if native assets are already built?
"I picked ulong because it was easier to make robust:

* Ints don’t implicitly convert to or from it (unlike long), so you get compile time checking that we’re consistent everywhere in .NET
* The JS-side code for reading uint64 is simpler and harder to get wrong than if it was reading int64, as there’s no sign bit to account for."
"Just realised this is now wrong since we’re no longer using XMLHttpRequest. 

I think we could just let it fail in this scenario anyway now. "
"The skip is still needed because selenium isn't working yet, so the reason is wrong, but the test still doesn't work yet"
"@github we hit this warning in the `RestoreTestProjects` targets in src/Components/WebAssembly/Sdk/integrationtests/Microsoft.NET.Sdk.BlazorWebAssembly.IntegrationTests.csproj and src/Razor/Microsoft.NET.Sdk.Razor/integrationtests/Microsoft.NET.Sdk.Razor.IntegrationTests.csproj though those targets execute a while after the src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj has laid out the newly-built shared framework in this directory. Is the `EXISTS` check using a cache of the directory content from earlier in the build❔ If yes, what's the workaround (I prefer to avoid separating those test projects into another build step)❔ If no, what am I doing wrong❔"
This was way wrong before and we likely don't really need `node` in `$env:Path` on Windows
">// (6,23): error CS0017: Program has more than one entry point defined. Compile with /main to specify the type that contains the entry point. [](start = 20, length = 141)

This doesn't look like a backward compatible behavior. In 2.0.0.61501, I get a warning and the void main is used as an entry point:
```
(9,23): warning CS0028: 'A.Main(string[])' has the wrong signature to be an entry point
```  #Closed"
"Should I remove the same check from https://github.com/dotnet/aspnetcore/pull/39358?

The reason I have it is that not using TLS and then sending the wrong HTTP version is a user error.
Using TLS, negotiating an HTTP version, and then sending the wrong HTTP version seems more like a library user."
"Is this class really needed? What would go wrong if we set the `GZipSteam` directly to `Request.Body`?
```
var decompressionStream = decompressionProvider.CreateStream(originalBody);
context.Request.Body = decompressionStream;
```

In case there are something that should be done in a new stream, could it at least use inheritance instead of compositions for the known encodings? The providers returns the custom type which implement a marker interface `IDontNeedWrapper` (Very good name, I know!! 😅) and the middleware only wrap the stream if it needs a wrapper.

```
internal sealed class GZipRequestDecompressionBody : GZipStream, IDontNeedWrapper {}
internal sealed class DeflateRequestDecompressionBody : DeflateStream , IDontNeedWrapper {}
internal sealed class BrotliRequestDecompressionBody : BrotliStream, IDontNeedWrapper {}
```

In this case we save one allocation per request for the known encodings."
"That would be like returning by value a by value parameter. Nothing is wrong with that on the callee side.

---
In reply to: [141169557](https://github.com/dotnet/roslyn/pull/22303#discussion_r141169557) [](ancestors = 141169557,141168290)"
"Or is the assumption here that somebody in different legal contexts (contractor who uses multiple machines) needs different options? Not saying this is wrong, just want to make sure this was intentional vs. something that fell out by copypasta."
"Yep, if you want to take a quick look at https://github.com/dotnet/aspnetcore/pull/27534/commits/5de1fad0d7ecba7d88617356954cb96ccae2b1d4 and make sure there isn't anything super wrong with it from a build perspective, that would be nice :)"
My assumption about the precedence of ExcludeAssets being transitive was wrong.  Since the dependencies of SSP are transitive it lets the non-excluded references win over those marked with exclude.  To workaround we need to add all of them.
"> Is sending back HTTP/1.1 on a HTTP/2 connection be legal? Sure, the client is wrong, but do two wrongs make a right?

But it's not an HTTP/2 connection, is it? This check says the client is trying to do HTTP/1.x. The server hoped for HTTP/2 but didn't get it. The goal is to respond in a way the client will understand."
"@github something looks wrong here. Both of our main Linux builds produce files named e.g. aspnetcore-targeting-pack-7.0.0-preview.3.22151.16.rpm but we use platform-specific names for the Windows targeting packs. What is the intention here -- aspnetcore-targeting-pack-7.0.0-preview.3.22151.16.rpm or aspnetcore-targeting-pack-7.0.0-preview.3.22151.16-arm64.rpm❔

We'll need to make a change either way -- stop uploading the extra targeting packs (and remove duplicates from the asset manifests) or change the names."
The `else` here looks wrong. `hasErrors` should always be set to `true`. The `if (disposeMethod is null)` should be enough to ensure we're in an error case.
`Empty` has the wrong comparer. The API allows for `null` and uses a cached singleton.
Please remove this spec reference to `InvalidOperationException` for wrong branch kinds. We should return null in that case.
"❕ This is a collection initializer, not an object initializer (test is correct, but the method name here is wrong)"
"A NuGet package can come with a variety of assets inside it. For this line there are two types that are important: runtime and compile time. The compile time assets are the libraries that we compile against (ref dlls for example). The runtime assets are items the NuPkg believes are necessary at runtime.

For MSBuild we are hosted inside their process. We never start up MSBuild on our own and create say a workspace. This bulid task is always loaded in their runtime. Hence their runtime assets aren't useful to us (and can possibly confuse our analysis). Hence we exclude them. 

Note: this is how we handle MSBuild assets in other parts of the Roslyn repository. The build task was always ""wrong-ish"" here. "
"Consider adding the following:

```
#else
#error unsupported configuration
#endif
```

This helps guard against future changes to the target frameworks that roslyn uses. Consider that in the near future netcoreapp3.0 will be a valid target framework. With this proposed change we would get a compiler error if we forgot to update this file. Without the test would just silently stop running. 

I've been trying to take this approach in all places where we have `#if` as I've gotten this wrong several times."
"👍   Hopefully, all the construction/shuffling of the raw information is clear here for you :)   I try to keep a mental model of all the nodes and what's going on with them, which helps make certain things stand out as looking ""wrong"".  i.e. we had the 'arrow' nodes appearing in two places.  on the 'arrow' local itself, but also as leading skipped syntax for the exclamation.  This violated the strict invariants of the tree.

Thanks!"
"I'm not crazy about the `compMayUseIsa` - again, it fails to communicate that it conveys a contract, i.e. that when it returns false the code must execute correctly even on a target where it would have returned true.

@github - in your discussion above you say:
> `compUsesIsa` should not be used for this case...

I presume you mean `compUsesOrDoesNotUseIsa`.

The issue I have with `compUsesOrDoesNotUseIsa` is that it seems to be asking if we're using the isa or not - as opposed to stating a contract as part of the query. What we really want it to say is `tellMeIfICanUseThisIsaAndIfNotDisableIt` and `tellMeIfICanUseThisIsaButIfNotAllowIt` but of course that's just a bit verbose ;-)

> Could we just have enum compSupports(Isa) and have it return Unsupported, Supported, or SupportedWithCheck?

I don't think that addresses the requirements that @github has expressed - i.e. that the JIT needs to communicate which kind of support it wants, as different codegen scenarios require different answers."
"As written though it unconditionally reports the writes even though we conditionally do the bin place. That seems wrong. "
"The same exception still happens if you get something wrong, it's just if you get multiple things wrong you may not get the same error you used to. I think it's probably below the threshold of what we need to document, i.e. no, but I'm open to other opinions... @github, what do you think?"
"> Have all APIs been appropriately annotated?

I believe so.  The ctor was wrong because adding the message fallback was last minute, after remembering how frustrating it is when exceptions don't do the ""allow null in a more complex overload to represent the default from a simpler overload"" thing for messages."
">// (12,53): error CS0546: 'Derived2.P.set': cannot override because 'Derived.P' does not have an overridable set accessor [](start = 16, length = 121)

I think this diagnostics is confusing because it implies that either there is no setter, or it is not virtual/overridable. I think this is because we are detecting this problem in the ""wrong"" place. #Closed"
"This seems... wrong.  I see that we ""try"" to flush today from the finalizer, but we also don't block waiting for that flush to complete, and the thing we're wrapping could have already been disposed of."
">CallerArgumentExpressionParameterIndex [](http://example.com/codeflow?start=38&length=38)

This looks fragile and probably incorrect, at least for delegate EndInvoke method. This implementation assumes that the target parameter is still going to be present and will remain at the same position, which probably can be wrong. The more robust approach is to reinterpret the attribute in the new signature. But before we do this, let's create some tests and figure out if this code path is even reachable in interesting scenarios. Perhaps simply returningh -1 is going to be good enough. #Closed"
"I corrected this, it was wrong to move the `OpenRead` call within the try / catch. Addressed in f3d2c4e"
"The reverse of `DangerousRetain` is not `Dispose`, it's `DangerousRelease`.

This change effectively leaks all native NSData objects.

In any case this change looks wrong, the managed NSData instance should retain the native object, which means this fix is just hiding the real other problem."
"Span and Memory aren't abstractions that you implement, that's why its different. I don't like the fact that contracts are different across TFMs, that's what feels wrong. Implementation, sure, not the contract"
"```suggestion
        If the wrong value is passed a validation error with be thrown.
```"
"wrong part of the selector used, `tintConfigurationForItem` should have been used
-> `GetTintConfiguration` 
"
"Does `%(ResolvedRuntimePack.PackageDirectory)` work here? IIUC, batching shouldn't work here at all. And AFAIK, `@(ResolvedRuntimePack)` is set by `ResolveFrameworkReferences`. But I could be wrong. Does it work for you?"
What's wrong with keeping `nameof` as the argument?
Spacing wrong here?
"This is a lot of boiler plate (88 lines in all, over 4 files) for type safety, and I see a potential problem:

- Since EventFoundEventArgs derives from EventNotFoundEventArgs, you could pretty easily fire the event with the wrong Args type and the type system won't complain.

Since there aren't any consumers (test or code), I'm not sure how much overkill this is vs a Found and NotFound event with a type string/enum."
"You are right, I was tempted by wrong change in test. "
"Actually it looks like all your indentation in this file is spaces, and not tabs (wrong editor configuration maybe?)
"
"Actually, this is certainly wrong.  because it means that if the edit to the tree is such that the synthesized `!!` gets moved somewhere else (e.g. to now be a suffix suppression operator), that code will break because it won't see this as two exclamation tokens, but a single token as well.  These merged tokens can't be returned from the incremental lexer as they do not correspond to what the lexer would have produced originally."
@github Is it wrong? Could you please review it? Thank you.
We should add `InferenceFlags.None` so that this ternary can be made typesafe (as-is it'd be possible to pass the wrong kind of enum to `createInferenceContext`)
"Right -- I meant to turn this into a question.

Currently, for delay sign, signing without a key is a _warning_. That seems crazy. I would like to make this an error for public sign. I'm not sure how this could possibly be a warning for public sign, but I wanted to confirm that no one has any objection.
"
"This comment is wrong for VB
"
"Given that the value for ESNext has _already_ been volatile, I see no reason not to make this one last churn and then have all these values be _not_ volatile. But I would wait for another reviewer just in case I’m not thinking of some crazy edge case.

(CI will tell you this, but does this affect the compiler API baselines?)"
"I _really_ dislike this regression in the API design of the internal representation of predicates. I would much rather we just added a `modifiers` or `isAssert` field to the existing two kinds (it seems like we're always looking for some pair of two of these kinds as-is!), if the new kinds of predicates going to be treated so similarly. I very much dislike the ""always `undefined`"" on some variant properties and constructor reuse - if for perf reasons, unifying the shapes is a good idea, then i'd be OK with using a constant shape in the constructor functions, but I'd like to hide it from the typesystem behind a cast, such that predicates of the wrong kind do not have the wrong members when looking at completions or exhaustiveness. Plus, it's worth remembering that ""`undefined` or a type"" is a different shape than ""always a type"", so in certain cases, the jitter _may_ perform worse on this pattern, since the shape's members have polymorphic types (which is why I hope the change was made backed up by data).

I _really_ don't wanna go over similar stuff again, but this is very similar to [a discussion](https://github.com/microsoft/TypeScript/pull/5906#discussion_r46604183) we had back in 2015 when I first added `this` predicates, and I _still_ think the extra explicitness from _distinct_ constructors and distinct type shapes is worthwhile in preventing bugs in our own code (as written, this function doesn't prevent you from passing a `parameterName` to a `ThisPredicate`), _especially_ as the space of possible configurations grows. None of these predicates have similar handling in anything other than storage (despite sharing syntax), as evidenced by the liberal sprinkling of ternaries _within_ calls throughout the handling code now."
"~~That's the internal factory.~~ Sorry, wrong place. This is indeed a public factory. I'll remove this change.
"
"> and maybe some SIMD base types

Its most SIMD base types in practice. The SIMD base type should always be the exact type required for the underlying instruction. That includes correctly tracking the sign and size. This is important because there are many SIMD instructions that differ based on size/type and will do the wrong thing otherwise.

It was definitely a bug that the `gtType` wasn't the right thing, however."
"Isn't this just monkey-patching around the actual issue? According to the type definition this property should not be falsy, and `strictNullChecks` are enabled. That means something else is going wrong before already, and this check is just hiding the actual bug."
"That's not a bad idea, but I think if I do that, it'll end up not providing any info as to what part of the access went wrong, versus currently, it's asserting.

I'm not sure if it's a pattern to just try/catch/return undefined in this codebase, though, as that would be sort of the best of both worlds."
"Given the fact that:
- the this is the expected behavior of the traversal and CodeGen
- I haven't found an assembly instruction that could lead us to wrong debug info during just that line.

My proposal is to extend the VariableLiveRange in the case when a variable is being born in the same location it was dying the assembly instruction before."
"Ok somebody else needs to look at this. Remaining failed test cases:

System.IO.Tests.DirectoryInfo_MoveTo.MoveDirectory_NoOpWhenMovingDirectoryWithUpperCaseToOtherDirectoryWithLowerCase
 System.IO.IOException : Cannot create '/var/folders/j1/76_p663903g5g2rg7ckqbv440000gy/T/DirectoryInfo_MoveTo_xz4to5q4.r0u/bar/foo' because a file or directory with the same name already exists.
   at System.IO.FileSystem.MoveDirectory(String sourceFullPath, String destFullPath) in /_/src/libraries/System.IO.FileSystem/src/System/IO/FileSystem.Unix.cs:line 317
   at System.IO.Directory.Move(String sourceDirName, String destDirName) in /_/src/libraries/System.IO.FileSystem/src/System/IO/Directory.cs:line 300
   at System.IO.Tests.Directory_Move.MoveDirectory_NoOpWhenMovingDirectoryWithUpperCaseToOtherDirectoryWithLowerCase() in /_/src/libraries/System.IO.FileSystem/tests/Directory/Move.cs:line 341

This one is testing for
    Directory.Create(""foo"");
    Directory.Create(""bar/FOO"");
    Directory.Move(""foo"", ""bar/foo"");

actually succeeding and clobbering bar/FOO. I'm convinced my patch behaves correctly and the test is just wrong, because the documentation says it won't clobber the directory.

The remaining two failing tests are:

System.IO.Tests.File_Move_Tests.Unix_File_Move_To_Same_Director
 Renamed event did not occur as expected\nExpected: True\nActual:   False
   at System.IO.Tests.FileSystemWatcherTest.ExecuteAndVerifyEvents(FileSystemWatcher watcher, WatcherChangeTypes expectedEvents, Action action, Boolean assertExpected, String[] expectedPaths, Int32 timeout) in /_/src/libraries/System.IO.FileSystem.Watcher/tests/Utility/FileSystemWatcherTest.cs:line 339
   at System.IO.Tests.FileSystemWatcherTest.ExpectEvent(FileSystemWatcher watcher, WatcherChangeTypes expectedEvents, Action action, Action cleanup, String[] expectedPaths, Int32 attempts, Int32 timeout) in /_/src/libraries/System.IO.FileSystem.Watcher/tests/Utility/FileSystemWatcherTest.cs:line 227
   at System.IO.Tests.FileSystemWatcherTest.ExpectEvent(FileSystemWatcher watcher, WatcherChangeTypes expectedEvents, Action action, Action cleanup, String expectedPath, Int32 attempts, Int32 timeout) in /_/src/libraries/System.IO.FileSystem.Watcher/tests/Utility/FileSystemWatcherTest.cs:line 197
   at System.IO.Tests.File_Move_Tests.FileMove_SameDirectory(WatcherChangeTypes eventType) in /_/src/libraries/System.IO.FileSystem.Watcher/tests/FileSystemWatcher.File.Move.cs:line 142
   at System.IO.Tests.File_Move_Tests.Unix_File_Move_To_Same_Directory() in /_/src/libraries/System.IO.FileSystem.Watcher/tests/FileSystemWatcher.File.Move.cs:line 24

System.IO.Tests.File_Move_Tests.Unix_File_Move_With_Set_NotifyFilte
 Renamed event did not occur as expected\nExpected: True\nActual:   False
   at System.IO.Tests.FileSystemWatcherTest.ExecuteAndVerifyEvents(FileSystemWatcher watcher, WatcherChangeTypes expectedEvents, Action action, Boolean assertExpected, String[] expectedPaths, Int32 timeout) in /_/src/libraries/System.IO.FileSystem.Watcher/tests/Utility/FileSystemWatcherTest.cs:line 339
   at System.IO.Tests.FileSystemWatcherTest.ExpectEvent(FileSystemWatcher watcher, WatcherChangeTypes expectedEvents, Action action, Action cleanup, String[] expectedPaths, Int32 attempts, Int32 timeout) in /_/src/libraries/System.IO.FileSystem.Watcher/tests/Utility/FileSystemWatcherTest.cs:line 227
   at System.IO.Tests.FileSystemWatcherTest.ExpectEvent(FileSystemWatcher watcher, WatcherChangeTypes expectedEvents, Action action, Action cleanup, String expectedPath, Int32 attempts, Int32 timeout) in /_/src/libraries/System.IO.FileSystem.Watcher/tests/Utility/FileSystemWatcherTest.cs:line 197
   at System.IO.Tests.File_Move_Tests.FileMove_WithNotifyFilter(WatcherChangeTypes eventType) in /_/src/libraries/System.IO.FileSystem.Watcher/tests/FileSystemWatcher.File.Move.cs:line 311
   at System.IO.Tests.File_Move_Tests.Unix_File_Move_With_Set_NotifyFilter() in /_/src/libraries/System.IO.FileSystem.Watcher/tests/FileSystemWatcher.File.Move.cs:line 120

which check if File.Move() actually does a rename operation. But you can't do `rename()` and have race-free clobber avoidance here. The OS for which this is failing is Mac OSX. The only race-free solution involves `link()` and `unlink()`."
"What's so wrong about `0`? I just don't get it. `StatementFlags.NotStatement` might actually be non-zero and I would have to navigate to the definition to find out. As it is now it is both shorter and clearer!
"
"> Also, to my knowledge, most of pipelines and more generally Kestrel isn't clearing for its pooling, its slab memory blocks, etc. @github can correct me if I'm wrong.

That's right. It's more than even pipelines, most of ASP.NET isn't clearing the memory on return in general. That goes for pipelines and other uses of the array pool."
"This change seems.... wrong. I don't see anything which would intentionally prompt the change.
"
"Great news! I'm going to continue my attempt to benchmark this on Linux to see if I may have been measuring Windows wrong, or if there is something to follow-up on."
"I see this has been merged, but has it gone out in a release? 
I'm getting a similar error on sentry within the Monaco packages.

However, I have not been able to repro. The error also doesn't tell me much to understand what's going wrong.


<img width=""1094"" alt=""Screen Shot 2020-02-21 at 9 53 57 AM"" src=""https://user-images.githubusercontent.com/58931172/75005388-16a29900-5490-11ea-8270-eac57b80d65c.png"">
"
"First, adding new public members must be discussed before done. See [api-review-process](https://github.com/dotnet/runtime/blob/master/docs/project/api-review-process.md).

Then, it seems that you have very wrong sense about how dotnet works:

> 1. Inefficient; tries to convert the arguments to another datatype and go through their constructors which also will cause longer computation times and

That happens at **compile** time, not **run** time. Once compiled, the number is stored as is, which constructor to be used has been determined, and the constructor is just copying bytes.

However, parsing from string happens at runtime. It will never be efficient.

> You already have all of the code for the `Parse()` method so why not just use it? Just copy + paste, anyone can do this!

The attributes of `Parse` is far different from constructors:
- Constructors guarantee success. Parse may fail because the string is not a valid number.
- Constructors are **fast** because they have a pre-determined size, and just copy bytes. **Parse is slow**.
- Constructing from primitive numbers are deterministic. Converting from string can be affected by number styles."
"> could you please clarify for me why RBM_NON_BYTE_REGS does not include ESP, EBP? It has only one use but could it be wrong

I believe it's because we don't use `ESP` in the register allocator, and perhaps because `EBP` is sometimes restricted. IMO we should probably just eliminate `RBM_NON_BYTE_REGS` but I don't think it's critical."
"Merging this old PR that I keep forgetting about. The change is effectively just cleaning up some wrong logic that was never hit in the first place. (I had added nomerge because I was investigating some assert behavior, but the second commit fixed the issue I was hitting per https://github.com/dotnet/runtime/pull/42464#issuecomment-696420934)."
"Whell, the reason why I cared about being a possible keyword so much is because according to the comment, the parser treats single identifier as a incomplete member rather than an expression with identifier name syntax only because of keyword completion:
https://github.com/dotnet/roslyn/blob/3d735b9a32d37934269eefe209dcc0fec3e46020/src/Compilers/CSharp/Portable/Parser/LanguageParser.cs#L2659-L2665
I tried to remove this branch of switch entirely and it didn't break any completions at all, so I guess, this is the right thing to do here. However, it introduced more than 10 failing tests, most of them are just wrong code exchanging 1 set of errors to another, but there were several I consider important, like the skipping mechanics, where parser treats trees `foo using goo` and `bar using goo` identical. I don't feel like I am able to solve this conflicts, so closing this PR. @github If you are interested in taking this one, I fully support reopening it. I didn't need to get into the enormously complicated parsing logic in the first place..."
"I took a look at the meeting notes #45504, and I did note this bit:

> - Favorite markup/query language examples =
>   - ""I want to write a full HTML parser and provide the same checking that JSX gives""
>   - ""I want to write a full GraphQL parser and provide exact API shapes back""
>   - This is a moderate :-1: - we think we'd be encouraging people to use the wrong tools to solve these problems

I am curious about what the right tool is then? There doesn't really seem to be a great alternative to doing this. In particular, the problem is that of run-time equivalence; the library is intended to be usable both with plain JS and TS. JSX cannot be used without compiling, and furthermore the use-case of safe HTML templates was among the original design considerations that TC39 looked at [when adding this feature to the spec](https://web.archive.org/web/20120124053946/http://wiki.ecmascript.org/doku.php?id=harmony:quasis). Tagged template literals are a very natural API for native JS libraries (see also: [graphql-tag](https://www.npmjs.com/package/graphql-tag), [html tag](https://github.com/zspecza/common-tags#html)).

The approach taken by Svelte/Vue (custom language servers) or tsserver plugins doesn't really scale; writing transformers to turn syntax into JSX seems like a significant amount of work, especially for smaller projects. This approach also doesn't even allow for correctness checks at compile-time."
"I agree it seems like dual-mode should work fine here, and these environments are doing something wrong."
"> @github you are right, but the places that you have pointed are not on the hot path that I am optimizing. So even if I optimize them it won't have any effects

It should affect the **AddThenRemove** and **SetOverride** benchmark results you've mentioned in the description... BUT... I'm saying this without having actually seen the benchmark code and without having tested the proposed changes :p

If you can guarantee that I can have the dotnet runtime built on my Windows box in 30 minutes, I definitely want to try to prove you wrong (or admit my defeat)."
"I feel this is move wrong direction. This starts new process and add dependency on finding the right executable. I think that was OK for the test where we control the environment and overhead does not matter.  Further more, it can report group the process actually does not have. I'm wondering if that can cause issues does the road. "
"Tagging subscribers to this area: @github, @github, @github, @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

- Handle RSA in PKCS12 reader
- Wrong key width in RSA
- Pull in ECDiffieHellman derive functionality

cc @github @github @github @github

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>elinor-fung</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Security`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"I agree that the ownsHandle logic looks wrong, at least based on convention where an ownsHandle=true usually means 'this new object owns the underlying handle'."
"This might be the problem.

Installer specifies `OuputRid` only, which makes the `PackageRid` value wrong (which is derived from `RuntimeOS`):
https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/eng/pipelines/installer/jobs/base-job.yml#L216-L219

Libraries only specifies `RuntimeOS` which makes `PackageRid` correct but `OuputRid` wrong (due to `PortableBuild` defaulting to true, whatever that means)
https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/eng/pipelines/libraries/base-job.yml#L67

Some jobs specify both:
https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/eng/pipelines/common/global-build-job.yml#L68

Any recommendations for how to best handle this @github @github?  We should untangle this by reducing concepts and documenting."
"Looks like there's an ""Apple is different"" case that I missed: In TwoCerts_CrossedKeys I believe the Keychain APIs won't bind the wrong private key to the cert, so we get back a cert where HasPrivateKey is false.  Making sure the fix works on a mac before pushing it."
@github I don't understand what is wrong here?
"> @github Could you please help me to figure out what I implemented wrong?

maxss and vmaxss are different instructions basically (VEX encoding), only vmaxss can be used with R_R_R, but it's not available without AVX"
"The version of dotnet is wrong, we need a new channel in maestro."
"Awesome!  This looks like a super useful feature - basically where in the past we'd use debug rainbows or just set background colors of things to figure out how they're measuring/sizing... Super excited for this!

One question I have around this is how much we expect this API to potentially be interfered with... By that I mean, anyone could inadvertently access the API and basically mess up what the LVT has added/removed and cause it to appear that the LVT is not working correctly.

I'm not sure we want to make this a private API because that feels wrong in the spirit of OSS, however maybe we can add some safeguards.  We could do something like make an internal `IHighlightLayer` property which supercedes the publicly visible one to make sure there's no collisions...

A couple questions:
 - Should the color of the highlight be customizable?
 - What does this look like in high contrast scenarios, is this accessibility friendly?

"
Yes but you're already in crazy territory.
"`.add` was wrong, good catch. I now replace the header. When the client stops the config will be overwritten when it starts again."
why is the casing here crazy?
"Note: all the GetHashCode functionality was removed in: https://github.com/dotnet/roslyn/pull/14330

However, to answer your question:

SymbolKeys are just strings.  Therefore, if we're computing anything about them, we need to stream over all the data they have.  If we don't read the data, then the stream-pointer will be in teh wrong place, and that will mean we can't properly read the rest of the data we need.  
"
"This looks wrong - the action says that it only returns xml:

https://github.com/dotnet/aspnetcore/blob/8b30d862de6c9146f466061d51aa3f1414ee2337/src/Mvc/test/WebSites/ApiExplorerWebSite/Controllers/ApiExplorerResponseTypeWithAttributeController.cs#L66-L69

We can't change this. "
"It looks like we are losing information about parameter reference, this feels wrong, please open an issue to follow up."
"Seems like same issue as above, invalid expression child of a variable initializer has wrong syntax.

---
In reply to: [143050459](https://github.com/dotnet/roslyn/pull/22546#discussion_r143050459) [](ancestors = 143050459)"
"I didn't understand this change. 
~~Was there an overload of `AppendData` that takes an `IEnumerable`? I can't find it on MSDN.~~
If yes, what was wrong with that method?

Update: I found the method (we have extensions in IncrementalHashExtensions). That extension still seems good/equivalent. #Closed"
"The fact that we need a table to help interpretation is a strong indication that it's simpler to understand this method's contract from two cases (AND vs. OR), rather four possible cases (stopSense/stopValue permutations). 
That two of those permutations are illegal is another indication that one flag would be simpler, so it cannot be called with wrong arguments by accident.

---
In reply to: [162214164](https://github.com/dotnet/roslyn/pull/24263#discussion_r162214164) [](ancestors = 162214164,162208062)"
"this is an example of why this is wrong.  say you have ""foo.Bar(of X)(y, z, w)"".  This code will not work because the Expression is not a GenericNameSyntax, it's a MemberAccessExpressionSyntax.  But you only encoded the full decomposition in the C# side of things.

Instead, the decomposition should move into AbstractAddParameterXXX "
"Actually, should this be TaskScheduler.Current? I don't presume we're using this much in the /build case, but Default _does_ mean we're always picking the thread pool. Current would mean it might be right (and might still be wrong, but whatever.)"
It's simpler (to me) because it means i don't even have to think about what might go wrong if i get a duplicate.  it just can't happen.  :) #Closed
"> Gah! wrong branch here.

Looks like it's targeting 'release/3.1'. What was wrong❔"
"Thanks for your PR, @github.
The below errors are most probably unrelated to your change, so please ignore the following comment.

@github/aspnet-blazor-eng I looked at the failures in the `aspnetcore-components-e2e` job and I see that all the tests have failed to start JVM with the following error:

```
Starting test execution, please wait...
A total of 1 test files matched the specified pattern.
[xUnit.net 00:00:02.18] Microsoft.AspNetCore.Components.E2ETests: 
[xUnit.net 00:00:02.18] Microsoft.AspNetCore.Components.E2ETests: > microsoft.aspnetcore.components.e2etest@0.0.1 selenium-standalone
[xUnit.net 00:00:02.18] Microsoft.AspNetCore.Components.E2ETests: > selenium-standalone ""start"" ""--config"" ""/home/vsts/work/1/s/src/Shared/E2ETesting/selenium-config.json"" ""--javaArgs=-Dwebdriver.chrome.driver=/usr/local/share/chrome_driver/chromedriver"" ""--"" ""--host"" ""localhost"" ""--port"" ""39711""
[xUnit.net 00:00:02.18] Microsoft.AspNetCore.Components.E2ETests: 
[xUnit.net 00:00:02.18] Microsoft.AspNetCore.Components.E2ETests: Unrecognized option: -
[xUnit.net 00:00:02.18] Microsoft.AspNetCore.Components.E2ETests: Error: Could not create the Java Virtual Machine.
[xUnit.net 00:00:02.18] Microsoft.AspNetCore.Components.E2ETests: Error: A fatal exception has occurred. Program will exit.
[xUnit.net 00:00:02.27] Microsoft.AspNetCore.Components.E2ETests: /home/vsts/work/1/s/src/Components/test/E2ETest/node_modules/selenium-standalone/lib/check-started.js:44
[xUnit.net 00:00:02.27] Microsoft.AspNetCore.Components.E2ETests:       throw new Error(
[xUnit.net 00:00:02.27] Microsoft.AspNetCore.Components.E2ETests:             ^
[xUnit.net 00:00:02.27] Microsoft.AspNetCore.Components.E2ETests: 
[xUnit.net 00:00:02.27] Microsoft.AspNetCore.Components.E2ETests: Error: Selenium exited before it could start with code 1
```

Feels like we may be calling the `selenium-standalone` with a wrong argument. I'm not sure what it should look like, but maybe `-` character the `javaArgs` value is passed incorrectly:
> `--javaArgs=`**-**`Dwebdriver.chrome.driver=/usr/local/share/chrome_driver/chromedriver`

@github do you know?"
"line 1221 is nested within the greater Accessibility check statement, and is only called if all of the SequenceEquals have returned false / the public keys are wrong. There is a return false at line 1223, outside of the accessibility check. Are you referring to different attributes?"
What validation do we get when these entries are wrong? For instance the net46 folder will change very soon due to Dev16 changes. Will the build break when there is no longer output to the net46 folder (hoping the answer is yes)?
"This seems wrong, as explained in detail by [this comment](http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/Diagnostics/DiagnosticAnalyzerCategory.cs,17) added recently by @github. You want `SemanticSpanAnalysis` here."
"If we don't visit them, this has an unassigned variable error:

```csharp
int[M(out var x)] y;
var _ = X;
```

We also had a lot of other errors that were slightly wrong as a result."
"these tests are basically not readable due to having to go manually map from this to the actual code to determine what they mean.  The test is no longer declarative with the inputs/outputs being enough to gauge if things are appropraite.  for example i can't see if any of those spans are wrong trivially by examining the test.  "
"parameter doesn't have a Name attribute, should I use some kind of ToString instead? Seems wrong #Closed"
"Generally, going with `default` is wrong because it doesn't even have to be the furthest (it's a valid `TextSpan(0, 0)`), right? But it's not _wrong enough for it to matter_. The worst case scenario is we'll order something slightly lower/higher than we should which IMO isn't all that consequential. Especially given we haven't even order things at all right now. "
"I don't think this is wrong so much as not helpful.  I think it would be helpful to go into more detail about the whole strategy.  This is a bit confusing, for example because `Meet` moves down the lattice."
"This feels a bit wrong to set in Subsets.props but I need access to `_subsetCategory`.
A better approach might be to set two new properties `BuildIncludesCoreCLR` and `BuildIncludesMono` in here and then do the RuntimeFlavor logic in Directory.Build.props based off of that.

@github what do you think?"
"By my understanding these are all mock classes not fully implemented, or implemneted this ways on purppose, asserting could fail certain test cases, so for all these kind of classes i preferred to suppress warning

@github/ncl please correct me if am wrong"
Another case where it seems like we're doing the wrong thing by warning on this case in the analyzer.
"I was wrong, fixed"
">> It looks like we would report this for an array of function pointers, that feels wrong because an array can be used as a type argument. Consider adding a test that is not anonymous type specific.

> I assumed by this you meant not using the function pointer type as the direct type being assigned. Let me know if this wasn't what you meant.

It appears that this test was added to test changes made in ```internal static bool IsUnsafe(this TypeSymbol type)``` function. While behavior for this particular test scenario is expected and the test is good to have, I suspect we would get the same error for an array of function pointers. I think this is unexpected, as it is unexpected for an array of regular pointers too. I assume this is due to the fact that the ```GetAnonymousTypeFieldType``` misuses the ```IsUnsafe```. I think the intent was to check for types that cannot be used as type arguments because anonymous types are generic, but it is valid to use an array of pointers as a type argument. I am going to open an issue about that. Once/if that is fixed, it is very likely ```GetAnonymousTypeFieldType``` would stop using ```IsUnsafe``` and this test would stop covering its modification. At the same time it appears that this is the only tests added to cover that. So, I am suggesting to find another scenario to cover changes in ```IsUnsafe```, a scenario that has nothing to do with anonymous types.

---
In reply to: [407827402](https://github.com/dotnet/roslyn/pull/43248#discussion_r407827402) [](ancestors = 407827402,407821909,407821869,407753380)"
">receiverType [](start = 24, length = 12)

You are looking in the wrong type.  According to the spec we are to look in the type of the return of the `Clone` method. #Resolved"
Please add a test like this (`X`) but in which the type of the property in `A` and in `C` are incompatible. There should be an error that the override has the wrong type.
"> Adding the methodimpl entries changes what overridden method the runtime binds the override to. Since we want to remain compatible with previous behavior (right or wrong) for buggy runtimes, we do not want to change what we produce.

> See TestAmbiguousOverridesRefOut in CodeGenOverridingAndHiding as changed in iteration 33. Depending on the order of the declarations, the override would change from being correct to incorrect or vice versa (both tested).

I am just trying to understand why the code is written this way here. Could you, please, help me out with that?

At first, the logic feels wrong because we might not emit a MethodImpl for true covariant return case with ambiguous runtime override. However, one might argue that in the case when the runtime doesn't support covariant returns, we would report an error elsewhere and wouldn't even try to emit. Does this match the line of thinking you use? If so, consider capturing this in a comment.

On the other hand, could this negatively affect retargeting scenario when covariant returns involved? It looks like we would fail to communicate the presence of the covariant return override to the KnownOverriddenClassMethod above, potentially negatively affecting resolution of what the method overrides in that new universe. Is this possible? It might be worth adding some tests around this scenario. We might want to use a slightly different logic in this helper specifically for the purpose of RetargetingMethodSymbol.ExplicitlyOverriddenClassMethod.


---
In reply to: [446418702](https://github.com/dotnet/roslyn/pull/44025#discussion_r446418702) [](ancestors = 446418702,446416546,446413877,446358005,446321935)"
"Oh dude, I was sooo wrong"
"@github oops, I pushed to the wrong branch. I'll remove the find related code and then merge."
"I'm completely shocked that this works. I really didn't expect it to work. **who owns these objects?** Passing a struct of COM objects is _very, very unusual_.

Was there something wrong with the sentinel value implementation?"
I'm merging this to unblock using TS 4.0 to build VS Code. Please quickly review these changes to see if I got something wrong or if there is a better fix for any of these cases
Usually I just return `false`. It's not wrong it's just not equivalent :smile:
"> Hi.
> 
> 1. How does the component calculate the space for the content when expanded? As a test I added the expander around a vertical chat list of mine, and this is the result:
>    ![Temp](https://user-images.githubusercontent.com/60286968/79513737-34821980-804d-11ea-84d1-13d954f7fbab.gif)
>    As can be seen, the expander only shows around half of the height of the content. Is this a bug or am I doing something wrong?
> 2. I set the header up as such:
>    `<StackLayout Orientation=""Horizontal""> <Label Text=""Test2"" /> <Label Text=""^"" HorizontalOptions=""EndAndExpand"" /> </StackLayout>`
> 
> Just having a label is of course not enough to denote a foldable area, as the customer would never know it's a tappable widget. So I wanted to test having an upwards arrow indicator that turns into a downwards arrow when expanded. I couldn't find any easy way of doing it. Please advice on how to add a visual element that toggles between two states depending on whether the expander is folded or not. If this is not supported I'd urge to add support for it as I can't see much use for an expander that can't visualise its state.
> 
> Thank you.

Do you use ListView?
I don't think this control will work with ListView. Now there are several bugs filled for Expander+CollectionView.


Try to user ScrollView+StackLayout. Should work"
"Absolutely. I restored the `knownToImplementIDisposable` and added hold of `IsPattern` too. Then in the builder we have a simple `RuntimeConversionRequired`

Much clearer what's going on and less opportunity to get it wrong."
"Perhaps reword to be ""PERF: This is fastest on 64-bit""? Right now it implies that we're just using it wrong."
"This assumes `MethodImplAttributes.IL`. If this is wrong, it could be related to my comment https://github.com/dotnet/roslyn/pull/50560/files#r559016146"
">A, B [](start = 33, length = 4)

Changes in attributes should be rude.

We have similar tests for top-level (ReorderAttributes*), but they are wrong. If you try the scenario in VS it will not apply the change.

"
"~I'm definitely not an expert here, so double-check my work to make sure I didn't do anything wrong. But the current JIT'd code looks worse to me.~

UPDATE: I found my first mistake - it defaults to `Debug`. Updated the JIT'd code to `Release` and they look the same to me.

https://sharplab.io/#v2:C4LghgzgtgNAJiA1AHwAICYCMBYAUKgZgAJVMA2E9IgYSIG88imTjSKAjAe04BsiBZTAApSABiJgAlEUbMGuZoqIA3MACciEAA5gAdkQC8EgHQBBCAGUduoZIDcspUQCWu4C4cKnRAGacNQs6GmtbGADIAproA5sAAFkQAtESYdkRCAK6uwJJBADzpWW6S2nrhUbFxac6JiZKOSvLeSs4+6QDGcerGAJIQAOpxzsARVmDtEUKlugDazgC6kvVezUxNq06oAOxEwGoZEZ4bTAC+DYpnK0rbvmA8EIcNl80NhCTkRFy8AugimOJSGRXdZOVQaabBMBmSzWWxHbzZDznZh+AJBIzTcoxeJJFLVIgAPiMomqtWWzRBq1aHS6al6AyGIzGEym1jmi3Jx0pxxIOz2B3hG2e3mFmx2PjuD0FREuJyAA

```C#
    public static bool M1(string a) 
    {
        var span = a.AsSpan();
        int i;
        for (i = span.Length - 1; (uint)i < (uint)span.Length; i--)
        {
            if (char.IsWhiteSpace(span[i]))
            {
                return true;
            }
        }
        return false;
    }
        
    public static bool M2(string a) 
    {
        var span = a.AsSpan();
        int i;
        for (i = span.Length - 1; i >= 0; i--)
        {
            if (char.IsWhiteSpace(span[i]))
            {
                return true;
            }
        }
        return false;
    }
```

The left side is M1 and the right is M2:
![image](https://user-images.githubusercontent.com/8291187/105530971-38af2780-5cae-11eb-9e05-3813dc16f7ed.png)


"
compInitOptions seems like the wrong place for all this profile code. Can't is be done in the caller (compCompileHelper)? You just want it done before fgFindBasicBlocks? Maybe it would be useful to leave a comment here about the ordering requirements?
this was moved and was previously in the wrong location in code (but was correct in the UI).
How did the test pass with the wrong values?
"Oh that's wrong, I'll fix it."
"Perhaps the wording is incorrect.  AppContext.BaseDirectory is returning """", which is causing a bunch of tests to fail.  I feel returning ""/"" isn't any less wrong than """".  The benefit of ""/"" being that it works within other parts of libraries. "
It seems wrong to have two versions of this in here.
"never mind. the comment is slightly wrong, as it refers to pixels, and we do not measure in pixels  ¯\_(ツ)_/¯
"
"Yeah, that was dumb. Fixed."
what's wrong with it ?
"@github can correct me if I'm wrong, but the first one might be the typical behavior for something like this. If it is, I'll update the spec to reflect that first even shorter notation."
"I wish but I ran into issues trying to make that work with non sdk style projects. Maybe I was holding it wrong? 

https://github.com/xamarin/Xamarin.Forms/blob/d5d1bbf0ca61601c59187cc2037b437bead9913a/Stubs/Xamarin.Forms.Platform.iOS/Xamarin.Forms.Platform.iOS%20(Forwarders).csproj#L15"
i may be wrong!
"We specifically need this to get the font name (already in this PR) and the font size (excluded from this PR).

What's annoying is that this is a Terminal-specific issue too. ConHost returns an actual thing in `GetFontInfo`. Terminal, for whatever reason (we probably just didn't need it at the time tbh), lies.

> We'd need some sort of dummy implementation layer that mostly just calls into Terminal for the majority of the implementation, and ControlCore just for that one method... that seems dumb.

What if we double down on this info being stored in TerminalCore? And anytime ControlCore needs something from it, it has to call `_terminal.GetFontInfo()`? That way this is all in one place. (this would have to be a follow-up)"
"Wait, what?  This doesn't make sense to me.  Consider `Xamarin.Android.sln`, which is currently `*.sln eol=crlf`.  On my macOS checkout, it is in fact CRLF:

```bash
$ hexdump -C Xamarin.Android.sln
...
00000040  0d 0a 23 20 56 69 73 75  61 6c 20 53 74 75 64 69  |..# Visual Studi|
```

Note `0d 0a` -- CRLF.

If `*.sln text eol=crlf` means ""convert to lf on Linux/Mac"", then now my checkout will be different (dirty?).

That also sounds potentially ""wrong""; what will Visual Studio for Mac do with a LF-formatted `.sln` file?  (I have  no idea, and am not sure I want to find out.)"
"Okay, so here's some crazy bits: https://github.com/microsoft/terminal/compare/dev/migrie/b/2988-focus-fg-with-owner...dev/migrie/f/11682-vt-focus-events

That could all go in right here if wanted, or stacked as separate PRs. The space is now something like 

```mermaid
graph TD
    id1[Allow windows created by console apps to appear above the Terminal #12799] --> id3([Check if FG window is owner])
    id2[Enable the Terminal to tell ConPTY who the owner is #12526] --> id3
    id3 --> id4([FocusEvents in conhost, terminal])  --> id6
    id5[Propagate show/hide window calls against the ConPTY pseudo window to the Terminal #12515] --> id6{{Terminal v1.14}}
```"
"I can do that. I'll implement all suggested changes once I figure out why it's failing CI. It passed when I ran the tests on my machine. I must be doing something wrong. "
"Nor am I. I just figured that we are parsing correctly now and returning `1`. So I looked at the test case 2 lines above for `1` and copied that. I can go back and see what value we're returning without the bug fix, but I'm pretty sure it is wrong somehow and this PR is fixing it."
"According to my last commit, I made the change. Didn't I?

UPD: Looks like there is something wrong with the diff. Here is code from my fork
https://github.com/SkiFoD/runtime/blob/513bf784829aba4b76f101825cbc8a876a91fe41/src/libraries/System.Text.Json/tests/Serialization/ExceptionTests.cs#L526-L549"
I don't get it. Why should it be absent in C# 9? Are you saying the existing test was wrong? #Closed
"Now I don't want to go too crazypants here, but I'm thinking about future extensions to some degree.

I'm curious if you considered a design where the text buffer figures out the patterns on its own instead of being pumped to do that action by a thread from way outside itself, in this case from up in the Terminal* and friends. 

I'm not saying this one is bad or wrong, but an alternate vision I have is that you would register an object with the TextBuffer that contained a pattern, region of interest, and a callback method/event inside of it. The TextBuffer would just... of its own accord as things are written in on the other methods (and maybe with its own internal, private thread or threadpool worker) grind through the region with the pattern and make callbacks as necessary.

Almost like you have an `ITextScanner` interface with an `ITextMatchFound` callback interface... which might lend itself toward easy adaptation into a COM/WinRT-based plug-in model for arbitrary buffer scanners in the future.
"
"maybe i'm wrong I see `CGGlyph [] glyphs` later.. so the signature looks wrong "
"~~You use `IntPtr` for offset here, but the function pointer at the top is `uint64_t`. Won't that be the wrong size on x86?~~

Never mind, forgot the pointer part. "
"I think the only time this would come back `null` would be if we OOM'd.  In which case, I'd assume a lot more stuff is going wrong. More logging/`EP_UNREACHABLE` makes the code more self-describing though, so I can add it."
"Whoops, commented it out when I tried binding directly to the array in the bindings instead (and saw that it tries to bind it wrong if you do that), apparently forgot to uncomment it again.  Will fix."
"> > Well I look closer and it is sort of below the baseline where the descenders are... but it still looks awfully ""tall"" over the top of the text beside it...
> 
> Is this just because the text right beside it are non-ascenders? When I look at the space between the red/green lines below/above the 'd' or the 'f' (the ascender characters) the spacing seems fine to me...

Yeah could be. I might just be taking crazy pills.

> > (The ""+"" and the ""Add"" also don't seem to have the same vertical centerline either...)
> 
> Adjusted the margin here to make the ""+"" more center - here's the new look <img alt=""add"" width=""78"" src=""https://user-images.githubusercontent.com/26824113/153510447-323b0f95-969c-4884-8733-054f70c981a6.png"">

Looks better to me, thank you."
Can you elaborate?  What was going wrong here?
"That won't stop dupes in the list so it could, in theory, use the wrong one (empty)

I think it might be easier to fix (and likely faster to run) if we use a `StringComparer.OrdinalIgnoreCase` when creating the `List<string>` instance.
"
"Some testing thoughts:
- `IsWhitespace` and `IsNewLine` handle some unusual characters. I'm debating how much of those we should try and cover in tests...
- in terms of trying the raw string literal in various expression contexts, here are some more ideas (based on where `IsPossibleExpression` is used in parser): `is ...`, `is (..., ....)`, `is { Prop: ... }`, in ternary `b ? ... : ...`, in array rank `new int[...]`, in expression statement `...;`, in anon type `new { A = ... }`
- it would be good to test scenario where multiple errors occur in a single string (we only report the first one). For example, multiple lines have the wrong whitespace prefix #Closed"
"Yes, I tried to change the equivalence key depending on the version/safety just as you wrote here, but it didn't seem to prevent the wrong ones from being affected. It's entirely possible, however, that it's just cause I implemented it the wrong way. Would you like me to send a gist of both changes (the change you suggested and the one I described in my previous comment)"
"ideally don't remove/re-write attributes
more generally avoid as much _damage_ as you can to any file you edit :)
that's useful when tracking changes over time, e.g. why/who/when did `X` get added/changed ?
if the line was edited then you'll find the wrong commit(s)... and have to start again :)

It also helps when merging (branches) or reverting (commits) since it will minimize the chance of conflicts

If a file was really badly formatted, then it's better to do a separate commit/PR to fix the issues, i.e. don't mix up cosmetic and functional changes"
"> No. This corresponds to default(void*), which we emit as ldc.i4.0 conv.u:

PEVerify complains about type mismatch across branches. Also, ```(void*)0``` is emitted as 
```
ldc.i4.0
conv.i
```  

What we emit for default is probably wrong."
"Also there's a similar issue with SslStream as well: https://github.com/dotnet/runtime/issues/55334
I plan to put up an additional PR with the similar fix, where I could unify the logic and remove the code duplication. Unless there's something fundamentally wrong with the way I unset the callback and release the hold of the request."
Note the behavior change here. I believe previous behavior is wrong.
"this should probalby be a Contract.ThrowIfFAlse call.  we should never get here except for snippet items we created.  and thus we must have this property attached, or else things have gone horribly wrong."
"> Maybe I do not clearly understand the question. I am sure that the above removed instructions keep the hardware's call-ret info on stack balanced. Removed instructions just calculate wrong address.

The hardware tracks `call`/`ret` pairs to be able to branch predict `ret` instructions better. It means that after this change the hardware might mispredict a lot of the upcoming `ret` instructions.

> Unfortunately this code jumps to JIT_WriteBarrierEAX_Loc, not to the address stored in JIT_WriteBarrierEAX_Loc:

That's odd. Maybe try AT&T syntax? It should assemble to `ff 25 imm32`."
"That's somewhat concerning.  Couldn't this cause us to hold onto something like an IEnumerable and then evaluate it on the wrong threaD?  I recall issues like that in the past.   This is esp. concerning as the caller will certainly see the constructor and think that all the values are treated in the same way.  

The way we dealt with this was to make it explicit that things were lazy by taking in `Func<Whatever> createDocumentation`.  That way the caller understaood this would be called in the future.

We use that pattern, for example, in completion lists.  I think that would be far preferred here.
"
"Something must be going wrong with CI on the `Install Certificates` step:
```
The task has timed out.
```"
"Thanks for pointing this out. 

To be honest I am not sure how to deal with it as a correct implementation of `Length` should return the same value before and after calling `Flush`, similar to our [implementation](https://github.com/dotnet/runtime/blob/a991e1349e4325770d8e2ddf085184a68cd2555b/src/libraries/System.Private.CoreLib/src/System/IO/Strategies/BufferedFileStreamStrategy.cs#L55-L71)

```cs
long before = fileStream.Length;
fileStream.Flush();
long after = fileStream.Length;
Assert.Equal(before, after);
```

I can:

1. keep the code as it is (invalid `FileStream` implementation can in theory run into trouble)
2. move the length fetching and validation after call to `Flush` (it could change the exception thrown for empty files for cases where uses has also provided wrong `access` and `inheritability` which should be very rare).
3. re-fetch the `Length` after the call to `Flush` for custom types derived from `FileStream`

My preferences: 1 > 2 > 3

@github thoughts?"
"That kinda defeats the purpose of running it manually, IMHO. IIUC, for PRs we run a limited set by default, like smoke tests for libraries. And we had added this separate pipeline to allow running *all* the tests, so we could check in the PR if anything broke. Otherwise, we would find out only on a rolling/scheduled build.

Please correct me if I'm wrong."
"@github can you page in enough context briefly to confirm that the two changes in this file are correct? The 2nd one just preserves existing behavior, although that might be wrong.

After that this is good to merge."
The indentation here is wrong.
I don’t know if I agree .. the current reason for should suggest htmlFor is because it’s similar and looks like something user is wrote wrong .. if the new combination arises where suggestion is different or varies too much then those cases need to be handled separately and before any of this algorithm in that case..
"> as opposed to ""known limitations""

There are a lot of ""known limitations"" in the current issues. For instance vararg tests.

> Why can't we just state that a particular test is CLRTestTargetUnspported (e.g. on Linux or on ARM64) without having to duplicate this information in the issues.targets file? Or am I reading it all wrong?

I believe it could be possible, but the urgency around #35783 made it so this was the best short term solution.

I am happy to get this where we want when we have less urgency.

> they are easy to miss.

If they are not listed they will currently fail in test runs.
If they are extra ... someone had to put them there.
"
"> What tool are you using to inspect allocations?

dotMemory; its a bit annoying as you have to hit ""capture"" before the process ends or it throws away the results (unless I'm doing it wrong)"
"> Overall, I'm not saying that doing a binding check is wrong. I'm saying it's not necessary or even recommended per the guidelines we'd settled on.

I want to call this out. 

A binding check is very necessary here and it is recommended.  I realize we've been lax here and we could have done a better job being explicit in the rules. I'll take the blame there in not disseminating this information clearly enough. 

Note: I tried to convey this in some of the compiler talks I did on this topic and many of the cleanup PRs I've sent through to get the parser into a healthier state here. However, as per an above comment, I would often speak in generalities without being as explicit as possible about what this should apply to. I will stop doing this from now on and will be much more precise. 

The guidelines strongly indicate the purpose is to fit the syntactic model and that we should be context free.  Using parse options to dictate diagnostics violates both of those guidelines. As per an above comment, the guidelines were also not created out of thin air. They were provided based highly in the needs of the ide.  

The ide is the primary consumer of incremental parsing. The ide is the primary component that makes validity checks based on syntactic diagnostics. And the ide is the component that has to deal with the perf fallout of options changing. 

The guidelines here were driven by our design goals on how the syntactic subsystem should be as impervious as possible to ephemera like this. 

That's why the pr intentionally does things the right way wrt diagnostics, and it's something we should fix the rest of the parser to do. I've made changes here in the past asking those lines, but I haven't been able to focus my attention on stamping this out completely. 
"
"I added some more statement kinds in the walk up for the 0-length span request, using `isValidExpressionOrStatement` with types
```ts
    type ValidExpressionOrStatement = ValidExpression | ValidStatement;
    type ValidExpression = BinaryExpression | ConditionalExpression;
    type ValidStatement = ExpressionStatement | ReturnStatement | VariableStatement;
```
We then will grab a valid expression from the statement if we did not already stop at an expression. 

There may be a more general way to do this by instead stopping at an `invalid` node, but I get the impression that there are more kinds of things that can be found inside of statements than there are statements that users would be likely to select. There's also a good chance that I'm wrong :)"
"Also, `isMemberCompletion` seems possibly wrong, but I don’t know what that controls 🤔 "
Let me submit a new PR tomorrow - looks like I did something wrong when merging the latest changes from upstream/master.
"I can't exactly tell what went wrong with the build; however, I'm going to assume it's an issue of conflicts between Node.js and the web APIs, right?"
"Tagging subscribers to this area: @github/gc
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Changed a bunch of dprintf levels, eg from 3 to 1 when they are for FATAL_GC_ERROR 'cause you'd always want them; from 1 to 2 in seg_mapping table functions 'cause there could be tons of these when there are many heaps.

Fixed a perf bug in commit_new_mark_array introduced by the refactor change (#1688). This doesn't cause functional problems - we are just calling the same commit_mark_array_with_check on new_heap_segment multiple times.

Got rid of keep_card_live - all it needs is just to increase the cross gen pointer count.

Got rid of useful empty lines/comments/a few vars.

Renamed a few vars to the actual meaning.

Renamed should_commit_mark_array to is_bgc_in_progress and modified a few places to call it instead of duplicated code.

Moved the decision of condemning 1 when bgc is in progress to joined_generation_to_condemn (should logically belong there anyway) which fixes the problem that GCToEEInterface::DiagGCStart was getting the wrong condemned gen in this case.

Make PARALLEL_MARK_LIST_SORT always defined and got rid of code when it's not.

Proper checks for FEATURE_LOH_COMPACTION in a few places.

Changed some really long lines (please try to keep lines under 110 chars in general).

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>Maoni0</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-GC-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"This seems wrong; the JIT *never* generates the packed unwind format. The JIT always generates .xdata, and the VM constructs the appropriate .pdata."
"cc @github, @github (still looking into the next tizen arm64 issue Gleb found with `--cross`, where wrong linker flags are being passed to DNNE; that'd likely be a separate PR)"
"I believe this is not correct. If I recall correctly, this doesn't mean the call threw, but the input to the call was wrong. (Invalid JSON, etc.) so we do want to terminate the circuit here."
"Don't put extensions methods on primitive types, it gets really confusing when that shows up in intellisense for the wrong field. Make it a normal helper method."
"This feels wrong.  This PropertyGroup is only hit when we are fully signing binaries, not public signing. 
"
"Can we just look for `ValueTask<{type}>` in `FindBindAsyncMethod`? What's the benefit of allowing any object to be returned? I get that we're going to box anyway for structs, but might as well lean on the type-safety checks of the compiler.

We could even throw at startup if a type is used with a `BindAsync(HttpContext)` method with the wrong return type."
Seems wrong to be forcibly returning JSON here. Why wouldn't we just let it throw or throw `BadHttpRequestException` or something else to enable the app to handle how this responds to the client?
"I know this is existing code, but it looks wrong, and if so this is a serious bug. According to the specification for the `localloc` instruction, its operand is the number of *bytes* to be allocated. However, in the bound node the `Count` field is the number of elements of the array to be allocated. Unless it is an array of `byte`, these are not the same thing. #ByDesign"
"I'm guessing this is the static list of what dlls were actually running (positive list instead of negative list). Good to keep in mind for the future.

Edit: never mind, I'm dumb, didn't read the description :)"
This feels wrong. Overall this seems to be a pervasive pattern in our options code now: having APIs that accept public types but then asserting / throwing if it's not a specific derived type. Makes me question if we have the appropriate design here.
"@github you proposed to do:

>In fact, to make your life easier. Just call: CommonCompletionUtilities.GetWordSpan. However, for the isWordCharacter helper pass: ch => SyntaxFacts.IsIdentifierPartCharacter(ch) || ch == '.'

`CommonCompletionUtilities.GetWordSpan` moves the end further only if the char before the cursor is a word character. Therefore I decided to make a copy of the relevant code. I do also think that we should not rely on `IsIdentifierPartCharacter` here, because we expect an assembly name with an optional `, PublicKey=hash` appendix. So a proper character list would be 
* all chars allowed in an assembly name
* comma, space, and equals sign

Note: I currently use `IsWhiteSpace` which is also wrong because a space is allowed within an assembly name: 
`, <space> PublicKey=`."
"This translation was fine, but [`ERR_BadAsyncReturn`](https://github.com/dotnet/roslyn/pull/31327/files#diff-f7c7796cace976d0368b7b23a2e7469dR6418) still has the [wrong translation](https://github.com/dotnet/roslyn/pull/31327/files#r236001755)."
dumb question.  why is AsCasePatternSwitchLabelSyntax not the same as just calling AsPatternSyntax and wrapping that with a CasePatternSwitchLabel?
"(I know I mentioned it in my previous review, but I'm not remembering why I thought that was necessary. It's also Friday and I'm a bit sleepy so it could be something dumb.)"
This seems wrong. Why are we boxing unconditionally?
"When binding during return type inference, there is nothing wrong with having some returned expressions unbound.  Binding them to any particular type would cause us to infer an incorrect result type.  Even in error recovery scenarios.  But even when inference failed, we need to ensure target-typed bound nodes are rebound before passed to the rest of the compiler.

---
In reply to: [328733772](https://github.com/dotnet/roslyn/pull/38750#discussion_r328733772) [](ancestors = 328733772,328732473)"
"Oh, sorry -- I read the wrong constant. "
"the url is wrong o the label part. "
"Correct me if I'm wrong, but if option b is the one we're going for, we're _not_ having the `Alt-RightClick` to copy plaintext/formatting right? Right click should just copy formatting if the setting is true, and plain text if false."
"I think this might be the wrong behavior, but I guess I need to build the branch to come to a decision here. In my mind, if I start renaming a tab, then I use my mouse to click somewhere else, I would expect the operation to be cancelled, not completed."
"Well, the replacement is just a dumb *in all the code, replace a character* command with no further context information.

I thought of maybe another *fix*. Apart from the one informational issue that tab characters get replaced by space characters I'd say the major problem are the visual issues:

1. Tabs are being fixed to a size of 4.
2. Mid-text tabs do not have the expected aligning effect.

As long as the resulting length is 4 I personally do not care about 1. to be honest. I use them to align mid-text, though.

```txt
apple	red
banana	yellow
lime	green
```

So I am thinking about a fix for 2. I could replace the few calls to `String#replace()` by a custom function that does the current replacements and replaces tabs by either 2, 3 or 4 spaces depending on their offset within the line to mimic their aligning nature. This should have no impact on indentation tabs, but fix mid-text tabs.

```txt
apple   red
banana  yellow
lime    green
```

Currently, this would be the result:
```txt
apple    red
banana    yellow
lime    green
```

Why is this important for me? I haven't posted anything about it, yet, and I don't know how open you are for introducing new settings to VS Code, but I was thinking about a new setting allowing users to decide whether they want their quick infos with `white-space: pre-wrap` and a monospace font (configurable globally or for the workspace and for each file type as well). I [asked on SO in the past whether I could enable preserving whitespace](https://stackoverflow.com/questions/61024647/how-to-alter-documentation-comment-parsing-or-at-least-disable-markdown-there-in) and I think there is no way currently. And as there doesn't seem to be a big demand for this feature I'd add it myself."
"I'm mildly worried that we're allowing a process to set a reg key to a random binary that we'll call a function in _on every console launch_. Seems like a trivial way for an application to sniff _all_ console messages, by just installing `sniffer.exe` as the delegated console, that then later just calls openconsole.exe (to make it seem like nothing's wrong).

HKCU seems to make sense, but I do think we need some way of preventing apps from just arbitrarily writing this themselves"
"> a setting should be on the workbench level, not editor level because it seems workbench specific

Done, I've moved it to use `workbench.settings.confirmBeforeQuit`. Is that a good place/name for it?
> the dialog is missing localization and should probably use one of our dialog services (dialog main service?)

For localization, I completely forgot about that but I've just added it in. As for the dialog service, when trying to use the dialog main service, I got this error: `[createInstance] lifecycleMainService depends on dialogMainService which is NOT registered.`
> the way this is implemented this seems to ask the user each time a window is closed? what if many windows are opened at once? what if you close just one of the many windows but don't quit? shouldn't this only ask when you quit?

That was what I had intended and thought that was what was requested, to ask for confirmation whenever any window closed. Maybe I'm wrong, if anyone who requested the settings wants to chime in, please do.
> keep in mind that in macOS you can have no window opened but the app is still running

If you mean that it doesn't prompt on `Cmd + Q`, I just pushed a fix for that as well.
> As such, converting to draft and moving to backlog, I cannot promise time for this in the near future.

No rush at all, if you're able to review once again I'd be happy to make any more changes that may be required."
Is there any update on this PR? @github is there something wrong with it?
"> Markdown changes look good. Should TypeScript also be updated?
> 
> https://github.com/microsoft/vscode/blob/d89e2e17a5d1ba37c99b1d3929eb6180a5bfc7a8/extensions/typescript-language-features/src/languageFeatures/languageConfiguration.ts#L58

I guess yes, but lets do that in another PR, otherwise this becomes a Frankenstein!
The typescript-basics language feature currently does not have separate language-configurations for ts and for tsx, however, the typescript-language-features registers different configurations for them.

Also, lets merge this after the May release so there is plenty of time to test these changes in the Insiders. I'm quite sure that my refactoring is correct, but it is very easy to screw up and copy the wrong thing."
"@github Indicators originally belonged to CarouselView. It was part of the CarouselView code. Then we decided to break the dependency on CarouselView because IndicatorView could be used for any control that the user wanted to create. 

This flexibility came at a cost for people who wanted an easy way to show indicators for a CarouselView, so we invented this way to easily bind the two together. We don't need to easily bind the IndicatorView to a custom control because at that point, the user is already opting for a more advanced scenario.

If we put a strong link on the IndicatorView, it suggests that the IndicatorView is only for the CarouselView, which is false. If we try to make it generic, now the IndicatorView is trying to unbox something to see if it has a known path for binding to it, which is inefficient and is the wrong place for that responsibility. And to have users override that to provide their own link is more code than just writing the bindings, as you pointed out.

I like this convenience property for the CarouselView, but I'd rather remove it than put it back on IndicatorView, personally.

Thoughts?"
"Ha! Just found that we can't use whatever class is in the context:
```csharp
interface I<in T> // Contravariance!
{
    string DefaultTypeOf() => typeof(T).Name;
}

class C : I<object>
{
}

public static class Program
{
    [MethodImpl(MethodImplOptions.AggressiveOptimization)]
    static int Main()
    {
        var c = new C();
        // `ownerType`  is `I<string>`, and we are going to pass it as type handle arg which is wrong
        // we need to pass `I<object>`!
        var dcs = ((I<string>)c).DefaultTypeOf();
        if (dcs != ""Object"") return 200;
        return 100;
    }
}
```

So I guess I need to return proper method table from `resolveVirtualMethod` along with devirtualized method desc."
"> copying paths from web to his local windows machine

@github What are current expected workflows for ""web"" version? My assumption was that ""web"" version is mainly for Codespaces that connects to Linux under the hood and has self sufficient development environments/workflows that won't need local PC and local paths.
Is it wrong assumption?

@github I can take a stab on it or at least will create separate issue to track this unexpected behavior for ""web"" builds and will close this PR as you already properly fixed #128345 ."
"Hey @github  the project isn't building, seems something wrong in the csproj "
"Isn't this on the wrong side of the lock? Or alternatively, shouldn't the value be atomic or something?"
"This concerns me a little, because I know there are parts of conhost that definitely use `SMALL_RECT` with exclusive coordinates. It's tricky enough as it is not knowing whether a `SMALL_RECT` is inclusive or exclusive, but it'll be a whole lot worse if we're storing exclusive coordinates in a type named `inclusive_rect`.

Or are you dealing with this on a case by case basis, and only using `til::rect` for the exclusive cases? Sorry if this is dumb question -  I've only really skimmed the PR."
"As far as I remember, the rationale for `EntryCount` being `long` was some sort of compatibility with BCL's `ZipArchive` (which doesn't have `EntryCount` but has a collection which has a signed integer `Count` property). At the same time, I always avoid using signed integers whenever a size or an index is concerned - on the notion that we have no negative indices and we have no negative sizes (or at least - they make no sense). Thus using an unsigned integer limits the size of the error domain (index can be too big, but can't be too small - one less thing that can go wrong)"
"This won't work well when #3789 (custom color for terminal tabs = custom title bar color) is merged because my workaround that sets a top border color to an opaque color that look like the system's border might become too obvious with some colors.

Should I close this (wait until there is a better fix without weird workarounds) or not (because this is a temporary workaround to #3425 and having 4 white borders is probably worse than 1 border that looks slightly wrong?)?"
"This makes sense, but it seems like the key is that this method won't be called unless someone instantiated `SomeStruct` at some point. The phrase ""you can always create an instance of a valuetype"" seems wrong just because without the previous precondition it seems possible that it could fail."
"```xml
<activity android:exported=""true"" android:icon=""@github/icon"" android:label=""HelloWorld"" android:name=""example.MainActivity"">
  <intent-filter>
    <action android:name=""android.intent.action.MAIN"" />
    <category android:name=""android.intent.category.LAUNCHER"" />
  </intent-filter>
</activity>
```

Thanks, I don't know how I got confused about the wrong element before.

Now I get:
```xml
    <activity android:icon=""@github/icon"" android:label=""HelloWorld"" android:name=""example.MainActivity"" android:exported=""true"">
      <intent-filter>
        <action android:name=""android.intent.action.MAIN"" />
        <category android:name=""android.intent.category.LAUNCHER"" />
      </intent-filter>
    </activity>
    <activity android:label=""Library Activity"" android:name=""mono.samples.hello.LibraryActivity"" />
```"
"```suggestion
        private PerGeneratorInputNodes(InputNode<ISyntaxContextReceiver> receiverNode)
```

Maybe I'm reading the code wrong here but my intuition would be that when this value is `null`  you were better off using `Empty`. "
Indentation is all wrong in this method (mixed spaces/tabs?)
"White space noise, but old was wrong so ¯\\_(ツ)_/¯ 
  "
"Am I wrong in ascribing meaning to the absence of F#/TS implementations of `AbstractEditorFactory`? I guess they could use IVT.. It didn't seem like much of the other code was defensive though. Surely `document.GetRequiredSyntaxRoot` would fail for TS documents?

I can just make it resilient anyway though, this is the only spot that would need to change anyway."
"I've talk with @github about this. While parse we could make the metho async, that long explanation make is scary and also means that the mono async/await might be doing evil things not expected by objc (for example, ConfigureAwait (false) + the wrong option).

Better leave it like this and later add the API if needed."
"> I suppose I should revisit it and run the assertty version through the CI. Maybe it turns out more callers are getting it wrong and it would be better to normalize centrally (regardless of that, the flag flipping will be fixed).

I would prefer this if you have time, if not please open a follow-up issue to investigate/clean it and we will merge this PR as is."
"The closure should be GC, but it is not. Look at https://github.com/xamarin/xamarin-macios/issues/8350#issuecomment-626106244 profiling results. The leak is a memory 
stream from the httpcontent of the response. Removing the use of a lambda, fixes the issue.

The leak only happens when it is used in a sync method, so in async the lambda is correctly GC, in sync is not. I could not pin point the exact reason on why the GC is not doing the job correctly. 

The code was wrong nevertheless."
"> the timing (close to release) is very unfortunate

Right.  Correct me if I'm wrong, but we've now seen at least three issues related to the switch, and I fully expect we'll see more.  My suggestion is to go back to CreateFile for this release, and if that means not supporting an atomic preallocationSize, we remove that for the release as well."
"This doesn't look correct, the `PHEditingExtensionContext` type doesn't show up for Mac Catalyst: https://developer.apple.com/documentation/photokit/pheditingextensioncontext?language=objc

If it turns out it actually is available (the documentation is wrong), then you need to remove the advice on the next line too.
"
"This is intentional. Check the context, it was wrong before."
"I guess it cannot succeed with `NULL` buffer, so most likely it is a different or lost error code.
I do not have Win7 available and as I understand it does not always cause the assert. It is curious, but could be time consuming to find out.

In any case, if this API is not telling us the desired size of the buffer it would be a situation that we cannot handle and it would be fatal in the next call to this API anyways. It would also indicate that something went really wrong on the OS side.

I do not think the value of this assert is very high. I think we use the API correctly and with the comments around it is unlikely to accidentally regress."
"Dumb question -- is span start the right thing? That doesn't cause weird stuff in say nested class scenarios where it's viewed as the ""outside"" of the class vs. the ""inside"" of the class?
"
It looks like this will do the wrong thing for CR-only files.  I assume we don't care.
"Of course as the language is extended in the future the parser will have to be modified as well, but if there is another valid non-query interpretation of the sequence of tokens, the current parser already gets it wrong. This change does not make that any better or worse. However since the query expression feature was carefully designed to not intersect with existing constructs, and it already performs a look-ahead to ensure it is a query syntax, it is unlikely there is a bug lurking there.
"
"My sample was just trying to figure out how things are working and shouldn’t be considered how I want things to work. I wrote the operations in that order because that’s how they worked at the time.

In column-vector transformers, it is expected that the right-most operation happens first.

You can see this with CGContext’s and their transformers. They’re column transformers and therefore the first operation has to come last.

 If you pickup any OpenGL book you’ll see the transformation pipeline written as:

    P*V*M*v = projectedPoint

The vector is first transformed by the Model matrix, then View, then the Projection. If you define `*` backwards, now you have to write:

    v*M*V*P = projectedPoint

Which makes it look like a row transformer (which you just went through a lot of trouble to fix). I think it’s pretty confusing doing the operation backwards. 

**But** here I am of two minds:

1. Defining `*` to be backwards is obviously wrong and is going to create much confusion for people who know matrix math.
2. Making it backwards does mean this breaking change should allow old code to work thus saving me a *lot* of time.

Ugh. Correctness or expediency? I really wish Apple hadn’t played that game. Again, I won’t die on this hill. But it seems so wrong to me.
"
"Both the related info and the original diagnostic have the same span here - seems wrong. The related span should be the first declaration, not this diagnostic's declaration."
"Seems like this will do the wrong thing for the non-leading-asterisk use of the * type. "
"This whole thing should actually come first and be a completely separate code path. Here we call `parseTypeOrTypePredicate` (and allow prefix `...`) in the namepath case, which is wrong.

```suggestion
                return finishNode(moduleTag);
```"
"@github Not sure that I got your idea :(. I thought about the issue like so, `type T3 = T2<(((((/**/)))))>;` parent is `ParenthesizedType`, we need to skip all `ParenthesizedType` to get correct type argument. Or am I wrong?

`Foo[(""hello"")]` it is not `ParenthesizedType`. this case will not be handled."
"It removes any project files that appear in the safe list from the project, and adds them to the `include` list (for which typings are installed unconditionally).

If there is a case where we want to avoid adding files to the include list _and_ remove them from the project, then this would be wrong (but I'm not sure what that is)."
"Actually, I'm leaning towards that this is the wrong approach, AbstractProject is doing a bunch of work that expects its on the UI thread. 
"
"Sorry, we'd been discussing this offline and I forgot to update the issue.  The perf suite was using the wrong baseline.  I'll kick off a clean run now, but local testing showed no change in the check time of material-ui."
"Your settings are wrong - possibly upgraded from a long ago bug where the default for `Indent case labels` was false instead of true.
"
"What was wrong with the old code here?
"
@github would you mind expanding about what's wrong with those kinds of export maps and how they mess up with the format of the file ts sees? Just trying to solidify my understanding of how ts handles export maps (and make sure what we publish would work correctly)
"It's just the message that was wrong; I guess this message didn't come up a lot so nobody realized the wording didn't make sense if the error location was inside a type node. It's an easy fix; just make another message that says ""Type"" instead. I'm pushing that now."
"Sorry wrong recommendation earlier. you probably should use `resolveEntityName` it handles both identifiers and propeortyAccess.
"
"What I'm talking about is the limitation to infer the parameters of the Type Guard. In your playground link (which is nice don't get me wrong) you are forced to type your parameters. In my playground I don't have to specify them, and if you hover over them you see the type of the previous predicate. This would mean that any invalid function will be catched right there on the spot and it would show a red line under that specific offending function. 

For example if I add a invalid function to the pipe in my playground example, it shows:
```
Argument of type '(val: `foo${string}`) => val is number' is not assignable to parameter of type 'PipedTypeGuard<`foo${string}`, number>'.
  Type predicate 'val is number' is not assignable to 'value is never'.
```"
@github I was under the impression that Mono didn't support single-file publishing. Was that wrong? Mono might want to change the behavior for AOT though.
">                                 builder.NonTypeMembers.Add(backingField);

> Per my understanding, `BackingField` and `BackingFieldForFieldKeyword` can never both return a non-null value. Given that, there shouldn't be any duplication (there is already a test for `GetFieldsToEmit` involving initializer).

> Is my understanding of how `BackingField` and `BackingFieldForFieldKeyword` should work wrong?

In commit 53 you removed the following assert that used to be above this line:
```
Debug.Assert(!backingField.IsCreatedForFieldKeyword);
```
I am assuming that failing tests confirmed that the assert was incorrect. Since there was no suggestions to change behavior around when `BackingField` and `BackingFieldForFieldKeyword` return symbols (the suggestion was to prevent them returning different non-null values), then the answer is - yes, they both can return non-null value.

---
In reply to: [1000921075](https://github.com/dotnet/roslyn/pull/57076#issuecomment-1000921075) [](http://example.com/codeflow?ancestors=1000921075,1000545813)

---
Refers to: src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol.cs:4417 in ec5d03a. [](commit_id = ec5d03a0ca3100d59c01e0a768be8ddfb9f3b676, deletion_comment = False)"
"> You'd expect these two types to be compatible since they'll always have the same sets of properties, but they wouldn't be without the simplification.

@github Sorry, would you mind clarifying that? Maybe with an example, or an explanation of what I'm doing wrong here:

```
type T1<T> = (keyof T) & string;
type T2<T> = keyof { [P in keyof T as P & string]: number };
//type T2<T> = keyof { [P in keyof T as [P] extends [P] ? P & string : never]: number };

interface M {
    a: number;
    b: number;
    [42]: number;
}

function f1(x: T1<M> extends T2<M> ? boolean : never) {
    return x;
}
function f2(x: T2<M> extends T1<M> ? boolean : never) {
    return x;
}
function f3(x: T1<M> extends T2<M> ? (T2<M> extends T1<M> ? boolean : never) : never) {
    return x;
}
f1(false);
f2(false);
f3(false);
```
In the above code, `f1` and `f2` both take `boolean` arguments, which *seems* to indicate that (as you said) T1 and T2 produce compatible types (each extends the other). But if I try to combine the tests, in `f3` it *doesn't* take boolean (it also doesn't tell me what it *does* take).

If I change the definition of `T2` so that the transformation doesn't happen (the commented out version of T2), I get exactly the same behavior (ie, I believe, based on `f1` and `f2`, that the types are still compatible; but something odd happens in the `f3` case)."
"Ok I was wrong, the real reason is `(unsigned)floatValue` on MSVC compiled for x86_32 behaves differently than all other platforms."
"> But we are likely going to have a problem if there are short-lived allocations mixed in. That makes me think - should our guidance be to avoid short-lived allocations on POH?

I thought that was a given since it was only collected with gen2? Or did I get that wrong..."
"Sure.  The case where this becomes a problem is when the assembly doesn't specify `.clearinitlocals`, which means that locals don't get initialized to zero.  I'm not sure about all the cases where this applies, but I know that it does apply to stackalloc'd memory.  Ensuring that `Reserved == 0` is important for calls to ETW where the value does matter.  I'm not sure how often `.clearinitlocals` is disabled - I suspect not super often, but just didn't want our guidance to end up sending folks in the wrong direction in this case."
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

PropertiesBinaryReader could be access by more than one thread which was causing starting reading from the wrong position and skip positions.
Added a test case for it.
@github I would like to backport to rc2.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>thaystg</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Debugger-mono`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

It's working both on VS and on Firefox:
- step
- resume
- see locals
- callstack

To Do:
- receive more than one connection
- I think the line number is wrong (by +/-1)
- evaluate expressions

![MicrosoftTeams-image](https://user-images.githubusercontent.com/4503299/142430850-d15d0d3f-8d3c-42a4-b9e3-3a32015cfbbd.png)

![MicrosoftTeams-image2](https://user-images.githubusercontent.com/4503299/142430865-380277d7-c1c1-4daf-a56a-6eb16bda6dee.png)



<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>thaystg</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Debugger-mono`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"In total more than 3 hours for PR validation, that's crazy :O"
"Yeah this change definitely doesn't look right to me because that client name is wrong 100% of the time. I think maybe we could use DI to solve this by having some default instance of HttpClient registered, or otherwise allow devs to specify other HttpClient settings via some other mechanism.

If we really did want to set a default, it should be something like the actual app's name and not some generic string, but I think we should come up with a proper solution instead of rushing something in."
"I don't feel incredibly strongly about SignalR and MVC being consistent. I do feel strongly that case-insensitive is the wrong choice for building a REST api. 

I think it's a wierd idea to we would do case-insenstive because legacy. "
"ugh. It makes me sad to think that I had a test for this, and it was just wrong. "
@github what's wrong with optionally passing in the caller's logger?
"Instead of validating the contents of the cache when we download bits from the network, can we validate them when we load them from the cache? Or as an asynchronous task that happens after we've downloaded and cached the resources? If we detect this situation, we can simply crash the app at that point, isn't that correct?

It is very unlikely that you end up in a situation where the manifest doesn't reflect the contents of the server or that you can't trust the manifest (it's your app, you are serving it).

Worst case scenario, your app is in the middle of a deployment and you got the wrong contents, the likely outcome is that your app will crash and the user will have to reload (this problem is orthogonal to what we are trying here).

If you want to do this validation, then do it over the cached data the first time you load from cache and ""repair"" purge the entry from the dll once you detect that scenario."
"Since we have `<TreatWarningsAsErrors>true</>` that ends up being an error anyway, which is pretty strong. It means your build fails and you can't even run tests if you have that wrong. Maybe we'll get there, but I have a feeling people might not like it if we go straight to errors in one go."
"I'm concerned ""auto-remove state on retrieval"" is a very strange pattern that will confuse people and make things harder for them. At the very least if we retain this behavior we should change the API name to something like `TryRetrieveAndRemovePersistedState`.

The sort of case where I think this risks making things difficult is if there are multiple instances of a component that make use of the same state. This auto-removal behavior means the developer is forced to invent a system for giving each of them unique keys that they can regenerate during rehydration.

Is there a strict reason why we have to do this? What goes wrong if we leave the state in place?"
"I think this is wrong, as the `exception` comes before the `message`. See #39223"
"This looks wrong, `MemberNotNull` is generally used on a method that ensures a property is set when called. `MemberNotNullWhen(true, ...)` might make sense if there was any link between `BodyDescriptorRepeated` being true and `BodyFieldDescriptors` being non-null, but I don't see that link anywhere."
"Not positive whether this should use `""contains""` and am asking in Dev WF channel. If this is wrong, I bet the line below is as well."
"It looks crazy, indeed.
But now you've got Protocol twice."
"> Test failure:
> https://github.com/dotnet/aspnetcore/blob/49a10149bc62df40ac21c1227f792c8b4edb0d8d/src/Mvc/test/Mvc.FunctionalTests/RoutingDynamicTest.cs#L108-L116
> 
> This test was making the wrong assumptions about %2F and should be updated.

Agree, I think what I need to update is not the test, but the Transformer. There are a few: 
```private class Transformer : DynamicRouteValueTransformer``` where I am planning to change:

```c#
results[split[0]] = Uri.UnescapeDataString(split[1]);
```"
"> Yeah just moved down with the rest. 

Do you think that makes this change easier or harder to review?

> It was in the wrong place.

Why do you think it was in the wrong place. What is the definition of the right place. Is there a specific guideline violated?  



---
In reply to: [177905162](https://github.com/dotnet/roslyn/pull/25796#discussion_r177905162) [](ancestors = 177905162)"
"Nit: Indent is wrong here. "
"this feels wrong.  a test should not have to specify this data.  The test is supposed to represent the user's interaction with the feature.  in that regard it is saying:

1. here si the code i started with
2. here is the replacement the user made in code
3. here is what i expect as the result.

By passing along isRenameAttribute the test it's essentially leaking out an internal implementation detail of how the feature runs."
">if (span.End > sequence.Length) [](start = 12, length = 31)

this check seems wrong if `span.End` is exclusive
 #Closed"
"let's step back a bit.  I have a dumb question:  why don't we just pool these arrays? so instead of always allocating at this point, we can just pass in the array we want, fill it, await all of it, then return the array to the pool.

A simple enough solution that satisfies individual concerns around allocations as well as good task hygiene.  Thoughts?"
"If we split this ""do these items match by text"" function out then you can also reuse it in that crazy huge lambda below."
"I actually tried making this change to the conditional access generation (I had the same thought). The problem seems to be that we've got the wrong type of null in the stack, and it fails to verify at the point that it tries to pass the null as a parameter to `string.Concat(...)`. #Resolved"
"This is wrong: this will cause missing entries in the _manifestAssemblies (the bug that I fixed recently).

The right way to fix this is to get rid of _manifestAssemblies, and emit a sorted version of _assemblyRefToModuleIdMap in GetData(), sorted by module ID"
"The spec says this:

> The check will be specifically for reference equality to null, it does not invoke == or any user defined operators. This also means the ! operator can only be added to parameters whose type can be tested for equality against null. This means it can't be used on a parameter whose type is known to be a value type.

~~You could get into this scenario via generic substitution though.~~ The spec says `void M<T>(T t!)` is allowed--the parameter just can't be constrained to a value type. ~~So it should probably be handled and exercised that way.~~ I don't think you can ever get into this scenario *during emit*, please correct me if I'm wrong @github

It might be good to actually add a `Debug.Assert(!parameter.Type.IsValueType || parameter.Type.SpecialType == SpecialType.System_Nullable_T)` to convey this invariant."
Maybe....? I wonder if it works because the compiler may choose to annotate the symbol regardless of the mode. But that's of course crazy depending on that. :-)
"I would expect the tests to assert expected behavior and be skipped. The only time we've done the ""assert the wrong behavior"" is if we're trying to assert something doesn't crash as a primary concern. The problem with this:

> Once we fix that, this test will actually fire, demonstrating that yes, we did actually do what we set out to do.

is if somebody else fixes the bug _without realizing it_ they now think they're doing the wrong thing because 'they broke a test'."
"Why do we need this? Wouldn't `HandleToModuleToken` make sure we don't record something dumb?

(Trying to see if we can avoid leaking the handling of the faux `MethodIL` into this method.)"
"I think this is a moot point now that I have to introduce an abstract member so that `NameOf` is not generated for VB, since NameOf is not legal to use on private members from attribute arguments. (If I'm wrong and there's shared code that can do these things, please let me know!)"
"Yes, we should remove the casts; particularly because they are to the wrong type. The requirement is `IDictionary<string,object/JsonElement>`. The `IDictionary` cast must have been an oversight.

We've already verified the type, and are only creating the object here; so we don't need to cast it."
"Also, unrelated to this commit: the events in `poll()` is a bitmask. The conversion to/from the PAL seems wrong (it's probably fine if nobody ever asks for something like ""I want Input and Priority events"".)"
"Shouldn't the `fptr` be of type `void*`? That seems to fit the function pointers design better. It would also make the stub unsafe which is basically a good thing (even though it doesn't matter much). I personally don't like passing pointers around as IntPtr since it means ""safe"" can handle them which feels wrong."
"Do we have tests calling ToString() and asserting the result, or just this is for debugger display or if something else goes wrong? #Resolved"
"The random out-of-bounds check in this function is terrifying. Not new, but still terrifying. (It's also allocating like crazy since ToListOfParameters() isn't cheap just to get the total count...)"
Looks like calling `PassiveGetSyncBlock()` should also be done. I thought all valid objects had one automatically. I appear to be wrong. Check for null.
"@github isn't that wrong? every untitled editor input will have a resource but will not be dirty when opened (e.g. open a new untitled file without content, it should not show dirty).
"
"(How does this comport with BACKGROUND_INTENSITY, and its potential impact on whether conpty should generate 10x or 40x? Am I mixing concerns here and worrying about the wrong thing?)"
"Is it worth introducing some kind of ordering or priority concept here? Correct me if I'm wrong but this works now because DateTimeEmbeddedLanguage doesn't have a classifier, but if it did, or a new embedded language is added, this problem could resurface, right?

We don't need it till we need it, but might be worth a comment to warn future developers."
"We're doing strict equality on the type parameter, which means we have some expectations as to what's going on.

Is it worth adding a debugging aid, like

```C#
Debug.Assert(typeof(TAlgorithm).BaseType?.BaseType == typeof(AsymmetricAlgorithm), $""TAlgorithm ({typeof(TAlgorithm).FullName}) should be an implementation type, not an algorithm type."");
```

Sure, the assert would be wrong if we ever subclassed ECDiffieHellmanCng, but it turns out, this if would be wrong, too :smile:."
"I'm seeing this assertion fail because `externalTokens == MulticoreJitTokens` when the generic type parameter is a value type from a different assembly. Repro:

```c#
    private static void Main()
    {
        ProfileOptimization.SetProfileRoot(Environment.CurrentDirectory);
        ProfileOptimization.StartProfile(""profile.mcj"");

        Thread.Sleep(500);

        CallFoo();

        ProfileOptimization.StartProfile(null);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void CallFoo() => Foo(RegexOptions.IgnoreCase);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void Foo<T>(T t)
    {
    }
```

I'm not familiar with the zapsig code to evaluate those changes or what might be wrong. It may be good to add some tests involving module-load dependencies as part of the type signature. The rest of the changes look good to me."
"the on first layout one is now called with a fail fast if failed because a tabless terminal is a super weird state and the crash will notify com that something went wrong. also left a comment to this effect.

this side on stopping is unused and I will refine it further in #9475 "
Still your advice makes sense if I'm wrong and the path with SocketHttpHandler will be taken mostly 🙂 (AFAIK it's a current XA behavior) but I think it makes sense to make Android one to be default.
"I might need to self block this - Looks like VtPipeTerm is _aggressively_ worse in this scenario actually. Since this is a replication of how WSL interop in conhost is supposed to work, this is a bad sign. I'll test more.

EDIT:
Okay I think I figured out what I did wrong here. It's the change to `screenInfo.cpp:L1451-1469`. Here we're trying to figure out the part of the viewport to invalidate, based off of what lines in the _new_ buffer are wrapped. This was supposed to be a heuristic on ""what lines that were wrapped that might have changed"". But that doesn't work - in the scenario where we're going from a wrapped line to a non-wrapped line, after the resize, all the contents of the buffer below the wrapped line will have shifted up one line. However, the problem with this algorithm is that we're only checking the wrap state at the end - which means that since there are _no_ wrapped lines in the new buffer, we never invalidate, and the host and terminal get out of sync.

I thought this was a bad heuristic originally, and I guess I'm glad that my gut was right about that.

my repro is essentially print a line that doesn't wrap, resize width down to have it wrap, then resize the width up to have the line unwrap. Chaos ensues."
"Thanks @github I did the changes but its still not passing, It would be great if you could suggest changes again🙏🙏

1: Yeah, I mentioned it already in the PR that there should be a better implementation, if you have the same code thrice, you are doing it wrong(at least that's what I believe)

2: If I remember correctly, there was an issue (Edit: https://github.com/microsoft/microsoft-ui-xaml/issues/759) that the xaml island window was resizing slower than the parent window, it might be related to that. I guess that is just a (performance?) limitation of xaml islands ATM"
"There's a linker failure in a couple of tests:

```
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000: Mono.Linker.MarkException: Error processing method: 'System.Void Android.Runtime.JNIEnv::PropagateUncaughtException(System.IntPtr,System.IntPtr,System.IntPtr)' in assembly: 'Mono.Android.dll' ---> Mono.Cecil.ResolutionException: Failed to resolve System.Void System.Diagnostics.Debugger::Mono_UnhandledException(System.Exception) [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at Mono.Linker.Steps.MarkStep.HandleUnresolvedMethod (Mono.Cecil.MethodReference reference) [0x00013] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at Mono.Linker.Steps.MarkStep.MarkMethod (Mono.Cecil.MethodReference reference) [0x00049] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at Mono.Linker.Steps.MarkStep.MarkInstruction (Mono.Cecil.Cil.Instruction instruction) [0x00040] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at Mono.Linker.Steps.MarkStep.MarkMethodBody (Mono.Cecil.Cil.MethodBody body) [0x000c2] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at Mono.Linker.Steps.MarkStep.ProcessMethod (Mono.Cecil.MethodDefinition method) [0x001b1] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at Mono.Linker.Steps.MarkStep.ProcessQueue () [0x0001b] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:    --- End of inner exception stack trace --- [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at Mono.Linker.Steps.MarkStep.ProcessQueue () [0x00047] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at Mono.Linker.Steps.MarkStep.ProcessPrimaryQueue () [0x0000a] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at Mono.Linker.Steps.MarkStep.Process () [0x00102] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at Mono.Linker.Steps.MarkStep.Process (Mono.Linker.LinkContext context) [0x0000d] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at MonoDroid.Tuner.MonoDroidMarkStep.Process (Mono.Linker.LinkContext context) [0x0000b] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at Mono.Linker.Pipeline.ProcessStep (Mono.Linker.LinkContext context, Mono.Linker.Steps.IStep step) [0x0000d] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at Mono.Linker.Pipeline.Process (Mono.Linker.LinkContext context) [0x0000f] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at MonoDroid.Tuner.Linker.Run (Mono.Linker.Pipeline pipeline, Mono.Linker.LinkContext context) [0x00000] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at MonoDroid.Tuner.Linker.Process (MonoDroid.Tuner.LinkerOptions options, Mono.Linker.ILogger logger, Mono.Linker.LinkContext& context) [0x00071] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at Xamarin.Android.Tasks.LinkAssemblies.Execute (Java.Interop.Tools.Cecil.DirectoryAssemblyResolver res) [0x001dd] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at Xamarin.Android.Tasks.LinkAssemblies.RunTask () [0x0001b] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(1952,5): error XALNK7000:   at Xamarin.Android.Tasks.AndroidTask.Execute () [0x00000] in <6058e84c219b4da3a4d18108456c91f7>:0  [/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/UnnamedProject.csproj]
Done executing task ""LinkAssemblies"" -- FAILED. (TaskId:125)
```

However, this is caused by the wrong `mscorlib` being passed to the `LinkAssemblies` task:

```
Task ""LinkAssemblies"" (TaskId:125)
  Task Parameter:UseSharedRuntime=False (TaskId:125)
  Task Parameter:MainAssembly=/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/bin/Release/UnnamedProject.dll (TaskId:125)
  Task Parameter:OutputDirectory=obj/Release/android/assets/ (TaskId:125)
  Task Parameter:LinkMode=SdkOnly (TaskId:125)
  Task Parameter:PreserveJniMarshalMethods=False (TaskId:125)
  Task Parameter:
      ResolvedAssemblies=
          /Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/bin/Release/UnnamedProject.dll
                  HasMonoAndroidReference=True
                  OriginalItemSpec=bin/Release/UnnamedProject.dll
                  ReferenceAssembly=/Users/runner/runners/2.165.1/work/1/s/bin/TestRelease/temp/Bug12935_True/bin/Release/UnnamedProject.dll
                  TargetFrameworkIdentifier=MonoAndroid
          /Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/Java.Interop.dll
                  CopyLocal=false
                  FrameworkFile=true
                  FusionName=Java.Interop, Version=0.1.0.0, Culture=neutral, PublicKeyToken=84e04ff9cfb79065
                  OriginalItemSpec=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/Java.Interop.dll
                  ReferenceAssembly=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/Java.Interop.dll
                  ReferenceSourceTarget=ResolveAssemblyReference
                  ResolvedFrom={TargetFrameworkDirectory}
                  TargetFrameworkIdentifier=MonoAndroid
                  Version=
          /Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v10.0/Mono.Android.dll
                  CopyLocal=false
                  FrameworkFile=true
                  FusionName=Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=84e04ff9cfb79065
                  OriginalItemSpec=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v10.0/Mono.Android.dll
                  ReferenceAssembly=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v10.0/Mono.Android.dll
                  ReferenceSourceTarget=ResolveAssemblyReference
                  ResolvedFrom={TargetFrameworkDirectory}
                  TargetFrameworkIdentifier=MonoAndroid
                  Version=
          /Library/Frameworks/Mono.framework/Versions/6.10.0/lib/mono/4.5/mscorlib.dll
                  CopyLocal=true
                  FusionName=mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
                  OriginalItemSpec=/Library/Frameworks/Mono.framework/Versions/6.10.0/lib/mono/4.5/mscorlib.dll
                  ReferenceAssembly=/Library/Frameworks/Mono.framework/Versions/6.10.0/lib/mono/4.5/mscorlib.dll
                  ReferenceSourceTarget=ResolveAssemblyReference
                  ResolvedFrom=/Library/Frameworks/Mono.framework/Versions/6.10.0/lib/mono/4.5/mscorlib.dll
                  Version=
          /Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.Core.dll
                  CopyLocal=false
                  FrameworkFile=true
                  FusionName=System.Core, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e
                  OriginalItemSpec=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.Core.dll
                  ReferenceAssembly=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.Core.dll
                  ReferenceSourceTarget=ResolveAssemblyReference
                  ResolvedFrom={TargetFrameworkDirectory}
                  Version=
          /Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.dll
                  CopyLocal=false
                  FrameworkFile=true
                  FusionName=System, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e
                  OriginalItemSpec=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.dll
                  ReferenceAssembly=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.dll
                  ReferenceSourceTarget=ResolveAssemblyReference
                  ResolvedFrom={TargetFrameworkDirectory}
                  Version=
          /Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/Facades/System.Runtime.dll
                  CopyLocal=false
                  FrameworkFile=true
                  FusionName=System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
                  OriginalItemSpec=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/Facades/System.Runtime.dll
                  ReferenceAssembly=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/Facades/System.Runtime.dll
                  ReferenceSourceTarget=ResolveAssemblyReference
                  ResolvedFrom={TargetFrameworkDirectory}
                  Version=
          /Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.Xml.dll
                  CopyLocal=false
                  FrameworkFile=true
                  FusionName=System.Xml, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e
                  OriginalItemSpec=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.Xml.dll
                  ReferenceAssembly=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.Xml.dll
                  ReferenceSourceTarget=ResolveAssemblyReference
                  ResolvedFrom={TargetFrameworkDirectory}
                  Version=
          /Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.Net.Http.dll
                  ReferenceAssembly=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.Net.Http.dll
          /Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/Facades/System.Drawing.Common.dll
                  ReferenceAssembly=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/Facades/System.Drawing.Common.dll
          /Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.Runtime.Serialization.dll
                  ReferenceAssembly=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.Runtime.Serialization.dll
          /Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.ServiceModel.Internals.dll
                  ReferenceAssembly=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.ServiceModel.Internals.dll
          /Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/Mono.Security.dll
                  ReferenceAssembly=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/Mono.Security.dll
          /Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.Numerics.dll
                  ReferenceAssembly=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.Numerics.dll
          /Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.ComponentModel.Composition.dll
                  ReferenceAssembly=/Library/Frameworks/Mono.framework/External/xbuild-frameworks/MonoAndroid/v1.0/System.ComponentModel.Composition.dll (TaskId:125)
```

I am unable to reproduce the error locally (tried both with XA `master` and this PR). @github, @github any clue as to what might be going on?"
"Yes I'm using duplicate tab(with keyboard shortcut and from command pallete), It doesn't work, it goes back to starting directory. If you are not having this problem(simply open a new terminal, change directory, press duplicate tab) probably I'm doing something wrong(but this procedure worked for me in prev version it introduced in Terminal Preview)"
"Reading through `ModifyEntriesFromPreviousTable` I believe their is an assumption that `newOutputs` here is order dependent. Basically that the source generator providing `_func` to this node has an obligation to produce the same output in the same order for the same input. 

Is my understanding correct here and if so where do we document that? 

Most importantly if the generator violates that what goes wrong? Do we gracefully recover somehow? "
"It's still wrong, since it's formal _now_ :smile:

There's a FormalSince field that should be added when an informal protocol turns formal:

```
[Protocol (FormalSince = ""10.12"")]
```"
"So this 0135 error is a bit similar to https://docs.microsoft.com/en-us/xamarin/ios/troubleshooting/mtouch-errors#MT0091 in the sense you want people to update their Xcode or enable the linker. I think you should copy or take inspiration from the detailed ""enable the linker"" explanation in 0091.

Also I have to admit that I'm a bit confused with the general wording of this error, not sure I understand.

If I go line by line:

> Did not link system framework '{0}' as Xcode SDK '{1}' is too old.

ok, couldn't, link Xcode too old.

> Xamarin.iOS contains API bindings for the listed framework which is newer than the Xcode used.

The framework is newer than the Xcode used? That sounds weird. I don't understand this.

> They may fail at runtime as we are not linking against the required system framework.

The listed framework may fail or the API bindings :P ? The error is about a system framework and it's also the last element of the previous sentence so I think that grammatically ""they"" applies to the listed frameworks (am I wrong?).

Overall I'm confused with those 2 middle sentences that are supposed to explain the core of the issue (maybe it's just me).

If I try really hard to parse this error I get that it's basically https://docs.microsoft.com/en-us/xamarin/ios/troubleshooting/mtouch-errors#MT0091.
We can't ""link"" some frameworks because they are simply not available in the currently selected Xcode (too old). Some APIs in Xamarin.iOS depend on those frameworks (hence the error) and because we couldn't link them it's gonna fail at runtime. You can either upgrade Xcode to get the new framework or enable the linker so those APIs are skipped.

Anyway, we _might_ need to rephrase this, it's not crystal clear for me on the first read, it's very technical and hard to digest and I don't know if users will just understand this."
"It's a revert of this fix, which turned out to be wrong: cf126061a98b81300ded3974b60817af0efcbff4."
wrong name -> should be `SetUserTrackingMode`
"I wanted to say that we don't use tabs in this repo, only spaces. But it seems this file is wrong, using tabs. 
Our setting is 4 spaces per tab."
"> Somehow it feels like cheating...

That's why I called it a wild idea, it feels wrong to me too :smile:

> Maybe we could add an `[Obsolete]` on `NSString.FromHandle` ?
> maybe better adding an Advice?

I don't lean particularly in any way, I think either would work just fine.

"
"Yes, interesting disconnect there. The comment isn't wrong, in that raw strings can be _potentially_ dedented, but definitely outside the scope of this PR."
"I took another look at this just now and I think that each `ProcessManager.*.cs` needs its own copy of this method since it is called from `EnsureState` in `Process.cs` (which I _think_ is for all platforms).
I could very well be wrong though as this is my first multi-targetted solution that I've worked on, so do feel free to jump in and make any changes!"
I was copying these commands. Are they wrong? https://github.com/dotnet/dotnet-docker/blob/master/3.0/sdk/stretch/arm64v8/Dockerfile
"This one's confusing me, so I'll try to explain the logic. Please correct me if I got it wrong:

The [rmdir docs](https://man7.org/linux/man-pages/man2/rmdir.2.html) say:

```
ENOENT A directory component in pathname does not exist or is a dangling symbolic link.
```

So if we get ENOENT, it means the current entry is a symlink. And only if the current entry is the top level, we avoid deleting the contents of the link _target_ recursively. We achieve this by returning `true`, to assume the operation succedeed.

Was that correct?


But then, why do we throw (by going to default) if the current entry is not the top level?"
">> 4 tests failed, 103 tests passed.

> @github those are unrelated to your PR and already fixed in HEAD (just rebase to get the fix)

I was wrong (same suites but different reasons or I opened the wrong log file). 

The failures are related to the PR and are still present in the last build (along new ones).

```
[FAIL] PreserveTypeWithCustomAttribute : type 
[FAIL] IntPtrSizeTest : empty body 
Tests run: 83 Passed: 81 Inconclusive: 0 Failed: 2 Ignored: 13
```

Those might have to be _adapted_ since the dotnet linker behave differently. Lack of custom preserve and how IntPtr.Size is removed.

The two ""new"" ones happens because the dynamic registrar is removed - but some tests are not happy (meaning something else is missing to make this work properly)."
"> This structure has nothing to do with stack. Is the comment wrong?

Yes.
I should add a macro at here, `prestup.cpp-Line:2363 #elif  defined(TARGET_ARM) || defined(TARGET_ARM64) || defined(TARGET_LOONGARCH64)`

But I also have a question.
Previous within the .NET6-runtime, the initialing code is in the file `src/coreclr/zap/zapimport.cpp:489`.
But now the zapimport.cpp had been deleted.
Not only the LoongArch64, the others architecturs also do nothing for initialing the m_rgCode.
"
"Why I appreciate the info, it is still wrong to say you release something when you do not.  Even if it is not necessary to release it.  (I actually assumed that `await` does the disposing too, silly me.)"
"I don't know if I can remove it without altering some behavior.
`verHandleVerificationFailure` calls `verConvertBBToThrowVerificationException` which will set the `BBF_FAILED_VERIFICATION` flag. `verHandleVerificationFailure` is used in two places:
```cpp
    PAL_EXCEPT_FILTER(FilterVerificationExceptions)
    {
        verHandleVerificationFailure(block DEBUGARG(false));
    }
    PAL_ENDTRY
```
```cpp
            if (!impSpillStackEntry(level, tempNum
#ifdef DEBUG
                                    ,
                                    true, ""Spill Stack Entry""
#endif
                                    ))
            {
                if (markImport)
                {
                    BADCODE(""bad stack state"");
                }

                // Oops. Something went wrong when spilling. Bad code.
                verHandleVerificationFailure(block DEBUGARG(true));

                goto SPILLSTACK;
            }
        }
```

I imagine we want to remove it? If so, we can file a separate issue and PR for it."
"the file on disk is only for debugging purposes, so I assumed it simply didn't have .cs before. but it seems I'm wrong:
 `...generated\System.Private.CoreLib.Generators\Generators.EventSourceGenerator\RuntimeEventSource.Generated.cs`"
"I have the following error when trying to run the app:
```
dotnet ./nnyeah/bin/Debug/net5.0/nnyeah.dll -i ./nnyeah/bin/Debug/net5.0/nnyeah.dll -o foo
Unhandled exception. System.Exception: Module is not loaded. Call Load first.
at nnyeah.Reworker.CheckModule() in /Users/mandel/Xamarin/xamarin-macios/xamarin-macios/tools/nnyeah/nnyeah/Reworker.cs:line 63
at nnyeah.Reworker.NeedsReworking() in /Users/mandel/Xamarin/xamarin-macios/xamarin-macios/tools/nnyeah/nnyeah/Reworker.cs:line 44
at nnyeah.Program.Main(String[] args) in /Users/mandel/Xamarin/xamarin-macios/xamarin-macios/tools/nnyeah/nnyeah/Program.cs:line 48
[1] 30975 abort dotnet ./nnyeah/bin/Debug/net5.0/nnyeah.dll -i -o foo
```
And the indentation of Program.cs is wrong:
<img width=""894"" alt=""Screenshot 2022-03-29 at 13 19 23"" src=""https://user-images.githubusercontent.com/2190086/160669061-c75fe0d3-91ff-427c-a3fa-a52f24d45ac6.png"">

"
It was wrong before.
"Why `Obtain`? Anything wrong with just `Get`?
"
"Vector restore happens at two places: 
- At the end of every block, whenever any `largeVectorVars` was partially spilled
- At the locations where we see the use

While it should be safe to eliminate the restores (and hence the saves) that happen for #1 above if the block is a THROW block, but there can be a scenario (as you pointed out) where eliminating save/restore will be wrong:

```asm
save(Vx)  ; <- shouldn't be eliminated because of the use
CALL ...
Vx = restore() ;  <- shouldn't be eliminated because of the use
 = use(Vx)
...
THROW
```

Since UpperVectorSave refpositions are created when we build kills, it is hard to look ahead to see which ones of them will be used (and hence restored) and thus can be eliminated. For e.g. in following case, we can (should) eliminate the unnecessary save/restore.

```asm
save(Vx)  ; <- safe to eliminate
CALL ...
Vx = restore() ;  <- safe to eliminate
...
THROW
```

To summarize, I was trying to eliminate vector saves, but it might not be safe (as Bruce pointed), so I will just try to at least eliminate the restore that happens at the end of the THROW block."
"I made the change in symbolDisplay. I'm not sure if it's right, although it's a filter on `!isThisExpression`, which is used in at least half of the other checks, so it's at least right/wrong in the same way as the rest of the code."
"`Condition=""'$(NoRestore)' != 'true'""`? Otherwise /p:NoRestore=false would do the wrong thing.
"
"That error is wrong, then, because `this.no` is an expression, not a type. The type would be like `let x: this['no']`."
"This is wrong. This will make an empty `safeList`, so nothing will pass the safety check. Should make it `undefined` instead.
"
"I chose wrong source branch, close that PR."
"Hey @github, something went wrong when looking for the build artifact. ([You can check the log here](https://typescript.visualstudio.com/TypeScript/_build/index?buildId=79129&_a=summary))."
"> The safety here is guaranteed by the fact that there is a dedicated property

What if there is a corner case bug in DictionarySlim where the property returns wrong size?"
"> src/coreclr/scripts seems like the wrong location for superpmi.proj. Wouldn't it be better in eng/pipelines/coreclr? It would be ""next to"" the users in that case.

True, but I didn't see any `.proj` files under `eng/pipelines` folder, so created it under `src\coreclr\scripts`. I am not sure if that is intentional or it is just that we have .proj files under `src\coreclr`. Let me know what you think and I will change it accordingly."
"I still think @github’s example is a _little_ suspicious with `--strictNullChecks` but without `--noUncheckedIndexedAccess`. The inheritance I think is immaterial; what we’re asking is, under what circumstances does it make sense to allow

```ts
interface Foo {
  [key: string]: string;
  foo?: string;
}
```

With _just_ `--strictNullChecks`, the type of the property signature of `foo` _is_ `string | undefined`, but reading an arbitrary string key will give you a `string`. Everyone knows that you’ll actually often get an `undefined` value at runtime (in absence of a Proxy or something), but our stance has always been one of _consistently_ ignoring the possibility of `undefined`—your other properties must be assignable to the index signature type, not the index signature type or `undefined`. That way, when you read an arbitrary key and get the result `string`, at least we don’t _know_ of any property names that would give you something different. This is a pretty weak defense in my opinion, but it’s the historical status quo. I think it wouldn’t be totally unreasonable to change our stance and allow optional properties alongside non-nullable index signatures. Then, when you read an arbitrary property and we give you a `string`, well, it’s wrong, but the undefined-ness of `foo?: string` doesn’t make it _more_ wrong than the undefined-ness of the infinite number of missing properties.

If we add `--noUncheckedIndexedAccess`, it starts to make more sense. Now, reading an arbitrary key of `Foo` will give you `string | undefined`, so the read type of the index signature and the read type of `foo?: string` agree. Having thought about it for a while now, I have no reservations about allowing this.

If we _also_ add `--strictOptionalProperties`, it feels like all the remaining holes can be plugged:

```ts
interface Foo1 {
  [key: string]: string;
  foo?: string; // ok, because like the index signature, this means if the property is present, its type is 'string'
}

interface Foo2 {
  [key: string]: string;
  foo?: string | undefined; // error, because unlike the index signature, this property may be set to 'undefined'
}

declare let dict: { [key: string]: string };
declare let foo1: { foo?: string };
declare let foo2: { foo?: string | undefined };

dict = foo1; // ok, because `foo` is 'string' if present
dict = foo2; // error, because it may introduce a present-but-undefined property
```

This gets to the essence of #41921—when you’re assigning an object with optional `string` properties to an object with a `string` index signature, we wanted to give you the benefit of the doubt that what you _mean_ is that those properties are either `string`s or _not present_. We had no way of enforcing that, and needed to reduce the breakiness of fixing #41418, so we chose to allow the unsoundness, given the rest of the unsoundness around index signatures. But if we had had a way to distinguish undefined and missing properties from the beginning, I think it would have worked the way I wrote it above. Unfortunately, the examples in that last code block really depend on _both_ `--noUncheckedIndexedAccess` and `--strictOptionalProperties` being set to make sense, and I don’t know if it’s worth it in practice to treat that unique combination specially. But conceptually, it really does feel like they complement each other nicely and finally make sense out of the index signature story."
Closing in favor of https://github.com/dotnet/runtime/pull/49591.  It seems like something is wrong with this PR.
"> @github @github @github could you please advise what is wrong here?
https://dev.azure.com/dnceng/public/_build/results?buildId=1082685&view=logs&jobId=f217f715-90ad-5404-53bd-b93e3b80f465&j=f217f715-90ad-5404-53bd-b93e3b80f465&t=d9b45970-da80-576b-c4ba-5d7bc638e9e8

> This is browser/AOT/Mono error. do we need to add something to Mono's runtime or should I exclude it?

See 

https://github.com/dotnet/runtime/blob/87798e77ba3bf84bc16645305ca268d20cb81dc6/src/libraries/System.Private.CoreLib/src/System.Private.CoreLib.Shared.projitems#L1106-L1108

This falls into the same category as https://github.com/dotnet/runtime/issues/50210. We need to make sure we aren't regressing size on Blazor WASM when we are making new calls to ICU.
"
"> @github it looks like there are a couple Android and WASM specific failures. Would you be able to provide some pointers on how to debug/diagnose what's wrong here?

I don't see android failures.

The WASM failure looks related to AOT and generic sharing - that's probably expected at this point. /cc @github "
"Correct me if I am wrong but here is what happening:

Imagine A() calls B() which is R2R'd:
```
A() -> [precode] -> [callcounting] -> R2R'd B()
```
after 30 calls we get this (with this PR):
```
A() -> [precode] -> tier0 B()
```
from my understanding I have to either:
1) Allocate a new call-counting stub and patch [precode] again
2) ""Patch"" the initial [callcounting] stub to look at tier0 instead of r2r and reset the call-counting-cell

![image](https://user-images.githubusercontent.com/523221/174601901-16f26dc4-f36e-4bfb-8b75-804c2263d2a8.png)
"
"> (or perhaps routing patterns like /users/{fullname} matching /users/bob.gif - Bob Gif is a possible real name).

The developer could still support this if they wanted by adding their own handler for `ExternalNavigationStarting` and indicating that they want the URL to be opened in the webview (but this does seem like a bit of a hack IMO). Whereas, if we always loaded internal resources in the webview, I don't know that we have a way for the developer to override that behavior to support external navigation.

But there's something else: I think the existing fallback routing logic could still cause problems anyway for URLs ending in `.<something>`. I wonder if we should do something like re-processing the request as a navigation event if we fail to load an internal resource from the request URL (basically falling back to the host page if our initial guess was wrong). That way, users hopefully won't ever get the weird ""There was no content at _____"" page."
"Weird, it appears that this is wrong. [MS Ext Logging Debug is still at 6.0.0](https://www.nuget.org/packages/Microsoft.Extensions.Logging.Debug/6.0.0), so this fails the template test: `error NU1103: Unable to find a stable package Microsoft.Extensions.Logging.Debug with version (>= 6.0.1)`.

I'll need to check which variable I should really be using here... or maybe some of the variables in the repo are just wrong..."
Just to be sure: we want to show it on 17.3 and up but not yet right now. Converting to draft just to be sure we don't push wrong buttons too early. But thanks for the quick reviews! :D
"Come thing is iffy with this PR. Billions of changes.

I am wondering where it is supposed to go and maybe a merge happened from a wrong branch? "
Am I crazy? https://github.com/aspnet/AspNetCore/pull/13138/files#diff-ab56cd4be78548275aa24134d6d8b06aR6
"@github @github this looks **Just Wrong:tm:** Why didn't the package move to `5.0.1-servicing.20566.8`❔

@github another possibility is this might be yet-another remnant of the extra dotnet/runtime builds (like most of the 5.0.0 SHA updates in this file). Will those SHAs and this version be fixed in the first dependency PR after you clear things out❔"
"> typeof(Enum).GetMethods(BindingFlags.Public | BindingFlags.Static) is visible to the linker but I'd need to make sure.

Yes. It is a bug in NativeAOT: https://github.com/dotnet/runtimelab/issues/1402

Once this bug gets fixed, this will be broken again.

FWIW, I think fallbacks like this are wrong way to fix trimming and AOT friendliness issues."
"I think you could do `BeforeTargets=""FindReferenceAssembliesForReferences;ResolveReferences""` to resolve @github's concern.

It wouldn't be _wrong_ to specify a `DependsOnTargets` to ensure that `ReferencePath` is populated, @github, but it's not required because there's sufficient ordering in the targets--by the time `FindReferenceAssembliesForReferences` is considered, it's already populated."
"It seems like we now believe this case to be invalid -- namely that it's OK to pass `utf8output` even if not writing to `Console.Out`. I'm not sure that's wrong, but I'd like to understand if we took any dependencies on that fact."
"> commonly occurring ambiguity in the language that occurs when we encounter an open paren (which starts different contexts like a cast or a parenthesized subexpression), and which occurs very frequently

Indeed.  That would be one of those places that i talked about where we might have a simple lookahead system solely for determining which direction in the ambiguity to prefer; but always knowing we might be wrong and might need to fallback to the other path.

But, again, i totally agree.  This is not the right time for such a change.  And it may never be valuable enough to make this change.  Thanks for listening :)"
"@github @github @github this PR adds the `RequiresPreviewFeaturesAttribute` to the enum values for the Http3 protocol, yet our sample using that protocol gives no warning: https://github.com/dotnet/aspnetcore/blob/eb0f414830a5468d0fba0c885b0a9ed0227292f0/src/Servers/Kestrel/samples/Http3SampleApp/Program.cs#L48 This is surprising, are we doing something wrong?"
">IArgumentOperation (ArgumentKind.Explicit, Matching Parameter: format) (OperationKind.Argument, Type: null, IsInvalid) (Syntax: 'format: """"""""') [](start = 6, length = 143)

>IArgumentOperation (ArgumentKind.Explicit, Matching Parameter: format) (OperationKind.Argument, Type: null, IsInvalid) (Syntax: 'format: """"""""') [](start = 6, length = 143)

I think this is wrong, we are not supposed to create IInvocationOperation when there are issues with mapping arguments to parameters. The IInvocationOperation can be created only for successful overload resolution case. #Closed"
I find it odd that it seems to ask for the 2010 build tools on the failing parts of the CI. I think there is something going wrong somewhere with that one.
"Tests still failing. Looks like this may actually be a regression.

cc/ @github any ideas on what may be going wrong here?"
"You are right, it is weird, I made more  some test and I saw my logic was wrong, I change it.

I add that test you suggest
`class C { void Goo(string[] array) { array[$$ ...`"
Seems I've been sorting in the wrong location. This isn't important. Sorting the TextChange before they are applied is more correct. It doesn't change the location of the inserts but ensures they are alphabetized when inserted.
"note: the above seems wrong.  it seems like we would want to call into formatting from us, so that we can accurately track the entire before/after span of the change.  **however**, what we would also want to do is *disconnect* from listening to buffer changes while this is happening.  "
"why are we ever using Interlocked like this instead of a simple lock.  Locks are really really great.  They are clear, prevent any sort of confusing overlapping, and are often extremely efficient.  They can occasionally be contention points in extremely hot-spots.  But unless AddAnalyzer is that sort of hotspot, this seems totaly like the wrong way to write ths."
"I'll move this into a separate PR, but I'm pretty sure it's wrong as-is. Right now, marshaling LPTSTR and back will have a broken conversion, see https://github.com/dotnet/runtime/pull/35190/files#diff-b2e5b24920b37f04d29374c6ec4856c4L467. Given the docs specify it's a platform-dependent string, this looks right to me.

From what I can tell AnsiBSTR, LPSTR, LPTSTR, and TBSTR are all partially wrong or unimplemented in netcore. AnsiBSTR only goes one way, LPSTR is treated as a UTF8STR for legacy reasons (not applicable in netcore), LPTSTR has this issue so I think I could cook up a test case that would cause a crash, and TBSTR only goes one way.

Sadly, only AnsiBSTR, BSTR, and LPSTR are covered by the CoreCLR tests right now, but I think I should be able to reuse the existing tests with the other types as well. There are a lot of interop-related test failures, but hopefully that will clear up any with the strings themselves."
That's the wrong `modeId` - it should be `languageAlias`
"Correct me if I'm wrong - 

1. The primary key binding scheme is applied to Windows and Linux builds. Mac has it's own primary binding object specified.
2. `KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_1` is MAC-primary for ""Toggle Editor Layout"", while it's WIN/LINUX-primary for ""MoveEditorToFirstGroupAction"".
3. Any other suggestions?

"
">(FunctionPointerTypeSymbol) [](start = 34, length = 27)

This feels wrong. How could this cast succeed on an ITypeSymbol? #Closed"
"Probably not. The call to `Lease` is only required because the static methods of `raw` have the wrong signature. The fact that this pattern stands out as strange is really by design. If the `raw` methods took a `SafeHandle` directly, the marshalling infrastructure would automatically take the lease for the call."
"In `C`, `thread_local` is defined as `_Thread_local` by thread.h.  Support for both seem to be missing from MSVC when compiled as `C`. (I might be wrong for MSVC non-standard implementation though)

Since we are only using this for DAC unwind, I assumed thread_local didn't matter, but I might be proven wrong."
"If you remove validate, then you'll face bug 41960. Coerce will set Value to 100 (user intends 150). If you keep validate, then the user knows to update Minimum and Maximum first before setting Value to 150 as validate will error out.

Maybe I'm thinking this wrong, but I'd rather remove coerce than validate. 
"
" Hi all. I googled some ℹ️ information about a few features with no result:

```
editorWarning.foreground
editorWarning.border
editorHint.foreground
editorHint.border
problemsWarningIcon.foreground
```

 In order to understand, please provide some screenshot, screencast or short video❗ 

P.S. ··· documentation on [official site](https://code.visualstudio.com/api/references/theme-color) sucks, thanks❗

Best Regards✌️ "
"It might just be me, but this is very confusing to me. Could we maybe rename `_energySaveModeDisabled` to `_isPowerSaveModeEnabled` or something like that? Of `powerSaveOn` to `isPowerSaveDisabled` I don't care which will be renamed, at least it should be clearer than this :)

Inverting values with naming like enabled and disabled always gets me on the wrong track. Anything we can do to prevent that I think is for the best."
"- If this is only broken on APIi 19 then shouldn't we only do this if it's running on an API 19 device?
- I'm still curious if this also breaks if you have a Material Frame with a SearchView. If it doesn't than I wonder if the styles are setup wrong for the scrollview?
- if we end up going this route then I think we'd want to use this extension method . https://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Platform.Android/ContextExtensions.cs#L101
"
"Wait does it though? Or am I looking at the wrong thing here?

```
2020-09-15 15:47:52 [INFO  ]   Generated reports:
2020-09-15 15:47:52 [INFO  ]   ----------------------------------------------
2020-09-15 15:47:52 [INFO  ]   ----------------------------------------------
2020-09-15 15:47:52 [INFO  ]   Reports generated in folder /github/workspace/super-linter.report
2020-09-15 15:47:52 [WARN  ]   Report output folder (/github/workspace/super-linter.report) does NOT exist.
```

That sounds like it wants a directory for that path, not a file. Also, it looks like the path should be `github/workspace/super-linter.report`, not `github/workflows/super-linter.report`.


https://github.com/github/super-linter seems to cocnur that it's supposed to be a path to a folder:

> ENV VAR | Default Value | Notes
> -- | -- | --
> OUTPUT_FOLDER | super-linter.report | The location where the output reporting will be generated to. Output folder must not previously exist.


But maybe I'm not understanding how that part works"
"I'm fairly surprised by this ordering: the C# version is `internal partial`, not `partial internal`. This seems wrong."
@github is anything wrong with this addition ...?
"But we only add things to [assemblies list](https://github.com/dotnet/runtime/blob/ddc83ad2b6f0127f81486301185c57f8e9aac055/src/mono/wasm/runtime/driver.c#L185), if the come from _load_assets_and_runtime, am I wrong?"
"@github So, I don't think you're wrong. The trick here is that the `TermControl` only knows about a  `...TerminalControl.IKeyBindings`, not a whole `KeyMapping`. I think yours is probably _better_, it's more specific. That being said, I don't want all consumers of a TerminalControl to need to implement a whole `KeyMapping` themselves. (Like I don't want force VS to conform to the implementation of keybindings that the Windows Terminal has chosen, if that makes sense).

TermControl's key interactions are likely to get blown up anyways with the work I'm planning for #5000, so I'm not too worried about this right now. Good chance it's gonna have to be re-written anyways 😅  "
"Yes, it's a crazy method that does all sorts of fancy interlocked reading. It's the same method we use for the other GetDocument and friends."
"> Implementation only works on a full build
> Requires commit in product.json

Yes I believe all of this is expected and is the same as Desktop. The commit is used in the path of one of the localization files and also when running out of sources we don’t bundle files (for easier debugging) but bundling is important for the localization feature. @github please let me know if I have this wrong.
"
"I suppose this needs a `File.Exists()` check...

What *should* happen if a file doesn't exist?  Or is the file not existing a sign that something else went wrong?"
"I believe that this logic is wrong.

I applied this patch:

```diff
diff --git a/src/monodroid/jni/embedded-assemblies.cc b/src/monodroid/jni/embedded-assemblies.cc
index 0577db22..3025efec 100644
--- a/src/monodroid/jni/embedded-assemblies.cc
+++ b/src/monodroid/jni/embedded-assemblies.cc
@@ -100,6 +100,7 @@ EmbeddedAssemblies::get_mmap_file_data (XamarinBundledAssembly& xba)
 inline void
 EmbeddedAssemblies::load_assembly_debug_info_from_bundles (const char *aname)
 {
+       log_warn (LOG_DEFAULT, ""# jonp: load_assembly_debug_info_from_bundles: aname=%s"", aname);
        if (!register_debug_symbols || !bundled_assemblies_have_debug_info || aname == nullptr)
                return;
 
@@ -112,11 +113,13 @@ EmbeddedAssemblies::load_assembly_debug_info_from_bundles (const char *aname)
                // We know the entry has one of the debug info extensions, so we can take this shortcut to
                // avoid having to allocate memory and use string comparison in order to find a match for
                // the `aname` assembly
+               log_warn (LOG_DEFAULT, ""# jonp: load_assembly_debug_info_from_bundles: strncmp(%s, %s, %i)"", entry.name, aname, (int) aname_len);
                if (strncmp (entry.name, aname, aname_len) != 0)
                        continue;
 
                size_t ext_len = strlen (entry.name) - aname_len;
                if (ext_len != 4 || ext_len != 8) { // 'Assembly.pdb' || 'Assembly.{exe,dll}.mdb'
+                       log_warn (LOG_DEFAULT, ""# jonp: load_assembly_debug_info_from_bundles: extension mismatch"");
                        continue;
                }
 
```

`adb logcat` output contains:

```
# jonp: load_assembly_debug_info_from_bundles: aname=UnnamedProject
# jonp: load_assembly_debug_info_from_bundles: strncmp(UnnamedProject.pdb, UnnamedProject, 14)
# jonp: load_assembly_debug_info_from_bundles: extension mismatch
# jonp: load_assembly_debug_info_from_bundles: strncmp(FormsViewGroup.pdb, UnnamedProject, 14)
# jonp: load_assembly_debug_info_from_bundles: strncmp(Xamarin.Forms.Core.pdb, UnnamedProject, 14)
# jonp: load_assembly_debug_info_from_bundles: strncmp(Xamarin.Forms.Platform.Android.pdb, UnnamedProject, 14)
# jonp: load_assembly_debug_info_from_bundles: strncmp(Xamarin.Forms.Xaml.pdb, UnnamedProject, 14)
# jonp: load_assembly_debug_info_from_bundles: strncmp(Mono.Android.pdb, UnnamedProject, 14)
```

In order for `mono_register_symfile_for_assembly()` to be called, we must *not* print `extension mismatch`, yet we do.

One #facepalm later, and it's because of the `||`!  `ext_len` is 4, but it *isn't* 8, and the result of `ext_len != 4 || ext_len != 8` is True, because `ext_len != 8`!

This should be `&&`!
"
"> > Here's a jumbo gif for funsies:
> 
> wait why did switching to `""experimental.rendering.software"": true` _increase_ GPU usage? Shouldn't it do the opposite?

I didn't even look at that.... I was looking at the last column with ""GPU Engine"" and watching it disappear. My theory would be that the GPU is wasting more time because it's receiving so much data off the bus after the CPU rasterizes it and that's what makes that spike. It's not like the GPU isn't involved in displaying the frames still.... it just isn't responsible for assembling them.

> I’m supposed to block this because the “atomic is wrong” :)

Thanks, bro."
"This updated path for `configure` doesn't look right. `$(_MonoPath)` already includes `$(_SourceTopDir)` (unless my suggested change is done), so I believe that this is equivalent to `$(_SourceTopDir)\..\$(SourceTopDir)\external\mono`, which would be wrong.
"
"So, a couple notes outside of the discussion about Solarized:

* This change was cherry-picked into the release branches (release-1.1 at cb52de02e70b8872471db39e4945d560f8736d29, release-1.2 at ccf201fe440fd8163115f8630eb4a0529d420f50), and the tags are made on the commits in the release branches.
* #293 is fixed to the best of our ability
   * James fixed color representation through the entire stack, which exacerbated an issue in PowerShell (PowerShell/PSReadline#830)
   * Because of that issue, we broke `40` _specifically for PowerShell_ (#6810). This is very narrowly targeted. Once the change that fixes PowerShell/PSReadline#830 (PowerShell/PSReadline#1626) has a wider install base, we'll revert the workaround and `40` will work fine.

---

You're right that we're not following Solarized's ""canonical"" color mappings... but neither is gnome-terminal. Generally, though, I'm concerned about this:

> ""your dark background has the wrong brightness relationship ...""

That's fair and well-specified from a Solarized standpoint, but any other terminal would consider the default Solarized mappings to have the wrong brightness relationship between ""black"" and ""bright black"". Nobody has strictly defined that ""bright black"" must indeed be brighter than ""black"", but it's right there in the name.

I'm checking `base02` on `base03` because we _do_ see that color combination in the wild. PowerShell's default configuration prints `90` on `49` (or `90` on `40` in traditional consoles predating Windows 10). If we use [cmd-colors-solarized](https://github.com/shanselman/cmd-colors-solarized) _or_ the official upstream mapping, that means printing one base color on another base color.

Personally I'd rather yank all reference to Solarized from this repo forever than move color indices back and forth for all time, but that doesn't mean I'm not amenable to discussing it :smile:"
The entire rid is already included. I think it’s more useful to look at the entire string rather than a single character. It’s wrong in context not on its own.
"Ok, revisited the PR. Again, downloaded the branch and here's what I'm seeing (numbers refer to the points from [this comment](https://github.com/microsoft/terminal/pull/11153#pullrequestreview-760344068)):
1. `moveFocus` by `parent` passes the key down to the active terminal there is no parent.
   - [Resolution] ✅ Discussion showed I was wrong about the expected behavior. This works as expected!
2. `search`
   - [Resolution] 🏈🦶 punted to #11327 
3. `sendInput`/`copy`/`paste`: 
   - [Resolution] 🏈🦶 punted to #11327
4. `closePane`: Still cool 😉
5. `moveFocus`: I expected to see the focus move to another group of panes, but idk if that's even possible given the current infrastructure?
   - [Resolution] 🏈🦶 punted to #11327
6. `togglePaneZoom`:It feels a bit weird that you can only move focus using the mouse. `moveFocus` here makes the newly focused pane be the only one that's zoomed. Curious what others think of this, and if there's an ""expected behavior"" that I can't put my finger on (heck, this might be the correct behavior 🤷).
   - [Resolution] 🏈🦶 punted to #11327
7. `resizePane`: Still love it! 🥳
8. `toggleReadOnlyMode`: If we have a mix of states, we toggle on each of them. That seems right based on the action's name, but I wonder if the user would prefer one of these two ideas:
   - (1) toggle the top-left pane state, and make all other selected panes match that new state.
         - Inspiration: this is how MS Word handles text formatting with mixed states (i.e. ""hello world"" where one word is underlined and the other one isn't; if it's all selected and you press <kbd>ctrl+u</kbd>, we toggle the first run's state, then make the rest match it)
   -  (2) introduce a `setReadOnlyMode` action? (I like this idea less btw)
   - [Resolution] ~🏈🦶 punted to #11327~ EDIT: It's already done!!
9. `splitPane`: ❌ Still seeing this crash ☹️
10. `scrollUp`/`scrollDown`/etc...: I expect the scroll commands to be sent to each of the terminals.
   - [Resolution] 🏈🦶 punted to #11327
11. `adjustFontSize`/`resetFontSize`: works perfectly! 🙌
12. `toggleShaderEffects`
    - ❌ broken, but differently. Now, if a subtree of 4 panes are selected, the 3 non-active panes toggle properly, but the active pane flashes then does nothing. I invoked it using the command palette, if that does anything.
13. `setColorScheme`
    - ❌ broken (same as before) the new scheme isn't _previewed_, it does properly set it after you select it, however. Seems to flash? Works on `main`.

Still want (9), (12), and (13) though fixed since (9) is a crash and (12)/(13) are regressions. After those get fixed, I'll approve and we'll merge this 🙂"
"In my eyes this is wrong because we should never get a `BoundExpressionStatement` here - but I can live with that.
And every case where it returns null is a (silent) error."
"Unfortunately this part becomes a bit complicated.

We can't do this, because it will make the api diffs for legacy Xamarin wrong (in fact this should be bumped to the apidiff reference from the `xcode13-ios` branch now).

However, we can't bump to the bundle.zip from the `xcode13-ios` branch, because it won't contain binaries for Xamarin.Mac (nor the .NET assemblies for that matter).

We really need a different bundle.zip for every platform, but for legacy Xamarin that's out of scope for this PR.

But what is possible is a middle ground: use a different url for .NET assemblies, and even better would be to make it possible to use a different url for each platform, so something like this:

```make
APIDIFF_REFERENCES_DOTNET_iOS=...
APIDIFF_REFERENCES_DOTNET_tvOS=...
APIDIFF_REFERENCES_DOTNET_macOS=...
APIDIFF_REFERENCES_DOTNET_MacCatalyst=...
```

because it's entirely possible we'll end up in the same situation again at some point (different stable versions of iOS and macOS), and this way we'd have a solution since we could have different reference bundles for different platforms."
"I don't understand these two paragraphs.  This is saying you can define a GeneratedDllImport with a jagged array, it'll marshal successfully and you won't get any indications you did something ""wrong"", but we still say it's ""unsupported""?  At a minimum if that's the case we should output a warning diagnostic even if we still allow code generation to proceed, but if we really want this to be unsupported, shouldn't we just block it entirely?  Or if there's no good reason to have it be unsupported, just support it."
"The answer to both your comments is that this code is closely couple to the result of `getSpecialPropertyAssignmentKind`, which returns `ExportsProperty` in two cases.

In this case, the code is **wrong** and should be checking `lhs.expression.kind`. I will fix it."
"It's easy to add, I think.

(Also, adding it exposed a bug: functions required `@github` in order to trigger the refactoring at all, which is wrong.)"
"This enables the analyzer, so I think it's good to have. Our guidance for most teams will probably be to mark everything IsTrimmable. There's less chance something goes wrong (e.g., you start publishing the project as a library, but forget to mark it trimmable for others)."
"It is, this was just the wrong place to use it.
"
"I see. It never failed for me so I did not know what could go wrong.
I hope the fix is sufficient.
"
"If users were able to put `override` on method, you'd get:

```
Non-abstract class 'Child' does not implement inherited abstract member 'myMethod' from class 'Parent'.
Method 'method' of 'Child' must override a super type method (or some such)
```

I'm arguing that it's useful to get the second error message, to more quickly determine what went wrong.

There's also the scenario where you refactor such that an interface you implement no longer needs you to implement `method`. With `override` on implementing methods, you'll get an error for code that's no longer useful."
"this is wrong. it should be ""x: m.x"" and not ""m.x: m.x""
"
"@github @github/jit-contrib - Can someone help me figure out how to determine what's going wrong with the perf runs? The log shows:
```
2020/06/03 15:37:29][INFO] Razor build server (process 7389) failed to shut down: The shutdown command failed: The application to execute does not exist: '/home/helixbot/work/BCB909DD/w/B34D09AF/e/.dotnet5273/sdk/5.0.100-preview.6.20266.3/Sdks/Microsoft.NET.Sdk.Razor/tools/netcoreapp3.0/rzc.dll'
[2020/06/03 15:37:29][INFO] 
[2020/06/03 15:37:30][INFO] MSBuild server shut down successfully.
[2020/06/03 15:37:30][INFO] $ popd
[2020/06/03 15:37:30][ERROR] Process exited with status 1
Traceback (most recent call last):
  File ""/home/helixbot/work/A7A00953/p/performance/scripts/benchmarks_ci.py"", line 264, in <module>
    __main(sys.argv[1:])
  File ""/home/helixbot/work/A7A00953/p/performance/scripts/benchmarks_ci.py"", line 250, in __main
    dotnet.shutdown_server(verbose)
  File ""/home/helixbot/work/A7A00953/p/performance/scripts/dotnet.py"", line 656, in shutdown_server
    get_repo_root_path())
  File ""/home/helixbot/work/A7A00953/p/performance/scripts/performance/common.py"", line 200, in run
    returncode, quoted_cmdline)
subprocess.CalledProcessError: Command '$ dotnet build-server shutdown' returned non-zero exit status 1.
+ export _commandExitCode=1
```
It's the same error for both the ""Linux x64 release coreclr net5.0"" and ""Linux x64 release mono net5.0"". It seems unlikely that this is an issue introduced with my PR. In the past I've found it possible to miss actual failures in these perf runs, but it reports 578 benchmarks run, and there are 578 instances of ""Process xxx exited with code 0"", so it doesn't appear to be an execution failure."
Dumb question: why can't each branch use their own version of this file?
"> The best would be to not call these functions if you want proper encrypted TLS.

So for, `EncryptionPolicy.RequireEncryptionDefault`, we should not call `SSL_CTX_set_cipher_list`?

> The choices that allow unencrypted TLS are also wrong as with the default SECLEVEL (which is 1) the eNULL ciphers are disabled.

I guess that means `EncryptionPolicy.NoEncryption` (`""eNULL\0""`) will always fail?
And `EncryptionPolicy.AllowNoEncryption` (`""ALL:eNULL\0""`) will allow any cipher?"
"@github `insertNodeInListAfter` has a bunch of quite complex logic where it examines the previous list item to deduce how the list is formatted (i.e., what the separator is, and where line breaks and spaces should go), whereas `insertNodeAtEndOfList` just blindly inserts `"", "" + yourListItemText`. But their names don’t suggest this discrepancy—`insertNodeAtEndOfList` just sounds like a special case of `insertNodeInListAfter`—which is how I made the mistake of using the dumb one in the first place."
"@github In the case of this example [playground](https://www.staging-typescript.org/play?ts=4.1.0-pr-40468-29#code/FDAuE8AcFMAIFkCuBnUA5RBbARtATgDwAqAfLALyyxGzQAeo0AdgCbKxNa56wD81sAFyxQACzwB7AO6wABgCIAonRgBjRiwA0sbIlCwAZhMStY8gCQBvCDAkHqAX3mywUOElQYc+AEzEylDT0jKzsnN48-DTCYpIyCspqGtq6+kYmLGZWNtB2js4gBibqAJYSTIYSEv4AFHTCHuhc+P7a4A0oTRF+pACUsJbAVFR0FLDgANywAPTTtHiSPEzSwA5AA),

```
Type 'MustNumber2<T>' is not assignable to type 'MustNumber<T>'.
```

my concern was not with the error message, but rather that I think it is wrong that two identical types are not assignable to each other."
"> What if you're not in the codestyle layer? Can you still use these? Should you? Would it be bug if you used the wrong one?

You can use any of the overloads that are available in the particular layer. The overloads are mostly for convenience, so that starting from a Document you can easily get the options needed. 

The only decision to make is whether it makes sense to read the options eagerly (using XyzOptions) or whether they need to be read lazily (using a XyzOptionsProvider). The former is preferred in code that operates on a single document. Then you can parameterize that feature with specific options and read them upfront. If a feature operates on multiple documents that potentially come from different projects then you have to use the provider since we do not want to load specific language binaries upfront if they won't actually be used. If there is a performance concern with reading options from editorconfig documents upfront (perhaps a feature only needs the options rare cases) then you can also use the provider pattern. 






"
"I'm pretty sure the overhead being saved by this PR and #43987 are both almost entirely in the repeated calls to `String.fromCharCode` during the base64 VLQ encoding, and am therefore not convinced that we'd save much if we tried the same approach for general text emit, but I'd be happy to be wrong. It's always bothered me that code generation is so much slower than AST parsing in JavaScript (the TypeScript compiler is not at all alone here; escodegen is slower than esprima, etc.)."
"> Do you have the old stack-trace so we can track any possible duplicates?

Something like 

```
Error: length < 0
      at createTextSpan (src\compiler\utilitiesPublic.ts:98:19)
      at Object.createTextSpanFromBounds (src\compiler\utilitiesPublic.ts:105:16)
      at getTextSpan (src\services\findAllReferences.ts:534:16)
      at entryToDocumentSpan (src\services\findAllReferences.ts:411:30)
      at toHighlightSpan (src\services\findAllReferences.ts:505:30)
      at Array.map (<anonymous>)
      at getSemanticDocumentHighlights (src\services\documentHighlights.ts:34:58)
      at Object.getDocumentHighlights (src\services\documentHighlights.ts:19:20) 
      at getDocumentHighlights (src\services\services.ts:1761:39)
      at Object.getOccurrencesAtPosition (src\services\services.ts:1743:17)      
```

however this may not fix all instances of that assertion being triggered, as it's a generic assertion failure crash for any zero-or-less-length text spans; so any time span math happens on ill-formed nodes, this stack trace is liable to appear. I'm hoping, as I said [here](https://github.com/microsoft/TypeScript/pull/47535#discussion_r789178876) that this should defensively remove the assertion crash in most cases by eliminating the string literal span math when it's obviously wrong, however odd span length may still filter in via other means (eg, from bad initial node positions and lengths)."
"Tagging subscribers to 'arch-wasm': @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

TL;dr `publish` fails on any blazorwasm project with VS17

A recent commit[1] moved initializing `$(_WasmIntermediateOutputPath)` from
a target, to project level `PropertyGroup`. It is set as:

`<_WasmIntermediateOutputPath>$([MSBuild]::NormalizeDirectory($(IntermediateOutputPath), 'wasm'))</_WasmIntermediateOutputPath>`

The `NormalizeDirectory` call converts this to a full path, presumably
using the current directory.

Because we are setting `$(_WasmIntermediateOutputPath)` at the project
level, it gets evaluated during the evaluation phase. And the current
directory doesn't seem to be set to the project directory at that point
in VS. So, `$(_WasmIntermediateOutputPath)` gets a wrong path like:

`C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\IDE\obj\Release\net6.0\wasm`.

And then when actually publishing, it fails to create this directory
with:

`Unable to create directory ""C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\IDE\obj\Release\net6.0\wasm\"". Access to the path 'C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\IDE\obj\Release\net6.0\wasm\' is denied.`

Fix:
Set the property in `_InitializeCommonProperties` *target*, at which
point the current directory is correctly set.

Note:
- This doesn't seem to be reproducible outside VS
- It happens only on `publish`, because that's when the wasm targets
  come into play.

--
1.
```
commit d574b032793ae752387d32b97ff9840de17420a2
Author: Ankit Jain <radical@gmail.com>
Date:   Mon Jul 19 01:02:01 2021 -0400

    [wasm] Add support for using custom native libraries (#55797)
```

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>radical</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`arch-wasm`, `area-Build-mono`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"@github - regarding Bruce's (reasonable) concerns, would it be possible to somehow detect the silent overlap of two test reference assemblies with the same simple name in the merged wrapper generator and produce and actionable error message? This PR demonstrates a plethora of cases where this is happening but we have no safeguards today, the tests in question just silently disappear and I agree with Bruce that is wrong. "
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

When FEATURE_FASTTAILCALL is enabled we compute stack offsets for parameters early. These are used to check for interference when placing arguments for fast tailcalls. On ARM32 the assigned offsets were wrong in several cases involving alignment and when we have split parameters.

@github this should simplify #66282 significantly.
cc @github/jit-contrib PTAL @github 

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>jakobbotsch</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>jakobbotsch</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-CodeGen-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> There's also a weird issue where - I patched it in the last commit, but can you please take a look @github? You are way more familiar on this one. I don't know if choosing a matching version to the SDK is the best idea here, or if this could be at odds with things like source build (although I don't think that runs tests).

@github I just reviewed the changes in the PR. Please let me know what specifically you want me to look at. The changes looked good to me even though choosing a Preview4 SDK at this point seems wrong."
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

One bit of code that only executes under stress was writing to the wrong
offset, causing the jit to crash.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>AndyAyersMS</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>AndyAyersMS</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-CodeGen-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
Who knows. I sometimes do crazy things. Cleaning up.
"Formatting is wrong here and it using spaces, "
"I confirm this issue is in the Java implementation on the Android DateTimePicker.

Here is a short Kotlin snippet that reproduces the issue:

```kt
package com.example.myapplication

import android.app.DatePickerDialog
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.navigation.fragment.findNavController
import com.example.myapplication.databinding.FragmentFirstBinding

/**
 * A simple [Fragment] subclass as the default destination in the navigation.
 */
class FirstFragment : Fragment() {

    private var _binding: FragmentFirstBinding? = null
    private var _dialog: DatePickerDialog? = null

    // This property is only valid between onCreateView and
    // onDestroyView.
    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {

        _binding = FragmentFirstBinding.inflate(inflater, container, false)
        return binding.root

    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.buttonFirst.setOnClickListener {
            if (_dialog == null) {
                _dialog = DatePickerDialog(this.requireActivity())
            }
            _dialog!!.updateDate(2000, 1, 1)
            _dialog!!.show()
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
```

This snippet can be used to replace the `FirstFragment.kt` that is generated by the Android Studio Basic Activity template and reproduce the issue.

The important line here is the call to `updateDate`. If we didn't have that call, the calendar will show up as usual, but it will be on the month we left the DatePicker, instead of the selected Date.

Before we talk about the underlying code, let's start with a rough idea. The `DatePickerDialog` contains a `DatePicker`. A `DatePicker` interacts with a `ViewPager`, the idea is that the calendar for each month is a `Page` (or an `Item` in the code). Changing the date is essentially changing the `Item`.

When the `_dialog!!.updateDate(...)` is called, the underlying code will eventually reach [here](https://github.com/aosp-mirror/platform_frameworks_base/blob/ebddedfd9b4380607eed95decbe5178516bca976/core/java/com/android/internal/widget/ViewPager.java#L523) to `setCurrentItemInternal`. For the very first call, the `mFirstLayout` flag is true, so it will do the right thing and put the calendar in.

For the later call, if we happen to be on the same page, the condition check [here](https://github.com/aosp-mirror/platform_frameworks_base/blob/c5d02da0f6553a00da6b0d833b67d3bbe87341e0/core/java/android/widget/DayPickerView.java#L311) will fail and nothing happens, it stays good.

However, if the user flipped to the other months but quit the dialog, then the condition would turn `true`, leading to a call to `setCurrentItemInternal`, the `mFirstLayout` is no longer true, so it will actually call `populate` [here](https://github.com/aosp-mirror/platform_frameworks_base/blob/ebddedfd9b4380607eed95decbe5178516bca976/core/java/com/android/internal/widget/ViewPager.java#L535).

It would have been fine if `populate` actually does it job, but it doesn't. Perhaps because we called that while the `DatePicker` is not currently on the screen, the `windowToken` is `null` and the actual work to set the item is by-passed [here](https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/com/android/internal/widget/ViewPager.java#L927). Worse, the item is updated, so we don't have a second chance to get it fixed, that why the calendar is empty.

This concludes the root cause of the bug. I don't know why it worked on previous versions, the files I mentioned above were not changed for at least 2 years.

As an experiment, we can replicate what we did in the Android experiment and comment out the setting of the `Date` [here](https://github.com/dotnet/maui/blob/cf2dc1937f18896b878b5ed08f56dc7445618abd/src/Core/src/Handlers/DatePicker/DatePickerHandler.Android.cs#L142). With that, we can get the behavior just like we would get in Kotlin. Basically, the calendar will show up, but not on the current month.

I think we should [file an issue](https://source.android.com/setup/contribute/report-bugs) against Android at least. 

With respect to our code, there are a few things we could do:

1. Do nothing, wait until the Android people fix the bug, it will not work perfectly for some phones. Hopefully, it wouldn't be long until they fix it so the number of phones got impacted is limited.
2. Comment out the `setDate`. The calendar will show the wrong page (but the users flipped it there), or
3. Set it `null`, we will have the perfect behavior, but that comes with a performance penalty and code complexities to handle it could `null` in many places.

If I knew how to specialize in API version, we can also specialize the comment out of the `updateDate` only for the broken API versions, that way we will have the perfect behavior most of the time and not have a performance penalty. That would be my choice."
"@github when you're fixing up the use of `$(IsTargetingPackBuilding) in the Microsoft.AspNetCore.App.Ref project, please review this condition carefully. I suspect the second part was wrong before and now both parts are off e.g.
```suggestion
    <IsTargetingPackBuilding Condition=""'$(AspNetCorePatchVersion)' != '0' OR '$(DotNetBuildFromSource)' == 'true'"">false</IsTargetingPackBuilding>
```
Note `$(IsTargetingPackBuilding)` is always either empty or `false`"
"Dumb question.  Why do we need this part?  If they asked for a null path, why not just keep the nll path?  
"
Dumb question but where do we find these images? I'd like to update one of the 16.04 images used in 3.1 but I don't know where to find the replacement image.
"If try to restore our projects on a 100% clean machine in the wrong order this won't exist.  This makes the error message in that case a bit clearer.  

I hit this problem on this change 😦 
"
oops. you are right. used wrong one.
"It's crazy that GitHub generated that ""diff"" when this was targeting master. It was going to let us merge it too, but thankfully @github noticed it was targeting the wrong branch.

BTW, thanks for showing me that Git Extensions has a dark mode 😄 I really like it. Do you know if there's a way to make the title bar match? I know I could change it to globally show a dark ""accent color"" for every title bar, but that messes with other apps."
"I wouldn't call it so much wrong as replacing one apparently unimportant optimization (sharing the cache for semantically identical delegate types) for another apparently important optimization. I believe the transformation preserves correctness of the compiler. Do you, @github, believe that change is semantically incorrect?"
">EvaluateSideEffectingArgumentToTemp [](start = 19, length = 35)

In looking at the (existing) implementation of the method `EvaluateSideEffectingArgumentToTemp`, I don't believe it will spill `this` in a value type. I don't know if that was right or wrong before, but that would appear to be incorrect for this use. #Resolved"
">return !data.HasSkipLocalsInitAttribute; [](start = 20, length = 40)

This looks wrong. Please add test when there is some other well-known attribute on the type and containing type has SkipLocalsInitAttribute #Closed"
dumb question.  why can't hte doc-comment-ID be the method key.  Then we can reuse an existing system that already knows how to reference methods.   #Resolved
"Can you clarify? I'm not sure how styles work, but switching in VS is easy and relatively fast. I'm not sure we need a separate mechanism.

If we need to code the color for dark theme, this feels like the wrong place/way to do it (since it would be preprocessed out of existence).

---
In reply to: [208730242](https://github.com/dotnet/roslyn/pull/28927#discussion_r208730242) [](ancestors = 208730242)"
"Thank you very much, @github and @github, for explanations!

Then, I think that we need to keep asserts in the following two cases only:
1. InitializeCompletion
2. TryCommit

The reason for this: we work with SourceText and Snapshots and need to be sure that we exclusively process them. I'll keep asserts there and add some comments. Please correct me if I'm wrong.

---
In reply to: [233199210](https://github.com/dotnet/roslyn/pull/29016#discussion_r233199210) [](ancestors = 233199210)"
"Not sure I agree with this one not getting a warning? Unlike the case below, the `!` on the `ref` isn't suppressing any warnings. It feels wrong that putting a `!` where there isn't any warning changes top-level nullability. #Resolved"
"I still really hate '!' at the end of a line... 

Does this reflect that the design is too complicated or wrong, or do we expect this to happen a lot? "
"This does not feel like the right behavior for a constant declared in an interface.  Similarly for a static method.  I'm not sure we intend to forbid them in an embedded interface, but even if we do this seems like the wrong diagnostic. #Closed"
"This is just our fault for not making GetDocument throw if you passed it something wrong. There was always ContainsDocument if you weren't sure, but unfortunately a lot does rely on this today..."
"Hmm there is only two usages of ICUVersion in the tests, one the one that I pointed above and this one: https://github.com/dotnet/runtime/blob/9999d4b86e0c7b0e7fbc04c24bad346397ef17ff/src/libraries/System.Globalization/tests/System/Globalization/RegionInfoTests.cs#L145 -- which we could make both expected values valid in the tests.

> What does that test do on old ICU versions? Crash or just return wrong result?

I don't know, I'll let @github answer that, he should know more. "
this string seems wrong.
💭 This seems strange. Are we sure the values are going to be treated as `SourceText` and not `TextDocumentState`? Do we have a test showing that the new value is correct (and possibly that the old value was wrong)?
Wrong license. #Resolved
"Sorry, that's an artifact of my trying to learn git.  I didn't change this, something must have happened when I was bringing in the updated codebase between my revisions.

I think I need to scratch this branch and start anew, something went wrong when syncing this time and now I can't compile anymore."
"I can't tell what you're advocating for; your comments contradict each other.

The pattern you're citing from MSDN is exactly what's already happening in that current code, except that their version sets the `disposed` flag to true after executing the `if(disposing)` block instead of before. (Whether it's better to set that flag before or after is a separate discussion, but I believe that ""before"" is the safer option.)

> When you call Dispose(false), it sets _disposed to true but does NOT actually dispose (the if block doesn't get executed).

""the if block doesn't get executed"" is not the same thing as ""does not dispose"". The `if(disposing)` block is for cleaning up managed resources when our code calls `Dispose()`. We can't clean up managed resources during `Dispose(false)` because we're being finalized, and the state of the managed resources is indeterminate. (It wouldn't do much good anyway, since by this point they're likely being garbage collected.)

> When you call Dispose(true) later on, it assumes the object is already disposed, so it returns.

That's not a thing. `Dispose(false)` signals that the finalizer is calling `Dispose()`; the object is being destroyed/finalized. There is no subsequent call to `Dispose(true)`. 

The converse is also true; if `Dispose(true)` has been called, `Dispose(false)` never happens, because the root class's `Dispose()` implementation calls `GC.SuppressFinalize()`.

> MasterDetailPageRenderer.cs and NavigationPageRenderer.cs have the correct implementation.

Their implementations are subtly wrong. In both, if `Dispose()` is called by the finalizer (i.e., `Dispose(false)`), `_disposed` will never be set to true, and nothing will prevent a double-Dispose situation. In those two classes we happen to be fine because there are no unmanaged resources to handle (i.e., nothing outside of the `if(disposing)` block), so no disposal logic gets run multiple times. We _are_ incurring a slight performance penalty, though, and that's something I hope to fix soon.
"
"You're right.  I was looking at the wrong place thinking it was included.  

We should trace to see what call is bad.  "
"Again, no problemo. I only added it as it was in the spec. Did I read the spec wrong or is the spec wrong? Either way, the enum doesn't deserialize as specified in the spec. But that's a moot point if we're just gonna drop the thing anyway. "
"Not a fan, also they are in the wrong order"
"Copying the comment I made in the commit related to panel part

I think this is still not a proper solution because I observed that context menu actions on panel title is not showing hidden views. 

So I took back a step and looked into our views framework and I see we have following top level pieces 

- CompositeBar (ActivityBar & PanelBar) 
- ViewPaneContainers (Viewlets & Panels)
- [ViewDescriptors](https://github.com/microsoft/vscode/blob/88e98034a84ecbf65b7650f664a73a990457120a/src/vs/workbench/common/views.ts#L210) & [ViewsModel](https://github.com/microsoft/vscode/blob/88e98034a84ecbf65b7650f664a73a990457120a/src/vs/workbench/browser/parts/views/views.ts#L325)

If we separate these into Model & UI sections

- **Model:** ViewDescriptors & ViewsModel
- **UI:** CompositeBar and ViewPaneContainers

I felt that it's wrong that state is flowing between UI pieces. Instead we shall have the state in the model and let UI pieces update with model changes. 
It means UI parts need access to `ViewsModel`. So here is my idea:

- Have only one model `ViewDescriptors` that contain all information about view descriptors (all, active, visible).
- All UI pieces use this model to render icons, titles, actions & views.

We can discuss in detail directly.
"
"Good catch, this actually showed me that I was doing some wrong calculations for the margins (hence the original reason I removed it)"
yeah that part was wrong. But I removed it anyways as Santi took care of this in another PR.
"I appear to be wrong
"
"> > Here's a crazy thought: What if it _only_ worked with the system dispatcher queue? It should be trivial to move TermControl to that.
> 
> this is a _good idea_

I was going to review... but @github does your emphasis of ""good idea"" mean you're preparing an iteration that does this? Or is it future work?"
"Unrelated, I only just found out about the VS c++/winrt plugin. So far it seems like a minor improvement in debugging: it shows me properties, but just says ""expand to view object properties"" and doesn't show anything on expanding, better than nothing though. I thought I was going crazy that anyone would write in this framework when even the visual studio debugger wouldn't show you any properties at all about all of the objects you had to use, and the only introspection was to evaluate `obj.Property()` during a breakpoint which would just show a helpful `{}` for winrt types."
"upon verification it was added in the wrong type - that's what happen when you're half blind :|
"
seems this is inserted in the wrong place
"wrong part of the selector used for the name
it's an overload to the existing one, with an extra parameter
"
"I do not believe it was removed from mac os, am I wrong? "
"(this isn't wrong though, so better to keep the switch to UI thread if there is any uncertainty)"
"Not exactly; it asserts that the exported symbol was in fact found to be exported by its module symbol, according to either the main program checker or the AutoImportProvider checker. This is basically redoing work during the completions _details_ request that was done during the previous completions _list_ request, so it should always be found, but of course there’s no guarantee of that in the types, hence the assertion. (It’s also the sort of assumption that could plausibly be violated by a bizarre sequence of edits triggering some race condition, or just wrong code, so we do see assertions like this come up in telemetry every once in a while.)"
I still run `gulp local`. Is that wrong?
"I generally agree with Cyrus here. If I recall the low memory situation correctly, there's a specific problem (you have low memory) and a specific solution (we'll turn off global analysis). In this situation we don't know what's wrong and since it's an implementation detail, not a feature, it's not clear what we're going to be doing. I think we'd be better off saying something more general like what Cyrus suggested.
"
"@github There are two failing tests left and it appears to go wrong in SimplifyInterpolation/Helpers.cs. The string literal argument to `ToString` in `$""""prefix {someValue.ToString(""g"")} suffix""""` does not have a constant value according to IOperation even though the syntax is LiteralExpressionSyntax `""g""`. Still confirming."
"This condition looks wrong. Did you mean `if (compilerOptions.jsx === JsxEmit.None)`
"
"I agree with you, I think that the write value of `emitSerializedReturnTypeOfNode` (`void 0`) is the right one when a function has no return type declared; instead, with this fix, `emitSerializedNode` will always write ""Object"", that could be wrong in some situation. Maybe we could enforce the null check in `emitSerializedNode` (as we did with this fix) **and** each caller should emit the right output by handling the undefined value itself. What do you think about this?
"
RWC tests look good (two implicit any errors disappeared in favor of actual types). DT tests are clean. Community tests show a new error in `webpack` which is correct (type annotations appear to be wrong).
"> This is regression to 3.1 caused by #41490

Looks like wrong issue?"
"It turns out that the parser does the right thing, it's just that for purposes of the completion, `location` is the `<` token, as we are completing after it. Before, this had a display kind of `jsxAttribute`, hence the bug.

I pushed a change that adds a JSX tag name kind, however I still thing this isn't quite right as technically, the query is asking about the `<` token, which is not itself a tag name. But, before, it was an attribute, which is still wrong too, so I'm going to look harder."
"This feels really wrong :confused: 

The proposal explicitly says that [import assertions must not affect how a module is evaluated or resolved](https://tc39.es/proposal-import-assertions/#sec-hostresolveimportedmodule):
> [...]
> The implementation of HostResolveImportedModule must conform to the following requirements:
> - [...]
> - moduleRequest.[[Assertions]] must not influence the interpretation of the module or the module specifier; instead, it may be used to determine whether the algorithm completes normally or with an [abrupt completion](https://tc39.es/ecma262/#sec-completion-record-specification-type).

In other words, if both these two imports succeed they must resolve/evaluate the same file:
```js
import { A } from ""pkg"" assert { ""resolution-mode"": ""require"" };
import { A } from ""pkg"" assert { ""resolution-mode"": ""import"" };
```

The imports assertions proposal [even mentions](https://github.com/tc39/proposal-import-assertions#follow-up-proposal-evaluator-attributes) a possible follow-up proposal that would allow what you need, but it would be a separate proposal (with likely different syntax).

I know that this PR is only about `import type` so it's technically ""just TS"" and not JS, but actively going against the JS semantics should be discouraged."
"Oh dear. The bot applied the wrong tag. It should be `area-System.Numerics.Tensors`. "
"What's wrong with python? :)

If you have two runtimes you want to run back to back, I recommend running benchmarks_ci.py once to bootstrap everything and then you can follow the directions here:
https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md#preventing-regressions

Snapshot your baseline, then you can iterate as necessary with the after build. 
"
"~~It seems that the SetXStateFeatureMask is an ""or"" operation. I've called GetXStateFeatureMask after the SetXStateFeatureMask you've added and the mask was the same as before the set (0xA3 in my case).~~
I was wrong, the reason why it doesn't work is different. The mask that the GetXStateFeaturesMask returned - the 0xA3 - doesn't contain XSTATE_MASK_AVX. This mask contains:
XSTATE_LEGACY_FLOATING_POINT
XSTATE_LEGACY_SSE
XSTATE_AVX512_KMASK
XSTATE_AVX512_ZMM"
"Tagging subscribers to this area: @github/interop-contrib
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

In the [latest documentation porting PR](https://github.com/dotnet/dotnet-api-docs/pull/8185), I had to manually pull out the isolated `<seealso>` items from the remarks section, otherwise they would show in a confusing way in MS Docs.

The `<seealso>` items can be added without problems at the same level as the rest of the usual comment items.

I am doing this in source too so that the next porting processes do not port the wrong remarks again.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>carlossanlop</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>carlossanlop</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Runtime.InteropServices`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>7.0.0</td>
  </tr>
</table>
</details>"
"> Should this be embedded into the dll or stored in the app package ""assets"" system? Not sure of the perf here. Probably better in the dll as we do not have to touch the filesystem - but I may be wrong. @github once the dll is loded into memory on Android, is it fully loaded, or will this still read off disk? Are there any pros/cons with embedded resources vs assets?

My initial thoughts on `appsettings.json`, is that ASP.NET uses it as a file so you can edit the file on disk after a service is deployed -- or use environment variables.

This isn't practical at all in a mobile app -- users don't open files on disk and edit values or set environment variables. Does `appsettings.json` even make sense for a mobile app? Would you be better off hardcoding settings as a `const string`? If that is the case, we should just document how to do this and plug into the ASP.NET infrastructure so you just use C# `const` values."
you mean `foreach` I guess. I thought a `for` loop was more performant here but it looks like I was wrong.
Should this just be merged with `AddStackPolicy`? The naming seems wrong.
"Yes, I agree this was wrong; thanks @github "
"Thanks for your PR, @github.
We would like to propose some design for this issue before community can handle it so people don't spend time in wrong direction. We are closing this PR for now as it is not aligned with how we envision this to work."
"okay. build failed with this
16:33:25 Duplicate file entry: Dlls\Diagnostics\Roslyn.Hosting.Diagnostics.dll

so, apparently duplicated file entry is wrong. I will just remove the new entry I added"
"it's a setter search.... if the symbol is the GetMethod?  This is either correct (and needs a comment to explain what's going on), or it's wrong. :)"
">  it does not appear to be worth the additional complexity to allow down-stream clients to manually override the provided service for the sole purpose of removing it.

I in description explicitly said, i want to have temporary service removed. and this PR is so that it can be used without the service.

I opened an tracking issue saying this having trivia temproary service is just wrong.
https://github.com/dotnet/roslyn/issues/29111
"
This looks wrong. Editorconfig should override compilation-wide settings.
">IL_005f:  leave.s    IL_0026 [](start = 6, length = 28)

:memo: In iteration 1, this jump is going to the wrong place (the entry label of the current `finally`). 
In iteration 2 it goes to the right place but in an illegal way (`leave.s` outside a `try` or `catch` block)
In iteration 3 we jump to the end of the finally instead."
"the difference between this method and the one above is super subtle.  it looks like one is just missing a Solution param.  Seems like it would be easy for someone to accidentcally call the method with less args (which seems like the *wrong* one most of the time).  

Can we rename these to make it clear that they're very different and one shoudl be extremey careful about which is called?"
this seems wrong. @github ?
For the moment I think I'm okay with unsealing this class. We will need to evaluate the other renderers to make sure there isn't a reason this could go wrong.
Suggestion: `ProcessFrame` --> `RefreshTimestamp`. Or am I reading this function wrong?
"to me, it looks like, for non-groupheaders cells, the Default takes the priority to BgColor, which seems wrong"
"You're absolutely right. Unfortunately, this entire function is just all sorts of wrong (see #4507).

Commenting the tracing off of this function and adding a TODO work item. 😡"
Actually..... we would consider that block to be wrong. It should have had the English error text there. I bet @github created that `.vcxproj` when working on the u8u16 converters and VS inserted the text in the bottom in German per his locale and we didn't notice. It's just our practice to have everything be in English as that's our company's working language. (Except where necessary like with some example German text for a test scenario or something...)
"> It's possible I'm remembering part of this wrong but pretty much whenever u have to depend on the ordering of writes between threads there is usually this type of gap.

I think ideally we need a volatile read here, but, I guess we don't have one, for an immutable array

>I think there is a race then. Even if we use the barrier to ensure the thread can't reorder it's reads of _flags and _managedKindUseSiteDiagnostics we can't guarantee the visibility of the writes from the other thread are both visible. 

I was suggesting an alternative to check both values in the if above, this would guarantee that we have non-default value here


---
In reply to: [460275688](https://github.com/dotnet/roslyn/pull/46114#discussion_r460275688) [](ancestors = 460275688)"
"I'm guessing this change is wrong. 

Right @github ?"
"I think it's better called ""git.openAfterClone"" or something, current name doesn't express that ""you can open the folder"".

And it looks like you didn't set your Git credentials correctly (probably wrong email), so GitHub doesn't link your commits to your profile."
"@github Can you verify that you un-selected `move on type`, and not `search on type`?

There is an unrelated, pre-existing setting `search on type` that has no effect.  

The reason I ask is that @github confirmed it worked in https://github.com/microsoft/vscode/issues/60977#issuecomment-611107740 , and this PR is the same as my original, just behind a setting, so I thought maybe you just ticked the wrong one.  

Maybe the naming could be clearer.  
"
I think it will just do nothing when it's null. I can be wrong though. :-) And I wouldn't know what to do when it would crash. Do I need to throw a specific exception that is handled elsewhere?
"Looks like the Unix implementation just does a `Debug.Assert(receiveSize == 0, $""Unexpected receiveSize: {receiveSize}"");` and never uses the value (we don't actually guard against non-zero values being passed in by the user).

So the overload is useless on Unix and wrong on Windows for synchronous completions.
I will revert this part of the change as it doesn't really fit into this PR."
"Uhg. Maybe add that as a comment to the header here. I'd almost want both them to be `BuildSettings` but I bet you can't have two methods with the same number of params either.

And 
```
BuildSettings(const Model::CascadiaSettings& appSettings,
              const Model::NewTerminalArgs& newTerminalArgs,
              guid profileGuid,
              const TerminalControl::IKeyBindings& keybindings)

```

feels dumb, because which one of them is right? The guid or the newTerminalArgs? ahg."
ahh... that sucks. but this makes sense then :)
Nope. This is wrong. This caused incorrect rendering.
Sorry for wrong direction
You're not wrong. I just happened to be looking to fix multiple open issues so the runtime text that took 2 minutes and the window state tracking that took an afternoon ended up in the same PR.
Indentation is wrong here; looks like a tabs-vs-spaces problem.
Do you know the command-line that hit this? Just want to check we don't have something wrong.
"For heck's sake, I used the wrong GitHub account. Oh well, it'll be fine."
"Apparently the xammac_tests.csproj was the wrong project type (and as a result was using system mono).  Fixed that, have it targeting XM mobile and it's working fine now."
"~~I'm not sure whether we need `safeAdd`, versus letting bad things happen in unlikely code with max-value list-pattern in source...
Do we have precedent for this sort of thing elsewhere?~~

I was thinking of wrong scenario. This is for sometthing like `case [_, ..{ Length: <= int.MaxValue) }]`. Makes sense.

Do we have tests covering all these cases? #Closed"
"Not critical but your indentation is incorrect :)

Now to be really useful the logic needs to be a bit more complex. In contrast to API you can always use a missing value, e.g. `Call ((MyEnum)42))`, so a missing member is not critical (as much as other things) since it's not blocking (just annoying). Also adding them later is not a breaking change...

The most important thing for enum members is their values, e.g. if we have `MissingMember = 43` while the right value is `42`. That's very hard to diagnose such errors (and easy to get wrong since, most of the time, the values are assigned automatically by the C# compiler). It's also a breaking change to fix them."
"Disclaimer: not a corecontributor, so I may be completely wrong.

This could probably be done by including a custom method, similarly to how NSString2.cs and NSObject.mac.cs do with partial classes.

The custom bound method would hide the MethodInfo (or whatever we want exposed) being mapped to Selector"
"I spent a lot of time trying to figure out how this API is supposed to be used... and I can't quite figure it out, but I'm pretty sure this is wrong :smile:.

I /think/ that slot 0 in ex_data is pre-wired to know that it's storing an `SSL*`, so if we called `SSL_dup` on this `SSL*` then as part of duplicating the EX_DATA portion it'll call `SSL_dup` on the value stored in this slot... which is bad if it's a GCHandle.

It might be OK to use slot 13 (CRYPTO_EX_INDEX_APP), but I'm not sure.  Every usage of this that I see within OpenSSL code always calls `SSL_get_ex_new_index` first, to associate an allocator/deallocator/duplicator with what is going to go into the slot.  Then they get back a number and need to remember that as their slot ID.

I think we should strive to avoid using the EX_DATA, since it's not easily understood."
What happens when someone actually targets `net4.8-windows` or even does something like `net4.8-unix`?  Might be helpful to have a hard block on that just to prevent people from doing it since it will give the wrong thing for P2Ps as well.
"these changes are desirable.  Those whitespace chunks are not part of hte actual content of hte string (the lanugage/compiler does not include it), so it was wrong that we were producing regex classifications for it (even if it was just whitespace).  We now appropriatley only classify the actual content."
"Am I reading it wrong, or does the comment not match the code? The code looks like it's distinguishing between no declarations, from single or multiple declarations. Shouldn't it check count of declarations?"
"add the check that verify wrong dlls being not loaded.

```
  <VerifyRoslynModulesLoadedStatus ExpectedStatus=""NoCSharp"" />
  <VerifyRoslynModulesLoadedStatus ExpectedStatus=""Basic"" />
```
"
"For analyzers in particular, acquiring an expensive resource might best be done in Initialize rather than in a constructor, because the instance might be constructed only to determine that the analyzer will not be used (due to all of its diagnostics being suppressed).

The point I was trying to make is that things might go wrong for some analyzers if we don't obey the specified contract. Debating whether a particular way things might go wrong could be avoided by changing the design of an analyzer is not going to resolve the issue.
"
"Ah, well, it was called out as SHA**256** instead of SHA**384** and I guess my fingers just did the wrong thing while fixing the algorithm size. Will fix."
"I'll file a bug since the code was already wrong.
"
"Aren't these wrong even if you're on the UI thread, because of the race you've observed?
"
"Actually, these implementations are wrong.  They should be removed until the right behaviors can be implemented.  It's not ok to cancel the wait but not cancel the actual operation that's in flight."
"It looks like my change in https://github.com/dotnet/runtime/pull/64720 broke the argument exception that was previously being thrown by GetDescriptor.  Previously, the second argument would be used in the ArgumentNullException GetDescriptor would throw, but now it's ignored, and the name in the ArgumentNullException will sometimes be wrong.  I think we either need to:
1) Change all of the call sites to use !! as appropriate, or
2) Fix GetDescriptor to again use the second argument as the exception parameter name... the parameter could be changed to be a CallerArgumentExpression string."
Added a Debug.fail. I agree it's best not to silently do the wrong thing if we get into this weird state.
"I think a more reliable mechanism would be to:
1. Recursively walk up each containing class (via `getContainingClass`) until you find a class that declares a private name with `privateNameDescription`.
2. If `leftType` does not have a property with that name, then
  1. Get the properties of `leftType` and see if it has *any* private named member with the same description, if one is found then use that information to report an error about the wrong private name.
"
"`getNameOfDeclaration` is still going to return the wrong thing, though; unless I overload it for `LateBoundBinaryExpressionDeclaration` to return a more specific result?"
"Hmm, I just copied this comment from `services/types.ts`. But, now that you mention it, we do the wrong thing in this case 😱. I guess I’ll open a new bug."
"I think this is probably the wrong place for this, but wanted to get some opinions. My first instinct was to make `module.exports = { foo }` recognized by the binder as something special, but that got complicated and blew up very quickly. I could just move this to `importFixes`, but was never really satisfied with having to look so closely at syntax at this point."
"Yeah, as stated in the meeting I do think this is not a reasonable new error in a quite old test (and was dealt with in the prior iteration of this change), and this can be somewhat easily avoided by using the old behavior for named function expressions (which are generally only used when you want recursive references like this anyhow). A self-call witnessing the unwidened type is _very_ odd, given our widening rules (no exterior calls can witness the unwidened type). I think this can manifest in even _stranger_ behavior if you do something with the `bar` reference rather than just call it - like pass it into a function desiring a callback, eg `handle(bar)` where `declare function handle(a: () => [any]): void`, or worse yet `declare function handle<T>(a: T): T` where the unwidened type will simply propagate via inference - where then you'll get this widening error so far removed from anything that it's relevant to that it's quite clear something's gone wrong."
"The private exception purposefully has a different full name (since it is nested). So we would need to check 2 different ""full names"".

Even full names wouldn't prevent some other code running in a Host ""Build()"" sequence naming their exception `Microsoft.Extensions.Hosting.HostAbortedException`. So it isn't a guaranteed solution either.

If, for some reason, someone else names their exception `HostAbortedException`, and it isn't the one we threw below, the caller will get `null` back from `HostFactoryResolver.ResolveServiceProviderFactory`, and it will handle it just like any other case where the IServiceProvider can't be found (usually displaying a message to the user saying something went wrong)."
"There are two main reasons for some of this weird ""handlings"", but it doesn't excuse most of them:
* Cecil's reference->definition resolution returns null if the resolution fails (missing assembly dependency, wrong dependency, ...). So unlike in NativeAOT's type system, there are potentially lot of places where null can appear unfortunately.
* Historically we've seen quite a few cases where weird IL/metadata we never anticipated (like obfuscated code) crashed the linker. While I agree it's easy to diagnose the problem, there's typically absolutely no workaround for the user (other than disabling trimming which in Blazor/Xamarin scenarios is not really viable).

We are guilty of adding `?.` and similar in places where we couldn't immediately reason about the input being null or not. This is exaggerated by the fact that we turned on nullable reference types (which was a good thing as it found several issues), but Cecil is not annotated, so everything looks nullable (even if in really it might not be)."
"Took me a while to notice this and to understand what goes wrong.  It's because when the test runs it tries to load the assembly twice - once with an older version - which succeeds, and subsequently with a newer version.  Evidently Mono isn't doing a version check when the assembly has already been loaded.  I filed an issue https://github.com/dotnet/runtime/issues/38351

> A type roll-forward test I added for configuration manager types was failing on Mono. Mono always resolves the type, even if we ask for a future version. I've skipped for Mono for the test for now.
> 
> @github Is this type behavior expected, or do you know who would know? The test ultimately does a `Type.GetType` for `""System.Configuration.UserSettingsGroup, System.Configuration.ConfigurationManager, Version=255.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51""`.

"
"Turns out `EscapeUnescapeIri` was not incrementing the index when escaping a surrogate pair. That led to the low surrogate being escaped again, producing wrong results and hitting the fallback-path in Utf8Encoding (that allocates).

Correcting the bug and using Rune now shows much nicer numbers
| Method |         Toolchain |     Mean | Ratio |   Gen 0 |   Gen 1 | Gen 2 | Allocated |
|------- |------------------ |---------:|------:|--------:|--------:|------:|----------:|
| NewUri | clean\CoreRun.exe | 315.9 us |  2.47 | 69.3359 | 13.6719 |     - | 285.44 KB |
| NewUri |   new\CoreRun.exe | 127.8 us |  1.00 | 19.0430 |  2.6855 |     - |  78.41 KB |

This also makes the improvement in #31860 more noticable. Combining the changes the numbers are:
| Method |         Toolchain |      Mean | Ratio |   Gen 0 |   Gen 1 | Gen 2 | Allocated |
|------- |------------------ |----------:|------:|--------:|--------:|------:|----------:|
| NewUri | clean\CoreRun.exe | 315.94 us |  4.19 | 69.3359 | 13.6719 |     - | 285.44 KB |
| NewUri |   new\CoreRun.exe |  75.56 us |  1.00 | 11.4746 |  1.5869 |     - |  47.16 KB |

The time will likely improve a bit more when applying [the change](https://github.com/dotnet/runtime/pull/31860#issuecomment-584295232) to range checks in #31860."
"I have no concern with the comments.  My concern is with calling task.Wait.  That is innapropriate and we should simply 'await' here to get the right behavior.  By calling 'Wait' we now have to deal with audting this code every time we go through looking for blocking calls in async methods.  .Wait in an async context is traditionally a large red flag that something is wrong.  That auditing will waste time and make this code different for no valuable reason. 

The appropriate thing to do here is to just 'await' the task like we would in pretty much all other code.  

Now, personally, that code is clear enough that it should need no comment.  But i have no problem with the code calling out why it does `await task.ConfigureAwait(false)` rather than just `task.Result`.
"
"From the dump, it's clear that there are many different `FileTextLoader` instances at play, so this PR is the wrong approach. "
"> have IVT access, in case this is an an internal symbol.

So this is wrong anyway. Example:

```csharp
using System;

namespace ConsoleApp1
{
    class Program
    {
        /// <seealso cref=""EnvironmentHelpers""/>
        static void Main(string[] args)
        {
        }
    }
}
```"
Also just a build of clr+libs would not build our managed tools I believe @github to correct me if I am wrong.
"I do not see why this is true.. can we make it more declarative and call it `pathEndsWithDirectorySeparator` to avoid ppl making wrong assumptions.
"
"Yes, but fourslash just uses source file text; it doesn't care about any AST. (As far as I know -- I could be wrong.)

Same for any other tool that wants to use `////`."
"I'm a little confused here. It sounds like the test is doing the wrong thing, but even if the test is buggy, it shouldn't be able to crash the runtime like this.  Doesn't this suggest there's also a bug in either System.Drawing.Common, libgdiplus, or mono?"
"Regarding: 
> // Hence, we return preallocated System.Exception instance. Lossy information is better 
 // than wrong or no information (or even FailFast).

My reasoning is that since we cannot provide the ""right"" exception, because we cannot allocate it, giving OOM would be fairly truthful - we are in a state where we cannot function normally because of memory shortage.

User can try handle the situation by trimming memory use or at least will see OOM in Watson/dump and have a bit more info about environment at the time of the crash.
"
"Tagging subscribers to this area: @github, @github, @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Wrong manual updating of assembly version has led to lot of problems for the upstack repo. This change automatically applies the versioning rules and calculates the assembly version

- No package project -> no change in assembly version & package version.
- Package project Exists -> always increment the package version.
- Package project Exists and part of any shared framework -> assembly version increment for netfx assets only
- Package project Exists and not part of any shared framework -> assembly version increment for all assets
- Baseline version is updated everytime so we done need to update the assemblyPackage version  table.
- Stable version and list of packages to be build should be updated everytime. 


Validation
Manually verified all the servicing packages for the assembly version changes being correctly produced.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>Anipik</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Infrastructure-libraries`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github/ncl
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

It seems like ordering of the additionalCertificates X509Certificate2Collection is not quite predicable as I assumed. 
With that the validation callback can get wrong certificate and/or incomplete chain. 

With this change we would always get peer certificate from PlatformCertificateHandle and we would add all extra certificates to ChainPolicy.ExtraStore. That may contain peer certificate it self but it does not matter as that is just hint and chain.Build will create the chain as needed. 

I aslo added ITestOutputHelper to the test so it is easier to collect useful information on test failures. 

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>wfurt</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>wfurt</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Net.Quic`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"I think I'm going to close this until after .NET 6 peels off of main, and likewise not pursue moving ECC fully to EVP_PKEY in this release (ECC was giving me some trouble, anyways).

When running this change with OpenSSL 3.0 the DSA tests which try to export a public key with private parameters fail with an OutOfMemoryException.  Why? Well, because the (mostly generated) code walks down a path, does `ERR_raise(ERR_LIB_PROV, ERR_R_NOT_A_PRIVATE_KEY)` (the error we want), then down an error handling path goes ""oh, building that interior piece failed, clearly we're out of memory `ERR_raise(ERR_LIB_PROV, ERR_R_MALLOC_FAILURE)` (not the error we want), and then no other error happened.  So we exit CryptoNative_GetPkcs8PrivateKeySize with an error stack of `{ LIB_PROV|NOT_A_PRIVATE_KEY, LIB_PROV|MALLOC_FAILURE }`.  Our logic is to take the last (newest) error, and if it's MALLOC_FAILURE that we report an OutOfMemoryException.

Trying to rewind my brain 5 years, I'm pretty sure we take the last error because of all the places that we decide there was an error and we move on anyways without clearing it, and this was partly because of the expense of interacting with the error state in OpenSSL 0.9.8 and 1.0.x (with 1.1.0 (IIRC) it moved to a thread-local thing and got much less costly).  What this error shows is that we're just out of touch and need to rethink exception processing for OpenSSL.

I /think/ that what we want is:

* ERR_clear_error() at the start of each operation.
* Change our current ""keep asking what the error is until we run out"" to something like `long CryptoNative_GetErrorForException(out int handlerFlags)` ((HandlerFlag)0x01 being ""OutOfMemoryException""), which takes the **oldest** and clears the error queue, the logic being that the first thing that went wrong since we started is obviously ""the thing that went wrong"".  (Maybe there'll be edge cases that say this also isn't always the right answer, though... but I hope not)

Because this is a pretty fundamental change in how we're interopping I think we want to make sure there's a chance to see if something complicated goes wrong, which means we want it in a preview release we can get good feedback on.  And that means it's probably .NET 7 Preview 1.

---

The alternative is that we just say ""eh, let's only throw OOM if that was the oldest error in the queue"", but that feels like we're just missing the point and kicking the can a bit.

---

Leaving this open for another hour or two in case anyone wants to try swaying me back."
"> Cleaning up the 'Module' goo is good, but i feel like INTERNAL is probably the wrong name especially if we end up touching it from tests, etc.

I don't insist on INTERNAL. Do you have other candidates on mind @github ?"
"The host has some code in it which detects arm64 hardware and changes behavior slightly based on that. So it actually does make a difference if it's running on arm64 or x64 hardware. And since the host tests do weird things with the host, I would not be surprised if this has an effect. Especially if the global install is 5.0 only which is not arm64 aware (which is BTW another problem with this setup) - after 6.0 GA we will also release an update to 5.0 which will be arm64 aware. In fact I think we will block installing 5.0 SDK on arm64 hardware (only runtime will be OK, but it installs into a different location), but I could be wrong.

Another problem will be that these images have .NET 2.1 SDK on them - those are out of support and are absolutely not supported on arm64 macs - we will have updated 3.1 and 5.0 installers, but AFAIK there are no plans to update the 2.1 installers. So trying to install the 2.1 on arm64 hardware will effectively break all .NET installs after the GA refresh.

@github - just an FYI - the installer changes might play havoc with dotnet/runtime CI 😢 "
"> how commonly do folks do this, how many apps are broken, is there a workaround, etc. Or is this just a bug someone happened to spot but with low impact.

I would not expect it to be used much and would break many apps, correct me if I'm wrong @github, how is this is impacting you? For me, this is low impact bug and I requested this for servicing only because it is a regression and the fix has no risk

>what is the impact on the customer though? can you add to customer impact section:

Sure, i will update that section"
"Tagging subscribers to this area: @github/area-system-io
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

## Customer Impact

This PR actually fixes two bugs.

The first one is a bug reported by customer via email, where an async read operation performed on a `FileStream` opened for **non-seekable device** file was throwing an `System.IO.IOException`: ""The parameter is incorrect"".

It turns out that `ReadFile` [doc](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-readfile#parameters) was wrong:

> For an hFile that does not support byte offsets, Offset and OffsetHigh are ignored.

And `OVERLAPPED` [doc](https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-overlapped#members) was right:

> This member is nonzero only when performing I/O requests on a seeking device that supports the concept of an offset (also referred to as a file pointer mechanism), such as a file. Otherwise, this member **must be zero**.

The second bug is #58383. To tell the long story short, `File.ReadAllBytes*(string path, ...)` methods were assuming that `path` can't point to a non-seekable file like named pipe.

## Testing

The fix was verified using tests added in the PR. It has been in main for a month (#58434) and we have already been doing that for sync file handles (the issue was originally discovered and fixed by @github):

https://github.com/dotnet/runtime/blob/cf7d5173d4d9ce0aac8212e78063a097e1f57c0a/src/libraries/System.Private.CoreLib/src/System/IO/RandomAccess.Windows.cs#L723-L732

## Risk

Very low. :shipit: 

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>adamsitnik</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.IO`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>6.0.1</td>
  </tr>
</table>
</details>"
"_yeaaaah_. This is just...dumb... We could make this all a part of the view model. But like, this is so much more straightforward and I have a feeling we'll need it again at some point haha"
This got added to the wrong spot?
"```suggestion
        return _root ? _root->WindowName() : {};
```
I could be wrong, but I think we're supposed to return the null ctor instead of `L""""` because something something hstrings?"
Also wrong issue number
"If the screenshot added on this issue represents the 'after fix' behaviour, it still seems wrong.
The center of the gradient still not seems to be in the upper corner"
"> Not sure what's going on with the commit history in the PR:
> 
> ![image](https://user-images.githubusercontent.com/2193314/160690546-a36b2e50-a7de-4cb8-8aa5-ad84c2dff802.png)
> 
> Based on the wrong branch maybe?

Not sure and don't know how to fix that now 🤷🏼‍♀️ "
"I really like how much cleverer this code is now. However, this might not work from a localization standpoint 😢 IIRC, localizing strings like this doesn't always work, because there's no guarantee that  the entire string we're going to format in to `MoveFocusWithTargetArgCommandKey` will insert correctly in all languages. (I'm now realizing I'm not sure how to really explain this...)

Like, I don't think it's a guarantee that `translate(""Move focus to the "") + translate(""last used pane"")` == `translate(""Move focus to the last used pane"")`. 

@github can correct me If I'm wrong on this part "
I was wrong. It is not the cause of the crash in 5185.
ok.  i'm saying: the method's name and decsription are not clear.  It is askign if the expression is inside a method.  but then it does a lot of extra stuff.  either that stuff is unnecessary.  or the name/docs are wrong.
"> Why are you setting `%NUGET_PACKAGES%`?

...though to a large extent, this is a pointless question and shouldn't actually *matter*; it's a documented environment variable, with documented semantics, and the xamarin-android build *should not break* ""just because"" this value is set (""within reason"", poorly defined).

A ""spit-balled"" solution is to update `Configuration.props` with:

```xml
<XAPackagesDir Condition="" '$(XAPackagesDir)' == '' And '$(NUGET_PACKAGES)' != '' "">$(NUGET_PACKAGES)</XAPackagesDir>
<XAPackagesDir Condition="" '$(XAPackagesDir)' == '' And '$(OS)' == 'Windows' "">$(userprofile)\.nuget\packages</XAPackagesDir>
<XAPackagesDir Condition="" '$(XAPackagesDir)' == '' And '$(OS)' != 'Windows' "">$(HOME)/.nuget/packages</XAPackagesDir>
```

Then use `$(XAPackagesDir)` instead of hardcoding `$(XamarinAndroidSourcePath)\packages`.

Which works with 2 seconds thought, but...  If someone then edits `NuGet.config` to override `globalPackagesFolder`, things will break (differently), as `$(XAPackagesDir)` won't match the `globalPackagesFolder` within `NuGet.config`.

😞

A slightly different take might be to use:

```xml
<XAPackagesDir Condition="" '$(XAPackagesDir)' == '' And '$(NUGET_PACKAGES)' != '' "">$(NUGET_PACKAGES)</XAPackagesDir>
<XAPackagesDir Condition="" '$(XAPackagesDir)' == '' >$(XamarinAndroidSourcePath)\packages</XAPackagesDir>
```

and continue to rely on the `globalPackagesFolder` value, though this approach still doesn't deal well with `NuGet.config` changes without corresponding build system changes, e.g. updating the `CheckApiCompatibility.ApiCompatPath` property value, which just feels ""wrong""."
"I think GitHub has associated this comment to the wrong line. Do you remember what this was in reference too?

There are tests for active statements in initializers in ActiveStatementTests.cs"
"@github @github 

We first run mono_set_dirs here:

```
frame #0: RemotingTest`mono_set_dirs()
frame #1: RemotingTest`app_initialize()
frame #2: RemotingTest`::xamarin_main()
frame #3: RemotingTest`main()
```

and appear to correctly set things. But then in mono_main we get stomped

```
frame #0: RemotingTest`fallback [inlined] mono_set_dirs(assembly_dir=""/Users/donblas/Programming/macios/master/xamarin-macios/builds/install/mac64/lib"", config_dir=""/Users/donblas/Programming/macios/master/xamarin-macios/builds/install/mac64/etc"") at assembly.c:588 [opt]
frame #1: RemotingTest`fallback + 23
frame #2: RemotingTest`mono_set_rootdir
frame #3: RemotingTest`mono_main() 
frame #4: RemotingTest`::xamarin_main()
frame #5: RemotingTest`main()
```

And then we're hosed.

MONO_CFG_DIR is letting us bypass this.

Is this a bug/limitation in the embedding API? It seems wrong.
"
"Not sure why we're discarding use site diagnostics, this seems wrong. #Resolved"
"This is fine but in the wrong place. The bots reports the same error for XM, so it's the base class that needs to handle this (so both XI and XM ignore that .ctor)."
"Another question: correct me if I'm wrong, but I believe one completion list cache is instantiated per client, right? If that's the case, does `_lastIncompleteResultId` need to be instantiated per client as well? I'm wondering if there's a possible scenario where multiple clients can be making completion requests one after the other and modify this variable unexpectedly."
"> I know many people who loathe PowerShell. I'm not one of them, but appreciate their opinion. Perhaps we only _generate_ profiles for the latest VS (release or prerelease) _installed_ (which may change, and would be additive) but hide the others. I.e. generate all the profiles I already was, but only for the latest. If the latest later changes, do that again.

I respect that. (EDIT: the bit about powershell); EDIT, continued: I also agree with the additive ""generate for latest VS"", which I later went on to suggest as though it was my own idea. Sorry for talking past you! :smile:

> 
> From telemetry, most customers (I can't share numbers, but it's a large majority) have only a single instance installed. So we're not talking about a lot here.

How bad would it be in your estimation if we offered just two -- PowerShell (native x native) and Command Prompt (native x native)? Folks who want something a little more than that can duplicate and edit the architecture fields?

> ...when you say ""in the future"", you mean when profile grouping is implemented? Would definitely like to see all of these return (if we remove them now)

Sorta. Yes, that would be good, but I'm thinking more like...

(Dev quality UI incoming)

```
┌────────────────────────────────────────────────────────────┐
│                                                            │
│ Add New Profile                                            │
│              ┌─────────────────────────────┐               │
│ Template...  │Empty profile              v │               │
│              └─┬───────────────────────────┴─────┐         │
│                │Visual Studio 2019               │         │
│                │ Developer Command Prompt        │         │
│                │ Developer PowerShell            │         │
│                │ Developer Command Prompt (x86)  │         │
│                │Visual Studio 2022               │         │
│                │ Developer Command Prompt        │         │
│                │ Developer PowerShell            │         │
│                │ ... 32 skipped ...              │         │
│                │Windows Subsystem for Linux Subsy│         │
│                │ Ubuntu (26.10)                  │         │
│                │ Debian                          │         │
│                │ Alpine                          │         │
│                │                                 │         │
│                │Copy an existing profile         │         │
└────────────────┤ Windows PowerShell              ├─────────┘
                 │ Command Prompt                  │
                 │                                 │
                 ├─────────────────────────────────┤
                 │Looking for more profile types?  │
                 │ Open up the extension store or  │
                 │ marketplace or what-have-you?   │
                 │                                 │
                 │                                 │
                 │                                 │
                 │                                 │
                 └─────────────────────────────────┘
```


In this crazy new world, profile generators would make profiles available to the user, but we would neither (1) automatically put them in the user's ""resultant set of profiles"" nor (2) hide them once we put them there.

In general, and I am happy to be disabused of this notion, we consider `profiles.list` to be _the user's property._ Anything we put in there, we have given them, and cannot take back or later change. Even the `hidden` ones. That's the only model we have today for generated profiles!

If we change the model to make those profiles available, but we do not automatically promote them (put them in the user's possession) and instead give them the option to do so... we can have a nearly infinite number of profile generators--we could even rename them to ""detectors"" or whatever--that the user could opt in for."
"The diff is misleading. I did _not_ break API compat here, as much as I wanted it.

It was originally on NSController and Apple pulled out half of it to the NSEditor protocol. I could fix the obviously wrong thing when I rebound, but it meant that NSController couldn't be an NSEditor.

It's a bit of a mess."
"What would happen for cases like `a|b||c|d|e`? Would it reach this code path (I think it should)? But will have wrong classification, and may actually fail the assertion in RegexAlternationNode constructor. Can't say for sure but worth testing.


**EDIT:** A similar case is already tested :)

https://github.com/dotnet/roslyn/blob/ececd39a161603d008256f6540275e03c50b93f9/src/EditorFeatures/CSharpTest/EmbeddedLanguages/RegularExpressions/CSharpRegexParserTests_BasicTests.cs#L1486-L1506"
"```suggestion
        /// <inheritdoc/>
```

I think this is all you need, though @github can correct me if I'm wrong."
"I guess I'd phrase more like ""sort the documents to match the order expected by this test"". The output could be deterministic but still unspecified, and the test shouldn't be sensitive to changes there. Not a huge deal, but if we ever do set an ordering this comment then becomes wrong."
"This is subtly different, as before a null gch.Target (or one of the wrong type) would throw, where this will silently no-op.

I think that is fine however. "
"> I see, this seems like a very fragile system when trying to get them correct. Should we instead do one of the following:

Agree with this being a fragile design. It predates me, it existed for several years and apparently it worked just fine. Even though this is hard to get right without understanding RID compatibility rules, it's the closest / best implementation based on the rid graph.

> Transform all net461 configs to instead be net461-windows, that way all configurations are referencing the right live libs.

Reason why we didn't do this yet is because of these two major downsides:
- Making a tfm rid specific without also building a rid agnostic tfm of the same TargetFrameworkIdentifier results in  packages having duplicated assets in the i.e. lib/net461/ and runtimes/win/lib/net461/ folders. For more information see https://github.com/dotnet/runtime/blob/c94b75f662030a09c8747d79a16d9f4f2c9d44f1/eng/packaging.targets#L104-L108.
- net461-windows is a tfm alias that nuget doesn't understand and the `-windows` part needs to be stripped from the target framework alias: https://github.com/dotnet/arcade/blob/761d2e6545a31d2ebf9cb60443ed2a9c2f8268b5/src/Microsoft.DotNet.Build.Tasks.TargetFramework.Sdk/src/build/Microsoft.DotNet.Build.Tasks.TargetFramework.Sdk.props#L21-L22. Adding the `-windows` rid to every .NETFramework tfm results in this hack being applied in many more places and more NuGet.config files being necessary to disable VS's restore which can't handle restoring them: https://github.com/dotnet/runtime/blob/c94b75f662030a09c8747d79a16d9f4f2c9d44f1/src/libraries/System.Data.OleDb/NuGet.config#L2.

> Add some build checks that check P2Ps when building netfx libs, and ensuring that we are not incorrectly getting a NS2.0 asset when the P2P also has a net461-windows asset.

Correct me if I'm wrong but I believe the [ProjectReference protocol](https://github.com/dotnet/msbuild/blob/main/documentation/ProjectReference-Protocol.md) doesn't expose the necessary information to implement such a check. Of course you could always implement custom targets and MSBuild calls but that won't work with static graph build which we want to leverage."
"Will fix it, I'm wrong
"
"> There's existing code a few lines before this that's doing:
> ...
> without checking diagnostics. Is that also wrong? 

That code also performs an incomplete check for a usage of a well known member.

>  I was just copying what's already being done in this file.

 I understand that, perhaps, the likelihood to find a method that is still ""bad"" is extremely low for these helpers, but it is better to always perform full validation. One of the reasons is the fact that code is often copied for other helpers and between compiler layers. 
"
For now I just made it fail with a verbose message if you build it with the wrong config.
Was xtcpcb wrong?  Or xinpcb is also correct and on more systems?  I'm trying to understand if there's an existing bug here being fixed on supported platforms.
"Is there something wrong in reusing the delegate types?
"
The emit here has the wrong runtime semantics.
"so.... this was just... _wrong_ before? `a` was `T[""a""]` which _should_ have been constrained to `number | object | undefined`, which means `a` can be falsey, which means the new result is correct.

Do we fail to include `undefined` constraints in our analysis somewhere in control flow?"
"Sorry, wrong suggestion
```suggestion
                if (text.Mapping is EnumMapping enumMapping)
```"
"1. You don't need to check the expression, just allow all return statements to be checked for jsdoc. This means that all jsdoc searches will walk up through return statements, but all searches should. (Especially since most jsdoc searches originate from functions.)
2. If I'm wrong, then this should be rewritten like so:
```suggestion
            isReturnStatement(parent) && node === parent.expression && (isFunctionExpression(node) || isArrowFunction(node))
```"
"```suggestion
                    else if (mode === ModuleKind.ESNext && resolutionIsNode12OrNext && isExtensionlessRelativePathImport) {
```

Technically it's not about ESNext modules, it's only about the module resolution kind, right? I could be wrong."
"There's something a little bit backwards here - we are leveraging a bunch of the logic of signature help, which I'm pretty sure gives us the wrong `argumentCount` because it has to account for signature help for when a user is in the last position of a signature and you intend to add an argument; but because of that, we have to then re-adjust the argument count. So we're just hacking on the hack of signature help.

I would love to separate completions logic out from `SignatureHelp` more, but I'd rather not see the full refactor in this PR. It seems like the adjustment should actually happen in `signatureHelp.ts` - specifically in `getArgumentInfoForCompletions` (https://github.com/microsoft/TypeScript/blob/1fe9bfdd0ee0ecf9dff23a40c0066645719e46b9/src/services/signatureHelp.ts#L166)."
So this import was just wrong before the refactoring?
"> Either I'm doing something wrong or we have very different machines :)

The allocation difference is likely due to #43060, which was included in master but not in my test branch. The time difference is due to me using a 2990wx."
"> I see that you did not make the corresponding change in crossgen2. However, this isn't necessarily the wrong choice. Crossgen2 does not use the IsSupported function call mechanism, but instead it performs speculative compilation assuming the processor intrinsic IS available which yields excellent performance for this case on Haswell and newer processors.

I haven't dug into the crossgen2 code, but I read your design document, and this was my understanding.  Seems to only be an issue with the way it's handled in crossgen1."
"@github @github I am trying to recreate the failure which caused the revert.  I picked up the change to run the libraries on arm64, but I am still seeing libraries on arm64 being skipped and not failing. 

I tried to copy the correct line form your patch, but it is not working. Did I copy it wrong?  Am I misunderstanding this should run arm64 libraries tests now?
"
"When we snap preview3 on the roslyn side we will merge changes in main into release/dev16.10-vs-deps. /cc @github in case I have that wrong.

Since loc is frozen for the entire 16.10 release it appears that this PR needs to be reverted.

I am not yet certain where to merge a compiler change that is destined for 16.7 (we are still deciding where to put `features/compiler`). I'll try to provide guidance on what branch this PR can be reopened against."
"> The buggy behavior occurred when there was no semantic classification or diagnostic request to trigger the flush of the old LS - instead, if we got an inlay hint request followed by an update, followed by another inlay hint request, the second inlay hint request would _not_ cause an LS synchronization to occur, and would instead reuse the LS from the first request verbatim.

There's something I still don't totally understand. Given the scenario where the editor

1. requests inlay hints
2. sends updates
3. requests inlay hints
4. requests errors

I understand that why the inlay hints might get skewed, but the entire text state for errors was off too - in a way that would imply the whole file was corrupted. So:

1. Why didn't `geterr` immediately force the old LS out?
2. What is it about a subsequent `updateOpen` (and maybe some other semantic operations) that enabled us to recover?

Every time I think that I understand what's going wrong, there's other architectural questions I have. For example, maybe it's not that the document itself is corrupted, it's just the line maps. I can understand that, but if it's just the line maps, why does that affect the checker's view of the file content (as opposed to the ranges on which it's reporting)? I can imagine that the line maps are used to construct the document for the LS, but then arguably the document text must be inaccurate in a way that's hard to recover from.

> Credit to @github for the actual fix.

It wasn't until @github left her comment over at https://github.com/microsoft/TypeScript/issues/45320#issuecomment-894847214 that the problem jumped out at me. The credit really goes to her!"
"Btw, we already even in Default mode expand casts to non-sealed classes with a quick fast-path that can be wrong - PGO can help here as well, let me add `CORINFO_HELP_CHKCASTCLASS` support. see [sharplab.io](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKBpuIGYACMpgQRoG8aneXmAbgEsoGAK7YANixRMAIhADq0ANYAKAJRMAvAD4W5AJxqARGxMaA3DQC+daoxakmAISYh2XHn0cQBMKCghABMYGXklVU0dfWIjUxcLa2o7WgdmVgAVGFwMXC9qPn5wgFk1AHlgACsYMAwmCA1vXm5Cor4Aeg6mACkASUymIQA7XAC8pmwmADM8DDgAB2wMAAsmEwgAfgA6AHEYDEyATwWw7W0mDBOYCGm1Ng0TJmb2rqZgMXrsYaHcYYxvmAwrdXEx8EIAOYrerAMJLXBjYIvIpqe4aRrbBTKKDqKwvVI2IA===)

"
"@github could you please explain what you mean by 
 >  It's also designed to be (partially) AOT friendly by making the core icall not generic.


Also what's wrong with the existing `mono_wasm_invoke_js` ? 
(besides that it should not have `eval` and live in `EM_ASM_INT` macro, which I both fixed in my pending [PR](https://github.com/dotnet/runtime/pull/60504/files#diff-aeaa65b0a5528aaf1d5f89c138410cd639839359113f9c6a700efe2f9cf0e2caR479) .) 

"
"You and I get very different numbers.  How exactly are you building System.Private.Xml.dll with these changes and then running the benchmarks? Regardless, I deterministically see the TryWrite version as being at least 10% faster than what's currently in main, not slower as your numbers suggest.  This is exactly the kind of scenario TryWriter is geared towards, enabling devs to write the simple thing and let the system generate the optimal set of calls under the covers.  So I want anything that should be using to use it rather than trying to work around any perceived current perf limitations by open-coding a replacement; then when TryWrite improves, so too does all the code using it... we improve the primitive implementations, and everyone benefits.  The code is also simpler, very clearly expressing the intent of what should be written.

If this were a super hot path, then yeah, it might be worth an exception to eek out a few more cycles of savings.  But we're talking about an API that's already a corner-case, used fairly rarely, a very small percentage of time, and then within that we're talking about a small percentage of that small percentage of possible improvement in open-coding the solution vs just doing the simple thing with TryWrite.  I would be very surprised if you were able to measure the impact of that difference on your 10-50GB workload; I'd welcome you trying it out and sharing the profiles that prove me wrong.

In the meantime, please use TryWrite, at the call site rather than in a helper.

Thanks."
"This is conceptually wrong. The errors are during the build, not the Helix run. Running _one step_ from the build outside Docker is... I have no idea how to achieve that, the Docker image is defined and used for the entire job leg (i.e. it applies at the `Mono llvmfullaot Pri0 Runtime Tests Run Linux arm64 release` level, and cannot be countermanded only for the failing `LLVM AOT cross-compile CoreCLR tests` task - that's not how AzDO works."
"@github - I have merged in the Crossgen2 fix and I tried to initiate creation of its backport PR to .NET Core 6.0 but GitHub complains that ""I'm not a repo collaborator"", have you got any idea whether I'm doing something wrong or whether there's some real problem with my access rights?"
"> but this file does not seem to be present in the downloaded artifacts. Maybe I'm looking at the wrong place? Any idea @github / @github?

https://github.com/dotnet/jitutils/pull/347 added the logic to save files. Looks like we save the ""top files"" diffs, but not the files corresponding to the ""top methods"", which would also be useful (maybe more useful?). If the DisplayMethodMetric function could be augmented to appropriately set `RetainFile`, this could be done.
"
"@github I don't know if this is still relevant, but here we go: One reason to bubble up all exceptions (if at all possible) is that developers need to be alerted of problems. Like, if there is network flakiness or some server issue, it needs to show up in error reporting. Yes, it might not make a difference during normal execution but there is still something wrong if `Close` fails.

There could also be internal bugs to some library or provider that better show up in error logs. There could be rare state corruption going on, and swallowing would hinder debugging efforts."
"Tagging subscribers to this area: @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

fgMorphModToSubMulDiv tries to check if it is ok to ""clone"" locals
instead of spilling them by checking for address exposure. This was
necessary because GTF_GLOB_REF is not up-to-date in preorder during
morph, which is when this runs. However, address exposure is not valid
for implicit byrefs at this point, so the check is not enough.

The logic is trying to figure out which of the operands need to be
spilled and which of them can be cloned. However, the logic was also
wrong in the face of potential embedded assignments. Thus, rework it to
check interference on its own.

As part of this, remove fgIsSafeToClone and make fgMakeMultiUse less
conservative by avoiding checking for address exposure. This was
probably an attempt at some limited interference checks, but other uses do
not seem to need this.

Fix https://github.com/dotnet/runtime/pull/65118

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>jakobbotsch</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>jakobbotsch</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-CodeGen-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"It was the only test running for the entire file :(

I don't know of a way to detect it. We could perhaps add a check to see how many tests passed and if the number is less than 10 we know something is wrong."
"@github hates this, but he's wrong. It's the bees knees. "
"This pattern of having a static `CreateDefaultDispatcher` plus an optional constructor param seems unusual to me, so I'd be interested to understand the goals.

I would have found it more intuitive to have something like a `protected abstract` read-only property for it, so that it's not needed as a constructor param, and you can't get into a situation where the wrong type of dispatcher is used with a particular type of renderer."
No reason. I was probably being dumb.
This comment seems wrong. Should it read `// * { - in the local function context`?
"I checked and the [spec](https://www.w3.org/TR/WD-logfile.html) asks for UTC, but the format looked completely different than the `Date: ` header, so it seems I was wrong about the format and this PR has it right. Date and time are supposed to be separate fields.

I found https://stackoverflow.com/a/19825775/719967 which is also interesting. Apparently, IIS takes the timestamp when the log is emitted, so I don't think there's any expectation it match the Date header so ignore everything I said about that. That said, caching the results of these ToString() operations should be done like in DateHeaderValueManager, but that could be a follow up issue we make up-for-grabs or something."
I keep copying the wrong project path ☹️ I meant src/Framework/AspNetCoreAnalyzers/**test**/Microsoft.AspNetCore.App.Analyzers.**Test**.csproj
">// (6,23): warning CS0028: 'A.Main(string[])' has the wrong signature to be an entry point [](start = 16, length = 90)

Why don't we report the same error as in the previous test? #Closed"
"Also, just a thought: do we want to tell people how to collect the traces from nethost when stuff goes wrong?"
"I am not sure this is the right way to handle error recovery. It feels wrong to always end up in a simple case because of this condition. I would like to better understand the scenario you are trying to guard against.

---
In reply to: [137416036](https://github.com/dotnet/roslyn/pull/21356#discussion_r137416036) [](ancestors = 137416036)"
"> Still got some merge conflicts

Nope, just targeting wrong base branch"
"The type would still be wrong. The problem is that we need to actually change the type from pointer to reference, but the language sees a fixed buffer as being of pointer type. We could change the type earlier in codegen, but I think that would be a riskier change."
"@github I doubt anything is actually wrong w/ this PR. It's a point-in-time thing as the loc team works through the necessary translations. The most recent aspnetcore-localization build brought us to `83% localized for 24 resource files`.

My suggestion to review now was to make sure we got a good chunk of the localized strings into the next public release."
"I think this comment is wrong now since we check for an interface before looking for the pattern. I don't think that this code should add any errors, though. The error reporting in the other methods makes sense."
"Still rubs me the wrong way that `VerifyRenameOptionChangedSessionCommit` is making expectations of the pre-commit span.

I agree that the attribute rename case is covered by the integration tests and this file can be rolled back."
This is wrong when the document is in a subfolder. Working on it.
">(binary, left, right, type) => node.Update(node.OperatorKind, node.ConstantValueOpt, node.MethodOpt, node.ResultKind, left, right, type) [](start = 49, length = 136)

This feels wrong. Instead of updating the ```binary``` the lambda will keep updating the original root node over and over again. So, none of the BoundBinaryOperatorBase children collected into the stack below are going to be updated properly. Also, given that we are supposed to be able to update ```BoundBinaryOperator``` and ```BoundUserDefinedConditionalLogicalOperator``` nodes, we cannot rely on the same ```Update``` method to do that. Since none of the issues were caught by the testing, it feels like we are lacking adequate test coverage for the new code in this file.  #Closed"
"yeah I never expected this approach to get accepted as a ""quick"" fix when it adds compiler errors. I mainly included it to learn from the discussion about it but looking back at it now, it feels like a ""dumb"" decision and mostly waste of time. I'll remove it tonight so we can move on with the fix 😄 "
"This seems wrong, no? Should we be throwing NSE instead?"
"A lot of this logic appears to be duplicated with the caller. If that's true, since we expect this to be rare, could we just await a recursive call back to the caller? If there's any concern about stack diving from the recursion, we could queue the call. It'll end up being more expensive when it occurs, but it would seem to simplify things (feel free to tell me I'm wrong :) and this is supposed to be very rare."
Looks like wrong `?`
"In the current code, the `balanceStack` is never reset. Take the case, where the user runs a series of balance out operations. Then they continue with some other work. After some time, they select some text and try to balance in. The current code will pop the stack and give wrong selections

Or take the case of a series of balance out, escape, then another series of balance out in a separate part of the file. Now when you balance in, the stack has selections from the first set which would be wrong"
This is more about catching wrong code path early. These values are used in code paths which need to be removed by linker
"Oh right, maybe I did it wrong. Indeed it does. Thanks"
I thought in the design meeting it was decided IQueryable would not be changed? I might be remembering wrong.
"@github 

> Correct me if I'm wrong, but would the change be made here?:

Yes, the point where the layout for both editor and title widget starts is this:

https://github.com/SneakyFish5/vscode/blob/c1905a3d139ea803c8f46ffc6535e9abdfcb1b60/src/vs/workbench/browser/parts/editor/editorGroupView.ts#L1702-L1702

As I already said, wouldn't this layout algorithm make more sense:
* editor group view layout gets called with the size it can consume
* editor title layout is called with that dimension and returns the actual width/height it consumes based on some rules
  * if multi line tabs are disabled, it just returns with `35px` (as today)
  * if multi-line tabs are enabled but the resulting editor size is below min width, it just returns with `35px` (see note below)
  * otherwise it returns with the exact height it consumed based on `offsetHeight`
* editor group uses the title height to pass on to the editor control
* layout is done

**Note:** maybe instead of the title control having hardcoded knowledge about the minimum size of the editor, it could rather accept the actual dimensions + the max dimensions it can consume. That way, the editor group view layout call can pass both the dimension and the max dimension into the title control. 

I suggest for now we ignore the other feedback I gave about `redraw` calling `relayout`, I think this needs additional thoughts how to get right. Let's first focus on the layout algorithm from editor group to editor title.
"
"also, the wording is wrong. `Maximized Focus` should be two words.

I don't think we're doing it right if we just copy the entire json schema field description into a freakin' tooltip, but it's what we've got today."
"> I modified deepFreeze to support an exclusion list. I then used this at the event location to exclude freezing the outputs.

Not a fan of that tbh - `deepFreeze` is ""deep"" and a flat list of key is always ambiguous in that context. Maybe my earlier suggestion was misleading. I like two things from this PR

1. improve `deepFreeze` to always ignore typed arrays because it is apparently illegal to freeze them. 
1. don't use `deepFreeze` when emitting the notebook change event. 

It is my bad that I started with `deepFreeze` here but I came to believe it is wrong to freeze objects that you ""don't own"", e.g the [function](https://github.com/microsoft/vscode/blob/1799e12d7ba8d94a5fa661d2ea2f2d6968e0b7a9/src/vs/workbench/api/common/extHostNotebookDocuments.ts#L31) that applies the change and emits the event should only shallow freeze the parts of the event it owns, like the event itself, `cellChanges`, `contentChanges` etc but not the notebook document or its cells. It's the responsibility of themselves to protect them from outside modifications (which may or may not be the case but that would be a different issue)"
"I believe the previous code here was just wrong:
![image](https://user-images.githubusercontent.com/2256941/171516329-a09f834e-ebf8-435f-b9e4-9f1c9c413b1e.png)
"
"> @github are you critiquing my PR or the original behavior? My PR is about doing less reordering, not more.

It's possibly I'm just looking at it wrong, but my initial impression was that your PR was making things worse than they were before. If I output the character `א` followed the character `ב`, then I expect to see `א` in column 1 and `ב` in column 2. 

This is my test case:

    printf ""א""; sleep 1; printf ""ב""; printf ""\n""

And this is what that looks like in the preview build:

![image](https://user-images.githubusercontent.com/4181424/89230682-b5085e00-d5db-11ea-824e-89c5e1692407.png)

However, with your PR merged, I'm now seeing those characters reordered as they are output, so `א` shifts to column 2, and `ב` ends up in column 1.

![image](https://user-images.githubusercontent.com/4181424/89230716-c5203d80-d5db-11ea-8775-c48abb88c1b1.png)

That said, I don't think the current behaviour is correct either. More complicated examples seem to do some weird reordering too. But this PR doesn't help with that, at least as far as I can tell.

"
"I've benchmarked your solution with and without exiting early and it looked to be overall slower than the non vectorized implementation. I assume this is because we essentially iterate over each character in the loop you proposed, as well as do all the vectorized comparisons. I managed to track down an issue with the implementation, essentially I should have shifted the mask by 32 bits as opposed to 16, generating wrong indices for the separatorlist. I hope this will fix the test failures."
"same here, message looks wrong
"
"> From discussion with Carlos: the only thing I'd really want to block over is the flag pointing the wrong direction when it's at a terminus. It's highly visible -- moreso than a usability issue -- and we'll be hitting the streets with it pretty soon. I suspect somebody will trip over the visual glitch in approximately the first eight seconds. 😄

I'll be sure to fix that before we release. In the meantime, could you cherry-pick it for the upcoming bug bash?"
Your editor's formatting settings are wrong (there should be a space before the opening parenthesis). This shows up several times below.
"I am not agreeing with that. what benefit we are getting here more than creating burden on us asking every app running into this problem to enable this switch? why returning invariant data for any locale is bad or wrong? "
"In the PR I also fixed a number of problems with the namespaces, which are wrong, we should fix those too else most IDEs will throw warnings and there are a few not needed uings."
"which runtime assembly it is going to choose? I think if a package doesn't provide a rid agnostic tfm it should as that is a wrong authored package and if it can't run rid agnostic it should throw? "
Can you explain how? Why is DependencyInjectionEventSource.Log.ServiceRealizationFailed fired? I thought we just put the compiled accessor into the wrong slot and don't use it.
"@github I'm glad you pointed that out--this is definitely wrong then.
"
"Renamed wrong method?
"
this change is confusing. Either the baseline was wrong before or it's wrong now. I think it was wrong before.
The description here looks wrong.
"So if I understand correctly, the only think that can go wrong with this change is parallel ReadAsync operations, which user code is not supposed to do anyway...

Should I add the guards against parallel operations in this PR, or should we do that separately? @github @github , thoughts?"
"this math was also wrong before, for the same reason as the `indent++`"
"something went badly wrong with the configuration here, it looks like."
"> @github, @github, @github, I'm curious about the confused emoji you selected. Is that about the `!!` feature itself? About dotnet/runtime using it? About something else? Thanks for any feedback.

Hi! Yes, my reaction refers to the feature itself.
I have three concerns:
1. It seems to me that this reduces the readability of the code and increases the entry threshold. Instead of self-documenting attributes like [NotNull], we introduce additional language tokens, the purpose of which can only be understood from the documentation. It's like managed pointers `^`, it's like the first step towards getting closer to the C++ syntax, which has raised a lot of questions about the difference between `const char*` and `char const *`. `!!` matter - we must pay attention to them. But at the same time, these are only two characters - we will have to focus on each argument, looking for them. The difference from the `[ThrowIfNull]` attribute is only in length. So we slightly help those who will edit a method that uses NotNull arguments, but complicate life for those who use this method. 
2. It seems to me that instead of modifying the compiler, we delegate its task to the programmer. Thanks to non-nullable reference types, the compiler knows exactly which arguments can be null and which can't. If we don't want to validate arguments in the code, then let's not and let the compiler provide Fail Fast! for us.
3. I think this is a step in the wrong direction. Besides to checking for null, we have other checks for: empty string, empty collection, undefined Enum element, out of range, null element in collection, etc. All these checks will remain in the body of method. As a result, the probability of error will increase, since now both the one who edits the method and the one who uses it need to look for checks in two places. And the solutions for the cases described above cannot be written so simply as `!!` It seems to me that it would be more correct to concentrate on the ability to generate code based on attributes and increase the flexibility of the attributes, which would allow us to get AoP for all cases. "
"There might be a bug in something somewhere that causes some issues in some scenarios. Sometimes some builds couldn't load a task or loaded the wrong one. This seemed to fix it 😆 

This will be fixed in later previews - whatever the issue actually is."
To fix the wrong check by others it should be enough to expose an extension method but anyway it's not a big deal!
"```suggestion
""We may not investigate issues which haven't received many votes/comments and choose to close these. The reason is that the impact is very scoped and potentially something is wrong in the user code.
```"
">// (12,17): warning CS0028: 'Program.Main()' has the wrong signature to be an entry point [](start = 16, length = 89)

Please add a prototype comment to make this diagnostics more specific. #Closed"
Wrong direction.
I didn't think it was possible at all in older CLI. Could be wrong.
this looks wrong (for the same reason i mentioned in hte C# side).
"> but my question is why? 

Because i would really prefer to not have code that does stuff that is not necessary.  *Especially* at this layer.  I've tried to make it very precise and work very correctly with the documented sqlite API.  When we do things taht are unnecessary, it just makes things more confusing IMO because either it will convey the wrong thing to the reader (i.e. that the transaction is necessary), or it will have comments on it saying things like ""we don't actually need this, but we're doing it"", and eventually we'll be at a point where people will say ""i don't want to even touch this because i'm nt sure if it will be a problem""

>  is there an issue having transaction outside covering everything? 

Let me ask you this question:  do you place a `lock (something)` around all assignments in code?  Or do you just use that (and other synchronizations mechanisms) when appropriate because you actually have shared date and/or races to contend with?  

>  transaction seems too fragile and easy to get wrong.

I personally disagree.  I think it's vital that people not just ""throw transactions"" at the problem, in the same way i dont' think multithreading problems are solved just by adding locks.  Sqlite is *extremely* clear on the guarantees it provides (or not), and i've used transactions *judiciously* in the two places where they are needed for correctness.  "
"Maybe my understanding of `SequenceReader.TryCopyTo` is wrong -- won't `TryCopyTo` fail if it can't copy the entire length?

(also -- this isn't a recursive call, it's calling the `Span` overload)"
This test was just outright wrong: it was using ? in cases where we didn't enable nullable.
"Ah, so not something I can fix in this PR then. (I agree it sucks though!)"
💡 Consider using the `EqualOrDiff` form I used in #40097. It provides a much better message if the order is wrong or items are added/removed.
"> Why is the IDE so confident their annotations are correct even though virtually all the code they depend on is oblivious?

Some of the code we've already annotated and in doing so annotated everything they call into.   No compiler API nor framework change at this point would result in different analysis.

> To be clear: if the IDE wants to apply more structiny to their changes I'm not against that.

I'm not saying I'd want to commit 100% to it's not changing, and I'd say we reserve the right to make a breaking change like we do at any time (because ""we don't make breaking changes"" is never true in the real world). I just would expect additional scrutiny at this point in the already annotated parts of the IDE layer, because it means there's something far deeper afoot and we either misannotated something (and we need to understand what went wrong) or we are potentially changing a contract."
@github merged #40234 which means you don't need these anymore. something went wrong if these are reappearing.
"What's wrong with ""onDidChange""? It's been used in numerous places."
"Oh, I was wrong. [It is passed](https://dev.azure.com/dnceng/public/_build/results?buildId=794778&view=logs&j=2d2b3007-3c5c-5840-9bb0-2b1ea49925f3&t=e0810b27-de1e-5f7f-0df7-1a1042e925c2&l=1148)."
"This is wrong. As `System.Numerics.Tensors` is a shipping package but with a non-stable version. "
"Did we confirm that if the import isn't satisfied that the Lazy itself is null, or the Lazy is not null and .Value is null? For some reason I thought the ? would be inside the type argument but you now have me thinking I'm wrong and it looks like we don't have other examples of this in Roslyn. An easy test would be to add a test import to this method importing some obviously-not-MEF-exported type and you can see what you get."
"243 isn't wrong; because we're not dealing with a grid layout there, the inter-item spacing doesn't have any meaning. Unfortunately, at a second look 233 _is_ wrong. With a horizontal scroll direction, the horizontal item spacing maps to GetMinimumLineSpacingForSection, so GetMinimumInteritemSpacingForSection is the wrong value to use. 

"
"Looks like the Resharper settings are ""no space before the parenthesis after `using`"", so I just go that wrong in the VS settings file. I'll put in a PR.
"
"Type parameter handling was wrong. Fixed it in 
f18b28d and moved the filter logic to a common extension method for VB and C#."
"This won't work, as the color will not change with the theme once the font is applied. also turning FIE into a BP doesn't imply it'll get context.

I'm going to close this, as it's the wrong approach

"
"(Note to future self, codeflow is showing this wrong, it should be on the comment removal in SetParentOperation below)

That comment felt pretty self-explanatory to me, explaining the what without the why.

---
In reply to: [527721421](https://github.com/dotnet/roslyn/pull/49453#discussion_r527721421) [](ancestors = 527721421)"
"> I feel like this is an argument to avoid using built-in members entirely in nullable tests and that is a fairly onerous ask.

The majority of tests in this class use the `CreateNullableCompilation` helper to run analysis. That uses either the `netstandard2.0` or the `net451` reference assemblies hence all of the built-in members are oblivious. If the intent is to test oblivious then that works. My suspicion is though that in most cases the intent is not to test oblivious. Perhaps I'm wrong here though. 

> A more reasonable ask would be perhaps to verify what are the annotations on ref assemblies that are used in our nullable tests in practice

The answer to this depends on the test. If the test uses the `netstandard2.0` reference assemblies then there is one answer, if it uses `netcoreapp3.1` then there is a different answer. Basically it is subject to some degree of change. Generally that the API will get stronger though which is a ""safe"" change from this perspective. 

Consider this specific case though: the test here is using the `netstandard2.0` reference assemblies which means this is validating that `string~` can assign here. Was that the intent? Reading the test I thought the intent was to check what happened when either `string?` or `string!` was the source of the assignment. Am I just reading the intent of this test wrong (or reading the setup code wrong)?

> I'm a little resistant to the idea that we need to account for it here because it is going to need to be accounted for en masse.

I'm not suggesting we go back and rewrite all the tests. At the same time seems like something we could avoid going forward with new ones. 

> A more reasonable ask would be perhaps to verify what are the annotations on ref assemblies that are used in our nullable tests in practice, and ensure that the annotations on ref assemblies for tests do not change accidentally

The model we try to operate on is that we keep pushing the `.NET Core App` reference assemblies forward. Observe that while we have `netcoreapp3.1` assemblies we don't have `netcoreapp3.0` or `netcoreapp2.1`. That's because we're always effectively on latest. The API sets which are stable are `netstandard2.0`, `net451`, etc ... 






"
"I don't understand: if only API-27 is installed, why should we set (output) `$(TargetFrameworkVersion)`=v8.1 & `$(_SupportedApiLevel)`=28?  This seems wrong. Shouldn't `supportedApiLevel` be `""27""`?"
"(And if there was something wrong with it, why is it still ok for mono?)"
"End of ""wrong indentation"" section."
"And again, since this is the last place I'm aware of this being discussed, I just came across [Selenized](https://github.com/jan-warchol/selenized/), which is a rework of Solarized. Although I'm personally not planning on switching to it (it doesn't have the neat magic-switch properties of Solarized), it does have [four distinct variants](https://github.com/jan-warchol/selenized/blob/master/the-values.md) and the large advantage of [mapping to terminal colours in a way that is rational out-of-the-box](https://github.com/jan-warchol/selenized/blob/master/whats-wrong-with-solarized.md#better-terminal-compatibility).

So it might be a good candidate for Windows Terminal to support in place of (or as well as) the current some-colour-swapped-Solarized schemes, for people who like that style of colour scheme but not fiddling with their console application configuration."
"What does it mean for a component to build against the latest Roslyn, but only use features that were present in an older one.  Would you allow that component to load in the older one?  How would you permit the higher assembly ref to be satisfied?  What if the user got it wrong-- `MissingMethodException`?"
"I don't exactly know how it works but there is interfaces like [IVsEditorFactoryChooser](https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.shell.interop.ivseditorfactorychooser) that can be used to more dynamically choose editor factories. I'm not precisely sure how to use it but it looks like it's given an IVsHierarchy so we can use that to figure out if it's a C#/VB project or not.

(Independently I'm still worried we have a bug since the editor factory load should trigger the package load, so the fact your change did anything at all still seems wrong.)"
"> But is there a real need for this contract?

Well, the contract just proves i'm sane.  If it were to fire, i'd want to know, as it would indicate something broken in the AsyncBatchignWorkQueue.  It's an open philosophical questiuon if any contracts are truly required.  However, i still like them :)

> Even if there were more events it doesn't seem like it would be a problem since we only care if one of them is true

True.  However, it would mean something went terribly wrong with AsyncBatchignWorkQueue.  And that is something we'd need to know about to fix since so much depends on it."
"oops, this was not even the right PR. What is even wrong with me
"
"`&&` because the code inside requires both AVFoundation and CoreMedia to work (I figured that's the closest to the original ifdef).

The logic itself might be wrong, but I wanted to change the logic as little as possible, since that's not what this PR is about."
"minor: wrong quote `'`, not `"
"Is the `FillHandshakeBufferAsync`wrong  as well? Perhaps @github has better explanation than me. I feel that if we don't like this pattern we should remove it from SslStream in other places as well. "
"> But is it best to assume that there is no availability on those platforms? 

No. Lack of availability attributes means it's been available since our earliest supported versions.
E.g. lack of `[NoWatch]` implies it's `[Watch (2,0)]` and that the API has been available in the past 6 years (or so)

This is almost always wrong when adding bindings for a new Xcode (unless it added a new platform).

> Since it's a breaking change to remove things, and it's always easier to introduce things later on?

True :-) However it's true for code that we ship (post generation), not the binding sources!

Example:  `[NoWatch]` -> means we're not generating the API on watchOS.

If you don't _add_ `[NoWatch]` (in binding sources) then the API will be present inside `Xamarin.WatchOS.dll` (and assumed to be available since 2.0 which is watchOS minimum supported version).

If you want to fix that later, by adding `[NoWatch]`, then you are creating a **breaking change** (since the API won't be part of `Xamarin.WatchOS.dll` in the next release).
"
"> FYI @github Premek Vysoky FTE you'll have to redo #8074, I don't know what went wrong since the PR was green, but possibly some other change in master interfered with your changes and made things fail.
> 
> You can see an example of the failures here: [#8080 (comment)](https://github.com/xamarin/xamarin-macios/pull/8080#issuecomment-597389654)

I will take a look. There was also another change from Manuel going in yesterday, so might be more complicated."
I don't believe this will make any difference for the compiler (at least it doesn't on a test app I just tried) - also you're not doing anything to guarantee this in here. cc: @github (in case I'm wrong or there is something new coming)
"@github It looks like I don't have access to the pipeline logs, so I have no clue what's wrong. I must say I didn't expect catastrophic failure out of this small change :)"
"Ah, I see you're allowing a wrong-EH-region existing block to serve as preheader. Seems like we shoud just create a new one in this case so we can perhaps hoist something."
"Looking at the logs from the latest preview 12 build, all of these files are being sent for real signing (using the previous single entry approach) -- https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=5619716&view=logs&j=f8a716f9-5318-5935-19a4-149a64409b96&t=773a1aad-99f2-5f0b-eafa-0deb88171543&l=7064. I suspect something else is going wrong here."
"Furthermore, in the case that `lhs.expression` is `Identifier`, `lhs.expression` is `""exports""` and the name is `lhs.name` (from `exports.blah = ...`). If it's a property access expression, then `lhs.expression.expression` is ""module"", `lhs.expression.name` is ""exports"", and `lhs.name` is the name we're interested in (from `module.exports.blah = ...`).

So actually this code is wrong too. Changing it doesn't break any tests either, which is very suspicious. I don't think our checkJs coverage is very good."
"Are there error cases where we'd do the wrong thing by adding all CandidateSymbols without qualification?
"
"Hey Jared, see the above convo with Matt/Tomas.  My personal main objection over having this be `object` is that it gets _super_ easy to accidentally use the wrong value as the compiler/language gives you zero type safety.  For example, there is code that looks like this in this pr:  `base(..., id: reference.Id)`.  If the 'id' were typed as `object`, it would have been trivial to accidently mistype that as:  `base(..., id: reference)` instead.  In that case the compiler would have given me no information that i did anything wrong.  However, because it is typed as MetadataId, i must provide an actual value typed that way.

Similarly, in the code that consumes this later, i have a `ConditionalWeakTable<MetadataId, ...>`.  In this form the compiler ensures that i'm looking up/storing with actual MetadataIds.  If it were typed as object it would have been trivial to accidently write `map.GetOrAdd(ref.GetMetadata(), ...)` instead of `map.GetOrAdd(ref.GetMetadata().Id, ...)`.

So, in other words, even though it is an empty type, it still provides real type safety in the code.  Something i would like to keep around.  

So personally, i would like it to be typed.  It reduces the chance of errors.  And, if we want to add state to it (perhaps for debugging purposes), now it is trivial to do so.
"
The indentation here is wrong.
"Am I crazy for thinking that this input code doesn't actually look that complicated and that we're probably doing too much work somewhere? Like, this is all binary arithmetic - the result is quite literally _always_ a number - I'm not even sure why control flow comes into play."
"bash is so dumb, I hate computers"
"This was an added newline, not a whitespace, but it was removed all the same.

_Edit_, Nevermind am crazy, was looking at a different line.
"
"This line looks wrong to me.  We have a span relative to the snapshot for the subject buffer .  We then map that to the view buffer's snapshot.    BUt then we just ask for that span against the trigger snapshot... 

The trigger snapshot corresponds to the subject buffer.  But the view buffer is totallly different...
"
"I guess setting `this.formatCodeSettings` is enough for native fourslash tests. My bad, wrong advice."
"Possibly dumb question, but when/why do we have empty modifier arrays?"
"this seems like an expensive operation.. why was the other way of looking at the declaration wrong?
"
"I was indeed doing the wrong thing for that. I've added a test.
"
"> Reviewers: I have added an iteration to fix an order-of-initialization bug. Please let me know if you have any comments on that.

I do not see anything obviously wrong in the 10th commit"
"Sigh .... @github/roslyn-compiler PTAL 

Apparently I keep @ the wrong alias. "
"Hmm seems that something is going wrong:
```
System.TypeLoadException : Could not find method '.ctor' due to a type load error: Could not resolve the signature of a virtual method assembly:/Users/runner/work/1/drop/dmg/Visual Studio.app/Contents/Resources/lib/monodevelop/bin/Microsoft.CodeAnalysis.Features.dll type:RemoteEditAndContinueServiceProxy member:(null)
  at Microsoft.CodeAnalysis.Editor.Implementation.EditAndContinue.ActiveStatementTrackingService+Factory.CreateService (Microsoft.CodeAnalysis.Host.HostWorkspaceServices workspaceServices) [0x00000] in /_/src/EditorFeatures/Core/Implementation/EditAndContinue/ActiveStatementTrackingService.cs:45 
  at Microsoft.CodeAnalysis.Host.Mef.MefWorkspaceServices+<>c__DisplayClass5_0.<.ctor>b__1 () [0x00000] in /_/src/Workspaces/SharedUtilitiesAndExtensions/Workspace/Core/Workspace/Mef/MefWorkspaceServices.cs:42 
  at System.Lazy`1[T].ViaFactory (System.Threading.LazyThreadSafetyMode mode) [0x0001c] in /Users/builder/jenkins/workspace/build-package-osx-mono/2020-02/external/bockbuild/builds/mono-x64/external/corefx/src/Common/src/CoreLib/System/Lazy.cs:327 
```

Surprised that BinaryCompatChecker didn't catch this."
"It looks like something is going wrong in the Correctness_Build. IIRC, error code 57005 (0xDEAD) means some kind of memory fault is occurring. Not sure what in this PR could be causing it."
"@github Was there an issue discussing this feature that I'm not seeing?

Personally, I'm not sure that I like the idea of changing the claim processor at this point to have knowledge of some particular JSON-ims, and there are degenerate cases where things can go wrong.  Consider, for the sake of discussion, an identity provider that has two distinct claim values, `[""a""]` and `a`.

```C#
// Does anyone know why Fabrikam Identity uses such bad role names?
bool isAuditor = id.HasClaim(""[\""a\""]"");
bool isAdministrator = id.HasClaim(""a"");
```

In this degenerate case, an identity with the claim of `[\""a\""]` is now automatically both an auditor (String.Equals) and an administrator (String.Equals on the processed first array element).   This would break the security model, resulting in an elevation of privilege.

Adding special ""some identities use JSON arrays"" support now invites that other formats would be added later (and that no format can ever be taken away).  Combined with the fact that this type lives in the shared runtime, it means that any library using claims and using .NET Standard 2.0 couldn't really reason about whether their HasClaim is going to work or not.  (They'd have to target specific versions of .NET to indicate the minimum runtime behaviors they want for the same API).

---

All in all, I think that a better answer would be to make a new type (which extends ClaimsIdentity to override HasClaim) so that there's explicit opt-in (at some level) to this behavior.  It probably wants to be in a different library than System.Security.Claims, so that it doesn't leave a perpetual dependency on JSON.  And I'm not really sure that it even belongs in dotnet/runtime (it seems to mesh more with the JWT stuff, which is in a different repository... but maybe there's room for a new System.Security.Claims.Json package built out of dotnet/runtime)."
"> It will always be NULL the way it is being used.

...

> Hmm, not sure if this works for PSS / OAEP.

Yeah, it's really these two together that are why I made the local_ as complex as the real thing.

The local_ only checks for EVP_PKEY_RSA because it uses `base_id`, which turns `EVP_PKEY_RSA_PSS` into `EVP_PKEY_RSA`.  I think the purpose of the sidecar routine here was ""ugh, we have two different IDs for ""RSA"" and we keep getting the ""or"" wrong, so let's put them in one place"".  At least... that's the only reason I can figure out that they added it.

Yeah, in the generate flow the pkey is always NULL (which makes me wonder why they routed EVP_PKEY_CTX_set_rsa_keygen_bits through it at all).

1.0.2: https://github.com/openssl/openssl/blob/12ad22dd16ffe47f8cde3cddb84a160e8cdb3e30/crypto/rsa/rsa.h#L256-L258

```C
# define EVP_PKEY_CTX_set_rsa_keygen_bits(ctx, bits) \
        EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA, EVP_PKEY_OP_KEYGEN, \
                                EVP_PKEY_CTRL_RSA_KEYGEN_BITS, bits, NULL)
```

1.1.1: https://github.com/openssl/openssl/blob/081a7061f3da07318c4b0f5de67b82285630bf6b/include/openssl/rsa.h#L121-L123

```C
# define EVP_PKEY_CTX_set_rsa_keygen_bits(ctx, bits) \
        RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_KEYGEN, \
                          EVP_PKEY_CTRL_RSA_KEYGEN_BITS, bits, NULL)
```

Looks like in 3.0 it's a function in its own right, but I believe the EVP_PKEY_CTX_ctrl route (with or without going through RSA_pkey_ctx_ctrl) will still work.
```"
The `arm64` runs still timed out @ 8h.  Perhaps there is something else wrong.
"@github, I would not be at all surprised if I got the endianness wrong here.  Can you take a look?"
"> Were you able to test if the package testing leg will catch if we somehow get this wrong? If it doesn't catch it then I think we should be able to make a small change to raise runtime-targets for .NETFramework. I see that NuGet does create them.

Do you have an example of what to test for?"
"I haven't read through the comments here yet, but just taking a look as someone who spends a fair amount of time in the csproj files...

At a high-level, the change seems ok.  Some csprojs will get an extra few lines they don't already have, and conditions like `Condition="" '$(TargetsOSX)' == 'true'""` change to conditions like `Condition="" '$(TargetPlatformIdentifier)' == 'OSX'""`.  Ok.

I'm more concerned that some such conditions are more confusing and much more likely to lead to user error that's hard for us to understand and debug, and we'll end up with devs spinning their wheels trying to figure out what's gone wrong.  For example, one line changes this very obvious statement:
`<ItemGroup Condition="" '$(TargetsUnix)' == 'true'"">`
which is pretty obvious in meaning, to:
`<ItemGroup Condition=""'$(TargetPlatformIdentifier)' != '' and '$(TargetPlatformIdentifier)' != 'windows'"">`
which, at least to me, is not at all obvious.  I fully expect folks will get that conversion wrong.  And there's obviously a subtly I don't understand, because elsewhere this:
`Condition=""'$(TargetsUnix)' == 'true' or '$(TargetsBrowser)' == 'true'""`
is replaced by this:
`Condition=""'$(TargetPlatformIdentifier)' == 'Unix' or '$(TargetPlatformIdentifier)' == 'Browser'""`
Why is Unix usable in one TargetsUnix case and not the other?  Why are we checking for empty identifiers?  Etc.  To make this usable, that will need to be simplified.

Changes like this one are also harder to understand (at least for me) without digging in further to what's going on:
Before: `<ItemGroup Condition=""'$(TargetFrameworkIdentifier)' == '.NETFramework' or '$(TargetsWindows)' == 'true'"">`
After: `<ItemGroup Condition=""'$(GeneratePlatformNotSupportedAssemblyMessage)' == ''"">`

Separately, I'm not clear on changes like this one, which is removing a netstandard2.1 build apparently?
https://github.com/dotnet/runtime/pull/64500/files#diff-45edf6f0e5edd19513c971472903d2723a2d094773d9122b8726a684556c0248L4

The motivation called out at the very beginning of the PR states:
""This change makes it possible to migrate 200+ (ref+src) projects to use
TargetFramework instead of TargetFrameworks which avoids the additional
outer build evaluation and invocation which ultimately makes the overall
build faster.""
but that change doesn't appear to be in this PR.  If we're going to change everything over and make everyone on the team learn new more complicated conditions, it should come with a benefit... that benefit would seem to require changing those projects over to use TargetFramework, so it'd be nice if that were included in this PR.  A separate commit is fine."
"This is awesome. Correct me if I’m wrong but I believe most other engines only support fixed-length look behinds anyway, and we were among the only ones that supported variable length ones (mostly because of our support of rigth-to-left) which means after this change is in, most patterns with look behinds that work on other engines will now work on our codegen ones."
"> COMPlus_JITMinOpts=1

This will disable all JIT optimizations so you should not set this.
If you are not seeing JitDisasm it's typically because your function was inlined, make sure to mark it with `[MethodImpl(MethodImplOptions.NoInlining)]` to prevent that. If you post the full disassembly and C# code instead of just snippets it's easier for us to figure out what might be wrong."
"Hi,

According to issue #7198, the fact that the title is empty has been reported as an issue.

This happened when the back button was visible, but it is possible that I was wrong when understanding what to do to fix this bug.
"
Should those values be set in the initial java setter code? I wonder if we are doing something else wrong...
`publicId` is the wrong name
These exclusions were **Just Wrong:tm:** because our branch protection rules require a successful run of this pipeline
"I found that ""error -9806"" could be related to using the wrong curl on mac."
"Actually this is semantically important. VisitAlways marks the entry and exit for regions. When just visiting we skipped over the entry and exit, so statements were being assigned to the wrong regions."
"> @github you get the chance to respond to this feedback?

Been a crazy month. I'll respond tomorrow. "
"> it's an add-on.

If it's in the shared framework, what ""add-on"" distinction can be made❔

> Weather to add this to a new assembly or an existing one is a build question

I am fine w/ a new assembly in the targeting pack and shared framework if the API will be supported there. /ping @github 

> I tried putting it in Http.Extensions and wasn't a huge fan of how it looked, felt

I'd generally lean toward keeping another middleware in its own assembly but am curious: What looked or felt wrong @github❔"
this comment seems wrong.
"This returns true even if there are no IVT attributes. The check should be that there is at least one attribute, but all of the public keys are wrong."
"i think this could be worded slightly better.  when you say ""local function symbols"" it sounds like you're talking about the local function *itself*.  I think we should be clearer and say that ""symbols declared **inside** a local function do not cause collisions with symbols declared **outside** teh local function.  And so, should not be considered here.

Note: GetUsedSymbols is not a great name either.  it should be something like GetCollidableSymbols since htat's what we're really asking for her.e  We should also doc teh GetCollidableSymbls method to state what the intent of it is.  That will help ensure that we have a clear path going forward in the future for how to fix it up if we get something wrong (or as the langauge changes)."
"Before this change, the EEClass used to also store the native size so we wouldn't have to get the layout info. However, this field was only valid when `IsBlittable()` or `HasLayout()` was true. When they were both false, it happened to be `0`, which although wrong, happened to have the expected behavior for this particular case with `System.DateTime`. This PR doesn't use that field any more and instead always goes down the layout-info path, which asserts that the type has layout. Since `System.DateTIme` is auto-layout, the assert fails."
"We're skipping comparing nullable annotations between all original and updated symbols. The problem with fields is that the names of tuple fields will change due to pre-existing bugs, and so even `IgnoreTupleNames` does the wrong thing because the literal field changes. #Closed"
yes it can throw.  I wasn't certain if we just wanted to let it propagate?  As we control both sides it shouldn't ever be in the wrong format afaik when actually running.  If we catch / NFW someone editing the code might not realize they broke it.  Not sure.
">That's because you added a call to EmitStoreManagedValue(pslILEmit).

Nope that was always there.

>Sorry, that was wrong. The actual check is the BRFALSE to pNullLabel emitted above that drives the behavior difference.

Ah. I also determined this is related to `ref` vs `out` semantics. As mentioned `ref` doesn't update, but `out` does. I will clarify the comments here."
"I think the way it's written currently is easier to understand and diagnose if something went wrong. I'm going to leave it as is.

---
In reply to: [374345105](https://github.com/dotnet/roslyn/pull/41340#discussion_r374345105) [](ancestors = 374345105)"
Instead move next to ISyntaxFactsService.IsNamedParameter (which appears to be named wrong...)? Or can we reuse that?
"In this case the pass/fail expectation is passed in to the helper as bool and is related to the ssl handshake it self. When handshake is expected to fail, it can fail in (at least) three different ways: AuthenticationException e.g. peers agree that there is something wrong (fast), IOException when one side closes connection on error (fast) or nothing/timeout (slow)

I'm open to suggestions about names. Part of the problem may be that the `ServerAsyncSslHelper()` blends all three failures together has single timeout for all of them

Note that the time reported by XUnit is whole test execution, while the timeout is just for the handshake it self. "
">!method.IsEffectivelyReadOnly && [](start = 24, length = 32)

I might be wrong but it doesn't look like any tests were added to confirm/verify significance of this check. What about other conditions in this function? #Closed"
"I tried this approach and faced two issues:
1. If `new` is the first token on the line, attaching trivia to previous token seems to be not working at all, it got removed completely. Failed test:
```
 class App
 {
-    /* start */ /* end */ int Test;
+int Test;
 }
```
2. Formatter starts inserting line breaks after multiline comments in elastic trivia. Failed test:
```
 class App
 {
-    /* start */ public /* middle */ /* end */ int Test;
+    /* start */
+    public /* middle */     /* end */ int Test;
 }
```

I thought that I should preserve original code structure as much as possible and reduce any side effects. If I'm on the wrong way, I'd be happy to revisit my hacky approach."
this seems wrong...
"They're at https://github.com/dotnet/roslyn/pull/45918/files#diff-4750f840d4900df0c3b4fe6a6131e6b3R251 and https://github.com/dotnet/roslyn/pull/45918/files#diff-4750f840d4900df0c3b4fe6a6131e6b3R219 for C#, is there something wrong with them?"
"you're right, it doesn't change a thing. my wrong."
"That looks wrong. Not all places where you can declare a sass variable are also suited to declare a css variable.
"
"The assembly is listed in https://github.com/dotnet/runtime/blob/master/src/libraries/NetCoreAppLibrary.props; and my understanding is that the shared runtime will get the $(NetCoreAppCurrent) build instead of the netstandard2.0 build, which means it will reference System.Runtime and friends instead of netstandard.dll, and therefore netstandard.dll won't be part of its own dependency chain.

I very well could be wrong about any or all of this :smile:."
"@github I'm not sure we want the labels to _look_ like input elements because that would give the wrong impression that they are interactive. Since these are actually label badges they should all look the same way, and since we already use the circular badges for the activity bar and extensions viewlet I thought it would make sense to use that version."
"I don't think so. Without `def`, `buildTimeLimit` is essentially a global variable, and so available within the method `addWrappers`. Without `def`, `buildTimeLimit` would only be available within its declaration scope.

Or at least, that's how I read the [StackOverflow article](http://stackoverflow.com/questions/184002/groovy-whats-the-purpose-of-def-in-def-x-0). I know hardly anything about groovy, so let me know if I'm wrong about this.
"
"I think it's fine; it's pretty conservative. Since we're going through like two calls and then checking _some_ overload is maybe OK (rather than doing overload resolution), and _not_ validating any argument types beyond the first (that's what #29818 does), choosing to only issue an error when we're absolutely sure something's wrong seems reasonable."
"In a sense, this is not wrong—`gen` could have its `next()` called with no arguments, making `a` `undefined` at runtime. But previously, this fell into a special case of ignoring that optionality for convenience.

Now, when we try to get the iteration types of `Generator<R, T, S> | AsyncGenerator<R, T, S>` as an async _iterable_, we get `noIterationTypes`, because the former doesn’t have a `[Symbol.asyncIterator]()` member. Instead, we fall back to getting the iteration types of this union as an async _iterator_, using its next/return/throw method signatures to determine `T`, `TReturn`, and `TNext`. Because we have a union signature, it doesn’t count as a reference to one of the global generator/iterator types, and so it doesn’t take the fast path that ignores the optionality. Instead, it correctly sees that the `next()` method can take no arguments or `[1]`, and so it infers the type `1 | undefined`.

More work could be done to make union signatures take the fast path that drops the optionality if every signature in the union is a reference to one of the global generator/iterator types, but I felt like this was getting fairly complex for limited utility—the results it produces with less complexity are strictly more correct given the limitations we have for modeling this."
"So for example:
`v >= int.MinValue ` generates a tree that is equal to `return (v < int.MinValue) == false`
`int.MinValue <= v` generates a tree that is equal to `return (int.MinValue > v) == false`
However in case of ulong/uint:
`v <= ulong.MaxValue` generates a tree that is equal to `return (v > -1) == false
`ulong.MaxValue >= v` generates a tree that is equal to `return (-1 < v) == false
These trees look odd to me because (v > -1) is going to be always true.
Correct me please if I'm wrong.
 "
"I added remarks about throwing JSException on wrong type and also reference to HasProperty, GetTypeOfProperty"
"@github @github Thank you both!

> Btw if MSDN docs are wrong perhaps you could offer a PR for that in their repo?

I will send a PR, or at least open an issue in their repo."
"Updated this PR to let you pass in a logger during project or solution load mirroring the way the api works for progress reporting

I still kept the version of MSBuild at 15.3 because its unclear to me what our back-compat story is here. Famously the csc task [does not work with older versions of MSBuild](https://github.com/dotnet/roslyn/issues/40129). It seems like we may be guiding users down the wrong path by not taking dependencies on newer versions of MSBuild if that allows them to get into a state where the msbuild they use (and therefore the compiler) is older than the language features they may want to use."
"> Any other feedback here?

So for the single element versions of `vst1` and `vld1` intrinsics we never generate `ST1` and `LD1` on little-endian. There we always generate `str` and `ldr` since they provide more addressing modes.

e.g.

```
#include <arm_neon.h>

void foo (int32x4_t v, int32_t *a)
{
  return vst1q_s32 (a, v);
}
```

will generate a `str     q0, [x0]`

For big-endian we do generate the `ST1` and `LD1` though.  This is not to say that this patch is wrong or needs changing. but just a headsup that you have less flexibility. and the single structure single reg intrinsics are the most common ones."
"Not yet, will revisit this within a few weeks. It still feels wrong that the tests pass on command line but fail in the IDE. Surely the console runner is running the tests with correct bitness."
"> Seems OK. Double check that we didn’t have any tests disabled against that issue. Watch the next outer loop run to ensure it works.

checked.

>What about the comment in the issue about AutoLog.. it was wrong?

yes as eric mentioned it was tests default rather than systems default.

> I suspect you caused this by running as SYSTEM. Probably need to explicitly ACL the pipe to let lower privileged process use it.

i will try that


"
"`whitespace` is one word; I'd rather a) not have this function be _also_ wrong and b) not break the public API for the sake of it. We can take a separate PR on that.
"
"@github you told i need to merge into master and i am done with @github 's requested changes ,but i am not sure if i can merge (i think i must not have necessary rights to do same and i can  not see any option do it but i can be wrong as well since i am new to github ) but anything from my end is required to do so i will do it so please suggest me what action i should take . Thanks"
"Tagging subscribers to this area: @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

!! This PR is a copy of mono/mono#20690,  please do not edit or review it in this repo !!<br/>Do not automatically approve this PR:<br/><br/>* Consider how the changes affect configurations in this repo,<br/>* Check effects on files that are not mirrored,<br/>* Identify test cases that may be needed in this repo.<br/><br/>!! Merge the PR only after the original PR is merged !!<br/><hr/><br/>Allow to override build date with `SOURCE_DATE_EPOCH`
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good
and https://reproducible-builds.org/specs/source-date-epoch/
for the definition of this variable.

This date call works with different variants of the date command.

Also use UTC to be independent of timezone.

This helps a bit towards deterministic mono builds = issue mono/mono#20172

This PR was done while working on reproducible builds for openSUSE.




<!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
-->

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>monojenkins</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Infrastructure-mono`, `mono-mirror`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> and there's doesn't seem to be a concept of native runtime events from Mono. (Please correct me on this if I'm wrong @github @github)

@github is first working on managed event sources on mobile. native events are going to be added later.  and I believe we discussed adding a few events at a time ad hoc by hand, rather than generating all the ones CoreCLR has defined."
"It is definitely more than this PR, I think my information may have been wrong."
"> Even Maui?

I have not seen much done to make Maui trimming safe by construction. https://github.com/dotnet/maui/issues/355 that tracks the work does not have a lot of traffic. For .NET 6, I assume that Maui will be on trim and hope for the best plan that Xamarin apps have been on historically.

Correct me if my conjecture is wrong and we have plan in place to make maui trimming safe by construction for .NET 6.

We have done good work on making core libraries annotated for trimming in .NET 6. We have run out of time to address the trimming issues in the app models where I think M.E.DependencyInjection injection belongs. Another issue in the same bucket are issues with integration of source generated json serializers in ASP.NET that prevent ASP.NET webservices from being provably trimming safe by default. It will be something to focus on .NET 7. I expect that it will need work from multiple teams to address successfully (appmodel teams, runtime teams, language). 

> this PR isn't the solution.

This PR is the solutions with the tools we have at our disposal in .NET 6."
"> > Haven't yet mapped this back to see where it comes from.
> 
> It's also a little curious that there are so many more PMI diffs compared to crossgen2 diffs, do you know why?

because of generics? like every generic call-site is instantiated with one of 8 predefined types in PMI mode (or I am wrong?)"
"> I wonder, if the condition for having an empty span is so specific, why the failure is not easily reproducible? And how does `memLevel` affect that?

The memory level for the deflater represents how much memory it is allowed to use internally before flushing to `output` buffer. Larger memory, better performance and better compression ratios - the classic trade-off between speed and memory. The default is 8, which in turn means that the deflater is allowed to allocate up to 2^8 KB of memory.

So for example, if we try to deflate 10_000 bytes of data in a single deflate call, it deflater in most cases will not produce any output unless we explicitly say we want it to. In our case it is essential to avoid flushing and only flush when we're done deflating.

However there might be cases when the deflater has reached some limit in its internal buffer and will flush bytes. It might even flush as many bytes as we've given it opportunity to. My original assumption was that the deflater will always return `ErrorCode.BufError` when the provided buffer is full and internally there is more outstanding data, but because we're not explicitly specifying that we're flushing, I guess my assumption is wrong.

This is why working with `memLevel` 1 = 2KB internal memory is easier to reproduce the error - I can craft messages, more easily, that would exhaust its internal memory and cause it to flush.

I hope this makes sense, let me know if I can help further.

"
"@github I was hesitate to change setting attribute by file name because of the cache, so I duplicated the code to expose setting attribute by file handle. I felt wrong."
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

The wrong module was being passed to the remote unwinder because the load bias for shared modules was being calculated incorrectly.  This PR undo's the regression from PR #60995.

https://github.com/dotnet/runtime/issues/63309

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>mikem8361</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>mikem8361</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Diagnostics-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Last commit fixed a subtle bug.

When we devirtualize a tail call we might fail to recognize that the tail call is now a recursive tail call, because we are checking the wrong method handle. For normal methods this just means we may not mark the block range as a loop (which is bad but rarely leads to bugs). But for OSR methods this is fatal because they need to use this to trigger importation of the method entry.

One method where this happens is `System.Xml.Serialization.StructMapping:System.Xml.Serialization.INameScope.get_Item(System.String,System.String):System.Object:this` from the xml serialization libraries tests (under random OSR stress, we put a patchpoint at offset 0x1b).
"
"> > I did more testing on macOS and verified that it gets both: not enough entries and too many.
> > Because of the wrong estimation on count, we return fewer items than we should. It can get worse as we check provided buffer size agains lover number but then we iterate through all returned items, possibly writing to random memory.
> > Now, we also return too many items. The sysctl returns all UDP sockets even not binded and/or connected. I added simple check to weed that down. It is imprecise as there is really not ""listening"" state on UDP. But I tested the outcome and compared to `netstat` on both platforms and it looks reasonable. Returning something like:
> 
> Interesting and troubling at the same time. Apple apparently doesn't publish source like they used to (or if they do, I can't find it.) This behavior has me wondering if they didn't adopt `kptr_t count = (kptr_t)` as well, or a similar function.

Are we worried we can overflow `int`? I can bump count to `long` or `ulong`. This is no longer ""the answer"" but more so the upper guess. The actual answer comes from walking the structures and counting entries we like. "
"@github I'm pretty sure the fix here is to just change the call to this

```C#
bool PageIsInThisContext(IView page)
{
	var platformView = page.ToPlatform();
```

It's passing the wrong `MauiContext` into `ToPlatform` there which causes the `Page` to recreate the handler. That page already has a handler so `ToPlatform` will just return it if you don't pass in a `MauiContext`

I'm not too sure why this broke in `p14`. The `MauiContext` has been passed into the code since we created `AlertManager`. I'm guessing the work we did to rewrite these extensions made it so two wrongs no longer were making a right"
"Wait wait wait... This PR looks wrong. I never committed to 2.1 (only 2.2). This PR seems to have picked up a few commits from 2.2.

Btw I think the instructions for updating this pull request need to be fixed. I think the last line should be a force push."
"If this is being done here, are there also updates to the `EnsureInitialized` method above? Seems wrong that it also calls `Interop.GetBaseUri`.

Overall, the initialization flow starts to seem a bit complicated as there's more than one code path that calls these initialization methods. If there any way to consolidate this that would be good.

For example, it's not clear to me why the `InitializeNavigationManager` method now exists in `WebAssemblyHostBuilder`. Since the only thing it does is use synchronous interop to fetch its config from the JS side, would it work more simply to have a regular constructor on `WebAssemblyNavigationManager` that takes a `WebAssemblyJSRuntimeInvoker` and provides its own initialization logic? If so, the `EnsureInitialized` override could be removed, and we wouldn't need this `InitializeWithParameters` method. The whole flow would then be much more understandable.

I haven't really thought through all the details so maybe there are reasons it has to work like it does, but just want to check."
"Just a thought, which I don't mind whether you do anything with or not :) Instead of having multiple checks for `isWebAssembly` that run each time there are calls, an alternative would be changing the static constructor so that the static `_renderers` dictionary doesn't even get instantiated in non-wasm cases.

Then there would be no need to check `isWebAssembly` in each of these methods - they would just nullref if they were called on the wrong platform (and they never should be called like this - it could only happen if we introduced a bug since it's `internal` anyway - so a nullref is a reasonable level of error handling).

Additionally, if we add more methods that access `_renderers` in the future, we wouldn't have to remember to add an `isWebAssembly` check."
Oh I thought that was only for flaky tests. Not for surely failing tests due to path issues. But I could be wrong. @github?
"I might be wrong here, but if we were to support multi-threading we would still be single threaded on the UI, since changing that would be a massive breaking change of epic proportions. We would likely switch to use a synchronization context in the same way we do on the server."
This is problematic. For normal file-based assembly `C:\temp\MyApp.dll` the `assemblyDirectory` will end up `C:\temp`. But for single-file in `C:\temp\MyApp.exe` the `assemblyDirectory` will end up as `C:\` - very likely wrong.
"Yes; I had a source generator for the IHeaderDictionary (how I originally generated them); but the CI rejected it as a used project that wasn't in the shipped API, which seemed to be going wrong since it was just internal and not to be shipped.

Could automate it as part of the Kestrel code generator (so only need to add to HeaderNames); however that would need an attribute on some of the headers (e.g. `DNT`) to say don't add them (Obselete may work or may be too strong; since it also has `Path`,`Scheme`, `Method` etc.)"
This feels like the wrong place to do the normalization (assuming it is needed)?
"This seems wrong, if you can't find a TryParse method then the next binder should be called. Or probably more accurately, the TryParseModelBinderProvider shouldn't create a Binder if no TryParse method is found."
"Definitely something wrong here but it has nothing to do with the .vsconfig file. That's not used when building from the command line. In the #27003 scenario, .\build.cmd should have failed to find a version of Visual Studio containing a suitable desktop `msbuild`. Either the logic finding `msbuild` is incorrect or our global.json is missing something."
"To help flatten the code, consider inverting this `if` with `if (!block.Statements.IsEmpty) { continue; }`

Update: I put the comment on the wrong line. This is referring to line 65. Same could be applied to line 71. #Resolved"
"I don't understand what this assert is supposed to protect against. If the user code is wrong, why would we assert instead of provide an error? #Resolved"
">if (typeParameter.HasUnmanagedTypeConstraint) [](start = 16, length = 45)

This check belong in completion for the type parameter, this feels like a wrong place for this code. #Closed"
"i just realized something awful.  You'll need to do .ToString and .ToLower passing the ordinal culture.  Otherwise, ToLower can do the wrong thing if someone is in a culture different than english.  :(

team members can shed some more light on this..."
"See `TestEquality_Tuples_ErrorCases2`, for some reason the comment goes under the wrong diff on GitHub."
"> anyway, what it is doing here not much different than what others are doing. so fine if you want to update all those to whatever design you think better.

This feedback is about this particular change.  I think it would be worthwhile as there is already a lot of complexity here, and it seems more difficult than necessary to establish if the code is doing things correctly.  A simple refactoring here makes the code clearer and less difficult to get wrong.  Thanks!

>  also, that just change what needs to be considered like now one must know that return valued must be logged by all callers.

Yes.  That's the point :)  Now the language and compiler force you to think about that side of things.  That's a good thing :)  It means that if someone comes in and adds/changes any flow control, they're forced to consider the telemetry implications.

> anyway, what it is doing here not much different than what others are doing.

Lots of code follows the caller/callee pattern to ensure that the code doesn't need all control flow paths to be annotated.  Several other PRs in the last month got this exact feedback to make things clearer.  Thanks! :)"
Why did this change need to be made? Did we just get the marker wrong? #Resolved
"This is wrong.  `FreeBSD` is not a `Linux` variant. `Host` represents the machine where the generated code will run.  For your scenario, I don't understand why `Host` and `Target` are not the same."
"There are cases where we have a SIMD that we don't normalize when the lclVar is created because the basetype is ""Canon"". These were getting by before because of the bug in the importer where we were setting `GTF_IND_TGT_ANYWHERE` on the lclVar, which for a lclVar is `GTF_VAR_CAST`, so it passed the above check.
Note that prior to the introduction of SIMD types, struct types would always ""match"" here.
(Also, I think the `allowStructs` is just wrong and should be eliminated - we can have structs on all targets.)"
"```suggestion
        public System.Diagnostics.ActivityCreationOptions<string>? GetRequestedDataUsingParentId { get { throw null; } set { } }
```
I'm not sure how this compiled, it is the wrong type name?"
this is nested wrong.  you are *only* doing this in the submision case.  but the previous code only did it in the *non-submission* case.
"Am I reading this correctly that if someone reads to the end but then calls read again (such that _position >= _bufferedBytes.Length), they'll end up starting to read again at the beginning because they'll fail this if check and proceed to the below try?  If so, that seems wrong."
"I'll try to improve the comments.

A separate struct makes the code cleaner for me (vs. maintaining a bunch of locals and args).  Other, less important aspect: I expect some micro perf. benefits from reduced number of copies when making the call, but I may be wrong on this."
wrong type for `commandArgs`
"I did, since it shouldn't matter, but I can change it back if you'd prefer it actually throw back to the Cancel if something goes wrong."
"this could be static, right? It's always going to be the same in every call of this function.

Also, you might want to use a [raw string literal](https://stackoverflow.com/questions/56710024/what-is-a-raw-string) for the regex. That _should_ result in less escaping. I think it should be:

```c++
const std::wregex parameterRegex(R""(\$\{env:(.*?)\})"");
```

but I might have that slightly wrong"
"This is my first pull request, so I've almost certainly done something wrong on my UITest. Seeing as it is a simple fix on a new control, maybe best if the test is removed?
"
"I believe `CopySettings` is only supposed to copy by value (i.e. whatever was in the json) and not copy inheritance, so we don't need to worry about parents here right? cc @github to correct me if I'm wrong

Regarding the profile's defaultAppearance not inheriting from its parent(s), thank you for catching it! Fixed now"
">  Anyway, I think I need to check my solution because I noticed one issue. Spacing is calculated correctly but items on the edges have incorrect size. For example, items in first and last columns of vertical grid with 3 and more than spans will have different width than ones in inner columns

@github @github I think I see why this is happening - the `GetItemOffsets` method is using `GetChildAdapterPosition(view)` to determine an index for the item. But the index also depends on whether there are header/footer items, so with a header in place the index is off by one and the offsets for the items on the edges are calculated wrong.

I think I see how we can fix this; the SpacingItemDecoration will need to have the SpanSizeLookup item passed in from the ItemsViewRenderer; the SpanSizeLookup. I'll implement that in the morning and see if we can fix this issue. "
"You're not wrong 😛 'spose I was trying to selfishly get these bits of the alt buffer in now, and worry about that bug later. I'll give it another go though. "
"The way I understand the AIDL dokumentation is that multidimensional arrays like `int[][]` are not supported. At the moment the `CSharpCodeGenerator` or maybe the `AidlParser` just ignores higher dimensions and int[][] is treated like int[]. However throwing some NotSupportedException might not be wrong.

For `List` I think - but not 100% sure - you can put any supported object in. And one object can be a List which can contain other Lists and so on. I don't know why (maybe a bug) but the Android Studio does not support parametrization like `List<List<List<String>>>>`, just `List<String>`. So you can use `List` and put Lists in but `List<List>>` does not work!?

The CSharpCodeGenerator might not cover all cases for Lists correct and should definetely be unit tested also in this perspect."
"I just tested and I was wrong earlier, we do have scenarios already where we restore activities that are stopped:
````C#
        public static void Main(string[] args)
        {
            Activity a = new Activity(""root"");
            a.Start();

            Activity b = new Activity(""child"");
            b.Start();
            a.Stop();
            b.Stop();
            Debug.Assert(a == Activity.Current);        
        }
````

Given that there is probably no reason to special case this one. We could still restore _originalParent even if it is finished."
"Should we emit a warning/error if `%(Replacement)` is blank? I'm just thinking if someone put `Replace=""AndroidX""` on accident, they won't know what's wrong?"
"Because it was wrong :)

It turns out we only ever hit AddHeaders code path for two things:
1) Adding in the DefaultRequestHeaders
2) Forwarding headers for a decompressed response in SocketsHttpHandler

For (2), the headers are all raw response headers, so in AddHeaders above, the `if (sourceValue is HeaderStoreItemInfo info)` check will always be false and we'll never hit this AddHeaderInfo path.

For (1), the headers are all forced to be in HeaderStoreItemInfo instances (something else to revisit), and we were only getting here after calling ParseRawHeaderValues, which for a custom header with no validation would basically transfer the raw value to the parsed field.

But I removed that ParseRawHeaderValues call, so now we may still have raw values here."
"Sorry i was wrong here, the packages dont even contain the net461 dll, they just contain the .xml files.
<img width=""1427"" alt=""Screen Shot 2021-04-28 at 8 29 30 AM"" src=""https://user-images.githubusercontent.com/10516582/116430731-f68d0900-a7fb-11eb-8091-5797f6239b0a.png"">
"
"Yes, that's indeed wrong."
The indentation is wrong in several places in this file.
"Can you also add a test where the outer class isn't `static`?

And also a test for where the outer class isn't `partial`, or at least verify the behavior manually? To ensure the user gets a decent error experience so they know what they did wrong."
"And then it looks like it will set the ""Nugets built"" status to ""Success"", or am I reading this wrong?"
Wrong casing: our binding is `SummaryArgument`
there is something wrong with the indentation of the objects here.
"> It looks like `field` keyword isn't used anywhere.

Yes the test case doesn't use `field` (except in speculating - no original tree), hence `DoesNotUseField`. I don't see what's wrong with the new suggested name. Can you elaborate please?"
"@github can correct me if I'm wrong, but I believe you'll need to do something like:
https://github.com/dotnet/runtime/blob/6c50d9fad7217b0eeed2b27ca6ab9ab34bc0dd1f/src/libraries/System.Text.RegularExpressions/gen/RegexGenerator.cs#L40-L45
to avoid causing regeneration to occur on _any_ change to the compilation."
"What is the motivation for this change? Was this function doing something wrong? Is it safe to assume that the constructor of the right shape will be found? TrySynthesizeAttribute is handling the case of a missing constructor.
"
this seems wrong. `i` should be unsigned in this loop
"``` none
'{0}': an entry point cannot be marked with the 'async' modifier
Program does not contain a static 'Main' method suitable for an entry point
Program has more than one entry point defined. Compile with /main to specify the type that contains the entry point.
'{0}' has the wrong signature to be an entry point
'{0}': an entry point cannot be generic or in a generic type
Could not find '{0}' specified for Main method
'{0}' specified for Main method must be a valid non-generic class or struct
'{0}' does not have a suitable static Main method
Cannot use '{0}' for Main method because it is imported
```

plus a couple of errors related to main appearing in a script.
"
"Ok, thanks for the context. I don't feel equipped to do that testing & detailed review as an outside contributor. Unless directed otherwise I'll leave this PR open for a while and it's still sitting in a few months I'll plan on closing it to keep the queue small.

If that happens and I'm not wrong, maybe it'd be good to mark the issue as an `effort: moderate` or `effort: difficult`? I really don't see a way to expand the inner workings of the module resolution logic to allow arbitrary extensions."
"@github I retained the existing behavior but, now that I look at it, it seems wrong.  The value type of this map is a set - doesn't that mean that the new and old maps will refer to (and modify) the same sets?  It seems like the intention was probably to do a deep copy."
"Actually after sleeping over this i think it is better not to break the API and instead:
We can have internal method like below to populate session and editor services with host and (internal) fsHost member
Advantages of these are that we dont have to worry about accidental wrong access on host. 
Eg right now session has `this.host.newLine` which with current change should have been `this.fsHost`

I think now `newLine` doesnt have to be on `fsHost` with this change. 
`useCaseSensitiveFileNames` should be on `fsHost` as its related to file system


```ts
/*@github*/
    export function getHosts(host: ServerHost, fsHost: FileServerHost | undefined): ServerHost {
        return !fsHost ?
            host :
            {
                setTimeout: host.setTimeout.bind(host),
                // Other methods from host to be bound
                useCaseSensitiveFileNames: fsHost.useCaseSensitiveFileNames;
                readFile: fsHost.readFile.bind(fsHost),
                // Other fsHost methods to be bound
            };
    }
```"
"Looking through the change, this looks like an extremely disruptive change. There will be many individual scripts (outside the repo) that need to be adjusted. It also seems to turn RID concepts into user-visible concepts, possibly unnecessarily. I always disliked the usage of ""Windows_NT"" (IMO, it should be ""Windows"" - we stopped saying ""NT"" like 20 years ago), and ""OSX"" should be ""macOS"". But using ""win"" everywhere that an OS name is required seems like overkill. Especially since ""win"" is an English word as well as a magic RID abbreviation meaning the Windows OS. Using ""win"" instead of ""Windows"" in non-RID contexts seems wrong. Is this whole change worth the trouble (and inevitable long tail fallout)?"
"@github/dnceng I am seeing some weird things here. could you please double check if there is anything wrong? basically the PR showing the legs which not completed as ""in progress"" but when I view it in AzDo I am seeing them queued and not started. I am experiencing some problems with these legs and I had to restart them hoping behave nicely. Thanks for your help."
"Might be the wrong place for it, but I'd LOVE LOVE LOVE the above feature to work. It'd allow for generically modelling higher-kinded types in TypeScript without a giant plethora of overloads and fixes other DX-related issues with the current versions in libraries like `fp-ts`"
"This is awesome - I have been searching for a way to define such local JSX namespace for a while and wasn't aware that this is already implemented!

I've played a little bit with it and it seems to work pretty well - I only have one caveat with it: it doesn't support `/** @github jsx */` as it's not a member expression. Or at least I couldn't figure out how to make it work. As the whole thing only seems to work with namespaces anyway as you can't really put types onto runtime values - would it be possible to extend the support for it in a way that if a particular simple binding that is used as a pragma is imported from a module then this would check if the module itself exports `JSX`? I might be wrong - but the change seems quite logical and shouldn't be that hard to implement, given the fact that the whole notion of localized `JSX` is already implemented. I could even try to implement support for this myself. Would that be something that TS team could endorse?

EDIT:// I've tracked down [the PR adding support for this](https://github.com/microsoft/TypeScript/pull/22207) and it seems that what I'm after can actually be done by defining a factory function and a namespace with the same name. I had no idea that this is possible. In a way, my problem is solved with this - but I kinda still believe that looking up for a module-level `JSX` would be nice."
"Hey @github this doesn't appear to be working for me am I doing something wrong?
![styledNoComplete](https://user-images.githubusercontent.com/936006/115771933-6f2c3980-a3a6-11eb-8177-fff04fa70848.gif)
"
"> Hmm. I had tested that the build had ran, but I wonder if something else broke. I'll look at my build to see which libclrjit was used.
> 
> For the crossgen issue, I wonder if it generated armhf code. On most armv7 systems, that will compile and run, other then the fact interop code will receive parameters in the wrong spot. Console.WriteLine likely ends up being a native call, so this wouldn't shock me.

Thank you for looking into this! Not sure if it helps, but my build env and config is:
WSL2 Ubuntu
sudo ROOTFS_DIR=/home/jmorrill/armel ./eng/common/cross/build-rootfs.sh armel
ROOTFS_DIR=/home/jmorrill/armel ./build.sh -c release -arch armel -cross -subset clr+libs+host+packs -clang9

I've tried with this PR:
git fetch origin pull/45058/head && git checkout FETCH_HEAD

And tried with this PR cherry picked on a later commit from Dec 12th (60b6af1beaf6f973d80cf28d78f3284e2df342c7)"
"Tagging subscribers to this area: @github/ncl
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Backport of #46151 to release/5.0

Fixes: #45651

## Customer Impact

On Unix, when using blocking overloads of `Socket.ReceiveFrom` after an asynchronous call to the same socket, the call may return wrong `remoteEP`. Users of the `Socket` type working with UDP may hit this.

## Regression?

Yes. The behavior is correct on 3.1.

## Testing

In the original PR I extended `SocketTestHelper` so our existing `SendToRecvFrom_Datagram_UDP` tests can validate the sync-over-async path of the blocking `ReceiveFrom`. Unfortunately, those tests are disabled on the 5.0 branch, so I had to port a minimal subset of #44591 (the fix enabling the tests) so we can run them on CI for 5.0.

## Risk

Low. The bug was a small overlook, the product code change is minimal, and impacts only the affected sync-over-async `ReceiveFrom` path.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>antonfirsov</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Net`, `area-System.Net.Sockets`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>5.0.x</td>
  </tr>
</table>
</details>"
"@github, I'm not sure who order this assemblies, but yes, if they are in a wrong order will be a problem. I thought that when blazor generates blazor.boot.json it was being ordered there. @github do you know if the assemblies are ordered before being loaded on blazor?"
"> You should be able to do superpmi asm diffs using superpmi.py asmdiffs --gcinfo to see the effect there.

superpmi seems to be failing with `JIT failed to initialize`. `jit-diffs --pmi` isn't seeing any such failures, so I'm unsure what might be wrong here."
"BTW:
This is a 100% Debug.Assert in the product which is merged for 3.5 days:

It is super-weird that it failed on @github PR (which introduced the problem), but all checks there were green:
  - The likely reason is that [Outerloop was kicked off](https://github.com/dotnet/runtime/pull/56208#issuecomment-885644535) on 7/23 @ **15:36** GMT+2 and a [typo-fix commit](https://github.com/dotnet/runtime/pull/56208/commits/e7e9ca83ec9e7e7b649f1ee6cb7a8652d21b6977) in 45 minutes (7/23 @ **16:21** GMT+2) kicked off another run which did NOT include any results from previous Outerloop run.

The other problem is that this 100% Outerloop problem was in the product unnoticed for 3 days -- the PR which introduced it was merged https://github.com/dotnet/runtime/pull/56208#event-5070219115 on 7/26 @ 21:03 GMT+2 ... yet we noticed it only today around 7/30 @ 11 GMT+2 by accident on another Networking PR which ran Outerloop.
- Querying Kusto, there is no Outerloop failure in Official run (that is **very concerning**)
- Querying Kusto is super-hard ... if we didn't what to look for, there is no chance we would have noticed from queries that something is wrong

cc @github/dncenghot I will start email thread to see what we can do about these things longer-term"
"> 3. Some of the related annotation doesn't look right at quick glance,  stemming from this:
https://github.com/dotnet/runtime/blob/0767243f100777704ffd7f426d372acdeaa28362/src/libraries/System.Diagnostics.TraceSource/src/System/Diagnostics/Switch.cs#L206

Right looks `_defaultValue`  shouldn't be nullable

> The Switch base class that this value is passed to already is marked as allowing a null value here.

@github the base class annotation is wrong, sorry about that, i am gonna close this PR and will update the base annotation"
"> I'm confused why you would categorize this ICorProfiler implementation as ""careless"", is -1 considered a valid value that means gen2 for profilers?

No. -1 is not considered as a valid value to mean gen2. Perhaps ""less defensive"" is a better description than ""careless"" in this case. One could imagine a less defensive implementation look like this.

```c++
int gen = GetObjectGeneration(...);
counter[gen]++;
```

or a more defensive one look like this:

```c++
int gen = GetObjectGeneration(...);
if (0 <= gen && gen <= 4)
{
  counter[gen]++;
}
else
{
  assert(false);
}
```

In the former case, we will have a buffer underflow issue, in the latter case, the statistics are wrong. Either case is not great, but the former one is worse."
"Tagging subscribers to this area: @github/ncl
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

As noted in https://github.com/dotnet/runtime/issues/60769#issuecomment-951114180, the assumption that the live-built runtime of version `(X+1).0` can be a drop-in replacement in an SDK of version `X.0` is sometimes wrong, and it currently breaks our stress tests.

This PR changes both local (non-containerized) and containerized stress builds to build against the live-built runtime with the help of [`targetingpacks.targets`](https://github.com/dotnet/runtime/blob/main/eng/targetingpacks.targets).

Some tricky parts:
- The docker builds no longer replace the shared dotnet runtime. Instead, we copy the live built runtime dll-s and ref dlls under `/live-runtime-artifacts` and reference that location from properties required by `targetingpacks.targets`
- We also copy testhost to `/live-runtime-artifacts`. Tests being executed by `TESTHOSTDIR/dotnet exec STRESSBINDIR/HttpStress.dll <args>` then.
- Since I wanted to avoid using the entire repository as the container context, `targetingpacks.targets` also goes to `/live-runtime-artifacts`
- HttpStress needs compatible (7.0) `Microsoft.AspNetCore.App` bits. These are acquired by getting the latest daily SDK build with `dotnet-install.sh/ps1`
- This mechanism replaces the outdated `privateAspNetCore` stuff implemented in #33860
- To support local, non-containerized test execution helper scripts `build-local.ps1/sh` have been implemented. In case of HttpStress these scripts need to grab the daily SDK just like container scripts.
- Visual Studio experience is now broken for HttpStress, but it can be ""fixed"" by temporary local hacks if necessary

Fixes #60769.



<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>antonfirsov</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Net`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github/area-system-text-regularexpressions
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

The Regex span support changed the scanning infrastructure to always be based on spans.  That means that when a string is passed in by the caller, internally we still operate on it as a span.  That also means we can take advantage of slicing, and if the caller has specified via a beginning/length set of arguments that we should only process a substring, we can just slice to that substring.  That, however, then means that all offsets computed by the scanning implementation are 0-based rather than beginning-based.  The span change included a fixup for the overall match position, but not for the position of each individual capture, and that then meant that captures were providing the wrong values.  We unfortunately didn't have any tests for validating groups that also involved non-0 beginnings with string inputs.

Fixes https://github.com/dotnet/runtime/issues/66697

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>stephentoub</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>stephentoub</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Text.RegularExpressions`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
Sort order is wrong
"Do we have a test with more than 1 attribute? I thought we iterated over the attributes that way, but I might be wrong."
"Okay, I added the new class and did my best to mimic the existing logic but using the style of the managed encryptor.  The round trip tests are failing that are using the CngAes -> AesGcm round trip tests, and as far as I can tell the surrounding code looks fine, I verified that the keymodifier/nonce/tags are all being split up the same and passed into AesGcm, but the decrypt is failing with an authentication tag does not match.  The subkey derivation looks fine as well, in the debugger in that the same sub key is derived in Cng and Aes.  Maybe it will be obvious to you how I'm clearly holding things wrong slightly? "
"This log statement changed. It used to previously say:

> ""The JS interop call with callback id '{AsyncCall}' failed with error '{Error}'.""

but Error is not value that appears in the code. The calling code does say it should be safe to include the Arguments: in the log message, so this was probably a wrong log statement all along 

https://github.com/dotnet/aspnetcore/blob/832ea98014f9a49fceecf6b34e8c8b4c16b48ff5/src/Components/Server/src/Circuits/CircuitHost.cs#L371"
"Agreed, this does look wrong. I don't know what you mean saying it is an old bug; we didn't have private interface members except as ""bad"" metadata before. Do you have an issue tracking this as a bug in the implementation (it is more than merely a bug in the test, which is what a comment appearing here in the tests would suggest)."
This change looks **Just Wrong:tm:**. Could you explain @github❔
">refnessKeyword = modifier; [](start = 24, length = 26)

This code feels wrong. Why refnessKeyword is changed unconditionally, but refKind is changed conditionally? #Closed"
"Ah I understood it wrong then, I was under the impression that all APIs should be listed in Unshipped in 6.0 instead of keeping the 5.0 APIs in Shipped and new ones in Unshipped. I'll update the merge."
"Irrelevant comment, the solution is explained in the next comment


> @github Thank you!, sorry I should have done that form the beginning 😄. Here it is, this code actually gives me these results: 
> 
> ![image](https://user-images.githubusercontent.com/15148088/137327827-dd598f04-958e-44b4-8cb0-b949b09bc50a.png)
> 
> 
> The part that fails is this:
> 
> ```csharp
> Browser.True(() => // THIS PASSES
> {
>     ScrollLeftToEnd(Browser, container);
>     ScrollTopToEnd(Browser, container);
>     return GetPeopleNames(container).Contains(""Person 1000"");
> });
> 
> Browser.True(() => // THIS DOES NOT PASS
> {
>     ScrollLeftToEnd(Browser, container);
>     ScrollTopToBeginning(Browser, container);
>     return GetPeopleNames(container).Contains(""Person 1"");
> });
> ```
> 
> ⚠️ UPDATE: @github my initial statement was wrong these issues are also happening with the `js + c#` implementation, not sure why it was working at the beginning 😃.
> 
> Since this issue is reproducible on both implementation, then I believe as suggested `js-only` is the best option, but I will spend a bit more time to see if I can found a workaround to the bug. "
"> Why did this change need to be made? Did we just get the marker wrong?

A new type was added in front of the marker, special types precede all well-known types. The marker, however, should maintain its value (255)

---
In reply to: [250377270](https://github.com/dotnet/roslyn/pull/32689#discussion_r250377270) [](ancestors = 250377270)"
Nitpick: you might just want to write this syntaxTree.FindTokenOnLeftOfPosition(…).GetPreviousTokenIfTouchingWord() so then you don't have two locals and can't accidentally use the wrong one.
"I'm not super familiar with roslyn completetion, tagging @github
Is the display text ever different from the insertion text?  It seems like we just set the insertion text to the display text - http://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures/Implementation/IntelliSense/AsyncCompletion/CompletionSource.cs,368
but I might be wrong."
What's wrong here? #Resolved
Do you mean that GetHashCode nullable annotations is wrong?
"Correct me if I'm wrong, but I don't think ``WhereAsArray`` can be invoked here since memberGroup isn't an immutable array."
"Ah, I also didn't find it in libraries, but I saw that it was used in 
```<FrameworkListRootAttributes Include=""TargetFrameworkIdentifier"" Value=""$(NETCoreAppFrameworkIdentifier)"" />``` 
and I accidentally picked the wrong one. changing to `TargetFrameworkIdentifier`"
"The way we'd address this would be to put a bang on the first _target_, not the second _target_:

```cs
return Volatile.Read(ref target!) ?? EnsureInitializedCore(ref target);
```

That's technically a lie, since the bang is in the wrong spot. But since it's really just an internal implementation detail of this method I suppose that's ok and we shouldn't worry too much about it?"
i feel like there's gotta be an easier way to do this.  but i'm too dumb right now to think of it.
This is definitely wrong since it's generated. Just showing the basic idea.
This is supposed to be the equivalent of Math.floor? I'd still like to understand why it's there for the editor but wrong for your code. @github do you understand the purpose of that line?
"Also worth adding an assert that model2.SyntaxTree.ToString() gets you in-body-edited text back, just to make sure we didn't make a speculative model but it's somehow speculating on the wrong thing?"
"OK, from here down a few functions.... Watch out for my `.front()` and `.back()`. I was trying to be clever, but we need to be absolutely sure that I didn't substitute them wrong."
"> @github thanks. you seem to indicate there is a race condition even in todays code, can you clarify?

The previous code used to assign `userEnv` from the window configuration and `shellEnv` in two promises running in parallel. There was no guarantee at which order they would run. Not sure if the existing code still suffers from this issue, I'm not sure where `userEnv` is assigned to `process.env` now.

> Unfortunately the assignment to process.env has to stay in preload.js because once we enable sandbox and contextIsolation you cannot change process.env outside of preload.js.

And this introduces a problem, for us to know if we should assign it, we need the `configuration.userEnv`, but that is only available later and is not supplied to that promise so it can make the decision. The promise that gets the configuration and the shell environment ones run in parallel. How should this be tackled? (P.S. If there is an acceptable way to pass it in, or do the check before it, we can also avoid sending the message to get the shell env at all if not needed)

Just reiterating so we are on the same page, the problem that this tries to fix is that VS Code is trying to check the wrong environment for `VSCODE_CLI` and `VSCODE_FORCE_USER_ENV`. It checks the parent process environment, rather than the environment of the new window, which makes it make the wrong decision based on the environment of the first opened window."
"> Looks like something went wrong here:
> 
> ![image](https://user-images.githubusercontent.com/2193314/109822236-9f97f880-7beb-11eb-975c-6343d0f97979.png)

Yeah I noticed that so reverted the changes I had pulled in and will squash the associated commit when we merge this"
"The call to `base.GetChangeAsync` is wrong. The three providers act like so:

* Conversion: throw in unexpected code paths
* Indexer, Operator: Fall back to `base.GetChangeAsync`

I think we should unify the providers, but throwing is a bit harsh too. Is there a best practice in case `GetChangeAsync` is (despite all precautions) not able to finish its work?"
"<insert appropriate meme here for @github asking crazy questions>

More seriously, when generators are ran the IDE needs to compare results from one run to the next. I naively used == to compare the instances, so..."
this seems wrong -- the json object you're looking at which is an object cannot be used to get a string view!
These new package references for the .NET Framework is likely going to produce a new steady stream of issues about binding redirects being wrong or missing...
"@github wrote:

> How? The order of the lookup for imports will be:
> 
> 1. default/global location (which won't have XA available, because that would be in External for that system mono)
> 2. in-tree location (which should have XA)
> 3. External from system mono

Which is wrong: (2) should come *before* (1), so that when I use the build on my local (non-CI) machine -- which has the global location installed! -- I use the in-tree installation and *not* the system installation, because Parallel Installs Are Useful."
"I've never done this type of override before, please let me know if I did it wrong :)."
@github Given the recent Azure Pipeline [macOS build failure](https://dev.azure.com/devdiv/DevDiv/_build/results?buildId=2732325&view=logs&s=1afc3bfe-122c-538b-e9ad-2a86c2efcfef&j=9fac13c5-5013-5cc9-5c17-da47b3873a81) perhaps we should just print the full `outputPath` here in case we're somehow putting these files in the wrong place?
I was actually wrong here. Changes are applied to the data source on a background thread. This was allowing the background thread to run and force the update.
"I think projects tend to reuse shorthands. And certainly w/in a commit or series.

I'm also open to ideas for how to write rules for extra exclusions. e.g. Ignore strings shorter than x characters, or longer than y characters.

fwiw, there are 71 two-character (676 possible, 612 not in a dictionary*) and 399 three-character (17576 possible, 16991 not in a dictionary) tokens in the whitelist:

```
$ perl -pne 's/././g' .github/actions/spell-check/whitelist/*.txt|sort |uniq -c|sort -n|grep -A100 39
  39 ................
  47 ...............
  48 ..............
  71 ..
  93 .............
 105 ............
 150 ...........
 182 ..........
 240 .........
 309 ........
 311 ....
 324 .....
 348 .......
 356 ......
 399 ...
```
-- collectively, much more of the whitelist is 4+5+6 character sequences

Most of the annoying sequences I run into are hashes / base64 encodings (e.g. PKI or data: or git shas). My general response to those is to just ignore the file entirely -- the most common types are either .key/.pem/.crt or things like package.json/package-lock.json.

One thing you should do is review the whitelist, in reviewing it just now, I realized that there were a couple of misspellings in it... which I'm addressing by fixing & removing.

One example is `defing` which could easily be written out as `defining` if one wanted to force the word (the context is `#define` / `#undef`).

There's also the odd case of `TfEditses.cpp` -- that resulted in `Editses` being in the whitelist, but the thing is `EditSession` and it probably should be `TfEditSes.cpp`. -- Addressing that would be a distinct PR as it's a significant code change (renaming a file) and I'd definitely want pre-approval before considering it.

Note that you'll probably see things like `egistry` in the whitelist, since `\r` and `\t` are often used as escape characters, my code makes some assumptions at the expense of forcing people to whitelist some things which aren't actually misspelled in context. -- Windows unfortunately (for my code) tends to use `\` as a path delimiter which means that when my code looks at the string it's making the wrong guess and lopping off that `r` or `t`.

Anyway, please feel free to try it for a bit. I'm definitely eager to improve the experience."
"Okay this happens even in (app=light, system=dark), (app=light, system=light), and (app=dark, system=light).

I'm trying to look through MUX changes to see if there's something that stands out. [microsoft-ui-xaml#2377](https://github.com/microsoft/microsoft-ui-xaml/pull/2377) looks related, but I can't easily bisect on our side to see if that's it...


EDIT: 

it's definitely the `AccentButtonStyle`. If you add the following to the ""OkButton"" in the color picker dialog:
```xaml
    Style=""{StaticResource AccentButtonStyle}""
```

You get
![image](https://user-images.githubusercontent.com/18356694/81449480-f48eed80-9145-11ea-92ee-b203501672e2.png)

which of course, is the same wrong, and how the ContentDialog is implemented:
```xaml
                                <VisualState x:Name=""PrimaryAsDefaultButton"">
                                    <VisualState.Setters>
                                        <Setter Target=""PrimaryButton.Style"" Value=""{StaticResource AccentButtonStyle}"" />
                                    </VisualState.Setters>
                                </VisualState>
```
(I can't permalink it for some reason, but that's in [this file](https://github.com/microsoft/microsoft-ui-xaml/blob/master/dev/ContentDialog/ContentDialog_themeresources.xaml))"
"*Actually*, isn't this `catch`ing the wrong exception type?  The PR message and mono/mono#16607 show that `NullReferenceException` is the exception being thrown, *not* `ArgumentNullException`"
Should `bitness` really be a string and not an `int`?  (Crazy town: should it be an enum?)
"> static_map serves as a landing zone for us to go and switch to `constexpr` once we can build with `/std:c++20` and get constexpr sort. It might come at cost until then. In fairness, I asked Chester to use it here by way of kicking the tires.

Ah OK. I thought maybe it was something about the parameter types that were preventing the constexpr sort from working. I forgot it needed c++20. But even if the map construction were happening at build time, that's just improving the startup time - I wouldn't think it would make the lookup itself any faster. Anyway, it's not a big deal. I was just curious about the choice, and I could be wrong about the speed advantages of the map anyway."
"The merge has meant these comments point to the wrong spot, but I think I got them all."
"whoops that commit message is wrong, it already takes a profile object"
"Nevermind, I was wrong. The test I had for this was incorrect.
"
"Something seems profoundly wrong: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=5206231&view=logs&j=1b60410d-e1b5-52cd-3667-0526bcfaec46&t=ca1bfe29-b044-58c3-7299-b652a4645d9f

We properly detect that there's no current device:

https://github.com/xamarin/xamarin-android/blob/9f2d3bfa4fe65eeb254ebc2382e862ba0e8c43b4/build-tools/scripts/TestApks.targets#L42-L51

```
AcquireAndroidTarget:
  Executing: C:\Users\cloudtest\android-toolchain\sdk\platform-tools\adb  shell getprop ro.build.version.sdk
##[warning]build-tools\scripts\TestApks.targets(43,5): Warning : * daemon not running; starting now at tcp:5037
C:\a\_work\1\s\build-tools\scripts\TestApks.targets(43,5): warning : * daemon not running; starting now at tcp:5037 [C:\a\_work\1\s\tests\Mono.Android-Tests\Mono.Android-Tests.csproj]
##[warning]build-tools\scripts\TestApks.targets(43,5): Warning : * daemon started successfully
C:\a\_work\1\s\build-tools\scripts\TestApks.targets(43,5): warning : * daemon started successfully [C:\a\_work\1\s\tests\Mono.Android-Tests\Mono.Android-Tests.csproj]
##[warning]build-tools\scripts\TestApks.targets(43,5): Warning : adb.exe: no devices/emulators found
C:\a\_work\1\s\build-tools\scripts\TestApks.targets(43,5): warning : adb.exe: no devices/emulators found [C:\a\_work\1\s\tests\Mono.Android-Tests\Mono.Android-Tests.csproj]
##[warning]build-tools\scripts\TestApks.targets(43,5): Warning :   Command C:\Users\cloudtest\android-toolchain\sdk\platform-tools\adb  shell getprop ro.build.version.sdk failed with exit code 1
C:\a\_work\1\s\build-tools\scripts\TestApks.targets(43,5): warning :   Command C:\Users\cloudtest\android-toolchain\sdk\platform-tools\adb  shell getprop ro.build.version.sdk failed with exit code 1 [C:\a\_work\1\s\tests\Mono.Android-Tests\Mono.Android-Tests.csproj]
```

…so we create a new AVD:

https://github.com/xamarin/xamarin-android/blob/9f2d3bfa4fe65eeb254ebc2382e862ba0e8c43b4/build-tools/scripts/TestApks.targets#L52-L64

```
  C:\Users\cloudtest\android-toolchain\sdk\cmdline-tools\4.0\bin\avdmanager.bat create avd --abi x86_64 --force --name XamarinAndroidTestRunner29-x86_64 --package ""system-images;android-29;default;x86_64"" --device pixel_4 
  Config file for AVD 'XamarinAndroidTestRunner29-x86_64' found at C:\Users\cloudtest\android-toolchain\.android\avd\XamarinAndroidTestRunner29-x86_64.avd\config.ini
```

but we never *launch* the AVD, and instead try to wait for it to be available?

https://github.com/xamarin/xamarin-android/blob/9f2d3bfa4fe65eeb254ebc2382e862ba0e8c43b4/build-tools/scripts/TestApks.targets#L77-L85

```
  Executing: C:\Users\cloudtest\android-toolchain\sdk\platform-tools\adb -s emulator-5570 wait-for-device
##[warning]build-tools\scripts\TestApks.targets(77,5): Warning :   Process 'C:\Users\cloudtest\android-toolchain\sdk\platform-tools\adb -s emulator-5570 wait-for-device' failed to exit within the timeout of 120000ms, killing the process
C:\a\_work\1\s\build-tools\scripts\TestApks.targets(77,5): warning :   Process 'C:\Users\cloudtest\android-toolchain\sdk\platform-tools\adb -s emulator-5570 wait-for-device' failed to exit within the timeout of 120000ms, killing the process [C:\a\_work\1\s\tests\Mono.Android-Tests\Mono.Android-Tests.csproj]
##[error]build-tools\scripts\TestApks.targets(77,5): Error :   Command C:\Users\cloudtest\android-toolchain\sdk\platform-tools\adb -s emulator-5570 wait-for-device failed with exit code -1
C:\a\_work\1\s\build-tools\scripts\TestApks.targets(77,5): error :   Command C:\Users\cloudtest\android-toolchain\sdk\platform-tools\adb -s emulator-5570 wait-for-device failed with exit code -1 [C:\a\_work\1\s\tests\Mono.Android-Tests\Mono.Android-Tests.csproj]
Done Building Project ""C:\a\_work\1\s\tests\Mono.Android-Tests\Mono.Android-Tests.csproj"" (AcquireAndroidTarget target(s)) -- FAILED.
```

…which fails.

What happened to the `<StartAndroidEmulator/>` task?  Why don't we see any messages from it?

https://github.com/xamarin/xamarin-android/blob/9f2d3bfa4fe65eeb254ebc2382e862ba0e8c43b4/build-tools/scripts/TestApks.targets#L65-L76

Or is it because it uses `Log.LogMessage(MessageImportance.Low, …)` for its log messages?"
"Hey sorry for the runaround on this one. Talked with the team today - we do feel like the right way forward is just to trim the trailing newline if that's the only one in the paste contents. To quote: ""It doesn't make sense to be warned for multiple lines, but copy a single line and try to paste it AND ONLY SEE ONE LINE IN THE DIALOG. That's dumb"".

So thanks for the gusto in implementing the original request, but I think we want to take this another direction!"
"Either this test is named wrong, of the Obsolete attribute is missing in `srcB1`"
"> I'm not a fan of using DIMs in libraries that cross compile, it feels wrong to differ the contract based on runtime capabilities.

It falls out as estension methods where no runtime support and overridable DIM methods for runtimes with support. 

Don't see how is much different than the System.Memory package offerring extensions for string etc to add `.AsSpan()/.AsMemory()` which exist as instance methods when the runtime has support."
"Right, wrong comment"
"I was very wrong. I just was not calling the methods the correct way in xcode! "
"AFAIK not needed, am I wrong? is the min version."
"> Anything wrong with the current behavior?

Not so much wrong, but somewhat unexpected. We don't create symbols for duplicate accessors, but in order to get the field symbol we need to bind in context of an accessor. So, it feels like we are binding in context of an accessor that has different body. That is probably OK fall back strategy, but we need to confirm/understand exactly what is happening, whether that is an intentional fall back strategy or just an accident, etc. For example, does it mean that locals from the other accessor are in scope? I am not sure if we want this behavior.    "
"> some kind of middle ground API that's capable of outputting either IL or C#

Another variation of that is perhaps -- we extract as much interesting logic from the generator/compiler and back into the shared writer code, perhaps by having higher level opcodes. The test of success being that optimization work becomes rarely in the generator/compiler - they are relatively ""dumb"". Of course, I haven't thought this through at all."
"@github  latest build has no issues: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=5983905&view=results 

There were some conditions wrong, I guess it happened when we added the new diff for dotnet. Merging, will merge with the new stage one and will work on the comments."
Let me check again. I think I got this section mostly wrong.
"Seems I'm looking at the wrong enlistment. Woke up on the wrong foot ;-)
I'll fix the name. Sorry about that.
"
"I, personally, am not interested to see any intermediate wrong turns and typo fixes to be ""burnt"" into the history. We work on a specific, logically separate work item. Going through the process of trials and errors, etc. At the end we arrive to completion of the work item, that is what I would prefer us to record. I am not suggesting to squash PRs that integrate changes between branches, etc. Only PRs that are focused on specific work items, be it a bug fix or a logical step in a feature implementation. #Closed"
"Explain that rudimentary means 'inexact' and give example of where template classification will be wrong.
"
"I currently get the following test failures when running -testCoreClr locally:

```
✘ Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests.OrganizeImports.OrganizeUsingsTests.CaseSensitivity29ms
Error:
Assert.Equal() Failure
                ↓ (pos 6)
Expected: using ア;\r\nusing ｱ;\r\nusing あ;\r\nusing アア;\r\nusing ···
Actual:   using あ;\r\nusing ｱ;\r\nusing ああ;\r\nusing あｱ;\r\nusing···
                ↑ (pos 6)

Stack trace:
   at Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests.OrganizeImports.OrganizeUsingsTests.CheckAsync(String initial, String final, Boolean placeSystemNamespaceFirst, Boolean separateImportGroups, String endOfLine) in C:\Users\rikki\src\roslyn\src\Workspaces\CSharpTest\OrganizeImports\OrganizeUsingsTests.cs:line 40
   at Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests.OrganizeImports.OrganizeUsingsTests.CaseSensitivity2() in C:\Users\rikki\src\roslyn\src\Workspaces\CSharpTest\OrganizeImports\OrganizeUsingsTests.cs:line 1122
--- End of stack trace from previous location ---

✘ Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests.OrganizeImports.OrganizeUsingsTests.CaseSensitivity18ms
Error:
Assert.Equal() Failure
                                     ↓ (pos 305)
Expected: ···;\r\nusing CC;\r\nusing ア;\r\nusing ｱ;\r\nusing あ;\r\nusing アア;\r\nusing ···
Actual:   ···;\r\nusing CC;\r\nusing あ;\r\nusing ｱ;\r\nusing ああ;\r\nusing あｱ;\r\nusing···
                                     ↑ (pos 305)

Stack trace:
   at Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests.OrganizeImports.OrganizeUsingsTests.CheckAsync(String initial, String final, Boolean placeSystemNamespaceFirst, Boolean separateImportGroups, String endOfLine) in C:\Users\rikki\src\roslyn\src\Workspaces\CSharpTest\OrganizeImports\OrganizeUsingsTests.cs:line 40
   at Microsoft.CodeAnalysis.CSharp.Workspaces.UnitTests.OrganizeImports.OrganizeUsingsTests.CaseSensitivity1() in C:\Users\rikki\src\roslyn\src\Workspaces\CSharpTest\OrganizeImports\OrganizeUsingsTests.cs:line 1087
--- End of stack trace from previous location ---
```

Actually, passing `StringComparer.Ordinal` to the mentioned `Assert.Equal` call above doesn't seem to change the results, so I'm not exactly certain what's going wrong here."
"> Note: insertNodeAfter and insertNodeAtEndOfList are pretty dumb, and should probably be deleted, because insertNodeInLastAfter is very smart.

Can you explain a bit more here?"
"Sorry for the spam, I accidentally commented on the wrong PR here."
hit wrong button in github and accidentally deleted branch. Reopening...
"Correct me if Im wrong but in here:
> Likewise, attempting to mark T invariant

It should be “contravariant”

> When variance annotations are present, the type checker doesn't need to measure variance.

hm, how measuring is different from what u check and for what u raise errors described in the thread? Since reporting “correct” errors would require full structural computation - shouldnt this be described here as a limitation for raising those errors? I mean - sometimes they just wont be raised and u will trust the user input, did i get this right?"
"Tagging subscribers to this area: @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

!! This PR is a copy of mono/mono#20773,  please do not edit or review it in this repo !!<br/>Do not automatically approve this PR:<br/><br/>* Consider how the changes affect configurations in this repo,<br/>* Check effects on files that are not mirrored,<br/>* Identify test cases that may be needed in this repo.<br/><br/>!! Merge the PR only after the original PR is merged !!<br/><hr/><br/>

<!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
-->


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>monojenkins</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-VM-meta-mono`, `mono-mirror`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> This effectively works via a blocklist approach, where a particular call site is blocklisted. Blocklisted call sites incur significantly more overhead. But that can significantly negatively impact a call site that’s shared infrastructure and just happens to be used in one place that’s blocking. For example, in ASP.NET MVC I assume there’s an async method somewhere that has the job of invoking controller actions; if just one synchronous controller action somewhere in the system ends up just once blocking on something via a Task, doesn’t that end up tainting every other controller operation in the whole system?

See (https://github.com/dotnet/runtime/pull/47366#issuecomment-766288490). If the identification of the workitem is too coarse grained then it can be problematic. I see that as a problem but maybe one we can come up with creative solutions to (or maybe we need to opt out in those cases)

> If anything in the system ever blocks on a task just once on a thread pool thread (which I expect is super likely in a real app), every subsequent thread pool operation incurs the cost of multiple static field accesses plus a HashSet lookup. That is non trivial overhead.

This is problematic and concerns me as well. Ben and I spoke about this a little but haven't come up with anything as yet. I have some crazy ideas that would require @github approval 😄.

> It seems like this could actually introduce deadlocks where they wouldn’t otherwise happen. The code is forcing all work items associated with the blocklisted call sites into a single queue, and then relying on a subset of threads to process that queue. That subset is limited, much more so than the number of threads possible in the pool. If all of those threads end up getting blocked on something that requires that queue to be processed, it’ll deadlock, and as far as I can tell, neither the hill climbing nor the starvation prevention mechanisms will kick in to help, because they’re unaware of the this blocked queue (if additional threads were added for other reasons, than one might help out here, but it wouldn’t be provoked to by this).

Temporary deadlocks because the thread pool would grow anyways? This commit, requests a new thread https://github.com/dotnet/runtime/pull/47366/commits/f5702e8616a32febe839fcab7dc307cca67dafe6 which should signal to the thread pool that work that more threads are needed.

> This increased the size of every work item by a reference, which in most cases is a 25% increase. If you instead change it to have a virtual call to avoid the extra field, it’s an extra virtual dispatch on every work item. If you instead change it to try to consolidate to a single field, it’s an extra cast on every work item (or non-trivial additional unsafe casting).

I feel like if you can solve the hashset problem, you can potentially solve this as well. We need a fast way to identify if a workitem is potentially blocking. Are there any free bits in the object header 😄? 

> This adds significant complexity, duplicates key processing loops, incorporates somewhat arbitrary thresholds, and effectively adds a side pool. 

Right but it aims at dramatically improving a problem that our customers have that isn't going away. Lots of code we have like this has these types of arbitrary thresholds (sometimes without knobs...)

> It would require serious testing on a myriad of workloads to feel confident that this is the right approach and right set of tradeoffs.

👍🏾 

"
"After the subsequent `optOptimizeLayout` there are some obvious edge weights wrong (eg BB03's outgoing edges):

![image - 2021-02-16T132807 350](https://user-images.githubusercontent.com/10121823/108123559-e79b1500-705a-11eb-93e4-7c6015002c87.png)
"
"One second, wrong base branch
"
"> What would be the size regression for R2R if it is enabled? It does not sound right to pessimize R2R like this. Note that some important 1st party teams are running R2R code without tiered compilation. If the size regression is non-acceptable, maybe this should be configurable?

Yes, it's configurable, customers can re-AOT CoreLib by using `DOTNET_JitExtendedDefaultPolicyPrejit=1` to use the new one.

Currently it adds around +1 Mb: 9.8Mb -> 10.8Mb (+10%) and depends on:
1) Max IL size (512 bytes of IL, 100 in the DefaultPolicy)
2) Max BB count (unlimited, used to be 5 in the )
3) We currently apply quite some big multiplier for methods with profile (in case if there are also other profitable observations).

So that +1Mb doesn't bring much value for customers who use Tiered JIT. However, @github, correct me if I'm wrong, but when the default inliner prejits code it also asks VM to save ""noinline"" for failed attempts, not only in the PrejitRoot mode (as I hoped) so it limits opportunities for the new one during re-jitting by disallowing it to inspect methods larger than 100 bytes of IL or >5 of BBs. 

I've just launched a couple of TE benchmarks to check ExtendedDefaultPolicy for R2R + TieredCompilation=0.
"
"> how did you find this issue?

From experimenting with `fgMorphCast`, I suppose. I noticed that these two branches were doing almost the same thing, made them do the same thing, and while inspecting the diffs realized the (previous) codegen was wrong."
"@github backporting to release/6.0 failed, the patch most likely resulted in conflicts:

```shell
$ git am --3way --ignore-whitespace --keep-non-patch changes.patch

Applying: lateapexearlyspeed-issue-58383 Support unseekable filestream when ReadAllBytes[Async].
Applying: issue-58383 Refine code; Add test cases.
Applying: the docs were wrong, offsets are not ignored for non-seekable files
Using index info to reconstruct a base tree...
M	src/libraries/System.Private.CoreLib/src/System/IO/RandomAccess.Windows.cs
Falling back to patching base and 3-way merge...
Auto-merging src/libraries/System.Private.CoreLib/src/System/IO/RandomAccess.Windows.cs
CONFLICT (content): Merge conflict in src/libraries/System.Private.CoreLib/src/System/IO/RandomAccess.Windows.cs
error: Failed to merge in the changes.
hint: Use 'git am --show-current-patch=diff' to see the failed patch
Patch failed at 0003 the docs were wrong, offsets are not ignored for non-seekable files
When you have resolved this problem, run ""git am --continue"".
If you prefer to skip this patch, run ""git am --skip"" instead.
To restore the original branch and stop patching, run ""git am --abort"".
Error: The process '/usr/bin/git' failed with exit code 128
```

Please backport manually!"
"Aaaa, I thought I'm going crazy, but what you're sharing is only for HTTP/1:
https://github.com/dotnet/runtime/blob/8e4b70681814634ac76867d5acd1c56eb18ca0ea/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnection.cs#L402-L402

And that's why I wasn't seeing anything since I'm testing H/3.

So adding similar logging into H/2 and H/3 streams should fill the holes (instead of proposed `HttpClient` logging)."
"You need to suffix these with either ""Version"" or ""PackageVersion"".

Also it won't automatically fix what doesn't need updating in the version.details.xml file, so keep that in mind.

`darc verify` can tell you what might be wrong."
"> I'm assuming you meant `chars.Length == 24`

Yep, typed wrong in the first comment.

> Can't do this because a 17 and 18 byte string will also be 24 bytes when encoded.

Maybe I missunderstand something now, but the string is encoded and we try to decode it, then check if the decoded data (byte) is of size 16. 
So the other way round this means, 16 data bytes -> 24 base64 encoded utf8-bytes.
And for base64 the encoded length is always a multiple of 4.

Thus if `chars.Length != 24` we know that the decoded data won't be 16 bytes, so we can short-circuit the method and return `false`. No need to try to decode the input.

If `chars.Length == 24` we can try to decode, then check if `written == 16`.

Ahhhhh, now I see that in my previous comment it may look like the entire method. It's just a fragment. Sorry.

So I mean:
```c#
public static bool IsRequestKeyValid(string value)
{
    ReadOnlySpan<char> chars = value.AsSpan();

    if (chars.Length != 24)
    {
        return false;
    }

    Span<byte> temp = stackalloc byte[16];
    var success = Convert.TryFromBase64Chars(chars, temp, out int written);

    return written == 16 && success;
}
```

If you want I could submit a PR for the vectorized version (next week)."
"I suspect this problem relates to dotnet/arcade#4155 though it looks worse in this repo (which doesn't use System.Diagnostics.DiagnosticSource).

I also suspect an issue with `CoherentParentDependency` attributes because the ""Coherency Updates"" described above should be tied to EntityFrameworkCore dependencies. Those updates occurred _before_ anything from EntityFrameworkCore came in (see initial 396a4749372cdff207a1a17b16d7491ceba45633 commit). The only 'CoherentParentDependency` attributes in eng/Version.Details.xml tie things to Microsoft.NETCore.App.Runtime.win-x64, Microsoft.Extensions.Logging, and Microsoft.EntityFrameworkCore -- nothing from aspnet/AspNetCore-Tooling.

More specifically, I now suspect the following is messing things up:
``` xml
<Dependency Name=""Microsoft.Bcl.AsyncInterfaces"" Version=""1.0.0"" CoherentParentDependency=""Microsoft.NETCore.App.Runtime.win-x64"">                                                                                                                <Uri>https://github.com/dotnet/corefx</Uri>                                                                             <Sha>4ac4c0367003fe3973a3648eb0715ddb0e3bbcea</Sha>                                                                   </Dependency> 
```
@github shouldn't that dependency be pinned instead of made coherent with core-setup?

> Or subscription here is wrong???

FYI we do not subscribe directly to CoreFx or core-setup dependencies in this repo or AspNetCore-Tooling.
```
> darc get-subscriptions --target-repo aspnet/AspNetCore$ --regex --target-branch master
https://github.com/aspnet/AspNetCore-Tooling (.NET Core 5 Dev) ==> 'https://github.com/aspnet/AspNetCore' ('master')
  - Id: dcfdcc5e-7716-47da-6308-08d6bc51899c
  - Update Frequency: EveryDay
  - Enabled: True
  - Batchable: True
  - Merge Policies:
    AllChecksSuccessful
      ignoreChecks =
                       [
                         ""AspNetCore-helix-test"",
                         ""AspNetCore-helix-test (Tests: Helix ARM64)"",
                         ""AspNetCore-helix-test (Tests: Helix x64)"",
                         ""license/cla""
                       ]
    NoRequestedChanges
https://github.com/aspnet/Blazor (.NET Core 5 Dev) ==> 'https://github.com/aspnet/AspNetCore' ('master')
  - Id: db9f3d61-a455-4c33-bf59-08d6ded4953f
  - Update Frequency: EveryDay
  - Enabled: True
  - Batchable: True
  - Merge Policies:
...
https://github.com/aspnet/EntityFrameworkCore (.NET Core 5 Dev) ==> 'https://github.com/aspnet/AspNetCore' ('master')
  - Id: 4cbc2a9e-8529-4b8a-adce-08d67a4e0ac2
  - Update Frequency: EveryDay
  - Enabled: True
  - Batchable: True
  - Merge Policies:
...
https://github.com/dotnet/arcade (.NET Tools - Latest) ==> 'https://github.com/aspnet/AspNetCore' ('master')
  - Id: 0539bdd4-d55d-4517-d708-08d7530b526c
  - Update Frequency: EveryWeek
  - Enabled: True
  - Batchable: True
  - Merge Policies:
...

> darc get-subscriptions --target-repo aspnet/AspNetCore-Tooling --target-branch master
https://github.com/aspnet/Extensions (.NET Core 5 Dev) ==> 'https://github.com/aspnet/AspNetCore-Tooling' ('master')
  - Id: a7bbae07-f7c1-4e4e-fdca-08d6bc6b8555
  - Update Frequency: EveryDay
  - Enabled: True
  - Batchable: True
  - Merge Policies:
    Standard
https://github.com/dotnet/arcade (.NET Tools - Latest) ==> 'https://github.com/aspnet/AspNetCore-Tooling' ('master')
  - Id: d5ce8a70-158f-4712-147d-08d7530b2608
  - Update Frequency: EveryWeek
  - Enabled: True
  - Batchable: True
  - Merge Policies:
    Standard
```"
"I'll try to investigate what went wrong with ResolveMetadataReferences again later today.
"
"@github I have removed `DispostAsyncCore()` method in the latest commit. But right now `DisposeAsync()` method calling the synchronous version of `Dispose()` under the hood, isn't that wrong? Or am I missing something here to understand! 
Thanks! "
"It's early and I'm still on east coast time but this code looks wrong.  The comment here seems to be correct in that DesktopStrongNameProvider can only handle absolute paths.  This code though never gives absolute paths, alwasy simple directory names.  Hence if this code is hit it should throw 100% of the time.  

Did we actually test that this is working?

Again appologies if I'm just tired and missing something obvious here ... "
What was wrong with changing the type of exception we throw?
"Yes, the typical case for this is that something is wrong in the setup and either the process doesn't get created at all or the command executed but fails instantly. The worst outcome of this is a potential missing warning, if we wanted to be more accurate we can attach to the exit event handler and do it there, but I don't think its worth the additional complexity"
"Oh, I was wrong about alignment. The .NET SDK provides a few options that match that version. See e.g. .dotnet\sdk\7.0.100-alpha.1.22071.3\Microsoft.NETCoreSdk.BundledVersions.props in your repo. `$(AppHostPackVersion)` has a fairly on-point name for this case and might work."
"This looks very wrong because this overrides the `$(CrossGenDependsOn)` property. Suggest
```suggestion
      $(CrossGenDependsOn);
      _GenerateComposites;
```"
"Index seems like a bad idea. In general the order of metadata is ""unordered"" hence depending on a specific index seems wrong. Maybe something i'm missing here that makes this safer. "
"something went very wrong.  will undo. "
"Re problems making the repo build:
Installing nodejs  + yarn + JDK - not a great experience based on the docs. On Windows I was able to do all of this via winget eventually (after lot of searching) and probably a lot faster then following the various websites. On Linux it feels even worse - ended up searching how to do it via apt-get mostly.
But I must admit I never worked with nodejs and so on, so maybe this is just me doing it for the first time.

Lastly - I was trying this on Windows and Linux WSL. The WSL seems to cause issues for the Selenium based tests - I think I installed everything per the doc (but I could be wrong) and the Selenium tests were still failing for me.

I guess there's a bit of a weird dichotomy to the document - it starts explaining git in relative detail. But then the section on installing pre-reqs is often very short - especially nodejs which is basically just a link. I like that at least on Windows Java can be installed by a script - that helps a lot. Would be nice to have the same for Linux.

Very last minor nit: I use PowerShell even on Linux, but the PS scripts in the repo fail in weird ways when used on Linux (didn't investigate why). For example the `activate.ps1` misbehaves - and the shell script is not a replacement since it won't do me any good when in PS.

P.S.: I find it ""funny"" that the repo requires two competing stacks to build (NodeJS and Java). Maybe a short sentence on what they're used for?"
"1. why does an excerpt span not just point at a DocumentSpan?
2. why does the excerpt span need a sourcetext if it points at a document?
3. it feel like something is being layered wrong.  Why does FAR need to know about this excerpt service?  Why is this not in the impl of ClassifiedSpansAndHighlightSpanFactory?  That way, anyone who wants to classify will get the excerpting working for them?"
"❗️ Wrong namespace

```suggestion
namespace Microsoft.CodeAnalysis.ExternalAccess.FSharp.Classification
```"
"this seems very unlike how we do anything else.  Specifically it does not seem to behave like how we handle any of:

`.`, `->` or `?.`

This feels very wrong, unless there is a super good reason for doing it this way."
"Unfortunately not currently: how we handle conversions means that this api gets called with the wrong node.

---
In reply to: [266126506](https://github.com/dotnet/roslyn/pull/34017#discussion_r266126506) [](ancestors = 266126506,266121801,266096745)"
"> What is wrong with the for /f ... used in the current script

That all error handling and stdout in the arcade script is swallowed. The arcade function isn't just responsible for returning the path to the SDK folder but also to add telemetry markers when being used in CI, just to name one example. There must be a better way to do this without emitting unnecessary echo outputs."
"> @github that's not correct. On a Windows machine you can build libraries with BuildOS=Linux which would build the Linux flavor of the libs from a Windows build machine.

What about the coreclr subset ? TargetOS will suggest a wrong meaning there as we cant build Linux version of coreclr on windows machine."
"The fact that it doesn't trigger on a revert is utilized by `BackupModelService`, should I maybe make `onDidContentChange` an `Event<StateChange>` instead so they can be differentiated? Or would changing the name to something else be better?

The comment was wrong, I guess I was thinking of https://github.com/Microsoft/vscode/issues/15129 but this is going to be handled within one of the backup services. Removed in https://github.com/Microsoft/vscode/pull/14115/commits/d346ed2d7252cf1d3654abd86b256f89c4d9d6b3
"
"@github this is some crazy string magic that is not very robust, instead I suggest to use the `URI` apis we already have: use `URI.parse()` to convert the resource string into a `URI` and then you have access to `fsPath` and scheme to find out what you want."
Sorry this comment was on the wrong line.  This should definitely be E_INVALIDARG.
At least the wrong spelling is consistent
"Glad to work on this.
Let me know if something wrong. Thanks!."
"Is your preference for most/all test methods to be static?  We're very inconsistent on that, but I *think* (I'd need to actually measure, as I could be wrong) we tended towards instance methods."
nit: this comment is wrong.
"Adding some other people for feedback on the view changes

One way webview views can be shown in the wrong position is when the list of views becomes too long. When this happens, we try to make the list of views scrollable. However webview views need to exist outside of the normal editor dom so they are not scrolled along with the rest of the views and instead remain in a static position 

I don't think this PR addresses that yet but I think we should look into it as well"
"> just a note that if you are unable to upgrade the version of snapcraft you are using, you can always just use the `passthrough` key for situations like this: [...]

Correct me if I'm wrong, but I think that applies to stuff that snapd needs to see. In this case snapcraft itself needs to support creating lzo-compressed squashfs images."
"I think this is wrong. An entry _needs_ either...
- `commands` and `name`: all nested commands need a name, otherwise they can't be added.
- `command`: anything else is extra.
   - if it's just `command`, we auto-generate a name and add it to the command palette
   - if `name` is present, do the same as above, except with the given name
   - if `keys` is present, also bind the key chord to the action
   - if `icon` is present, add an icon to the command palette entry"
"I am a bi confused by this. Say without this PR, we have ligature enabled by default, and we think some text can be simple. But with this PR and people disabling ligature, suddenly all text is complicated now? If anything, isn’t  text w/o ligature a “simple” one instead?

I mean code-wise, I get it. You have to pass the Feature structure in. But it seems wrong logically. "
🤦 wrong context
"The test is expected to return 100 as a success.
Also this test doesn't actually assert if something goes wrong.

it'd be nice to add a test case when argument is not only a local variable."
"Yeah, what's in here right now is wrong. I fixed this for ObservableGroupedSource, but forgot to apply the same fix to ObservableItemsSource: https://github.com/xamarin/Xamarin.Forms/pull/9911/commits/220715c11b9543b6b2b7d98ac9acefddc54e1db8

So change line 323 from `if (_batchUpdating.CurrentCount > 0)` to `if (_batchUpdating.CurrentCount == 0)` and your UI test should pass, @github."
Should the call to completion.SetCancelled in here be passing along the cancellation token so we can better diagnose if things are going wrong? You might have to Debug.Assert(completion.TrySetCancelled(...)) since I don't know if the overload was added.
"Something is wrong here
"
What was wrong with leaving `#nullable restore` to terminate a nullable-enabled section?
"
> The main thing (that I always forget) is that the BackButtonItem used is the one on the previous controller. So the text wasn't working because it was being set on the wrong BackButtonItem instance. You have to set the `BackButtonItem` on the previous ViewController

Not if you want it to work like NavigationPage.SetBackButtonTitle, but it is more obvious how to work with it if you can change it on the page that you are at. At least for new developers that haven't used the NavigationPage.SetBackButtonTitle method before.

"
"are we gonna have to start slapping ""BODGY"" on our own code that is workaround for other code of ours being wrong"
"@github I just realised these tests need a device right? 
So they are in the wrong project. The should be in the `MSBuildDeviceIntegration` project in `tests/MSBuildDeviceIntegration` where we have all the device based tests. 

It should also make use of the `HasDevices` property and `Ignore` the test if we don't have any devices attached.
For example https://github.com/xamarin/xamarin-android/blob/master/tests/MSBuildDeviceIntegration/Tests/InstallTests.cs#L233"
">negated [](start = 137, length = 7)

This feels wrong. `is not true` should have the same behavior as `is false`. #Closed"
"so there is likely some hinky code here (though i'm preserving the hinkyness).  One challenge in this space is that we associated taggers with buffers, but buffers coudl change content types.  I think there ahve been some race conditions here in the past where we would end up with the wrong Doc/Classification service, or something like that.  So we had this code that just goes from current snapshot to classification service first to ensure that we're in a good situation.  

> does TS not have one?

TS does not.  They do it all through textmate."
"Couple things were fixed/added now:
* Two sources of invalid behavior:
  * UpdateFont used to fail if the engine is given a font weight of 0, crashing conhost
  * The texture atlas was incorrectly resized, causing wrong glyphs to be shown
* Implemented all cursor types and colored cursors
* Emojis are now rendered with proper alpha blending -- no black edges anymore, and the selected foreground color won't affect emojis anymore either (however the solution for this is rather hacky, because the DirectWrite API is absolutely unwilling to just give me the information I need grrr)
* Font axes/features
* (First half of gridlines)

In either case I look forward to see this tested in another build soon. 🙂
And I'll mark this as ready for review now, as build issues should've all been fixed."
why do we need this though?  what is wrong with the doc comment having \n in it?
This is wrong. I need to review the entire diff now...
"It looks like Apple's documentation is wrong.

`dispatch_get_main_queue` was available in Xcode 4.3, which is iOS 5.1, and according to the header back then it was introduced in iOS 4.0:

```
$ grep dispatch_get_main_queue /Applications/Xcode43.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.1.sdk/usr/include -RI -B 2
/Applications/Xcode43.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.1.sdk/usr/include/dispatch/queue.h-__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
/Applications/Xcode43.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.1.sdk/usr/include/dispatch/queue.h-DISPATCH_EXPORT struct dispatch_queue_s _dispatch_main_q;
/Applications/Xcode43.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.1.sdk/usr/include/dispatch/queue.h:#define dispatch_get_main_queue() (&_dispatch_main_q
```"
"Same here, the defensive .HasValue check would actually prevent us from detecting corrupt state since we're not throwing if it's wrong"
When certificate is provided upfront we need to do this only once and we re-se same connectionConfiguration for all incoming connection. It does not need to be here but if there is something wrong with provided option I feel it is better to throw sooner than later.
A lot of the code below is now incorrect.  All of the equality operators are going to do the wrong thing.
"This code cam from a sample provided by Xamarin. https://github.com/xamarin/monotouch-samples/blob/master/CustomInputStream/ZInputStream.cs

If I remember right you needed the scheduler for the custom implementation to work correctly. 

Looking at some other examples online. https://github.com/pavelosipov/POSInputStreamLibrary/blob/master/POSInputStreamLibrary/POSBlobInputStream.m

It appears we are missing a few run loop methods on NSStream that makes it difficult to sub class. https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSStream_Class/index.html#//apple_ref/occ/cl/NSStream

Can you double check I am not crazy and that `scheduleInRunLoop:forMode:` and `removeFromRunLoop:forMode:` don't exist on NSStream. 
"
"In general we keep the same names as Apple, unless they are incorrect (wrong/typos) or very confusing. It's globally more consistent (e.g. newer API In future SDK will likely use the names, but the _binder_ might not know we changed them in older API).
"
"I assume this part corresponds to the PR description:
> I updated the code to simple return failure instead of throwing. (that will clean the connection)

Could you explain exactly what ""clean the connection"" means in this context? We have methods like Shutdown (finish using) and Close (free memory). Does it mean we don't need to call one/both of them? Won't it lead to double free since we're calling `connection.Dispose()` few lines above?

I'm just trying to understand what this exactly mean, I'm not saying it's wrong."
"ahh good point. That is probably how this bug slipped in, the question mark was just put in the wrong place."
"@github  this PR is wrong, closing. Is pointing to the wrong branch AND is not the correct way."
"If this fails, it'll print
```
password is a duplicate
   Expected: True
     Actual: False
```


Assert.True's string needs to be what you're asserting, not what went wrong."
The comment is wrong - there is no `armel`.
"I don't mean changing the error behavior here. Instead I'm pointing out that the transpiled code is wrong. That's more obvious if you transpile to ES6

```ts
class C extends Object {
  prop = 1;
  constructor() {
    something();
    super();
  }
}

// currently transpiles to something similar to this
class C extends Object {
  constructor() {
    this.prop = 1;  // this gives an error when executed
    return super() || this;
  }
}

// instead it should be
class C extends Object {
  constructor() {
    const _this = super() || this;
    this.prop = 1;
    return _this;
  }
}
```"
"Would it be worth it to bail in a class expression / function expression? If you walk into a context that has a different `this`, I think the logic would be wrong. Also unclear whether it would be wrong in an arrow function expression in general, but probably would be right in an arrow function IIFE? 😬 At any rate, assigning functions that use `this` to a `this` property in JS code is a realistic test case, especially if we're talking about ES5-style constructor functions as opposed to classes."
"I’m not saying there’s anything wrong here, just observing that it was weird for someone to write this test this way in the first place, a long time ago. I think the changes you made to these make sense 👍 "
"The _actual_ surprising thing _is_ that nothing changed here. This code path handled union composite signatures... and now we're handling intersection composite signatures _in the same way_ (rather than inverting anything), which is _odd_.  The reason for that is explained in this comment (namely that for compat reasons we intentionally do ""the wrong thing"" for union signatures here, which happens to be ""the right thing"" for intersection signatures)"
"> This seems worrisome from a security standpoint. Can we consider at a minimum using a different ArrayPool than the shared one to mitigate the possibility that code elsewhere (mis-)using ArrayPool might end up leaking sensitive data?

This is one of many places `ArrayPool<byte>.Shared.Return` is used without clearing, especially since not clearing is the default:
https://source.dot.net/#System.Private.CoreLib/ArrayPool.cs,34fc80a1ec3f75d7,references
That includes other places in this class:
https://source.dot.net/#System.Net.Http/ArrayBuffer.cs,129
In other words, this particular call site was an anomaly.

If we want to revisit such clearing decisions, we can, but that should be a separate issue / PR.  This change is really just bringing this particular use into consistency.

Also, to my knowledge, most of pipelines and more generally Kestrel isn't clearing for its pooling, its slab memory blocks, etc.  @github can correct me if I'm wrong."
"Not in my opinion, it checks whether a node is a declaration name, but not every identifier is a declaration name. So the type annotation was wrong, not the name.
"
"Hey @github, something went wrong when publishing results. ([You can check the log here](https://typescript.visualstudio.com/TypeScript/_build/index?buildId=100648&_a=summary))."
"No worries, at first I thought something was wrong with all of them. How does GH not automatically check PRs to their own workflow files??"
"> Correct me if I'm wrong, but the SQ2 is a Cortex-A76 based big.LITTLE core right? In which case the bimodal behavior of the core is most likely because it didn't enter streaming mode[1] for all the cases. The larger stores of the `stp` of `Q-regs` is most likely tickling the heuristic more consistently.

I don't know how to tell what microarchitecture it's based on. Is there any Windows tool that can do this?

The Wikipedia [article](https://en.wikipedia.org/wiki/List_of_Qualcomm_Snapdragon_processors#Microsoft_SQ1_and_SQ2) says it is 4+4 cores that suggests it is big.LITTLE.

> The ZVA should help as well as [1] explains it will enter streaming mode more readily.
> 
> [1] https://developer.arm.com/documentation/100798/0300/functional-description/level-1-memory-system/cache-behavior/write-streaming-mode

Thanks for the link - I am working on supporting `dc zca` in the JIT and VM. Will be back soonwith new benchmark results."
"Tagging subscribers to this area: @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Related to #49206.
When we call runtime_invoke on wasm the exception always returns NULL and the error returns OK.
This was a problem because we were trying to get value of this new static property in DateTime type:
private static ReadOnlySpan<byte> DaysInMonth365 => new byte[] { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
As we don't know that we were getting an exception, the value that returns to the test was wrong.
The goal of this PR is detect that we got an exception when running runtime_invoke and return the expected value to debugger.
This is a temporary solution, I think the final solution is to fix runtime_invoke to return exception correctly on WASM.
We also need to support it: https://github.com/dotnet/runtime/blob/b3411852caa6a3de8ab9fa27f7860c76ef43e384/src/mono/mono/metadata/object.c#L6298

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>thaystg</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Debugger-mono`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> Can you say a bit more about the problems you had with converting ` Object.GetType` and why you ultimately decided you could live without it...perhaps in an issue you open to track converting it to new style?

I didn't give up, just wanted to do it iteratively for all of them eventually to keep the PRs easier to review.

The primary goal is the ability to recognize `typeof(T) cmp typeof(T)` in inliner (and `String.Length`), from my understanding - foldable `obj.GetType() == typeof()` patterns where obj's type is known/final are less common (but I might be wrong).

`Object.GetType` led to this assert: https://github.com/dotnet/runtime/blob/main/src/coreclr/jit/importer.cpp#L8185

`eeCallInfo` returned `CORINFO_VIRTUALCALL_STUB` for it instead. I suspect the problem is here: https://github.com/dotnet/runtime/blob/main/src/coreclr/tools/aot/ILCompiler.ReadyToRun/JitInterface/CorInfoImpl.ReadyToRun.cs#L1587-L1589 (and a similar code in the native crossgen1)

Both crossgens know nothing about the new style intrinsics, I tried to fix this specific case like this https://github.com/dotnet/runtime/pull/52156/commits/65a9154a5d4a2d8518022c58535d8a5a0c169872 and looked like it helped but none-windows platforms still asserted so I decided to postpone it a bit 🙁 "
"Tagging subscribers to this area: @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

The unit tests for `MemoryExtensions.EnumerateRunes` were originally checked in via https://github.com/dotnet/corefx/pull/33504, but this was later reverted via https://github.com/dotnet/runtime/commit/b016a5661ec64e7304380afa44ad9667bd5519a8 since the checkin was to the wrong file. This PR reintroduces those unit tests (to the correct file!) since we otherwise don't have test coverage over these APIs.

This is a test-only change. There are no changes to shipping code.

/cc @github @github @github @github as area owners

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>GrabYourPitchforks</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Memory`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

!! This PR is a copy of mono/mono#21120,  please do not edit or review it in this repo !!<br/>Do not automatically approve this PR:<br/><br/>* Consider how the changes affect configurations in this repo,<br/>* Check effects on files that are not mirrored,<br/>* Identify test cases that may be needed in this repo.<br/><br/>!! Merge the PR only after the original PR is merged !!<br/><hr/><br/>This change is released under the MIT license.



<!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
-->


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>monojenkins</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-VM-meta-mono`, `mono-mirror`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> > we already even in Default mode expand casts to non-sealed classes with a quick fast-path that can be wrong
> 
> What do you mean that it can be wrong? I do not see anything wrong with it.

@github By ""wrong"" I mean the fast path is not taken, and even creates some overhead in cases where object is actually a subclass. Example (Default mode, Main):
![image](https://user-images.githubusercontent.com/523221/126220210-ea8a811e-43d5-4539-96fc-6129e768b38d.png)

We have a fast path for `A` in `TestMethod` but it won't be taken since I actually pass an instance of `B`. In my PR this problem is fixed - `A` is replaced with `likelyClass` which is `B`.






"
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Add CI tests for notification profilers, and fix a couple things to make life with multiple profilers easier
* Reduced default timeout for profiler detach - we used to try at 300ms, 600ms, and then 10 minutes
* Got rid of a couple asserts that were wrong since switching from the dedicated profiler attach thread to the diagnostics server implementation
* ProfControlBlock::GetProfilerInfo would only work for active profilers, not attaching profilers, which could cause subtle bugs

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>davmason</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>davmason</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Diagnostics-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>6.0.0</td>
  </tr>
</table>
</details>"
"> Why would it pick the wrong DefaultECDsaProvider ? The logs indicate trying the .Unix one when it should be picking .Android.

I'm guessing this happened when `.Algorithms` was consolidated. The OpenSSL initializer in the cctor is firing for Android. I'm guessing that should not be happening.

```
11-19 16:31:47.506  3525  3548 I DOTNET  :    at System.Security.Cryptography.Tests.ECKeyFileTests`1[[System.Security.Cryptography.ECDsa, System.Security.Cryptography, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]..cctor() in /_/src/libraries/Common/tests/System/Security/Cryptography/AlgorithmImplementations/EC/ECKeyFileTests.cs:line 30
11-19 16:31:47.506  3525  3548 I DOTNET  : ----- Inner Stack Trace -----
11-19 16:31:47.506  3525  3548 I DOTNET  :    at Interop.Crypto..cctor() in /_/src/libraries/Common/src/Interop/Unix/System.Security.Cryptography.Native/Interop.Initialization.cs:line 18
11-19 16:31:47.506  3525  3548 I DOTNET  : ----- Inner Stack Trace -----
11-19 16:31:47.506  3525  3548 I DOTNET  :    at Interop.CryptoInitializer..cctor() in /_/src/libraries/Common/src/Interop/Unix/System.Security.Cryptography.Native/Interop.Initialization.cs:line 34
11-19 16:31:47.506  3525  3548 I DOTNET  :    Execution time: 0
11-19 16:31:47.507  3525  3548 I DOTNET  : 	[FAIL] System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteSect163k1Key1ExplicitPkcs8
11-19 16:31:47.507  3525  3548 I DOTNET  : 	[FAIL] System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteSect163k1Key1ExplicitPkcs8   Test name: System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteSect163k1Key1ExplicitPkcs8
11-19 16:31:47.507  3525  3548 I DOTNET  :    Assembly:  [System.Security.Cryptography.Tests, Version=7.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]
11-19 16:31:47.507  3525  3548 I DOTNET  :    Exception messages: System.TypeInitializationException : The type initializer for 'System.Security.Cryptography.Tests.ECKeyFileTests`1' threw an exception.
11-19 16:31:47.507  3525  3548 I DOTNET  : ---- System.TypeInitializationException : The type initializer for 'Crypto' threw an exception.
11-19 16:31:47.507  3525  3548 I DOTNET  : -------- System.TypeInitializationException : The type initializer for 'CryptoInitializer' threw an exception.
11-19 16:31:47.507  3525  3548 I DOTNET  : ------------ System.DllNotFoundException : libSystem.Security.Cryptography.Native.OpenSsl   Exception stack traces:    at System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests..ctor()
11-19 16:31:47.507  3525  3548 I DOTNET  :    at System.Reflection.RuntimeConstructorInfo.InternalInvoke(Object obj, Span`1 parameters, Boolean wrapExceptions)
11-19 16:31:47.507  3525  3548 I DOTNET  : ----- Inner Stack Trace -----
```

Let me see if I can fix that up. But I would not hold this PR for that. This PR is at least some progress (assuming I did it correctly 😄)"
"My take on this was:

- The sourcebuild team seemed supportive of the stream of changes around here. The changes were small and largely innocuous. They didn't really affect how we build the product, but enabled a customer's scenario of how they wanted to build the product. To me, in open source that's something we should support if it's not detrimental to the product. 
- Yes, portable builds are great for most things, but for that to work in the .NET ecosystem we always have to build in the lowest common denominator. We don't configure native builds in a way that all places where we toggle logic based on OS features can be done through runtime detection. They are often ifdef's that get enabled based on where we run CMake checks. You can build in a system that has the features you want to enable those paths, but that build is no longer portable. This felt like a reasonable mechanism to signify that. The main downside is the RID graph becomes crazy then for nuget and all the restore logic, but for a distro build of the SDK this didn't feel absurd."
"> COM doesn't support varargs. Can you point me at the location where this is used in the shuffle?

What I meant in the description is that the code before was right only for HFAs/HVAs passed in varargs. It is wrong for HFAs/HVAs passed as regular arguments when there are no more float/vector registers left.

The field is used here:
https://github.com/dotnet/runtime/blob/9529c355c061abdb101adf2462902aade7474c01/src/coreclr/vm/comdelegate.cpp#L192"
"Ahhh, what went wrong this time?

@github I removed `GetBestTypeByMetadataName`. This generator is only internally used by corelib, so there is no need for keeping backwards compatibility over an edge-case scenario."
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

I made the changes using [#65584](https://github.com/dotnet/runtime/pull/65584) as a referrence. It works with HelloWorld'sh code, but I'm stuck with building it via build.cmd. It doesn't want to compile and I can't figure out why. 
I face the errors:
```
Assertion failed 'IsThreeOperandAVXInstruction(ins)' in 'System.MathF:Min(float,float):float' during 'Generate code' (IL size 13)
Assertion failed 'IsThreeOperandAVXInstruction(ins)' in 'System.Single:System.INumber<System.Single>.Min(float,float):float' during 'Generate code' (IL size 8)
```
![image](https://user-images.githubusercontent.com/18483133/155118455-a9f5ace6-1bb2-43e9-ad34-05a198ad2e1e.png)
@github Could you please help me to figure out what I implemented wrong?

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>SkiFoD</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-CodeGen-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github/area-system-memory
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

# Description

This method never throws an `ArgumentNullException` for a null `text` input, and is even annotated as accepting `string?`.

# Customer Impact

Docs are wrong.

# Regression

No.

# Testing

None. Doc fix.

# Risk

None. Doc fix.



<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>333fred</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>333fred</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Memory`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Fix issue with ListView wrong top padding in iOS 15
https://github.com/xamarin/Xamarin.Forms/pull/14671"
"The version of dotnet is wrong, we need a new channel in maestro."
"@github @github it seems like something wrong is happening on our agents w.r.t. to installing the JDK. This script is just downloading a zip and extracting it, but is currently taking as long as 13 minutes. The file being downloaded is only 170 MB, so thats ~250 kBps download speed. My phone can download this faster. Is there something wrong with our VM config?

https://netcorenativeassets.blob.core.windows.net/resource-packages/external/windows/java/jdk-11.0.1_windows-x64_bin.zip"
"We don't generally try to protect you if you're doing error handling wrong. This kind of guidance was common during .NET 4.0 (pre-await) and doesn't make much sense these days. 

There are lots of places in the BCL that are async but will throw synchronous execptions."
Doesn't that mean it is consistently **wrong** then?
"`IBrowserFile` sounds fine to me. In most cases people won't see the type name in their code anyway since they will receive the `InputFileChangeEventArgs` then just iterate over its `Files` collection.

> I believe properties that can be deserialized from JSON must have public setters - correct me if I'm wrong on this. If that's the case, we probably don't need users to be able to tinker with the various properties, hence the internal FileListEntry and the public IFileListEntry that describes those properties as read-only.

Yes, I agree. However if we wanted we could swap the ""public interface, internal class"" pair with a ""public abstract class, internal concrete subclass"" pair. That has the benefit of letting us add more members in the future non-breakingly.

Not a big deal though. Do either of you feel strongly either way?"
"It feels wrong to have a property which can only be contextually invoked. 
"
"We don't need to do the whole pattern here since this class (nor derived classes) have a finalizer, am I wrong?"
"this is the wrong order.  you are writing the option last, but reading it second to last."
sorted wrong.
"> I think this is an error case where receiver becomes method group (which in IOperation becomes None Operation) and the group point to the receiver.

Please open an issue to follow up. There is something wrong here, the receiver shouldn't have syntax ""x.Equals"", even in error cases.

---
In reply to: [139270099](https://github.com/dotnet/roslyn/pull/21857#discussion_r139270099) [](ancestors = 139270099)"
Gah! wrong branch here.  Will create new PR
"There never was. The comment was written based on a misunderstanding of the spec. A method group only contains accessible methods, and that is what the native compiler and Roslyn implement by rejecting protected methods with the wrong receiver type.

---
In reply to: [202478718](https://github.com/dotnet/roslyn/pull/27312#discussion_r202478718) [](ancestors = 202478718)"
"can we have comments about the 'fromBuild' being switched to 'false'?  it's unclear to me when that should be changing, and it's a subtlety i think a caller coudl get wrong."
❗️ This might be doing the wrong thing now.
Oops.  I added the wrong rule for parameter.  Will fix this up and retarget to dev16.1.
"> This doesn't work in the case of refactorings at the start of a fiel :) (which do exist) :)

I don't follow.

> Can you point to what you mean?

Imagine [this](https://github.com/dotnet/roslyn/pull/37777/commits/b82e2c2baa57fe50af62353e3a1470ca915dba2b#diff-a2c30b83123c3cb46ac84dae8175bc4bR24) accepts null and we want to pass `null` [here](https://github.com/dotnet/roslyn/pull/37777/commits/b82e2c2baa57fe50af62353e3a1470ca915dba2b#diff-4b18194545a98c011598321cbfa1dd9fR68) (carries info ""didn't register specific TextSpan"") .  The `RegisterRefactoring` [just calls](https://github.com/dotnet/roslyn/pull/37777/commits/b82e2c2baa57fe50af62353e3a1470ca915dba2b#diff-4b18194545a98c011598321cbfa1dd9fL86) `_registerRefactoring` lambda with given parameters and so if we want to call it with `null` the [lambda](https://github.com/dotnet/roslyn/pull/37777/commits/b82e2c2baa57fe50af62353e3a1470ca915dba2b#diff-4b18194545a98c011598321cbfa1dd9fR30) needs to be of type `Action<CodeAction, TextSpan?>` (has to accept nullable `TextSpan`).

The lambda, however, isn't an implementation detail. It gets set in [*public* constructor](https://github.com/dotnet/roslyn/pull/37777/commits/b82e2c2baa57fe50af62353e3a1470ca915dba2b#diff-4b18194545a98c011598321cbfa1dd9fR52). And that leaks the information that the registration should somehow work with Nullable `applicableToSpan` 🤷‍♂️.

It's not terrible, nobody outside probably uses the constructor. But it _just feels weird_. Either have it nullable explicitly in `RegisterRefactoring` (but that communicates wrong idea about it being optional) or have it nowhere.

> Note: we [still support](https://github.com/dotnet/roslyn/pull/37777/commits/b82e2c2baa57fe50af62353e3a1470ca915dba2b#diff-4b18194545a98c011598321cbfa1dd9fR45) the original constructor without `TextSpan applicableToSpan` parameter 

"
"This is wrong, you shouldn't need an space here as we add an space when passing the arguments down to the build script on the build step. Also this is only passed down when `isOfficialBuild == true` which in CI is never true, so this is not affecting your CI build. Also, remove the quotes around 'true' in the isOfficialBuild conditional as that might cause trouble in yml when evaluating booleans. I think the problem is somewhere in this condition here: 

https://github.com/dotnet/runtime/blob/f69e638fbd1af148fd4b8addd571a56a48a9be68/src/libraries/Native/build-native.proj#L23

It seems like `TargetOS` is being evaluated as != iOS for some reason. I would look at the binlog for the failed build. "
"The IDE has a different pattern than the compiler here: make the test assert what _should_ happen and then skip the test by putting the bug number in the skip attribute. We avoid having tests assert the wrong thing because it often means somebody who accidentally fixes the bug might think they made things worse, and not realize they actually made things better. The counter-argument of ""but you want to know about further changes"" we don't usually worry about. #Resolved"
"`NotSupportedException` is generally used as the entire body of a method that doesn't make sense for a class that it's required to have because of a base class, interface, or compiler-recognized pattern.  Less often it's used for ""you're in the wrong mode"", e.g. a FileStream will report false for CanWrite if it was opened read-only, and Stream.Write will throw an NSE if CanWrite is false.

But for InvalidOperationException:

* DO throw an InvalidOperationException if the object is in an inappropriate state.

The state of this object is to write per some conformance mode, and that conformance mode says no indefinite arrays... so InvalidOperationException seems correct to me."
"I agree it's wrong, will change to method. For reference, it was like this because we were only setting this property once in our code, and it was always setting it to true."
"@github 

Updating telemetry data on the paged model feels very wrong, now that I have seen how we use paged model later on in the viewlet

I like the idea of parsing search text in one place instead of 2, but I don't want to take that refactoring for 1.16 Will consider it for next milestone.


Going back to query options idea, for now I think this should be good:
- Add `source` property to IQueryOptions
- Pass the source to `toExtensions` which will add it to `telemetryData`"
"I was wrong, fixed"
"It was intentional, I just pushed to the wrong branch."
Nope.  you're right and this code is wrong.  it also reveals a test hole.  Thanks!
"oups. that's wrong. the code should be in
"
"the Xaml engine expects from `ProvideValue` a value of the correct type that can be directly assigned to the property. In this case, all the objects are of type string, and not directly assignable to `FontSize`, `TextColor`, `WidthRequest`...

the magic of the runtime Xaml loader compensates for the wrong type and do the type conversion, but
 - I can't guarantee that to work in all cases
 - if fails with XamlC on"
I already tried it and failed to build. But maybe I did something wrong. I was never expecting it was so hard to work with a simple array 😅
what makes you think something wrong happens?
"Yeah. I guess GitHub hid my earlier comment about this part. This feels wrong. Like, I tried to use winrt::make here and I get a bunch of errors in base (`'implements_type': is not a member of any direct or indirect base class of 'winrt::TerminalApp::Profile'`).

DefaultProfileUtils.h includes Profile.h too.

If I shouldn't go the `winrt::make` route, I'll remove this dead code and the line under though. I just still don't get why this is happening :/"
"That's not how OSC 10..17 chaining works. It's `OSC 10;color1;color2`, there's no `11;` in the middle, it's implicit that each colour after the first is for the next entry after the starting point.

I think the code is correct, it just looks like the comment is wrong?"
"I don't think we should turn on verbose build in CI by default, it just bloats the build log and makes it harder to understand what's going on.

I'm fine with having the option of course so you can enable it when something goes wrong :)"
"Hi.

1) How does the component calculate the space for the content when expanded? As a test I added the expander around a vertical chat list of mine, and this is the result:
![Temp](https://user-images.githubusercontent.com/60286968/79513737-34821980-804d-11ea-84d1-13d954f7fbab.gif)
As can be seen, the expander only shows around half of the height of the content. Is this a bug or am I doing something wrong?

2) I set the header up as such:
`
                            <StackLayout Orientation=""Horizontal"">
                                <Label Text=""Test2"" />
                                <Label Text=""^"" HorizontalOptions=""EndAndExpand"" />
                            </StackLayout>
`

Just having a label is of course not enough to denote a foldable area, as the customer would never know it's a tappable widget. So I wanted to test having an upwards arrow indicator that turns into a downwards arrow when expanded. I couldn't find any easy way of doing it. Please advice on how to add a visual element that toggles between two states depending on whether the expander is folded or not. If this is not supported I'd urge to add support for it as I can't see much use for an expander that can't visualise its state.

Thank you."
"`FeaturesResources.operator_` is probably wrong here. It should be pluralized:  `FeaturesResources.Operators`, but this resource does not exist. Should I add it?

`'r'` r is the first available letter in *operator* (o, p and e are taken)."
Is there any way to assert/throw if it's not on the XAML thread? I swear there's a way to tell because I've seen APIs throw/fail on me before for calling from the wrong thread.
"I don't think that this is the right approach because it changes the behavior for all IntelliSense users and it does so in a muscle-memory-breaking way. Often folks type ahead just to delete prefixes because they started with the wrong letter. 

Nevertheless I do understand your performance concern. I don't see such slow numbers (roughly a 1/5 of your times) but a couple of things can be improved instead

* make creation of `MyCompletionItem` faster
* TypeScript can cap the amount of results it returns, mark results as incomplete so that ask again on subsequent typing"
"This one is dumb. I even asked Leon about it a while back and we couldn't figure it out. `SelectedItem` takes an `IInspectable`, but for some reason XAML/WinRT isn't smart enough to automatically convert between an `hstring` and an `IInspectable`:

From Actions.xaml.g.hpp:
```cpp
            case 5: // Actions.xaml line 205
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::ComboBox>();
                    obj5 = targetElement;
                    obj5.RegisterPropertyChangedCallback(::winrt::Windows::UI::Xaml::Controls::Primitives::Selector::SelectedItemProperty(),
                        [this] (DependencyObject const& sender, DependencyProperty const& prop)
                        {
                            if (IsInitialized())
                            {
                                // Update Two Way binding
                                if (GetDataRoot() != nullptr)
                                {
                                    // LOOK HERE! winrt:to_hstring won't compile! :(
                                    GetDataRoot().ProposedAction(::winrt::to_hstring(obj5.SelectedItem()));
                                }
                            }
                        });
                }
                break;
```

"
`in` seems wrong because Windows saves the address of the structure and will update its fields before calling the callback.
"Whatever it's doing here, seems completely wrong. Looking into it."
"> Maybe the island window is placing itself on top of the draw window on a resize, and we just need to move the drag window back on top of the island window (in the z-order)? I'm no expert here so that's just a guess.

Sorry I've explained the problem badly. The problem is that when I resize the window with `SetWindowPos` or `MoveWindow`, it looks like it doesn't do anything! The new area of the window doesn't receive any `WM_LBUTTONDOWN` messages, as if the resize didn't happen. Maybe I'm using the API wrong. I checked with a tool and the window's size actually changes, but it just doesn't receive any mouse message over the new area. If I recreate the window with the new position and width, it works again. I'm no expert either. "
">VerifyFlowGraphAndDiagnosticsForTest [](start = 12, length = 36)

Did you really mean to validate a flow graph or just copied ""wrong"" test?"
"> Any idea how long a ""quick"" change will now be, e.g. a Documentation change (no tests at all!)? Can we get a ""lower-bound"" for turnaround time? Will the ""upper time"" be any worse?

From what I've seen so far these changes allow for ~2 hour PR builds (though I've seen a 98 minute run). Our build job takes roughly an hour on average, and this PR will still run four test jobs by default for every PR build (the longest of which can also take up to an hour). In theory a documentation change wouldn't even require a build, perhaps we can look at improving this further for certain source paths in the future.

Upper bound timing should be mostly unchanged, though it's possible we see some minor improvements there. Our longest jobs are typically Nodes 1 and 3 of our Legacy or One .NET MSBuild tests, and these jobs will now skip tests marked with the `SmokeTest` category (as they will have ran during the smoke test stage). 


> Another crazy idea: add or $(System.JobAttempt) > 1 to the conditions, and then we could click the Rerun stage button to kick off tests from the UI. 😉

I really like the idea of using `$(System.StageAttempt)` or `$(System.JobAttempt)` as a way of running extra test jobs without having to queue a new instance, but I think I'd want to try to experiment with that in a separate PR as the scope has grown quite a bit already."
"What about for example, Blazor Desktop? Having a wasm environment without a browser, just a JavaScript engine. Would it make sense in this case that we should be able to use ClientWebSocket with its full capabilities, or I am completely wrong :)?"
@github - I found the reason for FilteredCommand test failures: RPC_E_WRONG_THREAD 🤦 Committing.
"> installer uses PackageRID to restore tooling and stuff

I don't think its tooling.  I think installer uses this to for selecting packages from CoreCLR / Libraries (was more relevant when those were separate repos).  I'm 90% sure that its wrong to have two different properties here."
"Initially, it was generated, I had to make some changes because the count is wrong since a while back, and the conflicting attribute was under `Compat issues with assembly System.Security.Cryptography` instead of `Compat issues with assembly System.Runtime`"
"> Here's a crazy thought: What if it _only_ worked with the system dispatcher queue? It should be trivial to move TermControl to that.

this is a _good idea_
"
"It isn't wrong from a technical perspective, since that is how it can be done. However, what is stated is misleading and isn't what is really desired . This API shouldn't be considered an export of `objc_msgSend` because it isn't. In this form it is a specialized use case for `objc_msgSend` with no arguments and that is confusing given how this function actually operates. We also hit concerns with one of the new APIs being introduced around overriding the export look up. I was preferring this to be done in Objective-C naturally instead of expose its weirdness at the C# level.

This also makes the C# far more common for those who maintain it and pushes the Objective-C semantics to be the responsibility of the Objective-C compiler."
"My interpretation of the TODO question is to decide if we instead want something like:
```cs
public virtual IntPtr Handle => _strategy.GetHandle();
```
And have the strategy itself determine what the logic would be:
```cs
internal abstract class FileStreamStrategy : Stream
{
  ...
  public override IntPtr GetHandle() => SafeFileHandle.DangerousGetHandle();
  ...
}
```

But please correct me if I'm wrong, @github.

If it's what I described, then I think I would prefer to have _all_ logic moved to the strategy itself. It would be consistent with other properties: `IsClosed`, `CanSeek`, `CanRead`, `CanWrite`, `Name`, `IsAsync`, etc.

If it's what @github described - Then I think having `_strategy.SafeFileHandle` would made make sense than calling `SafeFileHandle` directly, since the logic is _kind of_ deferred to the strategy, but this would not be consistent with how other properties are working."
"Please don't add `JavaNativeTypeManager.GetJniSignature(mi)` to this codepath.  It's already reflection heavy, and this would only make it *worse*:

https://github.com/xamarin/java.interop/blob/f91b0770af630cadc270290e7d6e79637ba3f11c/src/Java.Interop.Tools.TypeNameMappings/Java.Interop.Tools.TypeNameMappings/JavaNativeTypeManager.cs#L363-L372

Only the name is required.

For further rationale, build e.g. `samples/HelloWorld/HelloWorld/HelloWorld.csproj`, and then view `samples/HelloWorld//HelloWorld/obj/Debug/android/src/example/MainActivity.java`:

```java
		__md_methods = 
			""n_onCreate:(Landroid/os/Bundle;)V:GetOnCreate_Landroid_os_Bundle_Handler\n"" +
			"""";
		mono.android.Runtime.register (""HelloWorld.MainActivity, HelloWorld"", MainActivity.class, __md_methods);
```

The method this will lookup is `GetOnCreate_Landroid_os_Bundle_Handler`.  That's *very* unique, and not likely to cause conflicts.

*Furthermore*, the types are wrong; `signature` would be `(Landroid/os/Bundle;)V`, while `GetOnCreate_Landroid_os_Bundle_Handler` (generated in e.g. `src/Mono.Android/obj/Debug/monoandroid10/android-32/mcw/Android.App.Activity.cs`) is:

```csharp
		static Delegate GetOnCreate_Landroid_os_Bundle_Handler ()
		{
			if (cb_onCreate_Landroid_os_Bundle_ == null)
				cb_onCreate_Landroid_os_Bundle_ = JNINativeWrapper.CreateDelegate ((_JniMarshal_PPL_V) n_OnCreate_Landroid_os_Bundle_);
			return cb_onCreate_Landroid_os_Bundle_;
		}
```

which would imply a ""signature"" of `()V` (no parameters, returns `void`), which *will rarely match*."
"> 5. The app aborts at run time instead.

I think this is basically what you got with dx + proguard ^^ You get runtime errors and have to read the build log to figure out what is wrong.

If I change this test to use dx+proguard instead of multi-dex:
https://github.com/xamarin/xamarin-android/blob/5397f99461ae79fa8593665ae6b3d64e2a3ff61a/src/Xamarin.Android.Build.Tasks/Tests/Xamarin.Android.Build.Tests/BuildTest.cs#L330-L333

I get warnings and it builds. But if I switch to r8, it will error unless we supply `-ignorewarnings`.

After `-ignorewarnings`, you get the same amount of warnings, but the build succeeds.

I think we should go with `-ignorewarnings` for all usage of r8, and I just need to add some release notes here?

"
"I just want to say that I have done some testing with the exising CreateProcess flag `CREATE_NEW_CONSOLE`. The case I tried was not documented anywhere by Microsoft as far as I could find, and the results were unexpected *to me*.

I have an `.exe` that's a GUI application and has an option to print output to a console. It is an official Microsoft tool actually, `dpinst.exe` with its `/C` argument. From my observations, this is a GUI exe and when you add the `/C` option it attaches to the parent-process' console and prints to `CONOUT$` (not Standard Output ...).

It was my impression that, when I launch `dpinst.exe /C` with CreateProcess and CREATE_NEW_CONSOLE, a console would be attached to the process. But that's not the case. It appears CREATE_NEW_CONSOLE currently has absolutely no effect on GUI-subsystem executables! There was no new console window or process created and dpinst continued to print its output to the *parent* process' console.

To me this was unexpected. If a GUI program can call AllocConsole to gain a console, why can't I force that at process creation time with a Flag that's supposed to do exactly that? It works for TUI programs.

I don't have the source code for `dpinst.exe`, you guys do. Does it just always do a `AttachConsole( ATTACH_PARENT_PROCESS);` regardless of whether it already has a console itself? Or maybe I did something wrong, but I find it very odd I am not able to spawn a GUI process with a ""forced"" console attached by default and I would like to be able to do that in the future if the APIs around this are going to be expanded :)"
"I think `fstat` failures mean something is wrong with the handle that will bite the user later if we ignore it here.
I don't have a preference between these options."
"What failure modes do you imagine will occur when developers get this wrong? Should there be a ""debug/checked"" mode of some kind that incremental generators can run in so that issues around nondeterminism in user code can be caught more easily?"
"This is wrong from what I can tell, because the C# code is doing exactly the same as the equivalent Objective-C code (and if you're right, the Objective-C code would crash).

Note that the enumeration is implemented by clang, so this is not visible for normal developers.

Can you dump out the memory for the state (all 64 bytes) for the C# version and an identical Objective-C sample, to see if the Objective-C sample also gets the same values?"
whenever there's more than one assert (or better always) add a text message with the assert (stack traces are not always available and can be wrong if something else is broken)
"expression should be non-null right? and dotToken shoudl haveValue right?  otherwise, something in the system went very very wrong, right?  so in this case, i would put Contract calls that these succeed."
comment seems wrong.
So the right (or wrong?) behavior here could probably break razor diagnostics here. @github may need to chime in here.
"I think Adam meant (please correct me if I'm wrong) that the `PlatformDectection` class, which contains the `_net5CompatFileStream` field, is also consumed by some .NET Framework tests. I can see the file can be built for both net60 and net461:
![image](https://user-images.githubusercontent.com/1175054/129238922-5d2fbc8f-df45-46df-9d2b-89df77a0a27a.png)

What I do not know is what special handling would be required to make the exception work."
"For the above cases, would an example about that illustrated the ""root whole assembly"" vs the ""add particular field/method/type"".   This would help answer the ""what do I do when something goes wrong"" question."
Most of these standalone diffs seem wrong.  They seem to be missing the baseline for 3.x.
@github/jit-contrib any thoughts on that? `git remote add dotnet https://github.com/dotnet/runtime` feels a bit wrong to me because it modifies my environment where I already have `origin`
"(question) Do we still need this? It feels wrong, but I don't really understand what it does."
"I do not think R2R code today benefits from being close to coreclr as all 'external' calls/branches have to go through indirection cells anyway. This may have been different in the days of fragile ngen?
Please correct me if I'm wrong @github."
"This is not a connection aborted by the peer but ourselves. So `INVALID_STATE` here is expected, user is doing something wrong. I'm rather surprised we get sometimes `ABORTED`."
The emit here has the wrong runtime semantics.
"I know what you mean, I felt the same way. I spoke to @github about it.

As far as I know, the re-ordering of the tree itself doesn't change the linear execution unless containment happens - correct me if I'm wrong here... So I think it should be ok."
"Yeah, you’re right. This is wrong."
"We were unable to identify what was going wrong from crash dumps before - do you think these spans are sufficient additional data to be able to figure out how we got into this situation?
"
"I just noticed a small bug in my console app where the base url is always Corefx so the mapping of coreclr issues might be wrong mapped to Corefx pulls.

Will fix and update."
"no I mean if you say x === unknownSymbol, then you change unknownSymbol, you are testing for the wrong thing.
"
"> If the situation still sucks, and part rejection is still an opaque and painful thing to figure out

Part rejection is easy to figure out now. You can get a feel for it by stepping through this block:

https://github.com/dotnet/roslyn/blob/9bca5a2861d3ebb2f34bc36536d96d478898c64d/src/Workspaces/CoreTestUtilities/MEF/ExportProviderCache.cs#L211-L238"
"For crossgen I believe this change is strictly an improvement. However, I see that you did not make the corresponding change in crossgen2. However, this isn't necessarily the wrong choice. Crossgen2 does not use the IsSupported function call mechanism, but instead it performs speculative compilation assuming the processor intrinsic IS available which yields excellent performance for this case on Haswell and newer processors."
"I actually like getting both errors in this case because the two locations make clear what's going on -- that you have one more open tag than closing tag, and that the offending unclosed tag is at some other location. When you only give the first error, it makes it sound like you have the _wrong_ closing tag somewhere else; when you only give the second error, you have no idea what tag needs closing.
"
"> So if, with hindsight, Yarn and PNPM are now seeking to replace `node_modules` with a more industrial strength resolver, why not just propose a really great design, and everyone can adopt that?

Because as always, the question isn't to have a great design but rather to gather support around it. When you consider that even now the only package manager in Node is controlled by a for-profit and that it takes **crazy significant** efforts to improve even that, I can't imagine the amount of work that a proposal such as Plug'n'Play would require - and how much of my family time it would consume.

So of course in an ideal world PnP should be implemented in Node, and I'd be open to help with that (or even do most of the work), but it likely won't happen until the Node TSC comes to us with a firm Intent to Implement so that I know it won't be all for nothing. In the meantime, the best I can do is to [document the standard and API](https://yarnpkg.com/advanced/pnpapi) the best I can and work with third-party project to make ""PnP as a plugin"" a reality. I think it worked very well so far, even though there's still this kind of PR every once in a while.

> I'd like to hear more motivation for having an executable format for the pnp file.

This point in particular got discussed a few times already (for example [here](https://github.com/yarnpkg/yarn/issues/6388)), but I think the TS team demonstrated since then why the executable format is just fine: the data format actually got implemented in May 2019 - a year and a half ago - but it didn't do anything to bring PnP closer from TS. Given that it was literally its only purpose, it shows that we should optimize the format for the convenience of our team rather than for theoretical use cases."
"1. Does `getInitializerTypeFromAssignmentDeclaration` ever get called for TypeScript code?
2. What happens when you have a self-referencing assignment that actually results in the wrong type? Do we allow it by short-circuiting to `any`?

    ```ts
    // @github: true
    class C {
      constructor() {
        this.x = 0;
        this.x = this.x.toString();
      }
    }
    ```

    Does this PR make `x` remain `number`?"
"Hey @github, something went wrong when looking for the build artifact. ([You can check the log here](https://typescript.visualstudio.com/TypeScript/_build/index?buildId=78496&_a=summary))."
"Emmmmm, is there something wrong? Why does it not listen to me?"
Maybe the test is put in the wrong position?
Removed Area-Compiler label as I don't see any compiler file in the PR as it is. Please add back if I got it wrong and you need a review from the compiler team.
I don't think there's a right or wrong place - this field has some pretty unique requirements among `SourceFile` members because of everything that goes into calculating its initial value - we just set it whenever we can.
"I'm relatively new to the watch code, but I wanted to write out my understanding of the original code and this PR in case it clears things up (so do correct me if I'm wrong).

It seems like `watchPresentFileSystemEntry` will call `fs.watch` and only fall back to `watchPresentFileSystemEntryWithFsWatchFile` when needed. That function is documented in some comments as being based on polling (the function name is super long so I'm just going to call it ""the polling watcher"" from now on).

The original big long condition in `callbackChangingToMissingFileSystemEntry` is true when the there's a rename event and the file no longer exists, which then leads to the watcher being turned into a polling watcher that waits until an event fires, then recreates the watcher with `watchPresentFileSystemEntry` again.

The PR changes the condition to, on a rename, if it doesn't exist, do the same thing as above, but if it does exist, the watcher is recreated assuming that a rename event is likely to mean that the folder points somewhere else on disk via a different inode (as documented in the PR description), but is done so by calling that polling watcher creation function.

That latter point I think is the contentious one; I'd think that if we know (or very likely know) that the watcher is now bad, that it would need to be recreated via `watchPresentFileSystemEntry` in order to have it potentially pick the non-polling watcher again (as it would have originally).

But, it also feels like it _should_ be expensive to be recreating directory watches (which are potentially recursive) over and over again. Maybe that's why the PR uses polling in the first place, because those are effectively ""free"" given they defer work until some later poll as opposed to asking the system to do some work?

Maybe ideally, it'd be nice if there was a cheap way to just get the inode number of a directory and compare it without doing the work to recreate a watcher (but, this feels like something that node's watcher should really be handling, as the API is based on paths, and it sure would be a surprise for watchers to just totally stop working depending on the details of what some program does to rename or replace a directory/file with other contents or something)."
"> would it be possible to get stable guids here? Are we running it wrong that it churns guids every time?

Answering my own question.  Looks like today the answer is no: https://github.com/microsoft/slngen/blob/04b9e981a2651f3b4aa7cbea9adeb855db927732/src/Microsoft.VisualStudio.SlnGen/SlnFolder.cs#L29

But there is precedent for preserving Guids elsewhere: 
https://github.com/microsoft/slngen/blob/d261186bcd01b3a0c8c350b2a19611032778fd17/src/Microsoft.VisualStudio.SlnGen/SlnFile.cs#L92

Seems like the same could be done for folders.  Opened https://github.com/microsoft/slngen/issues/238"
"@github I understand that the percentage is small, but it is. I think my version is not much harder to understand, but it will remove the allocation and make the code faster and makes it possible to reuse it, I don't see anything wrong with that."
"There are some regressions in some functions that worry me a bit, e.g. regressions in:
 - ``Microsoft.FSharp.Primitives.Basics.List:filter(Microsoft.FSharp.Core.FSharpFunc`2[Byte,Boolean],Microsoft.FSharp.Collections.FSharpList`1[Byte]):Microsoft.FSharp.Collections.FSharpList`1[Byte]``
 - ``System.Runtime.InteropServices.GeneratedMarshalling.ArrayMarshaller`1[__Canon][System.__Canon]:set_Value(long):this``.
- ``System.Globalization.TimeSpanFormat:TryFormatStandard(System.TimeSpan,int,System.String,System.Span`1[System.Char],byref):bool``
- ``System.Linq.Parallel.SortHelper`2:MergeSortCooperatively():this``


For some reason I cannot find the .dasm file in the artifacts for Linux x64, the Extensions view says (under libraries.pmi.Linux.x64.checked.mch):
```scala
          28 (15.05 % of base) : 159341.dasm - Microsoft.FSharp.Primitives.Basics.List:filter(Microsoft.FSharp.Core.FSharpFunc`2[Byte,Boolean],Microsoft.FSharp.Collections.FSharpList`1[Byte]):Microsoft.FSharp.Collections.FSharpList`1[Byte]
```
but this file does not seem to be present in the downloaded artifacts. Maybe I'm looking at the wrong place? Any idea @github / @github?

Have you looked at these @github? Is it just some extra spilling? Inside or outside a loop?"
"Probably, but since it's a weird hack either way I'd rather not mess with it. I'll probably do it wrong a few times while trying to invert it :-)  Ideally we can just delete this whole thing in a few weeks and all of our legacy slns?!?"
"In which case can this not be either an int or bool, wouldn't that signal that something went terribly wrong? (Like could a number get in here somehow?)"
Having a static method on `CompletionService` that requires an instance of a `CompletionService` is just wrong.
"The use of `sideEffectsOnly` in this method seems inconsistent. Depending in the content of the `newList` when `sideEffectsOnly` is true we will return an empty list, a list which is part of `newList` or all of `newList`. That intuitively seems wrong. Am I missing something subtle here?  #ByDesign"
"> That's because in partial partial; the second token should not be parsed as a modifier.

What is wrong with that? Why not parse it as a modifier, but report an error? "
"@github well it shouldn't 😄 that's all wrong, forget what i said.

the ""replaced"" expression does not contain any new diagnostics... all the tests passed because i didn't pass in c# 7.1 to the tests that expect to not get this offered - it simply wasn't offered because it used c# 7.0 where `default` is always a syntax error"
"There are also other implications like: what if you use the wrong version of Sysetm.Dynamic.Runtime? We are kind of taking it on faith that we're doing it correctly today vs. using the correct versions. "
We can... but doesn't the old behavior look wrong to you?
"```suggestion
            // a more-likely-to-be-correct output path from project references.
```

? It's correct for the started-with-a-single-project case, and correct in the solution case if there are no solution-configuration shenanigans, but possibly wrong if there are."
dumb question.  if UpdateStateMachineAsync needs to be on the main thread... why doesn't it switch to it itself?
"again, this seems so wrong.  why are we even invovled in filtering completion items *we didn't create*? #Resolved"
I believe this is wrong. A struct with a field of a generic type at any level of nesting should be considered a managed type in 7.3. Should I just determine and cache this information (HasGenericMembers?) in the same traversal that we use to compute IsManagedType? Would appreciate guidance @github @github #Resolved
I'm not sure you can safely remove the serialization code. All of that logic is just boiler plate copied from xunit. Whenever it was wrong it failed a random unit scenario. If you change any of it make sure you do a test run where you pass the `-serialize` argument to xunit. That will force the issue and validate everything is correct.
"1. why on a task?  are there race conditions here?
2. what general value is this change trying to provide?  What's wrong with MEF here?"
"Can we get a comment here saying it's unfortunate that _allRenameLocationsTask now requires the UI thread before it can let continuations run? Don't get me wrong: this is correctly expressing how it has to work right now, but it's still not how it was _supposed_ to work."
">RemoveCallingConventionMismatches(results, callingConvention); [](start = 16, length = 62)

I am not sure if performing this filtering here is a good idea. The reason is that calling convention of methods is not part of the language, they are not in source, etc. If everything is filtered out, the user would get ""there is no method"" error, and how to figure out what is wrong. It might be better to pick the best candidate with no respect to the calling convention and then complain that it doesn't match due to that specific reason. #Closed"
"@github I think this is still wrong? sounds like it should be `--clangx` ? "
"The call above restricts this to top level definitions only. The current logic is definitely wrong though, and I was missing a test for this. "
"OK, I am often wrong. Perhaps it's used elsewhere too. I'm not that broken up by this. Won't fix if you like."
"i guess while you're changing this file, these are actually spaces that are encoded wrong (!) and all need to be fixed"
"but wouldn't `table:{""red"": ""#ff0000"", ""blue"":""#0000ff""}` deserialize wrong? we always want to increment `i`, even if the key didn't exist"
"Sorry if this is the wrong place to ask, but this is the only thing stopping me from swtiching to VSCode. 
I've cloned the Repo but can't see how to start VSCode on linux"
"Am I dumb for thinking there could be an `IProfile` that defines all these, then `Profile` and `ProfileViewModel` implement that? So these could be defined in a single source of truth?"
"Doesn't seem to affect anything other than the native save dialogs for Windows. I've been able to repro this by repeatedly pressing Ctrl+S (holding it down doesn't seem to do anything).

It looks like it could be an issue with Electron's `dialog.showSaveDialog` but I could be wrong."
"Whoops, wrong test re-enabled"
"@github
I am sorry for asking this dumb question. I am new to the Xamarin development.
This bug fix is very important for my project. Is there more precise information on how long will it take to make it to general user."
"Here's the thing. Anything we do for UWP right now is probably not reusable for .NET MAUI. That makes it hard to prioritize anything for UWP right now as the end-of-life of this is in sight.

I am willing to do a concession in this case if it's not the most perfect solution but it will work for you, but as mentioned before, I unfortunately can't spend any time on it myself because there are still a lot of other issues that either impact more people and can have more value because they can be ported to .NET MAUI.

I'm not trying to say I don't find your issue important, it's a matter of our priorities not really aligning here which sucks, I understand that.

If you can provide me with something working that I can review and verify and it passes the tests I am more than willing to help you out, but I'm afraid I can't give you any more help than that atm."
"> that would cause compiler to behave not according to the language specification in an observable way. This would be the wrong thing to do.

Would it then be beneficial, long term, to get this as an approved change to the language spec? I don't mind which approach is done, or even if we do one today and another as a long term goal.
Just want to understand the correct approach and to understand the benefits/drawbacks of each."
"""OK""? Yes?  I was kinda hoping to *avoid* mentioning it, because we're not *entirely* sure it'll fix the problem.  (We *think* it will, but as repro'ing that issue is ""weird,"" we could be wrong.)"
"I don't think any of these suggestions read better, tbh.

* `resultWithLeftState` - What result?
* `resultTypeAndLeftState` - That implies a tuple to me. I think `With` sounds better.
* The other two are just wrong. They're not the left result, they're the resulting type of the expression, _with_ the resulting state of the left side.

---
In reply to: [602577268](https://github.com/dotnet/roslyn/pull/52009#discussion_r602577268) [](ancestors = 602577268)"
"> Yep, which is not wrong because the library is not supported on ""Unix"".

You mean that cause Unix would imply iOS/tvOS and others we don't support right?

> I'll open another issue if you don't want to mix the fix with this change

Sounds good. I rather keep this PR as is and have another issue to fix this.
"
"Okay I need top put aside more time for a full review, but this is legit.

\<crazy idea hat>

How hard would it be to add a link to the docs (like, to https://docs.microsoft.com/en-us/windows/terminal/customize-settings/profile-advanced#profile-termination-behavior) to that infobar? We could generate the fwlink if needed
"
Based on the API to create this UI item I do not think you're allowed to set the frame of that UI element. If I'm wrong this it's easy to add later. However good call on `[DisableDefaultCtor]`.
"This is fine. Note that there's a slight semantic difference here, in that this will be a failure limit *per parallel process*, not a failure limit overall. Given that the goal is to avoid going crazy with what will be unused failure information, that's fine."
"> I think having bold in the color table is an essential prerequisite for getting the bold color to work

LOL. Clearly I was wrong, since the bold seems to working fine in this PR as far as I can tell.

That said, I still think this functionality should probably not be enabled by default, because there are going to be edges cases that don't work, and that's kind of inevitable when we're deliberately choosing to alter the colors that were requested.

As one example, if you're using a ""standard"" color scheme, like Campbell, where the default background is identical to black, and the default foreground is identical to white, then both these sequences should be invisible, but they aren't:

    printf ""\e[0;30mHIDDEN\e[m\n""
    printf ""\e[0;47mHIDDEN\e[m\n""

That particular case may be fixable, but there'll always be something. Having the default behavior be technically incorrect feels like we're asking for bug reports."
"I understand the idea.. I just don't like the fact that now if we add a new field, we must look for all places where we instantiate the arguments class and we won't know on compile time that we forgot to set a field somewhere. While this is perfectly solvable on compile time rather than runtime... I think here we really should aim for maximum correctness not visual appearance of the code and let the code tell us as early as possible something is wrong.

Anyway, I added the class.."
"Same regarding CI, I also wonder, do we have to add the LangVersion in each config? I think we can set it at the project level, but I might be wrong."
"@github Just wonder, even if there is no WaitAndWrap() and just await in parent method, the **ObjectDisposedExceptions** can still be thrown synchronous because the throw is before first await. Please correct me if wrong, thanks."
"```suggestion
  subst T: $TempDir
```
Silly but casing diff was driving me crazy"
wrong indentation
"This is a reduced copy that still exhibits the issue. The only snag was having to use ILASM from .NET Framework instead of .NET one, which silently generated `.winmd` with wrong metadata version, which is a crucial thing for reproducing the issue. The original `.winmd` files (Windows SDK UnionMetadata one, and the ones from Windows installation folder) are too big to put in a test."
"I've run the benchmarks and it looks better with what we have in this PR (Might be the wrong benchmarks). With stackallock + going to stringbuilder it might be even better -> https://github.com/dotnet/performance/pull/2177

|         Method |        Job |                                                                        Toolchain | LineLengthRange |     Mean |     Error |    StdDev |   Median |      Min |      Max | Ratio | RatioSD |   Gen 0 |  Gen 1 | Allocated |
|--------------- |----------- |--------------------------------------------------------------------------------- |---------------- |---------:|----------:|----------:|---------:|---------:|---------:|------:|--------:|--------:|-------:|----------:|
|      ReadToEnd | Job-UIJYFC | /testhost-main/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   0,    0] | 5.991 us | 0.0616 us | 0.0577 us | 5.997 us | 5.915 us | 6.111 us |  1.00 |    0.00 | 13.4901 | 0.1408 |     83 KB |
|      ReadToEnd | Job-RITEOG |      /testhost/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   0,    0] | 5.245 us | 0.0705 us | 0.0660 us | 5.252 us | 5.147 us | 5.350 us |  0.88 |    0.01 |  5.7341 | 0.0206 |     35 KB |
|                |            |                                                                                  |                 |          |           |           |          |          |          |       |         |         |        |           |
| ReadToEndAsync | Job-UIJYFC | /testhost-main/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   0,    0] | 7.028 us | 0.0850 us | 0.0753 us | 7.048 us | 6.901 us | 7.128 us |  1.00 |    0.00 | 13.4924 | 0.9478 |     83 KB |
| ReadToEndAsync | Job-RITEOG |      /testhost/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   0,    0] | 6.026 us | 0.1134 us | 0.1213 us | 5.980 us | 5.902 us | 6.284 us |  0.86 |    0.02 |  5.7235 | 0.7969 |     35 KB |
|                |            |                                                                                  |                 |          |           |           |          |          |          |       |         |         |        |           |
|      ReadToEnd | Job-UIJYFC | /testhost-main/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   0, 1024] | 5.992 us | 0.0635 us | 0.0563 us | 5.992 us | 5.907 us | 6.092 us |  1.00 |    0.00 | 13.4960 | 0.1443 |     83 KB |
|      ReadToEnd | Job-RITEOG |      /testhost/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   0, 1024] | 6.219 us | 0.1210 us | 0.1345 us | 6.179 us | 6.010 us | 6.504 us |  1.04 |    0.03 |  5.7678 | 0.0236 |     35 KB |
|                |            |                                                                                  |                 |          |           |           |          |          |          |       |         |         |        |           |
| ReadToEndAsync | Job-UIJYFC | /testhost-main/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   0, 1024] | 7.133 us | 0.0568 us | 0.0504 us | 7.137 us | 7.010 us | 7.228 us |  1.00 |    0.00 | 13.5398 | 1.6853 |     83 KB |
| ReadToEndAsync | Job-RITEOG |      /testhost/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   0, 1024] | 6.189 us | 0.1213 us | 0.1192 us | 6.181 us | 5.994 us | 6.405 us |  0.87 |    0.02 |  5.7769 | 0.4980 |     36 KB |
|                |            |                                                                                  |                 |          |           |           |          |          |          |       |         |         |        |           |
|      ReadToEnd | Job-UIJYFC | /testhost-main/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   1,    1] | 5.973 us | 0.0404 us | 0.0358 us | 5.964 us | 5.905 us | 6.025 us |  1.00 |    0.00 | 13.4943 | 0.1420 |     83 KB |
|      ReadToEnd | Job-RITEOG |      /testhost/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   1,    1] | 5.230 us | 0.1164 us | 0.1246 us | 5.229 us | 5.017 us | 5.499 us |  0.87 |    0.02 |  5.7332 | 0.0209 |     35 KB |
|                |            |                                                                                  |                 |          |           |           |          |          |          |       |         |         |        |           |
| ReadToEndAsync | Job-UIJYFC | /testhost-main/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   1,    1] | 7.006 us | 0.0945 us | 0.0884 us | 6.967 us | 6.893 us | 7.187 us |  1.00 |    0.00 | 13.5060 | 0.9449 |     83 KB |
| ReadToEndAsync | Job-RITEOG |      /testhost/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   1,    1] | 6.108 us | 0.1136 us | 0.1062 us | 6.091 us | 5.936 us | 6.324 us |  0.87 |    0.02 |  5.7265 | 0.7865 |     35 KB |
|                |            |                                                                                  |                 |          |           |           |          |          |          |       |         |         |        |           |
|      ReadToEnd | Job-UIJYFC | /testhost-main/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   1,    8] | 5.971 us | 0.0620 us | 0.0580 us | 5.962 us | 5.878 us | 6.093 us |  1.00 |    0.00 | 13.5000 | 0.1429 |     83 KB |
|      ReadToEnd | Job-RITEOG |      /testhost/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   1,    8] | 5.167 us | 0.0824 us | 0.0771 us | 5.133 us | 5.078 us | 5.306 us |  0.87 |    0.02 |  5.7277 | 0.0202 |     35 KB |
|                |            |                                                                                  |                 |          |           |           |          |          |          |       |         |         |        |           |
| ReadToEndAsync | Job-UIJYFC | /testhost-main/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   1,    8] | 7.018 us | 0.0548 us | 0.0458 us | 7.014 us | 6.936 us | 7.108 us |  1.00 |    0.00 | 13.4940 | 0.9718 |     83 KB |
| ReadToEndAsync | Job-RITEOG |      /testhost/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   1,    8] | 6.185 us | 0.1011 us | 0.0844 us | 6.178 us | 6.033 us | 6.330 us |  0.88 |    0.01 |  5.7269 | 0.7933 |     35 KB |
|                |            |                                                                                  |                 |          |           |           |          |          |          |       |         |         |        |           |
|      ReadToEnd | Job-UIJYFC | /testhost-main/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   9,   32] | 5.992 us | 0.1129 us | 0.1001 us | 5.991 us | 5.839 us | 6.152 us |  1.00 |    0.00 | 13.4957 | 0.1416 |     83 KB |
|      ReadToEnd | Job-RITEOG |      /testhost/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   9,   32] | 6.889 us | 0.9402 us | 1.0060 us | 6.570 us | 5.906 us | 9.886 us |  1.15 |    0.18 |  5.7311 | 0.0236 |     35 KB |
|                |            |                                                                                  |                 |          |           |           |          |          |          |       |         |         |        |           |
| ReadToEndAsync | Job-UIJYFC | /testhost-main/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   9,   32] | 7.005 us | 0.0572 us | 0.0535 us | 6.994 us | 6.906 us | 7.094 us |  1.00 |    0.00 | 13.4940 | 0.9440 |     83 KB |
| ReadToEndAsync | Job-RITEOG |      /testhost/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [   9,   32] | 6.303 us | 0.1407 us | 0.1620 us | 6.343 us | 6.008 us | 6.611 us |  0.91 |    0.02 |  5.7468 | 0.7945 |     35 KB |
|                |            |                                                                                  |                 |          |           |           |          |          |          |       |         |         |        |           |
|      ReadToEnd | Job-UIJYFC | /testhost-main/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [  33,  128] | 6.013 us | 0.0758 us | 0.0672 us | 5.998 us | 5.919 us | 6.146 us |  1.00 |    0.00 | 13.5102 | 0.1226 |     83 KB |
|      ReadToEnd | Job-RITEOG |      /testhost/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [  33,  128] | 6.130 us | 0.0803 us | 0.0752 us | 6.131 us | 5.998 us | 6.279 us |  1.02 |    0.01 |  5.7292 | 0.0237 |     35 KB |
|                |            |                                                                                  |                 |          |           |           |          |          |          |       |         |         |        |           |
| ReadToEndAsync | Job-UIJYFC | /testhost-main/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [  33,  128] | 7.141 us | 0.1344 us | 0.1320 us | 7.086 us | 7.008 us | 7.448 us |  1.00 |    0.00 | 13.4896 | 0.9398 |     83 KB |
| ReadToEndAsync | Job-RITEOG |      /testhost/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [  33,  128] | 6.179 us | 0.1216 us | 0.1137 us | 6.188 us | 6.003 us | 6.386 us |  0.87 |    0.03 |  5.7411 | 0.5014 |     35 KB |
|                |            |                                                                                  |                 |          |           |           |          |          |          |       |         |         |        |           |
|      ReadToEnd | Job-UIJYFC | /testhost-main/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [ 129, 1024] | 6.005 us | 0.0466 us | 0.0389 us | 5.993 us | 5.945 us | 6.089 us |  1.00 |    0.00 | 13.6508 | 0.9630 |     84 KB |
|      ReadToEnd | Job-RITEOG |      /testhost/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [ 129, 1024] | 6.223 us | 0.0751 us | 0.0703 us | 6.216 us | 6.139 us | 6.389 us |  1.04 |    0.02 |  5.8710 | 0.0248 |     36 KB |
|                |            |                                                                                  |                 |          |           |           |          |          |          |       |         |         |        |           |
| ReadToEndAsync | Job-UIJYFC | /testhost-main/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [ 129, 1024] | 7.281 us | 0.0623 us | 0.0520 us | 7.292 us | 7.148 us | 7.344 us |  1.00 |    0.00 | 13.6322 | 2.0506 |     84 KB |
| ReadToEndAsync | Job-RITEOG |      /testhost/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [ 129, 1024] | 6.263 us | 0.0896 us | 0.0794 us | 6.244 us | 6.158 us | 6.437 us |  0.86 |    0.01 |  5.8634 | 0.4097 |     36 KB |
|                |            |                                                                                  |                 |          |           |           |          |          |          |       |         |         |        |           |
|      ReadToEnd | Job-UIJYFC | /testhost-main/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [1025, 2048] | 6.172 us | 0.0548 us | 0.0513 us | 6.152 us | 6.117 us | 6.299 us |  1.00 |    0.00 | 13.7824 | 1.3758 |     85 KB |
|      ReadToEnd | Job-RITEOG |      /testhost/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [1025, 2048] | 6.186 us | 0.1195 us | 0.1118 us | 6.146 us | 6.051 us | 6.421 us |  1.00 |    0.02 |  6.0063 |      - |     37 KB |
|                |            |                                                                                  |                 |          |           |           |          |          |          |       |         |         |        |           |
| ReadToEndAsync | Job-UIJYFC | /testhost-main/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [1025, 2048] | 7.448 us | 0.0780 us | 0.0691 us | 7.457 us | 7.337 us | 7.541 us |  1.00 |    0.00 | 13.7816 | 2.1945 |     85 KB |
| ReadToEndAsync | Job-RITEOG |      /testhost/net7.0-OSX-Release-x64/shared/Microsoft.NETCore.App/7.0.0/corerun |    [1025, 2048] | 6.435 us | 0.0515 us | 0.0482 us | 6.435 us | 6.365 us | 6.526 us |  0.86 |    0.01 |  6.0125 | 0.8337 |     37 KB |"
"I was wrong, there wasn't any more to the situation than that, and moving the hash set within the driver was easy. Your suggest to manage this with events is appealing, partly because doing that would remove the irregular treatment of syntax tree actions in the driver. Making that change now is less pressing with management of this issue moved completely within the driver.
"
"@github @github 
The <a href=""https://github.com/Microsoft/TypeScript/pull/16646#pullrequestreview-47396091"">original justification</a> for the change was: to make version parsing easier.

Given how parsing issues escalated, while compiler gained unnecessary variable and all these troubling cross-referencing comments — is it better to revisit?

If TSC goes back to dumb simple `export const version = ""2.5.0"";` all these quirks go away. More to it, built TSC.JS has version in a plain parseable format.

Compare old simple way:
``` typescript
(function (ts) {
    ts.version = ""2.4.1"";
})(ts || (ts = {}));
```

With what we got today:
```typescript
(function (ts) {
    ts.versionMajorMinor = ""2.5"";
    ts.version = ts.versionMajorMinor + "".0-dev.20170719"";
})(ts || (ts = {}));
```

All that trouble for the sake of splitting `versionMajorMinor` off `version`. Could have just gone `version.split('.').slice(0,2).join('.')`."
Type is wrong. Should be `...arg0: any[]` that little bit not being implemented is probably why it was asserted.
"> I think that this should be kept.

I agree. As I said, this is just not the right place for it, it makes:

a) `fgArgTabEntry::getSize` return the wrong value on LA for this special case.
b) Refactoring `fgMorphArgs` harder and riskier (and that function is already notoriously fragile), due to its placement outside the `else`."
"This is doesn't preserve the order in which expressions are visited, which leads to a wrong behavior when duplicate declarations are involved. Please fix. 
"
"Aren't all special types and members required to be in a valid corlib? I believe so and if that's true then any existing tests were testing the wrong thing.
"
"this was just wrong, as far as I can tell, but only was used for tags followed by a newline:

```js
@github
stuff
``` "
"We don't necessarily need the temp variable when we're *not* using the value, but I also think this emit is wrong when we *do* use the value.

Consider:
```js
let a = ""0"";
let b = a++;
console.log(typeof a, a); // number 1
console.log(typeof b, b); // number 0
```
If we use `_a` here, it should already have been coerced to a number, so the emit should start with `_a = +__classPrivateFieldGet(this, _text)`.

Please modify this test to include cases where the value of the expression is used (i.e. `x = this.#test++`)."
"@github, I may be wrong, but I thought we had plans to support instrumentation on legacy applications as well.
"
"> While the semantic meaning is the same, the original code much more clearly conveys intent. Using u8 obscures the intent.

I'm fine reverting it, but I don't understand the intent argument.  Why is the intent any clearer with the former over the latter?  The intent of the former is so obscured that it required a comment explaining how it was derived (and the comment is wrong :)"
"In the case of a named import, the `type` modifier need not be present _on_ the named import; it could be present on the parent import declaration... afraid calling this “TypeOnlyModifierBlah” makes you focus on the wrong thing."
"> One of the primary drivers was concern around non-determinism, and whether folks might write catch blocks for just the target exception and not realize they need to handle an aggregate as well, and then even if they did realize it, end up needing to duplicate all of their exception handling logic to handle both the single and aggregate cases.

I can definitely see where that's coming from, but I wonder if suppressing exception information is desireable in principle: it could be argued, especially if you subscribe to the ""let it crash"" school of thought, that logging exceptions is more important than handling them.

In this particular case it probably doesn't matter, I don't think STJ users would or should try to handle this particular exception. It's meant to address a corner case of a corner case, where there is likely something wrong in their `I(Async)Disposable` implementation, so reporting back with as much information as possible seems appropriate."
"> From discussion with Carlos: the only thing I'd really want to block over is the flag pointing the wrong direction when it's at a terminus. It's highly visible -- moreso than a usability issue -- and we'll be hitting the streets with it pretty soon. I suspect somebody will trip over the visual glitch in approximately the first eight seconds. 😄

This is done. But I'm gonna take it a step further in the next commit. Instead of wrapping the marker onto the previous/next line, just flip it. That's a lot more intuitive.

It requires a few changes to the `SelectionXForRendering` funcs, but not difficult at all."
"@github We're planning on shipping this in Preview 1.15, the next Terminal release. Typically, these releases are about 6 weeks apart. We'll get to elaborating on the docs once we get closer to release.

Trying to parse everything there and translate it to what we've got so far:
* ""click and drag (highlight) somewhere with the mouse""->""press any arrow key while holding shift""
  - I think this actually shipped in 1.13, IIRC. Definitely in 1.14.
* ""At this point you can release the left-click (1) or shift (2). ... and you can now move anywhere with just the arrow keys""
  - @github would have to clarify this one for me. I _think_ that at this point, just arrow keys won't move the cursor. 
  - HOWEVER, if you started the selection by pressing `ctrl+shift+m` (or whatever you bind mark mode to), then just arrow keys _will_ move the cursor.
* ""To highlight you then hold shift while using arrow keys similar to the highlighting logic of holding left-click while moving the mouse.""
  - Yep, that's how mark mode works.
* ""Copying can happen in 2 ways:....""
  - This I _don't_ think we have today (again, Carlos correct me if I'm wrong). We may need to add an arg to `copyText` to specifically ask that the selection is not dismissed."
I'm losing my mind... I updated the wrong file ;-)
"So they added a new function that ends up with the same signature for us 😒 

The `2` suffix makes it sound like we did something wrong... but no other good option comes to mind either. Maybe `CanPerformUnwindAction`? `CanPerformSegueUnwind`? `CanPerformUnwindSegueAction`?

Also maybe add some `#if XAMCORE_4_0` spaghetti to rename the old function `CanPerformUnwindDeprecated` and the new one `CanPerformUnwind`."
It's possible this is the correct behavior as designed but it feels wrong that the lambda is incompatible with its own inferred type.
Wrong indentation in this method (space/tab confusion?)
"That was by conscious design :) this is not a general purpose tool to remove code. There's way too many things that could go wrong (it was not as easy as expected, nor do I think it covers every possible cases) and the lure to abuse might be too strong ;-)
"
"""this tyep is build to store"" (something is wrong here with spelling/grammar. not sure though what you were going for).  maybe 'built'?"
"I believe returning the default from the system is better than OS UI one. We'll be consistent across all configurations. This is more predictable. This matches the resource lookup in general too to always fallback to specific set of resources.
Also, I explained a concerns in my email communication regarding step 3 which I believe it is wrong to do it. 

> Basically the problem comes when you've got say en-US as default and es-ES installed also. If the user asks for a time zone string for es-MX, we need to return the one from es-ES, not the one from en-US.

I am not sure why you are seeing it as a problem. This is different than we do the resource lookup in the .NET. why we need to be different here? We are not trying to invent something new here or different than how the rest of the resource lookup work. "
"This is both right and wrong at the same time.

It's right in the sense that you're removing `#if !MONOMAC`, and then to get the same result you need to add this attribute.
It's wrong because these APIs seem to actually exist in macOS (12).

I'm guessing we added these APIs at some point, with the correct availability attributes, not realizing that the code was inside a `#if !MONOMAC` block, and as such the API wouldn't be exposed on macOS.

The correct fix here is to maintain the attributes as-is (and remove the `#if MONOMAC` condition as you do), and then verify with intro/xtro/documentation that these APIs actually exist and are correct on macOS.

That's much bigger than just a mechanical conversion of this framework, but I think it's worth it (it's also a pretty small framework, so it shouldn't be too much work)."
"> I think a delayed diagnostic will address the concerns and ensure we don't have duplicate diagnostics.

I don't think the delayed diagnostics is the right approach here. Mainly because we will have to control when it is getting resolved, which is hard to do given that we are trying to move the work from one pipeline phase to the other.

>It's very flaky. Not only the new test. But I see other existing tests can randomly have the diagnostics from the compilation of the new test. I can't understand how the diagnostics leaked into a whole different compilation.

>It's likely I'm reusing a diagnostic bag that shouldn't be reused, but still looks very weird it's leaking into a different compilation.

Let's take a look at what you tried to do and see what is going wrong. Update this PR with that. I have a high confidence that ```MarkBackingFieldAsCalculated``` approach will work. In fact, it is very likely that later we will move/add reporting of even more diagnostics there."
"There's existing code a few lines before this that's doing:
```C#
var ctor = ((MethodSymbol)this._module.Compilation.GetWellKnownTypeMember(WellKnownMember.System_ReadOnlySpan_T__ctor_Pointer));
if (ctor == null)
{
    return false;
}
```
without checking diagnostics. Is that also wrong?  I was just copying what's already being done in this file."
"So as I understand it the purpose of the ""does overflow"" checks is that RangeCheck does not model overflow (since it cannot...).

Except in the special case of all constant ranges it seems:
https://github.com/dotnet/runtime/blob/a3b186b9904844b8001d4bb5d7474f2591ee96d9/src/coreclr/jit/rangecheck.h#L238-L251

So _I think_ that the assertion ""if the ranges are all constant, there could have been no overflow"" is correct.

Now, what is perhaps far more curious is the ""does it overflow"" logic itself, which says that if the end result of the SSA use-def chain walk is an `IND`, it does not overflow. This makes sense insofar as RangeCheck does not work with indirections, thus could not have drawn wrong conclusions earlier, when computing the ranges (another way to put it is that an indirection in the dependency chain will always be terminating, not result in a dependent range).

What makes me wonder then is why don't we consider chains ending in, say, parameters (as is the case here) as non-overflowing."
"Thanks for the rename, I have always felt WorkspaceAnalyzerManager was the wrong term I chose, given that it is independent of workspace.
"
"Hm, turns out I was wrong when I thought that `x.prop = undefined` is a no-op. Fixed.
"
Wrong indent?
"Yep, that was rejected solely on scenario, not because it was the wrong change to make.
"
Something's wrong with the way this is being rendered. We shouldn't have `Object.` in front of all of these. (Except e.g. `Object.toString` which is actually a property of Object.)
"It might be worth throwing an error if `DefinitelyTypedRunner.testDir` is empty/does not exist (rather than the usual behavior of `getDirectories`, which I believe just produces `undefined` or an empty list). After all, without that, an empty or missing folder is a passing DT suite, which could be misleading if you run this with `DefinitelyTyped` cloned in the wrong location."
"Once the PRs (this, and https://github.com/dotnet/runtime/issues/67942) are merged, I'll have a look, considering https://github.com/dotnet/runtime/issues/67942 first.

> common prefixes will be relatively short

I don't know 😉 But with `Vector128<ushort>` (for char) it's 8 chars and vectorization can be done. So my feeling* is that this threshould is hit quite often. Of course I could be wrong here too.
I'll try it and see if the additional complexity is worth it.

\* based on a use case for an (internal) parser I have in mind"
"Hmm, not crazy about removing these or introducing types like `SingleElementGenericTupleTypeReference` that we don't otherwise need."
"(btw: I'm not saying this change is wrong, just expressing the reasoning behind the existing logic)."
"this seems wrong.  if the method is 'ref' then we should make a ref type for the return type. #Resolved
"
What was wrong here?
">             Assert.Null(typeInfo.Type);

This kinda sucks. I don't think that it should hold up this PR, but I'm guessing that the IDE will want this to actually work. Can you file a bug to followup?

---
Refers to: src/Compilers/CSharp/Test/Semantic/Semantics/TargetTypedObjectCreationTests.cs:3921 in e49bc5e. [](commit_id = e49bc5e1a260a0fbdda3eac5dab9747c8a1f706e, deletion_comment = False)"
"While testing these changes with #31701, I realized that I was only trying coreclr build with `CLR_CROSS_COMPONENTS_BUILD=1` (moved that line from build.sh to build-commons.sh for testing then reverted, but didn't rebuild coreclr after the revert). Unsetting that variable revealed that there was more work to be done for the main coreclr product build. Rebased and pushed the additional changes (net delta: 047d29c +/- some cosmetic adjustments during the rebasing).

This does not affect libraries' native+managed and installer's native builds, which continue to succeed. The only part which is currently failing (with #31701 changes) is installer managed build, where ngen step picks up the wrong RID: https://github.com/dotnet/runtime/pull/31701#discussion_r386155776."
"Oh I see what is wrong. You added useGCC:false to the parameters flown down to xplat-pipeline-job.yml... you should add it to the build-job.yml template parameters declaration:

https://github.com/dotnet/runtime/pull/33446/files#diff-45d0c31b08d09fe299a0b89aba6ab31dR16

In line 17 to be precise. "
">@github, what is the breaking change concern here? We're worried someone is relying on this returning the wrong version

Yes. It's quite possible that someone is using Environment.OSVersion and it will be unexpected to suddenly get different values after upgrading to .NET 5. So, at the very least, this breaking change needs to be documented as such."
">  I believe AllIgnoreOptions is a reasonable choice here as it makes the behavior consistent between partial method return types and parameter types.

Yeah it looks like I picked the exact wrong example to test out if that was the right value or not 😦 "
"Don't think these are the same or am I wrong here? On members of a class the `container.kind`  is the ClassDeclaration, on the abstract keyword of the class the container is actually a source file so that is why I added the `declaration.kind` check.

Will do some test for ClassExpressions. Thanks for the feedback!
"
"We might be able to heuristically recognize type-specializing opcode sequences and branching patterns during our initial IL scan/profitability check. At this level we would not know what methods get called and whether or not they are intrinsic. It would be pretty ad-hoc as we can't even do simple dataflow at that level today.

Assuming we could guess right much of the time, we could ""discount"" the cost of the candidate to be the estimated cost of one of the branch cases plus the cost of any ""unconditional"" IL, and provisionally accept the inline. I have written heuristics like this in the past and they're tricky to get right without fairly strong models for control flow; we don't have that here either.

Similar perhaps for size-specializing patterns.

When we actually go to import the inlinee, if it then turned out we were wrong and things didn't simplify, we could reject then to keep code size small. But we'd have burned a fair bit of jit time and memory in the process.

So the key would be to get good recognition accuracy, so that jit throughput is not unduly impacted by things that look promising but don't pan out.

An alternative is to try and do this recognition either in the language compiler or in some other precompilation tool and just leave breadcrumbs for the jit."
"> If there's a mechanical fix to update existing code, it'd worthwhile to have that in the release notes for 3.9.

Write an `Extract` everywhere we now (correctly) flag as a type error, `(or, better yet, write types that actually check out without contortions). It's the typesystem equivalent of a typecast, but it's much more explicit.

eg,
```ts
type GetClass<T extends any> = T[""class""];

// could be
type GetClass<T> = Extract<T, {class: any}>[""class""];
```
obviously, you can replace `Extract` with a helper that provides a more reasonable default on failure than `never` for your given situation, too. 

> this causes a failure in DT on wordpress__block-editor-tests.tsx. Can you try to fix it? It looks like the offending signature is this:

What's broken about it? the signature itself has nothing wrong as far as I can tell, so you're talking about a specific usage, right?"
"> related to @github 's comment I would like to be able to specify number of errors, and that might be easier to handle.

I agree, this is really needed as you can never know if you are blocking more than 1 error, or the wrong kind of error"
Sorry I don't see again what is wrong [here](https://dev.azure.com/dnceng/public/_build/results?buildId=1112519&view=logs&j=922f7fe3-0735-5839-4d76-f6d8a5e047bd&t=d3c89a87-2123-56c4-3b91-63fa06060730&l=652)?
"@github @github I just added an assert - do you think it's appropriate? I'd hate to bring down a compilation because an assertion was wrong. I wish there was a place to log ""uh oh""s in the experience that were non-fatal."
"@github
Your case is tracked in issue <https://github.com/microsoft/TypeScript/issues/31090>.

---

Also that return type is wrong, it should be:
```ts
function importWithNamespace<T extends string>(location: T): Promise<typeof import(`App/${T}`)> {
	return import(`App/${location}`);
}
```

Since dynamic import returns a `Promise`.
"
"> This API is helping to optimize our new MVVM Toolkit package for the Windows Community Toolkit

If you are using this API a lot, you are doing something wrong. This API is a very unsafe construct, and it should be used only in a few most performance critical situations."
"In a debugging session with @github and @github, I realized I had a bug in my benchmark code, and [I was feeding the wrong RTT](https://github.com/dotnet/runtime/commit/48cf3d23a0d4495ae9295ccc77a20dcdf436b26d) to the algorithm. With the right RTT it seems to work nicely. Embarrassing mistake, Github will remember it forever 😄

Regardless, I'm glad I got some early feedback here, and kicked-off the discussion on RTT estimation."
"Tagging subscribers to this area: @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

- Today we're using the global event source and events that fire in the app domain get captured and this can result in capturing the wrong instances. This fix uses an async local to scope the events for the HostingEventListener to the execution of the application's entry point.
- Removed the RemoteExecutor as a result of this change

Fixes https://github.com/dotnet/aspnetcore/issues/33494

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>davidfowl</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Extensions-Hosting`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"@github lots of new failures after I picked up #54588. Most are similar to
>  System.TypeLoadException : The generic type 'System.IBitwiseOperators`3' was used with the wrong number of generic arguments in assembly 'System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'"
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

It was possible for us to underestimate the size of temps required. This
happened because we used the state of the frame layout to check if the
size of temps was computed and that check was wrong. This could lead us
to make different decisions about which registers needed to be saved in
the prolog and epilog on ARM32. In particular, if the frame size was
around the size where a stack probe is necessary, this could be
possible.

There are also other comments that suggest that this could result in
failure while encoding instructions that reference the stack locals.

Fix #58293

cc @github/jit-contrib

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>jakobbotsch</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-CodeGen-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Going to close and reopen.  The crypto failure mentioned above is apparently very rare, so if there's nothing wrong with this actual change it should pass...."
"@github please correct me if I'm wrong here --- but all validation is complete now. the change was ported to mono\mono locally to run a few more tests, and it's all green.
@github @github @github - this is ready to be merged to main now and to be backported to the 6.0-maui (or whatever final name we settled on). @github can you kick off whatever backport command needs to be done. At this point we don't think we need this in 6.0.x servicing."
"It feels like the wrong place for the extension to exists. If it's general purpose enough that your code and user code would benefit from it, we should move it down-level. @github could we consider adding this as an extension in System.Text.Json?"
Something seems really wrong with this solution. There are a bunch of build errors that show up every other time I build the solution.
"@github Can you elaborate more?

Here:

https://github.com/dotnet/aspnetcore/blob/c925f99cddac0df90ed0bc4a07ecda6b054a0b02/src/Mvc/Mvc.Formatters.Xml/test/SerializableErrorWrapperProviderTest.cs#L11-L21

`isSerialization` parameter is never used. The test might be wrong if it should use it, or it should be removed."
"There is an errant blank line here.  Is that intentional?  Not crisp on makefile rules but this seems wrong at a glance.  "
"I am deleting this for many reasons:

1. ""Quarterly release"" and the stated version numbers were both wrong and also not concepts that are meaningful to non-Microsoft users.
2. Saying ""hey, this might be broken, let's send you down this path of sadness"" isn't a good way to say we might depend on it. If we have this dependency problem, it should be clearly called out in machine setup above.
3. I'm not sure the statement was correct anyways."
"@github I have a suggested refactoring to make (though it is almost certainly not an appropriate time to perform that suggestion).  Specifically, I believe the existing system for ScanXXX+ParseXXX in LanguageParser amounts to a huge amount of complexity for little (if any) gain.  I have an alternate approach i think would be superior and better for the long term health of the parser.

The primary problem today is that the parser needs to encode all the parsing rules all over again into the ScanXXX functions , keeping both in sync, and trying to ensure that the appropriate results from scanning carry over to parsing. 

There is an alternative approach that can be taken, which we followed in TypeScript.  You can see that approach here:
https://github.com/Microsoft/TypeScript/blob/master/src/compiler/parser.ts#L1020  (example explained in more depth below).

Specifically, instead of actually having a separate scanning step, we just went ahead and tried the parse, passing in whatever flags were appropriate for the current parse context, and specifying what behavior we wanted if the parse ran into issues.  Effectively, with LanguageParser, this would just be using reset points, and asking to rollback once enough information was gleaned from the parse to determine that the wrong speculative path had been taken.

The concern with this approach was of course one of allocation cost.  i.e. would the cost of allocations be a hindrance to parsing speed.  In practice, we found that cost to be completely negligible in most cases, and easily worked around in the rare cases where it did impact.  Specifically, we found that the majority of code tends to follow a more common case, and that case should be what the speculative parsing code looks for first.  In the rare cases where that doesn't follow, usually a little lookahead (which is vastly less complex than the arbitrary 'scanning' subsystem that we have) can allow for a sensible direction to take.  And, when that doesn't suffice, you do just do the arbitrary parsing+rollback.

--

I only bring this up because i know how tricky it's been over time to try to get scanning+parsing to work with these more and more complex expression constructs.  While it would not be trivial to move off of scanning, I do think it would make for a vastly simpler system, and would actually pay dividends later as new language features would be easier to incorporate.

Anyways, just my 2c.  If you'd like to discuss this further (including offline, or not in this PR) I'm happy to assist.

--

Example: explained.  

Here's an example of how TS deals with the ```<``` ambiguity we also have in C#:

```c#
                    // See if this is the start of a generic invocation.  If so, consume it and
                    // keep checking for postfix expressions.  Otherwise, it's just a '<' that's
                    // part of an arithmetic expression.  Break out so we consume it higher in the
                    // stack.
                    const typeArguments = tryParse(parseTypeArgumentsInExpression);
...
        function parseTypeArgumentsInExpression() {
            if (!parseOptional(SyntaxKind.LessThanToken)) {
                return undefined;
            }

            const typeArguments = parseDelimitedList(ParsingContext.TypeArguments, parseType);
            if (!parseExpected(SyntaxKind.GreaterThanToken)) {
                // If it doesn't have the closing >  then it's definitely not an type argument list.
                return undefined;
            }

            // If we have a '<', then only parse this as a argument list if the type arguments
            // are complete and we have an open paren.  if we don't, rewind and return nothing.
            return typeArguments && canFollowTypeArgumentsInExpression()
                ? typeArguments
                : undefined;
        }
```

Here, there's no need for a separate ScanTypeArgumentList function.  TypeScript simply goes through and actually attempts the parse, easily falling back if it fails.  Because the logic is just in a single place, there aren't two codepaths to keep in sync.  Also, this code can be extremely flexible.  For example, we could have code like the above, but extend it so that if we see things like primitive types (i.e. int/string/etc.) in the delimited list, then we would always consider it a type argument list.  i.e. ```List<int>``` would always parse as a type-arg list, even though it isn't followed by something like ```(```.

Right now we accomplish that in the scanning phase, but it's extremely tricky to get right.  By moving it right into the parsing phase, we can do much richer analysis as we have the full tree up to that point (as well as any future tokens) to look at at make determinations.

--

In the end, everything can be done with ScanXXX.  But it really does add lots of complexity (esp. as expressions have gotten a lot more ambiguous).  Moving away from this into a simpler ""just do the parse and make the decisions based on how it's gone and what you can see coming up"" can make life much simpler and easier.

"
Wrong location for these tests.  Look for the more declarative FindReferencesTests written in VB. #Resolved
"Holllllyyy, I just merged latest rc2 into master and this went from 4 commits to ~60? Feels wrong but it seems correct?"
`Nullable<T>` is considered observably mutable if `T` is considered observably mutable. I'm going to add tests for this case with a clear message on each test if the user finds themselves changing the expected outcome it means they are doing something wrong.
"This still feels wrong.

---
In reply to: [238442273](https://github.com/dotnet/roslyn/pull/31499#discussion_r238442273) [](ancestors = 238442273)"
"Just did a simple experiment of creating a struct with a non-readonly field, serialising it to a file, marking the field and the struct as readonly and deserialising it; It appears to work fine without exceptions. Though, I haven't really used binary serialisation so I could be wrong."
"Ifdefing the body of the method with `DACCESS_COMPILE` makes it do a wrong thing for DAC build. It is not a desirable pattern that has been source of many subtle bugs. Better patterns are:

- Make the method compatible with DAC and have no ifdefs
- Or, ifdef out the whole method so that you can be sure that it is not used under DAC
- Or, make the method body call `DacNotImpl();`. This one is still not ideal because of the method is still not going to work when called under DAC, but at least the failure is easy to see and diagnose."
Nit: This comment is wrong. We got rid of the TLS lookaside cache a long time ago.
"Yeah, I really don't putting all of this inside the conditional. There's nothing wrong with an early return."
"We should add something along the lines of:

```csharp
if (otherType.IsByRef || otherType.IsPointer || otherType.IsFunctionPointer)
{
    return false;
}
```

Passing those to `CanCastTo` will cause an assert in `CanCastToInternal`. `CanCastTo` expects a boxable input. If we boxed a pointer, something is wrong."
"I think we should change this to return just the app name - so without the `.dll`. After all that's what the caller wants.
The assert is I think partially wrong - it can in theory happen that the file is not called `.exe` on windows, or that it will be called `.exe` on Linux - I can still make it run (I think - does CreateProcess block running something which is not called .exe?).

I actually think we should make this a runtime check and fail if it's not the case since we won't know what to do with it otherwise."
"It kind of sucks, but the only solution I can think of now is to use one of the ""dangerous"" APIs - like `Assembly.GetType` or maybe even better (more future proof) `Assembly.GetTypes` and effectively write the ""GetType"" functionality manually. Perf-wise this should not matter that much - especially if the result is cached (the above doesn't cache it, so it's pretty inefficient). Would obviously require suppress warning attributes as well.

I think the only ""correct"" solution is adding a public API which describes the intent - so something like `Type.GetTypeIfExists` (probably needs better name) which would intentionally be marked as 'trim friendly"" without any intrinsic handling in the linker."
"It feels to me that relying on IsImplicitlyDeclared to decide whether to include names is fragile and probably a wrong thing to do. It feels like that should be decided on whether explicit names were specified in the tuple type syntax used to ""create"" the tuple type. That is not the same as IsImplicitlyDeclared, or at least it is no longer the same. We probably should base the logic on a more specific API/information.

---
In reply to: [426687365](https://github.com/dotnet/roslyn/pull/44231#discussion_r426687365) [](ancestors = 426687365,426205983)"
From an infrastructure standpoint this is wrong as the `TargetFramework` property shouldn't be read outside the project file. Instead inferred properties like `TargetFrameworkVersion` and `TargetFrameworkIdentifier` should be used. If you already plan to move it then it's fine.
"> See TestAmbiguousOverridesRefOut in CodeGenOverridingAndHiding as changed in iteration 33. Depending on the order of the declarations, the override would change from being correct to incorrect or vice versa (both tested).

Correct me if I am wrong, but I believe the test is not using covariant returns and, therefore, cannot be affected by suggested changes.

---
In reply to: [446463069](https://github.com/dotnet/roslyn/pull/44025#discussion_r446463069) [](ancestors = 446463069,446461000,446458615,446453378,446450749,446444174,446418702,446416546,446413877,446358005,446321935)"
"It actually will shout at you if you use it wrong, but that would require us to hit a failure:

```
                WI_USAGE_ERROR_FORWARD(""CALLER BUG: Macro usage error detected.  GetLastError() does not have an error."");
```"
Seeing `Class` in code looks wrong as it's a keyword when lowercase. How about `CssClass` instead?
"you're not wrong, I just keep acting like i've never written code before. :smile:"
"i read it wrong 😅
Sorry to bother you

I've moved some test cases that are too short under ```//Too short``` .
you can check it here https://github.com/dotnet/runtime/commit/be80a667ccbb404a6be329ebd2404e033cddc0a8"
"Even the `Clone()` method appears to be wrong:

https://github.com/dotnet/runtime/blob/aa5fdab9654d74bc6274c0b5d820272c8e859621/src/libraries/System.Private.CoreLib/src/System/ICloneable.cs#L6-L9"
This seems wrong. It seems like we should rename `emitOutputSizeT` to `emitOutputTargetSizeT` and have it take a `target_ssize_t`.
"If the OS returns bogus buffer size, there is a high chance that something went horribly wrong and the buffer is filled with uninitialized data or there is a bad buffer overrun. Letting this method work on buffer with uninitialized data is the worst thing you can imagine.

> Diagnostics would be difficult especially in term getting a reliable repro for the issue.

You will be at least able to get a crash dump that captures the state of the process. If you ignore the problem, you will likely see some kind of corrupted data later and will have much harder time tracking it back to the root cause. "
"I'm just using the equality members generated by Resharper (because why keep the dozen things you can do wrong with equality members in your head when a robot can do it for you?).

In this case, Resharper chooses `Equals` over `==`, probably because `Spacing` is a `double` and Resharper generally warns against using `==` for floating-point numbers (because in _most_ cases what you really want is a comparison within a tolerance). So this avoids a (wrong in this case) warning from Resharper. 
"
"(I only half looked into this so I may be wrong) Don't we still want `_settings.GetProfileForArgs(newTerminalArgs)` because...
- the index may be out of bounds
- if the index is missing/invalid, we should fallback to the profile by name, then default profile"
"My indentation is correct, the ""old"" indentation is wrong :)"
"seems totally crazy to me.  but ok.  "
"Comment is wrong (copy-pasted from a different test). That said, please look at my comment here [https://github.com/dotnet/runtime/pull/48527#discussion_r588603078](https://github.com/dotnet/runtime/pull/48527#discussion_r588603078) as I don't think that you should be adding a trimming test at all for your case. It is fine to keep this locally while developing so that you can validate that BF stuff gets trimmed correctly, but the trimming test would not be really useful as it is not really testing correctness here."
"Yah I commented on rolf/chris's comments that I figured out I had the wrong project type so it was using system mono.  Fixing the project and using mobile as it was supposed to fixed those issues.

I could dfeinitely add it to apitest instead of a new project.  The one thing there is that right now it won't work for classic (lotta importws have to be fixed with #ifs to use MonoMac.Foo instead of  MonoTouch.Foo to get classic working"
"> Okay so
> 
> 1. this is insane
> 2. it adds 90 test cases, so that makes me 😄

255 now that I went through all of the positions 😉. AND I still need to add some for word navigation.

> 3. I don't really know powershell all that well, but the code seemed easy enough to follow, and was documented well enough that I wouldn't totally hate myself if I needed to add another case
> 4. this doesn't run automatically as part of the build, this has to be run manually. That definitely cuts down on some of the complexity, which is good. IMO generating the tests automagically as part of the build just ain't worth it.

Yeah, and we're not really changing these tests all the time. I did just add a ""nice to have"" where it all goes to a .g.cpp file though. So this process is now so much easier!

> 5. I'm not really going to inspect the veracity of the tests themselves. I'm gonna trust that you've done your diligence here. Manually inspecting 90 test cases probably isn't worth the time. Skimming them, they seem like they make sense.
> 6. There's a _lot_ of skipped tests, so helpfully we can fix those soon. Presumably, those are the ones that are failing currently. How did we come up with the test cases that are failing currently but shouldn't be? Just logically working out what they _should_ be doing? Was there some sort of reference app that you used to construct these cases? (this is merely a curiosity)

Updated the README to talk a bit more about this, actually. There's kinda two types of tests that we're skipping for now:
1. we're wrong: I used MS Word to test what the behavior should be and added them to the CSV file as `skip=false`. Then, when they fail in TAEF, I double check that I translated MS Word correctly.
2. for #6986: we'll need _a lot_ of tests to make sure this works correctly. The idea here is that anything past the ""document end"" will be treated as a degenerate range at document end. So this is gonna be a really nice transition where I'll just update the CSV appropriately and generate/run the tests."
"> > Note that it doesn't scroll when the content reaches the bottom - it just seems to clamp everything.
> 
> _wat_. Yep, I see that. Wonder what I did wrong here.

Hoy boy. Whatever it is, it's fixed in my `dev/migrie/b/3493-no-wrap-alt-buffer` branch for #3493. I wanted to keep that separate but maybe there's something in there that really _does_ need to be here. "
"Alright past me was smarter than current me.* It looks like we do correctly restore the original path casing in that scenario.

I've sent out another PR (https://github.com/dotnet/roslyn/pull/56490) and added more tests here, but those seem to pass. I'm stumped again.

(*I am reminded of the quote that ""debugging code is twice as hard as writing it; if you write code as cleverly as possible, you aren't smart enough to debug it""...although in this case I had hoped the code was as dumb as possible!)"
The PackageId is wrong: `System.Runtime.NumericsTestData`. It should instead be `System.Runtime.Numerics.TestData`.
this loop feels like it should be a separate method.  also this containing method feels like the name is wrong.  Perhaps GetBestCompletionItemBasedOnMRUFirstOtherwiseOnPriority
"```suggestion
                    else if (Directory.Exists(fileContainingDirectory) && Directory.GetFiles(fileContainingDirectory, searchPattern: ""*.UnitTests.dll"") is { Length: > 0 } matches)
```

crazy nit"
Actually I think I'm wrong. This has nothing to do with `ConstructAutoPropertyAccessorBody`. Will need to re-check things.
"IMO we should treat _pMatchedLength_ as a write-only pointer and should never attempt to read from it. The reason for this is that the memory contents are controlled by an entity outside of the native ICU code, and if there's a background thread mutating the contents of this memory while we're trying to use it, we could end up reading the wrong value and charge down an unexpected code path."
The `preview4` part here looks wrong to me too.
"We could.  I don't know that it would help with a lot.  In general the only folks that use the protected surface area of Regex/RegexRunner are ourselves, as part of the CompileToAssembly, RegexOptions.Compiled, and now the source generator.  Regardless of [Obsolete], if someone is using this surface area directly, they're probably doing something wrong :)"
"Name was wrong.
"
"Is there any guarantee that the first segment is the text segment, and that there's only one ever (the spec seems to imply that there is always at least ? Otherwise we may get here more than once or have a wrong offset. 

Also, what happens with the bias of data segments? Granted, this was already never considered if the first segment was always text."
"nit: since the remarks section contain a single paragraph there is most likely no need to use the `<para>` (@github please correct me if I am wrong)

```suggestion
        /// If this method is canceled via <paramref name=""cancellationToken""/>, some data
        /// that has been read from the current <see cref=""Stream""/> but not stored (by the
        /// <see cref=""StreamReader""/>) or returned (to the caller) may be lost.
```"
"Calling HasAnyErrors during initial binding is a bad idea, it resolves lazy diagnostics, which, if we do this too early, can cause cycles. Using it as a way of calculating HasErrors is also wrong because we should never mark nodes as bad because obsolete errors. Please go back to the original way of tracking HasErrors. We can talk more offline about when we should mark nodes with that flag.
"
"Yes.  Your code generation logic is wrong :)   As kevin mentioned, you should not be parenthesizing the whenNotNull portion.
"
"Nit - typo (""A non-generic a structure type"" -> ""A non-generic structure type"" unless I'm reading the comment wrong)"
"this code is so wrong.  but that's not your fault.
"
">Turns out EscapeUnescapeIri was not incrementing the index when escaping a surrogate pair. That led to the low surrogate being escaped again, producing wrong results 

Did the CI tests not detect this regression? If there weren't any tests for this condition, will you add new tests to verify the correct behavior to avoid future regressions?"
"> So this is wrong anyway. Example:

Not a supported scenario.  So i don't think we would care about this at all.  "
"@github I don't see any reason why ""Begin"" as a normal verb (not any sort of keyword) needs to capitalized. Probably it was just written wrong once and copied/pasted in all summaries."
"@github, I am the author of [@github/mutrait](https://www.npmjs.com/package/@github/mutrait), which enables stateful traits in JavaScript.  I'm trying to use what this PR enables in order to implement a similar thing in TypeScript, but I'm still not sure if the language's type system permits it.  I have a github repo demonstrating the issue at https://github.com/matthewadams/typescript-trait-test.

TL;DR: I'm basically trying to enable a simple way for folks to define traits & enable their classes to express them, like `class Person extends trait(Nameable) { ... }` (one trait) or `class Person extends traits(Nameable).with(HasParents).with(HasChildren).apply() { ... }` (multiple traits).  The traits provide default implementations of isolated functionality, and the goal is that classes expressing traits can override methods provided by the trait.

This leverages the subclass factory pattern you describe at the top of this issue, but attempts to do so in a way that allows a class to override functionality.  Your example illustrates that you can add functionality to a class, but you can't customize it easily because the subclass factory-created class _extends_ the class receiving the functionality, instead of the other way around.

This works fine in JavaScript using `@github/mutrait`, and we use it with great success.  I'm just having some trouble describing the typing correctly.  If you could have a look at my repo and tell me if I'm doing something wrong, or if TypeScript's typing system doesn't support what I'm trying to do, I'd appreciate it.

If you `git clone https://github.com/matthewadams/typescript-trait-test && cd typescript-trait-test && npm install && npm test`, you should see the following errors:

```
> typescript-trait-play@1.0.0 test /Users/matthewadams/dev/matthewadams/typescript-play/typescript-trait-play
> run-s build test:*


> typescript-trait-play@1.0.0 build /Users/matthewadams/dev/matthewadams/typescript-play/typescript-trait-play
> run-p build:*


> typescript-trait-play@1.0.0 build:main /Users/matthewadams/dev/matthewadams/typescript-play/typescript-trait-play
> tsc -p tsconfig.json


> typescript-trait-play@1.0.0 build:module /Users/matthewadams/dev/matthewadams/typescript-play/typescript-trait-play
> tsc -p tsconfig.module.json

src/index.ts:1:15 - error TS2307: Cannot find module './lib/async' or its corresponding type declarations.

1 export * from './lib/async';
                ~~~~~~~~~~~~~

src/index.ts:2:15 - error TS2307: Cannot find module './lib/number' or its corresponding type declarations.

2 export * from './lib/number';
                ~~~~~~~~~~~~~~

src/lib/traitify.spec.ts:11:19 - error TS2509: Base constructor return type 'S' is not an object type or intersection of object types with statically known members.

11     class extends superclass implements ITaggable {
                     ~~~~~~~~~~

src/lib/traitify.spec.ts:36:29 - error TS2345: Argument of type '<S>(superclass: Constructor<S>) => typeof (Anonymous class)' is not assignable to parameter of type 'Trait<unknown>'.
  Types of construct signatures are incompatible.
    Type 'new (...args: any[]) => Taggable<S>.(Anonymous class)' is not assignable to type 'new (...args: any[]) => S'.
      Type 'Taggable<S>.(Anonymous class)' is not assignable to type 'S'.
        'S' could be instantiated with an arbitrary type which could be unrelated to 'Taggable<S>.(Anonymous class)'.

36   class Point extends trait(Taggable) {
                               ~~~~~~~~

src/lib/traitify.spec.ts:50:9 - error TS2339: Property 'tag' does not exist on type 'Point'.

50   point.tag = 'hello';
           ~~~

src/lib/traitify.spec.ts:52:14 - error TS2339: Property 'tag' does not exist on type 'Point'.

52   t.is(point.tag, 'hello');
                ~~~

src/lib/traitify.spec.ts:53:24 - error TS2339: Property 'tag' does not exist on type 'Point'.

53   t.throws(() => point.tag = '');
                          ~~~

src/lib/traitify.spec.ts:59:43 - error TS2345: Argument of type '<S>(superclass: Constructor<S>) => typeof (Anonymous class)' is not assignable to parameter of type 'Trait<unknown>'.

59   class Sub extends superclass(Base).with(Taggable).apply() {
                                             ~~~~~~~~

src/lib/traitify.spec.ts:73:7 - error TS2339: Property 'tag' does not exist on type 'Sub'.

73   sub.tag = 'sub';
         ~~~

src/lib/traitify.spec.ts:75:12 - error TS2339: Property 'tag' does not exist on type 'Sub'.

75   t.is(sub.tag, 'sub');
              ~~~

src/lib/traitify.spec.ts:76:22 - error TS2339: Property 'tag' does not exist on type 'Sub'.

76   t.throws(() => sub.tag = 'throw');
                        ~~~


Found 11 errors.
```

Thanks in advance for this.  Because we leverage traits in many of our projects, this is preventing us from using TypeScript more often."
"The BCL ultimately calls the system APIs for things like socket communication and add a C# API on top of it.

The issue I described above is with the remote reverse server, _not_ the code in runtime itself.  This is effectively a test issue and not a product issue.  The runtime is doing the correct thing, but the ""correct"" thing is resulting in a hang because the system level APIs are not behaving.

I would not expect a well behaved reverse server to operate like this.  I would expect it to behave as you describe, i.e., create the socket once, bind to it, and manage the returned sockets from calls to `accept`.  This test is specifically designed to stress the polling and retry logic of the runtime in the presence of a misbehaving reverse server.  In other words, the test server is supposed to be doing the wrong thing and the runtime should be able to handle it.

The race I observed seems to be something unique to macOS and how the socket APIs behave.  I'd be curious to see if this behavior repros on other BSD based operating systems.  I would expect the BCL to fall prey to this same race on macOS since Syetm.Net.Sockets ultimately calls the same APIs as my C++/C# code is.  There isn't anything in the BCL that could prevent this since it has to do with the order that system level APIs are called and not the infrastructure (like the async engine) that the BCL adds on top of that."
"@github Comments from @github were only some renaming of tests and spacing, and discussion on certain doc comments. I tried to edit them from mobile, but hit the wrong buttons (it's really quite tricky to delete one line in a file).

He has some other concerns about the api, but I'd think we shouldn't revisit the api right now. Could you resolve any open stuff please? It's terrible to do from mobile ;). "
"```
##[error]node_modules/@github/plugin-rest-endpoint-methods/dist-types/generated/parameters-and-response-types.d.ts(961,60): error TS2339: Property 'GET /user/:migration_id/repositories' does not exist on type 'Endpoints'.
##[error]node_modules/@github/plugin-rest-endpoint-methods/dist-types/generated/parameters-and-response-types.d.ts(962,33): error TS2339: Property 'GET /user/:migration_id/repositories' does not exist on type 'Endpoints'.
##[error]node_modules/@github/plugin-paginate-rest/dist-types/generated/paginating-endpoints.d.ts(987,31): error TS2339: Property 'GET /user/:migration_id/repositories' does not exist on type 'Endpoints'.
##[error]node_modules/@github/plugin-paginate-rest/dist-types/generated/paginating-endpoints.d.ts(988,29): error TS2339: Property 'GET /user/:migration_id/repositories' does not exist on type 'Endpoints'.
```
seems something goes wrong.
Is it due to net connection? I thought the change would not cause this......."
"A bit of context: I can't run integration tests on my PC because of a weird error (`System.ArgumentException : Parameter is adjusted wrong. (Exception in HRESULT: 0x80070057 (E_INVALIDARG))`) and repeating actions of tests in my VS produce different results, so I need to guess what valid results are, even though I fully understand why they began to fail after my changes"
"> Maybe change `verify.completions` to allow dropping (or not ever verifying) `source` then? I guess it's needed to distinguish two otherwise-identical completions...

Yeah, it’s needed in order to call `getCompletionDetails` at all. I guess if there’s only completion matching the name, it could get it automatically. The good news is a while back I made it such that if you put the right name but the wrong source, the test error will tell you what the actual source is. So it’s a quicker path to success, at least."
"This PR does fix #46988 (that the type printed is wrong), but appears to do the opposite of what people are expecting on #47043, as it continues to treat the `const` keyword as part of the type so the semantic token will still be incorrect.

Note that hovering in VS Code doesn't behave this way; the Playground appears to have a different behavior and allows hovering on `const`, whereas VS Code does not."
"Oh, duh, I was in the wrong folder.

I guess that would turn into a message now, even though they are using it just for checking expected types. I wonder if this will cause oddities for the DT tests?"
what was wrong ? if I may ask.
"Tagging subscribers to this area: @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

!! This PR is a copy of mono/mono#20765,  please do not edit or review it in this repo !!<br/>Do not automatically approve this PR:<br/><br/>* Consider how the changes affect configurations in this repo,<br/>* Check effects on files that are not mirrored,<br/>* Identify test cases that may be needed in this repo.<br/><br/>!! Merge the PR only after the original PR is merged !!<br/><hr/><br/>https://github.com/mono/mono/issues/20763



<!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
-->


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>monojenkins</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-VM-meta-mono`, `mono-mirror`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

The Arcade.SDK already package refrences the ILLink package. The
duplicate reference in illink.targets caused SDK errors as the Arcade
reference has IsImplicitlyDefined set which doesn't allow an additional
reference with the same identity.

Also, as the ILLink package already exposes the path to the assembly via
its props file, using that instead of manually constructing the path to
the assembly.

The SDK target version update is required as the sequencing of the
ILLink.props file was wrong and is required for this change. This isn't
considered a breaking change, as the SDK's minimum required version
isn't changed.

Fixes https://github.com/dotnet/runtime

cc @github 

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>ViktorHofer</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>ViktorHofer</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Infrastructure`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>6.0.0</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

In ImmutableList.cs, just like ""IndexOf()"" and the last ""LastIndexOf()"" method, we don't need to do checks for list.Count generated by dotnet-robot, because when it equals to 0, it will return you -1 instead of throwing exceptions.

On the other hand, there's something wrong with the check:
https://github.com/dotnet/runtime/blob/84bad7e24589169975ec8a599743110d703c761b/src/libraries/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList.cs#L289-L292

In fact, when list.Count = 0, this already means we've no elements there, no need to check ""startIndex = 0"".

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>MaledongGit</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Collections`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"The version string is being used in the following places for wasm/workload testing:

1. https://github.com/dotnet/runtime/blob/release/6.0/eng/testing/tests.wasm.targets#L79
2. https://github.com/dotnet/runtime/blob/release/6.0/src/libraries/workloads-testing.targets#L92
3. https://github.com/dotnet/runtime/blob/release/6.0/src/tests/BuildWasmApps/Wasm.Build.Tests/Wasm.Build.Tests.csproj#L38-L39

The logs show that for all the 3 cases, the version string being used is `6.0.0-ci`, but IIUC, it should be `6.0.0`. Are we using the wrong property?

The current failure is being caused (2)."
"@github What do you mean by deprecating RIDs for linux? There is no single Linux we could use (yeah, the current naming is wrong) so different Linux distributions could be (e.g. due to different libc) incompatible."
"@github, correct. The apphost package (`microsoft.netcore.app.crossgen2.<platform>-<arch>.<version>.nupkg`) restored for crossgen2 on the `main` branch is using linux-x64 when we pass `-cross` or `-p:CrossBuild=true` to `./build.sh`. Which is incorrect when target is anything other than linux-x64. The crossgen2 tool used to cross build _during_ the build is correct (i.e. when `CrossBuild = true`, it should use CG2 built with host compatible apphost, rather than that of target's).

The reason why we don't see any error on main branch is because of the wrong `Crossgen2PackageRID` value which is fixed by first commit in this PR. With that fix, the FreeBSD CI leg started to fail during apphost package restore like this:

> .dotnet/sdk/6.0.100/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(129,5): error NETSDK1084: (NETCORE_ENGINEERING_TELEMETRY=Restore) There is no application host available for the specified RuntimeIdentifier 'freebsd-x64'.

The second commit disables crossgen2 project build on FreeBSD package generation in cross build mode. It was already partially disabled, but not properly excluded since the issue was hidden due to the said bug. When #66866 is resolved, we can enable it back."
"Using `LowLevelMonitor` actually solves the problem of this PR, but perhaps for a wrong reason. `LowLevelMonitor` is a reentrant lock and that allows nested `CreateThreadLocalCountObject`, it just creates a redundant `ThreadLocalNode` in a very rare scenario. Seems better than a deadlock though.

Reentering the type system may be a bigger concern, although it might be ok and even expected since typesystem might need to access itself recursively anyways."
Wrong namespace
"Not sure if this is totally supported since the image will have to be re-generated when the accessibility settings change. I think we have support for when the density/resolution changes, so this is not crazy."
Wrong comment.
"Right, this could work for MVC controllers, not for pages. It doesn't help with the case also where you put auth middleware somewhere crazy. "
"Perhaps I'm wrong or misunderstanding how things work but it was my understanding that without `volatile`, it's entirely possible for lines like this to be reordered by the CPU. The only way to guarantee that every core/thread will see `_constraintLogger` *definitely assigned* before `_logger` is would be locking or using `volatile` fields.

If this seems to fix the race, then maybe it's moot, but I don't know that we can **assert** strongly that the ordering issue is resolved by a change like this."
"Ya, you're wrong. :)

[This](https://github.com/neuecc/MessagePack-CSharp/blob/c7a4f10920aaea283106d2dc7a85a7f9038da25c/src/MessagePack/MessagePackBinary.cs#L1314) is the method you were calling before. See how the implementation checks the value of the integer and compresses the msgpack written out?

[This](https://github.com/neuecc/MessagePack-CSharp/blob/c7a4f10920aaea283106d2dc7a85a7f9038da25c/src/MessagePack/MessagePackBinary.cs#L1394) is the force 5 bytes behavior method from v1.8, which you were _not_ calling.

Now consider [v2.0's `Write(int)` method](https://github.com/neuecc/MessagePack-CSharp/blob/9ed868e36921eb27ce68400c3fa38f2a5e456a00/src/MessagePack.UnityClient/Assets/Scripts/MessagePack/MessagePackWriter.cs#L399) which compresses and [v2.0's `WriteInt32(int)`](https://github.com/neuecc/MessagePack-CSharp/blob/9ed868e36921eb27ce68400c3fa38f2a5e456a00/src/MessagePack.UnityClient/Assets/Scripts/MessagePack/MessagePackWriter.cs#L439) which does _not_ compress.

Therefore the equivalency table is:

| v1.x | v2.x |
|--|--|
| MessagePackBinary.WriteInt32 | MessagePackWriter.Write(int) |
| MessagePackBinary.WriteInt32ForceInt32Block | MessagePackWriter.WriteInt32 |"
"@github that is a fair point, but we'd probably only file NFWs for specific failures. For instance, if we can't find the requested service we would *not* file an NFW as that could be very much by design for a componentized, optional install model -- or just development error on the part of the caller. But if something infrastructural goes wrong (an internal error of ServiceHub) than ideally ServiceHub should file the NFW, I agree."
Or something else also went wrong...?
">/ (6,22): warning CS0028: 'Program.Main()' has the wrong signature to be an entry point [](start = 17, length = 87)

Please add a prototype comment to make this diagnostics more specific. #Closed"
"You found a bug, this `!` was wrong! Now we get to figure out why. I'll check where IProtocolErrorCodeFeature should be coming from and see why we thought it should have been there."
"Fogive me if I am asking in the wrong place, but I need to validate nested objects and can't find anything in the official docs, and all threads I find here have been closed or state that the work was completed in 3.1. I have 3.1 and don't seem to be able to validate nested object properties."
"> Could this issue be the cause instead?

It's possible but somewhat unlikely. The two property values I'm setting here were wrong for a small subset of the projects and mainly when we're using stable versions. We're not using stable versions (outside a servicing readiness exercise) for 5.0 yet. So, this PR should have minimal impact -- for now.

The main exception is if we needed the shared Fx or targeting pack version in a project using SemVer 1.0. So far, we're :ok: there.

So, @github's fix in your PR is on the right path. Any place we made assumptions that dotnet/runtime and dotnet/aspnetcore sharedFx or TFM and dotnet/aspnetcore sharedFx versions align is usually wrong."
"if we want to tell users what version data is created against, then we should use SolutionVersion instead of OpenSourceText.

if tagger wants accurate data, it should use what LB uses (http://index/?leftProject=Microsoft.CodeAnalysis.Features&leftSymbol=dvig2bzttnff&file=Diagnostics%5CIDiagnosticAnalyzerService.cs&line=36)

error list and tagger originally choose what it is using right now accepting data can be wrong but will be fixed up at the end. scarifying accuracy over performance. if we value accuracy more than we should move to API that supports that rather than hack around."
"@github Thanks very much for moving this forwards and continuing to refine it! Mostly this looks like really good stuff, but one aspect of the implementation makes me think we could refine it further. I suppose there are two aspects:

 * Trying to capture the `byte[]` instances in a context-specific way using unusual techniques like relying on non-nested invocations, the `Semaphore`, etc. This is kind of complex and subtle, and would at the very least need to get more complex still to handle nested invocations (which actually are a thing, since you can put a `[JsonConverter]` on any type and then put inside it custom logic which could in turn do JS interop or other serialization).
 * Passing the `byte[][]` parameters through all the various layers has a very noisy impact all over the API surface, and means this will always be a thing we have to allow for when doing any future maintenance on JS interop.

I think there could be an alternative way to capture and pass the `byte[]` instances that avoids both of these problems, plus is simpler overall. That is:

 * For the .NET-to-JS direction:
   * The `JSRuntime` base class could set up a single `ByteArrayJsonConverter` that, whenever it sees a `byte[]`, *immediately* gives it an incrementing ID and passes the `byte[]` to JS without tracking it anywhere in .NET memory, and uses the ID in the serialized JSON (e.g., `{ __dotNetByteArray: 123 }`).
   * For example, `JSRuntime` could have a new method like `protected virtual void SupplyByteArray(long id, byte[] data)`, whose default implementation just throws `NotSupportedException`
   * Each `JSRuntime` subclass can take care of getting the array over to JS and calling some new function inside `Microsoft.JSInterop.ts` like `DotNet.jsCallDispatcher.supplyByteArray(id: number, data: UInt8Array)`. The implementation of that function tracks the id/data pair in some `Map<number, UInt8Array>`.
   * Of course, when `Microsoft.JSInterop.ts` is later deserializing JSON, it can react to `{ __dotNetByteArray: 123 }` by removing the corresponding instance from the map and supplying it.
   * This naturally cleans up after itself *as long as .NET never throws during JSON serialization*. If it does, then the JS side might never remove some of these `Map` entries, but I don't think that's a big problem because (1) people shouldn't have exceptions during JSON serialization, and if they do, then normally the user's session will be terminated anyway, and (2) JS memory isn't as security-critical like .NET memory is for Blazor Server, and (3) if this ends up being a concern in the long run, we could set up some timer-based thing on the JS side to clean up any entries that haven't been consumed after some timeout.
 * For the JS-to-.NET direction, the exact same technique could be used, with a couple of minor variations.
   * `Microsoft.JSInterop.ts` would respond to seeing a `UInt8Array` by immediately calling some new function `DotNetCallDispatcher.supplyByteArray(index: number, data: UInt8Array)`. Each runtime platform would plug in some way of transporting the data and calling `DotNetDispatcher.SupplyByteArray` on the .NET side. Note that in this direction, the IDs can be call-specific indices (i.e., restarting at `0` for each call). This is safe because JS-side serialization is always singlethreaded, synchronous, and not-user-extensible, and is always synchronously followed by the actual invocation of .NET code, so we know there's always a continuous series of synchronous `supplyByteArray` calls that synchronously precede the `beginInvokeDotNet` or whatever it's called.
   * `DotNetDispatcher.SupplyByteArray` would track the incoming data in some `JSRuntime`-instance-specific `List<byte[]>`. For security, it would need to impose a rule that you can't supply too much data in total before the actual JS interop call that consumes the data. I'd recommend we have a rule that says the total byte length of all the `SupplyByteArray` calls cannot exceed the configured SignalR ""max message size"", just so there isn't an extra thing to configure.
   * Of course, the `JSRuntime` would also have a converter that sees incoming `{ __jsByteArray: 3 }`-type values and looks up the corresponding entry in the `List<byte[]>`. Finally, before dispatching the call into user code, it would empty out the `List<byte[]>` because we know it's now finished. It could also empty out that list each time it sees an incoming `index == 0`, in case any errors caused previous processes to be left incomplete.
   * The .NET side automatically keeps itself tidy and resilient to any leaks due to failure, because it never holds more bytes than ""max signalR message size"" and always empties the storage at the start of each new call. It doesn't have to worry about overlapping calls because that just isn't possible in this direction (the serialization and sending of messages is synchronous on the JS side). If it receives too much data, or out-of-order data, it can immediately just throw and let the circuit be torn down.

Sorry this was such a huge dump of ideas - just trying to be specific to avoid wasting any of your time. If any of it seems wrong, needs clarification, or you can think of any improvements, let me know! The main benefits of this kind of approach are that we avoid all the difficulties about threading/overlaps, plus we don't need to make any changes to the majority of the layers in the API (e.g., all the `BeginInvoke`/`EndInvoke`/etc method signatures wouldn't have to be changed at all). Does this make sense?"
Wrong direction
"❕ This is a collection initializer, not an object initializer (test is correct, but the method name here is wrong)"
Discussed offline and I was wrong here. I've updated the algorithm to handle it correctly: backwards jumps are now disallowed when the label and the using declaration are part of the same block.
"While the nameof was previously indented wrong, I liked the previous, chopped, style better.  This line now causes horizontal scrolling on the default github window width."
"I believe we had the reverse table, but I could be wrong."
"_resettableDelay makes sure that we at the end update status to correct value. _lastTimeReported make sure that we only update at least s_minimumInterval interval.

when an event stream comes in as below (assuming minimum interval is 200ms)

e1 -> (100ms)-> e2 -> (300ms)-> e3 -> (100ms) -> e4

actual status shown to users will be without _resettableDelay

e1 -> e3.

e2 and e4 will be skipped since internal is smaller than min interval. 

losing e2 is fine, but e4 is problematic since the user now sees the wrong status until the next event comes in. for example, it shows ""Evaluating"" when it is actually ""Paused"" until the next event.

what _resettableDelay does is making sure that if the next event doesn't come in within 200ms, it updates status to e4."
"I thought it wasn't necessary with global properties, since the only case which could have been impacted is if someone instantiates a `MSBuildWorkspace` with a `TargetFramework` property set to an empty string, which seemed wrong in the first place.

But I guess someone could instantiate `MSBuildWorkspace` with an empty `TargetFramework` but also a non-empty `TargetFrameworks` property to force a single-targeted project to use a different set of TFMs.

I can add some defensive code to handle this case.
"
"> If you think the trade off is a good one here then the correct course of action is to discuss the policy with the team. Not change it subtly in a PR. Particularly since this has come up several times before and we've kept the current order for these reasons.

Yup, this is just going into a feature branch. I had planned to send an email out before changing it in master. Can I leave a PROTOTYPE comment above and we can do that when I'm back in Seattle?

> Where is the issue tracking the feature request?

One thing we have to change for that is running our desktop tests as 64-bit by default. For the life of me I cannot figure out how to change that from 32-bit. I gave up after a couple hours.

https://github.com/OmniSharp/omnisharp-vscode/issues/1716 

> You aren't doing anything wrong. x86 debugging is not supported by the C# extension. You will need full Visual Studio for that.

Beyond that, I'm not sure what feature we would be asking for. Some way to change the framework the tests are run under? VS only got that a couple months ago, so it's not exactly something I'd put at the top of the VS Code priority list."
"Throw if type is null with some sort of ""couldn't bind type [blah]""? Makes debugging tests easier if you have a dumb typo."
"@github well, I think you linked wrong person, but I want to mention that es6 string templating will call toString automatically so your line can be shortened:
`${descriptor.resource}:${descriptor.etag}`"
"This looks like it's the wrong place, probably should be on the AnalyzerConfig type itself. #Resolved"
"I think so. Even if not, `keyword.control` seems wrong as it doesn't affect control flow."
">_property.RefCustomModifiers [](start = 77, length = 28)

This is definitely wrong for a setter. Also, it doesn't look like any any associated property can be ref returning. I think those cannot have setters and it looks like we always create both accessors. #Closed"
"The issue was about not using CYDRAG, not CYFRAME.

According to https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getsystemmetrics CYDRAG is:
> The number of pixels above and below a mouse-down point that the mouse pointer can move before a drag operation begins. This allows the user to click and release the mouse button easily without unintentionally starting a drag operation. If this value is negative, it is subtracted from above the mouse-down point and added below it. 

I think CYDRAG was the wrong metric. It has nothing to do with the window frame. What we want is probably CYSIZEFRAME (at least according to the doc):
>The thickness of the sizing border around the perimeter of a window that can be resized, in pixels. SM_CXSIZEFRAME is the width of the horizontal border, and SM_CYSIZEFRAME is the height of the vertical border. 
This value is the same as SM_CYFRAME.

CYSIZEFRAME is the same as CYFRAME. Maybe I should change CYFRAME to CYSIZEFRAME for more clarity?
**EDIT**: I changed CYFRAME to CYSIZEFRAME."
"I've been out of the til::point/size loop for a bit, so correct me if I'm wrong. Can't this throw if we get an overflow?"
"My first thought was that you were right, but now that I've had a chance to do some testing, I think that's probably wrong. Consider this test case:

    printf ""\ePq\e\e[41mRED\e[m\n""

We've started a DCS sequence, and got into the pass-through state. We receive one escape, which could be the start of an ST, but it's then followed by a second escape. At that point we're clearly aborting the DCS, but what happens next?

Going by the state diagram, I'd expect an escape to start an escape sequence from anywhere, so that second escape is just the start of a CSI which sets the background color to red (and that's what XTerm does). For that to work we can't include `DcsTermination` here."
wrong target branch.
"The error is a bit vague, but it looks like a merge gone wrong or something. If I look at the [commits tab](https://github.com/xamarin/Xamarin.Forms/pull/7518/commits) I see some from Shane in there. I guess that's not right? "
"Yeah i m not sure, and this doesn't really work tbh, I added a test for #9771 that sets the ItemsSource in a async fashion and gives me wrong results, I will keep looking better at this tomorrow. If you have any idea about this I will appreciate any help. Is like it seems there's a extra empty item in there"
"The factories are dumb types. I think this is much better than having to type
`RemoteDiagnosticAnalyzerService.RemoteDiagnosticAnalyzerServiceFactory`"
"yes, i've struggled a little with this github thing and ended up pulling it in the wrong branch, sorry."
"It looks correct to me and the event is getting piped through. I think there's something wrong here https://github.com/microsoft/vscode/blob/0a9cb852d8dd4f6c218396586edeefcbc04fd144/src/vs/platform/terminal/node/terminalProcess.ts#L353-L353

But it takes forever to make a custom build and test in WSL"
"> > > @github
> > > Thank you. But perhaps it's better to use a hash code?! I think creating and comparing with a hash is safer but slower.
> > 
> > 
> > I even posted the code for doing a hash comparison a while ago in the linked ticket 🙄 And we are using almost the same implementation and is working for quite a while now, even other devs adopted it.
> > Comparing only by length is lazy and unprofessional.
> > [#11843 (comment)](https://github.com/xamarin/Xamarin.Forms/issues/11843#issuecomment-810553390)
> 
> What is it doing in a comment and not a PR? That almost seems lazy and unprofessional...

Im happy to do your job (coding correct  Xamarin fixes) as soon as Microsoft is paying me for that.

At the moment I think it’s sufficient (for me) that I give you an adequate example (which even other developers were able to adopt).
And that you, who gets payed by MS with the significant of money people are paying for VS subscriptions are providing professional fixes.

But apparently I’m wrong with my assumption, as everybody can see at the desolate quality of Xamarin forms.
Cheers"
"Lookup via `GlobalizationResolveDllImport` should be conditional on `strcmp(new_scope, ""libSystem.Globalization.Native"")`, otherwise there is a chance of matching a method from a wrong lib if it happens to have the same name as one in Globalization. It is highly unlikely though.

Folding the `GlobalizationResolveDllImport` lookup into handling of `QCall` does not seem right though, especially since there are further plans for QCall code. 

I think I will just add the following:

```c
#if defined(ENABLE_NETCORE) && !defined(NO_GLOBALIZATION_SHIM)
	if (strcmp(new_scope, ""libSystem.Globalization.Native"") == 0) {
		const void* method_impl = GlobalizationResolveDllImport(new_import);
		if (method_impl)
		{
			return (gpointer)method_impl;
		}
	}
#endif
```
"
"To restate: this is an IDE cache we're adding into the compiler layer. The IDE has no direct, or even indirect, control over the lifetime or semantics of it. From a conceptual level that feels wrong. All the bugs here (cache too big, elements live too long, etc ...) will be IDE bugs and we'll end up fixing everything in the compiler. 

That is why my mind went back to the semantic model provider solution. It's putting the control, the policy, etc ... for an IDE cache in the hands of the IDE team. 

I'm not 100% set on this on a path forward but my feelings around compiler dictating IDE caches keep coming up. "
"Emacs isn't wrong, but I don't care enough to defend the position :) Changes applied (in 2 more places in addition to this)"
"This PR & associated issue confuse me.

See also? https://discord.com/channels/732297728826277939/732297837953679412/798366053033181195

What we have here is a fix for the build failure, but the fix *appears to me* to only be solving the *symptoms*.

The underlying condition doesn't make sense to me.

[This comment](https://github.com/xamarin/xamarin-android/pull/5477#issuecomment-756787120) suggests that the ""problem"" is that if `@(AndroidJavaLibrary)` contains an entry that contains `..\`, then the referenced file is *skipped*

> ```
> AndroidJavaLibraries
>     C:\Users\user\.nuget\packages\xamarin.androidx.annotation\1.1.0.8\buildTransitive\monoandroid90\..\..\jar\androidx.annotation.annotation.jar
> …
> ```

This is *bananas*.  *Even if true*, the inability to use `..\` to pull in associated resources is *wrong*, particularly in a world of multi-targeting!  Do we *want* to have a separate copy of `androidx.annotation.annotation.jar` *per Target Framework Moniker within the NuGet package*?  (No!)

Plus, I don't personally understand *how* it could be true: the `<CreateManagedLibraryResourceArchive/>` *copies* the contents of `@(AndroidJavaLibrary)` into `OutputDirectory`:

https://github.com/xamarin/xamarin-android/blob/597e7169b069eff781d8f29ddb7746b719d7f781/src/Xamarin.Android.Build.Tasks/Tasks/CreateManagedLibraryResourceArchive.cs#L93-L95

…except now I see how it *can* be true: line 95 has a [`Path.Combine()`](https://docs.microsoft.com/en-us/dotnet/api/system.io.path.combine?view=net-5.0#System_IO_Path_Combine_System_String_System_String_), which returns the *second parameter* if the second parameter is an absolute path.

In this case we *know* that the second parameter will be an absolute path, meaning line 95 is equivalent to:

```csharp
MonoAndroidHelper.CopyIfChanged (item.ItemSpec, item.ItemSpec);
```

which is a no-op; the file isn't copied.

Because the `@(AndroidJavaLibrary)` files are never copied into `OutputDirectory`, no files are added to `__AndroidLibraryProjects.__.zip`, and because no files are added, we get the MSB3375."
"Because the `ConvertFromInvariantString` method doesn't allow a `null` Type to be passed in, so it was wrong.

https://github.com/dotnet/runtime/blob/82ca681cbac89d813a3ce397e0c665e6c051ed67/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs#L819-L822

`GetConverter` calls `GetDescriptor` and `GetDescriptor` throws if `type` is null.

https://github.com/dotnet/runtime/blob/82ca681cbac89d813a3ce397e0c665e6c051ed67/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptor.cs#L902-L912"
"Hmm. I just had a dwm crash and now there are no entries in `HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\SessionInfo\1\VirtualDesktops`. So toCurrent is always resolving the current desktop as the _first_ desktop, which is wrong. hmmmm

2pm edit: thread is started with the shell team for the right way to query the current virtual desktop. 4f2de19 seems better, but still wrong."
I'm wrong.  for the interpreter we only need the ICU_DAT fix.  It otherwise works without the hardened runtime.
"`FileProvider` is the namespace my notation is wrong :) thanks!!
`FileProvider::NSFileProviderManager.GetPlaceholderUrl (NSUrl)`"
"If nothing else, I just realised while testing this that I got the `DECAC1` escape sequence wrong. It should be `ESC SP 7`, not `ESC SP 6`."
"I did not mean to close the PR, I did delete the branch in my fork since I didn’t need it any more. If that was wrong, I am surprised but many things about git and github have surprised me so perhaps I shouldn’t really be surprised.

Definitely not intentional to have closed the PR.

Did I have to leave the private branch around for some reason? I was dorking with the PR to properly mark it as closing the issue, maybe I messed that up?

Mike


From: Dustin L. Howett ***@***.***>
Sent: Wednesday, April 6, 2022 2:48 PM
To: microsoft/terminal ***@***.***>
Cc: Michael Grier ***@***.***>; State change ***@***.***>
Subject: Re: [microsoft/terminal] Fix retail build breaks with unreferenced locals (Closes #12769) (PR #12843)


Hey, it looks like you closed the PR and deleted the branch without it having merged! Was that intentional?

—
Reply to this email directly, view it on GitHub<https://github.com/microsoft/terminal/pull/12843#issuecomment-1090616686>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ACCHCVVDTCQOCO44PEVHGGDVDXL4VANCNFSM5SWTXHDA>.
You are receiving this because you modified the open/close state.Message ID: ***@***.******@***.***>>
"
"> The only impact this bug had on Windows Terminal is that the
font-size in HTML and RTF selection copies are too large.



i kept noticing that and it was rubbing me the wrong way every time"
This seems wrong #Closed
">foreach (var directiveNode in directiveNodes) [](http://example.com/codeflow?start=12&length=45)

I don't think we do this for `foreach`. Could be wrong, but I never encountered one #Closed"
"I can see why we would want to avoid infinite loops.   However, I think using the original timeout may be the wrong approach, in particular if the timeout is zero.   Any failure to acquire the guard is likely spurious (in particular as the same guard file is shared across multiple locks), so we should not give up on the first try.   What about just limiting the number of retries in LockGuard by some fixed constant (e.g. 100) instead?"
This whitespace here is really off. Did something go wrong?
"It would have been good to print what metrics are allowed, but it is not possible to get that information from `jit-analyze` . How does the error looks like if we pass wrong metric?"
"Short answer: Whenever in doubt it's better to assume `[No*]` if availability is not mentioned because it means no code will be generated (and it won't be a breaking change to add it later).

When you add (or modify) sharpie's output then it's good to add comments (for reviewers and people who will update the bindings... years later), e.g.

```csharp
[NoWatch][NoTV][NoMac] // availability not mentioned in the header files
```


Long answer

* Apple's macro are often incomplete or incorrect (e.g. wrong version)
  * Some (not all) gets fixed in newer betas or the next Xcode...
* There are assumptions like
  * old (pre 9.0) iOS API are assumed to be available on tvOS 9 (first version) unless decorated otherwise
  * old (pre 13) iOS API are assumed to be available on MacCatalyst 13 (first version) ...
  * enums are not always decorated since they are not API (you can see which API uses them to know which attributes are needed)
* Intro (runtime) and xtro (build time) will spot many, but not all, errors
* over time you get to know the API/framework and can identify things that looks unusual (and add tests to confirm your gut feelings)"
"Similarly, this seems wrong.  Today this:
```C#
using System;
using System.IO;
using System.Text;

class Program
{
    static void Main()
    {
        const string Path = @""tmp.txt"";
        File.Delete(Path);

        using (var fs = new FileStream(Path, FileMode.Append))
        {
            fs.Write(Encoding.ASCII.GetBytes(""hello""));
            fs.SetLength(1);
        }

        Console.WriteLine(File.ReadAllText(Path));
    }
}
```
prints
```
h
```
but it seems like this code will end up throwing."
The only way these exceptions can get called is if the method gets called with the wrong argument?
">_diagnostics = diagnostics; [](http://example.com/codeflow?start=12&length=27)

This is a wrong thig to do. We cannot cache BindingDiagnosticBag that is passed to the constructor. Someone else controls the lifetime of this bag. Since we are likely to return this bag back into the pool soon after the constructor returns, later on we will ""pollute"" this bag when someone else is using it. Quite possibly a different compilation.   #Closed"
The numbered comment is in the wrong location. #Closed
"It's been a long day!  After getting the source of bm.net and debugging, I realised after an hour that I hadn't passed the args to `Run` ! 
Passing the args to `Run` and it not-so-magically now picks up the `coreruns.exe`

The actual results are promising for the single 'what's the name of this process', but not so much for 'what's the name for all the processes that are running' .  I've attached the output - here's a summary:

``` ini

BenchmarkDotNet=v0.13.1, OS=Windows 10.0.22000
Intel Core i7-7700K CPU 4.20GHz (Kaby Lake), 1 CPU, 8 logical and 4 physical cores
.NET SDK=7.0.100-alpha.1.21467.19
  [Host]     : .NET 5.0.10 (5.0.1021.41214), X64 RyuJIT
  Job-PHMBVC : .NET 7.0.0 (42.42.42.42424), X64 RyuJIT
  Job-QYRPAK : .NET 7.0.0 (42.42.42.42424), X64 RyuJIT

IterationCount=15  LaunchCount=2  WarmupCount=10  

```
[ProcessBenchmarks.Benchmarks-report-github.md](https://github.com/dotnet/runtime/files/7307062/ProcessBenchmarks.Benchmarks-report-github.md)

|               Method |        Job |                                                                                                      Toolchain |         Mean |      Error |     StdDev | Ratio | RatioSD |    Gen 0 |   Gen 1 | Allocated |
|--------------------- |----------- |--------------------------------------------------------------------------------------------------------------- |-------------:|-----------:|-----------:|------:|--------:|---------:|--------:|----------:|
| NameOfCurrentProcess | Job-PHMBVC | main branch |  2,557.42 μs |  29.763 μs |  42.685 μs |  1.00 |    0.00 |        - |       - |   3,186 B |
| NameOfCurrentProcess | Job-QYRPAK |   pr branch |     43.64 μs |   0.834 μs |   1.248 μs |  0.02 |    0.00 |   0.1221 |       - |     672 B |
|                      |            |                                                                                                                |              |            |            |       |         |          |         |           |
|   NameOfAllProcesses | Job-PHMBVC | main branch |  2,822.10 μs |  30.387 μs |  44.541 μs |  1.00 |    0.00 | 113.2813 | 54.6875 | 648,170 B |
|   NameOfAllProcesses | Job-QYRPAK |   pr banch | 11,387.78 μs | 144.099 μs | 215.681 μs |  4.03 |    0.09 | 125.0000 | 62.5000 | 709,956 B |

I had some output in bm.net, maybe that has something to do with the poor results or the latter:

```
// * Hints *
Outliers
  Benchmarks.NameOfCurrentProcess: Toolchain=\runtime-main\artifacts\bin\testhost\net7.0-Windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\corerun.exe, IterationCount=15, LaunchCount=2, WarmupCount=10 -> Something went wrong with outliers: Size(WorkloadActual) = 30, Size(WorkloadActual/Outliers) = 0, Size(Result) = 28), OutlierMode = RemoveUpper
  Benchmarks.NameOfCurrentProcess: Toolchain=\runtime-pr\artifacts\bin\testhost\net7.0-Windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\corerun.exe, IterationCount=15, LaunchCount=2, WarmupCount=10   -> Something went wrong with outliers: Size(WorkloadActual) = 30, Size(WorkloadActual/Outliers) = 5, Size(Result) = 30), OutlierMode = RemoveUpper
  Benchmarks.NameOfAllProcesses: Toolchain=\runtime-main\artifacts\bin\testhost\net7.0-Windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\corerun.exe, IterationCount=15, LaunchCount=2, WarmupCount=10   -> Something went wrong with outliers: Size(WorkloadActual) = 30, Size(WorkloadActual/Outliers) = 0, Size(Result) = 29), OutlierMode = RemoveUpper
  Benchmarks.NameOfAllProcesses: Toolchain=\runtime-pr\artifacts\bin\testhost\net7.0-Windows-Release-x64\shared\Microsoft.NETCore.App\7.0.0\corerun.exe, IterationCount=15, LaunchCount=2, WarmupCount=10     -> Something went wrong with outliers: Size(WorkloadActual) = 30, Size(WorkloadActual/Outliers) = 2, Size(Result) = 30), OutlierMode = RemoveUpper

```

The benchmarks are literally just this:

``` cs
    [MemoryDiagnoser]
    public class Benchmarks
    {
        [Benchmark]
        public string NameOfCurrentProcess()
        {
            return Process.GetCurrentProcess().ProcessName;
        }

        [Benchmark]
        public List<string> NameOfAllProcesses()
        {
            return Process.GetProcesses().Select(p => p.ProcessName).ToList();
        }
    }
```"
"Well, ""all"" clearly isn't true, since when I merged them in I had some flat ones (notably the Stream-based files) and some split ones.  Apparently I chose the wrong way to normalize :wink:"
"Sorry folks, false alarm! I had the wrong version of Xcode hiding behind the right version name :/"
"As above, I was wrong 😄  but I recommend to use Timeout.InfiniteTimeSpan."
"Probably worth remembering that the original issue is specifically about the stdlib files (which generally shouldn't be editable), and not _all_ .d.ts files. Adding more props to declarations within your own project are fine - but adding props to a stdlib or node_modules sourced declaration is prooooobably wrong. Well, it's wrong unless the addition is done by making an augmentation in the current file 😛 "
The indentation here is wrong.
"This is public method that is presumably called by code outside this repo. It is trying to do argument validation and return `E_INVALIDARG` when the arguments are wrong. 

If the method is called with `flags: 0x10001`, it should return `E_INVALIDARG` and not assert."
"This is wrong on many levels.
"
"This was in-place construction of a struct. Now it is construct-and-copy. Something went wrong with object creation nodes.
"
"Is this moved from elsewhere? If not, I think it's wrong.

https://docs.microsoft.com/en-us/dotnet/api/system.invalidoperationexception?view=net-6.0

> The exception that is thrown when a method call is invalid for the object's current state.

or

> InvalidOperationException is used in cases when the failure to invoke a method is caused by reasons _**other than invalid arguments**_. Typically, it is thrown when the state of an object cannot support the method call.

(emphasis mine)

So InvalidOperationException is ""the node type isn't a string-supporting type"".  This is an exception about the content.  DecoderFallbackException is a very appropriate exception for that.  Or whatever the JSON reader throws for invalid JSON might also be valid.  But InvalidOperationException isn't (unless that was already its current behavior)"
"Please correct me if I am wrong @github @github. But the compiler binaries in this VSIX will move out into their own VSIX in a future change, correct?
"
Seems wrong. Filed https://github.com/microsoft/TypeScript/issues/41492 to track this
"This isn't a resource shown to the user is it?

This is far too complicated, and users will not know what they shoudl do here.  We should either:

1) Tell them something went wrong, and that they need to restart VS.
2) Handle this gracefully (reporting something to watson) and start the service back up again.

Users should not be in control of if things run in/out of proc.  If they do we open ourselves up to a testing matrix nightmare where we have to write our features to work in either context and we have to test all the permutations of htings running in/out of proc.
"
"This is wrong, but not something I would consider in scope for this PR. I will create a follow-up issue for `doSomething` getting dropped in the `.d.ts` output."
"I think our pattern is like ""PredefinedClassificationProviderNames"".  But i coudl be wrong about that.
"
">             Assert.Equal(""System.Runtime.CompilerServices.IsExternalInit"", property0.TypeWithAnnotations.CustomModifiers.Single().Modifier.ToTestDisplayString());

This is wrong, custom modifiers do not change position. If they were on the ref, they should stay on the ref. #Closed

---
Refers to: src/Compilers/CSharp/Test/Semantic/Semantics/InitOnlyMemberTests.cs:3067 in 7cce780. [](commit_id = 7cce7803bbbaccf7b4b6b64e02635505e42f1ce0, deletion_comment = False)"
"> What about the comment in the issue about AutoLog.. it was wrong?

I suspect that comment was talking about the test’s default not the system default."
"Can you turn this into an `else` and move the relevant checks to below? It's not clear exactly how things are being tested here and what they specifically correspond to, so I might be wrong.
"
"Ah, derp

On Fri, Jul 15, 2016, 5:54 PM Ryan Cavanaugh notifications@github.com
wrote:

> In tests/baselines/reference/asOpEmitParens.js
> https://github.com/Microsoft/TypeScript/pull/9767#discussion_r71057592:
> 
> > @@ -0,0 +1,19 @@
> > +//// [asOpEmitParens.ts]
> > +declare var x;
> > +// Must emit as (x + 1) \* 3
> > +(x + 1 as number) \* 3;
> 
> You're looking at the wrong part of the baseline (this is the original
> .ts). Its corresponding emitted line is 15
> 
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> https://github.com/Microsoft/TypeScript/pull/9767/files/40ca4a06b55d9493a7ed45bd92543a0a14a7ac3a#r71057592,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/ACzAMnkNN2tSPIQlLgSHEVrLTCD7tddLks5qWCvCgaJpZM4JN2j9
> .
"
"@github that's only on down-level OS's.  On Win10 we don't require it.  In 3.x we had [issues](https://github.com/dotnet/wpf/issues/37) related to this with regards to new WPF native components.  WPF is special due to the C++/CLI but they also had a dependency in the native components.  Pretty much any time we add a new native component to the stack we get this wrong and see a bunch of feedback from customers around this, so it'd be good to consider removing the dependency.  I can dig up some pointers.

Even taking .NETCore out of the picture, It's an anti-pattern to have a NuGet package with a pre-requisite on a machine-wide install.  If possible that should be avoided.  

To be clear, I am fine with this change, but I think the ICU build should consider building in a way similar to the rest of .NETCore native binaries so as to not introduce new dependencies."
"I can't figure out what is wrong with fp-ts -- it fails on 3.8 and fails even when I go back to an fp-ts commit from Feb 4. I guess we weren't reporting this before somehow. 

The actual error seems like a straightforward failure in inference:

```ts
export function getOption<A>(arb: fc.Arbitrary<A>): fc.Arbitrary<Option<A>> {
  return fc.oneof(getNone(), getSome(arb))
}
```

In which `getNone(): fc.Arbitrary<Option<unknown>>` but the author desired it to be `getNone(): fc.Arbitrary<Option<A>>` to match the type of `getSome(arb): fc.Arbitrary<Option<A>>`. Adding an explicit type argument is a workaround: `getNone<A>()`.

@github you might be interested in this: the code in question is in test/property-test/Option.ts"
"I re-read #38162 and the preceding bugs. The core problem is that that `in`-narrowing is guaranteed to be wrong a lot in the most common use case (optional properties), regardless of whether it's in an intersection. Without `missing` in the type system, we're just choosing whether to be wrong-strict or wrong-permissive.

Switching between the two is (1) probably not possible or worthwhile because of backward compatibility (2) a separate issue from making the feature work with intersections. I think this PR is ready to go as-is."
"@github I can see that coreclr, libraries and installer builds for arm musl have succeeded, but library tests are failing early with this error:
```
./RunTests.sh: line 161: /root/helix/work/correlation/dotnet: No such file or directory
```
Do you have any idea what can be wrong? Is it possible that it is some kind of chicken and egg issue?

One of the test logs is here:
https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-41982-merge-16b4c390e366456f83/Microsoft.Extensions.Configuration.CommandLine.Tests/console.d3067d68.log?sv=2019-02-02&se=2020-09-29T18%3A12%3A23Z&sr=c&sp=rl&sig=33ZU3C7EONbfYcvMy4tH4rS0g0dk6dFogdTW56XQMps%3D
"
"Hey @github, something went wrong when looking for the build artifact. ([You can check the log here](https://typescript.visualstudio.com/TypeScript/_build/index?buildId=97535&_a=summary))."
"So the tests used to call the unpatched writeFile and that was always wrong? They were, apparently, doing this because the assert was too strict?"
"Hmm, I guess you're probably right that in the local case (within version bubble) the verification of absolute field offset is sufficient. On the other hand, the base class - derived class boundary turns out to be a super productive bug farm, I have been poring over the code for more than a week by now and I still cannot claim I exactly know what's happening in each situation, especially as there are multiple code paths involved for explicit / sequential / auto layouts for reference types vs. value types with side fun regarding the ARM32 offset bias. As I believe that ""usefulness"" of this fixup is basically preventively diagnostic (we detect upfront that we got it wrong), I tend to believe that the base field offset calculation does constitute a value worth validating (in the intra-bubble scenario) as getting that wrong indicates a potentially critical bug in our implementation."
"ARM64: 0 of 156 iOS-passing test suites pass
x64: 110 of 156 iOS-passing test suites pass

What's wrong with arm64......"
"Tagging subscribers to this area: @github/ncl
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

There is currently a wrong operand order in the subtraction.

Fixes #43877

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>alnikola</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Net.Http`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
Wrong destination branch.
"I did more testing on macOS and verified that it gets both: not enough entries and too many.

Because of the wrong estimation on count, we return fewer items than we should. It can get worse as we check provided buffer size agains lover number but then we iterate  through all returned items, possibly writing to random memory. 

Now, we also return too many items. The sysctl returns all UDP sockets even not binded and/or connected. 
I added simple check to weed that down. It is imprecise as there is really not ""listening"" state on UDP. 
But I tested the outcome and compared to `netstat` on both platforms and it looks reasonable.
Returning 
something like:
```
  0.0.0.0:50902
  0.0.0.0:51333
  0.0.0.0:50678
  0.0.0.0:63608
  0.0.0.0:50378
  0.0.0.0:49837
  0.0.0.0:65049
  0.0.0.0:59481
  0.0.0.0:3722
  0.0.0.0:51719
  [::]:5353
  0.0.0.0:5353
  0.0.0.0:138
  0.0.0.0:137
```
and ignoring entries `netstat` shows as 
```
udp4       0      0  172.20.20.103.57494    71.33.34.13.443
udp4       0      0  *.*                    *.*
udp4       0      0  *.*                    *.*
``` 

"
"@github/ncl PTAL

The change boils down to adding a `lock` when:
- The values in `HeaderStoreItemInfo` are being parsed (so its fields are being modified)
- The values are read from `HeaderStoreItemInfo` (non-validated reads / copying to a new header collection).

---

Since a value entry can transition from being a `string` to a `HeaderStoreItemInfo`, and we're not locking at those sites, it is expected that a single raw value may end up being parsed multiple times.
Such parsing is idempotent, so this is transparent to the user.

The code also has to be careful when reading the value of a given entry.
For example, the following logic would be problematic:
```c#
if (entries[i].Value is HeaderStoreItemInfo)
{
    // ...
}
else
{
    DoSomething((string)entries[i].Value); // Wrong! The value may now be HeaderStoreItemInfo
}
```
and it should instead be something like
```c#
object value = entries[i].Value;
if (value is HeaderStoreItemInfo)
{
    // ...
}
else
{
    DoSomething((string)value);
}
```

I've looked through our current code to make sure this is the case, but it's possible future changes may accidentally break this. I've added a test that should catch most such mistakes, but there may be cases that aren't covered."
"I removed this from the regular MAUI template because:

1. I don't even see it used
2. It seems wrong anyway because the 'replaces' text below doesn't seem to make sense

If I've misunderstood this, I will happily add it back. (And also add it to the Blazor template.)"
"I made the two constructors internal because I'm not aware of a reason for them to be public. It's used across all the supported platforms via shared source.

If I'm wrong, I'm happy to change this back. However we've changed the parameter list several times now, so it suggests we'll keep changing it in the future, and maintaining back-compat if it's a public API could become very messy."
"Also to make the context for this more clear: This API is used to generate view transform information. All of the methods that call it are internal, and it's used by XAML Hot Reload. 

If the math is still wrong (which I don't _think_ it is) it shouldn't affect any users applications, since nothing MAUI specific actually touches this."
"My personal preference would be *not* to have this overload, and thus require people to specify the `selector` argument explicitly. Reasoning:

1. If people don't realise we are inferring a selector, they will get the wrong impression about how the DOM gets populated. They will probably think that `<app>` in their `Index.cshtml` is actually a usage of a Razor Component, since it is almost the same syntax.
2. Pretty soon we'll probably change `Index.cshtml` so that the `<app>` goes inside some kind of container, or maybe `<app>` remains as the container but we change the name of the root component from `App` to `Root` or something. This is going to be needed so that `<app>` remains in the output so we know where to inject the client-rendered content to replace the server-prerendered content. At this point, you'd have to specify `selector` anyway and the existence of the other overload would primarily just be a way of getting confused.

@github If you feel strongly about keeping the overload without `selector`, then so be it, but my preference would be to drop it."
This logic *could* be moved to ValidateRequest but it felt wrong to do it there. I'm fine either way..
Is there any way this could be determined automatically based on the rendermode on the `<component>` tag? Would be nice if we could avoid the risk of customers picking the wrong option and getting confused.
"I was wrong about this instance being shared, but I've found a few more shared that I'll flag."
We could go crazy here and make figure out the suggestion based on the context (you could even do a codefix).
"A reasonable suggestion given that's what we did before.

But, the intent can be made more obvious by excluding all of `$(RuntimeTransportReferenceDirectory)*.dll` instead of the `@(_ReferencedRuntimeRefAssemblies)` subset. The double-exclusion just looks wrong and that's why I wanted to remove it. Will try my approach and fall back to your suggestion if that fails."
"StatusCodePagesFeature is a public class, so if we were to change it, we'd have to make it continue to work as it does today when called with the empty constructor. I think it might be worthwhile to just use a new internal IStatusCodePagesFeature that lazily reads the endpoint.

The only thing I don't like is locking in the wrong value for Enabled if the property is read before UseRouting(). You could definitely argue it's no worse than today where it's locked in immediately when the feature is added, but that feels a little less surprising. I wonder if it'd be better to avoid negative caching unless the property is explicitly set, but maybe that's even more surprising."
"The codefix updates the shipping file as intended. For some reason our team insists it is wrong thing to do: https://github.com/dotnet/aspnetcore/pull/31076#discussion_r598208196 even those these files exist solely for the benefit of the tool. 🤷🏽 "
Name sits wrong with me. Think it would read better as matching the option name. Say: `EnablePEVerifyCompat` #Resolved
"As I understand it, all writes preceding a compare-exchange are required to be flushed beforehand. This is a much stronger memory model that provided by Java.

If you believe that is wrong, can you please provide a reference? #Resolved"
">return new TupleFieldSymbol(tupleType, (FieldSymbol)AsMemberOfType(underlyingType, ((TupleFieldSymbol)symbol).UnderlyingField), index); [](start = 24, length = 135)

This feels very wrong, Tuple members are cached and we should not be creating duplicates, especially that we might get this wrong here, or some changes to tuple implementation will have to be now made in multiple places. I think we need to find a way to get the symbol from the TupleTypeSymbol. For example, there is a GetTupleMemberSymbolForUnderlyingMember API etc. #Closed"
"We've verified that F# and TypeScript, both of which also used this feed, aren't using it anymore? In that case, I'm OK with it.

(I'm seeing many wrong statements on this thread which assumed only VS for Mac's repo was pointed to it. That was most definitely not the case. :smile:)"
This translation is wrong. It mentions type of the field rather than field in a type. Very misleading.
nit.  my preference would be that we just use a SymbolDisplayFormat here.  But i may be wrong given that you're using the .MetadataName.  Is that necessary?  can you document why?
What if `[EnumeratorCancellation]` is applied to the wrong parameter? #Closed
"Ah, never mind, that's not visible here. I was looking at the wrong API. In that case we can probably ignore the resource stream."
If I'm not wrong this can introduce memory corruption in case we return dynamic value which is deleted later. What is your opinion?
"@github this is wrong, the way `Darwin` is used in CMake means that it really means OSX/macOS. We should revert this change and rename `CLR_CMAKE_HOST_DARWIN` to `CLR_CMAKE_HOST_OSX`"
">so [](start = 32, length = 2)

what happen when we don't have version? this extension will be wrong, right?"
"I wouldn't do the ""first one that works"", since that arguably requires an N*M matching to find sanity.

Any of

* First with any known key label (will then fail if the wrong algorithm's algorithm-specific key is first)
* Only key with any known key label (fail if there's a second one of any kind)
* First applicable
* Only applicable

seem fine to me.  So really it's just ""for keys alone it was only-applicable, for cert+key it's first-applicable/first-applicable"".

Since the X509Certificate2 ctor will load the first applicable thing out of a multi-PEM, first-applicable/first-applicable might make more sense here in these classes... I'm just making sure it's something we thought about instead of something we just ended up with."
"And it could totally be wrong... Not sure. CC @github "
"Yes, this is incorrectly assigning the wrong constant value number.  I found similar code 
It was occasionally happening in the framework dlls and the the beq_r8 test cases.
Our code has two chances to fold the expression, the first one will fold compares with two constant arguments,
which is the common case.  If that doesn't fold then it tries folding using the value numbers and that path was wrong and caused the beq_r8 tests to fail with my CSE changes.
"
"Actually, out of curiosity, why was this needed at all? seems to me like `AddRef`'ing is _usually_ wrong, but I don't know enough about how that code works to know why we needed it in the first place"
"whoa whoa whoa that was dumb of me
thanks!"
"I don't think it could unless something went wrong, that's just a sanity check to make sure we don't throw in that case."
"wrong name. must be `onWillSaveTextDocument`
"
"I decided to change these to more direct state modifications because event assignment is more limited in what it can operate on. For example the LHS of an event assignment must be an lvalue, so it can't be a conditional-access expression like `x?.y += SomeDelegate`.

If this feels wrong from a coding patterns POV we can change this to use the LearnFromNullTest/LearnFromNonNullTest or some other more appropriate helpers that I may have overlooked in NullableWalker."
"The problem with #25570 was the removal of all the other fonts, caused by [Chromium bug 724393](https://bugs.chromium.org/p/chromium/issues/detail?id=724393) which is marked as wontfix. That's why I kept the old font stack after `system-ui` — it was cited as the fix for that issue in #26912.

I'm fine with limiting this change to Linux since that's where it affects me, but it's nice to be consistent across platforms in case someone wants to change the system font on another OS. Even without a custom system font, using `system-ui` on Windows helps fix the wrong font being used for Latin characters if the language is set to Chinese, as I demonstrated above.

I suspect there are probably similar cases of this fixing incorrect fonts with other languages and possibly even on macOS, though I haven't tested that."
"Hmm, I'm somewhat confused here - you're disabling the test on x86 yet you changed the <code>Size</code> of the <code>StructLayout</code> attribute on <code>ExplicitlySizedStructAuto</code> - does that mean that the previous value was wrong or is the change from 0x14 to 0x18 supposed to be more stressful? I don't think it's a big deal, it just comes as a surprise why you need to modify a test you're disabling for the ""new x86 scenario"" you're adding."
"the construction of this sentence will be wrong in most languages.

There is no general sentence structure that can support ""Move focus left"" and ""Move focus previous"" at the same time. Especially not in another language, right?

This is different from how we handled other commands, where we said (something like) `Move focus: direction=previous`. That looks like a straight parameter substitution.

This is different . . . it needs its own complete command string, ""Move focus to last-used pane"" or something."
"> not sure whether it is going to work for proc file system.

This is a good point. I just realized that during ""reading the stream and counting the length, allocating, then re-reading from pos:0"" the data might get overwritten by the OS and we may end up with wrong size. If that is the case, in order to avoid it, we would still need to maintain the loop-until structure. I am not sure if /proc/[pid]/* files can be read atomically, but with current implementation the risk seems to be lower."
"Ok, please try building and debugging VS Code locally to see what may be going wrong"
"this might be dumb, but maybe we should have some sort of typedef / alias for `size_t` here, to make it clear that these are `CommandId`s or something?"
"So the previous comment (which you actually reviewed iirc :P) was wrong? That's fine. I just don't think a name like `IsRootBuffer` is meaningful to intent. Instead it just tells me what the line of code is, and acts like a needless comment. The intent of the code was to check that we weren't performing these actions on the interactive window. Again, is there a better way to check that we're in the interactive window? "
"I don't see why this would fix the mentioned issue. Can you add some comments to this PR?

Maybe the referenced issue number is wrong?"
"Hey @github 

My apologies if this is a dumb question. When do you plan on releasing a xamarin forms update with this issue fixed? Is there any way that I can test?

Thank you"
">ScanTypeFlags.GenericTypeOrExpression or ScanTypeFlags.GenericTypeOrMethod [](start = 43, length = 74)

Do we ever hit these cases? It doesn't feel right to set isAlias to true for them even if the current token is ```::```. It feels wrong to return ScanTypeFlags.AliasQualifiedName for ```A<B>::C```. When we parse this as a local type, we do not create AliasQualifiedName. #Closed"
"@github I'm okay with placing the cursor elsewhere, but I think doing it syntactically seems easier. 
What's wrong with just recognizing the different kinds of methods, lambdas and local functions? #Resolved"
"Crazy idea.... 

How about we skip all of the fastdev stuff (e.g GetPrimaryCpuAdi etc) when we do the publish work flow? If the intention there is to only produce a release package I'm sure there are a ton of targets we can just not run in that scenario. 

"
"That's a good point. I suppose I thought `launchMode` was a good example of a property whos value already made initalPosition ignored, but I guess I'm wrong about that.

So `initialPosition`+`centered:true` is ""I want it to be centered _on this monitor_"", and that makes sense to me"
"If you show the warning after (successfully) loading the assembly without debug symbols, you won't end up showing the warning if there's something else wrong with the assembly (in which case it would be confusing)."
"This looks wrong, this target does nothing? If so, it can be removed."
"Correct me if I am wrong regarding why the check for `!isValidVectorIndex` is needed. 
If we are past the importer phase (where the JIT checks for validity of `indexOp` and `inde
xOp` was not const at that time) but later it became constant (say after constant propagation) we will still generate code for checking the value of `indexOp` validity during running time and presumably this should abort the execution if the value was out of range."
wrong `nameof`
"> Adding test SemanticModelOnReceiver (looks good)

I debugged through the test. It looks to me that we definitely need to follow up on this. Since nothing appears to be obviously broken, a separate PR should be fine. Here is what is going wrong. As I suspected, we do not cache node for the receiver when we bind statement containing the element access. Therefore, we don't find a bound node for it on the first attempt. So we bind the containing statement again and still don't find the corresponding bound node in the map. Then we go into an error recovery mode and bind the receiver on its own. Besides utilizing the error recovery mode, we end up with a map that is inconsistent. For the containing element access we have a bound node that uses different node for the receiver. That is likely to create problems, if not today, then in the future.   "
Coding style is wrong in this function.
"That tools looks pretty amazing!

Its mere existence makes me vote towards having the templates use our own coding style (in which case the coding style is wrong in some of the new files - I guess you could run `dotnet format` locally in the template directory and that'll fix it 😄 )

"
A bunch of types were in the wrong namespaces.  Fixed that up as part of this PR.
"Is this needed? If so, I am not sure this is correct because it is a ""move constructor"" so resetting the value to `1` seems wrong."
"Ah oops, I got the order wrong when I checked the failure"
"I noticed that we have the wrong opcode for this and compensate for it in the emitter for some reason, so I have fixed this as well."
"Did you remove the wrong rule? CA1813 exists in this list below.
"
"What do you think about returning `string?` here and adding `!` in the callers where we know it's going to be non-null?   It feels wrong to say we never return NULL here when it's actually pretty common for CodeBase to be null on wasm, for example."
"This change doesn't feel right. The bound node is associated with a particular syntax, that syntax should be used to cache the node. If the node is associated with wrong syntax, it would be better to change binding to use the right syntax for the node. 
"
"I was just thinking about it in the wrong way, I was basically thinking about:
```c#
partial class A
{
    public static partial global::System.Text.RegularExpressions.Regex MyRegex() => GeneratedClassForA.Instance;
}

partial class B
{
    public static partial global::System.Text.RegularExpressions.Regex MyRegex() => GeneratedClassForB.Instance;
}
```

But I now understand that the Generated class that holds the types with the instances is the same for all regexes, and the name of those inner types are just the method name without includding original containing type name (in my example, `A` or `B`)"
"The comment is wrong, the type for `TNext` is inferred from the iterator of `[]`."
"i personally hate optional parameters in our internal APIs.  Because now it's not clear to me at the callsite that we're depending on default values, and it's too simple too accidently get the wrong behavior.  Can you make these required?
"
"it's wrong either way. this should be an unsigned comparison.  

The type of `table_info_get_rows` should be changed to `uint32_t`, I think. (I'm not sure what I was thinking when i made it `int`. sorry about that)"
"I had tried to follow your recomendations up and It seemed like working well, but then I did SPMI replay and it highlighted an assertion failure. I'm stuck with it and can't figure out why it keeps showing up. The issue is:
`Assertion failed 'OperIs(GT_NOP, GT_CALL, GT_COMMA) || OperIsCompare() || OperIsLong() || OperIsSimdOrHWintrinsic() || IsCnsVec()' in 'BlockingConfig:.cctor()' during 'Lowering nodeinfo' (IL size 251; hash 0x0bf431ba; Tier0)`
It goes away if I exclude TYP_SHORT from the optimization. Is there any way to force JitDump or anything helpfull for debugging during spmi replays? 
I would love to learn how you debug such replay failures and figure out what is wrong with the new code :) "
"I'm probably approaching this the wrong way, but how do I remove all nodes in one sequence of nodes and add a series of nodes in the position of the first node in the sequence of removed nodes?
"
"I see that this is a pattern copied from ILLink so I don't expect it to be fixed here, but I'm not a big fan of code handling impossible states. They tend to hide bugs and make root causing bugs a lot harder.

Two things here:
* We ""handle"" situation when `Nullable<T>` doesn't have exactly one generic argument.
* We ""handle"" when the instantiation argument is something bogus (null) - by unnecessarily using a non-exhaustive switch instead of a simple if/else.

I see this pattern in many places so I'm not going to comment on them, but it's something worth re-evaluating in the linker repo. Code that crashes when it hits invalid state is a lot easier to work with than code that papers over it and then crashes later (or worse - produces invalid outputs). We have zero test coverage for this invalid state handling.

A lot of the invalid state handling (not this one in particular) also seems to be forced by nullable reference types - I assume it wasn't easy to make something non-null so now we have code handling an impossible null scenario. Honesly, I would prefer hitting a NullReferenceException. Those exceptions are super easy to debug and often can be debugged from nothing but a stack trace. Complex code taking wrong turns is everything but easy to debug.

In the maxim ""if I can't cover a branch in testing, the branch shouldn't exist"". The null propagating operator `?.` is a branch too. We use them very liberally in this codebase. Many of those uses look as questionable as the question mark."
Seems like the tests are in the wrong file? This is not testing `DefaultJsonTypeInfoResolver`.
"I sort of misspoke, it'd still be in the function you just edited because that's the one that's checking a class declaration, it's just that you need to check for other wrong parent node types. Or, the other way around in that maybe the fix is to error if the parent is not a block or something."
"Actually, this check is wrong and the tests reflect that. Should it be

```suggestion
                        if ((moduleKind !== ModuleKind.ES2022 && moduleKind !== ModuleKind.ESNext && moduleKind !== ModuleKind.System && !(moduleKind < ModuleKind.Node16 && getSourceFileOfNode(node).impliedNodeFormat === ModuleKind.ESNext)) || languageVersion < ScriptTarget.ES2017) {
```"
"1. I don't see anything wrong with the integration with my changes.
2. You did however miss handling the logic in `FilterNamedIntrinsicMethodAttribs` in zapinfo.cpp. That will have some effect on the crossgen of System.Private.CoreLib, but I wouldn't expect it to actually break things, just to make applications run inexplicably slower than necessary."
"This question is apparently relevant to the OOMing test, because apparently variance probing in _one_ direction was working, because there were no baseline changes and no OOMing when I restricted my change to _both_ directions being unmeasurable. But, it feels like that must mean our analysis of the assignability in that test is either wrong, or only coincidentally right. Because what the current state of my PR is showing us is that at least one direction of variance probing on these types is inconclusive, but we’ve previously believed we know what the variance is, and were using that instead of structural comparisons to decide the assignability of `List<T>` to `List<U>`. That _must_ mean we have a bug, right? (Well, we obviously do because it’s mentioned in [varianceMeasurements.errors.txt](https://github.com/microsoft/TypeScript/pull/45578/files/8194a58d5064a451f6634836cf161668c33cd38d#diff-05d57eee4d438086a29ea51e2d54ce88839536d53e66e9ded8e3edc80e4a0004)—I assume that’s the bug I’m describing)."
"Hmm. I had tested that the build had ran, but I wonder if something else broke. I'll look at my build to see which libclrjit was used.

For the crossgen issue, I wonder if it generated armhf code. On most armv7 systems, that will compile and run, other then the fact interop code will receive parameters in the wrong spot. Console.WriteLine likely ends up being a native call, so this wouldn't shock me. "
as expected x86 does not use it currently and x64 uses only for simd16. The types were wrong for x64 but they were not used.
"This seems wrong, I think you only need to invert once."
"Between here and the Interlocked.Exchange below, it is possible for you to have multiple threads executing the code in this region.  I assume that's ok?  I can't think of anything that could go wrong as a result, but wanted to highlight it."
"I'm not a fan of these unit tests, in my opinion they are testing the wrong thing. 

Why not check that correct data is written to the stream when calling GetMemory() - Advance() multiple times?"
"There is a high chance that this condition can be improved. I've somewhat constructed it based on my intuition - maybe it's plain wrong. I was also unsure if I should use `filteredByApplicability` as a source here, or maybe that should be `indexingType`, or maybe even something else. Both of those still contain references to a generic `K` and maybe this is not what we want here or maybe this creates more work further down the road. So perhaps we should use a completely concrete source in this check (`'*'` in this case).

Apart from that this PR at the moment is causing 2 baselines changes:
<details>
<summary>diff</summary>

```diff
diff --git a/tests/baselines/reference/circularlyConstrainedMappedTypeContainingConditionalNoInfiniteInstantiationDepth.errors.txt b/tests/baselines/reference/circularlyConstrainedMappedTypeContainingConditionalNoInfiniteInstantiationDepth.errors.txt
index 88ffa05ad4..5f3a6b69f4 100644
--- a/tests/baselines/reference/circularlyConstrainedMappedTypeContainingConditionalNoInfiniteInstantiationDepth.errors.txt
+++ b/tests/baselines/reference/circularlyConstrainedMappedTypeContainingConditionalNoInfiniteInstantiationDepth.errors.txt
@@ -26,6 +26,11 @@ tests/cases/compiler/circularlyConstrainedMappedTypeContainingConditionalNoInfin
                                                   Type 'GetProps<C>[keyof TInjectedProps & keyof GetProps<C> & string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
                                                     Type 'GetProps<C>[string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
                                                       Type 'string extends keyof TInjectedProps ? TInjectedProps[keyof TInjectedProps & string] extends GetProps<C>[keyof TInjectedProps & string] ? GetProps<C>[keyof TInjectedProps & string] : TInjectedProps[keyof TInjectedProps & string] : GetProps<C>[string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+                                                        Type 'string extends keyof TInjectedProps ? TInjectedProps[keyof TInjectedProps & string] extends GetProps<C>[keyof TInjectedProps & string] ? GetProps<C>[keyof TInjectedProps & string] : TInjectedProps[keyof TInjectedProps & string] : GetProps<C>[string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+                                                          Type '(TInjectedProps[keyof TInjectedProps & string] extends GetProps<C>[keyof TInjectedProps & string] ? GetProps<C>[keyof TInjectedProps & string] : TInjectedProps[keyof TInjectedProps & string]) | GetProps<C>[string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+                                                            Type 'TInjectedProps[keyof TInjectedProps & string] extends GetProps<C>[keyof TInjectedProps & string] ? GetProps<C>[keyof TInjectedProps & string] : TInjectedProps[keyof TInjectedProps & string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+                                                              Type 'GetProps<C>[keyof TInjectedProps & string] | TInjectedProps[keyof TInjectedProps & string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+                                                                Type 'GetProps<C>[keyof TInjectedProps & string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
 
 
 ==== tests/cases/compiler/circularlyConstrainedMappedTypeContainingConditionalNoInfiniteInstantiationDepth.ts (1 errors) ====
@@ -121,4 +126,9 @@ tests/cases/compiler/circularlyConstrainedMappedTypeContainingConditionalNoInfin
 !!! error TS2344:                                                   Type 'GetProps<C>[keyof TInjectedProps & keyof GetProps<C> & string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
 !!! error TS2344:                                                     Type 'GetProps<C>[string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
 !!! error TS2344:                                                       Type 'string extends keyof TInjectedProps ? TInjectedProps[keyof TInjectedProps & string] extends GetProps<C>[keyof TInjectedProps & string] ? GetProps<C>[keyof TInjectedProps & string] : TInjectedProps[keyof TInjectedProps & string] : GetProps<C>[string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+!!! error TS2344:                                                         Type 'string extends keyof TInjectedProps ? TInjectedProps[keyof TInjectedProps & string] extends GetProps<C>[keyof TInjectedProps & string] ? GetProps<C>[keyof TInjectedProps & string] : TInjectedProps[keyof TInjectedProps & string] : GetProps<C>[string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+!!! error TS2344:                                                           Type '(TInjectedProps[keyof TInjectedProps & string] extends GetProps<C>[keyof TInjectedProps & string] ? GetProps<C>[keyof TInjectedProps & string] : TInjectedProps[keyof TInjectedProps & string]) | GetProps<C>[string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+!!! error TS2344:                                                             Type 'TInjectedProps[keyof TInjectedProps & string] extends GetProps<C>[keyof TInjectedProps & string] ? GetProps<C>[keyof TInjectedProps & string] : TInjectedProps[keyof TInjectedProps & string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+!!! error TS2344:                                                               Type 'GetProps<C>[keyof TInjectedProps & string] | TInjectedProps[keyof TInjectedProps & string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+!!! error TS2344:                                                                 Type 'GetProps<C>[keyof TInjectedProps & string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
     
\ No newline at end of file
diff --git a/tests/baselines/reference/reactReduxLikeDeferredInferenceAllowsAssignment.errors.txt b/tests/baselines/reference/reactReduxLikeDeferredInferenceAllowsAssignment.errors.txt
index 9b6e0228ef..944236cbb5 100644
--- a/tests/baselines/reference/reactReduxLikeDeferredInferenceAllowsAssignment.errors.txt
+++ b/tests/baselines/reference/reactReduxLikeDeferredInferenceAllowsAssignment.errors.txt
@@ -26,6 +26,11 @@ tests/cases/compiler/reactReduxLikeDeferredInferenceAllowsAssignment.ts(76,50):
                                                   Type 'GetProps<C>[keyof TInjectedProps & keyof GetProps<C> & string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
                                                     Type 'GetProps<C>[string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
                                                       Type 'string extends keyof TInjectedProps ? TInjectedProps[keyof TInjectedProps & string] extends GetProps<C>[keyof TInjectedProps & string] ? GetProps<C>[keyof TInjectedProps & string] : TInjectedProps[keyof TInjectedProps & string] : GetProps<C>[string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+                                                        Type 'string extends keyof TInjectedProps ? TInjectedProps[keyof TInjectedProps & string] extends GetProps<C>[keyof TInjectedProps & string] ? GetProps<C>[keyof TInjectedProps & string] : TInjectedProps[keyof TInjectedProps & string] : GetProps<C>[string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+                                                          Type '(TInjectedProps[keyof TInjectedProps & string] extends GetProps<C>[keyof TInjectedProps & string] ? GetProps<C>[keyof TInjectedProps & string] : TInjectedProps[keyof TInjectedProps & string]) | GetProps<C>[string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+                                                            Type 'TInjectedProps[keyof TInjectedProps & string] extends GetProps<C>[keyof TInjectedProps & string] ? GetProps<C>[keyof TInjectedProps & string] : TInjectedProps[keyof TInjectedProps & string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+                                                              Type 'GetProps<C>[keyof TInjectedProps & string] | TInjectedProps[keyof TInjectedProps & string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+                                                                Type 'GetProps<C>[keyof TInjectedProps & string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
 
 
 ==== tests/cases/compiler/reactReduxLikeDeferredInferenceAllowsAssignment.ts (1 errors) ====
@@ -134,6 +139,11 @@ tests/cases/compiler/reactReduxLikeDeferredInferenceAllowsAssignment.ts(76,50):
 !!! error TS2344:                                                   Type 'GetProps<C>[keyof TInjectedProps & keyof GetProps<C> & string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
 !!! error TS2344:                                                     Type 'GetProps<C>[string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
 !!! error TS2344:                                                       Type 'string extends keyof TInjectedProps ? TInjectedProps[keyof TInjectedProps & string] extends GetProps<C>[keyof TInjectedProps & string] ? GetProps<C>[keyof TInjectedProps & string] : TInjectedProps[keyof TInjectedProps & string] : GetProps<C>[string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+!!! error TS2344:                                                         Type 'string extends keyof TInjectedProps ? TInjectedProps[keyof TInjectedProps & string] extends GetProps<C>[keyof TInjectedProps & string] ? GetProps<C>[keyof TInjectedProps & string] : TInjectedProps[keyof TInjectedProps & string] : GetProps<C>[string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+!!! error TS2344:                                                           Type '(TInjectedProps[keyof TInjectedProps & string] extends GetProps<C>[keyof TInjectedProps & string] ? GetProps<C>[keyof TInjectedProps & string] : TInjectedProps[keyof TInjectedProps & string]) | GetProps<C>[string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+!!! error TS2344:                                                             Type 'TInjectedProps[keyof TInjectedProps & string] extends GetProps<C>[keyof TInjectedProps & string] ? GetProps<C>[keyof TInjectedProps & string] : TInjectedProps[keyof TInjectedProps & string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+!!! error TS2344:                                                               Type 'GetProps<C>[keyof TInjectedProps & string] | TInjectedProps[keyof TInjectedProps & string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
+!!! error TS2344:                                                                 Type 'GetProps<C>[keyof TInjectedProps & string]' is not assignable to type '(TInjectedProps[P] extends GetProps<C>[P] ? GetProps<C>[P] : never) | undefined'.
     >;
     
     declare const connect: {
```
</details>

A good news is that there are no new errors created by this PR and there are no errors that disappeared. The bad news is that those 2 specific case (which look very similar, so perhaps this is a actually a single case) have longer errors reported. I have a hard time assessing if that's a good change or not - would love to hear out your thoughts about this.
"
"Thanks @github 

I've merge `master` into this PR so that I could build/test locally. Resolved some conflicts with use-site diagnostics changes. The commit before the merge is https://github.com/dotnet/roslyn/pull/26337/commits/bd63fafab7893576c95c96419bd2d7645730cbe8 (in case something goes wrong and we need to reset in some way).
I've added a commit with tests for scenarios I still had questions about (https://github.com/dotnet/roslyn/commit/8512954b3c884b91313b2c214fdbfa112fdc62d9).
Things look good.

The PR is not in a reviewable state until the feature branch is refresh (ie. https://github.com/dotnet/roslyn/pull/51424 is merged).
"
Crazy thought... could it be possible that the test expects the user to be vsagent? The new pools use **cloudtest** and the error says `No User exists for cloudtest`
"@github, it's precisely the file/dir distinction that prevented me from rolling out `existsSync` more broadly.  It's possible we can add try-catches for the rare cases where the wrong type is found, but it seemed likely to be a pervasive change.

As an alternative, I've proposed a change to node itself: https://github.com/nodejs/node/pull/33716"
"Main's corelib is 9.63 Mb (R2R'd)

- `ExtendedDefaultPolicy` without taking PGO into account: 9.83 Mb
- `ExtendedDefaultPolicy` with PGO `JitExtDefaultPolicyProfTrust=10`: 10.10 Mb
- `ExtendedDefaultPolicy` with PGO `JitExtDefaultPolicyProfTrust=0`: 10.17 Mb

`JitExtDefaultPolicyProfTrust=10` means we're fine that inliner won't inline anything in cold blocks (call-sites with real profiles)
`JitExtDefaultPolicyProfTrust=0` means it doesn't affect the BenefitMultiplier anyhow for cold blocks (so we still can inline calls in them). By default, I use `5` as a balance.

Here is the jit-diff (PMI mode) without taking PGO into account: https://gist.github.com/EgorBo/8e44063324ec21ba29c636a79d7e871c

### Improvements
Most of the size improvements come from ""don't inline anything in BBJ_THROW blocks"", e.g.:
```csharp
if (x == null)
    throw new ArgumentNullException(SR.InvalidArgument); // get_InvalidArgument() is inlined here
```
both `ArgumentNullException.ctor` and `get_InvalidArgument` aren't inlined anymore. A good example is  `LowLevelLifoSemaphore:ReleaseCore(int):this` diff: https://www.diffchecker.com/Wlfl2Lde
***
There are some interesting examples where inlining leads to smaller size, e.g. 
```csharp
static GCHandle Test(object? value) => GCHandle.Alloc(value);
```
Diff: https://www.diffchecker.com/kCYnyUge
^ Inliner managed to detect foldable branches in the `GCHandle`'s constructor and inlined it, see [here](https://github.com/dotnet/runtime/blob/fc4a42746d9cf65ad3db4074207069ab9c168bc9/src/libraries/System.Private.CoreLib/src/System/Runtime/InteropServices/GCHandle.cs#L62) and its [ctor](https://github.com/dotnet/runtime/blob/fc4a42746d9cf65ad3db4074207069ab9c168bc9/src/libraries/System.Private.CoreLib/src/System/Runtime/InteropServices/GCHandle.cs#L32-L54).
***
Another example - it's now able to inline `string.Equals` when we compare literals, e.g. `if (strArg.Length == 0)` is recognized as a foldable branch due to the fact we can now recognize 'get_Length' call, example:
```csharp
bool foo(string str) => str == ""hello"";

bool test() => foo(""hello"");
```
Diff for `test`: https://www.diffchecker.com/vPVxpDl1
***
There are some diffs due to PMI trying to instantiate `Vector<T>` with unsupported T (e.g. char) and inliner helpes here too, e.g. https://www.diffchecker.com/ElRZpnyh
***
`GC:AllocateArray(int,bool):ref` is smaller after inlining: https://www.diffchecker.com/AZKH3aiG
***
Same for `ASCIIUtility:NarrowUtf16ToAscii(long,long,long):long`: https://www.diffchecker.com/yS7ttpfS
***
Same for `HillClimbing:GetWaveComponent` https://www.diffchecker.com/iXaeRtBj
***
Same for `DiyFp:GetBoundaries(int,byref,byref):this` https://www.diffchecker.com/jkjH7mRo
***
Same for `Task:GetActiveTaskFromId(int):Task` https://www.diffchecker.com/7o91kyyE
***
Misc: https://www.diffchecker.com/olDdSxqM, https://www.diffchecker.com/XddHJSrd, https://www.diffchecker.com/3I81EWAo
***
There are cases where ExtendedDefaultPolicy doesn't inline what was inlined by the previous inliner - I tried to avoid it, but there were cases where I'm not sure we should inline, e.g this call https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/IO/Directory.cs#L63 is inlined despite being quite complex: https://github.com/dotnet/runtime/blob/main/src/libraries/Common/src/System/IO/FileSystem.Attributes.Windows.cs#L25-L35
Old inliner detected here ""arg feeds const test"" and added a big multiplier. It did so because IL scan was not quite accurate and had many false positives. However, this method will still be inlined with PGO (and I am sure we have one for this in the static profile we ship). **UPD** I slightly added some boost in https://github.com/dotnet/runtime/pull/52708/commits/05a19e57d879bf9ba9d271a7bfb8efeb2b97c58c.

## Size regressions
These are the cases where inlining increases the size but hopefully for better performance.
```
        2846 (357.54% of base) : System.Private.CoreLib.dasm - Array:Sort(Array,Array,int,int,IComparer)
```
InlineTree diff: https://www.diffchecker.com/nEAcbTWc It decided to inline `ArraySortHelper.IntrospectiveSort` here (e.g. because of ""non-generic code calls generic"").
***
```
1483 (131.71% of base) : System.Private.CoreLib.dasm - Guid:TryFormat(Span`1,byref,ReadOnlySpan`1):bool:this
```
Diff https://www.diffchecker.com/KgWTWBug - it inlined all `HexToChars` calls.
***
```
        1248 (56.12% of base) : System.Private.CoreLib.dasm - Task`1:ContinueWith(Func`2,TaskScheduler,CancellationToken,int):Task`1:this (8 methods)
```
Diff https://www.diffchecker.com/Y26QhTNV, explanation: [sharplab.io](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBLANgHwFgAoAAQAYACUgRgFYBuEk0gZmoCZKBhSgbxKUhlQcLbUk3CADsM2aQFcAhnJkB5AA6rpAZ0oBZGgApSkmXMUrs6rdd2UIASn7Niw95QD0nygCUIOrgAntKUACYQMDrSAOQYlABmELhhlBgAFlEwabDZCbhKAOY6oh5ePjoQaZmUAJLSuPIwUJQ6MFGUAERJKUrAuNkwCBqwOjp2Op2lHt51lNLtqRhVCdgIdQ1NLcuUsJCF0tgAXtndyWF9A5RDI1HjMpMODUHT7rMA7pmhkLoYcEpQQqUAHZeQAN2SYJgYQAdK8xAB2ByUfAiNxlDFCUxSWTyZTaTTaHQwgByEAwamk3CU0jAMAGqSI6MxZWx5jxVhsRNJ5MpADElApcBhoSj4SyJDiLPi7ISJjyKdJfDSACoQKQAWw0A20TGZlAAvtNjfrxGzcZYCbYHgYOCYzBaZVyJg5nAJiOLyn4AsFQhEOj0lpk2jl2okCsVPaQkZ7MebpZzpHKHgrKdTafTRUyJayHQmrdyyYqBUKRYzYxj4xyC/Ki5TldI1ZrtTBtCiHHr3EbiAagA==)
***
Overall I don't see anything terribly wrong so far (e.g. terrible spills because of too-many-locals), I spent the whole week on fixing the regressions and now it's more or less fine.
Performance benefits aren't as good as they used to be with a way more aggressive inliner but I'm going to investigate what exactly led to such improvements and send separate PRs. At least currently I don't see any impact on ""time to first request"", I'll publish the first results once my [script](https://gist.github.com/EgorBo/a1ab453bf41a5369aa54b4c4fba6bea5) finishes.

@github you can pick any method from the jit-diff and I'll explain with the diffs what exactly happened."
"This seems to handle incorrectly the following case:
```csharp
// Generated by Fuzzlyn v1.2 on 2021-07-22 13:45:33
// Seed: 7718323254176193466
// Reduced from 89.3 KiB to 0.4 KiB in 00:00:46
// Debug: Outputs 1
// Release: Outputs 0
struct S2
{
    public uint F0;
    public long F1;
    public uint F2;
    public short F3;
    public bool F4;
    public S2(uint f0, uint f2): this()
    {
        F0 = f0;
        F2 = f2;
    }
}

public class Program
{
    static int s_1;
    public static void Main()
    {
        int vr23 = s_1;
        S2 vr29 = new S2(1, (uint)vr23 / 40319);
        System.Console.WriteLine(vr29.F0);
    }
}
```

The codegen we get is:
```asm
; Assembly listing for method Program:Main()
; Emitting BLENDED_CODE for X64 CPU with AVX - Windows
; optimized code
; rsp based frame
; partially interruptible
; No PGO data
; 0 inlinees with PGO data; 1 single block inlinees; 0 inlinees without PGO data
; Final local variable assignments
;
;  V00 loc0         [V00,T01] (  2,  2   )     int  ->  rcx         single-def
;  V01 OutArgs      [V01    ] (  1,  1   )  lclBlk (32) [rsp+00H]   ""OutgoingArgSpace""
;  V02 tmp1         [V02,T00] (  4,  8   )  struct (24) [rsp+20H]   do-not-enreg[SFB] ""NewObj constructor temp""
;* V03 tmp2         [V03    ] (  0,  0   )     int  ->  zero-ref    ""Inlining Arg""
;
; Lcl frame size = 56

G_M27646_IG01:              ;; offset=0000H
       4883EC38             sub      rsp, 56
       C5F877               vzeroupper
                                                ;; bbWeight=1    PerfScore 1.25
G_M27646_IG02:              ;; offset=0007H
       8B0DFFD92A00         mov      ecx, dword ptr [reloc classVar[0x8cdfe320]]
       33C0                 xor      eax, eax
       C5F857C0             vxorps   xmm0, xmm0
       C5FA7F442420         vmovdqu  xmmword ptr [rsp+20H], xmm0
       4889442430           mov      qword ptr [rsp+30H], rax
       C744242001000000     mov      dword ptr [rsp+20H], 1
       B8FD520ED0           mov      eax, 0xD00E52FD
       8BC9                 mov      ecx, ecx
       480FAFC8             imul     rcx, rax
       48C1E92F             shr      rcx, 47
       894C2420             mov      dword ptr [rsp+20H], ecx
       8B4C2420             mov      ecx, dword ptr [rsp+20H]
       E88EFCFFFF           call     System.Console:WriteLine(int)
       90                   nop
                                                ;; bbWeight=1    PerfScore 10.83
G_M27646_IG03:              ;; offset=0043H
       4883C438             add      rsp, 56
       C3                   ret
                                                ;; bbWeight=1    PerfScore 1.25

; Total bytes of code 72, prolog size 7, PerfScore 20.73, instruction count 18, allocated bytes for code 74 (MethodHash=cb019401) for method Program:Main()
```
As you can see, the result of the division is stored at `rsp+0x20` which is wrong. The `STORE_LCL_FLD` node looks like
```scala
Generating: N035 ( 28, 14) [000031] UA----------              ▌  STORE_LCL_FLD int    V02 tmp1         ud:3->0[+16] Fseq[F2] NA REG NA
IN000b:        mov      dword ptr [V02 rsp+20H], ecx
```"
"I fixed the wrong queue name in #65093.

The arm64 will have to go to 11.00 which might not pass as well as 10.15 does. Can we, for the time being, ignore that leg and move the rest? I will work on the exit codes and maybe we'll have a solution for it soon."
"I think a lot of the recent and upcoming C# language features get one fundamental thing wrong (in my personal opinion).

They optimise for writing code, not for reading code. I think it should be the opposite.

@github has shown a great number of examples throughout this conversation how `!!` substantically improves writing certain fragments of code, but in all those cases I found that it was *much harder* to read and grok that code afterwards.

Writing a few extra lines of if statements is not that hard and especially in .NET it's a minuscule problem given that  most IDEs already write it for me at the tip of a few key strokes followed by a double `TAB` stroke.

I would encourage developers at Microsoft to ask themselves how open they actually are to community feedback like this. I don't mean to suggest anything bad, but personally I often get the feeling that by the time a feature like this gets revealed for feedback a lot of investment (time and emotion) has already gone into developing a (more or less polished) prototype of it at which point people already have a personal investment in defending their decisions and have a bias towards downplaying good counter arguments as ""minority noise""."
"@github Thanks for the approval. I really appreciate it. I think the reason we did not put any tests for this fix was that this 
 scenario is so end case and complex that is not easy to put in a test case. @github please feel to correct me if I am wrong.

Looks like I do not have the permissions to merge this PR. I would have to request write access. Can someone with write access merge this PR or tell me how to request the same. "
"Actually I'm wrong, we do need to produce a package for this. We need this so it can be picked up as an asset for the web sdk. "
"Idk, but the test currently doesn't hit line 89, so something is wrong with it."
">  @github Can you confirm that the correct commit was branched for preview5 in runtime? It does seem pretty old

Yes its wrong, i will correct the the branch"
parameter name is wrong
"i am wrong

---
In reply to: [140600043](https://github.com/dotnet/roslyn/pull/22269#discussion_r140600043) [](ancestors = 140600043,140599487)"
"Agree. Tried to lookup docs on this (mostly to verify I wasn't interpreting this wrong). But experimentally at least it appears to be a difference between the OS. "
"> Something is wrong with the way we build our shared framework.

Any ideas on how to resolve it?"
@github The size of the PR is growing crazy. Is that okay?
">if (typeArguments.Length != 2) [](start = 16, length = 30)

This is wrong, it shouldn't matter how many type arguments the method has. #Closed"
"Currently, we throw an exception with a helpful error message for the wrong language.

I don't see this, this is what is documented and we do not check that that it is safe to cast anything we just cast and the behavior is inline with the documentation on the methods:
```
<exception cref=""InvalidCastException"">If the <see cref=""IConversionOperation""/> was not created from Visual Basic code.</exception>
/// <exception cref=""InvalidCastException"">If the <see cref=""IConversionOperation""/> was not created from CSharp code.</exception>
```
 



---
In reply to: [178666871](https://github.com/dotnet/roslyn/pull/25828#discussion_r178666871) [](ancestors = 178666871,178665972,178665399)"
"So this is a bug then? It seems we should have this assert the correct behavior and then skip the test with a Skip attribute, rather than assert ""wrong"" behavior? #Resolved"
Isn't this mapping in the wrong direction? Shouldn't this be going from subject buffer *to* surface buffer?
"The name actually seems wrong to me.  Can it not be `GetRootCoreAsync`? Note: SyntaxTree has an internal constructor, so it's not a breaking change for us to change the names of protected members in it since they're effectively `internal and protected`."
dumb question.   why the named parameters here?  They don't seem to add anything (same with the call below)
"Something is wrong here: this references `b2`, but there's no `b2` in the tested function. #Resolved"
">5 [](start = 50, length = 1)

nit: wrong number #Resolved"
"dumb question, why `.Span.End`?  is that what the LDM finally decided on where the `nullability` of something would be examined?"
"Hmm, no I'm still not seeing it, even with the third overload. If we use

```C#
public TValue GetOrAdd (TKey key, Func<TKey,TValue> valueFactory);
```

This is wrong, because the key will be the ROM from the file, keeping the file alive.

If we use

```C#
public TValue GetOrAdd<TArg> (TKey key, Func<TKey,TArg,TValue> valueFactory, TArg factoryArgument);
```

there's still no way to give a new value for the key, which needs to be the ROM for the newly allocated string.
"
"> I'm assuming the absence of dotnet_style_require_accessibility_modifiers eg., is because there's some debt to pay off.

Hopefully there isn't in coreclr/libraries, as we use StyleCop SA1400 to ensure that.  But we're not running the analyzers on mono as far as I can tell (please someone correct me if I'm wrong).  If there is actually debt that the analyzers are missing, I'd love to understand why.

> Do you think we should ask folks to align style as Mono work proceeds? Or build up debt and do it together? I would rather the first, in general.

I'd like to get to a point where we use the same style in mono/netcore as we do elsewhere.  I'm happy to help with that.  Hopefully it'll be a fairly quick / wrote process via VS's auto-fix tooling."
"srandom is there to set the random generator seed based on the current time so that the random offset of executable memory allocations is not always the same (this code is invoked just once at process startup).
I think there is nothing wrong with random, the point was that we needed to differentiate between Illumos and other unixes we already support as its RAND_MAX is set to 0x7fff and it doesn't apply to the random() output (it does for rand() only). And since the arcrandom has a function that doesn't have to care about the RAND_MAX, it seemed like a clean replacement.
"
"@github somehow this PR now contains a lot more commits from master, something went wrong..."
wrap crazy lines :)
"These paths are wrong... you're changing it to just use configuration and not `BuildSettings` anymore:

https://github.com/dotnet/runtime/pull/37600/files#diff-d3bedba39ce6da3e37ca0db83d7ef035R273"
"I got a NRE here by use a wrong url , so we might need to check image is null here. Also I think we can pass to clear the Control image ?!"
"nit: I'd give `8` a name, even if it's something dumb like `ScrollBarUpdateInterval`"
"That makes sense. So my reasoning seem to be wrong, however, other tests in this file are marked WindowsDesktopOnly and linking to https://github.com/dotnet/roslyn/issues/28044

But let me try using <Fact> and see what happens."
"also, CheckBox is wrong, I'm fixing it
"
"Oh sorry, this is for `InitialRows `& `InitialCols`, not LaunchPosition. Must have clicked the wrong line."
"> Regarding MoreTabStyles - should this be just another attached property container class or do you have something else in mind?

I wouldn't worry about this one for now

> iOS bottom tabs only support solid brush (still looking for a workaround here)

Hmmm yea that's annoying. Figuring out what will and won't work across platforms with brushes has been a fun journey.
 
I took a brief stab at figuring out how to let users supply custom UIViews for UITabs because iOS really locks this down and I found that you can do something like this inside `ShellItemRenderer`

```C#
CustomTabBar _customTabBar;
		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			_customTabBar = new CustomTabBar();
			this.SetValueForKey(_customTabBar, new NSString(""tabBar""));
```

```C#
		class CustomTabBar : UITabBar
		{

		}
```

And then iOS will render your `CustomTabBar`
I don't know if this helps you at all but I was pretty excited when I found these hooks


> I still have to check how that works - but I wouldn't be sad if you take the lead here 😉

As far as ShellAppearance yea..... It has some weird quirks that will drive you crazy if you try to figure this out.  I'd like to vastly simplify the decision tree on how ShellAppearance works here but I can wire this up pretty quickly once I need. "
"I formatted this target because the whitespace was pretty crazy:
- Some spots were indented with 3 spaces?
- There were randomly a couple of tabs?"
This might be wrong. I need to investigate.
"> > We're likely to approve a few #pragma warning(suppress:)s in library code because it keeps us from making mistakes elsewhere.
> 
> @github Actually that was not the point. I still think my approach to update `til::at` was right.
> The current implementation limits it to class types that have a `size()` method. IMO it should work for most to all types that support the subscript operator, such like random-access iterators, C-arrays, and pointers. We should accept signed index types because iterators and pointers support negative offsets. And we should avoid to cast the passed index to `ptrdiff_t` or `size_t` because the expected type size might be smaller. E.g. `winrt::hstring::size_type` is always `uin32_t`.
> However, I'm disenchanted because I spent a few hours with testing to avoid another rejected commit. There have been enough of them in this PR for the same reason already. And I still don't understand why it shouted out that I used pointer arithmetic at the points I called `at`.
> 
> Nevermind. This is all rather off-topic now 🙂

It's fine. Thanks for your effort either way.

Just keep in mind that our analysis system is our best effort of what we think we need to do for static analysis. You might prove it wrong in ways that we haven't thought about yet!"
"I just tried `{0}` and it doesn't seem to change anything unfortunately.

Please note that Chromium and Firefox don't have a solution.

Chromium [doesn't do it correctly either](https://bugs.chromium.org/p/chromium/issues/detail?id=950362). It just ""ignores"" the ""Title bars and window borders"" setting for the top border so it always paint the border with the accent color. And in that case, there is no transparency (I think) so that is correct but it shouldn't paint the border with the accent color in the first place:
![image](https://user-images.githubusercontent.com/56923875/74489642-20dbfa80-4ec6-11ea-973c-99d176b10435.png)
There shouldn't be a blue line at the top.

Firefox is wrong too:
![image](https://user-images.githubusercontent.com/56923875/74490747-d6f51380-4ec9-11ea-9fb8-63551669fda5.png)
"
What is the value of `@(_TargetLibDir)` vs `@(_TargetLibInterpreterDir)` here? Were some of these wrong and we didn't notice?
"Oh, fair point! Then I'm totally cool with this. I don't hate `maximizedFocus` either - I think `maximized|focus` would be wrong, because that would imply the whole set is flags that could be combined (they aren't). It's basically either `maximizedFocus` or `focusMaximized`, and I don't feel like there's a tangible difference between the two, so let's go with what's already been implemented 😛 "
"I don't think we should allow an `this[int, params)` indexer to fulfill the requirements for a type being ""indexable"".
See existing behavior for implicit Index indexing:
```
public class C 
{
    public int this[int i, params string[] o] => 0; // this type isn't indexable because this indexer has the wrong signature
    public int Length => 0;
    public void M() 
    {
        _ = this[^1]; // error CS1503: Argument 1: cannot convert from 'System.Index' to 'int'
    }
}
``` #Closed"
"So the nice part of having rsp files and putting args in separate lines is that you technically don't need to quote them. Quoting cli args is hard (https://github.com/dotnet/runtime/blob/01b7e73cd378145264a7cb7a09365b41ed42b240/src/libraries/System.Private.CoreLib/src/System/PasteArguments.cs) and easy to get wrong in the ordinary case. Less so in specialized cases, but if you could avoid it, it's definitely worth looking in to."
"> I think I realize now, that making `VTInt` a signed integer might've been a mistake...

Why's that? I actually thought a signed int was the right choice. As an example, if you're working with VT coordinates, a typical calculation would be to add or subtract an offset, and then clamp the result within the active margins or buffer range. If that intermediate offset goes negative on a signed int that's not a problem - it's still going to clamp correctly. But if it's unsigned, it's going to wrap, and you're going to end up with the wrong result.

> If we need these two new color functions to be performant, we could use a LUT for mapping 0-100 to 0-255.

I like that idea. I am keen to get these functions as fast as possible, mostly for when they're used in sixel. Although HLS colors aren't likely to be used much, so the HLS one is less critical.

> That wouldn't just work for `ColorFromRGB100` but also for `ColorFromHLS` which can be written with integer arithmetic only (without integer division).

I've done some initial experiments with a LUT, and it's a big improvement for `ColorFromRGB100`, but in `ColorFromHLS` it actually seems somewhat slower. It could just my badly written code, but I went with the floating point implementation in the first place because I found it faster than my integer version, and I suspect the LUT doesn't make up for that loss.

I'll play around some more and see if I can improve things, otherwise I'll just do the LUT for `ColorFromRGB100`."
wrong quote at end
These look wrong.  We shouldn't be missing members on runtime implementations.
">FindFieldBySignature(_containingType, memberName, fieldInfo.CustomModifiers, fieldInfo.Type) [](http://example.com/codeflow?start=31&length=92)

It doesn't look right to ignore 'ref' here. Perhaps it is fine to not find a match for a ref field because VB doesn't support ref fields, but ignoring the presence of the 'ref' feels wrong. #Closed"
"I was wrong. It may look far too up. I will make it assertion.
"
"Does this actually work for you? When I was working on the initial implementation of the merged test wrappers, it seemed to me that within the ItemGroup Update loop you only see the pre-existing metadata values i.o.w. to consume a previously calculated metadata I had to use two subsequent Update loops. It can easily be the case I was doing something wrong, I don't have any exact documentation of this behavior at my disposal, just please double-check this truly behaves the way you expect it to."
"possibly naïve question--what's wrong with `is` checks?
"
"> Not sure, only one hit found, seems function pointer name created in mono,

There should be no way for MLC to hit Mono runtime reflection implementation. Either this condition is bogus; or there is something really wrong."
The breaking changes claimed by the API diff are because we're comparing with the wrong commit (see #14963).
"Extract the ""get item and throw if wrong"" pattern?
"
"1. this error shows up even when there is no shadowing? I don't *think* this is correct, but it might be. If it is correct, then the error *message* is wrong because it's not actually shadowed.
2. this error is too long. Maybe something like:

> Private name 'B.#foo' shadows 'A.#foo'.
(or '#foo' in 'B' insead of 'B.#foo')

I don't think 'shadows' is too complex a word to put in an error.

3. Add a related span 'A.#foo' using the error ""{0} is declared here."""
"Yes, it's new and it appears to be correct. According to the type annotations, the `queue` method expects an argument of type `AsyncFunction<T, E>` which is equivalent to `(callback: (err?: E, result?: T) => void) => void`. But the arrow function provided expects an object in the first parameter. Pretty sure the type annotations are wrong somehow, but certainly we're correct to report an error."
"This is wrong, isn't it?

I'm just reading the comment by @github here: https://github.com/dotnet/runtime/issues/70905#issuecomment-1159117124

So I assume I need to catch exceptions in the calling method, not here?"
"nit nit: .. and `-2` for `%s`?

Extract the length of the final string to a local, so we don't get that wrong by mistake, computing it in more than once place."
"(And this kind of relation is precisely what happens during variance analysis of something like `T extends Whatever ? { x: T, y: T } : { x: unknown, y: unknown }`, so we can't afford to get it wrong, otherwise we'll taint the variance-based non-generic results with incorrect results)"
"I agree that you can never be too careful, but if I had a struct and I change it to ref struct and my code is breaking, that just means I can't do it this way, and I should use ref struct somewhere, similarly your proposal is already supported in a way that you are walking through an array of bytes using a different off set and I do this a lot manually in unsafe code, where I covert MyStruct to void* and walk over it with Int32, so your proposal to me is just a way to do this easier which is like a syntax sugar and what can possibly go wrong?"
Actually this line shows the issue too. The uppercase `F` is wrong.
"I'm awfully confused - why are we binding on the catch block instead of the variable? It seems inherently wrong, and is otherwise undocumented.
"
"The configuration system requires the plural form. Listing only one element isn't wrong.

@github can you please follow up here and investigate the reason for the break? "
"this check is wrong.  This will allow someone to use a unicode escape in their identifier and still have it count as ""use strict"".  That's not correct according to the ES5 spec.  The raw text (not hte cooked text) must be ""use strict"".
"
"I suspect something very fishy is happening with test startup somewhere. Could you modify the test to always print out a message at the start of Main? That might help show the problem.
The other detail is that error code 3 in windows is ERROR_PATH_NOT_FOUND which indicates to me that something might be wrong with distributing binaries to this test hardware."
Turned out the AdvSimd.Arm64 tests were wrong - the tested immediate value was out of *encodable* range - fixed this with two last commits.
"> Will this work for libraries tests or just clr tests?

Like Jeremy said, these changes will only work for CLR tests.  I used the wrong area tag when I created the PR I think.  That being said, I don't think there is anything unique to the CLR tests in these changes and the code should be reusable elsewhere."
"> Because the syntax is malformed (multiple members in record, but not braces) the construction of binders is wrong.
Couldn't repro the issue from source.

Ah ok.  Sorry about taht.  I didn't realize that braces were part of the binder computation.  Seems risky though.  For example, if the parser ever becomes resilient to missing braces, this coudl fall out.  But nbd for now :)"
Wrong repository
"~~Failures are unrelated. The test failures are from #60480, which was fixed in #60502 but not yet merged into this branch. The other failures are infrastructure (""No space left on device"").~~

Oops, bounced to the wrong tab. That was meant for a different issue."
"> it sounds like you want to loosen the restriction in place:

I guess so. Since you can replicate those situations in cases where we do not issue an error (eg, via variadic concatenation), I think having accurate behavior for them is important. And thus, once you have accurate behavior for those situations, there's not much of a justification in forbidding them in normal circumstances, I think.


> How often do we leverage the distinction between optional and potentially undefined when we have the property itself?

Infrequently. In fact, that we don't is pretty much one of the reasons for https://github.com/microsoft/TypeScript/issues/41418 being a bug and not ""intended behavior"". So the inclusion of `undefined` in the type is potentially needed for consistency.

> For multiple rest elements...

Yeah, I just reason that sequences of types in an array aren't that different from sequences of characters (or types) in a string (or template) - so the later being strictly more powerful with respect to what is preserved through concatenation operations rubs me the wrong way a bit - I feel like we've done some of the thinking on how to match up these sequences, and should probably try to do the same here, rather than quietly losing type fidelity in an unsafe way."
"Tagging subscribers to this area: @github, @github
See info in area-owners.md if you want to be subscribed.<details>
  <hr>
  <b>Issue meta data</b>
  <table>
  <tr>
    <th align=""left"" rowspan=""2"">Issue content:</th>
  </tr>
    <td rowspan=""2"">
    
    Fixes: https://github.com/dotnet/runtime/issues/44559

The reason why the tests were failing was kind of tricky. 

- We set, disable implicit references, which means Microsoft.NETCore.App is not a reference when restore happens.
- Because of that, the AppHost package is not downloaded at all, however when we targeted net5.0 for the tests, the AppHost package was found on the SDK packs directory. Now that NetCoreAppCurrent moved to net6.0, it does add the AppHost package to `PackageDownload` but it never downloads it because there are no FrameworkReferences when ProcessFrameworkReferences is executed. 
- The fix was to move `FrameworkReference` out of the target so that the framework reference is picked up by restore and the runtime packs are downloaded correctly.
- Also I removed the `RuntimePack` from `PackageDownload` to not download un necessary stuff.

I validated that we still build and publish using the local built runtime and ref packs:

![image](https://user-images.githubusercontent.com/22899328/99005190-33d33800-24f5-11eb-8994-4bd76c05fcf3.png)

![image](https://user-images.githubusercontent.com/22899328/99005249-52393380-24f5-11eb-8808-f0fecf074e7d.png)

I also did some cleanup to use the `MicrosoftNETCoreAppVersion` property instead of hardcoding the version in the `KnownFrameworkReference` and `KnownAppHostPack`.

When trying to run an individual project I noticed that the way we were invoking `dotnet` was wrong because we were using `DotNetRoot` which is empty if arcade is using the globally installed SDK so we were resolving `TestDotNetPath` to the test project path... I changed it to use `DotNetTool` which is handled by arcade: https://github.com/dotnet/arcade/blob/4873d157a8f34f8cc7e28b3f9938b32c642ef542/src/Microsoft.DotNet.Arcade.Sdk/tools/RepoLayout.props#L35
    
    </td>
  </tr>
  <tr>
    <th align=""left"">Issue author:</th>
    <td>safern</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>
    
    `area-Infrastructure-libraries`
    
    </td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
  </table>
  </details>"
"> I disabled hill climbing.

What about `DOTNET_SYSTEM_NET_SOCKETS_INLINE_COMPLETIONS`? Was it set to `1`? 

For some reason it's now the default setting for PlaintextPlatform and JsonPlatform benchmarks (I believe that it's wrong, we then have 1 epoll thread per core, not 1 per 30 cores which is the default setting that 99.9999% of our customers are using in production)). 

It can have a big impact on the benchmark results when you are changing somethinng related to `ThreadPool`. I would just feel safer about any changes if they were benchmarked with the default settings (with the exception of hill climbing on machines with many cores).

> There is a work item for fixing it in .NET 6

I am really happy to hear that! Is there a GH issue that I could follow or for now it's just somewhere in our internal docs?"
"Looks like this will not be as simple as just adding a new task that runs a .cmd instead of a .sh. The tests now failed because it was trying to pass parameters to a script with the wrong syntax. If I'm not mistaken passing new properties should be done via `/p:[PROPERTY]` whereas currently it is `-p:[PROPERTY]`. So looks like Powershell is misinterpreting the command:
Log error: https://dev.azure.com/dnceng/public/_build/results?buildId=1171882&view=logs&j=292a4b20-7ee9-5b07-a8c9-fb02f01d70e6&t=5334d3ce-6cfc-51b3-2ed7-cd53a427c8f7&l=17 

EDIT: actually I am passing it as `/p:` (see below). Is there some other place I should do this as well?
```
  extraStepsParameters:
          extraTestArgs: '/p:WasmBuildNative=false'
```"
"> I have presented a patch that allowed me to parse an entire Windows Runtime API surface with a high-level API. 

The point of this discussion is whether we are comfortable with supporting this scenario going forward. WinRT is developed independently on .NET these days.  System.Reflection.MetadataLoadContext was not designed for reading .winmd files. There are scenarios today where System.Reflection.MetadataLoadContext won't work well for reading .winmd files, and this set is likely to grow over time.

> It also reduces code complexity by reusing existing code and dropping generic parameter 

This simplification is definitely welcomed. Thank you!

>  I'd be interested to read about the differences between .NET type system and WinRT type system

I am not aware of comprehensive up-to-date document that lists all differences. I can give you one example: Names in assembly references are irrelevant in WinRT type system. The name in .winmd assembly references maps to correct file name some of the time. It is fragile to depend on it. The WinRT type system specifies [algorithm](https://docs.microsoft.com/en-us/uwp/winrt-cref/winmd-files#winmd-file-name) for locating .winmd files. The runtime built-in WinRT interop support had methods like `AppDomain.TypeResolve` to support the WinRT specific algorithm for locating .winmd files. None of this support is present in System.Reflection.MetadataLoadContext.

Also, I was wrong that `System.Reflection.MetadataLoadContext` does not apply type projections. It does apply the type projections since `MetadataReaderOptions.Default = MetadataReaderOptions.ApplyWindowsRuntimeProjections`. However, this is the frozen snapshot of the type projections that matches the runtime built-in WinRT interop support. The set of WinRT type projections was extended since then, and so this won't work well for more recent WinRT types such like the ones that come with WinUI 3."
"Tagging subscribers to this area: @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

When creating any culture, we read the culture data from the underlying OS library (either NLS or ICU). Part of the data we read is the culture native digits. We should get ten digits string (e.g. `0123456789`). Sometime the settings in the host machine get messed up and can return digits strings less than ten digits and that can cause .NET to throw `IndexOutOfRangeException`. Such failure is hard to diagnose after the fact especially when the collected dumps don't include the machine settings. This issue gets reported every while and recently we get it again from some customer. The change here is only read the returned digits data if it is ten digits. Otherwise, we'll fallback to ASCII digits 

It is hard to add a test for such fix as it will need to change the machine settings. But, I have tested manually and ensured it address the issue when having wrong settings.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>tarekgh</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Globalization`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github, @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

The symbols for `dotnet` and `hostpolicy` are not being published to the public Microsoft symbol servers.

It looks like we are currently relying on the symbol packages for `Microsoft.NETCore.DotNetHost` and `Microsoft.NETCore.DotNetHostPolicy` to get symbols for `dotnet` and `hostpolicy` published.

The `pkgproj` projects in installer have a `PackageReference` to `Microsoft.DotNet.Build.Tasks.Packaging`: https://github.com/dotnet/runtime/blob/f7b441d6c14cfc60c2d02bdc6a087247806efb7c/src/installer/pkg/projects/Directory.Build.props#L129

That package includes a target that sets the `SymbolPackageOutputPath` based on the `PackageOutputPath`.
https://github.com/dotnet/arcade/blob/main/src/Microsoft.DotNet.Build.Tasks.Packaging/src/build/Packaging.targets#L63

However, the targets of that package are imported _before_ the project's `Directory.Build.targets`, which imports Arcade targets that set the default for `PackageOutputPath`:
https://github.com/dotnet/arcade/blob/main/src/Microsoft.DotNet.Arcade.Sdk/tools/ProjectDefaults.targets#L22

As a result, the symbol packages built by `src/installer/pkg/projects/*.pkgproj` end up in the wrong directory - For example, under `artifacts\bin\<project_name>\Release` instead of `artifacts\packages\Release\Shipping` - such that they do not get uploaded and published.

This was an unfortunate side effect of https://github.com/dotnet/runtime/pull/57036.

This change goes back to having `SymbolPackageOutputPath` explicitly set. It is not really intuitive / great, but given the desire to stop having these packages (https://github.com/dotnet/runtime/issues/35244, which will also need to make sure symbol publishing is covered by other things) and my expectation that we should backport to 6.0, I went with the simply bringing back the previous behaviour.

cc @github @github 

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>elinor-fung</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Host`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

https://github.com/dotnet/runtime/issues/59636

When enabling the globalization invariant mode on Linux, we'll always fallback to `UTC` time zone which is wrong and a regression from .NET 5.0. We have some docker containers which enable the globalization invariant mode by default on the whole image; the problem will be obvious there.

In .NET 6.0 we have introduced the [Globalization Invariant Mode Breaking Change](https://docs.microsoft.com/en-us/dotnet/core/compatibility/globalization/6.0/culture-creation-invariant-mode). This breaking change causes throwing exception when enabling the globalization invariant mode and creating any culture other than Invariant culture. 
If the globalization invariant mode is enabled and trying to get the local time zone when running on Linux platform, the creation process will try to initialize the display names of the time zone. This initialization tries to reset the UI culture to `en-US` if it is set to Invariant culture. When we have the globalization invariant mode is on, the UI culture will always be Invariant and cause the time zone initialization to fallback to `en-US` which will throw exception because it is not allowed to create any other cultures in the Invariant mode. We catch the exception and then fallback to use `UTC` time zone instead of the actual time zone set on the running machine.

The fix is simple and not risky which is avoid creating any culture during time zone initialization when the globalization invariant mode is on.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>tarekgh</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Globalization`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> I don't understand what is wrong here?

It's cutting off the end by returning `charsWritten` rather than `charsWritten + 4`."
"Tagging subscribers to this area: @github/area-infrastructure-libraries
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Reported in https://github.com/dotnet/runtime/pull/67647#issuecomment-1098044653. Accidentally got the package path wrong for placeholder files and didn't notice it locally.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>ViktorHofer</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>ViktorHofer</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Infrastructure-libraries`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
Is there a follow up issue to move this to Components.Server? This looks like the wrong place for this to define this
"If these types required the option type to be specified to construct, I can see the value in having these. Requiring the caller to get the path to the temp directory from an option type before passing it in to these types seems onerous to the caller and super easy to get wrong. Is there value in doing this? Additionally, is this a common requirement for users to want to customize where the ASP.NET Core specific temp directory is located?"
"No, I would say what's wrong would be passing in code via `action` to this method that runs indefinitely. This hasn't been a problem in practice, and if that were the case I'd prefer to address that instead."
"The method being looked up is `AfterUpdate`, not `OnAfterUpdate`.  I thought I tested this when I made the change, but I clearly got this wrong."
Each operation likely needs to go in a `try..catch` block and emit logs to indicate success or failure. If something goes wrong we want to know where we failed.
"this feels wrong.  paging @github .   If we want to match any modifier then why not have either an optional list of modifiers to match, or make no modifiers mean this, or just have a list with all modifiers."
No sorry I'm wrong here. Deleting!
"These are in the wrong section; they were not, as the #region title describes, introduced in C# 6. Please move it to near the bottom."
wrong formatting option?
"Error is some kind of `maven.apache.org` connection issue

```
* What went wrong:
Execution failed for task ':junitPlatformTest'.
> Could not resolve all files for configuration ':testRuntimeClasspath'.
   > Could not resolve org.junit.jupiter:junit-jupiter-engine:5.3.1.
     Required by:
         project :
      > Could not resolve org.junit.jupiter:junit-jupiter-engine:5.3.1.
         > Could not get resource 'https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-engine/5.3.1/junit-jupiter-engine-5.3.1.pom'.
            > Could not GET 'https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-engine/5.3.1/junit-jupiter-engine-5.3.1.pom'.
               > Connect to repo.maven.apache.org:443 [repo.maven.apache.org/151.101.188.215] failed: Connection timed out: connect
```"
"> Does this produce an incorrect result currently if the user is calling a generic method, where the out T variable is actually used for type inference?

Yes.  It looks like we get that wrong all the time.  Will fix that as well."
"@github is rightfully concerned about us doing Razor language changes and then losing the ability to immediately verify the tooling impact of those changes. I'm not saying that it will be impossible to validate the language changes, just much, much harder than today 😄. So that being said I 100% agree with Ryan that it sucks to have that restriction.

Basically i'm juggling the following priorities in my head:
1. Optimize build times for the dotnet org
2. Optimize the manual labor of ""another repo""
3. Optimize stability for tooling specific changes (flakiness will heavily disrupt our ability to get out VS insertions)
4. Optimize speed for tooling specific changes. Re-building all of aspnetcore would not allow tooling to iterate quickly.
5. Optimize Razor language changes that also impact tooling.
6. Optimize Razor tooling only changes that do not require language changes.

As of right now we have a TON of 6 on the critical path as committed/currently being done. Hell that's a large reason why the aspnetcore/aspnetcore-tooling merge was delayed to begin with. And it goes without saying that 3 & 4 impact both language and non-language changes. Sooo all that said i'm willing to iteratively bring pieces of the aspnetcore-tooling world into AspNetCore to make the grander dotnet world better with the realization that there's pros and cons to it all. 

In an ideal world we'd ""just"" solve all of the above priorities. I haven't found a way to inexpensively do that and everything else we have planned"
"It looks like returning an empty array in this case is ambiguous. One cannot tell if there are no parameters, or event form is wrong. 
"
"That was indeed wrong. Added test in iteration 7. Thanks

---
In reply to: [93093404](https://github.com/dotnet/roslyn/pull/15809#discussion_r93093404) [](ancestors = 93093404)"
"I might be wrong about what this means, but should this be

```suggestion
        /// <param name=""maxBufferSize"">The maximum number of bytes that are allowed to be buffered.</param>
```"
"As mentioned below, and elsewhere on this thread, the established defaults are 100% uninteresting to the compiler.  What is interesting is how things can go wrong and how that will impact users.  That is the land we live in. "
"Should this be `IConfiguration?` if the comment says it can return null, or is the doc just wrong?

Same for the method above."
"> Looking at my build failure there, am I supposed to be checking in `blazor.webassembly.js` ?
> Sorry for the dumb question, this really is out my comfort zone I'm learning a lot today but there's just _so much_ I'm not used to. it's a lot to take in!

Ah, yes. You have to regenerate blazor.server.js and blazor.webassembly.js (just run dotnet build on Web.JS) this is due to one of our weird build constraints"
"It will throw a more descriptive exception if something went wrong.

---
In reply to: [155394341](https://github.com/dotnet/roslyn/pull/23122#discussion_r155394341) [](ancestors = 155394341)"
"@github plz look near the top of the console log, where the test infrastructure executes `dotnet tool install dotnet-ef ...`. The stack trace seems consistent across platforms and affects both `'C:\h\w\A35C090E\p\dotnet-cli/dotnet tool install dotnet-dump --tool-path C:\h\w\A35C090E\w\AF8C093B\e --version 5.0.0-*'` and `'C:\h\w\A35C090E\p\dotnet-cli/dotnet tool install dotnet-ef --version 7.0.0-alpha.1.21568.2 --tool-path C:\h\w\A35C090E\w\AF8C093B\e' completed with exit code '1'`.

``` text
Unhandled exception: System.ArgumentException: Version string portion was too short or too long. (Parameter 'input')
   at System.Version.ParseVersion(ReadOnlySpan`1 input, Boolean throwOnFailure)
   at System.Version.Parse(String input)
   at System.Version..ctor(String version)
   at Microsoft.DotNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.<>c.<Execute>b__17_1(NuGetFramework f)
   at System.Linq.Enumerable.WhereEnumerableIterator`1.MoveNext()
   at System.Linq.Enumerable.MaxBy[TSource,TKey](IEnumerable`1 source, Func`2 keySelector, IComparer`1 comparer)
   at Microsoft.DotNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.Execute()
```

I was wrong in thinking the problem was specific to Linux and macOS. The above commands are from a Windows console log for the failing work item."
"> Thanks for the contribution, but I don't think we'll make this change. It was a conscious decision not to use HttpStatusCode due to its poor naming conventions and data type.

What is wrong about the data type? "
"> would you be willing to go investigate these and to come back with a proposal that we can discuss

Are you asking me to transcribe the CLR access rules? The only ""variable"" is how we define type and assembly identity. Assembly identity is supposed to be defined by` IAssemblySymbol.Identity` but @github points out that the compiler does it wrong. Type identity should be defined, recursively, by name and arity, and containing symbol. The rest is down to the CLR rules for the meaning of the access modes.

---
In reply to: [184489272](https://github.com/dotnet/roslyn/pull/26367#discussion_r184489272) [](ancestors = 184489272)"
"What is going on here? I don't think you're doing something _wrong_, I just suspect a comment will go along way to help the next person maintaining this. (Your commit message describing this commit is also empty beyond the title which isn't helping either.)"
"> for enter case, last token won't be the ""}""

Yes.  But you also check for EOF.  Which i assume you can get after enter.  (If i'm wrong, def let me know... i'm really trying to understand the code, and as i've mentioned, it's not clear ot me).  

Regardless, this whole discussion is helping prove my case :)   This is complex and subtle and it is *not* clear just from looking how this is intended to work.  There are many callers for many user interaction codepaths, and there are many checks going on.  The fact that after going back and forth with you a *dozen* times, it's *still* not clear to my why this is correct, is a strong indication to me that we shoudl *make this code more clear*.

I think it would be reasonable to just nip this entire back-and-forth in the bud and just spend any energy that would have been put into a response here into just putting that effort into clarifying that code :)

At the end of the day, the best you'll be able to do is finally convince me that that code is correct.  And once that happens, we'll still just want to comment the code to help others understand.  After all, if i've spent dozens of minutes on this, and i still don't get it, i'm not sure how this will be for others who are even *less* familiar with formatting than i am.

Thanks!"
`shutdownCode` might give users the wrong idea (thinking relation to `Socket.Shutdown`) -- QUIC spec calls it `errorCode` even when successful (`NO_ERROR`) so maybe that.
"note: this split was intentional to help make it totally clear that this cancellation token was what you shoudl use in this operation and you shouldn't accidentally capture it.

the problem with FixAllContext was that some people ended up capturing it and using the wrong cancellation token later.  i think we should undo this change (or pull it into a separate PR where we can assess it)."
"I don't like pushing it down, except for helpers that are dedicated argument validation helpers for mutliple reasons:

1) It's not clear whether a public API is actually validating all of its arguments if it leaves it up to the methods it calls to do so.
2) When writing an internal method, how do I decide whether or not to do full argument validation? It's inconsistent and confusing if some internal methods of a type do argument validation because they happen to be called from some public API impl, but others don't because they currently aren't called from public API impl. 
3) The methods called from the public API implementation might have different argument names than the public API. They might also have more or less arguments than the public API. Throwing an argument exception with wrong argument name is not very user friendly - it defeats the purpose of having argument name on the exception.
4) Internal calls to the internal methods would do redundant argument validation. 



"
Look valid but also like the wrong place. Shouldn't we make sure that the editor widget isn't firing the event on resize and help all consumer of this event?
What was wrong with the existed `NativeLibrary.SetDllImportResolver` approach?
"This is wrong, we're doing the same with the foreach below, basically propagating the parameters.variables that are an array. "
"oh, look, a similarity with NavigationPage. I think I see a pattern...

I wonder what could go wrong if we were unifying both ? in which scenario would they collide ? please discuss"
"> i'm skeptical this would ahve an effect.

The caller might expect a call to `KeepAlive` to behave _at minimum_ like a call to `GC.KeepAlive`. Since no `ObjectReader` is ever created by this stream, only the minimum keep alive support is required. This is already documented on the property, and is the reason why the delegate was abstracted to a property.

> (something just isn't jiving here)

The code is probably wrong, but the only impact of this pull request is it revealed that the current approach is likely not what we want."
"it is, and the formatting is wrong too, fixing
"
"I might be having something wrong on my preview machine. You are right ,  we need to add something to the repo to verify style, I think I saw something from the NETCore team that does this. "
wait... I think your comment may be a bit in the wrong place here. `Name` isn't wrapped in a SettingContainer. SettingContainer is working properly in a separate discussion thread.
"Looks like something went wrong here:

![image](https://user-images.githubusercontent.com/2193314/109822236-9f97f880-7beb-11eb-975c-6343d0f97979.png)
"
"@github ah I didn't even realize that. I think this change is still closer to the truth, though. The old message was always wrong."
"Hi! I tested the referenced NuGet but unfortunately it hard crashes with the following when its data is populated:

```
2020-11-23 23:46:37.228338+0200 MyApp.iOS[3762:246719] [CollectionView] An attempt to prepare a layout while a prepareLayout call was already in progress (i.e. reentrant call) has been ignored. Please file a bug. UICollectionView instance is (<UICollectionView: 0x7fa9a26d9200; frame = (0 0; 362 543.333); clipsToBounds = YES; autoresize = W+H; gestureRecognizers = <NSArray: 0x600000692df0>; layer = <CALayer: 0x60000000c4c0>; contentOffset: {0, -10}; contentSize: {362, 0}; adjustedContentInset: {10, 0, 0, 0}; layout: <Xamarin_Forms_Platform_iOS_ListViewLayout: 0x7fa9a325ea90>; dataSource: <Xamarin_Forms_Platform_iOS_GroupableItemsViewController_1: 0x7fa9a325f160>>)
>>>>>> TemplatedCell constructor
```

EDIT: It was because I had accidentally left in ViewCell declarations in the data templates (as I was using a ListView earlier). The error message says ""Please file a bug"" so I'll leave this comment here. Maybe the error message could be more descriptive of what went wrong instead of saying to file a bug, as if you have a lot of XAML it's easy to accidentally leave in some ViewCells in the data templates when converting ListViews to CollectionViews."
"I believe you're removing the ""wrong"" `<Import/>`: you should keep this one -- in part because the convention used ~everywhere else is for the `.csproj` to import `Configuration.props`, not the `.targets` file, and also in part so that the `.csproj` can reliably use the contents of `Configuration.props` in the future -- and you should instead remove the `<Import/>` within `build-tools/installers/create-installers.targets`."
I was actually wrong here. Changes are applied to the data source on a background thread. This was allowing the background thread to run and force the update.
"nm, it DOES exist, looking at wrong directory.
"
"> bitlength doesn't count the sign bit

Yeah, that matches the docs: ""Returns the number of bits in the minimal two's-complement representation of this BigInteger, excluding a sign bit."".

I think it's something like

```
int bitLen = bigInt.bitLength();
return (bitLen + 7) / 8;
```

(Might be wrong for negative numbers if it really ""excludes"" the sign bit, vs excludes the cleared sign bit for positive numbers... then `if (bigInt.signum() < 0) { bitLen++; }`)

My expectation from the docs is that positive 0xFF will report signum() as 1 and bitLength() as 8, but export in two bytes.

(8 + 7) / 8 == 15 / 8 == 1

The extractor wouldn't need to change.  This just detects the same thing without going through array export."
"Can you elaborate in the comment as to why we want to retry here? Is the idea that between the last time we tried and now, the other end may have closed, and so now when we try again, we should be able to successfully complete the operation?  And then if we can't for some reason we fall through to throwing because something definitely went wrong?"
"oh my gosh I know exactly what I did wrong. 

This PR was the first time I built & ran the Terminal since coming back from paternity leave. We didn't have the jumplist added when I left. So I mistakenly attributed the longer startup time to _this PR_, when in actuality, the slowdown was probably primarily from the jumplist. That's my bad 🤦‍♂️"
"I think - please forgive me if I'm wrong - you are confusing two methods here:

1. `private static void ProcessAttributes(XmlReader reader, XmlConfigurationElement element)`
2. `void ProcessElementAttributes(Prefix prefix, XmlConfigurationElement element)`

The first method is invoked during the parsing stage. It reads the XML attributes from the XML document and adds instances of `XmlConfigurationElementAttributeValue` to the current `XmlConfigurationElement`

The second method is invoked during the processing stage. It produces configuration key values for each attribute.

To avoid future confusion, I have renamed `ProcessAttributes` (the first method) to `ReadAttributes`.

If I misunderstood you and it was not a matter of confusion, can you please clarify why you think that exception does not belong there?"
"The side effect is that `ReadString` advances the stream cursor. Or, put another way, your code is equivalent to the following:

```cs
context._savedLicenseKeys.Add(key: reader.ReadKey(), value: reader.ReadValue());

private static string ReadKey(this BinaryReader reader) => reader.ReadString();
private static string ReadValue(this BinaryReader reader) => reader.ReadString();
```

Which ostensibly should be equivalent to the following, because all I did was reorder the named parameters:

```cs
context._savedLicenseKeys.Add(value: reader.ReadValue(), key: reader.ReadKey());
```

However, that second example will result in the wrong entries being added to the underlying dictionary. The reason is that side effects are occuring within the underlying stream while the arguments to this method are being evaluated. Pulling the arguments out as temp variables before the method call makes the code read ""top-to-bottom"" instead of ""left-to-right"". This is generally easier for people to understand."
"
> Surprisingly (or not), I found this only affects win32 vim. Other shells including CMD, pwsh and WSL vim are all working properly, which makes me wonder is this something win32 vim should fix? Still, logically all of these characters should not generate numpad events, right? Or should they?...

This is what really bothers me here. Why is it only broken for one particular vim? I'd rather understand that first. Using the numpad to synthesize events should pretty much always work for input... even if you decide to do something dumb like use the numpad synthesis sequence for a Latin Capital A.

"
"The 6 tabs are wrong though. I'm personally fine either way. "
"Ah. The get ancestor call is wrong then. You could have a catch variable in a llama inside a local decl initializer. "
This is wrong (and probably what made the PR bot try to run the device tests).
"> It adds to readability in my opinion (we know what we're dealing with).

I don't think I can agree with this. There is a whole bunch of unrelated things that we can assert here. But we are not doing this. In my opinion this assert hurts readability. It confuses the reader, making him think that some how doing all this here for other methods is going to be somehow wrong. But it won't be. It is Ok to create delegates for other method kinds as well, perhaps language doesn't provide means for that today, but that is not something that this component should worry about in my opinion. It is given a delegate creation to cache, That is all what it is supposed to do, validating the delegate creation is not its job. And knowing what method kind we are dealing with here today doesn't really help because it doesn't affect correctness of what we are doing. "
"This seems wrong. This isn't taking a ref to a variable within the parameter, it's just returning the managed pointer stored in `s.F`. Let's add a PROTOTYPE comment. #Resolved"
"> What is wrong with the transforming? Did I implement the BlockReplacing wrong?

No, the transformation itself looks correct to me (well, there is one issue - `GTF_RELOP_JMP_USED` is not guaranteed to be maintained by this phase, so it'll have to be replaced by a check of the user's oper). It is just happening under conditions that are too lax. `LowerCompare` handles all sorts of relops, so this code will also optimize, e. g. `(x & 1) > 1` to `x & 1`, which is not correct.

>  Could you tell me what the opts are?

There are a lot of options; `opts.MinOpts` in particular means that the compiler is not to perform (almost) any optimizations. You can see it checked in `opts.OptimizationEnable`. It will be set e. g. for Tier0 code, or for methods that are explicitly marked with `MethodImplOptions.NoOptimization`."
"I added the checks and moved the expensive operation as you had suggested. These changes give much better diffs, there are not regressions present. However there is something wrong with the tests on arm64 osx systems. I tried to build and run the clr tests on m1 osx laptop and It didn't give me anything suspicious.
"
"(Might be a dumb question) How do I know if something is going to be in pre-order or post-order morph? I think this optimization could technically be fine in either, but I wonder which one is more ""correct"" in the sense that it can be expanded upon to handle other types of hw intrinsic nodes."
"The verb used is wrong. Syntax doesn't form semantic things like type variable, so an identifier doesn't form a type variable. You might be able to say ""The identifier specifies a type variable P"" or ""The identifier defines a type variable P"" or ""The identifier references a type variable P"". The last two sound best to me, but I think *defines* is correct here."
"`container` seems like the wrong name. It comes from `getContainingFunction`, but that's irrelevant to the rest of the code ... might just call it `fun`."
Just the not crashing. The position being wrong causes crashing.
"Ignore my comment about version numbers - I passed the wrong arguments to diff.
"
"Something is messed up with git. My local file doesn't show this anymore, yet `git status` is clean and `git blame` shows the wrong content...
"
"since we are making errors better in this area, this one can use some attention. specially that you would get it if you are accessing a protected property, in a derived class but on the wrong object, which is not intuitive as a private.
"
"This seems wrong for IndexSignature.
"
"> I'm seeing this on [sharplab](https://sharplab.io/#v2:C4LghgzgtgPgAgJgIwFgBQcAMACOSB0AcgK5QCmATgJYDGEA3OunAMy4LYDC2A3utgNxs4AFmwBZABQBKXv0EBfeQOVDcSAGzYAamRrAA9hTGcANmCgAHJJN36jYgB4AaHXsPHsUKgDtXdjzEoMEdpVUEI7ABeAD43e2N8cV9bdwckkMkXL19pV2DQxjQlNHQgA=) with the default settings.

sharplab uses some stable .net core 3.0 runtime and I suspect something is broken in master (but maybe I am wrong)
"
"Good afternoon. I'm out of context here, but reading your implementation 
i remember an article.

https://webtide.com/eat-what-you-kill/

It is used in jetty since 9.3
It inverts the producer loop so it dispatchs the next read instead of 
the actual read (wich process in place) if i dont undertstood it wrong.
Maybe its suitable here, just in case.
 

"
"@github I think this line is required. if this line changes into `Debug.assert`, we got a assertion error in wrong context.

```
  3 failing

  1) compiler tests for tests/cases/compiler/moduleElementsInWrongContext.ts ""before all"" hook:
     Error: Debug Failure. False expression:
      at Object.assert (eval at <anonymous> (built/local/run.js:52497:13), <anonymous>:1533:23)

  2) compiler tests for tests/cases/compiler/moduleElementsInWrongContext2.ts ""before all"" hook:
     Error: Debug Failure. False expression:
      at Object.assert (eval at <anonymous> (built/local/run.js:52497:13), <anonymous>:1533:23)

  3) compiler tests for tests/cases/compiler/moduleElementsInWrongContext3.ts ""before all"" hook:
     Error: Debug Failure. False expression:
      at Object.assert (eval at <anonymous> (built/local/run.js:52497:13), <anonymous>:1533:23)
```
"
"@github I was wrong and the braces are not optional. I just removed `hasBraceShell` and added a simpler check.
"
The GitHub Check are linking to the wrong run of CI. This is the correct CI for this PR and all checks are passing - https://dev.azure.com/dnceng/public/_build/results?buildId=894709&view=results. Merging
"> The strategy of intrinsifyng random methods in up-stack libraries can quickly result into unmaintainable codebase.
> 
> Is it really that important to speed up json parsing by 5-10% with the interpreter?
> 
> I think we are striking a wrong balance between performance and maintainability here.

I'd also provide simple for-loops implementations for different ""unrolled by hands"" things over BCL, e.g. https://github.com/dotnet/runtime/blob/master/src/libraries/System.Private.CoreLib/src/System/SpanHelpers.Byte.cs#L98-L186
can be implemented in 3 lines of code = smaller size, better interp performance as far as I understand."
"A couple notes:

1. The failing test case is a little weird after all; the globals only show up because of the cumulative parsing weirdness that comes from the several preceding lines. My impression looking at that test was that every line was intended to be a clean parsing context. It’s valuable to ensure that a half-written statement has good completions as you’re writing it, but less so that the fourth half-written statement in a row behaves well. I would actually just split that test file up into a file per line.

2. Having an `any` or undefined contextual type is a little too restrictive. You also want to account for `object`, `unknown`, and possibly string index signatures:

    ```ts
    declare function f1(obj: unknown): void;
    declare function f2(obj: object): void;
    declare function f3(obj: Record<string, any>): void;

    declare var foo;
    f1({ /**/ });
    f2({ /**/ });
    f3({ /**/ });
    ```

    But the index signature case brings up the question of whether the types need to match up:

    ```ts
    declare const foo: string;
    const obj: { [key: string]: number } = { /* `foo` here? It would error because string is not assignable to number */ };
    ```

    On one hand, we don’t do any kind of filtering of member completions in the presence of a contextual type, but that’s more justifiable because you might dot off of one and continue the expression, resulting in a different type. More practically, it’s going to be too expensive to check the assignability of every identifier in the completions list, so I think the choice is between offering all the completions, even wrong ones, or none.

    You also want to test cases where the contextual type is a type parameter:

    ```ts
    declare function foo<T>(obj: T): T; // and another where `T extends object`, maybe `T extends {}`
    var blah: string;
    foo({ /**/ })
    ```

    I think this might Just Work once you consider `unknown` and `object` contextual types, but it’s worth testing.

Thanks for working on this!"
"> I believe we should instead use these intrinsic functions: dotnet/msbuild#5171 (comment).

We should also remove the ```TargetsX``` properties as well, as we have now this support. any thoughts on moving towards that ?

```TargetsX``` properties are  wrong because they rely on the fact the tfm should be passed as global property. Removing this will help us to use <TargetFramework> property in projects and also use innerbuilds directly."
"> Clearly I was wrong about the rules, then. This code executes today: [Playground Link](https://www.typescriptlang.org/play?#code/GYVwdgxgLglg9mABAdwE4EMAOBhANugZwIApN0MBbALkXTAE8BKRAbwChFPFUBTKEVEgj4iiAOoZMmHgBNWHLouBw4xZu0WauvfoMRlKAbgVaAvicTnTQA)
> 
> Probably worth testing all of the cases and see what's actually disallowed?

Maybe the intution was ok, but just regarding `classDeclaration`, I'll try, otherwise will go through all cases"
"I added the MSBuild task and targets to validate that the attribute and version is correct.

At first I thought about just doing a simple validation of `ExpectedVersion` == `InformationalVersion.Substring(0, IndexOf('+'))` and error if that was false in a simple MSBuild target, however, even if `InformationalVersion` property is correct, the attribute could be wrong, since a public API relies on the attribute being correct I decided to add a task that cracked open the assembly and inspected the attribute. Please let me know if you think it is overkill to add a task and I can revert it and do it in the simple MSBuild way that doesn't crack open the attribute.

Second, I started using System.Reflection.MetadataLoadContext, however, since this is an MSBuild task, I was getting:
```
C:\repos\runtime\Directory.Build.targets(43,5): error MSB4018: The ""ValidateAssemblyInformationalVersion"" task failed unexpectedly. [C:\repos\runtime\src\coreclr\src\System.Private.CoreLib\System.Private.CoreLib.csproj]
C:\repos\runtime\Directory.Build.targets(43,5): error MSB4018: System.IO.FileNotFoundException: Could not load file or assembly 'System.Reflection.MetadataLoadContext, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified. [C:\repos\runtime\src\coreclr\src\System.Private.CoreLib\System.Private.CoreLib.csproj]
C:\repos\runtime\Directory.Build.targets(43,5): error MSB4018: File name: 'System.Reflection.MetadataLoadContext, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' [C:\repos\runtime\src\coreclr\src\System.Private.CoreLib\System.Private.CoreLib.csproj]
C:\repos\runtime\Directory.Build.targets(43,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.ValidateAssemblyInformationalVersion.Execute() [C:\repos\runtime\src\coreclr\src\System.Private.CoreLib\System.Private.CoreLib.csproj]
C:\repos\runtime\Directory.Build.targets(43,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [C:\repos\runtime\src\coreclr\src\System.Private.CoreLib\System.Private.CoreLib.csproj]
C:\repos\runtime\Directory.Build.targets(43,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [C:\repos\runtime\src\coreclr\src\System.Private.CoreLib\System.Private.CoreLib.csproj]
```

The only way to do that was to publish instead of build the installer tasks, and that would've been more complicated since you need to specify the core library path and assembly search paths, so if we want to enable this on other projects in the future it would involve more logic. So I decided to go with MetadataReader since you don't need to load any dependencies and you can just get the info needed from there.

Let me know if you have any objections or suggestions.

I validated by removing my fix and I got an error as expected:

```cmd
C:\repos\runtime\Directory.Build.targets(35,5): error : AssemblyInformationalVersion 5.0.1-dev.20609.11 doesn't match expected version 5.0.1 in: C:\repos\runtime\artifacts\bin\coreclr\Windows_NT.x64.Release\IL\System.Private.CoreLib.dll [C:\repos\runtime\src\coreclr\src\System.Private.CoreLib\System.Private.CoreLib.csproj]
```
"
"> I'd like to delete it and see if our tests fail.

They do. Check out this crazy test with 1000 deep dependency hierarchy.

https://github.com/dotnet/runtime/blob/1d9e50cb4735df46d3de0cee5791e97295eaf588/src/libraries/Microsoft.Extensions.DependencyInjection/tests/DI.Tests/ServiceProviderCompilationTestData.cs#L6-L1979
"
"@github Investigating this a bit more, is there a way to avoid using TickCount/TickCount64?
The reason is that this information is not available in a minidump. DateTime.Now is available (the time the dump was written), but not TickCount/TickCount64. As a result, expressions involving TickCount won't work on dumps.
Currently, in minidumps, the VS debugger just evaluates TickCount in the current debugger context, which is wrong and instead should spew an error that we can't evaluate Environment.TickCount. DateTime.Now is also currently evaluated in the current context but that's fixable to instead plumb through the time when the minidump was collected."
">> If we don't know what should be the default value of bool returnFinalTarget ...

> I'm not opposed to removing the default but I generally don't like ""we can't agree so we make the user choose""-line of thinking. The reason being that we're the experts and most users won't be.
> ...
> Curious what @github thinks.

My standard starting position is to ask the FDG what they have to say about it:

> DO provide good defaults for all properties and parameters (using convenience overloads), if possible.

OK, so if it's possible we should provide a good default.  So, what makes a good default in this case?  I think ""predictability"".

Let's imagine that we didn't have the parameter at all... so it's just `ResolveTarget()`, what would that do?  I feel like it would return the target value of the link... so non-recursive/non-final.  Now, in a future version, someone says ""it'd be nice if I didn't have to write the while loop myself, especially because I keep forgetting to put in an infinite loop detector"", so we add an overload.  The zero-arg version is still doing a single target resolution, because that's the method name.  The parameter then can control an ""actually, I want to keep going"" behavior.

So now lets just collapse that and look at it with a default parameter.  The name of the method is ResolveTarget.  Resolve is, admittedly, slightly ambiguous, so let's pretend it's named GetTarget.  Well, GetTarget is obviously ""give me the target value of this symlink"", so `link.GetTarget()` would be non-recursive.  To me, a similar thing applies when we let Get be called Resolve.  If we think that's where the ""but Resolve feels like it should keep going until final resolution"", then perhaps the better change is s/ResolveTarget/GetTarget, and now ""once"" is the ""obvious"" behavior, and ""keep going"" is the opt-in behavior.

The problem with recursive being the default is that it has unexpected behaviors.  If we have no work limiter, then mutually referential symlinks cause an infinite loop:

```
$ ls -al foo bar
lrwxrwxrwx 1 jbarton jbarton 3 Jul  8 09:38 bar -> foo
lrwxrwxrwx 1 jbarton jbarton 3 Jul  8 09:38 foo -> bar
```

If we do have a work limiter then mutually referential symlinks will.. do something.  Throw, return the last one it saw when it exhausted the work factor, something.  Whatever it does, you probably didn't expect it.  Sure, the docs'll mention it, but no one reads the docs until something goes wrong.

To me, from a logical perspective (of how I think about things), ""once"" is the correct default.  To me, from a security perspective (not ""hiding"" unexpected behaviors in server products), ""once"" is the correct default.  So, to me, we should just figure out what makes us happy with that choice (e.g. renaming Resolve to Get)."
"Tagging subscribers to this area: @github/area-system-xml
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

These looks wrong both according to the comment on the method and the implementation, but I'm not familiar enough with this code to know what this will actually affect, how to test it, or why it hasn't caused issue previously. @github?

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>stephentoub</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Xml`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> NOTE x64/x86 diffs are unrelated (not reproduceable locally) - spmi job picked a wrong baseline jit for them it seems

It picks the same baseline for x64/x86/arm/arm64...so all the diffs are related to that baseline. The question is why it picked wrong baseline, perhaps we didn't catch up or something in jitrollingbuild? @github - any idea?

```
Current hash: 33daf4a951aeed31c8a6128d1822e3a4d24e72b7

Invoking: git merge-base 33daf4a951aeed31c8a6128d1822e3a4d24e72b7 origin/main

Baseline hash: ac0a35b063c7767618468636b782b19a632393b2

Invoking: git log --pretty=format:%H ac0a35b063c7767618468636b782b19a632393b2 -20 -- src/coreclr/jit/*

try 1: 7fcd1f6e45d937b9835c6cf2b0a2f76e0c180e87

try 2: cbc4cd873ed1f2362265e702dc7dfeaa76c5ec16

Warning: the baseline found is not built with the first git hash with JIT code changes; there may be extraneous diffs

```

I see that arm asmdiffs timesout which we are seeing more recently.

https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-64354-merge-09dda46f624849feb7/unix-arm/1/console.9af3ba57.log?sv=2019-07-07&se=2022-02-16T09%3A14%3A36Z&sr=c&sp=rl&sig=AT7FG1c8tKPdDsxHJBjql8EFj1a2cu6kox%2FzpwXp0Ws%3D 

I would probably rebase and double check with official baseline to make sure there is nothing suspicious."
"> @github is going to take a look at this as a secondary review in the next couple days and get it merged.

@github I think you've got the wrong Drew!"
"that is the issue... Application does not have a UI thread component. My initial case was to say that all bindable objects need a UI thread - like all the other platforms do, but unfortunately this breaks a lot of tests and things. We can change it later and just throw in the ctor if not on the UI thread, but that is for another PR.

However, right now if you create an object on a thread with a dispatcher, that is the thread you must stay on. If you do a background thread, then it will try find it each time and look up the UI hierarchy or fall back to Application.

It is wrong, but this is what forms did.

The correct solution is to not allow UI objects to be created off the UI thread. This should throw if null is returned: https://github.com/dotnet/maui/pull/2862/files#diff-ebb14ec14b8baeffdd7b0ae40ffc8bf0e8944f76fdea50fcbc737fb142bfb44aR24

I want to do that later. However, this will break people that create objects of the UI thread."
"I don't care about it that much (It's definitely a ""you're holding it wrong"" situation IMO), but this failure mode is particularly bad."
"I could argue that the current behavior is wrong. It breaks the contract that OnAfterRender gets invoked when the batch has rendered on the target display. (In whatever form or shape that takes).

Given that the base class is not associated with any display technology and that the render never finishes, it makes sense to switch the implementation for a cancelled task.

I understand the ""obscure coupling"" argument, but I also believe that its not an obscure detail but front and center to the onafterrender contract. We've been telling developers that OnAfterRender runs when the display has been updated and references have been populated.

Our original default was wrong, because we would run it in a context where we can't actually perform a render, so returning Task.CompletedTask is bad.

My reasoning is that, Task.CancelledTask is the right thing to do because the base renderer will never complete an update and is only able to render static HTML. Derived classes provide the ability to update the display and complete a full render pass.

We also have quite a good amount of tests describing this behavior, so I'm not concerned about breaking anything without noticing.

Does ComponentContext.IsConnected change in circuits to signal disconnection? If so, I would stay away from using it for this, as we shouldn't simply avoid running the callbacks if we happen to hit !context.IsConnected

I do see your concerns but I think despite this being used to avoid running OnAfterRender callbacks, switching to Task.CancelledTask is the right thing to do for the base class, it just also happens to fix the problem.

Keep in mind that in RemoteRenderer we also cancel the completions when we dispose the RemoteRenderer, which is aligned with what this does here.
"
"Agreed, looks like something is publishing RTM packages to dev channel?  Or subscription here is wrong??? @github  @github @github"
"Don't create a ReadOnlySequence, that's the wrong overload 😄 "
"> Can you rename this so we make sure we're not capturing the wrong parameter instance in the cached function?

I could but it would make it possible to use the wrong ParameterInfo inside the function which is what we're trying to avoid.

> Making it static would be better but that means you need to pass more stuff.

Right. We'd have to store the cached MethodInfo somewhere outside the Func. I don't think it's worth it, and I don't want to reset the rc1 build especially for this."
"I think I had the right contents, just the wrong sha earlier.  Just to be safe, I've redone this PR. "
That indentation was driving me crazy.
">StringComparison.OrdinalIgnoreCase [](start = 43, length = 34)

This looks wrong, C# compiler does not ignore case.  #Closed"
"> We may also want to verify that each flow capture ID has exactly one corresponding  IFlowCaptureReferenceOperation.

This is a wrong expectation. A captured result can be referenced multiple times.

---
In reply to: [163294236](https://github.com/dotnet/roslyn/pull/24358#discussion_r163294236) [](ancestors = 163294236)"
"Here you can see that if CanApplyChange returns false but CanApplyCompilationOptionChange returns true, this check passes. If CanApplyChange returns true, it passes regardless of what CanApplyCompilationOptionChange 
 returns. Therefore VisualStudioWorkspace returning true for  CanApplyChange(ApplyChangesKind.ChangeParseOptions) and CanApplyChange(ApplyChangesKind.ChangeCompilationOptions) must be wrong, since it doesn't support changing arbitrary options.
"
To be clear: i'm not saying it's wrong to allow the user to write: `public int Property readonly => 42;`  I get that that's part of the *language feature*.  What i'm saying is: i would not *implement* this by havin the `readonly` keyword belong to the ArrowExpression node.  It should belong to hte PropertyDecl node.
"My initial thought was that I wanted to test here with a couple basic scenarios to make sure this feature works at all. Given I'm strictly using the position-based TypeInferrer right now, any problems would be attributed to the TypeInferrer, or would require a change in my approach here, so I would add the tests to the appropriate spot at that point. 

And we have lots of TypeInferrer tests. I guess the question is if they're testing the scenarios we care about here. Anyway, I'm happy to grow this test list, I'm just not sure where to draw the line to avoid duplicating TypeInferrer tests, and to avoid having the tests in the wrong location. Thoughts @github ?"
"1. does this work properly with cancellation?  i.e. giving you cancellation-exception, and not aggregate exception?
2. does this work properly with other exceptions? 
3. we have asynchrony here, trying to push synchrony down to this level feels wrong.  feels like we should go *upwards* spreading asynchrony instead."
"> You don't think is worth doing that?

What does that test do on old ICU versions? Crash or just return wrong result? "
"1. alais
2. what a crazy case :D"
@github I think you mentioned that this code may have to change based on presence of attributes. Is there a test that breaks if we do the wrong thing here?
@github the 2x `undefined` seems wrong
"This function currently needs to return an `IEditorPane`, so I was calling `openEditor` to get that. I also seem to remember that replaceEditor does not show the replacing editor, although I could be wrong"
"> We have all information to reliably make the decision here, why would we want the consumer to to do extra work, given that the condition is still going to be pretty much the same.

Because it feels like this is the wrong place to make that decision. We can enumerate the possibilities here today, but that feels fragile. It seems like the best place to state the required modifiers is the component that actually cares about that requirement. I'm not going to block this PR on it as it's minor, but it really doesn't feel like the appropriate location.

---
In reply to: [441020808](https://github.com/dotnet/roslyn/pull/45220#discussion_r441020808) [](ancestors = 441020808,441015421)"
"Oh I see that the function does that, but then I think it has the wrong name..."
"We used to used to do something like ""`80X 80C` (delete 80, move 80 right)"" or ""`K 80C`"", right? Would that still work here? After all, we want the spaces to appear on the output but the wrap state to be maintained

is the real problem that we're not putting the cursor at the end of the line, and the spaces make up for that? and suppressing the spaces would mean we move the cursor wrong?"
"It actually turns out you're wrong :wink: and I was wrong for the same reason.

He asks for Size() _AFTER INSERTING THE NEW PROFILE_"
"@github Just tested the legacy Cell gallery with the old FormsApplicationActivity on API 15 and API 23 - both `SwitchCellView` and `TextCellView` seemed to work fine. What about it makes you think it won't work? Maybe I'm looking at the wrong thing.
"
"There's no pipeline using the definition in public, so you can't trigger this on a PR. It's not wrong per se, but it's safer to not let it run in case someone accidentally tried to. (Not sure it would even run correctly as it will try to access a bunch of secrets and tasks only available internally)"
"I think we should report that the method was wrong regardless of the feature being enabled.
The errors should provide you a path (instructions) to enabling the feature and putting an appropriate method in place. #Resolved"
My own branch was wrong.  I forgot to name it.
"This comment seems wrong, as there is no `null` case.
Here's my understanding:
- `string`, `int`, `T` are unannotated
- `string?`, `T? where T:class` are annotated
- `int?` and `T? where T:struct` are also annotated, if I understand properly

In contrast:
- `int`, `T where T:struct` have `IsNullable==false`
- `string`,  `T where T:class` have `IsNullable` false or null depending on `NonNullTypes` true or false context
- `string?`, `T? where T:class`, `int?` and `T? where T:struct` have `IsNullable==true`
- I'm not sure about unconstrained `T`
- `T?` with unconstrained `T` will be disallowed (not yet implemented) #Resolved"
"> I see vs-threading as the writing on the wall for the eventually elimination of widespread littering of ConfigureAwait. We aren't ready to go down that road yet, but it's the target outcome.

I don't like preemptively changing styles when it's not been guaranteed what the final state will be.  In this interim period, for example, it does lead to confusion (i.e. both these threads where i'm still not sure if this code is correct :)).  

I'm not trying to hold anything back.  I'm literally just trying to figure out what the rules are and how to reason about this code given those rules.  Right now it's not at all clear to me (even if i take a stance of: ""AbstractPackage is special and goes its own way"").  

Let's just look at this method on its own.  First, i have no idea how to reason about what thread it is actually on. It says LoadComponentsInUIContextAsync.  However, there is no assert to actualy verify that it's on the UI context.  Then, it performs a bunch of async calls that are themselves not clear to me as to their intent (though i can come aronud around to the idea that if you knwo this is JTF, you can maybe squint and view no-configure-await as being intentional).  Then, it runs code that affectively says ""if i'm not on the UI thread, bad baddy badness will occur"", but i see nothing that ensures that safety.

Overall, i find this pattern highly confusing and very difficult to reason about.  Invariants are not made clear, and it seems far too easy to accidentally do the wrong thing."
dumb question... why are these node just refactoring tests.  and why are we not just doing a TestMissingAsync?
Bleagh.  Something is really wrong with all the progress tracking code in hte IDE currently.  We should be passing along the real progress-tracker that is used for doing progress updates in the dialog while the fix applies.  but that's definitely not your fault here.  so don't worry about it too much.  i'll have to see if i can fix this all up at some point :(
Note that the diagnostic we produce will squiggle all of `Test<System.String>` instead of just `System.String`. This is maybe not perfect (why not squiggle the particular type argument that's wrong?) but shouldn't impact usability much.
">IDiscardOperation, IPatternOperation [](start = 56, length = 36)

This seems wrong. `IDiscardOperation` is a discard expression, which is not a pattern. Feels like we should have a separate `IDiscardPatternOperation` in a follow up PR. #Closed"
"Could you please share the test that you are using to measure `SimpleCoreIdSpeedCheck` reliability, and the results that you are getting?

I have build the following test to measure the reliability under harsh conditions (this is to be compiled directly against System.Private.Corelib - the only change that I have done was to flip SimpleProcessorNumberSpeedCheck to public):

```csharp
using System;
using System.Threading;

class Test
{
    static void Main()
    {
        for (int i = 0; i < 2 * Environment.ProcessorCount; i++)
            new Thread(() => { for (;;) GC.KeepAlive(new object()); }).Start();

        int fast = 0; int slow = 0;
        for (int i = 0; i < 1000; i++)
        {
            if (ProcessorIdCache.SimpleProcessorNumberSpeedCheck()) fast++; else slow++;
        }
        Internal.Console.WriteLine($""{fast} {slow}"");
    }
}
```

I get results like:

```
C:\runtime\artifacts\bin\coreclr\Windows_NT.x64.Release>corerun test.exe
703 297
```

It means that this method gives wrong answer 1 out of 3 times under harsh conditions. That does not look very good. If I replace the early out with a counter (https://github.com/jkotas/runtime/commit/38ba7a415af2a6ad9c55687d1d2cef588310a9f9), I get results that look much better:

```
C:\runtime\artifacts\bin\coreclr\Windows_NT.x64.Release>corerun test.exe
1000 0
```"
"it cannot be.  however, i didn't want to expose .Add and .AddIfNotNull.  Because then the caller woudl have to pick, and they might get it wrong.  so i *only* exposed AddIfNotNull to make it clear that you're *always* getting those semantics here.  The array will *never* have null in it."
"We may also want to scope to using the TypeScript version just to be safe. That way if something does go terribly wrong, users could point to their own ts install as a workaround."
"Yes. Just because there is no _extra_ work to be done, I didn't want the API to be wrong. 

Example: 

```csharp
var renameInfo = await Renamer.RenameDocumentName(document, newname, ...);
var solution = renameInfo.UpdateSolutionAsync(solution, cancellationToken); 
```

This code should always update the document name, even if there's no symbol changes to be made (or header changes in the future)"
">#pragma warning disable IDE0055 [](start = 12, length = 31)

nit: What's wrong with the formatting? Should we file an issue to refine that analyzer? #Closed"
"> Thanks! The name is actually `ExtractNarrowingSaturateUnsignedLower`. I got concerned for a second thinking the _unsigned_ method didn't exist 😮.

Ops, got this wrong"
"Wait, I'm dumb (loooong day). This would be a good workaround for the problem. Polling for thoughts from the team."
"> Spec is wrong

I drafted the spec, and I agree"
"My interpretation was that the comment was about the namespace, not the dll.

@github what dependency order do we want?
1. `Connections` --> `Sockets` OR
2. `Sockets` --> `Connections`

For me it seemed kinda obvious that 2. is better, since `System.Net.Connections` is intended to contain abstractions, not implementations. Was I wrong?"
"I thought interfaces didn't count in ""base type"", but looks like I was wrong ([spec](https://github.com/dotnet/csharplang/blob/master/spec/classes.md#type-parameter-constraints)).

I'll revert to ""base classes"" here then, since records are classes."
"Hi guys, just wondering if somebody can help me to figure out what am I doing wrong getting below exception after update to 3.6.0.264807 published Tuesday, March 19, 2019?

![image](https://user-images.githubusercontent.com/18675847/54688476-9227f780-4b15-11e9-8719-5b5862d899d4.png)
"
"I did not include `GetSettingsForProfile` in `AppSettings` because of the discussion on the other thread.

The way I'm imagining it, `TerminalApp` would now be responsible for...
1. creating a `TerminalSettings` from the `AppSettings`
2. passing that down to the `TerminalControl`

Because `TerminalSettings` is now a WinRT object in TerminalApp, it makes sense for TerminalApp to be responsible for synthesizing the `TerminalSettings`. So, adding a `GetSettingsForProfile` to `AppSettings` kinda breaks that abstraction separating the responsibilities of AppSettings and TerminalApp.

So I'm resolving this for now, but let me know if I'm thinking of this wrong."
"> > Hi.
> > 
> > 1. How does the component calculate the space for the content when expanded? As a test I added the expander around a vertical chat list of mine, and this is the result:
> >    ![Temp](https://user-images.githubusercontent.com/60286968/79513737-34821980-804d-11ea-84d1-13d954f7fbab.gif)
> >    As can be seen, the expander only shows around half of the height of the content. Is this a bug or am I doing something wrong?
> > 2. I set the header up as such:
> >    `<StackLayout Orientation=""Horizontal""> <Label Text=""Test2"" /> <Label Text=""^"" HorizontalOptions=""EndAndExpand"" /> </StackLayout>`
> > 
> > Just having a label is of course not enough to denote a foldable area, as the customer would never know it's a tappable widget. So I wanted to test having an upwards arrow indicator that turns into a downwards arrow when expanded. I couldn't find any easy way of doing it. Please advice on how to add a visual element that toggles between two states depending on whether the expander is folded or not. If this is not supported I'd urge to add support for it as I can't see much use for an expander that can't visualise its state.
> > Thank you.
> 
> Do you use ListView?
> I don't think this control will work with ListView. Now there are several bugs filled for Expander+CollectionView.
> 
> Try to user ScrollView+StackLayout. Should work

Thank you for the reply.

I am using a combination of virtualised rendering and collection views. The vertical part is done by a virtualised layout. I can play around with removing it but would rather see all scenarios supported.

Imho one of the largest drawbacks with Xamarin is that you can't just add UI components and have things work, as there's always some incompatibilities between the components. I don't think this should make its way into the main repo unless it works in all scenarios. It is not a good look if you have to rewrite your UIs several times just to find a permutation of components that works.

Also, any pointers regarding toggling a visual element, which I think is mandatory for the consumers to understand that it is a foldable element? I really think it should be doable straight in XAML.

Thanks!"
"> Oh yeah, that's right 0... there are ZERO Unit Tests that cover this concern.

Yea @github created the PR yesterday and it's not merged and it's being actively worked on. 

> This is exactly my point on what Xamarin.Forms should be doing.

It will. See previous comment. If something is missed making your code untestable create an issue and we'll abstract and fix

Anything that currently exists that gets testability broken should break our xplat tests. If it doesn't then our xplat tests are lacking and we'll add more. 

> This is exactly why we've been saying for a long time that Xamarin.Essentials was never architected to be directly used by anyone who wants to test their code.

My comments were specifically targeting this statement about how X.E was architected to make testing impossible which is a statement I don't understand.  I'm first just establishing that Essentials is fine and doesn't need interfaces and then we build out from there. If there's something fundamentally wrong with Essentials that will make it impossible for us then let's fix that. 

But from your most recent comments it sounds like you're totally fine with us depending on essentials and that essentials itself is fine but that we should just be careful to not break forms xplat testability. Which we will be. 
"
"Maybe this is an argument to add `BinaryPrimitives.htonl`, which would encapsulate the check and make the call sites cleaner? Right now I think this API sits on `IPAddress`, which is the wrong layering."
"The message is the wrong way around, isn't it?

```suggestion
                    Assert.True(actions.Length <= codeActionIndex, ""An action was expected at the specified index when none was offered. Offered actions:"" + offeredActions);
```"
Checking for AF_INET was simply wrong before?
"We don't understand how this code works either. If this is wrong, let's just fix it here."
"`VisitConversion` is used in many places. This change is specific to coercion of arguments.
Also, it would seem wrong for `VisitConversion` to generate a conversion. #Closed"
spacing now looks wrong here
not sure why we had the wrong code here... Also XA0002 does not appear to be used anywhere in the repo...
"It's dumb. `allowEndExclusive` is now a param that's not referenced anywhere... but like, it is, it's just hidden behind an `assert`."
"Given that we're immediately returning, there is no ""context"" to this message. *Anything* could cause it.  Additionally, this message looks very similar to the `GetModuleFileName failed` message, meaning *I* will get confused when trying to deduce what went wrong. :-)

The messages should thus be updated to mention what's happening, e.g.

```cpp
log_warn (LOG_DEFAULT, ""Unable to get HANDLE to `libmono-android.debug.dll`; GetModuleHandle returned %d\n"", ret);
```"
"Right, but I do not see anything wrong with the existing behavior. Attaching all dynamic to the default context and the one-and-only Anonymous DynamicMethods assembly should work just fine."
"If only the CI could tell me what exactly is  wrong with the formatting, I wouldn't need to run a code format from my PC 😑😑

ktLint and detekt on android are much helpful in this regard"
"The `ToArray` method additionally depends on `ICollection<T>.CopyTo`. I could duplicate the logic for `ICollection` however using the untyped `ICollection.CopyTo(Array)` method felt wrong to me in this context. I think we could simply use `ICollection.Count` to presize the target buffer:
```csharp
const int DefaultCapacity = 4;
T[] arr = new T[source is ICollection icu ? icu.Count : DefaultCapacity];
```"
"this lines makes me feel oogy (the GetValueOrDefault()).  I'm not sure if it's right or wrong, or if it will cause problems.  it just makes me uneasy :)"
"what I meant is 

```C#
if (!HasValue && start != 0)
{
    // throw here
}
```

imagine someone passing like `IndexOf('a', -1, x)` or passing `IndexOf('a', 1_000_000, x)` . it is obviously wrong regardless of the string segment has a value or not. If you didn't throw, why we throw with similar values when the string segment has value then?"
"> the ""Generate class"" refactoring, which produced `private class C`

Yeah the refactoring generates the class in the wrong place. This is tracked by https://github.com/dotnet/roslyn/issues/49649."
"It should actually be a nullable field since not all ctor overloads set this - the comment is also sometimes wrong, I'll remove it."
Is it just a matter of the wrong exception? If so that may be a test issue... we should look at the similar test for Send and make sure we are testing the same thing here.
"why `base_class` ?

if you add `MyType: NSString, IARAnchorCopying` then `NSString` (the base class) won't implement `IARAnchorCopying` and continue - but that's wrong since the type `t` claims conformance to the protocol and does not have the required .ctor"
"oops, was simply copy/pasted on the wrong line (comment is fine)"
"Add `[DisableDefaultCtor]` when a `[DesignatedInitializer]` is present. It's likely unusable and, if we're wrong, it's easier to add later than remove it.
"
Why is it ok to remove these assignments?  Is the comment wrong?  Are these writes not visible in the case of an exception?
"I wonder if we really need this.  Presumably either the timeout is getting passed into this from something in the library, in which case it can already have validated it, or it's coming from something in the source-generated implementation, at which point all of this code is the user's and if they want to mess things up by supplying a nonsense timeout, they're only messing up their own code.

I could be wrong about that, but it'd be worth double-checking. #Resolved"
"The parsed exponent plus the implied exponent need to be in an appropriate range, sure. Bit it is not correct to limit the _parsed exponent_ in isolation. For example, for the number `100000000000000000000e-20` we have a parsed exponent with a magnitude of `20`, but the final number has an exponent of `0`. I can do the same thing with 16 thousand digits instead of 20 digits, and then your code gives the ""wrong"" answer of overflow.
"
"Overriding `ToString` is bad (suggested output by `VerifyDiagnostics`):

```
// (14,22): error CS1503: Argument 1: cannot convert from 'method group' to 'int'
//     delegate T F2<[A(Invoke)]T> ();
Diagnostic(ErrorCode.ERR_BadArgType, ""Invoke"").WithArguments(""1"", ""method group"", ""x"").WithLocation(14, 22),
// (11,8): error CS1503: Argument 1: cannot convert from 'method group' to 'int'
//     [A(Invoke)]
Diagnostic(ErrorCode.ERR_BadArgType, ""Invoke"").WithArguments(""1"", ""method group"", ""x"").WithLocation(11, 8)
```

From test:

```
Microsoft.CodeAnalysis.CSharp.UnitTests.AttributeTests.Bug8772_TestDelegateAttributeNameBinding()
```

Again this is wrong due to #7204
"
"""yep"" sounds kinda dangerous, what if there's an exception? should we try-catch and clear `destination` in case something goes wrong?"
"This is basically protecting from these asserts in the emitter:
```c
#if defined(TARGET_AMD64) && !defined(UNIX_AMD64_ABI)
                // If localloc is not used, then ebp chaining is done and hence
                // offset of locals will be at negative offsets, Otherwise offsets
                // will be positive.  In future, when RBP gets positioned in the
                // middle of the frame so as to optimize instruction encoding size,
                // the below asserts needs to be modified appropriately.
                // However, for Unix platforms, we always do frame pointer chaining,
                // so offsets from the frame pointer will always be negative.
                if (emitComp->compLocallocUsed || emitComp->opts.compDbgEnC)
                {
                    noway_assert((int)offs >= 0);
                }
                else
#endif
                {
                    // Dev10 804810 - failing this assert can lead to bad codegen and runtime crashes
                    CLANG_FORMAT_COMMENT_ANCHOR;

#ifdef UNIX_AMD64_ABI
                    const LclVarDsc* varDsc         = emitComp->lvaGetDesc(var);
                    bool             isRegPassedArg = varDsc->lvIsParam && varDsc->lvIsRegArg;
                    // Register passed args could have a stack offset of 0.
                    noway_assert((int)offs < 0 || isRegPassedArg || emitComp->opts.IsOSR());
#else  // !UNIX_AMD64_ABI

                    // OSR transitioning to RBP frame currently can have mid-frame FP
                    noway_assert(((int)offs < 0) || emitComp->opts.IsOSR());
#endif // !UNIX_AMD64_ABI
                }
```
They seem valuable to keep for cases where the out-of-bounds access was unintentional or the offsets became wrong for some other reason."
"That example above is pretty much is the test case. The code in question was just checking whether the type could be constructed, so merging a construct signature into the class should have been enough to trigger the wrong code path."
"What does WinHttpHandler do for these inputs?  Is it doing it ""wrong"", and if so, is that an issue with WinHttpHandler or with winhttp?  Do we have WinHttpHandler tests for this?"
What's the penalty for providing the wrong key in this PR?
"> Do we need to set isReferenced on both Class and method? Or will only Class be sufficient?

I'm pretty sure `Class` will be sufficient although I could be wrong.

> Do I need to use resolveJSDocMemberName directly in resolveEntityName?

I think it might actually be the other way around, because after I think about it, I don't want the `@github` resolution rules to apply anywhere else. So the call you added to `resolveEntityName` should probably turn into a call to `resolveJSDocMemberName`, which itself will call `resolveEntityName`.
However, it may need some improvement to work right in that location. I don't have all the details of that code in my head, I just remember that it was pretty ad-hoc."
"This is indeed wrong - OutputDirectory from command line arguments corresponds to [intermediate path](http://index/#MSBuildFiles/C/ProgramFiles%28x86%29/MSBuild/14.0/bin_/amd64/Microsoft.CSharp.Core.targets,106). I'll fix this.
"
"Not crazy about those. Regarding getTypeFromBindingElementParent, we're not actually getting the type from the element's parent, we're getting it from the corresponding property or element in the type of the value being destructured. Regarding getTypeFromBindingElementInitializer, the type comes from the initializer or, lacking one, if the element is itself a binding pattern, from the shape of that pattern and recursively from it's elements.
"
"@github  I'm not much sure. But per you comment (https://github.com/dotnet/roslyn/issues/44667#issuecomment-637134548) and my understanding to it, this analyzer shouldn't be configurable. The `IDEDiagnosticIDConfigurationTests` is for configurable rules (As far as I understand).

Is there something that should be done inside the analyzer itself to mark it as non-configurable, so the `IDEDiagnosticIDConfigurationTests` can ignore it?

Or my understanding is totally wrong?"
"The wrong CI was picked up for this build. The CI for this PR are all passing. Merging
CI - https://dev.azure.com/dnceng/public/_build/results?buildId=745216&view=results
Integration-CI - https://dev.azure.com/dnceng/public/_build/results?buildId=745217&view=results"
"updated. correct number wrong repo - this was done back in corefx before the consolidation. "
"yeah, there's something wrong with the handle management, so the C# object for Math disappears and the runtime does not attempt to construct a new one"
"Tagging subscribers to this area: @github, @github, @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

This implements CFB one shots.

Some implementation notes:

1. As discovered in #55477, CFB128 and CFB64 do not work with persisted CNG keys, they always work in CFB8 mode today. Rather than replicating this wrong behavior, `AesCng` and `TripleDESCng` will throw if the key is persisted and the feedback size is other than 8. This limitation can be removed, if it is possible, when the linked issue is solved.
2. RC2 does not support CFB at all, so the implementation throws.

Closes #2406

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>vcsjones</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Security`, `new-api-needs-documentation`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> Newline characters are not valid inside group name. If you try it inside a console app, you will get a RegexParseException with message : ""Invalid pattern '[regex]' Invalid group name: Group names must begin with a word character.""

That message is wrong, it should say ""Invalid pattern '[regex]' Invalid group name: Group names must only contain word characters.""."
Maybe it's just me doing something completely wrong but this seems to have broken workload installs in 6.0.2xx previews (using the dotnet6 feed) since there's no 6.0.1 version of Microsoft.NET.Workload.Emscripten on it. Adding the darc-pub-dotnet-emsdk-e8ffccb feed fixed it temporarily but that's probably not the best way to go about it.
"Problematic line is:
```
	alignas(16) uint8_t __reserved[(66 * 8)];
```
We're including the right header `<stdalign.h>` so not clear what is wrong yet. Will need to look at preprocessor output."
"> This bit looks odd.

So, I have spent time trying to understand what's going on.

```asm
BB107 [0019]  1  4  5 BB106                 1           [0F7..0F7)-> BB113 ( cond ) T4 H5   try {       keep i try gcsafe idxlen bwd LIR 
BB108 [0248]  1  4  5 BB107                 0.50        [???..???)-> BB111 ( cond ) T4 H5               i gcsafe LIR 
BB109 [0252]  1  4  5 BB108                 0.25        [???..???)-> BB116 ( cond ) T4 H5               i gcsafe LIR 
BB110 [0266]  1  4  5 BB109                 0.25        [???..???)-> BB115 (always) T4 H5               internal gcsafe LIR 
BB111 [0251]  1  4  5 BB108                 0.50        [???..???)-> BB116 (always) T4 H5               i gcsafe LIR 
BB113 [0247]  1  4  5 BB107                 0.50        [???..???)                  T4 H5               i gcsafe LIR 
BB114 [0245]  1  4  5 BB113                 1           [0F7..10A)-> BB116 (always) T4 H5               keep i gcsafe idxlen bwd LIR 
BB115 [0020]  1  4  5 BB110                 1           [10A..120)-> BB118 (always) T4 H5               i hascall gcsafe idxlen bwd LIR 
BB150 [0270]  0  4  5                       0           [???..???)         (throw ) T4 H5               keep i internal rare LIR 
BB116 [0022]  3  3  5 BB109,BB111,BB114     0           [120..12D)                  T3 H5   try { }     keep i try rare hascall gcsafe bwd LIR 
BB117 [0024]  2  4  5 BB104,BB116           0           [13A..14A)         (throw ) T4 H5   }           i rare hascall gcsafe newobj bwd LIR 
```

We remove branch to an empty unconditional branch, in this case, it's `BB114`.

```
Optimizing a jump to an unconditional jump (BB107 -> BB114 -> BB116)
Setting edge weights for BB107 -> BB116 to [0 .. 3.402823e+38]
```

```asm
BB107 [0019]  1  4  5 BB106                 1           [0F7..0F7)-> BB116 ( cond ) T4 H5   try {       keep i try gcsafe idxlen bwd LIR 
BB108 [0248]  1  4  5 BB107                 0.50        [???..???)-> BB116 ( cond ) T4 H5               i gcsafe LIR 
BB109 [0252]  1  4  5 BB108                 0.25        [???..???)-> BB116 ( cond ) T4 H5               i gcsafe LIR 
BB110 [0266]  1  4  5 BB109                 0.25        [???..???)-> BB115 (always) T4 H5               internal gcsafe LIR 
BB114 [0245]  0  4  5                       1           [0F7..10A)-> BB116 (always) T4 H5               keep i gcsafe idxlen bwd LIR 
BB115 [0020]  1  4  5 BB110                 1           [10A..120)-> BB118 (always) T4 H5               i hascall gcsafe idxlen bwd LIR 
BB150 [0270]  0  4  5                       0           [???..???)         (throw ) T4 H5               keep i internal rare LIR 
BB116 [0022]  4  3  5 BB107,BB108,BB109,BB114   0           [120..12D)                  T3 H5   try { }     keep i try rare hascall gcsafe bwd LIR 
BB117 [0024]  2  4  5 BB104,BB116           0           [13A..14A)         (throw ) T4 H5   }           i rare hascall gcsafe newobj bwd LIR 
```

If you notice, `BB114` is still in the predlist of `BB116` which seems wrong. When LSRA tried to add resolution moves, it adds it inside `BB114` because it is the pred of `BB116`.

```
BB114 bottom: move V00 from STK to rsi (Join)
```

and that generates the bottom 2 instructions

```asm
       488B75D8             mov      rsi, gword ptr [rbp-28H]
       EB2F                 jmp      SHORT G_M28654_IG89
```

I was also puzzled why `BB114` doesn't get removed in the ""dead blocks removal"" phase and that's because somehow our data structure is outdated and we still think that `BB114` is reachable via `BB113` (which has been already removed), which was in the past reachable via `BB107` (as seen in the first BB blocks I pasted).


Just to summarize:
1. Remove branch to unconditional jump should remove the block from the pred list of destination block.
2. Make sure that the data structure reflects that so such blocks are eliminated in ""dead removal phase"".

I will send PR to fix them, but yes, there is lot of dead code hanging out there.
"
"Ah looks like my approach to check whether we compile from R2R is wrong
```
Assert failure(PID 31732 [0x00007bf4], Thread: 43456 [0xa9c0]): !MethodDescBackpatchInfoTracker::IsLockOwnedByCurrentThread() || IsInForbidSuspendForDebuggerRegion()

CORECLR! Thread::RareDisablePreemptiveGC + 0x131 (0x00007ff8`deafb481)
CORECLR! Thread::DisablePreemptiveGC + 0xC5 (0x00007ff8`de562d75)
CORECLR! GCCoopHackNoThread::GCCoopHackNoThread + 0x113 (0x00007ff8`de6c2393)
CORECLR! HashMap::LookupValue + 0x172 (0x00007ff8`de6c37a2)
CORECLR! ReadyToRunInfo::GetMethodDescForEntryPointInNativeImage + 0x1CD (0x00007ff8`de86fa1d)
CORECLR! ReadyToRunInfo::GetMethodDescForEntryPoint + 0xBB (0x00007ff8`de86f7fb)
CORECLR! TieredCompilationManager::AsyncPromoteToTier1 + 0x22D (0x00007ff8`de81f88d)
```
I guess it kills the background thread and nothing is promoted to tier1 after"
"For now this is wrong anyway since the old behaviour for Rectangle is different. Needs some more math to curve for the x and y radius values. I was just shortcutting for now. "
"ToString is probably wrong here, this is a byte sequence still."
Wrong issue number?
"@github it's not a dumb question.  

There are two ways of forcing default values. 

- Mandatory attribute: if missing the scripts will prompt for values.  So if you forget there is a chance your script ends up hanging Jenkins because its' waiting for info to be typed into a prompt
- Use the `[string]$foo = $(throw ...)` approach.  This is great except when the `throw` executes the script exits with a return value of 0.  



"
"If I am not wrong it is already supported in `Rider` and probably should have some `VS Code extension` available but I could check the alternative that you mentioned. "
"The performance of auth already sucks, and this doesn't make it better enough to warrant the breaking change."
this explain why it is wrong. https://github.com/dotnet/roslyn/pull/20051#issuecomment-307257856 and https://github.com/dotnet/roslyn/pull/20051#issuecomment-307260122
"My understanding is that this returns the enclosing scope of the function which there should be a single one. Correct me if I'm wrong. 
Might need to do some more testing to verify this is actually true. "
"@github sorry, looks like I tested with the wrong scouting queue. Will check back tomorrow&hellip;"
this seems strange.  can we file a bug on them to not do this?  i'm ok with us being resilient to it.  it just seems wrong that some random API we're calling is throwing an operationcanceled exception when no cancellation is involved with them.
"the callback form doesn't prevent crashes.  ReplaceNode, today, fundamentally can just crash on you if you end up replacing a node that no longer exists due to a previous operation.  

i.e. say you had:

```Outer(Inner(a))```

And you do a ReplaceNode on 'Outer' (with some other node that does not include 'Inner'), then ReplaceNode on 'Inner' can crash on you regardless of which form you use (since you'll get null passed to your callback, which certainly nearly no callbacks support).

The important question is: is this a reasonable scenario where you could expect nesting or not?  In my opinion, the ```== null``` scenario is not.  So spending time on the callback form just isn't relevant.  

--

Note: i have long thought ReplaceNode should not have this behavior.  I raised that point several times over the lifetime of it, but was unable to get the change made.  The crash was felt to be helpful because it helped call out to the person that there was something wrong with their ordering, and having the editor just ignore the subsequent replacements was not appropriate."
"Woops, I fixed it but pushed to the wrong fork. Let's see if it passes now."
"every time i see subsequence it feels wrong to me.  But i don't know english well enough to know if that's teh case.  should it not just be ""subsequent""?"
What's wrong with this cache?
"A couple ways to answer:

1. I would expect it to: the only way that wouldn't happen is if the original state created was then modified by the addition of another document. For example, adding documents in batch is different than adding documents one-by-one. We don't have a case where that would happen and it'd be suspicious to me if that ever went wrong.
2. CreateFilePathToDocumentIdsMapWithAddedDocuments is only consuming the Id and FilePath, so even if a new instance was created, it'd be the same for the purposes of this call. This is trying to avoid creating a bunch of unnecessary allocations. The older approach where we extracted just an id/filepath pair was indeed elegant but seems a bit unnecessary."
"> The primary case where this is relevant is Fix All operations, which force full-project (or solution) analysis for analyzers even when they are marked OpenFileOnly. OpenFileOnly no longer forces in-process analysis for analyzers that are equally fine running out-of-process. However, keep in mind that the long-term goal is eliminating the need for both of these flags.

I see. so, what you are saying is all OpenFileOnly analyzer should be able to run out of proc? and for fix all, you need to run analyzers out of proc? 

if so, this condition is wrong.
var inProcResultTask = AnalyzeInProcAsync(CreateAnalyzerDriver(analyzerDriver, a => (forcedAnalysis || !a.IsOpenFileOnly(workspace)) && a.IsInProcessOnly()), project, remoteHostClient, cancellationToken);

you need to change it to
(!forcedAnalysis && !a.IsOpenFileOnly(workspace)) && a.IsInProcessOnly())"
"> ... particularly if they forget the `CheckValidInstance`

Forgetting CheckValidInstance is just wrong.  It means that InvalidOperationException wouldn't be thrown on a `default` value, which they should add a test for.  If they fail to add it, they'll get a NullReferenceException, and then the fix is to call CheckValidInstance and have the exception be thrown.

Describing the field as non-null seems to match what I want the caller code to look like (call CheckValidInstance and then know that you're happy), without caring how the nullability feature is implemented."
"What do you mean by failure? If there's anything wrong with that parameter, it would just skip it and offer to add checks for the valid ones. "
">ILiteralOperation (OperationKind.Literal, Type: System.Boolean, Constant: True, IsInvalid) [](start = 26, length = 90)

This change feels unexpected. There is nothing wrong with the literal itself, so it shouldn't be marked with IsInvalid flag. #Closed"
"InvalidOperationException is more appropriate (there's no argument here that's wrong, the call is inappropriate to the state)."
"@github - have you got any context why this needs changing? I don't see anything outright wrong here but it seems orthogonal to the task of enabling mono-specific test exclusions as such. @github, if this is a semantic change that is for whatever reason required for Mono builds, it should be made mono-conditional and ideally equipped with an explanatory comment why this logic differs between Mono and CoreCLR."
"i don't want to throw here.  The pattern of the VCService is that it makes some assumptions about how the underlying system works, but if those assumptions are wrong, it just gracefully bails instead of throwing.  The idea here is that hte assumptions aren't documented/guaranteed.  They come from my careful reading of things, but could be incorrect.  I don't want to throw on invariants that may not exist.  (note: this is the pattern for the rest of hte type)."
"I think we should be fine here. to clarify what I thought when I added this comment, we support different types of the Gregorian calendar (e.g. you can create one like `new GregorianCalendar(GregorianCalendarTypes.MiddleEastFrench)`). I thought Invariant support all types of these Gregorian calendars and that means we can get different ClaendarData object according to that. I was wrong and validated that Invariant support only the default type of the Gregorian calendar and not all of them. "
"When I see a method here that says ""IsDefault"", I'm going to expect it to return true if the value == the default value, whether that's set by the prop or set by a default value creator or set by my code. This gets us part of that behavior but not all of it, I think. Correct me if I'm wrong. "
The path seems wrong. It should be `..\net461` instead of `net461`.
"Yeah, this was the only one I got wrong for some reason."
What's wrong with this test?
"Just wondering @github if there's something wrong with this, or if it can be merged?"
">snapshotManager != null [](start = 16, length = 23)

This feels wrong. We should be verifying the nullabilities map, regardless of whether we were taking snapshots at the time. This can be null during speculative analysis. #Closed"
"…especially when I look at *this*: `XA4301_ABI_RID` won't be emitted if the lib *is* in a directory named after an ABI we know about, `%(RuntimeIdentifier)` be damned.

*Presumably* if `%(RuntimeIdentifier)` doesn't ""match"", it's unusable, e.g. trying to use a ""desktop"" Linux `.so` on Android is *doomed*, because `libc.so` is in the wrong location (among other things).  Should we ""fail early"" and error, *and check* before calling `MonoAndroidHelper.GetNativeLibraryAbi()`?  Or should we ""fail at runtime"" and warn -- as is done in this PR -- if the `.so` can't actually be used?

Which dovetails back with the warning message: if an unsupported `%(RuntimeIdentifier)` means ""this has no chance of working"", then the message needs to state that, and the fix is to *remove the offending `.so` file*.  If it has *a* chance of working, then `XA4301_ABI_RID` should mirror `XA4301_ABI`, and mention that moving the `.so` into a directory with the ABI name will work.

As-is, the `XA4301_ABI_RID` warning means nothing."
"In theory this should be `ArgumentException`, but my care level is minimal. We're not very consistent ourselves. :)

For example: _System.Formats.Asn1_ allows the EncoderFallbackException to bubble up. _System.Text.Json_ and _System.Formats.Cbor_ rewrap with ArgumentException (though _Cbor_ gives the wrong error text when doing so)."
"What is the plan for logging inside System.Net.Quic?

For example, here there should be a log message that an unknown callback was received, along with the `evt.Type` value. A generic `InternalError` status code isn't enough to understand what went wrong.

(logging can be added in the future, not blocking for this PR)"
"Here you want to use `UIInteraction` interaction instead or the generator will pick the wrong interface

`interface UIDropInteraction : UIInteraction `"
"This is wrong as the asset we ship as part of the package is the netcoreapp3.0 asset we don't ship the 5.0 asset. So instead of shipping a 5.0 asset just for this purpose I would suggest just making it obsolete for all tfms. @github, @github  I believe this is the pattern we've followed in other OOBs?"
"`skipTv == ""true"";` IIRC we have a better string-boolean check somewhere (not sure if harness or mtouch) since this check is a bit easy to get wrong, e.g. `True`"
"We should have predictable and diagnosable behavior for invalid argument.

What is going to be the behavior when somebody passes in alignment that is not power of two? Are people going to be able to figure out what they have done wrong?"
"Obviously my prototype comment doesn't make any sense.
I had a typo, meant to say ""don't have field keyword"", which is still wrong per your clarification but is what I initially understood. Fixed in the last commit. Thanks!"
"It will be wrong to use invariant string comparisons here. The comparison should be performed linguistically. So, we cannot change that. "
I will push the sync crazy though into a helper method so this function looks saner though.
"It was wrong -- we haven't held the lock when calling compute functions for over a year now.
"
"What is important for me as newcomer, is that I should not learn which ""errors"" are not actual errors. I always trying to assume that infra is right, and I'm wrong. I understand that path which I take to find this issue not that straight :smile: "
"You should just be writing out framework net45 or whatever you're minimum target is. Otherwise NuGet won't know which asset to restore in some cases and will likely choose very wrong. (I'm actually shocked it let you restore at all without one.)
"
"Should we rename the method to IsAwaitableNonDynamic or something? Technically `dynamic` is awaitable. I worry somebody else is going to undo this at some point because it's ""wrong"".
"
The emit here has the wrong runtime semantics.
"This is wrong regexp. This will change text `""a1\\r\nb""` to `a1`"
"I don't think so. `f() + 4` *contains* a non-side-effect-free expression, but is side-effect-free due to the addition operator itself not being something that can produce side effects*

Upon thinking about this more, I think the correct fix is just to return `true` if the operator in a binary expression isn't an assignment operator. The expression `[(f(), 4, 2)]` is equally wrong as `[(f() + 4, 2)]`; the comma is a red herring. I'll try this on Monday.

<sub>* let's continue to pretend `valueOf` doesn't exist, per convention</sub>"
"I'm not crazy about this stuff, I'll find you today and we can discuss it.
"
"Oh, hang on—`observe()` returns an `IQuark`, so the circularity is real and clear! It’s even called out explicitly in https://github.com/microsoft/TypeScript/issues/29872:

> The workaround exists - to use different form of creating the type for the standalone mixin class - with interfaces... But this notation seems to drive crazy the IDE (the language server under the hood?). It stop finding usages of properties, show many false type errors etc.

Yep, because there’s a circularity that we falsely resolve and don’t report. I think the bug is that we _don’t_ report a circularity error— the “workaround” is the bug.

And my earlier comment:

> you should be able to substitute `A` in `interface A extends B<T> {}` for `B<T>`

It turns out the simple form `B<T>` (`Mixin<typeof CQuark>` in this test case) simply resolves to `any` in this case without triggering any errors, so that doesn’t actually work either, so I feel better about this interface example being an error. (I guess in the type reference case, we detect the circularity but fail to emit a noImplicitAny error on the way back out.)"
"Actually it is not wrong, `ownerList.data` is valid and would be compatible with `list`, since `OwnerList<string>` is `List<List<U>>`. It will probably make more sense when I switch to using the entity name rather than the type. "
"things like GetPreviewElement can return null but no null checking., things rely on index when first element can be null, return children.count == 0 ? children[0] or returning children[0] without getting it out from visual tree is already wrong kind of stuff.
"
"I've had a few hoops and hurdles. If you have MSBuild Build Tools installed and they don';t have the required pre-reqs, you could end up opening the wrong developer command prompt to build. I'm trying to get the in-VS tests to run right now, looking at the test explorer, it doesn't seem to run them. Although it seems the top menu run seems to work."
Turns out I got the endianness wrong for the `bitMask` inside the ctor code 🙄. That seemed to have led to other test failures as well.
"github decides to omit code so the indent looks wrong. I check the source code; it is fine
"
"> 
> 
> This isn't a change that we would want to make.

Can you clarify why?

I can't see why the change is wrong. The [documentation for IsImplicitlyDeclared](https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.isymbol.isimplicitlydeclared?view=roslyn-dotnet) states:

> Returns true if this symbol was automatically created by the compiler, and does not have an explicit corresponding source code declaration.

And that's the case with the symbol `<Program>$` (i.e. SimpleProgramNamedTypeSymbol). It is automatically created by the compiler and it's indeed doesn't have an explicit source code declaration."
"this part is interesting.correct me please if I'm wrong, here you are saying: ""As I see nobody is watching folder 'pathToWatch' so I'm going to install watcher for it. However it is possible that somebody is already watching 'pathToWatch/<some-path>'. If yes - I'm going to shutdown this watcher since watcher for 'pathToWatch' should get the same notifications"". 

If the answer is 'yes' then I'm curious how it works since by default `fs.watch` is [not recursive](https://nodejs.org/docs/latest/api/fs.html#fs_fs_watch_filename_options_listener) so if initially you had watcher for '/a/b/c/d' and then you install one for '/a/b' then after closing watcher for '/a/b/c/d' you'll receive no notifications about changes in this file
"
IMO we should just merge as long as we don't find any of the documentation to be wrong/misleading/distracting. An imperfect document that includes useful info is better than the absence of it.
"Marked as draft, need to figure out what's wrong with the tests since I don't recall any product changes. I'll run IL diff tomorrow on before & after to make sure there is no incidental product changes"
"@github can you try this regex?

```
\w(\([\w\s,]*\))?[!?]\.+(\w(\([\w\s,]*\))?[!?]\.)+
```

It's not as thorough as Roslyn could be, but at least it can find a few more instances. For example, it worked with this code:

```cs
    static void Main()
    {
        A?.B.D; // No
        A!.B.C!.D; // No
        A()!.B().C()!.D; // No
        A(a, b)!.B(b, c).C(c, d)?.D; // No
        A?.B!.C; // Yes
        A?.B!.C!.D; // Yes
        A!.B?.C!.D?.E; // Yes
        A()!.B()?.C().D; // Yes
        A(a)!.B(b)?.C().D; // Yes
        A(a, b)!.B(b, c)!.C.D; // Yes
    }
```
Please correct me if any of the cases is wrong."
"This is now strictly better than the current behavior, and has identical caching/performance characteristics, but I’m unsure whether it’s a complete fix. (That is, there may be more cases where returning a cached instantiation is wrong.)"
"Hi, I want to point a small regression that I believe has been introduced by this PR 😕 Alas I haven't been able to isolate a MNWE after 1 day trying to extract code from my project and reaching 200 lines in the non so minimal and still working example 😞 

TLDR: [This project](https://github.com/Siteimprove/alfa) builds in TS4.5.2 but doesn't in TS 4.5.3 (nor in 4.5.5).
Given the error message and the crashing on our controlled-recursive type, I do believe that this PR is the cause of it.

We are building recursive type but controlling the recursion through a `type Depths = [-1, 0, 1, 2]` (ensuring `Depths[D] = D-1`), then the type looks like (over simplified) `type Nested<T, D extends number = 3> = D extends -1 ? T : Nested<T, Depths[D]>`. The `D` parameter ensures that type recursion stops…

Of course, [the actual type](https://github.com/Siteimprove/alfa/blob/main/packages/alfa-act/src/interview.ts#L28-L47) is much more crazy. It models an ""interview"" which is a sequence of questions (asked to an oracle), where each question expects a typed answer (`T` is a representation of this type (e.g. `""boolean""`, `""string[]""`), and `A` is the actual corresponding type (e.g. `boolean`, `Array<string>`); the `QUESTION` parameter is meta-data mapping the questions' URI to their type). An interview may contains several questions in a row (hence the recursion), and the depth is used to make sure the type works.

The type itself does build in TS 4.5.3, but then the way we use it (through yet some other layers of complication) breaks…
I've tried to adapt the code to get it working in 4.5.5. From first attempts, it seems that giving some hints about the actual value of `D` helps 🤔 It feels like TS is now too eager in setting `D=3` and thus struggles when nesting interviews…

I don't really consider this as a bug. Feels more like a very corner case… Plus haven't been able to get a MWNE to study… But I guess you might want to hear about it 😊 
(and my secret hope is that you'll have a ""aha!"" moment seing the description and knowing the content of this PR much better than me 😀 )"
So is it *wrong* to do it in `program.ts`? Do we need both? I'm mostly asking for my own understanding.
"> Which platforms support all of the options?

I don't think there's a single platform that supports everything.  (or maybe something like tvOSSimulator where you could probably choose to use the JIT, or mini or LLVM AOT, with or without interpreter as a fallback).

> Is this something we should expose directly as a non _prefixed property?

I don't think so.  1. The `MONO_AOT_MODE_*` constants in the runtime embedding API are a confusing mess. 2. The `--aot=[opts]` AOT compiler options don't map onto them exactly and give a different matrix of configurations - not all of which are sensible, and they don't really give you a good idea of what behavior you chose.

It would be better to have some frontend property that lets you pick the behavior you want and then errors out if you pick something unsupported: 
* Primary execution mode: AOT, JIT, interpreter
* Fallback execution mode: AOT, JIT, interpreter, none
* (optional) codegen backend: mini, LLVM, or bitcode 

Not every combination of primary/fallback is sensible; not every combination of primary/fallback is supported on every workload; not every codegen backend is supported on every platform - and for most workloads there's probably one reasonable default.
(And I probably missed some execution mode that doesn't fit this pattern).

But at least it expresses intent, rather than our odd choice of constants from some header file.


---

Mapping our existing execution mode schemes:

| Name | Primary EE | Fallback EE | codegen backend | Note |
|--------|-----------------|------------------|-------------------------|---------|
| JIT    | JIT              | None            | mini   | |
| LLVM JIT | JIT      | None  | LLVM | |
| AOT  | AOT | JIT | - | ""regular"" AOT: minimal effort AOT, no generic sharing for valuetypes |
| ""hybrid"" AOT | AOT | JIT | - | like ""full"" below, but with a JIT fallback |
| ""full"" AOT | AOT | None | mini | |
| LLVM Only | AOT | None | LLVM | Use our fork of LLVM |
| bitcode | AOT | None | bitcode | Produce LLVM bitcode that upstream vanilla LLVM can use |
| Interp | AOT | Interp | mini | (I think this prefers AOT images if it finds them)
| LLVMOnlyInterp | AOT | interp | LLVM/bitcode(?) | (comment in jit.h is wrong, this doesn't set 'force_use_interpreter', so I think it will prefer to use AOT images)
| InterpLLVMOnly | Interp | None | LLVM / bitcode(?) | (comment in jit.h is wrong, this sets 'force_use_interpreter' so it will interpret methods, but I think it will take trampolines from AOT images)
| InterpOnly | Interp | None | -(?) | (I think this one tries to JIT trampolines on non-DISABLE_JIT platforms)

This isn't a perfect description because inside the runtime there's no single primary/fallback switch - it's more like a series of conditions ('force_use_interpreter', whether AOT images are found and contain the expected method, whether to use ""aot trampolines"", etc) and what gets compiled into the AOT images and which backend was used.

This means we get oddities like ""InterpOnly"" on Android (and Mac Catalyst, I think) will try to JIT trampolines."
"My last try (promised!) - This is a doc I wrote for my implementation (at least I would have tried everything I could to gain attention on this)...

## Json polymorphism support

One of the big issue to solve when de/serializing objects is to manage polymorphism: when an abstraction must be serialized, the type of the serialized object **must** also be written so that deserialization know what to instantiate.

### The classical approach
The classical approach here is to inject a `$type` (or `_$type$_` or any strange enough property that contains a string with the name of the type) into the object properties. 
Since in JSON, collections (arrays, lists, sets) are expressed with `[arrays]` (and this cannot hold any property), another syntactical
construct is required for collections, typically something like `{ ""$type"" : ""A(int)"", ""$values"" : [1,2,3] }`.

Note that, in this approach, serialized objects with or without a type are structurally identical (only the existence of the `$type` property makes the difference) whereas serialized collections ARE structurally different (they appear inside a ""wrapper"" object).

> When is a `$type` NOT required? When the object's type is *statically known*, when the de/serialized type is *unambiguous*. As soon as 
> an ambiguity exists, **polymorphism** is at stake.

The `object` type being the ""worst case of polymorphism"", but any interface or base class with specializations are *ambiguous*), the runtime type of the object MUST be serialized and MUST be used to deserialize the object.

We consider ""Structural Difference"" between unambiguous and polymorphic objects to be a good thing since this obliges the reader to take care of the *object's type* if there is one.
Without any difference in the shape of the data, a polymorphic object can be falsely read as an object of an *unambiguous* (wrong) type. 

### Structural Polymorphism

We are using a different approach that offers the following advantages:
- No ""magic name"" like `$type` or `$values`.
- Uniform type handling for objects and collections: there is always a ""Structural Difference"" between a *polymorphic* and an *unambiguous* shape.

Thanks to this, the code is simple and can be split in 3 layers:
- Nullable layer: the `null` occurrence is handled.
- Polymorphic layer: a 2-cells array is expected, the first cell containing the type name, the second one the unambiguous object's representation.
- Unambiguous layer (the exact type is known): the serialize/deserialize code handles purely the object's data.

Last (but not least) advantage of this approach: **when deserializing, the type is known BEFORE the object's data**. This enable deserializer to easily work in ""pure streaming"" (no lookup required, no intermediate instantiation): the Utf8Reader can be used directly.

Below is a simple example with:
```csharp
class Person
{
   public string Name { get; set; }
}

class Student : Person
{
    public int Age { get; set; }
}

class Teacher : Person
{
    public bool IsChief { get; set; }
}
```

The C# `Student[]` is an array of Student. There is no specialization, hence no ambiguity: `[{""Name"":""A"", ""Age"":12},{""Name"":""B"", ""Age"":13}]`.

The C# `Person[]` can contain 3 different types of objects. Each item needs to be ""typed"":
`[[""Student"",{""Name"":""A"", ""Age"":12}],[""Person"",{""Name"":""E""}],[""Teacher"",{""Name"":""T"",""IsChief:false}]]`.

When the same array of Persons is known only as an object[] (or any other non-unique ""base"" type like the non-generic `ICollection`), then the array itself requires its type:
`[""A(Person)"",[[""Student"",{""Name"":""A"", ""Age"":12}],[""Person"",{""Name"":""E""}],[""Teacher"",{""Name"":""T"",""IsChief:false}]]]`


"
"I reverted every sln that only had guid changes, so this should only be the ones with actual changes.  @github would it be possible to get stable guids here?  Are we running it wrong that it churns guids every time?"
"@github This change looks good to me. Can you check the Antigen results to tell me if anything looks wrong? I'm not sure if it's supposed to be clean, or if there are new failures here due to my change.

https://dev.azure.com/dnceng/public/_build/results?buildId=1419755&view=results
"
"Tagging subscribers to 'arch-wasm': @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

This PR (which relies on the custom marshalers PR, #47640) introduces a new icall (```InvokeJSFunction```) that is used to invoke JS functions from C#. It takes a 'do it yourself' approach to things like error handling (in order to avoid JS roundtrips for try/catch blocks) and attempts to remove overhead in various other places so that scenarios not needing that overhead can be much faster. It's also designed to be (partially) AOT friendly by making the core icall not generic.

The icall enforces some rules to produce good performance:
* The name of the function being invoked must be interned. This allows the function itself to be cached using the address of the interned string as a key (interned strings are not relocatable), so the lookup is very fast.
* The function pointed to must not change at runtime (so it can be cached).
* The function being invoked must not return a value, if it does the icall will return an error code.
  * This is because marshaling a return value of unknown type means we have to box it - JS->C# invokes already pay this unavoidable tax and it sucks.
* The function being invoked must not throw an Error, if it does the icall will return an error code.
  * Marshaling exceptions universally is finicky and in some scenarios the caller wants to handle the error in their own way, i.e. set a flag or store info on the error somewhere instead of throwing a C# exception.
* The maximum number of arguments is 3.
* All arguments are passed as ```(RuntimeTypeHandle type, IntPtr arg)``` pairs, where (depending on type):
  * If ```type``` is a pointer, ```arg``` is the raw pointer value.
  * If ```type``` is a ValueType, ```arg``` is the address of the value.
  * Otherwise (if ```type``` is a reference type), ```arg``` is the address of the location of the object reference on the stack. This is so that if the GC relocates the object, the callee will see the new post-relocation address.

The new icall offers some new features as part of the deal:
* The function name can contain dots (i.e. ```Module._free```) and the icall will walk the scope chain to find the target function - we can afford to do this since we cache the result.
* If the function name starts with ```BINDING```, ```MONO``` or ```INTERNAL```, the icall will look the function up inside the appropriate runtime API object instead of in the global scope, so those function names will work even if we are running modularized and they are not exposed in the global scope.

For scenarios not covered by the new icall, the intended solution is to expose higher-level convenience wrappers that provide the bells and whistles people expect. This keeps the icall slim and fast so that in use cases where you want maximum performance, you can get it. At present the PR provides ```InvokeJSResult InvokeJSFunctionByName<T1, T2, T3> (string internedFunctionName, ref T1 arg1, ref T2 arg2, ref T3 arg3)``` as a convenience wrapper that automatically handles producing the type/address pairs for you.

As a proof of concept, the PR changes ```JSObject.Invoke```, ```JSObject.SetProperty``` and ```JSObject.GetProperty``` to go through the new icall. I have a feeling we don't actually want to do this, but it serves as a good example of how to use the icall and was also useful for flushing out bugs and getting a sense of its performance.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>kg</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`arch-wasm`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"I missed that this had been put up and also put up my own fix: https://github.com/dotnet/runtime/pull/62382

My variant is basically the same but explicitly calls out the need to keep `lsra` and `codegen` in sync here and fixes a case in LSRA where a wrong swap was happening."
"There are some other ""unguarded"" uses of `IsContainableMemoryOp` in `Lowering::OptimizeConstCompare` which look like they might lead to trouble, but I'm not 100% sure about this, as we then go on to sort of preference what follows assuming this containment will happen. Could be if we end up being wrong about containment, we end up with sub-optimal but not incorrect code.

I think I'll leave those as is for now and look at the impact of adding the extra guarding separately."
"Tagging subscribers to this area: @github/area-system-globalization
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Fixes https://github.com/dotnet/runtime/issues/67313

While performing string `StartsWith` or `EndsWith` operations we try to optimize when having ASCII characters. We apply the optimization only if we don't have characters outside ASCII range nor we don't have characters need special handling (like `\0` which treated as ignored character). We detect the special character by using internal the internal table `HighCharTable`.  In some cases, we can have the source string be shorter than string we check (e.g. doing something like `""A"".StartsWith(""A\0"")` , we check the remaining character `\0` if it is ASCII but we don't check if it is special character using `HighCharTable`. This cause StartsWith/EndsWith return the wrong result. 
The fix is simply adding the check using `HighCharTable` to ensure the correct result.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>tarekgh</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Globalization`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"NativeAot message is checked by editing `nativeaot` smoke test.

```
      nativeaot/SmokeTests/PInvoke/PInvoke/PInvoke.sh [FAIL]
        Unhandled Exception: System.DllNotFoundException: Unable to load shared library 'PInvokeNative' or one of its dependencies. In order to help diagnose loading problems, consider using a tool like strace. If you're using glibc, consider setting the LD_DEBUG environment variable:
        PInvokeNative.so: cannot open shared object file: No such file or directory
        libPInvokeNative.so: wrong ELF class: ELFCLASS32
        PInvokeNative: cannot open shared object file: No such file or directory
        libPInvokeNative: cannot open shared object file: No such file or directory

           at System.Runtime.InteropServices.NativeLibrary.LoadLibErrorTracker.Throw(String) + 0x4e
           at Internal.Runtime.CompilerHelpers.InteropHelpers.FixupModuleCell(InteropHelpers.ModuleFixupCell*) + 0x103
           at Internal.Runtime.CompilerHelpers.InteropHelpers.ResolvePInvokeSlow(InteropHelpers.MethodFixupCell*) + 0x35
           at PInvokeTests.Program.Square(Int32) + 0x21
           at PInvokeTests.Program.TestBlittableType() + 0x1a
           at PInvokeTests.Program.Main(String[]) + 0x9
           at PInvoke!<BaseAddress>+0x2ac21b

```"
"We can change it now to `BROWSER`. The timing should be fine (3.1.4 is shipping no earlier than 3.2 GA, by the current schedule). It's not going to *fail* if the string is wrong, right? It just won't light up the fixed behavior until you're running on a runtime with the updated OS platform string."
"Oops I guess I was wrong, that case does exist and has tests:

```
            var name = ""Microsoft.AspNet.DataProtection.TypeForwardingActivatorTests+ClassWithParameterlessCtor, Microsoft.AspNet.DataProtection.Tests, Version=1.0.0.0"";
```

So I guess i'm going to revert this back to the original return, and remove the comment
"
"I guess&hellip; My thought was the decimal numbers here and the hex numbers in the document made the combination hard to use. For example, I copied the wrong entry 😄

In any case, let's get this in and postpone adding comments like `332 = 0x14c = IMAGE_FILE_MACHINE_I386`."
"sorry. comment on wrong place. I meant to put comment on this

http://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures.Text/Extensions.SnapshotSourceText.cs,90
"
"this comment seems wrong.  a public nested type inside a public type shoudl have a DeclaredAccessibility of Public.  

if you want to filter out nested types, just do `typeSymbol.ContainingType != null`"
"This is where not caching `null` above seems to cause confusion. It would mean that from a single thread `Add` followed by `Remove` would return true for every value but `null`. Seems wrong. "
"Ignore for now. Even if the old suppressions are wrong, looks like we need a lot."
Yeah something seems wrong here... @github ?
Wrong direction.
"It's called TryFindParentAssignemnt, but is really returning the containing statement.  name seems wrong. #Resolved"
"In testing this, I noticed that VsVim must be implementing its own brace matching logic... 
If I have a mismatched brace inside a string, the VsVim command for jumping to the other side (`%`) jumps to the wrong location. I'll let Jared know.
Update: `Edit.GoToBrace` (default binding: `Ctrl+]`) works better :-)"
"> Or maybe we just ask CTI to add a scenario where they have 6.0 and 7.0 installed, and run dotnet new, I believe that would catch it right since it would install the wrong version? We could automate that but that's much harder for us to do with our tests and the versioning hell than just verifying this on real builds

We could, but we'd still need to wait until there's an SDK that has ingested our change - I'm not sure if there's way to do it in this repo in isolation"
">VisitBlock [](start = 34, length = 10)

I would think that the case of a single declaration and the case of a multi-declaration should largely be the same. A multi-declaration is just a sequence of single declarations. But currently the implementations for both cases have nothing in common.
Let's test combinations of single- and multi- declarations in the same method.

Also, something feels wrong about the structure of this method:
- In the case for single-declaration, we don't pass the declaration that we found into `LowerBoundLocalDeclarationUsingVar`. But in the multi-declaration case we do.
- It's not clear why we return once a declaration is reached. If `LowerBoundLocalDeclarationUsingVar` and `LowerBoundMultipleLocalDeclarationUsingVar` can handle the chaining with subsequent using-variables, then we don't need this top-level loop."
"this is in a static method, and seems to use nothing aobut this type, while passing along a lot of darta from a containing type.  this strongly makes it feel as if this method is in the wrong place.  for example, if it were an instance methods of symbolStartAnalyzer, it seems like it would be cleaner. #Resolved"
"❗️ This is the wrong place to handle cancellation. It should be passed to the `WorkspaceAnalyzerReferenceAsset` constructor, and used there instead of the current use of `CancellationToken.None`."
"this is strane.  GetTypeName can return null, but you return true here in that case.  that seems wrong."
"This code is not written by me neither it is touched by the PR. The question was about seemingly wrong ID being used in the existing NetBSD branch. But if you think `THREADSilentGetCurrentThreadId` is right and there `GetLwpId` does not make sense, then it is fine."
"Can we limit the assembly ""*"" to only the cases where it's necessary? it's relatively expensive for the linker (as it has to search all assemblies in the closure and find all occurrences of the type).

For most of these attributes we know the assembly they come from, so we should be specific.

I personally would also vote for adding the XML to the same assembly the attribute is from (just so that we don't have unnecessary cross assembly references, especially the ""wrong"" way from CoreLib upwards)."
">LambdaInsideGenericLocalFunctionInsideLoop [](start = 20, length = 42)

Given this test scenario. Could you please explain what was going wrong? What types and methods are involved and how the change fixes the problem? #Closed"
"I'm trying to think about all the things that could go wrong here:
- binding => should be fine, unless user binds to the 2 properties and has a poor INPC implementation in VM
- clearvalue => could you please add a unit test for button making sure that when a property is Cleared (using `ClearValue` both are actually cleared ? i.e. IsSet() == false; ?"
"Please swap these arguments, `displayName` is the expected value. 
The original code was wrong in the argument order."
"we could also consider an `AddShutdownBlockWork(Action<CT>)` method that is passed a lambda which is runs, passing in teh _threadingContext disposal token.  that way we don't risk the code using the wrong token."
"I don't think the position follows from those CONSIDER/DO NOTs, and one person's opinion does not a policy make. SocketError, for example, has over 50 members; in no world would I want us adding over 50 exception types. On top of that, this guidance and that annotation were all written before exception filters were exposed and prominent in C#; it's now trivial to handle error code values like this, and in fact if there's any chance you might want to perform the same action for multiple such values, it's way simpler with filters than just going by exception type. Designing to the guidance of ""avoid exception filters"" is IMHO wrong."
"I could be wrong, but we don't need this change, do we?"
"I was completely messing around the wrong file in my PR 😄 "
"Can we fix this typo? It's been driving me crazy.
"
"Yes, this looks intentional. I don't think its well written, but intentional, and not functionally wrong... yes."
"> This PR adds the same getCanonicalUri method from resolvers to file system providers.

Needing to duplicate an API in two places tells me that both places are wrong. Why isn’t there one central place where extensions can register such canonical uri logic? 

Assuming, there is `FileSystemProvider#getCanonicalUri` would you suggest that VS Code calls this all the time for things like knowing what the true casing of a path is? Today, we assume that all paths that are returned from a FSP are canonical and that they don't go through further massage. 

I believe that you don't want to get in the business of canonical uris because it will quickly turn into a bottom-less hole. Isn't your the problem more like ""How do I know that the `vls:///foo/bar`-workspace is actually the `file:///foo/bazz`-workspace?"" Do you maybe just need a ways of introducing ""aliases"" for workspaces?"
"I have some more clues now. It indeed seems like the current ”solution” in this PR only really patches the symptom of something else going wrong. 

Here's is the code where this PR

```typescript
	public lookupPrimaryKeybinding(commandId: string, context?: IContextKeyService): ResolvedKeybindingItem | null {
		let items = this._lookupMap.get(commandId);
		if (typeof items === 'undefined' || items.length === 0) {
			return null;
		}

		const itemMatchingContext = context &&
			Array.from(items).reverse().find(item => context.contextMatchesRules(item.when));
		return itemMatchingContext ?? items[items.length - 1];
	}
```

When the bug happens `context.contextMatchesRules()` fails to match any of te bindings that are returned from `this._lookupMap.get()`. Which leads to a ”best guess” fallback, which does not have enough information for making an informed guess. I saw somewhere that it should go in specificity order. And when both alternatives available for the fallback are equally specific, or bets are off.

Here are the two bindings defined for the case mentioned in #126306:

```json
            {
                ""command"": ""paredit.forwardSexp"",
                ""mac"": ""alt+right"",
                ""win"": ""ctrl+right"",
                ""linux"": ""ctrl+right"",
                ""when"": ""calva:keybindingsEnabled && editorLangId == clojure && editorTextFocus && paredit:keyMap =~ /original|strict/ && config.calva.paredit.hijackVSCodeDefaults && !calva:cursorInComment || calva:cursorAfterComment""
            },
            {
                ""command"": ""paredit.forwardSexp"",
                ""mac"": ""ctrl+right"",
                ""win"": ""alt+right"",
                ""linux"": ""alt+right"",
                ""when"": ""calva:keybindingsEnabled && editorLangId == clojure && editorTextFocus && paredit:keyMap =~ /original|strict/ && !config.calva.paredit.hijackVSCodeDefaults && !calva:cursorInComment || calva:cursorAfterComment""
            },
```

They are equally specific, only differing in wether `config.calva.paredit.hijackVSCodeDefaults` should be true or false, giving the command palette and other call sites an arbitrary binding alternative.

However, whatever is translating the actual keyboard events successfully interprets the context and the `when` clauses of the alternatives. So we shouldn't have to be guessing at all here."
"> > But I'm starting to wonder if the original policy of just displaying `Content.ToString()` was the better option. Then it's consistent for any type you give it, even a View.
> 
> I would be ok with that unless I'm going crazy or losing my memory (which is possible!) that is how WPF, Silverlight, and most other Forms Content properties behave?

You're not crazy. 

@github and @github - I'm leaning very heavily in the direction of going back to `Content.ToString()` for this and simply logging a warning for the unsupported platforms. It's more consistent, easier to implement, and easier to maintain. I know we have visibility issues with those warnings, but I think that's a separate issue. 

Change my mind or I'm updating this PR later this week. :)"
"Hey @github thank you so much for your time and efforts on this. I am so sorry we kept this around for so long. I have checked and it seems this got fixed in the meantime with another PR already. Despite everything I hope you'll join us with .NET MAUI where we're improving all kinds of things, including the process for PRs (from the community).

Closing this one for now, let me know if you still thing something is wrong in this area. Thanks!"
"`parameter.ExplicitDefaultConstantValue` doesn't return a bad constant value in this scenario, because it doesn't really know that something is wrong yet. Using the `void F(object param = F()) { }` case as an example:
1. We compute the default value for `param`. The first thing we do is bind the default syntax value.
2. We bind the call to `F()`, including its default arguments.
3. We compute the default value for `param`. (This is reentrant.)
    - Since the completion part `StartDefaultSyntaxValue` has been set, we just return `ConstantValue.Unset`, and enter this code path that this comment thread is attached to.
4. After that we pass the bound default value (the call `F()`) to `ParameterHelpers.ReportDefaultParameterErrors`.
    - This reports `ERR_DefaultValueMustBeConstant` and returns `true`
5. Since `ReportDefaultParameterErrors` returned `true` we return `ConstantValue.Bad` as the ""final"" default value for the parameter.

I'll add a test that will hopefully illustrate this better, at least the last part, since I can't seem to find such a test added in this PR already.

Note that the behavior of returning `ConstantValue.Unset` occurs both for reentrant scenarios as well as for multithreaded scenarios. It's possible that we want to do something like have a reentrant usage return `ConstantValue.Bad`, while a multithreaded scenario will spin wait until the constant value is available. I am actually not sure how to accomplish that in `SourceComplexParameterSymbol.DefaultSyntaxValue`. Perhaps the binder should instead avoid accessing the default value on a parameter if `BinderFlags.ParameterDefaultValue` is set and just use `ConstantValue.Bad` as a placeholder.

Also, I had hoped to pass `hasErrors: true` here so that we will always fail in emit if no other (better) diagnostic is given, but it ended causing some diagnostic reporting in `ParameterHelpers.ReportDefaultParameterErrors` to be skipped, and I wasn't sure how to square it all without causing a lot of test churn. #Closed"
"Uh, er, is this really something we want to do?  Depend upon an *internal* target?

This feels wrong and brittle."
I re-read my comment and I think I sent the wrong message. It looks to be working properly. Good stuff!
"> For what it's worth, I think that handling this in emit is actually quite a bit more complicated, and potentially error prone, then having this handled in binding and letting it flow through ""naturally"".

The nature of the changes that were made in binding resulted in observable changes in behavior of APIs that compiler implements and likely resulted in unintended binding behavior changes. Though it might feel simpler to adjust binding behavior in this way in order to achieve desired IL gen outcome, that would cause compiler to behave not according to the language specification in an observable way. This would be the wrong thing to do.

---
In reply to: [568417406](https://github.com/dotnet/roslyn/pull/50910#discussion_r568417406) [](ancestors = 568417406)"
"Sorry if this is the wrong place to ask, but how do I use this?
I tried printf %b '\033]11;#200000\007' in wsl to no effect.
in both Terminal and Terminal Preview"
"This is wrong - you should not need to add any marshalling info I think.
* The `char_t` is defined as UTF-16 on windows, and UTF-8 everywhere else
* Default marshalling should work that way as well"
"`Outputs` is starting to get crazy long. We should probably move this into a separate `<PropertyGroup/>`.
"
"@github Unfortunely the answer is no for most people. This feature requires changes on the OS-side. If you're a Windows insider, you can probably test it out in future insider release. 

I don't honestly know if this is available in the latest insider release. Correct me if I'm wrong."
"I just had the idea wondering it's possible to leverage browser virus scanning. Like when you download a file, there's an autoscan. Perhaps we can make use of that (I don't think its SmartScreen but could be wrong)."
"In regards to the future multiple window saving comment:

> * the monarch (on a timer?) can request all peasants to submit their ~taxes~ window layouts (possibly as json blob since remoting doesn't seem to have access to the models?)

this is intentional, yea. In general, I thought that the Remoting lib could exist regardless of the fact that it's exclusively being used for the Terminal. Not having a dependency on the settings model makes the build for that project a lot simpler too. Though, this is something I'm hitting with tear-out now too - it absolutely would be easier just to pass the `ActionAndArgs[]` up to the monarch to have them dispatch it, but I'd really rather avoid it. So I think it'll have to be the serialization of the args.

> * Not quite sure what should happen if someone just runs wt with a command. If someone does `wt sp; sp; ...` we probably want to give them that window at minimum, but I don't know if it should trigger loading the saved session too.

Oh yikes. I hadn't thought about that either. I wonder what something like Sublime Text does. I know ST will restore window layouts on launch, and can also be invoked on a directory directly. At least for Sublime, it'll restore all the previously closed windows, then _also_ open the newly requested one. That seems more reasonable to me then just ""blow away the old state"" or ""this new window is magic and closing it doesn't persist it's state, because it was created without invoking the old state"" or something crazy."
Based on the API to create this UI item I do not think you're allowed to set the frame of that UI element. If I'm wrong this it's easy to add later. However good call on `[DisableDefaultCtor]`.
"`global::` is necessary for cases when generated code gets the wrong symbol depending on the namespace it is being generated into.
To avoid this kind of potential risk, generated code generally adds a `global::` in front of all symbols.

I think it is fine to keep."
"Since `HolderBase` doesn't usually hold a string, I think `StringView` would be the wrong element to add here. I think `DisplayString` handles that case. I'll change it to `m_value`."
"wrong name, it's the `decideAction` that's the important part of the selector name
`ForMessage:completionHandler:` are the parameters"
"The string does not need to say the value. The AreEqual will show the expected and the found values. it is redundante. We do need the string to know what assert failed, maybe change the string to ""Wrong number of assets found"""
this si very good to know.  i wonder if it's something we could trap somehow to detect when we're doing this wrong.
"There are two scenarios:
1. you make your own IAsyncEnumerable instance by calling `GetData`: put `[EnumeratorCancellation] CancellationToken token = default` in `GetData`, use `token` in the body of `GetData` and you're all set
2. you get a enumerable from someone else, or one that has the wrong cancellation token baked in: use `.WithCancellation` to stamp/merge your own cancellation token onto this existing enumerable

This area is a bit confusing. I have a write-up if that helps: http://blog.monstuff.com/archives/2019/03/async-enumerables-with-cancellation.html"
wrong indentation
">TryCreateSpeculativeFieldKeywordBinder [](http://example.com/codeflow?start=30&length=38)

The ""TryCreate"" in the name implies that creation can fail. But we don't create the ```SpeculativeFieldKeywordBinder``` because it is not needed, not because something went wrong.
Consider renaming to something like ""AddSpeculativeFieldKeywordBinderIfNeeded"" and returning the original or ```SpeculativeFieldKeywordBinder```. This way all consumers will  be able to replace conditional logic around an assignment with unconditional assignment.  #Closed"
"I c i c, ya I can absolutely see the value in capturing those NFW's to ensure we can investigate what went wrong properly. Thanks for clarifying!"
"Damn, I didn't touch these lines... Isn't this set wrong in editorconfig somewhere?"
Curious: why the decision to go with the unqualified name here? My instinct would be that specifying the qualified name would lead to better performance overall (provider could be much more precise with matches). Where am I thinking about this wrong?
"base.Equal seems wrong.
"
"All the fields in this file are ""sort of public"" - they're visible to only LambdaRewriter (I think the `internal` modifier on the analysis is wrong - should be private, but not sure). They probably should be pascal cased, or underscore-prefixed, not sure.
"
"I suggest to just do what is good enough for Task today:
https://github.com/dotnet/runtime/blob/7db092a6ed68a5fbf47962c45bb0c1bb965d02c6/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs#L2642-L2646

that will be half the strings, and less duplicated code.

if it's important to tell them what's wrong, you could include the value in the string. (Task doesn't bother)"
"This would be my speculation how projects break down:

1. Projects that deploy on x86 and run within one order of magnitude of the load created by the TE benchmark: < 0.1% of apps
2. Projects where the developer wants to directly invoke GetCurrentStatistics(): <1% of apps
3. Projects where the developer will appreciate using a monitoring solution (AppInsights, OpenTelemetry, etc) or ad-hoc tools (dotnet-counters) to make the stats available for them in the future: 10-20% apps
4. Projects where neither the stats nor the perf matters: 50+% of apps

I'm worried about the experience of people in group (3). I want them to be able to turn on telemetry very easily when they want it. Anything where they have to follow extra instructions or change more lines of code creates friction in that process. If that means a tiny set of projects in group (1) have to have some friction to disable stats they don't care about I think it is the right tradeoff given my guess at the relative sizes of those groups. Certainly if others think my guesses about the group sizes are wrong they might come to a different conclusion."
This PR needs to work with the new tuple-spreading code. Both the expected and actual argument count are now wrong.
Why this change? This makes the code wrong since it destructures an array to an object..
"> I had a typo. The #if should have been either #ifdef or #if defined.

I was wrong, it wasn't a typo. In `pal_config.h.in` I used `#cmakedefine01 HAVE_GETPWUID_R` which means it will always be defined, with either 0 or 1 as value.

So using `#if VALUE` or `#if !VALUE` was correct in this case."
"Nope, that's not the same at all 😄 

If and _only if_ every export has an export modifier, then we can strip the export modifier from every export and retain the same meaning. With your suggestion, we'd remove export modifiers from everything, even if some things didn't have export modifiers, which is very wrong and would make privates public."
"@github It doesn't relate to the old code. The previous version calls `getParameterSymbolFromJSDoc`/`getHostSignatureFromJSDoc` for each parameter. The proposed version works the opposite. To get tags in TS/JS I moved this check to the `signature` level. Then, to compare parameters with tags, instead of using `indexOf` (in this case I think `indexOf` gives O(n) complexity) for each tag., I moved the parameters to `Set`. The `Set` is then used in the `jsdocParameters` loop to check for existing parameters by `JSDocParameter` name. Maybe this is the wrong direction, and a different approach should be taken here :(."
"I bumped the other members down, that seemed better because otherwise the first sort text member would have to be ""09"", and its sort text id would be 9, and it would be wrong to just do `sortTextId.toString()` on it because we need the double digits."
"In general this fix looks wrong, as it might result in making an interface dispatch instead of a constrained dispatch when making a constrained dispatch on a structure defined in another module, or something else unfortunate."
"You're looking at the wrong part of the baseline (this is the original .ts). Its corresponding emitted line is 15
"
"> Yeah, but we are not just shuffling bytes here. The callback is responsible for a bunch of stuff other than just pushing bytes to the connection -- e.g. assigning stream ID. framing, etc.

In the end its all bytes, you'd just shift from doing it earlier to doing it later. You enqueue the write and then later frame the buffers on the way out. This has the added benefit of potentially batching bigger writes together framed a single HTTP/2 data frame on the wire.

For reference, here's Kestrel's implementation:

This is where the loop is kicked off:

https://github.com/dotnet/aspnetcore/blob/a861d18d244a632281ef4a1402f29ad1051e5bf9/src/Servers/Kestrel/Core/src/Internal/Http2/Http2OutputProducer.cs#L77

This is the loop itself:
https://github.com/dotnet/aspnetcore/blob/a861d18d244a632281ef4a1402f29ad1051e5bf9/src/Servers/Kestrel/Core/src/Internal/Http2/Http2OutputProducer.cs#L392

Http2FrameWriter is the component that does the flow control and adds http framing to the bytes:
https://github.com/dotnet/aspnetcore/blob/a861d18d244a632281ef4a1402f29ad1051e5bf9/src/Servers/Kestrel/Core/src/Internal/Http2/Http2OutputProducer.cs#L451

The callsite writes to the pipe directly and flushes:
https://github.com/dotnet/aspnetcore/blob/a861d18d244a632281ef4a1402f29ad1051e5bf9/src/Servers/Kestrel/Core/src/Internal/Http2/Http2OutputProducer.cs#L233

cc @github to clarify if I got anything wrong"
My test was wrong and I have fixed it
"The particular value of the runtime base check isn't to validate them in cases where there is a cross-module boundary. Its to validate the data that *would be* used in a cross module boundary to ensure that the general type layout processing is correct. It turns out that while not exactly matching up to a useful value, it has been quite valuable at finding all kinds of edge cases that do affect the within version bubble cases. In particular, it is good at finding cases where the alignment calculations were subtly wrong in a way that didn't cause a field offset to be wrong in that particular test case, but could have caused a problem for other fields on the type.

Now, if it turns out the only incorrectness is caused by this incorrect conflation of cross boundary and non-deriving, we could use a different sentinel value like 0xFFFFFFFF or something or simply not allow a sentinel value for types that derive directly from object. @github I assume that you have an arm32 test environment where you can test this locally? Relying on the CI for this sort of testing is a giant time waster.

Also, what I've found in the past is that when a layout issue is particularly nasty is that I need to build a standalone repro of the bug, and debug in parallel through the native CLR type layout logic and the managed type layout logic and find where they differ. I worry that when you consolidated the 3 different ways in which we calculated base offset that you actually removed a way in which they are required to be very subtly different."
"Tagging subscribers to this area: @github/gc
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

This fixes an issue in Server GC where an item in the finalizer queue became stale due to not being relocated.

The problem was that a finalizable object was allocated on one heap, but registered in the finalizer queue of another heap (this is possible due to heap balancing). In CFinalize::UpdatePromotedGenerations, we ask for the generation of an object, and move the object to the correct section of the finalizer queue. In the error case, we obtained the wrong result for the generation of the object because it lived on another heap, and that heap hadn't set the final generation for the region containing the object yet. So we ended up moving the finalizer entry to the section corresponding to gen 2, and missed a relocation of the object occurring in a gen 1 collection afterwards.

Fix: It seems best to make sure an object is always registered for finalization on the heap it's allocated from, so the fix simply fetches the heap from the alloc context after the allocation in the case of SOH, or determines it by calling gc_heap::heap_of in the case of LOH and POH. In the case of SOH, I added an assert to ensure that the heap obtained agrees with the result of calling gc_heap::heap_of.

I also added some dprintf calls to the finalizer logic to aid in future investigations.


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>PeterSolMS</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-GC-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Is something wrong with CI or with my account's rights? I don't see PR testing triggered for my changes:
![image](https://user-images.githubusercontent.com/22642771/134083060-822436c2-f251-4c6c-b2f3-8af94a95668b.png)
"
"> There's 0% benefit on any Windows system with any file system?

According to https://devblogs.microsoft.com/oldnewthing/20120120-00/?p=8493 (which might be outdated as it was referring to Windows 7):

> If you issue around six reads in a row, each of which begins where the previous one left off, then the cache manager switches to FILE_FLAG_SEQUENTIAL_SCAN behavior for your file

But here for 99.99% of the cases we perform a single read (the size of the buffer passed to the OS is equal to the file size). I would expect it to be smart enough to recognize the pattern.

> Should we simply change the implementation to only specify this on Windows, since there it's (I believe, please correct me if I'm wrong) free 

From the benchmarks that I've run (Win 11 + SSD + NTFS + BitLocker) I see no perf gains. I can add it for Windows if you think it's worth it just in case it's beneficial for some other configs (older Windows? FAT32?). "
"In general everything looks really nice but there are a couple of wrong cases:

![image](https://user-images.githubusercontent.com/6755973/162424073-4acd03a5-d8f9-4431-94e1-f819eb4a2cf0.png)
This ellipse should fill all the yellow space.

![image](https://user-images.githubusercontent.com/6755973/162424163-757dac90-f396-46f5-9285-0b69defe44cb.png)
This should render a spiral path in the center.

Sometimes the bounds by flattening are wrong. For example, in the second case, Width and Height is zero."
nit: comment is slightly wrong
I've moved this. Not sure why the diff is wrong.
"This is wrong, it should return an error object."
Crazy code added
"> If the application completed, it's done writing too, right? Can we just fully close the stream?

The HTTP/3 spec says a server should abort reading if the server has completed processing.

https://quicwg.org/base-drafts/draft-ietf-quic-http.html#section-4.1-15

> Or does this happen only when the body PipeReader was completed? If that's the case, maybe the message should say ""The application stopped reading the request body."" or something.

I have reused the logging message that the HTTP layer reports when a request is completed without reading the request body.

This code only executes once the request delegate is complete. If some code is still trying to read from the request body then they are doing something wrong. I think this error accurately describes why reading from the body."
"I believe this is just something that wasn't catered for initially as with form files not being supported the code wouldn't get this far with something the parameter description would be wrong for. Without this check, it'll generate a parameter description that doesn't render appropriately in Swagger UI for dealing with a file.

I'll re-check this when I rebase and grab some screenshots of the before-after UI behaviour from rendering the OpenAPI document."
"Any ideas what the best path forward is?  The previous iteration at least got to the tests running (albeit with the wrong bits)

I am able to build locally with things either way, so I'm not sure what the ci does differently, although I do notice that the arm64 build job doesn't seem to be producing the ANCM/arm64 dlls strangely since those do get generated when running build.cmd in the servers/IIS directory"
"The 15.3 preview is publicly available now and does not break with this change.  The consensus among the leads is that it is reasonable to expect contributors to Roslyn to be on the public preview track.  Especially in the time surrounding releases. 

@github can correct me if my memory is wrong here. "
"> Because it's not too challenging to get right at this scale. 

That's not an acceptable reason.  Complexity has to justify itself over non complex solutions.  ""because we can"" isn't a reason.   We have countless examples of unnecessary complexity being something that has significantly impacted us in extremely poor ways over Roslyn's lifetime.  There are times when it is appropriate, and data shows the value we get out of that.  But in the absense of that, we should be going for the simplest, correct, solution we can provide.

In this case, it seems like a simple lock, with a couple of data fields (or one, if you want to just merge the boolean + the count into one field), would be sufficient.  It would then be far more trivial to review, comprehend, and maintain.  

There's nothing wrong with using a lock.  It's what we do almost entirely in the IDE code (that, or just using tasks ordering), and it works very well and is consistent with the rest of the code.  Since we don't use these lock-free/wait-free forms, this means this code is automatically much harder to reason about since it's different from our standard patterns and practices, and practically no one on the IDE routinely codes this way.

Please follow the patterns of the rest of the IDE unless we have data that indicates substantive problems with those approaches that warrant these types of solutions."
"@github, I think those test failures are an issue caused by running on the wrong runtime.

Note the result for https://dev.azure.com/dnceng/public/_build/results?buildId=1138686&view=ms.vss-test-web.build-test-results-tab&runId=34540072&resultId=123876&paneView=debug which actually passes.

I can see in AzDo, that the failing test ran as part of workitem `{ ""HelixJobId"": ""91361424-0db7-42aa-ba2d-5656f83b8c40"", ""HelixWorkItemName"": ""Microsoft.Extensions.FileProviders.Embedded.Tests--net461"" }` and the successful one ran as part of `{ ""HelixJobId"": ""91361424-0db7-42aa-ba2d-5656f83b8c40"", ""HelixWorkItemName"": ""Microsoft.Extensions.FileProviders.Embedded.Tests--net6.0"" }`

Looking at those names, I'm suspicious. Does that imply that the failing test actually tried to run the binary on the .NET 4.6.1 runtime, and the succeeding test ran on the .NET 6 runtime. If so, that is an indication that the test passed just fine as we don't expect these images to actually work on .NET 4.6.1 after running crossgen.
"
"We'll want to test `[GenericAttribute(1)]` where `GenericAttribute<T>`.
What is the desired language behavior (infer type arguments or not)? Depending on that choice, the logic below may be wrong. #Closed"
"I think these two are the wrong message. ""protected internal"" and ""private protected"" should be the same as ""internal"""
"I think this is the wrong approach. This DLL deliberately targets netstandard1.3 in order to avoid multi-targeting all the places you just added. The design of this DLL is to provide a netstandard1.3 API set with a net46 and netcoreapp2.1 implementation. "
"This feels wrong, classification should reflect the nature of conversion , not the syntactic form used. Please open an issue for this.

---
In reply to: [250778640](https://github.com/dotnet/roslyn/pull/32729#discussion_r250778640) [](ancestors = 250778640,250776752)"
i feel dumb... why is this better than before?  the lack of cancellationToken seems fishy at first look...
"Comment seems stale since there's no ConfigureAwait here. (Yes, I know it's not your original doing but it's definitely wrong...)"
"Yes, that should avoid allocating an extra string, and Invariant is the wrong comparer for strings. #Closed"
wrong copyright (we changed everything).
"Actually that's wrong. Because it is going under `lib`. This is not desired. Thanks for checking @github -- then we can't use my suggestion here 😄 "
Seems like this comment needs a rewrite now. Since the rest of this method is proving that this comment was wrong...
"Ah, yeah I merged the ArgumentException and the CryptographicException but kept the wrong type name."
"Just cause that's a bit more complicated code, and this covers a broader category of cases automagically. `commandVal.isString()` is false for `null`, `4`, `false`, `true`, `{""foo"": false}`, etc. This way, we won't try and parse _anything_ that's the wrong type, _including_ null."
"> I guess, given the current CLR behavior, the code could switch from overriding the right method to overriding the wrong method at runtime.

I don't think we've characterized the bug sufficiently well to conclude that can happen. #Resolved"
we have ways of asserting this.  it woudl be good for us to do that assertion so that if this ever turns out to be a wrong assumption we can get a crash immediately instead of a hard to figure out race condition.
"You do not really need to include `lookInBundle` in the hashcode. It is unlikely that there is going to be collision on the same path is pretty unlikely.

However, you do need to make sure to compare `lookInBundle` in `CompareImage` that is `s_Images` equals function. Otherwise, you can end up with intermittent wrong results due to hash collisions."
"NO. You install things into /usr/local, without tracking.
YOU WRITE THINGS INTO BASHRC!!! And apparently root's bashrc. What about people who don't use bash?
What's wrong with you?

This code isn't safe, it doesn't have `undo` command and it's tailored for one user only.
"
"Sorry, issue had the wrong milestone... I will update"
"2 things (this is all opinion though so I could very much be wrong):
1. ""clearing the color"" (represented by setting the color to 'null') just means to fallback according to your chart above.
2. The tab color picker and all ways of invoking it (i.e.: context menu, keybinding, etc...) needs to present the fallback as an option. I imagine it being something like this...
   - `profileColor`: fall back to the profile's color
   - `themeColor`: fall back to the theme's color
   - I don't think TabView color should even be an option tbh.  I feel like the absence of a theme is in itself a theme."
"Fine with me. Also, please add comments like: ""This is defensive check in case the number of bytes provided by Windows is wrong. We have not seen this situation in practice.""."
"However, my icon design template was downloaded from Apple’s official website, and there should not be any uneven shape and shadows.

The corresponding website and design resource links are as follows:
- https://developer.apple.com/design/resources
- https://devimages-cdn.apple.com/design/resources/download/macOS-11-Sketch.dmg

Oh, what's wrong~
Finally, I still hope you can share the Figma file, let us design a better `Code - OSS` icon for macOS Big Sur."
"""Currently, the swipe behaviour of each row is independent of other rows in the list"" And that is how it should be. An object shouldn't have logic that facilitates it's client responsibilities. An object should encapsulate it's own behaviour knowing nothing about the world. If there should be a property like AutoClose, It should reside in the container that contains items because then that is it's responsibility. but to put AutoClose in an object for the sake of desired client behaviour is wrong OOP.

Can I use SwipeView outside listing scenario? Yes, hence AutoClose is violating OOP if you put in this class."
@github if there's something wrong in the code please let me know.
"> was it intentional that auto-detection occurs after a language mode has been set via paste? IMO the source of the paste is a much higher confidence guess than anything a model could come up with.

Nope. I _thought_ that it wouldn't happen because the language mode would be explicitly set by the paste but I guess I was wrong."
"It would be helpful if I could get suggestions for language IDs after typing `@github:`. I can't necessarily remember whether what the ID of a langage is, and I get this in settings.json.

Also, if I use a language ID that doesn't exist, I still get results, and can't tell that anything is wrong."
"This is not a VS Code regression. The root cause is that we receive invalid semantic tokens data (e.g. we receive an edit which says “insert a new token at offset 4 billion in this array”). We didn’t validate that specific wrong kind of value and ended up doing a loop up to 4 billion to copy the first 4 billion elements before the insertion. I think the code on our side is there in that shape since more than 1 year, so I can only explain that this is now such a big problem because Pylance maybe changed something recently. We plan to tackle this by releasing a new Pylance extension with the fix."
">// Note: definitions and subsituted symbols are not equal even when ignoring nullability [](start = 12, length = 88)

@github @github FYI This behavior seems wrong, but I didn't file an issue for this because from our discussion, trying to adjust this seems very risky (likely performance impact and other unknowns).  #Resolved"
"It actually did end up being related. Because we're now also copying the trailing attrs, there was a case where we'd copy the attrs to the end of the row, but then set the new cursor position to the last column of the row the cursor was on. 


(it may not be relevant anymore, but it's not more wrong.)"
Worried a bit about the resize - how often will we start up at the *wrong* size?
Can we simply use `pLoaderAllocator->IsCollectible` - I think it should be always true if `ASSEMBLY_ACCESS_COLLECT` was used. And I think it's wrong if collectible assembly is created on non-collectible allocator.
"This should likely also `<Exec/>` to a `chmod +x $(OutputPath)bin\generator`, in case `tools/scripts/generator` has the wrong `+x` permissions.
"
"
> @github just to make sure, do you send the sequence code (ESC ] 9 ; 9 ; “cwd” ST) before duplicating? If yes, you probably has a weird problem like me, I can't use this only on my personal PC

I did try this, however I must have been doing something wrong - perhaps someone could help with an idiots guide, or a link to similar? Thank you

"
"Yes! It works when I manually check it, but I'm not completely sure on how to check with all the unit tests. Is there any documentation on how to run all your tests correctly? I ran from the command line before I ever made any changes, but there were still a couple API checks which did not pass even then, which tells me I'm doing something wrong.

My process is now:
1. Clean CascadiaPackage
2. Rebuild CascadiaPackage
3. Deploy CascadiaPackage
4. Test > Run all tests

Is there another way I'm supposed to do this? What output should be expected and is okay to push with? Will this way run all of `runut.cmd`, `runft.cmd`, `runuia.cmd`, and `runformat` mentioned in ""How to build OpenConsole""?

Sorry if this is a little bit a lot. I haven't contributed to open source before, and so I'm trying to get the hang of it all (as well as Visual Studio).

Thank you for all your help!"
Wrong indentation.
"I know, I did it on purpose :)

If someone just changes the top #if, I want them to be sure that they update the check. To avoid something to be landed that is wrong."
I think this is because the wrong configuration of System.Private.DataContractSerialization is getting picked. One more reason why not to go with this approach I guess.
"What I have here is actually wrong, we should check the `_connection` inside the lock. We handle all the changes to it inside a lock. So I have a potential race here. I need to fix this.
Thanks for pointing at this code and the locking!"
"Overall, I'm not saying that doing a binding check is wrong. I'm saying it's not necessary or even recommended per the guidelines we'd settled on. I'm okay with a binding check, although I agree with Rikki that it's not typical.

> I wrote that rule :) A diagnostic means that the tree is not valid in some fashion.

Neal was the compiler advocate for improving re-usability of nodes in incremental parsing and many features were added with parser-level language check under his watch after he'd created this document. The point of the rule is that we parse the best we can and get the same tree shape regardless of langver.
You're correct that we made an explicit exception for record-parsing (langver affects the shape of the tree in that case, ie. goes beyond diagnostics).

> this makes parsing not context free.

No. Incremental parsing is not impeded by having a language version diagnostic on new language syntax. In practice, what context-free means is that we prefer to avoid is passing flags into nested parsing methods. It doesn't mean we shouldn't produce langver diagnostics (as the many features added since discussion demonstrate).

> This also means that if you change compiler

I don't think that's a scenario ;-)"
">{ [](http://example.com/codeflow?start=16&length=1)

The alignment looks wrong. #Closed"
Coding style in this file is wrong.
"Yes, the latest version of this code is the one we want. The prior one was indeed wrong and led to test failures. We want to filter out all regular analyzer statesets which are not from build, without touching the compiler analyzer stateset."
"> > /cc @github @github
> > I think this is it for the new TargetFramework support, it seems to work fine. For our own tests I decided to not include the OS version in the TargetFramework, because that seems quite annoying to have to update in the future.
> 
> I would sync with @github and @github on this. When designing the `TargetFramework` changes, we had said that we would recommend being explicit about the platform versions for iOS and Android.

Yes, I totally agree that the message to app developers should be that they should be explicit about the platform version (and that should be reflected in our samples and templates).

However, in this particular case, it's for our own (the Xamarin.iOS' team) tests, and things get a bit less clear.

> For a given version of .NET, we should not change the default target platform version out from under you (once we've shipped an RTM of the tools supporting that version). So if `net6.0-ios` means version 13.6 of iOS, we can't change the SDK later on so that it means 13.7 or 14.0. Once we add support for `net7.0-ios`, we could choose a different default platform version in that case.

I think one thing that should be clarified is who exactly defines the default target platform version (who is ""we"" in the sentence above?)

I was under the impression that it would be the SDK teams (the Xamarin.iOS team for iOS), which means it would be the Xamarin.iOS team who would be responsible for updating the default target platform version whenever that can/should be done.

And in that case, as it stands with this PR, all our tests would start using the new default once we (the Xamarin.iOS team) change it (and that seemed like the behavior I'd expect when we change the default).

> So I don't know if leaving the platform version out of the `TargetFramework` would avoid needing to update the number anyway.

This is not something we ship, so we can always change our decision later if we find out that I was wrong."
Hmm - nothing immediately obvious stands out to me as being wrong.  Potentially the test workspace doesn't have the right reference for `System.Runtime.InteropServices`?  Not sure that is the case though.  I can check out this branch tomorrow (its the end of my work day now) and see if I can help debug where its going wrong and report back.
"Correct. The previous behavior was that this would *not* write out the file if it contained compile errors, but it's hard to diagnose why the file isn't compiling if you can't see it. So this now means ""generate to disk"" instead of ""generate in memory"" and throws the exception after writing out the file so that you can actually see it to figure out what's wrong"
"I did not get the part about `GetOptionalParametersCnt`. Are you suggesting to make a method:
```
public int GetOptionalParametersCnt()
{
   var parameterInfoCalledThe2ndTime = GetMethodParamsInfo();
   return parameterInfoCalledThe2ndTime.Count(p => p.HasDefaultValue);
}
```
and use it in the constructor after populating ParametersIndo:
```
public MethodInfo(....)
{
   ....
   ParametersInfo = GetMethodParamsInfo();
   OptionalParametersCnt = GetOptionalParametersCnt();
}
```
That is the way I understood it, maybe I got it wrong. Because calling the function twice does not make sense to me ;)"
"Might be a dumb question, but why do we need to base it on the Assembly name as opposed of just creating a completely random one? "
"```suggestion
                    && document.Folders.Count >= 1
```
I could be wrong, but it seems like there is no reason a count of `1` should be required or is this because we are only attempting to do this in the case of the vanilla project layout?"
"To clarify, my (wrong) guess was that this was supposed to be used only by gulp-related stuff so I looked only in `scripts/build` and missed the above completely.  (Again, see general comment.)"
"This now gives an `error` type but doesn't show an error. That seems wrong to me, and seems similar to a complaint that @github had about an earlier test, but I can't tell if your explanation there applies to this test or not.

Here's what I see:

1. Symbol.iterator exists, and has type symbol. Fine to use as a computed property name.
2. That computed property name should, ideally, look up the property in the call expression and give the expected error."
"Whoops, wrong message.
"
"Also the plaintext, with the crazy high locks"
Fix for the wrong msbuild function name: https://github.com/dotnet/arcade/pull/6552
"Nit: ""interface"" is the wrong word here since we allow other types.
"
"@github Yes, ""unfortunately"" -- that would have been a hint indeed that something was wrong/changed from before."
"Tagging subscribers to this area: @github, @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

The current error message gave me no pointers on what was/went wrong when I had an extra parameter to `ActivatorUtilities.CreateInstance<SomeClass>(provider, usedParameter, unusedParameter)`. I experimentally found out that this causes issues. 

Adding to the error message that all parameters have to be consumed would have saved me some time, and I hope that this change will save some time for a future developer.

Example that gave me unclear instructions:
```cs
        private interface IService
        {
            string Name { get; }
        }

        private class Service : IService
        {
            public string Name { get; set; }
        }

        private class MyClass
        {
            private readonly IService serviceA;
            private readonly IService serviceB;

            public MyClass(IService serviceA, IService serviceB)
            {
                this.serviceA = serviceA;
                this.serviceB = serviceB;
            }

            public void Print()
            {
                Console.WriteLine(serviceA.Name);
                Console.WriteLine(serviceB.Name);
            }
        }

        static void Main(string[] args)
        {
            var services = new ServiceCollection();
            services.AddSingleton<IService>(p => new Service { Name = ""Injected"" });

            var provider = services.BuildServiceProvider();

            var special = new Service { Name = ""Special"" };

            // The extra ""Unused"" string is not consumed by MyClass
            ActivatorUtilities.CreateInstance<MyClass>(provider, special, ""Unused"");

            // Throws: System.InvalidOperationException: 'A suitable constructor for type 'TestProject.Program+MyClass' could not be located. Ensure the type is concrete and services are registered for all parameters of a public constructor.'
        }
```

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>jorisvergeer</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Extensions-DependencyInjection`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github, @github, @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Currently we are making a call to Interop.AppleCrypto.X509GetSubjectSummary on each call to EnsureCertData. 
However, this is needed only when something goes wrong, for a better error message. Thus, moving the call into the catch block.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>odhanson</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Security`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"@github or @github just curious, do you see this button?

![image](https://user-images.githubusercontent.com/6385855/135317781-9bb42c82-c205-4a60-8045-994485f34913.png)

My assumption is that folks only get this if they either have an enterprise sub (eg., presumably all Microsoft employees do) or they joined the CodeSpaces beta. But I'd love to be wrong."
"Typical usage is simply:
```
;; prerequisite: build checked and release in the repo
python3 superpmi_aspnet.py -source_directory <runtime-repo-root> -output_mch_path <some-dir> -arch x64   
```
If successful this produces files suitable for upload
```
<some-dir>\aspnet.run.windows.x64.checked.mch
<some-dir>\aspnet.run.windows.x64.checked.mch.mct
```
and prints a lot of output from crank, describes the clean/merge process, then dumps out the mch summary, eg
```
Grouped Flag Appearances (43364 contexts)

bits                count  percent  parsed
0000000048820000      119    0.27%  FEATURE_SIMD SKIP_VERIFICATION IL_STUB BBOPT
0000000248820000      107    0.25%  FEATURE_SIMD SKIP_VERIFICATION IL_STUB BBOPT PUBLISH_SECRET_PARAM
0000006248820000        1    0.00%  FEATURE_SIMD SKIP_VERIFICATION IL_STUB BBOPT PUBLISH_SECRET_PARAM REVERSE_PINVOKE TRACK_TRANSITIONS
0000008000820010     5203   12.00%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION TIER0
0000008020820010    18354   42.33%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION BBINSTR TIER0
0000000040820010     3815    8.80%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION BBOPT
c800000040820010       20    0.05%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION BBOPT HAS_PGO HAS_EDGE_PROFILE HAS_STATIC_PROFILE
d800000040820010        3    0.01%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION BBOPT HAS_PGO HAS_EDGE_PROFILE HAS_LIKELY_CLASS HAS_STATIC_PROFILE
0000010040820010     4742   10.94%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION BBOPT TIER1
c400010040820010     6304   14.54%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION BBOPT TIER1 HAS_PGO HAS_EDGE_PROFILE HAS_DYNAMIC_PROFILE
c800010040820010     1322    3.05%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION BBOPT TIER1 HAS_PGO HAS_EDGE_PROFILE HAS_STATIC_PROFILE
d800010040820010      483    1.11%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION BBOPT TIER1 HAS_PGO HAS_EDGE_PROFILE HAS_LIKELY_CLASS HAS_STATIC_PROFILE
e400010040820010     2761    6.37%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION BBOPT TIER1 HAS_PGO HAS_EDGE_PROFILE HAS_CLASS_PROFILE HAS_DYNAMIC_PROFILE
0000002040820010        1    0.00%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION BBOPT REVERSE_PINVOKE
0000008080820010        6    0.01%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION FRAMED TIER0
00000080a0820010       56    0.13%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION BBINSTR FRAMED TIER0
00000000c0820010        6    0.01%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION BBOPT FRAMED
00000100c0820010       26    0.06%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION BBOPT FRAMED TIER1
c4000100c0820010       26    0.06%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION BBOPT FRAMED TIER1 HAS_PGO HAS_EDGE_PROFILE HAS_DYNAMIC_PROFILE
c8000100c0820010        6    0.01%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION BBOPT FRAMED TIER1 HAS_PGO HAS_EDGE_PROFILE HAS_STATIC_PROFILE
e4000100c0820010        2    0.00%  DEBUG_INFO FEATURE_SIMD SKIP_VERIFICATION BBOPT FRAMED TIER1 HAS_PGO HAS_EDGE_PROFILE HAS_CLASS_PROFILE HAS_DYNAMIC_PROFILE
0000000000820030        1    0.00%  DEBUG_INFO MIN_OPT FEATURE_SIMD SKIP_VERIFICATION

Individual Flag Appearances

   43137   99.48%  DEBUG_INFO
       1    0.00%  MIN_OPT
   43364  100.00%  FEATURE_SIMD
   43364  100.00%  SKIP_VERIFICATION
     227    0.52%  IL_STUB
   18410   42.45%  BBINSTR
   19744   45.53%  BBOPT
     128    0.30%  FRAMED
     108    0.25%  PUBLISH_SECRET_PARAM
       2    0.00%  REVERSE_PINVOKE
       1    0.00%  TRACK_TRANSITIONS
   23619   54.47%  TIER0
   15672   36.14%  TIER1
    9093   20.97%  HAS_DYNAMIC_PROFILE
    1834    4.23%  HAS_STATIC_PROFILE
     486    1.12%  HAS_LIKELY_CLASS
    2763    6.37%  HAS_CLASS_PROFILE
   10927   25.20%  HAS_EDGE_PROFILE
   10927   25.20%  HAS_PGO
```
If things go wrong it may not be obvious. In particular, if any of the 40 or so crank runs fails we just keep going. 

To verify the collection is healthy I usually check that we get at least ~40K method contexts pverall, and at least ~10K with PGO."
"> I mean, that's an interesting feature creep that requires a lot of human labor. An alternative here would be to simply run the SendToHelix task in an msbuild environment where warnings are not set as errors, which is why this warning was promoted to being an error. We've already tried just logging a message that used logging commands to be a warning in the build, this was ignored.

But this doesn't solve the problem that we start showing EOL to clients with no alternative to migrate to. I don't think that's a good experience for the client teams? It's not a lot of work too - we are already doing extra work when EOL warning starts for a queue, I think adding one more record to the YAML is not too crazy a requirement?
"
Wrong comment?
@github I would expect in the future that this experience is more integrated. I imagine support for this within razor itself (when it detects a component inside a view it knows what to do and offers appropriate intellisense) is that crazy?
Just to be pedantic since this change is taking longer than it needs to. What's wrong with `=`?
"Hi Ryan,
glad we are on the same page on the possible use cases for this.
I guess adding all those scenarios in the example will help to not get this comment lost. let me know if I can help.


------
David - you are on point mentioning logs, as it is relevant for all the scenarios, not only for tracing. As I started to replace the current logic on applications with this package (as I published a backport package to 2.1-2.2), it has been the main pain point (on top of the clumsy setup which now Ryan got much better :) ).

I was originally tempted to include the ability to also add the header to the logging scope, but it seemed out of scope. However right now to add a value to the logging scope you either have to capture it from the `HttpContext` again on a separate middleware or, expecially when you rely on the factory, you have to access the `HeaderPropagationValues` (which hold these values) from a separate middleware to add those values to the logging scope, which feels wrong (I guess ideally it should be internal but then you will close this door).

Sorry for going off topic, but It would be really nice to have your opinion on this. Thank you.

"
"nah. You and @github are right but for the wrong reason. "
Doesn't this allocate a crazy number of arrays?
I think I answered my own question [here](https://github.com/dotnet/aspnetcore/pull/23703/files#r450629775). You can correct me if I'm wrong.
"I would not do this - `RelatedAssemblyAttribute` is from Mvc.Core which is part of the framework, so pretty much always loaded into the default ALC. So this is the same as doing `AssemblyLoadContext.Default.LoadFromAssemblyPath`.
If in the future something loads the ""main"" assembly (the one with the related assemblies on it) into a secondary ALC this will likely be wrong and things might break. I think it should be `AssemblyLoadContext.GetLoadContext(assembly).LoadFromAssemblyPath` - where `assembly` is the ""main"" assembly."
"You shouldn't need this check or the ""above 0x10FFFF?"" check below. If you change line 540 below to call `Rune.TryCreate` instead of `new Rune(...)`, that will detect UTF-16 surrogate or above-0x10FFFF inputs and return _false_. So you'd end up with:

```cs
if (!Rune.TryCreate(currentDecodeBits, out Rune rune) || !rune.TryEncodeToUtf16(/* ... */))
{
    return false; // something went wrong
}
```"
"Returning `Name` for the `RelativePath` will also be wrong. The test will fail no matter what. So, it is better to set the correct value or not set it at all"
"Yes, the comment is wrong."
"> With that, both formatters will do the serialization and check if the `model is null` and report back the `NoValue` state, that is where I feel we can do better, something like
> 
> ```cs
> if (model == null && !context.TreatEmptyInputAsDefaultValue)
> {
>     if ( [check for JSON-encoded value ""null""]) 
>     { 
>         bindingContext.ModelState.AddModelError(context.ModelName, ""The new message"");
>         return InputFormatterResult.Failure();
>     } 
> 
>     // Some nonempty inputs might deserialize as null, for example whitespace. 
>     // The upstream BodyModelBinder needs to
>     // be notified that we don't regard this as a real input so it can register
>     // a model binding error.
>     return InputFormatterResult.NoValue();
> }
> ```

I'm not sure we want to report failure at such a low layer. After all, `null` is one of the ""nonempty inputs might deserialize as null"" that the `BodyModelBinder` needs to know about. I don't think that either `!context.TreatEmptyInputAsDefaultValue` nor `EmptyBodyBehavior.Disallow` implies that a `null` literal should be rejected outright. It should be if the parameter is non-nullable, but we don't know that at the `InputFormatter` layer do we?

We probably should be changing this to return `InputFormatterResult.Success(null);` for `null` literals instead of `InputFormatterResult.NoValue();` regardless of `TreatEmptyInputAsDefaultValue` because it's not truly empty.

It's a literal default value, and the whole problem here seems to be that both empty input and null literals are being collapsed into a single `NoValue()` when `TreatEmptyInputAsDefaultValue` is `false`. It's fine for these values to be collapsed when `TreatEmptyInputAsDefaultValue` is `true`, because that's what you asked for, but not the other way around.

I don't think it's necessary to check if there was an empty request body or `null` because the method you're modifying, ` ReadRequestBodyAsync`, is only called when the body is non-empty (or at least we think it will be) that what the `canHaveBody` logic I linked to earlier was doing. It was deciding whether to call `ReadRequestBodyAsync` or return `NoValue()` immediately:

https://github.com/dotnet/aspnetcore/blob/39219394f66854db5d556ad78f9bb065ee48b585/src/Mvc/Mvc.Core/src/Formatters/InputFormatter.cs#L102-L116

And if the `canHaveBody` logic was wrong, and we thought there was going to be a body but it turned out to be empty, `JsonSerializer.DeserializeAsync()` in  `SystemTextJsonInputFormatter` will throw a `JsonException` which will always be turned into a `Failure()`.

Unfortunately, Json.NET turns an empty body into `null` when you try to deserialize. Again the `canHaveBody` checks should prevent this from happening for most empty bodies but not all. I assume we copied the `if (model == null && !context.TreatEmptyInputAsDefaultValue)` logic from the `NewtonsoftJsonInputFormatter` to the `SystemTextJsonInputFormatter` because it makes very little sense in the latter case where it will only return `null` for a null literal and nothing else.

@github Is there anything wrong with just removing the `if (model == null && !context.TreatEmptyInputAsDefaultValue)` branch entirely `SystemTextJsonInputFormatter` and always `return InputFormatterResult.Success(model);` when `JsonSerializer.DeserializeAsync()` doesn't throw?

I imagine we'll have to be more careful with the Json.NET input formatter for back compat. It's always reliably treated `null` and empty bodies as exactly the same because they were indistinguishable from just the call to `Deserialize`. We could in theory try to test if any bytes were actually read from the body stream after the fact to determine the difference, but that would be a breaking change."
"> not sure why you want that in the comment in the code

Because that's what people will be reading in the future... Please put yourself in my shoes for a moment.  Say i need to debug through this code 6-12 months from now.  Something has gone wrong and i step in here and i see this comment and this check.  Now i'm scratching my head tring to figure out what's going on and if this might be hte source of the problem i'm looking at.

Now, i have a few things that could help.  The most ideal would be clear explanations in the code of what's going on.  That allows me to understand while keeping me in context.

in the absence of that i must now do an external investigation of this code to try to figure out what's going on.  For example, i may have to now track this code back in git to figure out hte inception point, which can be brutally difficult at times, especially when code is moved *across* files.  This may or may not lead to me useful information.

As such, i far prefer when we try to make the code *itself* as clear as possible to help future maintainers.  Note that this is not a speculative concern.  As someone who had to try to track down many issues in formatting over hte years, this sort of approach to the code would have been *majorly* appreciated.

I do not feel like it is unwarranted or excessive to ask people making changes to complex and subtle parts of the system to then put in a little extra effort toward making the changes clearer.  it really goes a long way and is very appreciated.  Thanks much!"
this surprises me.  what was wrong with the prevoius color?
"In any case: if you don't investigate that prior to merge, I'd say you should instead disable the test (rather than update to an incorrect baseline) and file a tracking bug. The IDE generally does _not_ do the ""assert the wrong thing for now"" pattern."
"Unfortunately 'containsdiagnostic' is often wrong.  For example, syntactic *warnings* will trigger it.  

We should just get the SyntaxReferences for the NamedTypeSymbol though and check those directly (i.e. checking for the right severity).  

so this should be more like:

```c#
foreach (var syntaxRef in namedTypeSymbol.DeclaringSyntaxReferences) 
     if (syntaxRef.GetSyntax(cancellationToken).GetDiagnostics(...))`"
"> the language version check seems wrong 

I think the intent was to replace it with corresponding nullable warning and have it be enabled/disabled as all other nullable warnings.

---
In reply to: [314092390](https://github.com/dotnet/roslyn/pull/37596#discussion_r314092390) [](ancestors = 314092390,314087501)"
"It's a little bit concerning that users might get this wrong then. (though it's not different from what we had in the past)

Doesn't `HttpContent` dispose the stream when it's read?
"
"We use this for displaying test results if something goes wrong. Added this as a comment. Please let me know if you prefer another approach for this.

---
In reply to: [367153520](https://github.com/dotnet/roslyn/pull/38748#discussion_r367153520) [](ancestors = 367153520)"
Seems wrong to use `TARGET_64BIT` here instead of `TARGET_ARM64`
Ignoring of the exception. The user does not even know that something has gone wrong.
"This is actually wrong because I'm assuming that if it hasn't expired now, it will still be alive in the lines below but it's wrong because it might be destroyed later on the main thread.

I need to fix this (not ready for merge yet!)"
"Ah, got it. I read the first part wrong. Thanks."
"The whole logic here seems duplicate of `Begin(Timeline item)`, or maybe I am wrong? Why not just call `Begin(item)` instead?"
"This should be available in the nuget that went out yesterday. 

@github correct me if I'm wrong"
"""Mirror"" represents LiveShare spinning up a proxy for the server IIRC. So when you have ""RunOnHost"" it means there's a LiveShare server on the guest that gest spun up to proxy calls to your server running on the host. For instance, LiveShare's proxy client's have ""RunOnGuest"" and they're the only ones that have that. I could be wrong here but there were a lot of discussions about how this should function and ultimately language servers shouldn't have to apply the ""RunOnX"" attribute."
"> I just realized, why are you doing this? There is a better mechanism in .NET Core to do this and what is worse this is wrong for BCL assemblies and will issues warnings for customers.

We are trying to make the illink work with XA, so we want to get to a state where the linked apps run fine. The preserve lists are the ones we are using with the original linker. I am going to review these and update some of them in the following PR.

So far I see this warning:
```
17:39:13.625   1:8>ILLink : warning IL2001: System.AppDomainSetup: Type System.AppDomainSetup has no fields to preserve [C:\Users\rodo\git\xa-master\bin\TestDebug\temp\DotNetBuildRodoTrue\UnnamedProject.csproj]
```

What is this better mechanism you mention? I might try to use it when I am looking at it next week."
">Also, I suspect there are other codepaths in binding we don't report all binding errors if the expression contains syntax errors. 

Not for subpatterns apparently - probably because we only had an identifier before and it couldn't go wrong. I did a little experiment to see how it looks like (with all green pattern tests; semantic and syntax): https://github.com/dotnet/roslyn/commit/d3f1e7f1bd1c14c2ca3a398eae71a9c18b912a1f?w=1
We already use `preview` version so there wasn't a need to adjust the baseline.

Anywho, if you feel that's gonna be an issue I'll be fine to keep it in the binding."
"I copy pasted all of the spam from the various deprecation attributes and then went back and fixed things like 's and such, but missed ones like this who's text is completely wrong."
"So, I've got some feelings about this new Color Schemes page. I think we might have gone ""too hard"" on Expanders, to the point where the page has lost coherence. It's a page for editing color schemes, it should not take so many clicks to _edit a color scheme_, you know? Hiding the various types of color, which are all kinda the same setting at the end of the day, in different groups... it rubs me the wrong way.

In addition to that, Add New and Rename getting their own areas, separate from the scheme, feels like they were just bolted on as an afterthought.

I want us to stop and reconsider this page, and how it flows. The preview on top, the scheme selector (which is a _single setting_ that controls the _contents of the page_), and then the colors might be the wrong order in which to tackle it.

If we had a ground-up redo, what would our color scheme editor look like? How would we want the user to flow through it?"
"`count - offset` looks wrong here, `offset` can easily be bigger than `count`, in which case you'd end up trying to create an array of a negative size.

Shouldn't it be just `count` instead?

```csharp
var srcManagedBuffer = new byte [count];
var dstManagedBuffer = new byte [count];
```"
"More I'm just not sure what advantage `Unbox` gives here. Typically I think of `Unbox` as useful when I want a `ref T` for the unbox. Essentially the ability to mutate the object. Here we immediately return the result by value hence I'm just not clear what `Unsafe.Unbox` is giving us here. 

Not saying it's wrong, just saying I'm missing the win it's providing over casting. "
"That would require quite a lot of changes over the JIT code base as all code addresses in JIT are read-execute and the RW are used only at places where it is needed. So everywhere that dst is used now, it would become dstRE. That seemed like a noise change to me that would obscure the real changes.

> what would happen if a jit developer uses a wrong address for a write (dstRW instead of dstRE, or dstRE instead of dstRW)

If you attempt to write using dstRE address when jitting, the JIT would crash as it would not be able to write there. If you use the dstRW address instead of dstRE, it would be fine unless you use it for code relative address computation.
I've tried to use the dstRW only locally so that it would be hard to make such a mistake. The only exception is the NOP generating code that calls itself recursively and it would have to update the RE pointers to match the RW all the time.
In fact, I'd rather remove the dstRW usage at other places and change it to (dst + writeableOffset).

> will we see the issue on the platforms without W^X protection?

There will be no such platforms (except of crossgen usage of the JIT)

> Can we catch them at compilation time?

We would have to change all the `BYTE* dst` to `const BYTE* dst`, but it would still require the JIT developer to be disciplined enough to not to cast away the constness anywhere.

Frankly, my view on further updates to JIT were that everything would be done as before with the only exception being places where writes to the executable memory are added. At those places, the writeableOffset would need to be applied. But a bug in such a place would be easy and quick to discover - the JIT would just crash with access violation.
"
"For a method I think you're right, and actually I was mistaken and my comment is wrong, so we could allow it for methods.

> If you change it on a type we don't recompile all of the type's async methods

It's worse actually, for types we would need to recompile any async method that returns that type (though that isn't a C# 10 change)"
`NSObject` are wrong since it should be identical to the generic used on the type itself
"I was wrong, the check is not purely syntactic. We need to consider whether the accessor is abstract/extern or declared in an interface, etc. There is a ```SourcePropertyAccessorSymbol._isAutoPropertyAccessor``` field. It looks like it should be sufficient to check its value here. "
"I think this is better, that way we won't swallow errors, but let the app developer handle them even if we're not told what's going wrong:

```suggestion
			if (cbDecoderError is not null)
				cbDecoderError (player, error is not null ? new AVErrorEventArgs (error) : null);
```"
"You pasted the documentation, as per the docs: ""or 0.0 if the goal is **not in the behavior**."" so it will always return a NSNumber and if the behaviour is not there, it will be 0.0. So, the indexer seems to be wrong:

1. The binding says we get a nullable, the docs say otherwise, we should add a test for that.
2. If we return a 0.0 in an indexer is wrong. Indexers should throw an exception if the GKBejaviour is not present.

We should get the value, check the result and decide if we have a null or not and throw and except and remove the ! which is wrong and makes no sense. The binding is wrong and therefore the nullability."
"@github I'm not following here. Since the first accessor is using `field`, the backing field was marked as non-null calculated value. So we get a symbol back when speculating with `field`. Anything wrong with the current behavior?"
"If `embeddedStatement` is null, doesn't that mean there is something wrong?

Either the analyzer is reporting on a wrong (unexpected) node, or there is a missing handling of a syntax node in:

https://github.com/dotnet/roslyn/blob/b0cd71f82fbada617a7cb5354f52bbc478c1ff1d/src/Workspaces/SharedUtilitiesAndExtensions/Compiler/CSharp/Extensions/SyntaxNodeExtensions.cs#L252-L266"
Seems like this was done wrong for both `OmniSharp` (above) and `Razor` (below)
"Is it bad to have this always set? I presume we would eventually want to have it set in some shared targets file so people don't have to worry about it, but it seems like the property isn't exactly wrong..."
"In general, we want to support all Typescript types in JSDoc. The ideal is for eager Typescript users to be able to put Typescript types into jsdoc if they are stuck with vanilla javascript for some reason.

However, I think there is a conflict between the ?-suffix of jsdoc and the ? of the conditional. For example, `S extends JSDocType? ? never : any` has both, but the parser will be unable to tell whether the first ? is a suffix  or part of the conditional syntax.

I could be wrong, though! It’s really difficult to guess how the parser will behave without testing it."
"Could we simply ignore the errorOutput? In any case, consider adding a comment about why it is wrong to have it.
"
"I do not see anything wrong in this code.

> do I need to GCPROTECT/pin strRef here or it's fine due to GCX_COOP?

You do not need to.

> can a module be unloaded while I copy string? (or e.g. already unloaded by the time I reach this code)

No. The JIT compilation keep the whole thing alive."
"I could be wrong, but I believe we only need this change if the statement is inside a `try` block. Does that seem right, and do you think it would be difficult to limit the change to just those cases?"
"this might be a dumb question, but is there a chance that we have overlapping text changes, and if so, will this sorting make sure everything works correctly?"
"> // Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

Wrong license. #Resolved

---
Refers to: src/Compilers/CSharp/Test/Semantic/Semantics/RecordTests.cs:1 in 32b4b4e. [](commit_id = 32b4b4ed807f124def461561f3fbea60a5edcc69, deletion_comment = False)"
"If you're curious how to get this, there's `SourceFile::referencedFiles`, for which you can use the `lastOrUndefined` function from `core.ts`.

@github or @github should probably tell you if my solution is wrong though for some reason.
"
"GitHub checks are linked to the wrong CI runs. Both are passing.

CI - https://dev.azure.com/dnceng/public/_build/results?buildId=648650&view=results
Integration - https://dev.azure.com/dnceng/public/_build/results?buildId=648651&view=results"
"I think this diff is wrong.
"
"We have added this message in the past to catch iadvertant use of export/import in the top level of a script file. ppl used to do this by mistak, and spend hours to understand what is wrong with thier program.

@github and I talked about this, and the conclusion was to leave a valid module target `--m none` which will trigger this error. this way users who are sure they never need a module loader can set it and get the nice error instead of having to go crazy figuring out what it means.
"
I would expect that codereviews would be good enough to catch wrong native library name if we add more of them.
"Aha! I stand corrected. The original code I was fighting with looked more like this (if memory serves):

```jsx
import React from ""react"";
import styled from ""styled-components"";

const Button: React.FC<{
  // Since this is missing className and style props, it is invalid.
  nope: string;
}> = () => <button />;

const Form = styled.form`
  ${Button} {
    color: rebeccapurple;
  }
`;
```

The error happens at `${Button}` but **I was able just now to successfully put** a `@github` on top of that, like:

```jsx
const Form = styled.form`
  ${// @github
  Button} {
    color: rebeccapurple;
  }
`;
```

As I recall, I was unable to put `@github` on top of this before. Perhaps a bug was fixed in either TS or prettier since I last tried or I'm remembering it wrong 😀."
"It's exciting to see that @github and his team are still pushing like crazy and shipping one feature after the other!

However and I don't want to be that guy *but* what's about long-term must-haves like full ES6 module support where quite some people are waiting for, eg. https://github.com/microsoft/TypeScript/issues/18442?"
Putting in a request for dumps so we can find what actually is going wrong here
"On the other hand, I reached for Dns.GetHostName() function because the documentation said ""Dns Host Name"" right after discovering Environment.MachineName was wrong for our case (NETBIOS name wasn't useful to us). If the documentation were to change to say something else I would stop trying to fix it."
"I enabled `COUNT_LOOPS` and ran it across a merged spmi mega-collection (and bumped the number of histogram buckets), and get:
```
---------------------------------------------------
Loop stats
---------------------------------------------------
Total number of methods with loops is 64366
Total number of              loops is 92730
Maximum number of loops per method is   192
# of methods overflowing nat loop table is    49
Total number of 'unnatural' loops is 135600
# of methods overflowing unnat loop limit is     0
Total number of loops with an         iterator is 32376
Total number of loops with a simple   iterator is 32376
Total number of loops with a constant iterator is  5515
--------------------------------------------------
Loop count frequency table:
--------------------------------------------------
     <=          0 ===>   11043 count ( 14% of total)
      1 ..       1 ===>   48707 count ( 79% of total)
      2 ..       2 ===>   10489 count ( 93% of total)
      3 ..       3 ===>    2954 count ( 97% of total)
      4 ..       4 ===>     932 count ( 98% of total)
      5 ..       5 ===>     496 count ( 98% of total)
      6 ..       6 ===>     268 count ( 99% of total)
      7 ..       7 ===>     118 count ( 99% of total)
      8 ..       8 ===>      95 count ( 99% of total)
      9 ..       9 ===>      63 count ( 99% of total)
     10 ..      10 ===>      50 count ( 99% of total)
     11 ..      11 ===>      44 count ( 99% of total)
     12 ..      12 ===>      19 count ( 99% of total)
     13 ..      13 ===>      23 count ( 99% of total)
     14 ..      14 ===>      34 count ( 99% of total)
     15 ..      15 ===>      12 count ( 99% of total)
     16 ..      16 ===>      13 count ( 99% of total)
     17 ..      17 ===>       2 count ( 99% of total)
     18 ..      18 ===>       9 count ( 99% of total)
     19 ..      19 ===>       1 count ( 99% of total)
     20 ..      20 ===>       6 count ( 99% of total)
     21 ..      21 ===>       1 count ( 99% of total)
     22 ..      22 ===>       1 count ( 99% of total)
     23 ..      23 ===>       0 count ( 99% of total)
     24 ..      24 ===>       1 count ( 99% of total)
     25 ..      25 ===>       4 count ( 99% of total)
     26 ..      26 ===>       1 count ( 99% of total)
     27 ..      27 ===>       0 count ( 99% of total)
     28 ..      27 ===>       0 count ( 99% of total)
     28 ..      29 ===>       6 count ( 99% of total)
     30 ..      30 ===>       2 count ( 99% of total)
     31 ..      31 ===>       0 count ( 99% of total)
     32 ..      32 ===>       0 count ( 99% of total)
     33 ..      33 ===>       0 count ( 99% of total)
     34 ..      34 ===>       0 count ( 99% of total)
     35 ..      35 ===>       1 count ( 99% of total)
     36 ..      36 ===>       2 count ( 99% of total)
     37 ..      37 ===>       0 count ( 99% of total)
     38 ..      38 ===>       0 count ( 99% of total)
     39 ..      39 ===>       0 count ( 99% of total)
     40 ..      40 ===>       0 count ( 99% of total)
     41 ..      41 ===>       0 count ( 99% of total)
     42 ..      42 ===>       0 count ( 99% of total)
     43 ..      43 ===>       0 count ( 99% of total)
     44 ..      44 ===>       0 count ( 99% of total)
     45 ..      45 ===>       2 count ( 99% of total)
     46 ..      46 ===>       2 count ( 99% of total)
     47 ..      47 ===>       0 count ( 99% of total)
     48 ..      48 ===>       1 count ( 99% of total)
     49 ..      49 ===>       0 count ( 99% of total)
     50 ..      50 ===>       0 count ( 99% of total)
     51 ..      51 ===>       0 count ( 99% of total)
     52 ..      52 ===>       0 count ( 99% of total)
     53 ..      53 ===>       0 count ( 99% of total)
     54 ..      54 ===>       0 count ( 99% of total)
     55 ..      55 ===>       0 count ( 99% of total)
     56 ..      56 ===>       0 count ( 99% of total)
     57 ..      57 ===>       0 count ( 99% of total)
     58 ..      58 ===>       0 count ( 99% of total)
     59 ..      59 ===>       1 count (100% of total)
     60 ..      60 ===>       0 count (100% of total)
      >         60 ===>       6 count (100% of total)
--------------------------------------------------
Loop exit count frequency table:
--------------------------------------------------
     <=          0 ===>     126 count (  0% of total)
      1 ..       1 ===>   57237 count ( 64% of total)
      2 ..       2 ===>   21195 count ( 87% of total)
      3 ..       3 ===>    5175 count ( 93% of total)
      4 ..       4 ===>    2758 count ( 96% of total)
      5 ..       5 ===>    2164 count ( 99% of total)
      6 ..       6 ===>     892 count (100% of total)
      >          6 ===>    3183 count (103% of total)
--------------------------------------------------
```

So, sticking with powers of 2, 32 only misses ~9 functions with > 32 loops. Even 16 max loops per function hits 99% of all loops (no surprise). Of course there's some crazy outlier: 192 loops in (at least) one function.

The stats for just the benchmarks is:
```
---------------------------------------------------
Loop stats
---------------------------------------------------
Total number of methods with loops is  2679
Total number of              loops is  4326
Maximum number of loops per method is    61
# of methods overflowing nat loop table is    10
Total number of 'unnatural' loops is  4822
# of methods overflowing unnat loop limit is     0
Total number of loops with an         iterator is  1534
Total number of loops with a simple   iterator is  1534
Total number of loops with a constant iterator is   398
--------------------------------------------------
Loop count frequency table:
--------------------------------------------------
     <=          0 ===>     213 count (  7% of total)
      1 ..       1 ===>    1984 count ( 75% of total)
      2 ..       2 ===>     415 count ( 90% of total)
      3 ..       3 ===>     144 count ( 95% of total)
      4 ..       4 ===>      59 count ( 97% of total)
      5 ..       5 ===>      29 count ( 98% of total)
      6 ..       6 ===>      13 count ( 98% of total)
      7 ..       7 ===>       5 count ( 98% of total)
      8 ..       8 ===>       1 count ( 99% of total)
      9 ..       9 ===>       2 count ( 99% of total)
     10 ..      10 ===>       1 count ( 99% of total)
     11 ..      11 ===>       1 count ( 99% of total)
     12 ..      12 ===>       2 count ( 99% of total)
     13 ..      13 ===>       5 count ( 99% of total)
     14 ..      14 ===>       5 count ( 99% of total)
     15 ..      15 ===>       3 count ( 99% of total)
     16 ..      16 ===>       0 count ( 99% of total)
     17 ..      17 ===>       0 count ( 99% of total)
     18 ..      18 ===>       2 count ( 99% of total)
     19 ..      19 ===>       1 count ( 99% of total)
     20 ..      20 ===>       1 count ( 99% of total)
     21 ..      21 ===>       0 count ( 99% of total)
     22 ..      22 ===>       0 count ( 99% of total)
     23 ..      23 ===>       0 count ( 99% of total)
     24 ..      24 ===>       0 count ( 99% of total)
     25 ..      25 ===>       0 count ( 99% of total)
     26 ..      26 ===>       0 count ( 99% of total)
     27 ..      27 ===>       0 count ( 99% of total)
     28 ..      27 ===>       0 count ( 99% of total)
     28 ..      29 ===>       1 count ( 99% of total)
     30 ..      30 ===>       1 count ( 99% of total)
     31 ..      31 ===>       0 count ( 99% of total)
     32 ..      32 ===>       0 count ( 99% of total)
     33 ..      33 ===>       0 count ( 99% of total)
     34 ..      34 ===>       0 count ( 99% of total)
     35 ..      35 ===>       0 count ( 99% of total)
     36 ..      36 ===>       1 count ( 99% of total)
     37 ..      37 ===>       0 count ( 99% of total)
     38 ..      38 ===>       0 count ( 99% of total)
     39 ..      39 ===>       0 count ( 99% of total)
     40 ..      40 ===>       0 count ( 99% of total)
     41 ..      41 ===>       0 count ( 99% of total)
     42 ..      42 ===>       0 count ( 99% of total)
     43 ..      43 ===>       0 count ( 99% of total)
     44 ..      44 ===>       0 count ( 99% of total)
     45 ..      45 ===>       1 count ( 99% of total)
     46 ..      46 ===>       0 count ( 99% of total)
     47 ..      47 ===>       0 count ( 99% of total)
     48 ..      48 ===>       0 count ( 99% of total)
     49 ..      49 ===>       0 count ( 99% of total)
     50 ..      50 ===>       0 count ( 99% of total)
     51 ..      51 ===>       0 count ( 99% of total)
     52 ..      52 ===>       0 count ( 99% of total)
     53 ..      53 ===>       0 count ( 99% of total)
     54 ..      54 ===>       0 count ( 99% of total)
     55 ..      55 ===>       0 count ( 99% of total)
     56 ..      56 ===>       0 count ( 99% of total)
     57 ..      57 ===>       0 count ( 99% of total)
     58 ..      58 ===>       0 count ( 99% of total)
     59 ..      59 ===>       1 count (100% of total)
     60 ..      60 ===>       0 count (100% of total)
      >         60 ===>       1 count (100% of total)
--------------------------------------------------
Loop exit count frequency table:
--------------------------------------------------
     <=          0 ===>       0 count (  0% of total)
      1 ..       1 ===>    2426 count ( 58% of total)
      2 ..       2 ===>     995 count ( 82% of total)
      3 ..       3 ===>     330 count ( 90% of total)
      4 ..       4 ===>     237 count ( 96% of total)
      5 ..       5 ===>      96 count ( 98% of total)
      6 ..       6 ===>      68 count (100% of total)
      >          6 ===>     174 count (104% of total)
--------------------------------------------------
```

Unfortunately, the spmi collections, especially the benchmarks collection, have a lot of ""MISSING"" data currently, so it's not clear how that's skewing the data.
"
Approved otherwise -- localized fix for self evidently wrong code.
"Tagging subscribers to this area: @github/runtime-infrastructure
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

We are getting errors from the new cleanup task

![image](https://user-images.githubusercontent.com/3840695/167262280-81daac21-1e2b-4f54-aff1-92ffcdb7e103.png)

I read somewhere that original repository normally doesn't require permissions (only fork do), but apparently it was wrong. This is something I am using in my fork to fix the same error.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>am11</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Infrastructure`, `community-contribution`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
This kinda sucks....
"Because the test showed as flaky over the weekend and it's easier to add it to the PR that's changing the name of the attribute than it is to open a PR with the wrong name, and then have to deal with conflicts."
"Gzip happens at build time, Brotli happens at publish time, putting _Brotli there causes issues with no build as it forces the recomputation of a bunch stuff and ends up producing a wrong manifest."
"My last change uses `AssertEx` for sequence comparison. The output is indeed more informative :-)
Below is an example. Thanks!

```
Validation of method 1 failed.

Expected:
Public Sub Main,
WRONG,
Microsoft.CodeAnalysis.Runtime.Instrumentation.FlushPayload()
Actual:
Public Sub Main(args As String())                                   ' Method 1,
TestMain(),
Microsoft.CodeAnalysis.Runtime.Instrumentation.FlushPayload()
Differences:
    Public Sub Main(args As String())                                   ' Method 1,
++> TestMain(),
--> WRONG,
    Microsoft.CodeAnalysis.Runtime.Instrumentation.FlushPayload()
```"
"in general, i'd like the assignment of this sort of hting to happen as soon as possible, rather than as late as posible.

That way if something goes wrong, we've already set that we tried to do the thing, and we avoid the bad paths in the future."
"> This never existed on 2.2 and 2.1 that’s a different issue.

@github I created [this demonstration](https://github.com/ldwedari/DotNetCore2_1DataRaceDemonstrator) based on the code that you posted in https://github.com/dotnet/aspnetcore/issues/14975.
In 2.1.19 (master branch) there is a data race. But in 3.1.5 (TestWithNetCore3_1 branch) I cannot see it happening.

Is my test wrong? If it is correct, does this actually happens in 3.1.5?"
"Exactly, it gives us a chance to tell the client what they did wrong without them having to go dig through the server logs."
"❕ This is a collection initializer, not an object initializer (test is correct, but the method name here is wrong)"
"It's to support the syntax `public int Property readonly => 42;`, which means the same thing as `public int Property { readonly get => 42; }`.

Feel free to weigh in on the concrete syntax design in dotnet/csharplang#1710. (edit: whoops, had the wrong issue ID)"
">if (!Compilation.IsFeatureEnabled(MessageID.IDS_FeatureIndexOperator) || [](start = 12, length = 72)

This feels wrong. We should always bind as best we can (ie. as-if all features were enabled). The only difference should be the diagnostics produced."
"I feel that there should be an enum stating the type of the doc (Normal/Additional/Analyzer), and we can pass that along.  code that processed can operate on that enum and throw when they encounter a new type.  that will make our code at least *throwing* when we add new types, instead of silently doing the wrong thing."
This still seems wrong. This is explicitly only true when targeting older versions of netcore or framework.
What was wrong with using SUNOS as the name for all the flavors?
"if open is found before close, then its wrong syntax, lets parse the whole thing to be sure"
"@github can correct me if I'm wrong; I thought one was used for the tool that generates the refs and the other was used by the tool that ensures consistency between the refs and the src. I'm not sure why they're different, especially with both listed there as you highlight."
"I'm not sure it needs to be a diagnostic, there's no way the compiler can produce the scenario, so we don't have to worry about it in normal operation. But I think I'm with Jared on throwing an exception here: we would never expect a valid emit options to contain both encodings, thus trying to set both is wrong. The only way you could do that is if you're creating them yourself via the API and so an exception seems appropriate. We should try and make our APIs stop people creating things the compiler would never do.

---
In reply to: [435602566](https://github.com/dotnet/roslyn/pull/44373#discussion_r435602566) [](ancestors = 435602566)"
I was originally thinking there would be some kind of event that I could set up but that doesn't seem to be the case...unless I'm wrong.
"Isn't `codePointLength` always going to be the same value as `GetInputDistance` between the two iterators? Maybe I chose wrong with `GetCellDistance`, but it feels like it was just `GetInputDistance` instead."
"❕ This should only catch the exception if it has the ""wrong"" cancellation token"
"So, we used to do it the other way around, and I actually implemented it working that way, but the code was super confusing. Then thinking it through I couldn't convince myself that calling each generator per syntax node was actually any more efficient that doing a walk per generator. Ultimately there are O(n x m) operations? intuitively that felt wrong but I wasn't able to convince myself.

---
In reply to: [466074746](https://github.com/dotnet/roslyn/pull/46296#discussion_r466074746) [](ancestors = 466074746,466073588)"
"Is this 13 to align with the header? Does that look ok when the NavigationView is in collapsed mode? I could be wrong, but it looks like the header's margin is different: https://github.com/microsoft/microsoft-ui-xaml/blob/dfbe38bfb2996dfaa2f09544c4e86aa69ccc906b/dev/NavigationView/TestUI/CustomResources/NavigationViewCustomThemeResourcesPage.xaml#L13 "
What's wrong with simply call `httpConnection.Disconnect` here?
But why do you need this generic version in the first place? What's wrong with `std::wstring u8u16(std::string_view)` and `std::string u16u8(std::wstring_view)`?
"BTW I wonder if we're doing it all wrong either way (if we're thinking outside of the scope of this PR)...
Shouldn't the the caller - in this case the `AppLogic` class - decide which file to load and not `CascadiaSettings`? I guess `LoadAll` should have a path string argument. That way we could safely hardcode the correct filenames into `AppLogic.cpp`."
">RetargetPrimitiveTypesByName [](start = 109, length = 28)

Why is this changed? This looks wrong. #Closed"
"I like the idea. But this does not seem to really fit in with Windows Terminal trick. It's more about zsh itself. Don't get me wrong. I love zsh and use it almost everyday. But you can zshell anywhere you want, right? Be it iTerm2, Gnome Terminal. Konsole, etc. You know what I mean."
"I find it somewhat ""disturbing""/""odd""/""unfortunate"" that this would be adding a *different* `GetBaseDefinition()` method in the context of the linker, with a *different* algorithm for comparing method return types (or lack thereof!) and parameter types!  See also:

  * https://github.com/xamarin/java.interop/blob/412e974b9a65c67eab9c5fb5ed330a09abe66710/src/Java.Interop.Tools.Cecil/Java.Interop.Tools.Cecil/MethodDefinitionRocks.cs#L16-L32
  * https://github.com/xamarin/xamarin-android/blob/92efdccb686454be32d742b8ca9f6a166a7c1808/src/Xamarin.Android.Build.Tasks/Linker/MonoDroid.Tuner/FixAbstractMethodsStep.cs#L109-L158

The method here looks very similar to the one in Java.Interop -- which I now see is *incomplete*, because it doesn't check `MethodDefinition.HasOverrides`.

Which leads one to ask, *how many **different** (and potentially incomplete/wrong) implementations do we have to find the ""base"" method of an override?!*

I sense a Mono.Cecil feature request…

"
"Okay actually spoke with @github offline - he's OOF today, but he mentioned that this probably needs a fallback for Windows 7, since the DirectX renderer is also used by the WpfControl, which works back to win 7.

I don't know how that would work, but he'll provide more details tomorrow if needed.

He also mentioned that you must be some sort of crazy mind reader, because he had the exact same thought last night as he was trying to fall asleep, and he's _on to you_ 🕵️ "
"@github can correct me if I'm wrong, but you might be able to get that for free with:

`GETSET_PROPERTY(winrt::hstring, Title, nullptr);`

EDIT: now that I'm looking at that file closer, I'm not sure that's possible. We might want to just treat `""command"": { ""action"": ""setTabTitle"", ""title"":"""" }` the same as `""command"": { ""action"": ""setTabTitle"", ""title"":null }`, and have that reset the title."
"So close! I just have _ONE_ failing test: `DeserializationTests::TestRebindNestedCommand`.

### Summary

#### Test
1. ✅ bind nested commands to ""parent""
2. ❌ rebind ""parent"" to a plain ""newTab"" command

#### Discussion

This _should_ work. `ActionMap` is doing the following:
1. bind nested commands to ""parent""
	1. deserialize the command
	1. it's a nested command!
	1. add it to the action map
		1. check if it's a nested command (it is!)
		1. add it to `_NestedCommands`
	1. when name map is requested...
		1. go through non-nested commands (none)
		1. go through nested commands...	
			1. ""parent"" --> <nested commands> is added
2. rebind ""parent"" to a plain ""newTab"" command
	1. deserialize the command
	1. it's a ""newTab"" command!
	1. add it to the action map
		1. check if it's a nested command (it isn't!)
		2. add it to the `_ActionMap`
	1. when name map is requested...
		1. go through non-nested commands (none)
		2. go through parents (**I SEE THAT THIS IS THE PROBLEM NOW**)
		3. add nested commands

Ok, I see what the problem is now. Just had to think out loud for a bit. Looks like the order is wrong in `_PopulateNameMap`. I'll marinate on a fix and submit that tomorrow morning. But other than that (and a code format), we're good to go!"
Wrong
"@github is that API used in your sample ?

It's nice to hide (or provide better API) than exposing `Selector` and `NSObject` in signatures - but without tests it's also easy too easy to get it wrong.

Since it's not a very common API (or framework) on macOS (only) I think it's fine to file an enhancement on it (would be a nice and not _too_ hard contribution from anyone consuming the API).
"
"This is wrong: when building for both armv7k and arm64_32 this if condition will be true when building for either architecture, not only arm64_32.

The function doesn't have the information it needs, it needs to be passed the `Abi` as wells."
"If we can't get the encoding, do we bail out? Or try with the default encoding and let the checksum handle if it is wrong?"
@github I can be wrong but seems yes (because of android)
"Surprisely enough, if you open a PowerShell tab and run `wsl.exe`, the path `\\wsl$\Ubuntu\path` sent by WSL can also be used by PowerShell. It will correctly enter the WSL working directory. I remember seeing this on some article about WSL and Windows filesystem interoperablity. I just didn't not except that it works so seamlessly.

And I think this only works on Windows 2004 and WSL 2. Correct me if I'm wrong."
"Well, the test is just wrong. It turns out it doesn't pass when run without crossgen2, with exactly the same fault, but by putting the disable logic as IL in the test, we actually get testing that the behavior of the x86 type loader at runtime matches up with the behavior at crossgen2 time due to the presence of the --verify-type-and-field-layout switch that we use when compiling crossgen2 tests.

I agree though, I was quite disappointed to find that I needed to change the test.

As far as how much was passing, as I mentioned to you a couple days ago, I was looking for something different than endless infrastructure stuff, so I took a look at this, and its come pretty clean. At this point I believe our type layout is very nearly correct, as is our argument layout handling, which leaves whatever interesting details are special about x86 in the jit interface. I have some suspicions that then handling of single element struct normalization isn't quite right, but its not all that far off from right."
"These entries will need to be `x64`. `DotNet_x64Test` should build `x64` when possible.

Unfortunately, you will also need to add a project ordering dependency from PublicTerminalCore or WPFControl to your new shim project. Otherwise, the build will proceed in the wrong order."
"yes, this is dumb. no, this is not a drill"
"I personally believe `assert` should be preferred over `FAIL_FAST_IF` for ""soft-assertions"".
What I mean is basically assertions, that if they break don't lead to dangerously incorrect behavior. This is the case here: If `_parents` did have more than 1 member, it would IMO be preferable to rather do the slightly wrong thing, as opposed to crashing the app and causing the user to loose their data."
"> The only time _binder should be null is when we're binding the body of an unbound lambda, trying to figure out the return type of that lambda. I'm not certain getting the binder from the compilation is the right thing to do here, particularly around speculation and potentially getting the wrong binder for such cases. Do you have any thoughts?

I believe an UnboundLambda itself holds a reference to a Binder, indirectly. Can we use that binder? 

---
In reply to: [547419319](https://github.com/dotnet/roslyn/pull/50105#discussion_r547419319) [](ancestors = 547419319)"
"These changes imply that we're doing the wrong thing for the *repo* `ThirdPartyNotices.txt` file.  The purpose of the *repo*-level `ThirdPartyNotices.txt` are for third party dependencies *copied into this repo*, *not* from submodules or NuGet packages or the like.

`boringssl` is included via submodule.  `linker` is included via submodule.  etc.  These do not need to be present within *this* `ThirdPartyNotices.txt` file.

Third party code such as this *does* need to be listed in the generated and included-within-the-installer `bin/$(Configuration)/lib/xamarin.android/ThirdPartyNotices.txt` file."
"I would prefer if this wasn't available to the handlers to use and potentially do crazy things, but I'm not sure the best way of doing that.  Don't know if we could make it private, then have a method that takes in the cache to remove it?"
"Given how many places this is set, shouldn't we just change the *default* value?

https://github.com/xamarin/xamarin-android/blob/214dd76d9441c9974775f0b29feec0d5d8d1097f/src/Xamarin.Android.Build.Tasks/Tests/Xamarin.ProjectTools/Android/XamarinAndroidApplicationProject.cs#L70

Aside: ^^ is wrong, in that `PackageName` *cannot* (reasonably) be set before the `XamarinAndroidApplicationProject` constructor executes (short of using Reflection to construct an uninitialized object, set the property, and the invoke the constructor…), and thus it'll always hit the `string.Format (""{0}.{0}"", ProjectName)` expression.

Couldn't this instead just become:

```csharp
PackageName = GeneratePackageName ();
```

Is there really a problem if *every* project gets this new behavior?

"
"> Thanks so much for fixing this.

You are *so* welcome :)

No worries on it taking a while to get included - these are crazy times :)

Thank you for making me feel welcome :)"
Comment is wrong (would be attached to semicolon). Do we have a test scenario where that happens?
"In general, I'm not sure about such comments. In this instance, they feel wrong. `record` and `struct` are not keywords in this sentence.
If they were keywords, then they could be marked with backticks in markdown, but that doesn't work here: ""...is not a valid `record` type and is not a `struct` type.""

---
In reply to: [608248749](https://github.com/dotnet/roslyn/pull/52319#discussion_r608248749) [](ancestors = 608248749)"
Just assumed the wrong link (:
start with either `!unknown-` or `!wrong-` so it gets sorted along other important/critical logs
"The text of this assert message is clearly wrong, `X509Certificate(byte[])` is of course supported on all platforms.

However, the problem with this test is that the `Handle` arithmetic inside the `using` makes assumptions on implementation internals.  In any case, the assert should be moved inside the `using`.  I'll have a look at that."
"> abstract class StackFrameNameNode : StackFrameTypeNode { ... }

This seems wrong to me. That would mean that `StackFrameIdentifierNameNode` is a `StackFrameTypeNode`"
but we should only have one conceptual change per PR. Don't want to go crazy
"The same reason `_EnableConsumingManagedCodeFromNativeHosting` has a `_` prefix. This isn't intended to be a ""public"" setting, but only exists for Blazor WASM to trim these attributes, and an escape hatch for developers in case we got it wrong."
"This is wrong for watchOS; so I think it might be a good idea to do:

```
#elif TVOS || IOS
    // check for 10.
#else
    #error Unknown platform
#endif
```

So that it'll be immediately obvious what to fix when we enable SpriteKit for watchOS.
"
"> Which fixers are those? Thanks!

@github I was wrong when I said 5. The other codefix cases with the batch fixer use `FindRenameLocationsAsync` and `ResolveConflictsAsync` which should be fine (as I understand it). However, there are two cases: `AbstractMakeMethodAsynchronousCodeFixProvider` and `AbstractMakeMethodSynchronousCodeFixProvider` which both use the batch fixer and the rename apis in this way:

https://github.com/dotnet/roslyn/blob/37d9daf0e3c2327973adf00d6cd078a14e3a21dd/src/Features/Core/Portable/MakeMethodSynchronous/AbstractMakeMethodSynchronousCodeFixProvider.cs#L33

https://github.com/dotnet/roslyn/blob/37d9daf0e3c2327973adf00d6cd078a14e3a21dd/src/Features/Core/Portable/MakeMethodSynchronous/AbstractMakeMethodSynchronousCodeFixProvider.cs#L80

https://github.com/dotnet/roslyn/blob/37d9daf0e3c2327973adf00d6cd078a14e3a21dd/src/Features/Core/Portable/MakeMethodAsynchronous/AbstractMakeMethodAsynchronousCodeFixProvider.cs#L30

https://github.com/dotnet/roslyn/blob/37d9daf0e3c2327973adf00d6cd078a14e3a21dd/src/Features/Core/Portable/MakeMethodAsynchronous/AbstractMakeMethodAsynchronousCodeFixProvider.cs#L171

@github  I assume we want to file bugs about these cases?"
"I might be wrong, but it most likely be `false` for an empty list of buffers. Could you please add a test for this scenario?"
"so, i have no problem with the new code.  But i would be interested to know what was wrong with the old code that was a problem enough to need fixing.  was it just that we were creating too many tasks?"
"It is not specific to this particular issue of the GUI not showing anything (and I know we still need to use / check for this string here to handle older versions), but would it be useful to also add more details to the actual error message about the header version - for if/when we have a new bundler version and someone runs against 6.0 hostfxr? My understanding is that for non-GUI, we would just end up with:
```
Failure processing application bundle.
Bundle header version compatibility check failed.
```

Maybe something like the major and minor version of the header versus what is valid would at least provide a better hint as to what is wrong? "
">""InteractiveHost"" [](http://example.com/codeflow?start=112&length=17)

Not your change, but this looks wrong. I think the subdir INteractiveHost shouldn't be added, but would need to debug to see what's going on"
"Wondering if this should be a throw - we have a renamable location at the span we asked for, unless the editor gave us the wrong span we should be able to apply it"
This could be case when there was no config file present itself or syntax went too wrong. If we couldn't even get the jsonObject|endOfFile token what is the use of having {}. Wouldn't undefined give better errors?
The `||  PlatformDetection.IsOSXLike` looks wrong. IsOSXLike includes IsOSX where we use unprivileged ICMP raw socket AFAIK.
"Doh.  I was reading the condition wrong.  
"
"It sucks that Assert.Empty doesn't just list the elements. Should we just fix that on their end? Or have an AssertEx.Empty until then? I suspect we do this pattern a lot of places.
"
Interesting that all these `declarationEmitInferredTypeAlias...` tests expressly proved the wrong answer before.
"It looks like you're getting the wrong `this` type in the `static` block. These shouldn't be errors. "
">>> Should IWebProxy be nullable?
>> Which part of it?
> GetProxy() - return value and parameter
> IsBypassed() - parameter

I was wrong here.  Looking at System.Net.WebProxy, both of these explicitly do not allow null arguments.  We should change the interface to be `Uri` instead of `Uri?`."
"I used [this example](https://www.typescriptlang.org/play?#code/CYUwxgNghgTiAEA3W8BCUDOIBc8De8AdiAO4A8AKgHwAUAlLlIQJ7wC+AUAC7MAOC6LPAC88AEQALKPCnwMEgPYBXCMHhcJASwzwARgg0G+CKF3gADEAA8uIQsB2CQ5gPxiA3Bw6RMOgMLw1rb2jpggZBhcMJqEAOZU+F6cQA) to demonstrate why using `getTypeFromTypeNode` would be wrong there. If something is an expression, you have to get the type of the expression."
"Alright so @github and I had a private chat and now we're a bit more confused: the Workspace already has an AsyncLazy that should be wrapping this operation:

https://github.com/dotnet/roslyn/blob/14a785e3640a075b6233d10e4d3746cc86a96ddb/src/Workspaces/Core/Portable/Workspace/Solution/TextDocumentState.cs#L93-L96

The only way I can imagine we're seeing parallel requests to load a file would be if the same file is being added to multiple projects which wouldn't share FileTextLoaders in the first place, but it's also seemingly very wrong that we're then reading it multiple times, since that could result in an inconsistent workspace.

Since the PR is back into draft state I can't remove my block: I sign off on the AsyncLazy change but I'm now suspicious we've discovered a long-standing issue with linked files that this may not help, and might indicate the fix exists elsewhere."
The user test suite run doesn't include broccoli-typescript-compiler. Hmph. @github do you know if I'm doing something wrong here?
"> And the issue is that we mistakenly think a var def is a CSE candidate in release because of the rewrite we do during local morph?

The issue is a wrong assignment that we generate with the replaced field type, and the assignment creation asserts about it. If we ignore this assert then we have different types of bad codegen, in the original example it was wrong gc information, that is why many iterations were required in my simplified version it was wrong CSE optimization."
"@github I added a couple of additional tests that include the `StringMapping` case. I agree it would be nice to do a little better on things like ``Uppercase<`a${string}`>``, but it would require the compiler to have built-in knowledge of the semantics of those operations which I'm not totally crazy about."
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

!! This PR is a copy of mono/mono#21046,  please do not edit or review it in this repo !!<br/>Do not automatically approve this PR:<br/><br/>* Consider how the changes affect configurations in this repo,<br/>* Check effects on files that are not mirrored,<br/>* Identify test cases that may be needed in this repo.<br/><br/>!! Merge the PR only after the original PR is merged !!<br/><hr/><br/>If the method or type containing the icall instruction has a
generic parameter, the resulting signature is ""inflated"" even if
the generic parameter is not used in the signature. This breaks
some methods in SlimDX, and probably other C++/CLI code.



<!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
-->


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>monojenkins</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-VM-meta-mono`, `mono-mirror`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"@github The large number of JIT changes happened after I ran jit-format, but I think something may have been wrong with my version of jit-format as it kept failing CI/CD. Reverted those commits and re-ran with a known good version of jit-format, hopefully that resolves the issue."
"I also see this

https://github.com/dotnet/runtime/blob/a41c7b333822b0ca57a2f7d3047e8cf80ac61a77/src/coreclr/pal/src/libunwind/configure.cmake#L61-L69

https://github.com/dotnet/runtime/blob/b9a55b4f52243325359ced26e3d4b31ccacdc381/src/coreclr/pal/src/libunwind/config.h.in

That middle define seems wrong. Right?"
"There also appears to be an issue with _length overflow, when incrementally hashing >= 2GB of input.
For XxHash32 results will still match the spec, while having negative _length internally.
XxHash64 should incorporate the full 64-bit length, so for total input length >= 2^32 the results are wrong."
"@github @github My honest apologize, after further testing I found I was wrong in that the <a href=""https://github.com/dotnet/maui/pull/771#issuecomment-830391699"">button visibility</a> is actually related. Removing the <a href=""https://github.com/ChaseRoth/maui/blob/7e92404c211200e74e319c9dcf235221011c10a9/src/Core/src/Platform/Android/EditTextExtensions.cs#L218"">editText.RequestFocus()</a> resolves the failure but creates a new issue. All the CursorPosition, SelectionLength, and button visibility test succeed, but when using the Control's sample app the selection functionality no longer works as expected. Again, sorry to mislead for I honestly thought it was unrelated from when I implemented this."
">// (16,22): warning CS0028: 'Program.Main()' has the wrong signature to be an entry point [](start = 16, length = 89)

Please add a prototype comment to make this diagnostics more specific. #Closed"
"@github _Aside_ from the issue of path mapping (or more specifically, which paths we choose to map by default) I do not believe we need to prevent the search of parent directories for .editorconfig files by default. While it's possible for a .editorconfig file to affect a build, the conditions under which this would occur are unlikely, and all but impossible to result in someone shipping broken code.

Start with the first two mass filters:

**1. Most users will not have .editorconfig files**

These users are not affected by probing to the drive root.

**2. Of the users who have .editorconfig files, most will not have properties specified in them which affect C# compiler outcome.** Specifically, no properties previously defined on editorconfig.org affect which warnings are reported or the severity with which they are reported during a build

Probing to the drive root may change the set of .editorconfig files passed to the compiler on a local machine, but it will not change the build outcome (success/fail) or reported warning messages unless we e.g. add a new warning message for invalid .editorconfig syntax (which would be trivially resolvable).

Now we get a bit more specific.

**3. Most users will not have analyzers installed via NuGet**

For this category, even a custom pathological **.editorconfig** is only capable of changing the severity of warnings reported by the C# compiler itself. To break a build on a local machine, one would have to explicitly increase the severity of a C# compiler warning via a .editorconfig file which is not part of the project.

**4. Most users who customize .editorconfig in ways that affect builds will do so in the context of particular projects**

When **.editorconfig** is added to a specific project with root=true, searching to the drive root by default is not a problem.

**5. For the remaining user who wants to customize a build-affecting non-project-specific .editorconfig for some reason, they probably have a reason to do so and we have no real need to prevent them from doing so.**

Basically what this means is the only way a user can enter the scenario you were concerned about is if they take action with specific knowledge of the new system we are designing. The act of entering this situation all but ensures the user also knows how to get out of the situation if something goes wrong."
"In reality this file almost never changes because it's confusing to everyone when it does. I don't think you can do dynamic links here, but I've also never seen it cause a problem. I'd almost go so far as to say if it does cause a problem, we're probably doing something wrong anyway. 😄 "
">IConversionExpression (Implicit, TryCast: False, Unchecked) (OperationKind.ConversionExpression, Type: (System.Int32, System.Object)) (Syntax: '(0, Nothing)') [](start = 4, length = 158)

It feels like there is something wrong with this conversion node. It converts from (System.Int32, System.Object) to (System.Int32, System.Object), but says it is not an identity conversion. We probably shouldn't have this node in the tree at all. Please open an issue to follow up. We will have to create a new unit-test that gets the tree for the entire Dim statement."
"@github The use of the pooled writers comes at some long-term cost because there's now a lot of action-at-a-distance to reason about, and substantial risk of problems if we have any bugs that might leak instances in certain error cases.

I don't have a clear sense of what makes it necessarily the right way to organize it. Naively - and I know I'm probably wrong here - I would have guessed we'd just hold all the user-supplied objects in a dictionary, and then `<persist-component-state>` would serialize out the JSON directly to the response, without going through any other in-memory storage. Is it possible to give a brief description of why that's not sufficient?"
"> Any thoughts? One crazy idea I have is allowing changing the ""GetProxy"" name, so you could somehow configure the generator to use ""GetMyCustomProxy"".

Great point about collision. We can do as you suggested which can be hinted by an attribute. For example:
```csharp

[assembly: SignalRSourceGeneratorSuffix(""123"")]

[System.AttributeUsage(System.AttributeTargets.Assembly)]
public class SignalRSourceGeneratorSuffixAttribute : System.Attribute
{
    public SignalRSourceGeneratorSuffixAttribute(string name)  
    {
    }
}

hubConnection.GetProxy123();
hubConnection.RegisterCallbackProvider123(...);
```
^ I imagine we don't generate this attribute so the user would need to create one which can live in any namespace they like. As such it would be impervious to collisions.

I also looked into `internal` as you mentioned. There is a way around `InternalsVisibleTo` with aliasing however this would force the enduser to do `extern alias MyAlias` `using MyClass=MyAlias::MyClass` for every namespace or type from their dependency. This seems like a huge hassle. If there is an idea for a hassle-free approach, I'd be happy to look into that as well.

Regardless I think we should still make everything internal so chance of collision is minimized anyhow? (and the workaround is only needed when internal doesnt cut it)"
Actually... that might be wrong. IsReturnableConstruct considers individual accessors whereas you're looking at the actual property. I don't think this will work. Sorry :/
">x [](start = 36, length = 1)

wrong local name. Also on next line #Closed"
"The order here is wrong though. Should dispose then delete.

---
In reply to: [245432066](https://github.com/dotnet/roslyn/pull/31986#discussion_r245432066) [](ancestors = 245432066,245425307)"
"> and I am not sure what you meant by it is wrong.

I mean, I would expect the code to handle `!.` would be very similar in nature to the existing code we have to handle one of these forms:  `.`, `->`, `?.`, or `::`.  It's not.  Something is very fishy there.  "
"I do not think we should be executing dotnet indirectly via powershell. These wrappers over wrappers makes things hard to debug when something goes wrong.

E.g. I can no longer just copy and paste the command line with the problem and run it under debugger. I have to reverse engineer what the powershell script have done, and then execute that under debugger."
"Ah, right so my answer to my own question was wrong. Question to @github stands then. :-)"
"I've added the resource strings. I tried to follow the existing convention as closely as possible, if there's something wrong, please tell me. Thanks!"
">ref [](start = 111, length = 3)

I recall @github preferred to use char* in the interop. he may advise more if I am wrong."
"This XML comment is wrong (doesn't start with `<!--`) which likely is the reason for the test failures.

It's a bit worrying that this doesn't cause a build error."
Not sure why there are diffs on this line? You might have committed the wrong line endings or something
Which is wrong
"OK, but this isn't CSS.

This is the code calling for the thicknesses to be set up (for padding):
https://github.com/microsoft/terminal/blob/master/src/cascadia/TerminalControl/TermControl.cpp#L1338

And here's the function specification:
https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.thicknesshelper.fromlengths#Windows_UI_Xaml_ThicknessHelper_FromLengths_System_Double_System_Double_System_Double_System_Double_

Which actually means we're both wrong. It's Left, Top, Right, Bottom.



"
cc @github @github That seems a wrong implementation of `toDisposable`. Could we try fixing that in the debt week (even outside this PR) to maximize our selfhosting coverage?
"The code style is wrong, we use tabs, you can also remove the summary.

I think we should do this internal. "
"I don't think it's wrong as we're just waiting for the event to appear in the collection, but we could reduce the time taken by the test by a few ms."
"@github This failure was caused by `ReadData` knowing _exactly_ how much data it needed, and stopping as soon as that was reached. At that point, this method returned even though the copy operation might not have processed the pipe completions. The caller completed them in the wrong order while the copy was still in progress, and produced an exception indicating something like this:

* The reader cannot be used after completed
* The writer cannot be used after completed

Propagation of the exception had unknown impact on the system, but may have been indirectly responsible for the TaskCanceledException."
"item.ItemId typically mapped to the index in the array

The following line uses the ItemId to retrieve the Page
https://github.com/xamarin/Xamarin.Forms/blob/7a52542d50797ccc69ae1d8dd84259190d96bdb4/Xamarin.Forms.Platform.Android/AppCompat/TabbedPageRenderer.cs#L875

so that check is just guarded programming but it's debatable if it makes sense to guard there.

Like if the index is wrong something is wrong and it should probably throw an exception  "
"an intermediary concept this PR introduces is that the two major clients of the diagnostics subsystem now pass in what behavior they want when calling into the DiagnosticService singleton.  

i.e. the normal push features call in saying `forPullDiagnostics: false` and the lsp system calls in saying `forPullDiagnostics: true`.  Internally we see which mode we're actually in and we either pass along the diagnostics, or  pass along empty.  in essence only one side will work, and the other will see absolutely no diagnostics ever.

This is not pretty, but it was:

1. the cleanest way i could find to keep both systems around
2. required minimal and mechanical changes to both systems.
3. ensured that every entrypoint was guarded so diagnostics wouldn't accidentally sneak into the wrong client.

Once we are entirely on pull, all the push components can go away (as can tehse booleans)."
"I added the mentioned .ctor  and .dtor

I'm 70% sure that because `InMemoryAssemblyEntry` is never manipulated other than by pointer I don't need the copy ctor and overloaded assignment operator but correct me if I'm wrong."
"> Given that I would expect that this returns a non-null value as the base type, or base interface, for i2 does implement this member. Is the doc comment wrong here or am I misreading it somehow? 

A declaration of a member in an interface is not an implementation. Also, even if a method was implemented by an interface (let's say written in C#), VB doesn't recognize those as implementations and would require a class to implement them anyway. 

---
In reply to: [563892891](https://github.com/dotnet/roslyn/pull/50722#discussion_r563892891) [](ancestors = 563892891)"
"I have an dislike for casting like this because it makes me feel like I've done something wrong in my API design. I get the reason you want to do this though. Let me make the base `abstract` and then can just `override` here and get the single point of storage without the casting. "
"```markdown
[build] Add support for NDK r23. (#6073)

Context: https://github.com/android/ndk/wiki/Changelog-r23#changelog

The most important NDK r23 changes for Xamarin.Android:

NDK r23 removes GNU Binutils.  We need to switch to using our bundled
copy of them, as per 27967cab.

Upstream NDK r23changes:

  * Includes Android 12/API-31 APIs.

  * Updated LLVM to clang-r416183b, based on LLVM 12 development.
    * [Issue 1047]: Fixes crash when using ASan with the CFI unwinder.
    * [Issue 1096]: Includes support for [Polly].
      Enable by adding `-mllvm -polly` to your cflags.
    * [Issue 1230]: LLVM's `libunwind` is now used instead of `libgcc`
      for all architectures rather than just 32-bit ARM.
    * [Issue 1231]: LLVM's `libclang_rt.builtins` is now used instead
      of `libgcc`.
    * [Issue 1406]: Fixes crash with Neon intrinsic.

  * Vulkan validation layer source and binaries are no longer shipped
    in the NDK.  The latest are now posted directly to
    [KhronosGroup/Vulkan-ValidationLayers].

  * Vulkan tools source is also removed, specifically `vulkan_wrapper`.
    It should be downloaded upstream from [KhronosGroup/Vulkan-Tools].

  * Refactored the toolchain file `android.toolchain.cmake`, basing
    it on CMake's integrated Android support.  This new toolchain file
    will be enabled by default for CMake 3.21 and newer.
    No user side change is expected.  But if anything goes wrong,
    please file a bug and set `ANDROID_USE_LEGACY_TOOLCHAIN_FILE=ON`
    to restore the legacy behavior.
      * When using the new behavior (when using CMake 3.21+ and not
        explicitly selecting the legacy toolchain),
	**default build flags may change**.  One of the primary goals
	was to reduce the behavior differences between our toolchain
	and CMake, and CMake's default flags do not always match the
        legacy toolchain file.  Most notably, if using
	`CMAKE_BUILD_TYPE=Release`, your optimization type will likely
	be `-O3` instead of `-O2` or `-Oz`.
	See [Issue 1536] for more information.

  * [Issue 929]: `find_library` now prefers shared libraries from the
    sysroot over static libraries.

  * [Issue 1390]: `ndk-build` now warns when building a static
    executable with the wrong API level.

  * [Issue 1452]: `NDK_ANALYZE=1` now sets `APP_CLANG_TIDY=true` rather
    than using `scan-build`.  `clang-tidy` performs all the same checks
    by default, and `scan-build` was no longer working.
    See [Issue 1452] for more details; no user-side changes should
    be needed.

[Issue 929]: https://github.com/android/ndk/issues/929
[Issue 1047]: https://github.com/android/ndk/issues/1047
[Issue 1096]: https://github.com/android/ndk/issues/1096
[Issue 1230]: https://github.com/android/ndk/issues/1230
[Issue 1231]: https://github.com/android/ndk/issues/1231
[Issue 1390]: https://github.com/android/ndk/issues/1390
[Issue 1406]: https://github.com/android/ndk/issues/1406
[Issue 1452]: https://github.com/android/ndk/issues/1452
[Issue 1536]: https://github.com/android/ndk/issues/1536
[Polly]: https://polly.llvm.org/
[KhronosGroup/Vulkan-ValidationLayers]: https://github.com/KhronosGroup/Vulkan-ValidationLayers/releases
[KhronosGroup/Vulkan-Tools]: https://github.com/KhronosGroup/Vulkan-Tools
```
"
☹️ Please no crazy extension methods on `object`. It was fine to ignore them previously because they were buried in an edge case namespace and only used by one project.
"> does ""ctrl+c/v"" still go through to the textbox when it's bound?

Ah butts. It does not. The `TerminalPage` eats it before the text box has a chance at it. 

We could manually exempt <kbd>Ctrl+C</kbd>, <kbd>Ctrl+V</kbd>, <kbd>Tab</kbd>, <kbd>Backspace</kbd>, but that's starting to feel like the wrong solution."
"@github for the design sign off, but _I_ sure think it looks cool. 

\<showerthought\> Plus, if it's detached, then we could add a little handle somewhere and allow the user to just like, drag it wherever they want in the Terminal. That would solve the whole ""dock to top"" vs ""dock to bottom"" debate! I'm absolutely not saying you should do this now though. That's just a crazy idea.\</showerthought\>"
"The test you have shows how it's inverted.  Yes, 4-1=3, but currently it's doing 1-4=3 which is wrong obviously."
"also, dumb question, but does your system make sure that if it *can't* get an INewDocumentFormattingService that that's ok?  we need to make sure we don't break F#/TS"
"Perhaps `precondition` and `sideeffect` are the wrong terms here altogether: what if we called them `relationCondition` and `relationEffect`? IE, `test` and `other` are related when `relationCondition` is true, and if it is `relationEffect` is the assignment that is executed?"
Ignore that... I read it wrong :)
"Yes, that is right. The old logic was wrong especially for Windows. We should always check `CurrentUICulture` instead."
"I did this only because the method below, `converter.ConvertAndTerminateString`, is going to do the same because we are going to pass the `path`, so I wanted to avoid the extra step of increasing its size.

Granted, this could be wrong. @github is this `stackalloc` (and the one in `ConvertAndTerminateString`) safe?

https://github.com/dotnet/runtime/blob/01b7e73cd378145264a7cb7a09365b41ed42b240/src/libraries/Common/src/System/Text/ValueUtf8Converter.cs#L24-L38"
"I think this code is to make `byte signature[12]` a string for exception throwing purposes. Why is it wrong for `signature[11] != 0`? "
"This was copy-pasted from seveal lines above, I am not responsible for this) I don't know how exactly this attribute works as I don't have much expirience in working with nullability. Can you tell, what is wrong here?"
"It is... complicated.

Logically, it is true for all non-shared (shared in the `__Canon` sense) fields, since they have unique identities (with one exception: overlapping RVA statics).

Implementation-wise, it is all over the place, I have a comment about it in the unfinished changes that captures the spirit:
```
// Ordinary statics select their types. ""Shared"" statics, however, select
// their version of ""the first field map"", which is then indexed into by
// the logical ""instantiation"" argument, though see below). Or, at least,
// that was the original intent behind the relevant logic.

// In practice, ""IsFieldAddr"" ""gets things wrong"", and we form selection chains
// that are too conservative/long. First, the IR representation for the ""boxed
// static"" case, on 64 bit, when not using CLS_VAR, makes us think that such fields
// are in fact ""shared"", and use the ""static offset"" selector for them. Second, it
// also makes us think the box itself is in fact the field. Third, only fields that
// logically are ""shared"" (between generic instatiations) need this ""static offset"",
// but all cases that use helpers will hit it, because their IR shapes are similar or
// identical. For example, for an access of a simple struct static field in R2R code,
// we will form this:
//
//   $staticOffset = CAST(heap[field][helper], ref <- struct)
//   $fieldValue   = heap[field][$staticOffset]
//
// This is not a correctness issue, as we form selections that are ""just"" too
// conservative, but it does make for a somewhat confusing experience, and leads
// to quite a bit if wasted memory and cycles.
```
You are right that this handling is incomplete, fixing it is WIP."
"Ah, well I guess this is an improvement then. Looking at the editor implementation of ECMD_TYPECHAR I guess it does forward to InsertText which is surprising to me. If you look at `TextTransactionMergePolicy` in the editor codebase it appears the requirements for merging are:
1. Both transactions were initiated through EditorOperations to get the merge policy. This argues against you having your own delete code (at least in some places. Others you're probably fine.)
2. The textual descriptions are the same.
3. Edits are consecutive.

In any case, I was wrong about how I thought the editor handled this, so I guess this is better than before. I'm still curious though why we're having to do so much work here rather than forwarding to nextHandler more.
"
why use a different diagnostic? the new one seems wrong here
"Fair enough; that's what I was getting at with ""easy to get the default wrong""."
"> But since no degradation is found, I don't see any issue. Is something wrong here?

I was asking just to make sure we were comparing apples-to-apples.  It sounds like it's probably fine. In the future it'd be good to rebase so you're comparing just the diff."
"> Note: i'd also be ok logging a watson. I'm not ok with throwing here as i think that would reflect a poor design choice for a componentto throw about incorrect assumptions it made about another component.

What happens if the code throws anyways because you forgot some check or made another mistake? To avoid crashing VS we need to have a recovery boundary somewhere upstream anyways, in code that implements the entirety of a user action (such as refactoring), report NFW there and perhaps let user know something went wrong without taking down VS.

As it is things will just not work and it might create confusion as how the feature is supposed to work."
"> Should I file an issue to refactor these as well to not use hard-coded mscorlib versions?

I don't think this is necessary. The way the old tests are written isn't necessary wrong, just not ""modern"". I also think that, as we speak @github is working on refactoring what references our tests are using. It is quite possible that the tests are going to be naturally ""modernized"" in the process."
"I like this proposal more than the other one. This is more explicit and less verbose. I understand the concerns raised here, but I think they should be considered features, and this should be used carefully by the community. I understand this is not always the case, and people could start using and misusing this for everything, but this is as for all the features that Typescript introduces. They are not always used as intended.

One particularly seems to be a good example of why this proposal is good for me. 

## Cross-library interop
Library A may have `type Radian = unique number`.
Library B may have `type Radian = unique number`.

And they _are_ different. Libary A can update is definition tomorrow to `type Radian = bigint`, and that would be ok. I understand that _if I have two nominal types, that both are numbers, seems wrong that they can't assign each other_, but is that what this is about? Having someway to declare a _unique type_?

If I can declare a _unique type_ that can be assigned to a different _unique type_ because they have the same shape, are they unique then? "
"> Mainly just to clean up the noise in logs

This is not a good reason.  The logs are telling us that something has gone critically wrong.  It is not ok to solve that by just having our code ignore hte issue.  If anything, we should be prioritizing determining the root cause *asap*."
"For one this being effectively a servicing fix - I would prefer it to be very targetted. But also, the function can fail for many reasons, and in those cases I think it's good to fail. The current experience on NanoServer or Linux is actually broken in my mind. There's no warning, but we produce something which will not work correctly. For example try building WPF app on NanoServer - the produces exe will be effectively broken (it will be CUI app which will show console, it won't have any icon, probably wrong manifest, ...)"
"Well, *return* types are checked without contextual typing: the following example has an error:

```ts
/** @github {(a: 1, b: 2) => boolean} Foo */
class C {
  /** @github {Foo} */ one (a,b) { return 1 }
}
```

That's from `checkReturnStatement`, which uses `getSignatureFromDeclaration >> getReturnTypeOfSignature`.

I'll see what goes wrong with parameters."
"> I decided to include ""A label is not allowed here"" because, even though it's not a runtime error on its own, if you use the label it will not be defined, which is a runtime error, and because the compiler error for the undefined label is so bad.

https://github.com/microsoft/TypeScript/issues/30408

> I decided not to include this error, since it's not a runtime error in ES2015 and above according to an SO answer I found. It's a useful error for TS, though; probably the error message should be changed to read ""An object literal should not have multiple properties with the same name."", or else it should be restricted to ES5-only. I filed #46815 to track that.

My 2 cents is to just make it a suggestion diagnostic - don't go too crazy with when and how to report this in JS, or modifying how it surfaces in TS."
"> and it's true that the msbuild task is using the wrong assets. In my case it's using C:\Projects\runtime\.dotnet\shared\Microsoft.NETCore.App\6.0.0-preview.3.21201.4\System.Private.CoreLib.dll but with the information that System.IO.File has been already moved to System.Private.CoreLib

@github was the one who brought the task over from arcade into dotnet/runtime so he's the right person to provide an answer. But to give you some more data meanwhile, the failing task isn't expected to run against the live shared framework as it contributes to the build itself. This is similar to msbuild and other tools that we use to build the repository which also run on a last-known-good shipped version of the shared framework (currently 6.0 Preview 3)."
"Locally I was able to build the main branch without any changes:

```sh
docker run -v $(pwd):/runtime \
  -it mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.14-WithNode-20210812132848-d90babf \
  /runtime/src/coreclr/build-runtime.sh checked x64
```

but on CI it was failing to find python while it is clearly there, but when i worked around it, it is now failing with `Failed to get PGO data package path`. There is nothing in logs pointing to clues what's wrong, so it might be something specific to pipeline YAML that needs updating?"
"> It picks the same baseline for x64/x86/arm/arm64...so all the diffs are related to that baseline. The question is why it picked wrong baseline, perhaps we didn't catch up or something in jitrollingbuild? @github - any idea?

The jitrollingbuild pipeline is set to build every time the JIT changes, and not batch changes:

```
trigger:
  batch: false
  branches:
    include:
    - main
  paths:
    include:
    - src/coreclr/jit/*
    - src/coreclr/inc/jiteeversionguid.h
```

However, it appears that AzDO doesn't kick off the build immediately; I noticed a delay of about 10 minutes for this particular change. In a few previous cases for JIT changes, there were also delays before the AzDO job kicked off, and in those cases, another change was merged before the kickoff, and AzDO built that change, not the JIT change that kicked off the job. Because of this, when we upload the JIT to Azure Storage, we use a git hash of a non-JIT change, and when superpmi.py looks for a baseline JIT, it doesn't find the hash of the JIT that should have been built.

Summary: there is an assumption that the pipeline builds every JIT change at the git hash of the JIT change. That doesn't appear to be the case with AzDO. I'm not sure if there's a config to force that to happen. E.g., what if 2 JIT changes were merged at almost exactly the same time? AzDO should build both of them, but does it?

Possibly we could change the jitrollingbuild.py upload script to walk back the `git log` for the built change and use the first hash that actually has JIT changes in it, to work around this problem.
"
"> I'm not opposed to this change as this improves build time and also the confusion around what should I use when I have a single target framework in a project within the dotnet/runtime repository. The only concern that I have is that the only validation to avoid usage of these properties will be either a wrong compilation (which might drive people nuts to not understand why the right code is not compiled) or PR Review... but I guess it is fine and people can get use to using TargetPlatformIdentifier.

Correct. Such a change will impact developers and it needs clear documentation and communication. This change makes sure all usages of the `Targets*` properties are replaced correctly with `TPI` conditions. The motivation for this change is:
1. Allow libraries projects to efficiently/correctly target a single target framework. Today it's not possible for projects to use 
`TargetFramework` over `TargetFrameworks` even when only a single target framework is used: https://github.com/dotnet/runtime/issues/47155. Because of that, we add ~250 project outer-build evaluations (100ms in average per outer build) to the overall build. These evaluations impact both incremental restore, incremental build and the overall build.
2. It makes dotnet/runtime libraries use the same common path as our customers when a project needs to condition on platforms.
3. Tooling works best when we don't rely on global properties being set. Today, the `Targets*` properties rely on the `TargetFramework` property being passed in globally during the dispatch from an outer to the inner builds. During design time builds and eventually in other scenarios, the TargetFramework property isn't passed in globally and instead is dynamically injected after the first project's property group. This change will avoid the dependency on the global property and will better support tooling like Visual Studio and Visual Studio Code. Nasty hacks like https://github.com/dotnet/runtime/blob/04bb6eb3f182c934466af9c6f3d5a9ce8efdf716/eng/BeforeTargetFrameworkInference.targets#L3 can be removed entirely.

> Also it is a bummer that to condition for properties we have to now use [MSBuild]::GetTargetPlatformIdentifier to get the TPI value, but for items we can directly access the TPI property. I think while this brings value, this will bring some confusion to the table as the Targets* properties are/where simpler as you didn't have to think much about when/where to use them vs now if I want to use it to condition a property I need to do a ""more"" complicated condition by calling an MSBuild function to get the TPI value.

The idea is that properties use `TPI` to condition on specific platforms (see PR changes) but whenever that's the case, a boilerplate line that initially sets the `TPI` property must be present. It's boilerplate, yes but I don't think it can be avoided because of msbuild's evaluation order. I don't see any inherent problem with that requirement as long as it's well documented and communicated: 
_""Whenever you want to condition properties on platforms, make sure that the `TargetPlatformIdentifier` property is set (see other projects or docs page).""_

> I'll get an email prepared so that we can merge today but we also need to fix the current build failures.

I was already asleep when you responded. Maybe today? :)

Btw here's the code that logs the PRs that are impacted by this change (including a few false positives which have changes in adjacent lines): https://gist.github.com/ViktorHofer/a69aa2cd8e1bddbfe3bee199a42d681c.

"
"> How frequently is this pattern used in real apps?

I don't think it's super common (setting affinity itself already isn't super common), but a quick search resulted in a few examples that might be impacted if we get this wrong:

- https://github.com/dotnet/BenchmarkDotNet/blob/f4e8de384461e87be7afef62e3797ef6ddb09bcc/src/BenchmarkDotNet/Extensions/ProcessExtensions.cs#L90
- https://github.com/NiclasOlofsson/MiNET/blob/df0d4ffb8c008654271e0c94187cada0abf6a30b/src/MiNET/MiNET.ServiceKiller/Emulator.cs#L81-L82
- https://github.com/disruptor-net/Disruptor-net/blob/f9d7486bae6696177e857e5e7b243c8f6c022bc8/src/Disruptor.PerfTests/Support/ThreadAffinityUtil.cs#L29-L30
- https://github.com/iodes/CoreDirector/blob/e13441c39d4c7b96b07837f924e4e75e9c09bf83/CoreDirector/Utilities/ProcessorUtility.cs#L22
- https://github.com/mwinapi/mwinapi/blob/a1bac7377c3dc176f8163fd392711348eaf7a358/Tools/WinternalExplorer/ProcessControl.cs#L167
- https://github.com/losttech/Gradient-Samples/blob/ec1c1257a83b8a8f18e01581d5ce60e6c4fca471/v1/RL-MLAgents/Program.cs#L118
- https://github.com/dotnet/diagnostics/blob/ca5b87924a1340466533d4d1292e9bda3d03e484/src/tests/EventPipeStress/Orchestrator/Program.cs#L265
- https://github.com/Azure99/OpenJudger/blob/205080b5c2882f84dcd9617387bbe5c3b483bb3d/src/Judger.Core/Program/Internal/Compiler.cs#L32

To be clear, I don't think this impacts your change.  But we should follow up to make sure that either ProcessorAffinity already does the right thing (e.g. roundtripping it will always reflect the same processor group), or we use a different API under the covers that will, or we deprecate these members and replace them with ones not based on a 64-core limitation."
"> I had spent some time and implemented HW intrinstics for Min/Max and as asmdiffs shows more regressions I assume I did it wrong. I also couldn't figured it how to force the containment, I've always gotten something like this:

Could you share what C# code you're using to get this. At first glance this looks like it might be a loop and so the relevant data may be getting hoisted.

A simple: `Max(x, y[i])` for `float x` and `float[] y` should be enough to trigger containment here."
"this was wrong but i fixed it "
that's it. that's the fix. replacing Binding by BindingBase. 4 chars. I replaced some statement with pattern matching to obfuscate the stupidest fix ever and so I don't look as dumb as I really am.
"I see you didn't want to hang onto the same element references, but to save me from making mistakes in the future, could you explain why this is wrong to do?

I would have reasoned that, by the time we are on the ""Counter"" page, the `counterDisplay` element instance is going to remain fixed, so it's safe to hold it. Arguably it's even preferable to do so, as it shows we're not doing completely broken things like tearing down the entire UI and recreating it after each click."
Docs are wrong 😆 - I know you already mentioned it was a copy-paste.
Why couldn't there be shared state at a connection level which is propagated to each stream? I feel like having a single encoder per connection is wrong. I'll need to reread the spec to be sure.
Sucks that we have so much duplicated code between this and Http2TestBase: https://github.com/aspnet/AspNetCore/blob/master/src/Servers/Kestrel/test/InMemory.FunctionalTests/Http2/Http2TestBase.cs
"It makes decisions about resolving the cert and its intermediates at the wrong layer. This builds the chain, potentially downloads intermediates and more. I'd prefer if that happened in a controlled place. "
Can we make things non-optional?  It makes it super simple for someone to accidently do the wrong thing.  We shoudl probably document all the spots that pass null and explain why that's the right thing to do.
"I was wrong about this. `Path.GetTempFileName` is secure enough. It's created `rw` only for the current user, and only that user can remove the file."
"Oh, i think i see what you're saying.  The logic here is buggy:

https://github.com/dotnet/roslyn/blob/f5afdc19c154e9a93561fa66ec013c2cd7730485/src/Features/CSharp/Portable/UsePatternMatching/CSharpAsAndNullCheckDiagnosticAnalyzer.cs#L230-L243

Specifically, because it sees the ```x =```, it assumes that 'x' is always assigned, and thus the change is safe.  But it's not.  Because the right side of the assignment executes first, and will do a read of the unassigned variable.

1. That sucks.  But it's also a very corner case.
2. We could consider fixing it.  Namely that if the reference is the left of an assign, that we have to ensure that the right side is fine as well.  Annoying, but doable."
So not sure which approach you're doing now. Maybe you have to stay using ITextSnapshot but then you can just compare buffers. Maybe it's best to do that and we can research more efficient ways than me sidetracking you down a crazy long path.
">IsValidWhereClauseSymbol [](start = 25, length = 24)

I think that the only thing this function should do, it to check return type of the predicate (bool) in addition to the method's name and number of parameters. We might also want to check that the parameter type of the predicate matches what we believe the element type is supposed to be in this part of the query, but we are not even trying to check this aspect right now, that is fine if that is intentional choice. Checking, the number of generic type parameter, return type and all other things feels wrong  #Closed"
"@github The version-picking logic I was referring to is [this](https://github.com/dotnet/aspnetcore/blob/main/src/Shared/E2ETesting/SeleniumStandaloneServer.cs#L100-L109), so yes it is still there in `main`.

> Last week running an E2E test in VS was throwing exceptions with selenium instance issues

It's possible you might be missing some dependency. I was running the E2E tests from VS a *lot* over the last couple of weeks. If you can still repro the issue, please let me know and I'll work with you to track down what's missing or wrong.

> Today, it can't even build the solution (./startvs.cmd from the Components folder) without crashing or hanging indefinitely (VS2022).

That's new to me. My normal workflow is first building on the CLI via `src\Components\build.cmd`, then `startvs`, and then only building the specific projects I need from inside VS. Things are pretty sluggish inside the IDE when working on our repo so I try hard not to give VS extra things to do (e.g., building the entire solution). Are you doing something different?"
"@github, not related to this PR, but I think the first check in this is wrong. It should be `intrinsic == NI_Vector64_As`, right?"
">  Can I know why here return targetNode is also okay

Oh, i might have gotten this wrong.  `return currentRoot` is likely the right thing, i think i flipped myself."
"yikes.  what a crazy case.  "
"> Because it feels like this is the wrong place to make that decision. We can enumerate the possibilities here today, but that feels fragile. It seems like the best place to state the required modifiers is the component that actually cares about that requirement. I'm not going to block this PR on it as it's minor, but it really doesn't feel like the appropriate location.

Even if we assume that the code is fragile, which I do not agree with. I am failing to see how duplication of the same logic in many places makes the code less fragile.


---
In reply to: [441029178](https://github.com/dotnet/roslyn/pull/45220#discussion_r441029178) [](ancestors = 441029178,441020808,441015421)"
This entire section has been replaced with a message box that appears during startup if you run the wrong architecture. You can remove it!
I made a pass over existing usages of `_symbol` and changed the ones that seemed wrong.
"Doesn't this mean someone could specify RequestVersionOrHigher, and they may silently get a lower version?  That seems wrong."
"@github Yeah, you can probably just delete that. I either was not aware of supportsRTL when I was originally writing/testing that stuff, or I was trying to get the support to work without it because we were targeting API 15 (and supportsRTL is from 17 onward, I think).

TBH, I can't remember. But I think you're right that the code is wrong, especially now that 19 is the minimum API level."
"Ok, an issue remains, and that is that the `fileService.resolveTo` does not properly resolve when I pass in the wrongly cased drive letter.
@github might you have an idea if the fileService also uses `TernarySearchTree`?

[Code pointer where I use it](https://github.com/microsoft/vscode/blob/59a1893d6d66171437f3608d2e938efa616f421e/src/vs/workbench/contrib/files/common/explorerService.ts#L153)
Since I pass in the wrong cased drive letter the `resolveTo` does not seem to be respected.

To repro on Win 
1. Put a breakpoint in my code pointer
2. Open some workspace. Drag from Windows Explorer a file deep inside that workspace -> it does not get revealed"
"For the time being, instead of storing the fonts in a static dictionary in `FontRegistrar` I split the functionality into the `FontRegistrar` that is the part that manages a list of fonts and `FontManager` that manages the font lifetime. Both are instances and can be obtained via the service provider in Core. However for forms, everything expects a static object. So to fix that, I added a static property to Forms, which is just for compatibility.

This might be wrong as the provider will return a different instance to this property as it is new-ed up here. Not sure what the correct way to do this is. "
"I could be _completely_ wrong here because I don't have a design background, but I honestly don't know.

Should we create/use a `ColorDarkenConverter` for the `Dark` theme? I've noticed that regularly styled buttons respond differently on hover:
- darken in dark theme
- lighten in light theme

Though that may be accomplished by your alpha change?"
"I did the same thing and then reverted the PR, 
https://github.com/microsoft/vscode/pull/134168
Let me find out (tomorrow) what was wrong (i.e. what didn't work that made me want to revert the changes).

Basically we cannot have regressions (something that used to work and now doesn't work), unless we decide to fix them.
"
"Half of me wants `Use system language` to be a checkbox just like all the other settings, but the other half of me thinks that's a dumb idea.

@github Thoughts?"
this is the wrong error code :) should be `XA0116`.
"> FYI, the current build failure is just the unit tests timing out, which seems to happen quite often in the CI build. I don't think there's actually anything wrong with the code itself.

Yeah , looking at this in #4384 "
"> C-/ is supposed to be ^_ (the C0 charater US)
    C-? is supposed to be DEL
    C-M-/ is supposed to be ^[^/
    C-M-? is supposed to be ^[?

For the record, I think this is wrong. If you look at Mintty, or Xterm (with the _meta sends escape_ mode set), you'll get different results:

Ctl+/ is `^_` (US)
Ctl+? is `^?` (DEL)
Ctl+Atl+/ is `^[^_` (ESC US)
Ctl+Atl+? is `^[^?` (ESC DEL)
Alt+/ is `^[/` (ESC /)
Alt+? is `^[?` (ESC ?)

Notice how it all fits a pattern. Gnome-terminal doesn't distinguish between Ctl+Alt and Alt, which definitely seems like a bug to me."
"I guess there is something wrong with handling wide characters.
![image](https://user-images.githubusercontent.com/1068203/97776458-2045da00-1ba3-11eb-95b1-f3536110bd50.png)
"
"> Multiple ICustomMarshaler implementations don't return null or won't accept null. Many do.

The thing is, it doesn't matter as much that many do: it matters more that some don't.  The whole point of nullable annotations is to issue warnings when a caller is doing something that might result in unexpected failure to due nulls being passed as arguments when the callee didn't allow them, or when the caller assumes null won't be returned but the callee may return null.  If our goal was to avoid warnings, we could just disable nullable annotations altogether, problem solved :)

If I have an interface that defines an argument as nullable, callers of that method can expect they can pass in null and it'll be fine, but if implementers of that method then don't accept null, either they've violated the contract, or the contract was wrong.  It's hard in cases like this one where the contract wasn't clear and we then have to infer what it was meant to be and the harm that may come if we get it wrong.  When in doubt, we typically err on the side of providing the most restrictive for arguments (non-nullable) and most permissive for return values (nullable) because that more accurately represents to callers the contraints they need to work under, that an implementation may not accept nulls, so be careful, and an implementation may return null, so be careful.  We do that because _typically_ there are orders of magnitude more callers of a given override / interface implementation than there are implementers of it.  It's the reason nullable annotations exist, to help flag for a dev when something unexpected might happen.

> The ""direct caller"" is the .NET runtime marshaler itself

This changes things, in that the claim is basically saying ""we control all the callers that matter"", yes?

Do we ever pass in null?  Are we totally happy with null returns?"
"I agree with @github that going through and removing exception filters is a step in the wrong direction.
https://github.com/dotnet/runtime/issues/50281#issuecomment-808317762"
"You also _need_ to use `nuint`/`nint` for in Unified, otherwise it will be wrong for 64-bit code."
"> 
> 
> **NB** I haven't profiled this particular case so I could be completely wrong. Also this is way off the hot loop so I doubt performance even matters at all in this case with any reasonable choice.
> 
> With that said, if the full deduplication is left in, in general since we have so few things I am willing to bet that a plain linear scan over a std::vector will be faster than a fancier algorithm or data structure.

I guess the plain linear scan you are addressing is O(n^2), and it can still be more efficient then allocating the unordered set. Yet this balance changes at some point. And I actually prefer to use the cleaner solution. In any case we are discussing the efficiency of in-memory deduplication (measured in microseconds), while this is immediately followed by execution of command, that usually spawns another process, creates and renders brand new session (measured in seconds)"
"Change feature data too so it lights up with the branding... https://github.com/microsoft/terminal/blob/main/src/features.xml

EDIT I WAS SUPER WRONG HERE SORRY"
I decided to keep them for now even though they are wrong. Plan is to bring some version of this back in .NET 7 and we'll make any necessary corrections at that time.
Same: wrong comparison. Maybe add a test for the argument validation as well?
"I do believe that check is right, at least from the perspective of the Intel manual. 3.4.1.1 of the volume on Basic Architecture states:

When in 64-bit mode, operand size determines the number of valid bits in the destination general-purpose
register:
• 64-bit operands generate a 64-bit result in the destination general-purpose register.
• 32-bit operands generate a 32-bit result, zero-extended to a 64-bit result in the destination general-purpose
register.
• 8-bit and 16-bit operands generate an 8-bit or 16-bit result. The upper 56 bits or 48 bits (respectively) of the
destination general-purpose register are not modified by the operation. If the result of an 8-bit or 16-bit
operation is intended for 64-bit address calculation, explicitly sign-extend the register to the full 64-bits.

Perhaps it's more that we get the operand size wrong for these instructions, or that we should have something representing the ""destination operand size""."
"@github  we are using """"Starting with macos10.14 not available anymore."""" I think you have an issue with that message, am I wrong?"
"I think style wise we want braces for using blocks, but maybe I'm wrong?"
"The assertion message is wrong, it says a method failed to load, but at this point it's the class that failed to load.

Maybe this assertion should go just below, when you get the method?
"
"style, `{` gets in all the wrong places from here ;-)
"
wrong indentation
"I am wrong, it does generate a small diff in the IL

```csharp
        public static int Help (String val) {
            var data = val == null? 0 : val.Length;
            return data;
        }
    
        public static int Help2 (String val) {
            var data = val?.Length ?? 0;
            return data;
        }
```

```IL
.method public hidebysig static 
        int32 Help (
            string val
        ) cil managed 
    {
        // Method begins at RVA 0x208d
        // Code size 12 (0xc)
        .maxstack 8

        IL_0000: ldarg.0
        IL_0001: brfalse.s IL_000a

        IL_0003: ldarg.0
        IL_0004: callvirt instance int32 [System.Private.CoreLib]System.String::get_Length()
        IL_0009: ret

        IL_000a: ldc.i4.0
        IL_000b: ret
    } // end of method SortedSetFactory::Help

    .method public hidebysig static 
        int32 Help2 (
            string val
        ) cil managed 
    {
        // Method begins at RVA 0x209a
        // Code size 12 (0xc)
        .maxstack 8

        IL_0000: ldarg.0
        IL_0001: brtrue.s IL_0005

        IL_0003: ldc.i4.0
        IL_0004: ret

        IL_0005: ldarg.0
        IL_0006: call instance int32 [System.Private.CoreLib]System.String::get_Length()
        IL_000b: ret
    } // end of method SortedSetFactory::Help2
```"
"I think `_alloca` is the standard name; I'll just convert everything to use that. Some places use allocacheck.h and its macros, but I don't want to go crazy using that, too."
"Maybe this is a dumb question: what ""mode"" of the type inferrer does this test call? Ie position or node-based? Will this change work in both modes?
"
This feels like the wrong name for this condition. Maybe `SupportsExceptionInterop` would be a better name?
"Wow, we really tried hard to do the wrong thing.
"
"for the static case, i only match:  `set { FieldName = value; }`.  I don't think it's common enough for people to fully qualify the name of the static.  (i could be wrong.  but i don't htin it's important enough).
"
"That's not good. That means we probably have something wrong here.

cc @github "
"i think the previous behavior was correct. sorry about that. they type is guaranteed to be `any`. we pass in the type if it can be `any` | `any[]` for instance. but in this case that is not needed. i would keep the old message.
sorry for the wrong suggestion here."
schema-utils' types appear to be wrong (or mismatching webpack's usage at least)
"this seems wrong, which means that this fix may also need to be restricted to types that come through `require`"
"> gives us the wrong argumentCount because it has to account for when a user is in the last position

You are right, the root cause of this issue is that for `,` `argumentCount` increases to `1`. However, for string context `""/**/""` it should be ignored.

https://github.com/microsoft/TypeScript/blob/1fe9bfdd0ee0ecf9dff23a40c0066645719e46b9/src/services/signatureHelp.ts#L390-L392

I had two options for how to fix this issue: 1. Add changes to `stringCompletions`, to decrement `argumentCount` which has `,`; 2. Change logic in `SignatureHelp` for `getArgumentInfoForCompletions` (I though about additional context option). `getArgumentInfoForCompletions` shared between `stringCompletions` and `completions`, and it seems incrementing `argumentCount` is reasonable here.

https://github.com/microsoft/TypeScript/blob/1fe9bfdd0ee0ecf9dff23a40c0066645719e46b9/src/services/completions.ts#L1597-L1600

If the current changes are unacceptable, we can fix the issue using one of the following ways: 1. add an additional parameter to `getArgumentInfoForCompletions` and pass it to all chain of dependencies, or 2. directly in `getArgumentOrParameterListInfo`/`getArgumentCount` check if the position is located in the string (`isInString`). @github What do you think?
"
"This is an example where things went wrong. 
""int"" is not a DeclaringSyntaxReference for ""Item8"". It is a Location associated with the symbol, but not its declaring syntax. In fact Item8 was implicitly declared by the compiler. User did not declare it directly at all.

 If IDE tries renaming ""int"" in response to editing of ""Item8"" at a use site, bad things will happen.
 #Resolved
"
"> Do all ActiveIssue ids map to an issue? Wondering if devs also used pr ids here which would be wrong.

I’m not sure. I will do an audit later after this is merged with a variation of my script. Since this PR is big enough I didn’t want to include other than remapping of issues.

At least all the ones in this PR are valid issues except one which I will follow up in the after PR."
"I'm a bit confused too.  JavaScript strings aren't UTF8.  They're a sequence of 16bit codepoints.  i.e. each charCodeAt gives you a value <65536.  And you may need two codepoints (i.e. surrogates) to actually make a unicode character.

UTF8, on the other hand, using 1-4 bytes to encode a single characater.  

I'm not saying what you're doing is wrong.  Just that hte comment seems confusing and a bit misleading.
"
"The interesting thing to me about this is that, while this tree did originate from the parser, the way it's being used here is wrong. If you just parsed an invocation expression, the parser wouldn't create a conditional access. The stacks that @github and @github reported are actually [https://github.com/dotnet/roslyn/issues/41895](https://github.com/dotnet/roslyn/issues/41895), which is a similar thing: the ide is generating a bad tree, and we do not expect the parser/binder to be fully resilient to all bad trees. @github, do you have thoughts about whether this is something we should try and be resilient to?"
"that feels wrong - I think that `parseSourceFile` should do this check and always provide `scriptKind` so at this point it always have concrete value
"
"> ```js
> _Square_diagonal.set(this, { get: _Square_diagonal_get });
> ```

That has the downside of creating a new `{ get }` object for every instance, whereas:
```js
_Square_diagonal_accessor = Object.freeze({
	get: function _Square_diagonal_get() {
		return Math.hypot(
			__classPrivateFieldGet(this, _Square_size),
			__classPrivateFieldGet(this, _Square_size)
		);
	},
	set: void 0
});
```
```js
_Square_diagonal.set(this, _Square_diagonal_accessor);
```

Uses a shared accessor property descriptor object, but that will still cause the wrong error message to be thrown."
"I'm still stuck on, you e.g. `import { AcBrowseToObjectType } from ""activex-access""` ([pretend it's a module](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/activex-access/index.d.ts)) with either `importsNotUsedAsValues: ""preserve""` or `preserveValueImports: true`:
- TS can't elide the import or named import because the runtime `.js` might have side effects (`importsNotUsedAsValues`) or you might subsequently have [`eval(""console.log(AcBrowseToObjectType.acBrowseToForm)"")`](https://www.typescriptlang.org/tsconfig#preserveValueImports) (`preserveValueImports`),
- but preserving the import/named import is problematic because there might _not_ be any runtime `.js` or runtime named export.
- Currently, if you explicitly elide the import (`import type { AcBrowseToObjectType }`) or named import (`import { type AcBrowseToObjectType }`) you get an error (which this PR suppresses) if you try to use its (inlined) value (unless you `eval(""AcBrowseToObjectType.acBrowseToForm"")` ... or `// @github`).

On the other hand I'm cool waiting for more feedback :+1:, in case a better solution can be found, or you can sidestep it entirely, or I'm missing the bigger picture, or there are developments on the horizon ...

> If that becomes the norm for transpiling/minifying TS, then `isolatedModules` may be the wrong flag to toggle this behavior.

Instead of ""if isolatedModules is false"" I should have said ""if inlined"", whether by `isolatedModules: false` or, in future, some other condition. (I've edited the PR title accordingly.)"
"> @github I was surprised to find that on Windows I almost don't see any performance improvement from the change. However, you can notice that the distribution becomes unimodal as opposed to baseline where you can see two trends.
> 

Correct me if I'm wrong, but the SQ2 is a Cortex-A76 based big.LITTLE core right? In which case the bimodal behavior of the core is most likely because it didn't enter streaming mode[1] for all the cases.  The larger stores of the `stp` of `Q-regs` is most likely tickling the heuristic more consistently. 

> Would you say that the results look reasonable? Do you have any other suggestions what else I can try to improve here other than using `dc zva` instruction (I decided to do this as a separate step).

No, the only other thing you already have on your roadmap, which is the loop alignment. 16b should be enough for most cases.
The ZVA should help as well as [1] explains it will enter streaming mode more readily.

[1] https://developer.arm.com/documentation/100798/0300/functional-description/level-1-memory-system/cache-behavior/write-streaming-mode"
@github No. Something went wrong when I manipulate my local git repo and push. Can you please reopen it?
"> Does it affect the merge duplicate phase? Would two methods compiled under different modules be different now?

I was worried about that, but this won't contribute to determining if a function is ""unique"". The only thing used is the ""method identity"", which is (1) the IL code, (2) the method signature + calling convention + CorInfoOptions + hot/cold region + jit flags + ISA flags.

SPMI basically assumes that if the (salient) ""input"" to the JIT is the same, it will produce the same output. It's possible there are other inputs that could affect the output, like the assembly, but it's possibly a trade-off between precision and SPMI MCH file size and useful difference of MCs.

> what is the easiest way to dump it during replay for a given mc file?

`mcs -dump N foo.mch` for method context N. Then you'll see something like:
```
GetAssemblyName - 1
0-GetAssemblyName assem-000002E226DC7DD0, value-4 'FPDist_ro'
```
(this example was from `BringUpTest:FPDist(float,float,float,float):float`)

> Just that I know how to use this, can you give an example use-case? Can we use this with /dumpMap , etc?

I thought about adding it to `-dumpMap`. We do get multiple entries, which I believe is when we are considering inlining cross-module. E.g.,

```
GetAssemblyName - 5
0-GetAssemblyName assem-0000027B5D2F2700, value-28 'System.Private.CoreLib'
1-GetAssemblyName assem-0000027B5ED42E30, value-55 'System.Diagnostics.Process'
2-GetAssemblyName assem-0000027B7F8E25A0, value-86 'System.Runtime.InteropServices.RuntimeInformation'
3-GetAssemblyName assem-0000027B5ED417B0, value-140 'System.ComponentModel.Primitives'
4-GetAssemblyName assem-0000027B5ED42DB0, value-4 'Coreclr.TestWrapper'
```
(for `CoreclrTestLib.CoreclrTestWrapperLib:RunTest(ref,ref,ref,ref,ref):int:this`)

So we'd need a way to figure out which is the ""root"" assembly name to make outputting a single ""-dumpMap"" entry valuable.

> Does this work out ok for the unusual cases like stubs, LGC, etc...?

Are you worried that one of getAssemblyName / getModuleAssembly / getClassModule will fail in these cases (and spmi will crash)? I tried to make repGetAssemblyName() resilient to missing info. The others _should_ also be resilient to garbage, but I could be wrong. I can certainly trigger a collection on this PR and see what we get (beyond what I tested locally). Would we see these things in crossgen? crossgen2? PMI? benchmark run? all of the above?
"
"Getting or setting `DualMode` on a non-IPv6 socket indicates a usage error that I'd prefer throw instead of hiding the error.

Relaxing this for the `get` makes some sense to me; mostly to make the debugging experience better. Relaxing this for set seems wrong, though."
">  this is also wrong, there is no such namespace, Attribute has just been spelt wrong.

Looks like there is no runtime support for this COM attribute and typo was there since the initial commit of .NET Core (`git log -SPreserveSigAttribure`: 2024b63acd4). The attribute is, however, present in corelib: https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Private.CoreLib/src/System/Runtime/InteropServices/PreserveSigAttribute.cs#L7
and [documented](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.preservesigattribute?view=net-6.0#applies-to).

@github, would it be ok to delete `INTEROP_PRESERVESIG_TYPE_W` and `INTEROP_PRESERVESIG_TYPE` definitions from corhdr.h?"
"I have tried to make a test for `NTAuthentication.MakeSignature` only to find out that it produces different output on macOS and Linux. On macOS the result was (content, signature) and on Linux it was (signature, content) in the output buffer. I am not sure yet which one is wrong but there is a LOT of untested code that's likely broken."
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Fixes issue https://github.com/dotnet/runtime/issues/62281

The wrong holder was being used in DacDbiInterfaceImpl::GetNativeVarData(); change to NewArrayHolder.

Added new/delete operators to Exception so when it is thrown from the DAC and caught/deleted in DBI, the
correct C++ allocator is used. When the DAC is called by DBI, g_pAllocator points to the DBI allocator.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>mikem8361</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>mikem8361</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Diagnostics-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> But it is still pending actual approval on that end.

The annotation today is wrong.  I don't think this requires a review.  We can just fix it."
"It was wrong before this PR, but I think it's correct with this newline added here.

Within this file, each block supplies its own trailing blank line, so there should always be exactly one blank line between each block, and one final trailing blank line, regardless of which blocks are enabled/disabled."
"Hum. That could read wrong and imply that if they differ by tuple names and something else then it would override. #Closed
"
Having sleep here feels very wrong.  It's now the default for every sync file load?
Does it make sense to cross-target site extensions? I thought these were built for specific target frameworks in a separate build. I could be wrong though so it's worth double checking. Same applies to LoggingBranch.
"Looks wrong. `symbol` isn't null here, or in the case below."
"That's actually the last set of tests that are broken right now, CoreHostTrace is the only way you can see what's going wrong since, we already log the return value in the logs, but I can return an HR instead of a bool so we have the code"
"1. wrapping here is weird.  just keep ValueText on the previous line.  
2. can just use == instead of .Equals
3. Technically wrong for VB which is case insensitive (but that's so minor i don't think we care, esp. as VB case corrects).

"
"@github @github @github

As part of work on #17552, I'm looking into the end-to-end flow for events and how all the types work. I might be wrong, but it *looks* like the extension methods in `WebEventCallbackFactoryEventArgsExtensions` don't get used anywhere in the code generated by the Razor compiler. It seems like the generic overload of the method is what we'd always use.

I did a bit of archaeology and found [a commit 2 years ago by @github](https://github.com/dotnet/aspnetcore/commit/98fe8a8328a0b41ac776a1ccdc71943de8093440) that first introduced them, with the commit message containing:

> The fix for this will be two-phase by first creating a set of APIs that
can be targeted by the compiler that has the desired behaviour and then
updating the compiler to target this new infrastructure.

It's quite possible that these specialized extension methods were only intended to be a temporary step, and have long since ceased to be needed. **But the other possiblity is something more subtle,** like maybe they change how the overload resolution works in order to produce better compiler error messages in cases where people provide incorrect types, or maybe they are only intended to influence intellisense in the design-time code or something. It's hard to say since this build (without those extension methods) and its tests passes.

If anyone here feels they know whether these extension methods or needed, or has a suggestion about how to determine that, please say so :) Since they are public, it's debatable whether we should obsolete them, remove them, or leave them alone, but regardless I'd still like to know what they are for and whether custom event args will somehow behave less well due to not having equivalent extension methods.
"
"Hi @github 
Isn’t it right fix? 
Am curious to know.if it is wrong will try different approach and guide me.
Happy holidays! 🙂"
"This looks wrong. It's using powershell to target a CMD file. Not sure why we'd change this to use powershell here in any case. "
"> Make sure the runtime knows that we are now depending on this and need them to fix KillTree for 6.0

@github what's wrong with it? If it's still broken then we should wait to adopt it."
"Hello team, I'm currently working on a .NET6 project using the latest versions of StackExchange.Redis and Redis Server 6.2.6 and I'm receiving the following error:

`ERR Error running script (call to f_3915ee22fda531a1d5661f2523d0443fd35ff0a4): @github_script:2: @github_script: 2: Wrong number of args calling Redis command From Lua script`

I believe this change is meant to address this issue and I see it's merged... is a release pending?

Thank you,
Joe"
This is technically wrong. User's preferences for locals shouldn't apply to tuple name suggestions. This needs to be fixed as soon as naming preferences for tuples are implemented.
">Fixture [](start = 17, length = 7)

Can you explain the overall purpose for this? Why do we need a hard-coded path in this file? (seems wrong to me) #Closed"
"This is wrong.  This is not what this option controls.  The option controls whether or modifiers are required in the case where they're redundant.  But 'public' is never redundant.  If you leave it off, the property will be private.  And that's not what is being generated.  "
"You are asking the wrong question here, since you are saying, execute when it is a PR. It is working arm because $[PRBuild] does not exists and null != True. So two issues:

* You are not using the variable.
* You are using the wrong condition."
"so i tehnically think this *may* not work.  but i'm not 100% certain.  i think the issue was that people can create nodes in isolation and then pass to helpers like this.  those nodes are *not* pointing at the right option.  indeed, they dont' point at syntaxtree at all (instead one gets synthesized by default).  This default syntax tree can have wrong 'default values', which can throw things off.

I'd be interested to see if any tests fail here.  If not, we may be ok."
"Indeed, our API is wrong. We should return a NSObject, else it makes no sense. We can add a #if with the new version.
"
The comment is wrong - please remove items that correspond to non-existent fields (e.g. `e2-e5` etc)
"Looking this line feels wrong.  If the server build is cancelled and this exception is caught we will return succeeded but never run the compilation. 
"
"Doing this unconditionally is wrong. I am sure there are scenarios when we don't create sequence points at all.
Second, it is wrong to create sequence points before LocalRewriter. Third, we probably would have to deal with this specially if instrumentation was a part of the lowering pass. @github, if we haven't created an issue to track the move to the infrastructure we discussed last Friday, could you create one?  
"
"This one seems wrong. A `[string?]` is equivalent to `[] | [string | undefined]`, so I'd expect something equivalent to `[number, boolean] | [number, string | undefined, boolean]` to pop out (if not that, verbatim). There's no error here, so quietly swallowing the optionality without reflecting it in the result seems ripe for bad behavior."
"@github This line seems to be wrong. `_projectLangaugeToErrorCodePrefixMap` is immutable, so this line has no effect.
"
"`q` and `u` are accessors on `B`, not `A`. This error message is wrong. Is that expected? (From the bug, it seems like it might be outside the scope of this fix.)"
"@github  @github  So when I try to do it with just 
```
+HARDWARE_INTRINSIC(AdvSimd,         ExtractAndNarrowLow,                       -1,               8,           1,     {INS_invalid,           INS_invalid,        INS_xtn,            INS_xtn,            INS_xtn,            INS_xtn,            INS_xtn,            INS_xtn,            INS_invalid,        INS_invalid},           HW_Category_SimpleSIMD,             HW_Flag_NoContainment|HW_Flag_UnfixedSIMDSize)
+HARDWARE_INTRINSIC(AdvSimd,         ExtractAndNarrowHigh,                      -1,              16,           2,     {INS_invalid,           INS_invalid,        INS_xtn2,           INS_xtn2,           INS_xtn2,           INS_xtn2,           INS_xtn2,           INS_xtn2,           INS_invalid,        INS_invalid},           HW_Category_SimpleSIMD,             HW_Flag_NoContainment|HW_Flag_UnfixedSIMDSize)
```
i.e. no special treatment it just crashes

```
Assert failure(PID 26767 [0x0000688f], Thread: 26767 [0x688f]): Assertion failed '!""Unexpected HW Intrinsic""' in 'JIT.HardwareIntrinsics.Arm.SimpleUnaryOpTest__ExtractAndNarrowLow_Vector128_Int16:RunBasicScenario_UnsafeRead():this' during 'Importation' (IL size 87)

    File: ~/git/runtime/src/coreclr/src/jit/hwintrinsic.cpp Line: 675
    Image: ~/git/runtime/artifacts/tests/coreclr/Linux.arm64.Debug/Tests/Core_Root/corerun
```

Since the intrinsics lookup seems to fail...

from what I remember

```
HWIntrinsicInfo::lookupIns(intrinsic, baseType)
```

fails which is why I added the `HW_Flag_BaseTypeFromFirstArg` and `HW_Flag_BaseTypeFromSecondArg` the first time.

The problem is that the intrinsics doesn't exist for a type of `byte` since you can't narrow that any further. So using the return type here is wrong."
"Not too crazy about temporary variables just for the sake of changing the type. Elsewhere we tend to just write the type assertions (since they disappear in the output) or, when meaningful, refactor into a function that takes the more specific type as an argument.
"
"Ah, finally fixed! I have thought that an arcade change needed for this to get fixed was not made yet, but I was wrong. Closing https://github.com/dotnet/arcade/issues/2968 that was created for this issue.
"
"The case sensitivity used by `getCanonicalFileName` is actually not very trustable, because we tell the file system case sensitivity [solely by OS](https://github.com/Microsoft/TypeScript/blob/0e6f8eb2bca776acdb11a6cbf45b37b2d195650a/src/compiler/sys.ts#L334). However, in some cases this is wrong, for example network mounted file system on Windows, or HFS / HFS+ on OSX. Relying on it has caused many troubles previously when dealing with file watching. So I think it might be better if we only use the canonical file name internally for comparison purpose, but not when directly talking to the file system.
"
"There are two issues here, one is how things fail if mono_wasm_load_icu_data isn't called and invariant mode isn't explicitly enabled (which can be the case with old version of blazor) and then what exactly is going wrong in #40527 

If this was simply a case of mono_wasm_load_icu_data not being called then falling back to invariant mode here would be ok (possibly preferable to failing fast).   "
"@github I fixed the wrong naming and removed the #elif condition support. You can take over and fix the ""newLine"" problem if you like. (Hint: we can also go back to commit 7300c96, there I only included the last #if or #elif before the cursor, so the newLine problem is irrelevant)."
"> 1. didn't unwrap right (since we determine syntactically that we should be able to unwrap the tuple types made), and 2. produces a subtype of what the user actually wrote for the check type

I’m assuming it was (1) that made the inner conditional evaluate to false? If we are going from substitution types to their actual type in the check type position, won’t that potentially start making a lot more conditional types evaluate to _false_? I can’t come up with a compelling example (I mean, even the repro in the bug report is reduced to something totally theoretical, not practical), so I might be thinking about this wrong."
"> I think the expected behavior described in the bug is wrong

I'm not sure I agree with this part. The thing that's really being complained about is the fact that we're providing completions after a `.` in a context where no completion item would be valid.

But otherwise, yes, the existing tests were written intentionally."
"Hey @github ` emitDecoratorMetadata` does not have the `showInSimplifiedHelpView` attribute. For that reason it does not appear in the output  or am I wrong?
```
$ node ./TypeScript/built/local/tsc.js --init --target es2021 --outDir ./build

Created a new tsconfig.json with:                                                                                       
                                                                                                                     TS 
  target: es2021
  module: commonjs
  outDir: ./build
  strict: true
  esModuleInterop: true


You can learn more at https://aka.ms/tsconfig.json
```
"
"> 
> 
> @github I rebased your branch and added fixes for the failing tests.

Seems a mix of me just being blind and missing a couple things and some random number being wrong somewhere that I would have never thought to look at. Glad we got that sorted."
"I've tracked down in the dump that the patch point that was triggered is the one at 0x7F33168CB0, IL offset 132 (it would be very useful to expand sos.dll with information to make this easier). However, I've still not found out if the generated code is wrong."
@github I added that local function. Changed the wrong method name. Added the sanitization for Unix that I forgot to add to Zipfile.Create and simplified the sanitization on UNIX to that single line thing.
"@github there is no way to create a customized (thus more informative) exception message for `SocketException` without deriving a new type at the moment. See: https://github.com/dotnet/runtime/issues/37150#issuecomment-636098894.

IMO the tests using `Assert.Throws` instead of `Assert.ThrowsAny` are generally wrong unless the exception type is sealed.

Anyways, we should maybe consider a tiny API proposal to add a `SocketException(int errorCode, string message)` constructor for .NET 7 to get rid of this ugly workaround."
"Doesn't this event get fired already in the application lifecycle handler? It should fire on completion of this method.
https://github.com/dotnet/maui/blob/main/src/Core/src/Platform/Android/MauiApplication.cs#L74-L75

If the order is wrong, we could move some things. "
"This was broken before, but this is not the fix. The 0 byte read from the stream needs to cause PipeReader.ReadAsync to return a ReadResult with IsCompleted set to true.

This change does that, but in the wrong way. This calls PipeReader.Complete() which sets _isCompleted and causes IsCompletedOrThrow() to return true below.

The problem is this is conflating two types of completion. You need two completion flags: one for writer completion and one for reader completion.

PipeReader.Complete() should only be called by the *reader* once the read loop is completed. On the other hand, ReadResult.IsCompleted should only return true when the *writer* is completed. In this case, that's when Stream.ReadAsync() returns 0. 

Additionally, if PipeReader.AdvanceTo() is called after PipeReader.Complete(), which would likely happen with the completion of every Stream with this change left as is, PipeReader.AdvanceTo() is supposed to throw."
"Minor detail - should this be renamed to `_fetchCts`? I find it hard to remember which way round we go so I might be wrong, but it sounds more like an acronym for `CancellationTokenSource`."
"It's a good point to raise, but I think we're OK with this one. In practice all of the `Close` methods will close whatever frame is outstanding on the stack, so even if you do deliberately get the order wrong it won't be harmful. The only weirdness you could cause by this would be failing to pass parameters to a child component because that's the only difference between the close methods.

Considering how perf-critical is this low-level part of rendering, we wouldn't want penalize people using `.razor` to produce normal components by introduce extra checking logic for cases that a valid `.razor` component could never trigger. We've always been clear that anyone writing rendertreebuilder logic manually is in the same situation as people writing C# logic manually: if you write a bug, you have a bug."
"Got it, so I'm probably wrong but for this case `RedirectResult` I believe it should have almost the same implementation as:

https://github.com/dotnet/aspnetcore/blob/3d0f22b8b9df34c6b53976563fc12c6267118c75/src/Mvc/Mvc.Core/src/Infrastructure/RedirectResultExecutor.cs#L44-L78

is that correct?"
I think it does also do that already. The call here is only to guarantee we clean up if something went wrong during the last call.
Isn't the `JsonElement.Parse` allocating? (I might be wrong)
"The dependency is the wrong direction, the transport can't consume KestrelServerOptions. That also seems like it would break the intended layering of transports."
"OK I spent some time with this today looking at the most minimal changes to basically replicate what OutputFlowControl did. Let me know if my assumptions are wrong in any of this.

The old code also scheduled all waiting streams as long as while there was still flow control window available. I don't see any special logic to deal with fairness outside of that. 

https://github.com/dotnet/aspnetcore/blob/1d922b9dbdaeafe7468094568f934cbcc8c8dc73/src/Servers/Kestrel/Core/src/Internal/Http2/FlowControl/OutputFlowControl.cs#L49-L62

So when CompleteCurrent is called, it queues the continuation to the threadpool and keeps doing so while there's flow window available. I'm missing how this avoids the thundering herd problem.
"
"Seems to use the correct load on Avx2
```asm
G_M58431_IG02:
       movsxd   rax, r8d
       vmovupd  ymm0, ymmword ptr[rdx+rax]
       vmovupd  ymmword ptr[rcx], ymm0
       mov      rax, rcx
```
Perhaps `.Count` is wrong when Avx is not supported?  Could be Jit or new crossgen2?"
"> Buffering the bytes shouldn't cause much throughput overhead(?). Is it the decoding and logging a big string that slows it down? I suspect streaming/chunked body logging will help here.

Yeah there are many things we can do to improve perf here, but that's for after this PR is merged 😄 . I mostly wanted to make sure there wasn't something horrendously wrong."
"But, I got something wrong&hellip;"
">null [](start = 62, length = 4)

Passing null is wrong here, we should use the same culture that would be used by original code to convert arguments to strings."
this will probably do the wrong with wrt trivia.  we should do ```SyntaxFactory.NullableType(declarationTypeToFix.WithoutTrivia()).WithTriviaFrom(declarationType);``` #Resolved
"So, again, you should put in the assert if you are making a strong claim that this is a *Requirement* of this method. i.e. if it would be a bug somewhere for someone to call this method on the BG thread, we should put in an 'assertisforeground'.  Similarly, if it's a bug to be called on the UI thread, then we shoudl hve an 'assertisbackground'.  if it's fine to be called on any thread, it should have an 'CanBeCalledOnAnyThread' call in it.  This is most important for sync methods.

The complaints about the asserts before was that the asserts were *wrong*.  Specifically, we were putting in assertisforeground in methods that should not require being called on the FG.  Async mehods, in particular, should be written to be callable by any thread thread (occasionally there are good reasons thsi can't be). If they then *need* to jump to the FG, they should make the appropriate jump (though, really, only if they're JTF ready, as this is super dangerous otherwise).  

So, i would boil it down to:

1. your async methods should likely not require FG/BG.  If they have an assert, it should be 'CanBeCalledOnAnyThread'.  Then, they bounce to whatever thread is appropriate for them.  i.e. GetDesciption should bounce to the BG since it can be super expensive. 
2. your sync methods *in complex multithreading code* should have asserts about if they should be called on fg, bg, or any thread.  This documents our exepctations, and throws when we get things wrong. #Resolved"
"> and are used to ensure we wait for them during shutdown.

Dumb question.  Why would we want to wait on anything during shutdown?"
"nit.  in general, pull out these complex method from the 'Change action callback'.  The reason for this is that it's very easy to potentially screw up and possibly do things like capture the wrong values.  In this case, i don't see any mistakes, but it's still a potential landmine.  Thanks!"
"As far as I am aware, there is not an async command handler (correct me if I'm wrong).  This method could be async, but I'd just be moving the wait up a method call
1/3 will do."
"idon't understand the comment.  what's wrong with using GetSemanticModelForSpanAsync here? If there is a problem, the comment needs to be fleshed out better to explain what the issue is.  thanks!"
"`(incompatible type)` will show up if the type name doesn't match the file name to begin with, right? That's a confusing message to me... what's wrong with the type exactly?"
"I'd make the setter `private protected`, but this is really a dumb restriction that we can't add a setter in an override."
This is a user-facing breaking change where such unsupported dictionaries worked and now they don't. Are we OK with this? Was the previous output wrong?
"you are mixing the concepts of the Invariant mode and the Invariant Cultures. these are 2 different things. the code you have pointed is just returning the read only Invariant (culture DTFI). this doesn't mean if anyone else created a new read/write Invariant culture in the Invariant mode cannot set the calendar. this check looks wrong to me and we should allow setting the calendar and not throwing in such case.

---
In reply to: [438366041](https://github.com/dotnet/runtime/pull/37527#discussion_r438366041) [](ancestors = 438366041)"
"@github Thanks for the reply. 

> and I want to make sure you don't feel like we are just dismissing this opinion.

I don't feel like anyone is dismissing my opinion.  You guys have been great.   I understand that we are in forming/storming stage.  All good.

> Updating our code to modern standards has been a long and arduous journey, but we're definitely not all there yet (evidently). I think where we're mostly coming from is a very Windows-centric mindset, where we have a huge codebase with varying styles across all of it.

Too funny.  I am in the same boat.  I have been a working a large legacy windows-centric code base for a long time.   A few years ago we decided to go cross platform and start to update to Modern C++.   So we were in the same boat.  It has been a long road and obviously when you have millions of lines of code you can't clean it all up at once.   We started with a similar set of rules like you.  ""keep the code consistent, .....""  What we found was doing this is almost impossible.  It is really hard to say ""follow these guidelines for this code"" and ""follow these for this code"".   

In a nutshell this is what helped us get there.
1. Have a style guide and follow it for _all new and modified_ code.  The more detail the better.
I mean really follow it.  :)  This sounds funny but until everyone commits to it and understands it you will have issues. All devs/reviewers need to understand the Core guidelines (or whatever your coding standards are)  - this takes some time to get there but it is doable.

2. Compile with all Major compilers - Clang has great sanitizers, better warnings, etc...

3. Use clang-format! This will save a huge amount of time.  No more - oh you have an extra line here, you have the braces in the wrong spot, etc...  Also, be OK if it is not exactly the same as what you do now.  Believe me, it is worth it.

4. Setup external tools like the CppCoreGuilines analyzer / static analyzer - this sounds great but with a large code base, it is difficult to run the analyzer and fix them all.   In this repo you may be able to do that.  The terminal codebase isn't that large.

5. Document -  Contributing.md, style guide, Do's / Dont's, etc.  If everyone knows what the rules are then everyone will be more productive.  Also realize the community doesn't have the years of backstory that msft devs have.  (this is easy to forget)  Doing a good job of this will pay huge dividends.      

> There's #890, which is probably a good thread to copy most of this commentary into.

I opened this.   👍  For this repo to be successful this stuff is a must.  

You guys seem to have a good start on this and @github has a lot of this on his list. So you guys are on the right track.  I'm looking forward to watching this repo mature.        
"
"It also feels wrong to me to mix two different sources of information (attribute, metadata signature) in the same API

---
In reply to: [463842919](https://github.com/dotnet/roslyn/pull/46467#discussion_r463842919) [](ancestors = 463842919,463808040,463776322,463774522,463773248,463770629,463768020,463765922,463758407)"
"nit - I think I would prefer for this to be left as an explicit parameter to the request, that way it's very easy to see the cancellation chain from the method calls.

not sure what best practice is though for this, so happy to be proved wrong!"
"Isn't `scrollDelta` is too generic? Because this variable is only set when there is a vertical scroll and the view port will not change after the vertical scroll, which is only the case after the buffer is full and starts to cycle. Something like `scrollDeltaThatWasntAppliedToViewportButWeMustTellTheRendererAboutItAnyway` 😂.

Or I reverse it to `newRows` like it was before? I wanted to change it because I thought that it would be clearer this way but I was probably wrong. lhecker thought it was less clear than before too."
"Is there anything we can do to make tracking these bugs easier? I imagine a stack trace might be harder to get. Maybe we could have some added telemetry for this kind of stuff to be able to track down these root causes faster?

My concern is that we get _non-descriptive_ bug reports. So we'll know something is wrong, but won't have a clue where to start looking."
I am now wondering what `DisallowNull` will do? does it will prevent the setter from using null values? of so then this will be wrong.
"Previously, I assumed it had worked on macOS with `Cmd + Q` but I was wrong (due to my inexperience with macOS), so I tested it out and pushed a fix so that it does prompt on a `Cmd + Q`."
"Do we expect wrong `numBytes` to be actually passed in, or are we just doing this defensively? "
What super sucks here is that we don't have that choice. This exact argument with capital E and one - is just THE WAY that OutOfProc COM EXEs are started. (Unless there is a magic COM registry key that lets you specify something else...)
"I told @github I think this safe, so blame me if it goes wrong."
"As far as I can tell, I could be wrong, `path.exists` is not being set when opening a file through `vscode.dev`. "
"I had no luck with using this configuration, even couldn't make work simpler, browser only case, some rules i tried:
```xml
<BinPlaceTargetFrameworks Include=""$(NetCoreAppCurrent)-Browser"" SetProperties=""EnableBrowserWarnings=true"" />

<BinPlaceTargetFrameworks Include=""$(NetCoreAppCurrent)-$(TargetOS)"" Condition=""'$(TargetOS)' == 'Browser'"" SetProperties=""EnableBrowserWarnings=true"" />

<BinPlaceTargetFrameworks Include=""$(NetCoreAppCurrent)-Browser"">
  <SetProperties Condition='$(EnableBrowserWarnings)' == ''"">EnableBrowserWarnings=true</SetProperties>
</BinPlaceTargetFrameworks>

<BinPlaceTargetFrameworks Include=""$(NetCoreAppCurrent)-$(TargetOS)"" Condition=""'$(TargetOS)' == 'Browser'"">
  <SetProperties>EnableBrowserWarnings=true</SetProperties>
</BinPlaceTargetFrameworks>
 ```
Some of it even didn't build, even they built the value is not set, i tried to use them in `versioning.targets`:
```xml
  <ItemGroup Condition=""'$(EnableBrowserWarnings)' == 'true'"">
    <SupportedPlatform Include=""browser""/>
  </ItemGroup>
``` 
Didn't work, tried to use in the same file (`Directory.Build.targets`) also didn't work. Please let me know what is wrong hrere"
"Ok worked out what I did wrong @github @github I had created the issue12489 branch from Main as I thought (Wrongly!) that this was the main branch but turns out that 5.0.0 is the default main branch.  Lesson learnt now.

I closed this PR as it was easier to start the branch again due to the number of Merge Conflicts and there is a new PR over at PR #13671 thanks for the support."
"> don't really know how to confirm correctness of anything in the schema though.

lol me neither. VsCode will do it, but more often than not, I just wait for someone to complain about it being wrong 😅 "
"Uh...what? Adding `Android.Graphics.Color` as a struct may have been ""wrong decision made back in 2010,"" but it's not one we can change until we break API compatibility, which isn't going to happen anytime soon.

As such, we need to find an alternative that doesn't involve API breakage. Is there something wrong with the commented-out `<attr/>` which renames `android.graphics.Color` to `Android.Graphics.AndroidColor`?

Even without that `<attr/>`, why can't [`android.app.WallpaperColors`](https://developer.android.com/reference/android/app/WallpaperColors.html) be bound? I don't see anything in there which would prevent it from being bound *at all*. (It might be *useless*, lacking the `getPrimaryColor()` and related methods, but the type itself could still *exist*.)"
The fact that you had to prefix `$(JAVA_INTEROP_PATH)` with `../` strongly suggests that `$(JAVA_INTEROP_PATH)` has the wrong value. :-)
"for the record - I've been meaning to review this for a while. The cursory glance I gave it, I was impressed with what I saw. I think it's crazy that you made this work with just serializing panes as a set of ActionAndArgs and then just creating a big ol' list of those to execute to recreate the state. That's not what I had pictured, but it seems to work pretty well. 

I need to give this a little more thought to make sure I can re-use bits of this for tear out (#1256, #5000). I was planning on serializing the state of the window as a json blob representing the structure. If we can just do it with serialized actions, that's probably good enough. Sorry for any delays, especially on such a high impact feature!"
"Yep, and with the changes as per Jason's suggestion to use object reference equality, the assertions are much more clear and the code itself will never do the wrong thing."
You want to use `NSUserInterfaceCompression` instead or generator will pick the wrong interface.
Let's please agree on that we never accept this NoWarn to be set as it indicates a wrong use of the Pack task.
"NIT: wrong indentation
```suggestion
		    [ActiveIssue(""https://github.com/dotnet/runtime/issues/43877"")]
```

BTW line 2192 is badly indented as well:
https://github.com/dotnet/runtime/blob/bbe662025dd13f364daa86c843c9fd0736665298/src/libraries/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs#L2192

If it's not too much hassle for you, could you please also fix it?"
"Should you include `output` in the exception log ?
That way you can get a clue of what went wrong"
"This approach doesn't seem right to me, current number handling is [explicitly inherited by child nodes](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/ReadStack.cs#L152) so erasing it here might mean we're serializing things incorrectly downstream.

I might be wrong, but there should be a test ensuring that this doesn't happen."
"> `var useSiteInfo = GetNewCompoundUseSiteInfo(diagnostics);`
~~We attach this use-site info to the property we found. It gets reported when it's used.~~

Was looking at wrong line (comment was shown in wrong location)"
"This looks wrong, I think there's a missing `return;` statement after line 127, where it already handles the `value is null` case. Looks like the nullability attributes caught a bug here :)"
"I may get the syntax wrong, but the idea was to avoid unnecessary `GetSpecialType` and symbol comparison and just `SpecialType` property directly.

```suggestion
            if (arrayCreationExpression.Type is IArrayTypeSymbol { ElementType.SpecialType: SpecialType.System_Byte })
```"
I only noticed that the code was wrong when I was trying to make sure that the new `jmp` instructions would be properly handled during unwinding. I haven't actually seen any issue (we have also never generated this particular form of `jmp` before this PR).
"Note that this is wrong for Master, but I don't have a better way of doing this for stabilization.
"
"Since I added that cmakedefine01 https://github.com/dotnet/runtime/commit/c88c88a5f07325a70322cfc056949e8d52e4a04f, naturally I know what mono is using. :)\

Your change is wrong and will suffer from same thing what I have fixed yesterday https://github.com/dotnet/runtime/pull/66874."
"Whoops, made the wrong thing into a switch.
"
"> If InternalSyntax.Parser.CheckFeatures(InternalSyntax.Feature.ImplicitDefaultValueOnOptionalParameter, _compilation.Options.ParseOptions) Then [](start = 20, length = 142)

This feels like a wrong place to check for the feature availability. In fact, it looks like a breaking change, VB always was able to consume optional parameters without explicit default values, but this check makes it conditional upon the feature. Unless I am missing something, there should be no change to this function. The feature is purely syntactic relaxation and, therefore, the check should be done in the parser only. 
"
"`formatToParts` takes an iterable of strings, not an array of strings. The MDN documentation here is wrong."
"Ops. I pushed my debug code :). `indirect Users` includes the module that contains  `export` that will be changed. When `changeImports` tries to find import references, it finds `export` reference to itself., this is the wrong position, so QF throws an exception. I found that we can skip QF if the export name is equal to the found ref name. Do you think this is Ok? Or is it better to find a way to exclude such modules from `indirectUsers` in `importTracker`?

"
"Analyzers, CodeFixes and corresponding unit test projects are empty shared projects that were split out from https://github.com/dotnet/roslyn/pull/41363. That PR moves a few IDE analyzers, code fixers and their unit tests into each of these projects. I would suggest checking out my branch from that PR to locally see the structure.

> So i attempted to move ISyntaxKindsService into CompilerExtensions. I needed to split it into two parts. One that just had the data, and one that extended ILanguageService. I then attempted to keep the second part just in WorkspaceExtensions.

I think that is the perfect approach, and I would have attempted the same.

> The problem here is that the CodeStyle.Fixes project references the CodeStyle project and the WorkspaceExtensions project. So there's now an ambiguity because types get pulled in through two paths.

I hit exactly the same problem, see my comment here: https://github.com/dotnet/roslyn/pull/41363/files#r376442419. In that PR I have moved all the public Option related types that are explicitly linked into CodeStyle project for analyzers (such as OptionSet, IOption, `Option<T>`, CodeStyleOption, CodeStyleOptions, NotificationOptions, etc.) into a separate namespace with an `.Internal` sub-namespace so that files in WorkspaceExtensions.shproj can appropriately reference the types from CodeStyle project or from Workspaces project when imported in the respective projects by having using statements conditioned on `CODE_STYLE` preprocessor directive. This is unfortunate side-effect of the fact that our IDE analyzers need to reference these types, but cannot reference Workspaces. I don't see a good way around this except the approach I have taken in that PR.
Note that Sam has been using extern aliases to handle similar conflicts in shared formatter code, but we cannot do so for the entire Code Style layer because VB does not support them, and personally I find them quite difficult to fathom. I'd rather have the duplicated types in CodeStyle layer be duplicated into a separate namespace.
My PR also adds a `BannedSymbols.txt` for CodeStyle layer: https://github.com/dotnet/roslyn/pull/41363/files#diff-8747d0acadea5b353b1871784c14003c. This ensures that the shared files in WorkspaceExtensions.shproj do not accidentally reference the Option types from Workspaces layer when imported into CodeStyle.Fixes project - you should see an analyzer diagnostic on wrong API usage once that PR goes in."
"I know this is wrong, this is related to #1209.
"
"this is actually a really dumb fallthrough.  I'll just make it break.
"
"Let's close this if it's the wrong change, and discussion can continue."
"@github I'll try and write out a consistent benchmark right now. In my code, i noticed a small but definite speedup in a couple of cases (around 10% in the exact case I remember, in just that method) where I had to call some COM code in relatively hot code (iirc it was `ID3D12Resource::GetHeapProperties`, but i may be wrong). "
"> Ultimately the comparer that the razor team is breaking transitivity.

Do we have a bug on the Razor team for them to fix this? 

In theory I agree keeping previous is better than new as a general rule in the cache (better for GC purposes as we're promoting less values to higher generations). Hence I'm okay with the change overall. That should be an tiny performance detail though, not a correctness one. Doing this for correctness feels wrong, it's not a bug in our implementation, it's a bug in Razor they should be fixing in parallel.

Any non-transitive comparer here is going to cause problems. "
"@github ~~This specific assert may be undesired behavior (just a quick look - so I can be wrong):~~

~~`https://github.com/dotnet/roslyn/blob/80d7e32b44a83246eb26ecac9bca3c2283b8d938/src/Compilers/CSharp/Test/Semantic/Semantics/SimpleProgramsTests.cs#L5714`~~

**Edit:** Nope, the top-level counter is `FireCount3`, which is 1. So this specific test is okay.

"
"> I don't understand the implications of this, but it makes sense in general.

So, this codepath exists so that if SGs generate something that would affect tagging that tagging will eventually show it.  This allows tagging to be fast in the common case (where we use frozen partial) but while also ensuring that if SGs impacted tagging *and* the user stops typing, that the SG impact will be seen.

If the user keeps typing, they'll eventually see the results of the SG as teh background compilation-tracker will eventually catch up.  So this really is just so you never get into a 'stuck' point where the user perceives things are wrong and it never changes."
"@github @github please LMK how i've done this wrong :) "
"> @github based on the errors CI is down because openssl is missing on the clients. Does that ring a bell?
> 
> cc @github/runtime-infrastructure

We've seen lots of stuff like this... generally it's one of two things, either the hosted agents themselves change or the code that bootstraps the dependency changes.  If it's 100% and you can point to ""this is specifically wrong with Hosted MacOS"" we can certainly open an IcM post-haste; I don't see what's specifically broken yet though.

When you see logs like this though, it's not our machines, so all we can do is support tickets.
```
Starting: Initialize job
Agent name: 'Hosted Agent'
Agent machine name: 'Mac-1601807338640'
Current agent version: '2.175.2'
Current image version: '20200904.1'
```"
"@github I am very confident about fix (1); the manual advancement of the scanner before was just wrong, and in a confusing way.
Fix (2) has a lot of moving parts, so I'm less confident about it.

Some additional considerations:
- Our JSX test coverage has a similar character to our other tests, but more so: there's a fair amount of JSX but it doesn't cover cases you'd encounter in incomplete programs that well; most of the tests I wrote for this PR are not redundant with existing baselines.
- Both changes only apply in ""non-expression context"" (I don't know if there's another name for ""in JSX text, nested inside JSX elements"") so in theory they're less likely to cause problems outside.
- JSX parsing has been this bad for a long time, so fixing it is not urgent.

I would personally rather hold this till 4.4, I just forgot to add that section in the PR discussion. I would be OK shipping fix (1) separately in 4.3, but there's really not much urgency here."
"No failures were reported due to this, just an observation while reading code. 
Considering it is type equivalence, is it something that can be easily tested in coreclr? 
(I think it was something for NoPIA on desktop, but I might be wrong about that)"
"Tagging subscribers to this area: @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

!! This PR is a copy of mono/mono#20832,  please do not edit or review it in this repo !!<br/>Do not automatically approve this PR:<br/><br/>* Consider how the changes affect configurations in this repo,<br/>* Check effects on files that are not mirrored,<br/>* Identify test cases that may be needed in this repo.<br/><br/>!! Merge the PR only after the original PR is merged !!<br/><hr/><br/>On a CEE_MONO_ICALL set to **mono_threads_detach_coop** (from native to managed), the profile code is always emitted without a return value, since it's not at a ret. This means it's never set, even if there actually is a return type (other than TYPE_VOID). When tracing, it's assumed that valid result types other than TYPE_VOID can be dereferenced, even though in this case no result has been set. This causes a null dereference fault.



<!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
-->


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>monojenkins</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-VM-meta-mono`, `mono-mirror`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Thanks Bruce for clarifying! It can easily be the case that it's just about wrong ordering of the steps in the <code>CLRTest.*.targets</code> scripts under <code>src\tests\Common</code> - if we make sure to run the ildasm - ilasm roundtrip before executing Crossgen2 (or Crossgen1, for that matter), I bet it would work just fine."
"> This is because we include the Unix/OpenSSL version of Interop.CryptoNative.cs which has the wrong library name.
> 
> I think we should rename the `CryptoNative` field to `AndroidCryptoNative` for all the DllImports to `AndroidCryptoNative_` functions to make these mistakes easier to catch.

That was one of my original approaches, but Android still uses several Interop files in the src/libraries/Common/src/Interop/Unix directory (Dllimports into `CryptoNative_`), which would require splitting those files into the src/libraries/Common/src/Interop/Android directory as well, thus creating duplicate files. Renaming `CryptoNative` is more efficient in that it takes advantage of shared entrypoint names but is definitely more ambiguous and harder to catch. I suppose in the long run it's better to make the split between Android and Unix more distinct? 

/cc @github "
"@github thanks, I pasted in the wrong output."
"@github 

Checking the API implementation, it looks the doc is wrong and this parameter is out parameter (at least with the flags we used). 

```
    // pwszLanguageBuffe -
    // [OUT]
    // NULL terminated string stores ISO-language of resource file located.
    // If the buffer is set to NULL, the function returns the required buffer size
    //      in  pcchLanguageBuffer parameter.
```

But your change wouldn't hurt anyway. So I am fine with the change. "
"BTW, I was wrong about:
> `setsymbolserver` requires absolute path in all cases.

It does work with relative paths, only the path in REPL appear different (I had some other issue at the time, couldn't reproduce it). Opened https://github.com/dotnet/diagnostics/pull/2633 with aligned messages (it is slightly more allocate-y, but not too different than setclrpath or other commands)."
"> I have thought that the packaging tools somehow extract the list of dependencies from the compiled binaries automatically when creating the package, but I guess I was wrong.

You are absolutely correct, actually. Tools like `rpmbuild` in particular, do a scan (I think just a plain old `ldd`) and add everything listed as an automatic dependency. It makes it much easier for the package manager (eg, `dnf`) at install time to then see that ""package X needs `libssl.so.1.1`"" and then install the OpenSSL package that provides the exact maching `libssl.so.1.1`, or otherwise error out at install time with a message about missing dependency. 

AIUI, Debian uses `Depends: {shlibs:Depends}` to implement a similar solution. Similar features for dependency-autogeneration or auto-detection exist in [ArchLinux](https://wiki.archlinux.org/title/Creating_packages#Checking_package_sanity) and even [Alpine](https://wiki.alpinelinux.org/wiki/APKBUILD_Reference#options).

IIRC, that was the primary motivation of my request for a build mode that would link everything dynamically (as in, visible to `ldd`) instead of searching for libs at runtime and using `dlopen`. I had just moved from another project (OpenJDK) where these missing automatic-dependencies would cause programs that would install but would fail at run time with all sorts of unexpected errors.

If we were to revisit this decision, I wonder about this bit that @github wrote:

> This felt like a reasonable mechanism to signify that. The main downside is the RID graph becomes crazy then for nuget and all the restore logic, but for a distro build of the SDK this didn't feel absurd.

Do we really need to couple ""link everything so it's visible to ldd"" with ""needs a new non-portable RID"". What if we used `linux-x64` as the RID, but avoided `dlopen` anyway?

---

Like mentioned by @github there's a separate knob for using the system foo library (eg, `libunwind`) instead of the copy embedded in .NET that distro packagers may or may not adjust."
"> In total more than 3 hours for PR validation, that's crazy :O

Seems this is the long-pole.

> CoreCLR Pri0 Runtime Tests Run windows arm64 checked
> Duration: 2h 41m 22s

https://dev.azure.com/dnceng/public/_build/results?buildId=1589294&view=logs&j=bb94f37e-a09b-5b51-09b2-ab78e7aa5103


"
"Categorizing fuzzer failures.

It seems Fuzzlyn is timing out pretty consistently on Linux ARM, and we have one failure there:
```
Found example with seed 16498413861848824582 that hits error
JIT assert failed:
Assertion failed 'inVarToRegMap[varIndex] == REG_STK' in 'S1:M50(int):long:this' during 'LSRA allocate' (IL size 4270)

File: /__w/1/s/src/coreclr/jit/lsra.cpp Line: 4050
```
That's pre-existing - seen [in an earlier run](https://dev.azure.com/dnceng/public/_build/results?buildId=1599668&view=logs&j=011e1ec8-6569-5e69-4f06-baf193d1351e&t=96d68eba-7198-517e-3083-eb7169f4ccb9) ([logs link](https://helix.dot.net/api/jobs/f1ea5d8a-329f-490a-93a5-087926001070/workitems/Partition3?api-version=2019-06-17)).

Antigen on different targets has quite a few ""uncategorized"" issues (guessing these are for ""wrong result"" cases?), but the only x86 failure looks like #64787, and is an inlining assert (that this backend-only change could not have caused, I suppose)."
"@github For your last commit ""Only pack designtools dlls on windows"", does that mean that the designtools DLLs will no longer be in the non-Windows TFMs of the NuGet packages? If so, then that's wrong because you can still target those TFMs in VS for Windows, can't you? At least that's what I saw when I debugged the DesignTools DLL you had given me to try. It was being loaded from the iOS TFM."
"> we don't want to require different base-classes of the renderer just to use a different dispatcher type

What's the use case for varying which dispatcher is used with which renderer?

I was thinking that tying these together was a benefit, as it's one fewer thing that can go wrong, and I couldn't think of any use case for the association not being known at compile-time."
"I'm not sure we need a StreamContext. What's wrong with just using ConnectionContext directly? ConnectionId can be derived from the StreamId, and if you really need the StreamId in isolation you could get it from the IStreamIdFeature."
Comment is wrong?
"Ok! To give you an idea of what the impact on gRPC would be:

If CompleteAsync isn't supported correctly, and the server doesn't send trailers to the client, there is a chance that gRPC calls that exceed the deadline timeout will fail with the wrong status code. I say chance because there is always a race between the client and server to report the exceeded deadline. If the client wins then the right status will be reported, if the server wins then the wrong status will be reported.

This wouldn't be disastrous to gRPC support on IIS for 5.0, but it would be a known issue that would have to be called out. And we'd want to try to fix it in the future."
"The XML comment for this type is out of date (it's still wrong in `dotnet/runtime` too).  I suggest just removing the XML comments from this file to prevent the proliferation of the incorrect comments. 😸 "
"This hack kinda sucks, but I couldn't think of anything better - @github @github @github any ideas?"
"Ah, i see what you mean.  Yes, an empty parameter list is wrong.  You shoudl synthesize one based on the types/names of hte delegate Invoke method."
"> > Updated the test and got it to pass.
> 
> What was I doing wrong before?

I'm not sure. Might have been the rebase. I improved how features are resolved between streams and the connection in it."
"you mean don't have default service but all uses ServiceLayer.Host? feels like we are removing all nice layer separation we used to have.. 

by the way, what is wrong is the way it is doing now? I am not testing global operation service in my test.

...

not sure what [PartNotDiscoverable] is. if it is something I need to use, let me know where I need to use."
"cyrus is a language expert so anything language related, he will be good person to listen to.

but that being said, as long as it won't crash VS, I am fine. if it doesn't offer a fix in a certain case or offer a wrong one, we can fix that bug when it is discovered."
"Actually, i'm slightly wrong here.  Roslyn goes the *inverse* route.  It hardcodes the list of *non* commit characters.  That list is exactly:

```c#
            return char.IsLetter(args.TypedChar)
                || char.IsNumber(args.TypedChar)
                || args.TypedChar == '_';
```

So the right way to implement ths is to do:

```c#
            return !char.IsLetter(args.TypedChar)
                && !char.IsNumber(args.TypedChar)
                && args.TypedChar != '_';
``` #Resolved"
📝 A few here seemed to sneak into the wrong commit
"Yes, and the condition below is wrong way.  #Resolved"
"I meant the second setting to zero, I am sorry for putting the comment at a wrong line."
"@github do you think you could could cast your expert eye over the approach these tests take? They basically use the MSBuild apis to do an in-proc build of the test project and check the state of various collections after executing.

They stub out `WriteLinesToFile` (the only place we touch the disk in the targets we're testing here) so that they should be side effect free. 

Ideally i'd like to expand our testing of other targets to do something similar, so want to make sure this isn't a _totally_ crazy idea."
"> I am just trying to understand why the code is written this way here. Could you, please, help me out with that?

The compat council's decision means that we do not emit methodimpl in the ambiguous scenarios unless supported by the runtime. That is the *true* branch of the conditional. The false branch of the conditional simply checks if the runtime's unambiguous override candidate is the same as the language one. Methodimpl works on all runtimes for that scenario as far as I know.

> At first, the logic feels wrong because we might not emit a MethodImpl for true covariant return case with ambiguous runtime override. 

We only support covariant returns when targeting a platform that supports covariant returns. I don't think that needs additional documentation.

> On the other hand, could this negatively affect retargeting scenario when covariant returns involved?

This code is only when emitting the source method, and for the metadata properties of a source method. I don't think it can affect the properties of a retargeting method (which mirror the same metadata properties that would arise on the underlying method if emitted).
I don't think we intend to support retargeting a method that uses covariant returns to a runtime that does not support them. I don't think any small adjustment here could make that work.


---
In reply to: [446444174](https://github.com/dotnet/roslyn/pull/44025#discussion_r446444174) [](ancestors = 446444174,446418702,446416546,446413877,446358005,446321935)"
"nope, wrong line. we can't `out var` here as the variable is already defined in the scope

the error are on line 79 and 81"
"Yep, also changed some wrong obsolete messages: referencing unselected vs selected"
"> Does it really worth?

I think so. Without any checks there can be scary effects like described in #41146. Even with wrong user code that should not happen.

I was thinking about try/catch. But it won't work for all cases (e.g. assign null to non-nullable value-typed member) where the non-emitting reflection code doesn't throw but silently changes null to default(T) - but maybe that's desirable?. It would be difficult to get the right exceptions because reflection code and emitted code throw different exceptions.   "
"Yeah, crazy, right? That's because there is no `AppCompat.LabelRenderer` and `AppCompat.ImageRenderer`. Those are still using the legacy legacy renderers (Pre-AppCompat), and those are registered in the forwarders via attribute.

This isn't confusing at all. 🤦‍♀️ "
"Yup. I couldn't see a good way of making the behavior match. I don't think there's anything wrong with fetching an AssemblyName, so I don't think that should throw, but since the AssemblyName doesn't have a pointer back to the Assembly there's no way to hook just the CodeBase API, aside from doing something drastic like subclassing AssemblyName just for this scenario.

Open to alternatives though."
"We're both wrong :)

The problem is that the header/footer views aren't being added as children of the CollectionView, so they aren't getting the BindingContext from the CollectionView, or the FlowDirection, or Visual. So AddLogicalChild is what we're looking for."
don't go too crazy with this -- some of these things generate temporaries and we don't want to capture references to those. Those should not have the & if we can help it.
What was wrong with foreach?
"Actually I‘m totally wrong about the 0 byte!
Since fmt expects an iterator I’m sure it doesn’t manually append a 0 byte at the end but rather let’s this be done by the container (for instance std::string).
So your code was actually just fine! 😅"
"> We do have the ability to service the ref pack this year as work was done to support that, but I think it is a little overkill for this unless we think is critical. cc: @github

Ah, OK; thanks.

> I always thought the plan of record was to ship the ""sidecar"" annotation information in the analyzer itself, in the cases where we got the attributes wrong in the ref pack.

Yeah, that was the plan if we needed to invoke it. Neither servicing approach would be justified unless we have evidence this is causing customer pain though."
The trailing brace is wrong.
This may cause an issue when you restore your window on the wrong DPI screen; worth worrying about?
weird!  on phone it looked wrong.  :)
"More specifically, was the code wrong/not ideal before this PR?"
"I don't think this new behavior is wrong, is it? It's only asking for a positive/negative number but it doesn't ask us to clamp it to +/-1."
"I was really hoping the substitute for [`\`](https://codepoints.net/U+005C) (0x5c) was going to be [`⧵`](https://codepoints.net/U+29F5) or [`⧹`](https://codepoints.net/U+29F9), but it turns out it's [``](https://codepoints.net/U+F05C) (0xf05c), a private-use character. I like the alignment of the low-byte being the same.

It's a shame Windows Explorer doesn't appear to know how to render that character. I'm not sure how it _could_ but even so. (Edit: ~~perhaps I'm being dumb, and the middle-dot _is_ a rendering for this character. I had assumed it was a 'unknown character' marker...~~ Other random PUA characters render the same.)

What happens if you use the character `` in a filename inside WSL? ^_^

Edit: I tested this, because I was curious. It's ending up at `\` on disk, i.e. the characters `\` and `` in WSL2 both end up as `\` on-disk under `/mnt/c/` (i.e. via the mount from Windows), and in Windows all are shown as as ``. On the Windows side, only `` can be used, and it appears back as `\` on the WSL side. On the Linux-local filesystem, `\` and `` are separate files, but _both_ appear as `` when accessed through the `\\wsl$` UNC path in Windows Explorer. At that point, things go a little weird (renaming a file or folder with `` reports ""file is too big for the disk""), so probably avoid using literal `` inside WSL."
"@github Correct me if I am wrong - on non macos-arm64 `TYP_SIMD12` is going to take 16 bytes on the stack and the JIT uses `str Qd, [Xn]` instruction"
I think `iossim` would work (or similar). Please note that `iossimulator-10.x86` is also wrong. The pattern should be `iossimulator.10-x86` (maybe it was just a typo).
"@github: good question! Yep, this could be made smarter. A case where you have a Solution snapshot, and keep forking it with alternate edits to A.cs and B.cs won't consolidate those together with this, even though the earlier replacements don't really matter. There's some icky edge cases though more generally with how the code works. Consider a case where the user does the following changes, forking a Solution each time.

1. Replaces the contents of A.cs.
2. Removes A.cs.
3. Adds A.cs back with the same document ID.
4. Replaces the contents of A.cs again.

(Is this sense of operations sensical? No. Which probably means there's code out there that does it. 😄 )

Clearly the change in step 1 doesn't matter, however when we run the translation action for the second step, it's implemented as ""remove the syntax tree that should be there for A.cs"", but if step 1 doesn't run, it'd be the wrong tree. A smarter algorithm would probably be ""we can merge any two TouchDocumentActions as long as we don't move them across any other action"", but I'd want to see a case where that mattered before we wrote the fancier code and tests."
"This looks wrong, if you have `foo.dll`, the pdb is `foo.pdb`, not `foo.dll.pdb` (this is a change from mdb, where `foo.dll.mdb` existed)."
Wrong indentation.
"I was going for having the name of the file to indicate build configuration inclusion as opposed to actual contents of it, which is what we've done in the rest of the repo for similar file exclusions/inclusions. That said, if you feel strongly about the name being wrong then I can rename it."
"copy/paste is bad
except when it spot something already wrong"
"this is the API for the navto index.  it was in the wrong location. "
">(int x1, (x1, int x2), x2) = (1, (2, 3), 4); [](http://example.com/codeflow?start=8&length=44)

I see nothing wrong in this code and it looks like it is working as I would expect it to work."
wrong indentation
"The comments in this file are now gone... except for the copyright header, which is now here. Seems wrong?"
"> as additional pre-requiresites you need to build objwriter out of that repo and replace the file in the output.

FWIW, replacing files in all the right places is overwhelming, and after spending enough time playing trial and error with msbuild verbose logs, it still didn't work for me (i.e. nuget cache was hit or wrong bin folder got picked up during one of the build/pack step and ended up testing the [wrong binary](https://github.com/dotnet/runtime/issues/67232#issuecomment-1090036551)). Not an msbuild expert ™️ so I might have missed something if it is supposed to just work that way (with reasonable number of steps). 😅

To unblock myself, I ended up with somewhat of a hammer solution, i.e. clear all kinds of local package caches, add local folder in nuget.config etc. using the following zsh script (`~/projects/customaot.sh`) on osx-arm64 (which takes about 15 minutes on M1 mac to build the whole toolchain E2E and compile a simple hello world app with that custom built toolchain):

```zsh
#!/usr/bin/env zsh

set +e

# ~/update-daily-dotnet7.sh

alias dotnet7=~/.dotnet7/dotnet

# Created a hello world app with dotnet7 new console -o ~/projects/naot1, with
# NuGet.config containing .NET 7 preview sources.
#
# Next:
# 1. in ~/projects/runtime:
#     * ./NuGet.config: add this line (with your username) after <clear /> line:
#       <add key=""foo"" value=""/Users/am11/projects/llvm-project/artifacts/packages/Release/Shipping"" />
#     * ./eng/Version.Details.xml: change version in
#         <Dependency Name=""runtime.osx.11.0-arm64.Microsoft.NETCore.Runtime.ObjWriter""...
#          line to 1.0.0-dev
#     * ./eng/Versions.props: change version in
#        <runtimeosx110arm64MicrosoftNETCoreRuntimeObjWriterVersion>...
#        line to 1.0.0-dev

dotnet7 nuget locals all --clear # clear *all* nuget caches
~/projects/llvm-project/build.sh --restore --build --pack --arch arm64 --configuration Release

# 2. in ~/projects/nativeaot1:
#    * ./NuGet.config: add this line key:
#      <add key=""foo"" value=""/Users/am11/projects/runtime/artifacts/packages/Release/Shipping"" />
#    * ./naot.csproj: update ILCompiler package version to 7.0.0-dev

cd ~/projects/runtime
rm -rf artifacts
./build.sh -c Release # I know we can handpick the subsets, but .. for reasons ..
                      # I gave up and ended up building all the default subsets

cd ../naot1 # existing hello-world app with reference to ILCompiler 7.0.0-dev package
rm -rf obj bin
dotnet7 nuget locals all --clear # clear again, so there is no doubt that no cache was hit

# verbosityArg=""-v:diag""
dotnet7 publish --use-current-runtime $verbosityArg | tee dump
```

avg. runtime of this script on M1 Pro is 15 minutes.

I am sure there are ways to optimize it (i.e. by replacing files as the doc is suggesting). If you know how, please share. It will be a huge time saver.

cc @github, this is how I opened the door. For #68257 you would probably only need step `2.` from the script (if you are not building custom objwriter; in addition to custom ilc). 🙂"
"I have been assuming (correct me if I'm wrong) that Jenkins shuts down the entire build process (anything spawned by `netci.groovy`, which in this case would be `cibuild.cmd`, and its descendants: MSBuild, PowerShell, ProcessWatchdog, RunTests.exe, and so on down the line).

If we didn't have this value, then when the Jenkins time limit expired, ProcessWatchdog would die, never having had a chance to obtain memory dumps or take a screen shot.
"
"Are there other kinds of aliases we might have to manually follow the same way as `import =`? This seems like a *slightly* odd place to manually get ExportEquals out of the exports, although I could be wrong."
"EDIT: the suggestion below is wrong and was based on wrong assumptions. After some more analysis I have proposed a better solution here - https://github.com/arcanis/TypeScript/pull/10

## Note - information below is false and I am only keeping it for history.

@github - This function is causing tsconfig references to fail to load right now in yarn `3.0.0`. pnpApi always seems to return the project root when `path` is absolute and lies within the `workspace:.` path. This is causing tsconfig.json files with referenced config json files within the workspace, to be invalid, only in tsserver somehow.

I tried and succeeded in fixing this issue locally by unplugging typescript and making a slight modification to this function -

```ts
const getPnpPath = (path: string) => {
    if (pathIsAbsolute(path)) return path; // intended compiled code - `if (ts.pathIsAbsolute(path)) return path;`
    try {
        const targetLocator = pnpApi.findPackageLocator(`${path}/`);
        return pnpApi.resolveToUnqualified(targetLocator.name, `${basePath}/`);
    } catch {
        // something went wrong with the resolution, try not to fail
        return path;
    }
};
```

please consider making this change or add a better solution for this issue

Thanks."
This comment was wrong before. The *new* code implements this.
">  methods seem to start using the highest stack values first, whereas current am clearing the highest values last

Might have been wrong about this; looking at another method, not sure if there is an order of use"
"Hi @github, I might have given you a wrong impression by calling it a workaround. The CLR environment variables are not really a *hack*, they are explicitly supported all over our eng/native, i.e. `CLR_CC=/path/my/fav/compiler  ./build.sh` is a supported feature. It was just me being  super pedantic to clean 4 lines in YAML."
"I don't have that much experience with using modules, but I get the impression that the plain name is more common than the relative path. I admit I could be wrong though.
"
"I think I’m convinced that any refactored code that comes from a two-argument then is either going to be ugly, wrong, or both. I’m going to open a new PR disabling the refactor for two-argument thens."
On its own this change is basically wrong (as the file won't be there) - this needs to be coupled with https://github.com/dotnet/runtime/pull/42435.
"Random question @github: When Ryan and I were debugging this we could see the source generated documents in the analyzers tree in Solution Explorer. It didn't click at the time, but that was probably the sign that things were wrong, because that is unexpected, correct? And if so, does this fix remove them again?"
"@github looks like something went wrong while running the tests. I can't really gather from the logs what exactly went wrong. Could you take a brief look/rerun the tests? 🙂 "
"Hi  @github, @github, @github,

I created a PR that seem to fix this error.

The problem (paste again below) ...

```
type KeyOf<T> = T extends unknown ? keyof T : never;
type Wrong<T> = { [K in KeyOf<T>]: T[K] }
//                                 ^^^^ `K` should not be allowed to index `T`
```

... seems to be that in `structuredTypeRelatedTo` [(`checker.ts` L19684-L19691)](https://github.com/bentongxyz/typescript/blob/e56a06780141c8ff75f24506572dc35d26d49391/src/compiler/checker.ts#L19684-L19691), `KeyOf<T>` is found to be related to `T`, because `keyof T` inside `T extends unknown ? keyof T : never` returns `IndexType`.

It seems to be a legit operation if e.g. `T extends **object** ? keyof T : never` instead of `T extends [some union]/ unknown ? keyof T : never`.

So my working solution is to guard against return `IndexType` if the above conditions are met.

I place the logic at `getTrueTypeFromConditionalType`.

However, I am quite new to this and I am not quite sure:

1. that `getTrueTypeFromConditionalType` is the right place to place the logic; and
2. what is the right type to return in place of `IndexType` (I am returning `UnknownType`)

Please do give me a few pointers whether I am approaching this correctly.

Please do correct me if I am wrong!

Thank you for reviewing!"
"No, if you have more than one local variable all of them will be wrong:
like the 0 -> would take the real 0 positioned -> should take the 1 positioned.
like the 1 -> would take the real 1 positioned -> should take the 2 positioned.

It doesn't happen in all methods. I have tested in a lot of cases and couldn't reproduce, but today I found a code attached https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1366070/ and could reproduce.

The code sample with variable `view` showing wrong value.
```
set
            {
                someValue = value;
                count++;

                if (count == 10)
                {
#if __ANDROID__
                    var view = Handler.NativeView as Android.Views.View;

                    if (view != null)
                    {

                    } // Add your break point here and you'll see the value of view is ""true""
#endif
                }

                SomeValue = count;
            }
```"
"> ### Testing
> Minimal

😄  ... do we have enough testing? what could go wrong? have we tested this locally? 
cc @github "
Correct me if I'm wrong but we never use scales bigger than `OPSZ8` so two bits are enough
"> Well... that path would be the only one that works if you have a non-exportable key stored in a keychain. Since we don't expose the Apple interop types as public API the only way to get one of those is from GetECDsaPrivateKey(). (Which, basically limits the scenario to ""I want to renew/regen a cert with the same key"", I suppose)

I had the same line of thinking and went back and forth with striking the option from the list :-) Eventually I left it there to paint the full picture so someone without sleep deprivation can re-read it...

> Thanks for the workaround code. I don't like duplicating the logic of the ""internal representation"" of Apple EC keys, but I think I see a path forward from that.

Not a big fan of it myself but I wanted to unblock the PR.

I've tried to implement other options from the list but they were quite a big mess. The iOS-style keys only support X.963 format export, the legacy `SecItemExport` API doesn't work for them at all. That basically ruled out handling the situation in native code because it would get too complex. So next best thing is handling it in the managed part of the code and taking different path for iOS-style keys and the CSSM ones. The key type can be inferred by calling `SecKeyCopyExternalRepresentation`, fails for CSSM keys and succeeds for iOS-style ones. It's a relatively cheap call that just copies an array but it felt wrong to just throw away the array."
"I removed one `UnconditionalSuppressMessage` and added `#pragma warning disable IL2026` in the places where the build raises IL2026, but building the libraries with the build.cmd script still raises the warnings. Am I doing something wrong here?"
"It seems the implementation just adds the lifecycle callbacks like we do and the events are for activities not the app: https://github.com/androidx/androidx/blob/androidx-main/lifecycle/lifecycle-process/src/main/java/androidx/lifecycle/ProcessLifecycleOwner.java

Maybe I am reading it wrong? Can't see any application events."
"I was wrong. Taylor: 1 Ajay: 0 😄 "
"> Use a more specific CSS selector to prevent it.

I don't think this is correct. The behavior of `WaitAssertCore` is to keep trying the assertion until it passes (until some timeout). Using a more specific selector won't change this, because it would have kept retrying anyway if the assertion failed. Or am I missing something?

I'm not saying your change is wrong; I'm just saying that there must be some other cause for any flakiness here."
"> Do we really think there are many (any?) folks newing up this middleware class themselves?

No.

> That said, generally speaking we should lean to remaining compatible for all changes unless we have good reason not to.

We may have to live with this one. Adding another constructor results in the system picking the ""wrong"" one. I think the risk is small enough to warrant it. I'm investigating anyways."
"Could you clarify why we're distinguishing `assembly` from `dynamicAssembly` as far as the `loadBootResource` contract is concerned?

I'm worried that this will give people more opportunities to get things wrong by not realising that both `assembly` and `dynamicAssembly` exist. Could we use `assembly` for both of these cases?"
"It's possible I'm wrong, but I *think* that the `key` attributes won't be necessary here. Your use of `OpenRegion` on line 82 means that nothing within it can interfere with what's outside it for the purposes of diffing, so we can be sure of matching up and preserving the spacers anyway.

If I'm right about that, it's marginally preferable not to use `key` because then the diffing system doesn't have to build a dictionary of keys on each diff. Not a big deal at all, just a very minor suggestion!"
"After consideration, I think we should not name the new option after the package version number, because:

1. This is going in a patch, so the version would be something like `RoutingBehavior_5_0_1` which is ridiculously ugly to put in the default template
2. We can’t really use a name like `Current` because theoretically there could be an even newer incompatible version in the future

My proposal here of calling it `PreferExactMatches` has the benefits:

* It doesn't look particularly unpleasant in the default template. It sounds like a good thing, which it is.
* Even after we retire the option in 6.0 and remove it from intellisense, we can continue to allow people to pass  `PreferExactMatches=""true""` (that just becomes a no-op, whereas `PreferExactMatches=""false""` becomes an error). It doesn't make anyone's code look wrong to have this still in it, plus it doesn't imply the person *only* wants 5.0.1 behaviors and not newer ones
* If we ever need to fork the logic again, we can use the same pattern of naming the new option after its own behavior, and that's independent of this."
"I don't think so. Is there a reason to prevent internal code from using this constructor? Could they do something wrong? Is there a risk of misuse? It feels like the answer to all these questions is ""no"". "
"> The indentation is always correct at 4 spaces (the only real exception in C# code is LINQ queries). Others are occasionally acceptable as well, but 4 spaces is never wrong.

Indentation of subexpressions within parenthesized expressions should align.  Otherwise you end up with code that is **super** confusing.  Is the subsequent boolean clause a sibling of the first preceding clause?  Or is it a sibling of a nested clause?  i.e.  when i see:

```c#
if (!(a...
    && b
```

my brain immediately starts pulling this apart as   ```!(a...```  as one clause and ```b``` as hte other. Alignment across lines is *very* often used to indicate structural association.  

But that's not hte case here.  ```&& b``` is associated with ```a``` and the ```!``` affects all of it. 

This is one of hte reasons i often push on people to not create overly complex boolean expressions as they end up hard to parse and hard to maintain over time.  To me, i would prefer something like:

```c#
if (!(n is ...
      id...)
```

Or, alternatively, just do:

```c#
var identifierNameMatches = n is IdentifierNameSyntax id && id.Identifier.ValueText.Equals(identifier.ValueText);
if (!identifierNameMatches)
{
...
```"
(my worry is this is actually wrong: IsInDirective would probably need to see structured trivia since directives tend to be structured...) #Resolved
you are calling a method called GetCodeActionAsync.  But this method doesn't return  Task.  Something is wrong here (likely this method should not end with Async).
"dumb question.  why do we need this guy?  it even says you should be able to ask `""Workspace.CanApplyChange(ApplyChangesKind)""`"
"this looks wrong.  not properly picking up ""empty token"" for some reason.  will investigate."
"I thought about it again and realized that I didn't do a detailed explaination for the tokenization idea, sorry for that.

The reason that we can use `isCheapToTokenize` to reduce the time is there are always tokens generated for the viewport (introduced by Alex's recent changes). Whenever we open a file, scroll to some pages, we will tokenize the viewport based on some heuristics. It doesn't mean they are 100% correct, but almost. So if the viewport is cheap to tokenize, then we force tokenize them. If not, we don't do anything, just read the tokens by `getLineTokens`.
 
`isCheapToTokenize` is `false` in following two major cases

1. if the previous line of a position is not tokenized or invalid (for example, it has dirty changes)
2. if current line is really long

So say you debug into a new file, the editor tokenizes the viewport internally (99.9% correct), and then start a full document tokenization in the background. If now you ask the editor if the viewport is cheap to tokenize or not, it depends on how fast the background tokenization runs.

Since we are only fetching `word` information here, there are fewer chances that the tokens are siganificantly wrong. I'd like to propose

* Check if the `visibleRange.startLineNumber` is easy to tokenize or not
* If so, tokenize the viewport only. (We don't need to `tokenizeCompleteDocument` as there is already a background job for that)
* If not, just read the tokens, they are very unlikely to be wrong, for word information"
"It's not obvious to me that anything is wrong with this will message. I.e. I don't think it's the goal of a parse error to enumerate all potential legal follow-up tokens/nodes. "
"this seems wrong for vb. it has similar issues.  i.e.:

```
dim x = Callee();

Function Callee() As Predicate(Of String)
      return Func(s) ...
```
"
"Here's a command to fix your PR:

```
 git rebase --onto origin/main lramos15/editorServiceOpenWith
```

then `git push --force`

Sometimes before I do a rebase, I run something like `git checkout -b tmp`, then `git checkout <original branch>`. This ensures that if I do the rebase wrong, all my original commits will still exist in the `tmp` branch.

Read the `git help rebase` section on rebase for changing the branch that the ""topic"" branch is based off, from ""next"" to ""master"". I have to check that every time to get the rebase arguments right."
"*deleted*

I found out, what I did wrong. It should be correct, now."
"dumb question: what happens if we just _always_ have this set as `HorizontalAlignment=""Left""`?"
"Hello @github,
please correct me, if i undestood you wrong, but you can see the value in the entry or not?

If I would add a label, that will also bind to the decimal in from the ViewModel the conversion would be the same of the entry.
Or do you mean this as a static string value for the initial value?"
"```suggestion
winrt::com_ptr<winrt::Microsoft::Terminal::Settings::Model::implementation::Profile> CreateDynamicProfile(const std::wstring_view& source, const std::wstring_view& name);
```

(feel free to say no) While you're here, can we rename this to _not_ use the word ""default""? We use it in so many places for different things and it's starting to get a little crazy/confusing:
| current name | what we should try and call it for our own sanity |
|--|--|
| profiles.defaults | base layer |
| default profile | default profile |
| `CreateDefaultProfile()` | `CreateDynamicProfile()`? `CreateStandardProfile()`? `CreateProfile()`? |

"
"I flipped a coin to see if anyone would nit on this. Turns out I was wrong 🤣 "
"Yeah, this looks wrong. Let's file another issue.

---
In reply to: [553091837](https://github.com/dotnet/roslyn/pull/50270#discussion_r553091837) [](ancestors = 553091837)"
order of parameter seems in wrong order?
"Either the code should be restored, or deleted, but not commented out (at least, not without a comment of why code just like this is obvious, but wrong, here)."
"```csharp
    static void Main()
    {
        Action a = [||]() => {
            Console.WriteLine();
        };
    }
```

EDIT: Copied wrong test"
"Does that build not use this field at all? I can look at the code later, but is making this non-nullable actually wrong for objects built with those ctors?"
"`runtimeDisplayName` feels like the wrong name to me, I'd rather call it something like `testConfig` which could be mono-interpreter, mono-fullaot, mono-..."
"Any benefit to checking IsEmpty on the queue and only scheduling if it's not empty? Or we expect the common case will be that more work is available, and if it isn't the overhead of the extra work item won't matter? IsEmpty isn't free, so there's a trade-off; using it might be the wrong one."
"Hmm.  This change and the others like it in this file is actually losing information.  Previously the developer would get an exception like:
```
The Query string supplied was invalid or improperly formed
Param name: select
```
and they'd be more easily able to debug what went wrong.  With this change, the specific aspect of what failed is going to be lost.

If we want to change this to `nameof(query)` (which is fine), I think we should also update the exception message text to have a placeholder, and format the existing parameter name into it, e.g.
```C#
throw new ArgumentException(SR.Format(SR.InvalidQuery, ""select""), nameof(query));
```"
">// Wrong accessiblity [](start = 4, length = 21)

What is wrong with accessibility here? #Closed"
"> What problem are you trying to solve?

To undo any changes running inline has on the sync context.

> Would that opaque struct help with the ASP.NET use case in some way?

It would help with `MRVTSC` because it wouldn't need to mess with sync context directly.

It wouldn't help with ASP.NET because it doesn't care about the return value (it's one way, just trying to restore single previously captured context) or the sync context.

Whereas `MRVTSC` does operate as a stack; restore captured context, do work, restore current context.

ASP.NET is more: do work, restore context (because I don't trust the work to guard asynclocal changes inside `await`s); i.e. restore clean context at end of request loop ready for next request (and there are two examples of it going wrong this way dotnet/aspnetcore#15384 and dotnet/aspnetcore#13991)

The current ASP.NET solution is to move the 3 user calls out behind a new `async` method and let `AsyncMethodBuilderCore.Start<TStateMachine>` handle returning the ExecutionContext back to default.

However, that both introduces a new async statemachine and an extra allocation if any of the methods suspend and its a bit heavyweight just to reset the EC. 

So next thought would be to guard them with `EC.Run`; but then what Task to return and await, since there are 3 of them; if they all complete sync, then can in some way return a CompletedTask; but that's complicated since its callback based (e.g. via the `ref` param); but if one goes async other than the very last one, suddenly it becomes complicated; etc.

If there is a `EC.Restore` on the other hand, can just inline all the awaits into the single method; and don't need an extra startmachine to handle resetting the EC at end of request and don't allocate anything extra if they suspend (since the loop statemachine is already allocated as it likely suspends between requests waiting for the next one)


"
"Here's a concern: should not being able to deserialize a single key binding blast the entire profiles into outer space? even with an error message, that sucks"
"So, here's the thought. We're not yet ready to support multiple ""connection types,"" and I don't want us to start something and then start on the wrong foot; this is a stopgap, yes, but perhaps it's good enough to stop us from misdesigning the early extensibility model."
Seems like wrong version
"i don't have an answer for that, that's why i i went with a more cautious approach here.  For example, this should always succeed given the lack of a top-levle-version-change.  however:

1. say someone doesn't do the top-level-version check.  they could call this and blowup.
2. say something is wrong with the top-level-logic and the shape of the parse tree doesn't follow invaraints we think should hold.

Effectively, there are a few too many tenuous pieces here for me to feel solidly that this is 100% safe.  So, i err'ed on the side of caution here."
this seems wrong.  you're passing in changedDocuments instead of changedAnalyzerConfigDocuments (same issue below).  This feels untested as i would have thought this just wouldn't work.  and/or would crash.
"I think I've figured out where's it's going wrong, We're resetting the iterator and target here every time we render a section of the line. So when there are multiple sections, only the first part gets rendered correctly. The only way I can see this working is if we do the entire grid rendering in one go outside the main while loop. But that means you lose the non-widechar optimization, unless you can calculate that up front somehow."
"Is this going to lead to wrong behavior upstream?

When testing this I noticed this is called from `DisposeSwipeItems`

So the ISwipeViewController that's associated with this renderers keeps the ""IsOpen"" value set to true.

Is that ok? Does the dispose need to happen in a different order so that IsOpen correctly propagates to SwipeView?


![image](https://user-images.githubusercontent.com/5375137/83575730-6c55fb00-a4ed-11ea-9ffb-0023ca64e763.png)
"
"This is a bit of a dumb nit, but can we rename this tag to `BaseLayer` or `ProfilesDefaults`? We've slowly been using ""base layer"", ""profiles.defaults"", and ""userDefaults"" (sometimes even ""profile globals"" offline, but that one I think we've all shut down one time or another haha) interchangeably. I'd like to try and consolidate this language more towards ""base layer"" since that seems to be the one we're sticking to more now."
">HasParamsParameter [](start = 41, length = 18)

This looks wrong. This helper doesn't perform the check consistent with OverloadResolution.IsValidParams. It also looks like all other usages have the same problem, possibly with exception of ExplicitInterfaceHelpers because they only affect diagnostics in a very restricted scenario. I think we should open an issue to clean all this up, but here we should do the right thing. #Closed"
"Maybe I'm not understanding how the inheritable settings are supposed to work. The issue I was seeing is that when later trying to get the `AppliedColorScheme` in Pane, it would always return the one originally set when the pane was created, or if it was changed just null. Is there maybe something wrong with my declaration in `TerminalSettings.h`?"
"e.g. even this seemed to go wrong (allowing a proc count set aside)
```csharp
ThreadPool.GetMinThreads(out int min, out _);
int max = Math.Max(1, Math.Max(min, ThreadPool.ThreadCount - Environment.ProcessorCount));
```"
"In this case, there is no support in the browser for client options other than sub protocol, so these options can never work (unless browsers add new features)
https://developer.mozilla.org/en-US/docs/Web/API/WebSocket

cc @github in case I'm wrong about the usage of `ActiveIssue` here."
"We've had a ton of problems with content dialogs in the past. We've got all sorts of hacks to apply the app theme to the dialogs, because they're technically not parented to the `App` (or something crazy like that). So I wouldn't worry _too_ much about that.

The Dialog not receiving input though - that's pretty bad. My gut is telling me that this is a XAML Islands bug, but I can't be sure. 

IMO the disabled ""delete \<foo>"" button being gray makes sense to me. That's pretty clearly ""not actionable"", especially when compared with the red one.

If the ""delete"" button is wired up to ""hide"" dynamic profiles, then let's do it. Otherwise, won't they just re-appear in the UI after saving? If that's the case, definitely disable the button. "
Here's a crazy thought: What if it _only_ worked with the system dispatcher queue? It should be trivial to move TermControl to that.
"<img width=""346"" alt=""awaiting approval from @github"" src=""https://user-images.githubusercontent.com/189190/163287201-5703c095-75f5-41c8-87a5-222c876010af.png"">


Bot is going crazy. I'll fix that.

@github forget everything i just told you"
"I have just noticed this #if has a wrong condition (event before your change). Since you are touching this code, could you please fix it? It should be 
```c++
#if (HAVE_GREGSET_T || HAVE___GREGSET_T) && !defined(HOST_S390X)
```
Actually, the related #endif comment need to be updated to match your change (and this fix) to
```c++
#endif // HAVE_GREGSET_T || HAVE___GREGSET_T || !HOST_S390X
```
"
"I was thinking the same when writing this but the refactor uncovered possible problems like these because if you look at the original:
1. `Logs` is passed to the ctor above on line 434
2. I was able to make `Logs` readonly inside `CrashReportSnapshot` because it is only assigned in ctor so it never changes
3. Then we read the value back here but it's the same `Logs` we pass in so I didn't change anything and we already do what you are saying. Or I am wrong somehow? 

Do you want me to create new `ILogs` and pass it in?"
"No, !IsSystem is what I want. This assert is verifying that either there are no duplicates or the type isn't from CoreLib. (It turns out that this check was subtly wrong, and didn't handle  classes correctly, so I've tweaked it also only be enabled for valuetypes in corelib.)"
You removed the wrong lines here... and that's why the build is failing.
can we just make this async? and push crazy waiting upwards?
"> This may be a dumb question, but why do we even need the second check? Can null ever be something other than null?

It's to test that this equality operator:

https://github.com/xamarin/xamarin-macios/blob/c20cbfe3012bd6d5bf0a5e1e15fcf985dc992e19/src/Foundation/NSUrl.cs#L107-L116

works when either `x` or `y` is null (so the first test verifies the operator works when `y` is null and `x` isn't, and the second test verifies the opposite).

BTW there are no such thing as dumb questions :smile:
"
"The original issue is about wrong `?.` used, but I think it is preferable to implement Youssef1313's suggestion here as well"
"BUT I LOOK AT THE SOURCE IN VI AND TWO SPACES ARE WRONG.

Pro tip: If you're losing an argument, use all caps. This helps convincing people.
"
"Is the resource version wrong then? "
This seems wrong - This method is `ResetAbort`.
"We can certainly consider it.  My intuition (which could be wrong, of course) is prefixes will be relatively short, in which case I'd want to favor minimal overhead over maximal throughput.  If there's a reasonably small implementation that's maintainable, minimal, and little overhead in the expected short cases while still providing benefit, I'd be game.

(If you're interested in vectorizing something, I'd personally be much more interested in seeing investment in https://github.com/dotnet/runtime/issues/67942.)"
"In theory, this can access uninitialized memory now.  The static analysis tools are likely to complain about it.

What was wrong with the `strlen` call that was here before?"
"So it is a real problem, we just work around it?  Great, not crazy (abotu that)
"
"👀 This surprised me but I can't come up with a reason why it's wrong to not flow the contextual types in, since you should never need to have a literal like that inside a spread position"
"`OnDataOrHeadersOrWindowUpdateSent` is implemented with an interlocked operation. I assume the perf impact is marginal compared to the buffer copying code above, but I may be wrong."
"don't say ""in the strict mode"".  that sounds wrong.
"
"> So for the single element versions of `vst1` and `vld1` intrinsics we never generate `ST1` and `LD1` on little-endian. There we always generate `str` and `ldr` since they provide more addressing modes.
> 
> e.g.
> 
> ```
> #include <arm_neon.h>
> 
> void foo (int32x4_t v, int32_t *a)
> {
>   return vst1q_s32 (a, v);
> }
> ```
> 
> will generate a `str q0, [x0]`
> 
> For big-endian we do generate the `ST1` and `LD1` though. This is not to say that this patch is wrong or needs changing. but just a headsup that you have less flexibility. and the single structure single reg intrinsics are the most common ones.

Interestingly, Visual C++ 2019 compiles the following functions
```c++
__declspec(noinline)
void foo(int32x4_t v, int32_t* a)
{
	return vst1q_s32(a, v);
}

__declspec(noinline)
void bar(int32x2_t v, int32_t* a)
{
	return vst1_s32(a, v);
}
```
into
```asm
?foo@@github__n128@@github@Z:
  0000000140001158: 4C007800  st1         {v0.4s},[x0]
  000000014000115C: D65F03C0  ret
?bar@@github__n64@@github@Z:
  0000000140001160: 0C007800  st1         {v0.2s},[x0]
  0000000140001164: D65F03C0  ret
```"
"Perhaps there is some configuration that would let us go through all the steps of the build while ultimately failing the leg/giving a distinct ""something's probably wrong"" status if warnings were produced in the build."
In general I like the change here. I left one comment regarding allow throwing when getting wrong size from the OS. other than that LGTM.
"I doubled checked the package was well formed and realized that all the dependencies for packages that we build in dotnet/runtime were `5.0.2`, which is wrong as we don't ship all packages. So that's why I needed to update more than just `libraries-packages` on the last commit. Now the package looks and restores fine. "
">Could you please describe what this fix tries to do and if we want it despite #46176?

#46176 didn't fix the SuperPMI issue.

The original change altered the behavior of the getUnmanagedCallConv API. Either the method handle or the callsig could be null. We were dereferencing the null pointer leading to a crash.

There was an additional copy/paste error where the wrong LWM map was being used."
"> I'm gonna go ahead and ask the dumb question: Why can't we _automatically_ derive the constraint of an inferred type binding from the constraint of the type being matched?

We do have automatic inference, and there are ways we can improve it. However, that still wouldn't solve the issue at hand. There are times where you need a more-specific type than what the inferred constraint might allow:

```ts
type X<T extends any[]> =
  T extends [infer U extends string, ...infer R] ? ... :
  T extends [infer U extends number, ...infer R] ? ... :
  ...;
```

Above, I might want to make branching decisions based on a more specific constraint. This also ties into #48094, which uses more specific inferences for `infer` in a template literal type to pull out numeric literals. "
"Maybe thing's have gotten better since I last tried in macOS world (or maybe I did a bunch of things wrong 😄 ) but the problem with ""data"" keys as I call them is they don't seem to work fully in place of keychain-backed keys. e.g. `CopyWithPrivateKey` on `X509Certificate2` I think was one place that I hit.

Oddly, if my recollection serves, ECDSA was more problematic than RSA."
"> @github @github I'm concerned about the failed test cases. Most of them are ""Assertion failed 'OperIsSimple()'"" .It might mean that the optimization is applied not only to the return statements. Do you have any ideas what went wrong ? :)

I am sure you just don't replace the node correctly, you indeed can start from doing it in morph.cpp first as it should be much easier to test and then we'll check the diffs"
"Regarding the continuous creation of `CurrentState`, this happens only when a shift happens from DFA to NFA mode, the intent was that this should not happen very often, but I may have been wrong here (which is why I did not think allowing `null` initializing them to `null` would make much difference)"
"Tagging subscribers to this area: @github/area-system-collections
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

The `public T Take();` method of the `BlockingCollection<T>` class doesn't throw `OperationCanceledException`.

The `public T Take(CancellationToken cancellationToken);` overload indeed throws this exception, but not when the collection is empty and has been marked as complete for adding.

The relevant [docs](https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.blockingcollection-1.take) are wrong too.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>theodorzoulias</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Collections`, `community-contribution`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"@github @github @github I need your feedback on an issue I am seeing in the test run regarding the change here. If we have the following code and running it without my changes:

```C#
            var attribute = new TimersDescriptionAttribute(null!); // passing null for description
            string s = null;
            try {s = attribute.Description; } catch (Exception e) { Console.WriteLine($""{e.Message}""); } // accessing attribute.Description first time throw argument null exception
            s = attribute.Description; // access it second time will not throw :-(
``` 

This is happening because of the code https://github.com/dotnet/runtime/blob/8e624b33465546e9d05da2afea5faea233d9f847/src/libraries/System.ComponentModel.TypeConverter/src/System/Timers/TimersDescriptionAttribute.cs#L40 We are calling `SR.Format(string)` which will call [internal static string Format(string resourceFormat, params object?[]? args)](https://github.com/dotnet/runtime/blob/8e624b33465546e9d05da2afea5faea233d9f847/src/libraries/Common/src/System/SR.cs#L78) passing empty args array and then later will throw when trying to format the string. 
With my changes, I removed the `SR.Format` as @github suggested and now we are not throwing it at all. Obviously, the current behavior is wrong. we have the following options:
- Throw in the attribute constructor when passing null parameter. This is the option I prefer. 
- Don't throw at all and allow `null` description. This is the behavior with current changes.
- Keep the current behavior which throw first time trying to access the description and never throw again.

What you think?"
@github how about implementing a reference counter? If I'm not wrong `Comet` has this implemented. If that's a simple implementation we can add this to .NET MAUI and call the `DisconnectHandler` when we don't have anymore references at all.
"You are wrong about both platforms part, in master it references only one platform https://github.com/aspnet/AspNetCore/blob/master/eng/targets/ResolveIisReferences.targets#L13. Output location can be changed by setting LinkBase."
"This doesn't look like the right footer. See this for example:

https://github.com/aspnet/AspNetCore/blob/5e62914cde1c0cbdc9837add6190241c722d4abc/src/ProjectTemplates/Web.ProjectTemplates/content/StarterWeb-CSharp/Views/Shared/_Layout.cshtml#L56

Is this wrong in other templates?"
"> We should only call StopTimingRead if we saw an actually-async read and therefore called StartTimingReadAsync

I was a wrong about this as you noted. What I should have said is we should only call StopTimingRead if we called StartTimingReadAsync. It doesn't matter whether or not it was actually async."
"I've looked at all the places where equals could be used, the only places that take user input are the DisconnectCircuitMiddleware and ConnectAsync inside the CircuitRegistry, in both cases we do validation of the ID first, so further uses of method are fine.

That said, I think in principle we should change this to use the hash of the circuit for a couple of important benefits:
* We always have a way of going from Secret to ID, which guarantees that a secret and its ID are always paired and there are never mismatches or can be easily detected. (The ID becomes a computed field). This allows us to log based on the ID in all circumstances.
  * No need to enable tracing in logging (which our customers are likely to get wrong and spam their logs with all traces for the server, for example Kestrel will log all the bytes coming in and out). As to do this selectively you would need to use a filter, which is somewhat advanced.
* It allows us to use the ID in all circumstances to do lookups and other operations and allows a safe implementation for Equals and GetHashCode in this type, as even if you are able to figure out the hash for a secret, you don't learn any information about the secret itself (Thanks to hashing being a one way function)."
"I put the logging before Abort and as you said I need to make some changes on DisconnectToken.

I used this code

```
CancellationTokenSource cts = new CancellationTokenSource();
string address;
using (Utilities.CreateHttpServer(out address, async httpContext =>
{
    httpContext.Response.Headers[""Content-length""] = "" 30 "";
    await httpContext.Response.Body.WriteAsync(new byte[10], 0, 10);
    cts.Cancel();
}))
{
    using (HttpClient client = new HttpClient())
    {
        await client.GetAsync(address, cts.Token);
    }
}
```
to hit the FlushInternal and check DisconnectToken. In this scenario if I skip this if statement 
https://github.com/aspnet/AspNetCore/blob/78b9b2e23e7709cef6659b11e7e0b266f7a1089f/src/Servers/HttpSys/src/RequestProcessing/RequestContext.cs#L55
I would get the correct cancellation token, but I couldn't figure out what condition I should add or remove from if statement, to make this work.

What I'm about to suggest is probably wrong since it changes the result on this test
https://github.com/aspnet/AspNetCore/blob/4a7bf75e89e3dfe7264a641ed041f50788d28d20/src/Servers/HttpSys/test/FunctionalTests/Listener/ServerTests.cs#L49
and may also have other consequences that I'm not aware of, but is it possible to swap `_disposed = true;` and  `FlushInternal(endOfRequest: true);`
https://github.com/aspnet/AspNetCore/blob/320c4b055656b88240cd198b2f40f1f5f0f4ccb3/src/Servers/HttpSys/src/RequestProcessing/ResponseBody.cs#L672-L673"
This looks **Just Wrong:tm:** because the named project has `<IsProjectReferenceProvider>false</IsProjectReferenceProvider>`
This looks wrong because it doesn't align with Baseline.xml
"> Instead of validating the contents of the cache when we download bits from the network, can we validate them when we load them from the cache?

That seems strictly worse to me. We're then doing the hash check on every load instead of only when the data was first acquired. We still have to do it on the first load when it comes from the network too (see below).

> It is very unlikely that you end up in a situation where the manifest doesn't reflect the contents of the server or that you can't trust the manifest (it's your app, you are serving it).

It will certainly happen sometimes. It's always possible during deployments that a user fetches `blazor.boot.json` from the old version of the site and some assemblies from the new version.

> Worst case scenario, your app is in the middle of a deployment and you got the wrong contents, the likely outcome is that your app will crash and the user will have to reload (this problem is orthogonal to what we are trying here)

Doesn't seem like an orthogonal problem to me. The scenario this code deals with is acquiring the resources and verifying they are the ones we want. I don't see any benefit in letting the app start up with the wrong resources, performing whatever undefined behavior this leads to for some period, and then hoping we can shut it down later and hope we get to run more logic to clean up the polluted cache.

> If you want to do this validation, then do it over the cached data the first time you load from cache and ""repair"" purge the entry from the dll once you detect that scenario.

I definitely think we should validate the data the first time it comes from the network, for the reasons mentioned above. And then having done that and cached it under a key derived from that hash, there's no purpose in revalidating it again later."
"Yes, it works. I just did the wrong thing. Will fix it tomorrow&hellip;"
wrong indent
"New exceptions are now thrown if you attempt to access services on the UI thread

```
Microsoft.VisualStudio.Threading.JoinableTaskContextException: An attempt to switch to the main thread failed to reach the expected thread. Was the JoinableTaskContext initialized on the wrong thread or with a SynchronizationContext whose Post method does not execute its delegate on the main thread?
   at Microsoft.VisualStudio.Threading.JoinableTaskFactory.MainThreadAwaiter.GetResult()
   at Microsoft.VisualStudio.Text.Outlining.OutliningManager.<SourceTextChangedAsync>d__20.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.<>c__DisplayClass41_0`1.<<RaiseEventOnBackgroundAsync>b__0>d.MoveNext()
```"
"Sorry. I pushed a bunch of commits to the wrong branch. This wasn't meant to be for this PR. "
"Determined by the caller. The one case in initial binding which still potentially passes `true` here though is when the nullable type is used explicitly in code. I assume, possibly wrong, that it should generate warnings in that case. 

---
In reply to: [257352693](https://github.com/dotnet/roslyn/pull/33336#discussion_r257352693) [](ancestors = 257352693)"
"> Do you know why it is that System.Runtime.dll and netstandard.dll are unifying here? Is there a type-forwarding situation going on?

Yes, this is type-forwarding. For netstandard from netframework (or even netcore) reference binaries are added to do type-forwarding so `netstandard.dll` types can resolve to the equivalent type. I had an easier time viewing this in netframework build outputs. One of the referenced files is `{VsInstallPath}\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\net461\lib\netstandard.dll` which contains all of the type forwarding. I'm not quite sure how it's done with netcore (I didn't look heavily), but I imagine there's something similar. 

> I guess my poitn is this. If we are considreing these symbols from different compilations equivalent (which seems to be how the compiler would view things), then we should update our helper to properly encode the right logic that makes it agree with what the compiler would think. I don't think that's necessarily IgnoreAssembliesInstance, however it might be something else.

This IS that something else. Is it just that it's not part of statics exposed by `SymbolEquivalenceComparer`? 

To me this is just swapping the wrong call to the right one. If the logic isn't in the right place, then I guess moving it would be okay? I don't feel strongly one way or another. 

I think `SymbolEquivalenceComparer` does the advertised thing and works in the expected way; you compare with a requirement for same assemblies or you compare without. I'd even be willing to move this code to calling it directly. Like I said, I just chose an example from something similar and went with it because it looked like `SymbolEquivalenceComparer` + some extra checks to ensure type forwarding is considered. "
"What is wrong with the approach for ""find the interface members implemented by a member""? Get all interfaces implemented by the current type and then try to match members in those interfaces for the current one.

interface I { void [|M|](); }
class C : I  { public virtual void [|M|]() {} }
class D : C  { public override void $$M() {} }

---
In reply to: [283974069](https://github.com/dotnet/roslyn/pull/35704#discussion_r283974069) [](ancestors = 283974069)"
">AssertSignatureHelpEquals [](start = 12, length = 25)

Seems a bit verbose to have to write all the Assert*Equal methods to validate the results. 
Sometimes it is easier to write an inspect method that formats the interesting properties of the objects to strings and then compare strings. 
E.g.: 

[https://github.com/tmat/roslyn/blob/EncManagerUpdateP2/src/EditorFeatures/Test/EditAndContinue/EditSessionActiveStatementsTests.cs#L278-L286](https://github.com/tmat/roslyn/blob/EncManagerUpdateP2/src/EditorFeatures/Test/EditAndContinue/EditSessionActiveStatementsTests.cs#L278-L286)

This makes it also easier to see what's wrong if the test fails."
"> This looks wrong. Editorconfig should override compilation-wide settings.

This was done to match current compiler logic. If you have a compilation-wide suppression entry for ~~any compiler warning OR~~ enabled by default analyzer diagnostic in ruleset or via /nowarn, and an explicit entry in editorconfig that is not ""none"", the diagnostic is not reported."
"Interesting.  I did notice in a different project yesterday that CA2007 was being flagged as warn as error.  Something seems wrong with the CI state of this PR /cc @github, only 9 checks."
"Using a TFM which targets a specific runtime versus netstandard is not the same thing as treating classlib and app the same way. As you note it was always possible to target classlib for a specific runtime, that's not the limitation. The limitation is that SDK simply doesn't officially support building SCD classlib projects. In a way even `dotnet publish` is sort of weird on a classlib (and has several really weird behaviors). All of this is mostly because nobody went and made sure that SDK has this scenario cleaned up. Introducing support for this in the hosting layer feels wrong if we don't have a good story how to build such a thing.

You're right that we might need to block one of the other supported delegates from this new scenario. But most of them should work. There's a separate question if we should support them there - as COM/WinRT/IJW should never run into the new scenario as those entry points will always go through the `hostfxr_initialize_for_runtime_config`. So maybe it would be better to block those cases (just to avoid having to support weird configurations into the future).

I don't think the block in `hostfxr_initialize_for_runtime_config` is artificial. Removing it is actually quite a bit of new work if we were to support comparable behavior to FDD. Currently this entry point ""promises"" to not load any application code into the default ALC (to avoid version collisions with potential future loaded components). If we were to maintain that promise we would have to implement the split between app/framework assemblies for SCD (per our other discussion - the `runtimepack` value) and split loading that way. On top of that we would have to support then loading what looks like an SCD component into a secondary load context - currently `AssemblyDependencyResolver` assumes that files next to the component being loaded (and mentioned in its `.deps.json`) are part of the component - but for SCD this would be true for the entire framework. So we would have also implement the support for recognizing framework assemblies in `AssemblyDependencyResolver` (this would be a good thing but still more work). I must also admit I'm a bit hesitant to go this way yet, as it would effectively mean splitting SCD into two halves and there might be small behavior differences which show up. Since this is not a primary scenario for us in .NET 5 (we don't have resources to put into this right now) I want to avoid opening too many new scenarios as there's always a bug tail to be fixed. I'm not against doing this in the future though.

Alternative would be to say that when used on SCD it populates the default ALC with the entire app. But then the usage of it would be quite different. Using the existing entry points which all load into secondary ALCs would be problematic due to potential duplication of assemblies (as mentioned in the doc already). And it would be rather confusing - calling the same function would rather significantly change behavior based on what is the input (not the parameters to the function). This would potentially open weird scenarios in COM/WinRT/IJW as all these entry points call the `hostfxr_initialize_for_runtime_config` and if given SCD-like input would get the new behavior and at the very least get confused."
i thought i found all these :)  must have something wrong with my analyzer :)
"This is wrong, no? I think if we have a `boolean` `readonly` property we have to respect that independent from the file system? Because someone might contribute a readonly file system where selected files are not readonly?"
"Please never call this if you are using XamlApplication, XamlApplication will do this for you.

There is a bug where if the order off calls into InitializeForCurrentThread/Close is not exactly right, we may end up not clearing the core or cleaning the core at the wrong time.
"
You are right. That was dumb of me.
"""getDisassemble"" sounds wrong because ""disassemble"" is a verb.
I suggest ""getDisassembledInstructions"""
what was wrong with this test ?
"This is implemented in somewhat the wrong order. Right now we...

1. Load defaults/profiles.list
2. Apply defaults/profiles.defaults
3. Apply user/profiles.defaults
4. Load user/profiles.list

when what we really want is to swap 1 and 2."
">CheckValue [](start = 35, length = 10)

Addition of this call here feels premature and inconsistent with how we deal with binding of a regular member access. Specifically, in case of ```TypeOrValueExpression```:
```
                    case BoundKind.TypeOrValueExpression:
                        {
                            // CheckValue call will occur in ReplaceTypeOrValueReceiver.
```  
It is quite possible that we are missing to call CheckValue at some point, but it feels like that should happen later in the pipeline. Addition of a new BindValueKind just to accommodate this call site feels suspicious and, for me, is one of the indicators of possibly doing work at wrong time/place. #Closed"
"Most editors overwrite a file when they save, which requires write sharing. Some (vim?) apparently *delete* an existing file first [1]. In Windows 10+, `DeleteFileW()` has been updated to try a POSIX delete. If the filesystem supports it, already open files can continue accessing the original file, even though it's unlinked from the directory. (NTFS renames the deleted file to the reserved directory ""\\$Extend\\$Deleted"".) If a POSIX delete isn't supported, the file is marked as deleted, but not unlinked, and the name is inaccessible for new opens until all handles for existing opens have been closed. In either case, existing opens have to share delete access. Otherwise `DeleteFileW()` will fail with a sharing violation.

---
[1] IMO, deleting the file is wrong. It discards all of the metadata -- not only create timestamp, attributes, extended attributes, alternate data streams, but also the security descriptor, including the owner, mandatory and discretionary permissions, integrity level, security attributes, and access auditing."
"this one seems wrong, yea?"
"OK, I've just tried with `DXGI_FORMAT_R8_UNORM` now and that appears to work fine. I have no idea what I was doing wrong before. I think I might have originally been using it as a render target, so maybe that was the difference. Anyway I'll update it now. Thanks for bringing that up."
"so this is technically a bit unclean, but *hopefully* not a problem.  THe main issue is that this makes attribute parsing context sensitive.  We generally like avoiding that as it makes incremental difficult.  Specifically, it means we couldn't jsut say ""ah, we can reuse the attributes from a previous parse that are available in this location"".

In your case, i think you're ok.  that's bacause you'll have one of the two cases:

1. the attribute decl is on a lambda before.  so it will have the feature diagnostic on it, so it will crumble if we try to reparse it.
2. the attribute decl is not on a lambda.  it is reused in ParseAttributeDecl, but we still add the diagnostic on afterwards.

This is subtle though and easy to get wrong.  in general, it can be preferable to just do the parse normally and have the caller (i.e. this method) do the check. "
Really? wasn't this inside the OpenTK dll? (I could be wrong)
@github Yes I saw it and fixed the issue. It was about the SCW (?) macro change being wrong which I then reverted.
">  Is it because the actual controls don't have a size yet? 

Exactly that. See for example, `Pane::PreCalculateAutoSplit`. During startup, none of the panes have actually been added to the UI tree yet, so they don't have `ActualHeight`/`ActualWidth`s yet. There's some work that we do to try and figure out where the actual positions of panes _will_ be, based off of how big the window is, and roughly how much the pane will take of that window. The math sucks there though, and I was too lazy to try and figure that our for `moveFocus` at this time 😋 "
"> This seems like it would have a significant hit on performance. I could have sworn ConEmu only applied the algorithm to the initial palette initialization, but this looks like it's adjusting the colors on every color lookup in the renderer.

That's a good question; I understood it to be at render time for them as well (otherwise, they need to compute each color's contrast on each background and determine whether to nudge that foreground _only_ on that background or nudge it generally... potentially having to resolve a recursive conflict with other colors?), but I may indeed be wrong.

EDIT: Also, perhaps, to improve the contrast of applications that use true color? I'm not sure whether that is a noble goal.

EDIT 2: However, it might be a noble goal _if_ we want to add a feature for High Contrast users to actually induce high contrast in otherwise intransigent applications. (EDIT 3: Which I do -- that is an accessibility feature that could help people quite a bit!)

> 
> Also, would this not break the ""concealed"" SGR attribute, which deliberately sets the foreground and background colors to the same values?

Oh boy, yeah, almost certainly."
"I really need to burn Url in my head, it always ""looks wrong""."
"This is wrong I believe. You want to add it more like this:

https://gist.github.com/408976c0b387172a2ae108766c4e2510 

where we put the other args. "
"> This seems wrong to me. That would mean that StackFrameIdentifierNameNode is a StackFrameTypeNode

yup, that's totally fine (see roslyn for example).  Say i have this:  `public Foo Bar() { }`.  `Foo` is an identifier, but that's definitely a Type context.  In other words *all* identifiers/name can be used where a Type is needed (though not vice versa)."
"As per docs the UserInfo is: 

> An optional dictionary that can be used to pass information back to your extension via CLKComplication.

Is a dictionary used by the extension and not something that is used by the API. But the key is definitely in the wrong place, should be in CLKLaunchOptionsKeys "
"There's no ""Xamarin.Mac.dll"" anymore for .NET (it's ""Microsoft.macOS.dll""), so this seems wrong."
"There are cases where we get into this check, for example, `JIT\Stress\ABI\pinvokes_d`:
```
CoreCLR!ArgIteratorTemplate<ArgIteratorBase>::GetArgLoc+0x10c
CoreCLR!GenerateShuffleArrayPortable+0x27c
CoreCLR!GenerateShuffleArray+0x14
```
comes here with byteArgSize = 17 and we change its size to 8 here, if we don't do this we will get a wrong result."
"Is it possible this will break any debugger logic? Even if not, I could see this kind of change causing some confusion if someone manually debugging looked up the wrong version of the CTS source code."
"I just realized, why are you doing this? There is a better mechanism in .NET Core to do this and what is worse this is wrong for BCL assemblies and will issues warnings for customers."
"I tried the example that fails on iOS:
```csharp
async Task DoStuff ()
{
    Console.WriteLine(""DoStuff begin"");
    const string url = ""http://www.google.com"";
    Uri uri = new Uri (url);
    HttpWebRequest hwr = WebRequest.CreateHttp (uri);
    WebResponse wr = hwr.GetResponse ();
    Console.WriteLine(""That worked"");
    // second test
    HttpClient client = new HttpClient (new HttpClientHandler ());
    try {
        var response = await client.GetStringAsync (""http://doesnotexist.xamarin.com"");
    } catch (System.Net.Http.HttpRequestException) {
        Console.WriteLine(""That worked too"");
    } catch (Exception exc) {
        Console.WriteLine (exc.ToString());
    }
    Console.WriteLine(""DoStuff end"");
}
```
Which outputs:
```
> adb logcat -d | grep DOTNET
03-05 08:16:03.828 20671 20671 I DOTNET  : DoStuff begin
03-05 08:16:04.565 20671 20671 I DOTNET  : That worked
03-05 08:16:05.151 20671 20671 I DOTNET  : DoStuff end
```

Maybe something is differently wrong, because the bad web request ""worked""?

I think we can probably merge this, though."
"That background out of the way, I now don't understand how this PR *works*:  `<GenerateJavaStubs/>` calls `ManifestDocument.Merge()`: https://github.com/xamarin/xamarin-android/blob/main/src/Xamarin.Android.Build.Tasks/Tasks/GenerateJavaStubs.cs#L290

`<GenerateJavaStubs/>` also writes out the ""final"" `AndroidManifest.xml` file, and thus is *really* important.

`ManifestDocument.Merge()`, meanwhile: https://github.com/xamarin/xamarin-android/blob/9add575ba0e25903b6894f40fcd53e6d51785fae/src/Xamarin.Android.Build.Tasks/Utilities/ManifestDocument.cs#L246-L260

`ManifestDocument.PackageName` is set by `<GenerateJavaStubs/>` as part of `ManifestDocument` construction, and thus ultimately comes from `<GetAndroidPackageName/>`, which is updated by this PR.  So far so good.

However, if `AndroidManifest.xml` *has* `/manifest/@github` value -- which it does for this bug! -- then line 259 *replaces* `ManifestDocument.PackageName` with the `/manifest/@github` value.  `PackageName` is never updated to take `ManifestDocument.Placeholders` into consideration, so my *hypothesis* is that the *actual* `AndroidManifest.xml`'s `/manifest/@github` value is *still* ""wrong"", not containing appropriately updated values.

@github: please apply the following patch to your xamarin-android repo:

```diff
diff --git a/samples/HelloWorld/HelloWorld.csproj b/samples/HelloWorld/HelloWorld.csproj
index 2b5391ee2..71898b696 100644
--- a/samples/HelloWorld/HelloWorld.csproj
+++ b/samples/HelloWorld/HelloWorld.csproj
@@ -23,6 +23,7 @@
   />
   <PropertyGroup Condition=""Exists('..\..\Configuration.props')"">
     <TargetFrameworkVersion>$(AndroidFrameworkVersion)</TargetFrameworkVersion>
+    <AndroidManifestPlaceholders>hello=a;world=b</AndroidManifestPlaceholders>
   </PropertyGroup>
   <PropertyGroup Condition="" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "">
     <DebugSymbols>true</DebugSymbols>
diff --git a/samples/HelloWorld/Properties/AndroidManifest.xml b/samples/HelloWorld/Properties/AndroidManifest.xml
index 3561f38df..52efdc5ae 100644
--- a/samples/HelloWorld/Properties/AndroidManifest.xml
+++ b/samples/HelloWorld/Properties/AndroidManifest.xml
@@ -1,5 +1,5 @@
 ﻿<?xml version=""1.0"" encoding=""utf-8""?>
-<manifest xmlns:android=""http://schemas.android.com/apk/res/android"" android:versionCode=""1"" android:versionName=""1.0"" package=""com.xamarin.android.helloworld"">
+<manifest xmlns:android=""http://schemas.android.com/apk/res/android"" android:versionCode=""1"" android:versionName=""1.0"" package=""com.xamarin.android.${hello}.${world}"">
 	<uses-sdk android:minSdkVersion=""21"" />
 	<application android:allowBackup=""true"" android:icon=""@github/icon"" android:label=""@github/app_name"" android:extractNativeLibs=""false"">
 	</application>
```

Then please build `samples/HelloWorld/HelloWorld.csproj` using your local build with this PR.

Based on the unit test, this *should* produce a `com.xamarin.android.a.b-Signed.apk` file.

Once built, please read the generated file `obj//Debug/AndroidManifest.xml`.  I *think* that this file will instead contain `package=""com.xamarin.android.x__hello_.x__world_`, *not* `package=""com.xamarin.android.a.b`.  (Meaning that this PR only really changes the *filename produced*, but not the actual intermediate `AndroidManifest.xml` files.)

If my hypothesis is correct, I believe that the appropriate fix would be to instead update `AndroidAppManifest.CanonicalizePackageName()` to take a `string[] placeholders` parameter, and have *both* `<GetAndroidPackageName/>` and `ManifestDocument.Merge()` call `AndroidAppManifest.CanonicalizePackageName(PackageName, placeholders)`.  (The current `foreach` over the placeholders would likewise move into `AndroidAppManifest.CanonicalizePackageName()`.)"
"> I suppose we could also remove the native reflection support for this as well at the same time, but that's up to you.

From my search seems that is not referenced anywhere, so probably we could remove that

> Buyaa, what do you think about defining the property as get => null; set => { };? That would allow you to delete the backing field as you had originally wanted to do, assuming you also delete the following lines from the native reflection stack at the same time.

The only concern is those references from MSBuild you mentioned in `#2`, i saw them before updating to `throw PNSE`, but thought those are old/stale probably unused/unreachable code as the type itself is not doing anyways, so i was expecting MSBuild would need some cleanup, but my expectation might be wrong, maybe we should talk with somebody from MSBuild? "
"I'd make an alternate suggestion (and mentioned this to Cyrus privately): let's at least go through the current methods and stick TODO comments for which ones we think are violating but aren't immediately easy to fix in this PR. The challenge with this comment is if I'm somebody new to the codebase, and I read this, but I also see a bunch of violations, I don't know which is wrong. I can see *something* is wrong, but I don't know what."
I'd suggest split this change into removing method by method. I.e. Remove just DoubleToString and add relevant test cases. And do so for all methods you're replacing here. If we regress here we'll need to revert entire changeset here as I doubt anyone will be willing to spend time investigating what went wrong otherwise.
"That is not a constructor you can call (publicly). The only way to obtain an instance of `Enumerator` is use `default`, or get one from an `Enumerable`. In either case, we should assert so that, in debug code, you know you're doing something wrong."
"> Since it's an inherent component of the OS, it's not listed.

Okay, that makes sense. I thought that initially, but if that's the case then why is `libobjc.dylib` listed since it's an inherent component of the OS. Everything else on the osx list seems to be a custom dependency (AFAIK), but don't apple OSes come with `libobjc.dylib`, because otherwise how else would any objective c apps run (including apple's own), they all compile down to those apis don't they? Please correct me if I'm wrong."
"Order of arguments was wrong. Should we throw `ArgumentOutOfRangeException` instead?
"
"I assume it's because that if we don't find the syntax in the current block, then something has gone horribly wrong (the parameter is invalid - we should never pass in a syntax node that isn't the exact block the binder is located at).
"
"The Debug.Fail provides documentation that it's an unexpected code path, largely justifying the exception with no specific message.  And gives a very specific place to look if something goes wrong in a debug build :)"
"ok I see
https://github.com/microsoft/msquic/blob/0fffdc076abd52a61a2d4d8d699cf6a5f80e56e5/src/core/stream.c#L221-L223
```c
        Status = 
            (ClosedLocally || Stream->Flags.Started) ?
            QUIC_STATUS_INVALID_STATE :
            QUIC_STATUS_ABORTED;
```

but it means INVALID_STATE is not only used if ClosedLocally; and it doesn't prevent stream_open from returning it later for some different reason....

On one hand, it will be better if we were able to tell the difference and not just translate INVALID_STATE into OperationAbortedException. This exception now bears the meaning of ""you do something that results in a local operation being aborted, e.g. AbortRead (or close Stream or close Connection) with a pending Read""; if we use it for something else it will become unhelpful... in the same way ""INVALID_STATE"" sounds unhelpful -- something is wrong but you're not sure what.

On the other hand, tracking all we do locally and adding the guards you mention might be too big and complex change, and if it would involve locking, it may significantly impact perf.

I was initially inclined towards not translating INVALID_STATE into OperationAbortedException, but I'm not so sure now.

@github what are your thoughts?"
"The thing that makes me worried is that the RegexGenerator is on by default and will start running for any new app, so if we get this wrong we will be breaking all new apps in older VS previews. Would it be reasonable to hold back just the RegexGenerator for now so as to not block your PR while we do a bit more investigation and only update RegexGenerator once we know for a fact that this won't break consumers?"
"I do not know where these files came from originally. Adding the simple license headers may be actually wrong for them.

Also, nearly all files under `src/mono/mono/tests/*` are missing the license headers so it is also for consistency."
"The previous error message is wrong (`{}` isn't ""interesting"" constraint), but shouldn't the user still see an error message here?"
"[this](https://github.com/vuejs/vue-next/blob/master/packages/vue/src/devCheck.ts#L2) is due to us expending the uncalled functions checks to ternaries. As far as I'm concerned, the error's not wrong (this is a defensive check)."
"Yep, this handles the original issue, where the module augmentation adds a type meaning. I guess we could error on that too, but it seems less obviously wrong to me."
"I thought that double needed this type of SIMD. I was wrong, wasn't I?"
"if success can be overridden, this seems wrong.
"
"@github You mean anybody who was previously able to mutate a mutable array after checking it with isArray? I tested this change locally and confirmed it doesn't break that: Mutable arrays remain mutable. The type predicate narrows the type to the intersection of `typeof arg & readonly unknown[]`, which is only immutable if `arg` was already immutable.

Would you consider reopening this PR?

### :play_or_pause_button: Playground link

<!--
  A link to a TypeScript Playground ""Share"" link which shows this behavior

  The TypeScript Workbench can be used for more complex setups, try
  https://www.typescriptlang.org/dev/bug-workbench/

  As a last resort, you can link to a repo, but these will be slower for us to investigate.
-->
[Workbench repro](https://www.typescriptlang.org/dev/bug-workbench/?#code/CYUwxgNghgTiAEYD2A7AzgF3gWwK4agCMIQAueTGASxQHMBtAXQG4AoUSWBZdLK7PAWJl4cKMFQQAnhQzU6TNqwD0y+AFl8REvFgwoUtKJDYoNCkngB3KhgAWulMGu27SfCrV2MGAA5pSVVpXXEIAOmRsZWwqMBgkNCQAMwxlABUpXxAAZTiqX1TfXAgIZQAWACYAZgBGADZWKiT4AAoAQRh9KTCqNA6ulsFtEABKEfgAb1Z4RFRMCjdi4HJKGgZGeABeHC1hZnhVeEAUckB4P-g2naEdPQMF9whnOFNzRNYAX1ZPeDS7Xt00NBUWgobAgFBYNCLB7wECdJAweCEfDwCQgNAoADkGAANPAUEgsDZ7O4MF9vH4AkEQuFItFYvFEil0pkcnkCsoiiVytV6o1mu1OgYen1BVIWvwhsIxpNprNeHclgA5AkrORrJhbeAS3YkfaHQAy5OcUFqBDqEDcZJD7o8TGZja83kA).

### :technologist: Code

<!-- Please post the relevant code sample here as well -->
```ts repro
declare const mutable: string[];
declare const immutable: readonly string[];

// Mutable arrays remain so with and without
// https://github.com/microsoft/TypeScript/pull/42316
if (Array.isArray(mutable)) {
  const should: string[] = mutable; // ✔️ A mutable array should remain so
}

// This assignment should error but doesn't, not without
// https://github.com/microsoft/TypeScript/pull/42316
if (Array.isArray(immutable)) {
  const shouldNot: string[] = immutable; // ❌ An immutable array should remain so
}
```

### :slightly_frowning_face: Actual behavior

<!-- What happened, and why it was wrong -->
```sh
$ tsc input.ts
```
No errors: You're free to mutate an immutable array.

### :slightly_smiling_face: Expected behavior

<!-- What you expected to happen instead, and why -->
With this PR:
```sh
$ node built/local/tsc.js input.ts 
input.ts:13:9 - error TS4104: The type 'readonly string[]' is 'readonly' and cannot be assigned to the mutable type 'string[]'.

13   const shouldNot: string[] = immutable; // ❌ An immutable array should remain so
           ~~~~~~~~~


Found 1 error in input.ts:13
```
Mutating an immutable array is an error."
"> // Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

Wrong license. #Resolved

---
Refers to: src/Compilers/CSharp/Portable/Symbols/Synthesized/SynthesizedRecordPropertySymbol.cs:1 in 32b4b4e. [](commit_id = 32b4b4ed807f124def461561f3fbea60a5edcc69, deletion_comment = False)"
"Oops, applied the tag to the wrong PR."
"> 
> 
> > ```
> >                         var method = getTopLevelMethod(_symbol as MethodSymbol);
> > ```
> 
> It seems like `_symbol` here should always be the top level method? Is there a time when it's not? If there is, the docs on `_symbol` are probably wrong.
> 
> Refers to: src/Compilers/CSharp/Portable/FlowAnalysis/NullableWalker.cs:1218 in [c5b1eec](https://github.com/dotnet/roslyn/commit/c5b1eec9e65eb7e4e706f951c5b756a9b319d40b). [](commit_id = [c5b1eec](https://github.com/dotnet/roslyn/commit/c5b1eec9e65eb7e4e706f951c5b756a9b319d40b), deletion_comment = False)

`_symbol` is not the top level method when we are reinferring a lambda return type."
"It's a bit tricky for me to debug some of the failed environments, and setting them up locally is going to be time consuming.

In general. it looks like there are wrong casts introduced in the build due to one or more wrong CMake compiler checks.
For example, on Android the `HAVE_GETNAMEINFO_SIGNED_FLAGS` seems to be returning FALSE when it should apparently be TRUE: https://github.com/dotnet/runtime/blob/5ef75b281a662b2877a4c62320320d725be109fd/src/libraries/Native/Unix/configure.cmake#L480

Since the check is implemented as a `check_c_source_compiles`, the only way to find out what's wrong is either pull the CMake logs or try compiling the snippet manually with the same compiler and flags, and observe the output
"
"Should/can we add some validation for the names of native libraries we produce on Unix to make sure they all have `lib` and so that if we add a new one we catch if the name is wrong? "
"I've tried this approach without success. See anything wrong in this gist?
https://gist.github.com/aleclarson/6ae9a3b6b9d06c492fb9a3b6ec395411"
"And I won't say that we may not have a point at some point in the future where it makes sense; at least for the thing that triggered this change, this was the wrong fix; by _not_ taking this it forced us figure out where we can make better fixes in other parts of the system. But this being async means it's easy to not root-cause a perf analysis and just ""make something more async"" when there's further investigation to do."
"Great news, I was wrong. Our tests were actually successfully executing on x86. 
Bad news, they were not executing on x64 ... ever "
"I think this is the wrong way to fix exactOptionalPropertyTypes errors. Applying the fix produces errors that (1) occur a long way from the true cause (2) penalises slightly-bad code like having structurally related types with no extends clause, or combining options types with a bunch of type arithmetic.

I think the better fix is to unconditionally add `| undefined` to all optional properties, and then have a human look at the diff and decide which places should not allow undefined.

The new error messages are *often* correct, so it might be worthwhile to leave them. However, I'm not sure their advice is clear enough without a codefix to back them up."
"I can close this pr then, and update the documentation for the collections I found with wrong info instead then ;)"
"> Which do you suppose is more wrong, the code or the documentation?

I don't know that anything's wrong.  The docs for gethostname have a several paragraph description about what it might return.
https://docs.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-gethostname#remarks
If you're referring to the docs for Dns.GetHostName, if anything the docs might be simplified to not have as much detail as the underlying function being used, but I've not seen evidence that it's wrong."
"Sorry folks, wrong rebase. Trying to undo. "
"@github regarding Substring, there are only a limited number of things one can try to improve this, one of which would be to try and optimize the guard clauses. This would perhaps mean changing the exception messages (not types), since we would like to do multiple checks in one go for example, is that acceptable?

Other than that one might specialize for short substrings... if that would improve anything. 

@github the existing performance Benchmarks do not look that useful, at least in my runs they are highly volatile and seem to be based on JIT compiling away all checks... maybe... would adding other tests be acceptable? Perhaps you can take a look and tell me if I'm wrong, but use of `Arguments` seems problematic.

Is there any guidance anywhere on getting a good dev inner loop for looking at corelib asm? How to use BDN in that case? A bit rusty here. "
"As @github pointed out, the parameter name should flow through here. My understanding is that this is powered by the same mechanism as [CallerArgumentExpressionAttribute](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callerargumentexpressionattribute?view=net-6.0), which is a pretty cool way to get the actual argument name string to flow through.

_Edit: I had the hastily copied/pasted the wrong attribute type linked before._"
"> > merging the same enums into a central location
> 
> What are you referring to? I see this one definition in C#:
> 
> https://github.com/dotnet/runtime/blob/385fc8832b1d4160abe13645054b65458b6a12f8/src/coreclr/System.Private.CoreLib/src/System/GC.cs#L87-L93
> 
> Where else is this enum defined in C#?

I thought I remembered that there was something in `GC.CoreRT.cs`. But it seems like am wrong.

With `git grep ""enum GC_ALLOC_FLAGS""` which definitely works better than the GitHub search, I only found 2 definitions:

https://github.com/dotnet/runtime/blob/1c927462696f5af7d5e667f54b1c39452cba4b2d/src/coreclr/System.Private.CoreLib/src/System/GC.cs#L87-L93

https://github.com/dotnet/runtime/blob/b2dc37ba181a7fa4427e717eab819ba3543d0ae4/src/coreclr/tools/Common/Internal/Runtime/RuntimeConstants.cs#L47-L53

I am currently undecided if we have any shared project for CLR-Tools code and the S.P.CoreLib where this could be added.

Since this is only tools code it will not reduce the assembly size for the user, but code duplication should still be avoided in my opinion.

Maybe we could put this under libraries/Common?"
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

`IF_DR_2G` `(mov sp/reg, reg/sp)` has an implicit reg2, so an unwary peephole opt
might mistakenly think it is `mov reg, x0`. If the opt is unlucky and the next
instruction is a real `mov reg, x0` the peephole opt might suppress the second
instruction, leaving the wrong value in `reg`.

Fix is to just disallow `IF_DR_2G` in the peephole.

Fixes #68527.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>AndyAyersMS</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-CodeGen-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
Any idea why the `coreclr_tests.pmi.windows.x64.checked.mch` TP impact is so high? Do we have some particularly crazy MD array tests there?
"@github - also FYI on this. Using the package APIs, which are all async, e.g. `GetItemAsync()`, would all throw mysterious C++ exceptions. I wonder if I'm running it on the wrong thread? (Which would be annoying, because nothing else here is async, and calling `GetResult()` is awful.)

Did you ever see any exceptions while using those APIs?"
"It's not changing the public API, though. It's just hiding the base class method. The tool is wrong."
"I do prefer it barfing to indicate a store hiccup, rather than giving what could be the wrong user"
"I added some comments, but on further thoughts I'm not sure this will do what we want when used in combination with the signalr service. The reason for it is that as far as I know the connection to the server will be kept alive in the signalr service case and only the connection between the client and the server will be closed (hence you won't get a nice disconnectedasync notification.

Am I wrong? @github @github "
"```suggestion
We may not investigate issues which haven't received many votes/comments and choose to close these. The reason is that the impact is very scoped and potentially something is wrong in the user code.
```"
"@github 😄 

Not until now. I've written it to have the behavior you wanted where ""\*.example.org"" doesn't match ""example.org"" as annoying as it may be, because as I mention on the following line, the alternative would have ""a.example.org"" match ""\*.a.example.org"" before ""\*.example.org"", and that just seems wrong."
"Thanks for the feedback. I'm trying to understand how this is happening. stopConnection is only ever called when the transport fires its closed handlers. You can see where it's wired up here:

https://github.com/dotnet/aspnetcore/blob/88bf14399bb6c3557a73ce1a38ba7d7e9f27ac88/src/SignalR/clients/java/signalr/core/src/main/java/com/microsoft/signalr/HubConnection.java#L276-L279

At the point stopConnection is wired up as the transport's close handler, the ConnectionState is already in scope. That means we can fix any issues with a null ConnectionState here by simply capturing the ConnectionState in the setOnClose lambda and passing the ConnectionState as an argument to stopConnection. That way there's absolutely no risk of referencing the wrong ConnectionState or it being null. You could then verify the passed-in ConnectionState matches what's returned from getConnectionStateUnsynchronized() before calling changeState(HubConnectionState.DISCONNECTED) or mutating anything else outside of the ConnectionState object.

https://github.com/dotnet/aspnetcore/blob/88bf14399bb6c3557a73ce1a38ba7d7e9f27ac88/src/SignalR/clients/java/signalr/core/src/main/java/com/microsoft/signalr/HubConnection.java#L1482-L1487

That said, @github @github Do either of you have any ideas about how ConnectionState could be null here today? As far as I can tell, this is the only method that currently sets ConnectionState to null, and it cannot be called before it's hooked to the transport's close event which happens after the ConnectionState is set.

There are two possibilities I can think of at the moment:

1. The transport triggering stopConnection multiple times for a single connection.
2. The connection starting and stopping twice. If the first call to stopConnection is delayed long enough, the ConnectionState might have been overwritten by the second connection before the first call to stopConnection fires.

I'm thinking instead of just checking the HubConnectionState in start() we should also verify ConnectionState is null before continuing.

https://github.com/dotnet/aspnetcore/blob/88bf14399bb6c3557a73ce1a38ba7d7e9f27ac88/src/SignalR/clients/java/signalr/core/src/main/java/com/microsoft/signalr/HubConnection.java#L224-L234

Looking at all this also has me wondering what happens if transport.start() fails so the transport never fires stopConnection. Is the ConnectionState still cleared? It appears not.
"
"Separately, the current code here will result in extra noise in the normal (Arcade-ified) case because `msbuild` and `dotnet msbuild` warn when something tries to override a global properties.

> > can only be overridden when invoking an inner build using the <MSBuild/> task 

> What do you mean by this?

`Ms. Build` treats global properties (environment variables and `/p:Foo=Bar` on the command line) as read-only. The  `TreatAsLocalProperty` attribute is an escape hatch from that.

In any case, I'm glad this works but
1. Want to understand how much change introduced this or what else caused the new ""direct build"" issues
2. Very much do not want to make our binary logs noisier in the cases that are currently working.

I'm working on (1) still because I keep doing dumb things trying to get a binary log for the SignalR pipeline failures.

For (2), use `! HasTrailingSlash(...)` to reduce attempts to override a global property and a variant of the new line (perhaps using `NormalizeDirectory($(MSBuildThisFileDirectory), '..', '..' , '..', '..')`) in Microsoft.AspNetCore.Testing.props. May need to include an empty check in the `Condition` here because `Ms. Build` sometimes messes up when given a non-existent property."
"Is the lock really necessary? If we see a stale null OutboundControlStream, is it wrong to treat it as if it hadn't been fully created? I know this lock was there before and it doesn't really hurt if it's generally uncontested. I'm just curious."
"Do descriptions get converted into alt text for `""type"": ""computed""` symbols? I think the `""invertBoolean"": true` [here](https://github.com/dotnet/aspnetcore/blob/a0b950fc51c43289ab3c6dbea15926d32f3556cc/src/ProjectTemplates/Web.ProjectTemplates/content/WebApi-CSharp/.template.config/ide.host.json#L46) really makes this confusing.

I think the alt text for both `DisableOpenAPI` and `UseMinimalAPIs` are wrong because of this `invertBoolean` logic. The alt text for the `UseMinimalAPIs` checkbox is currently ""Whether to use minimal APIs instead of controllers"" when it should probably be ""Whether to use controllers instead of minimal APIs"". It's a little more subtle with this phrasing, but it's essentially the same problem.

![image](https://user-images.githubusercontent.com/54385/139318161-b1fc5d30-111d-42c8-8608-2b04adfd9590.png)

While we could just invert the descriptions in the `""type"": ""parameter""` symbol, I think that'd be confusing and wrong considering the inversion is happening in [ide.host.json](https://github.com/dotnet/aspnetcore/blob/a0b950fc51c43289ab3c6dbea15926d32f3556cc/src/ProjectTemplates/Web.ProjectTemplates/content/WebApi-CSharp/.template.config/ide.host.json). Can we move the alt text to that file instead somehow?

"
">Diagnostic(ErrorCode.ERR_NameNotInContext, ""AttrType"").WithArguments(""AttrType"").WithLocation(16, 40), [](start = 16, length = 102)

Same bug with the wrong binder."
this seems... wrong :)
Wrong base branch.
"> This bot is wrong, any idea where the rule is?

https://aka.ms/fabricbotconfig

This one's funny. It looks like this change got matched because it has a ""src/Shared/Http2"" prefix. I'll make the pro

![image](https://user-images.githubusercontent.com/54385/93638432-22195c80-f9ac-11ea-80f0-ceb0e97a727e.png)

I'd change it and the other conditions to end in a ""/"" (e.g. ""src/Shared/Http2/"") which hopefully would fix it, but I don't have permissions. @github can you make this change or give me permissions to do so?

![image](https://user-images.githubusercontent.com/54385/93638581-5d1b9000-f9ac-11ea-8682-185f57600142.png)
"
@github Gosh; I'm sorry about the wrong item group name! Thanks for figuring that out; I'm glad it's working now.
"Thanks. That caught a bug.
~~That said, the expectations you listed are wrong. Neither of those should be offered. The `var` pattern has different semantics than the pattern with a type (`var` doesn't check for `null`, but type-pattern does).~~

~~Update1:My bad, I see that you accounted for that in your example.
The middle case could be offered. But it's currently not (even prior to my change).~~

Update2: On further reflection, I think my initial reaction was correct. We should leave var patterns alone, because they have different semantics. It's not just that they don't null-test, they also don't type-test."
"<del>note: there are probably other cases that need to be supported, such as a for each statement variable. if you don't implement this, please create an issue so that somebody can fix this later</del> I'm probably wrong. I don't see how this could come up in a for each statement. Are we sure there are no other cases though? #Resolved"
Else is also wrong here.
"❕ This is a collection initializer, not an object initializer (test is correct, but the method name here is wrong)"
"> This cannot be reverted without adding a warning suppression unless I hard code a new rule for this in the analyzer. Do you have a suggestion for a new global rule that would apply here?

```Is``` and ```IsNot``` operators in VB are explicitly reference comparison. There is nothing wrong in using them and I think analyzer should not complain about them at all. There is no confusion like in C# where ```==``` sometimes means value equality and sometimes means reference equality depending on the types involved.

---
In reply to: [280900178](https://github.com/dotnet/roslyn/pull/35466#discussion_r280900178) [](ancestors = 280900178)"
"Turns out my reading of the code was wrong. We have kept the original behavior (and it's covered by ` RefParameter_TopLevelNullability_Suppressed`). 
If the expression is suppressed, we get a non-null state on the way out, thus no warning from assignment."
"We generally use ArgumentException for this, with a message that conveys what went wrong, e.g. https://github.com/dotnet/runtime/blob/ccada164f3a18207e91f1e3d0dc7c168ae3de0d4/src/libraries/System.Private.CoreLib/src/System/IO/FileStream.cs#L341"
"I would make this a top-level/global function and not a member function - to make it clear it's effectively an exported API. Or maybe even better - do the same which hostpolicy already does for functions like `get_delegate` and similar. Those are also effectively exported APIs which are returned as function pointers. Currently they are written as hidden inside an anonymous namespace and don't need header/cpp duplicate declarations.

Also currently the header and cpp have slightly different declarations of the function - which feels wrong. "
"nit: spelling wrong ""case-insenstive""
```suggestion
        /// Matching is case-insensitive. Because of this, we do not preserve the case of the original header,
```"
"This now feels to me like it is at the wrong layer. Implementors of editors should do the right thing, I would expect the editor service to not have any smarts."
"I think this line is wrong and probably causes the tests failures. 

Suppose you have `isUtf16DataNonAscii[0]` equal to `0xFFFF`  (i.e. `-1`) and `isUtf16DataNonAscii[1]` equal to `0`. Then `MaxPairwise(isUtf16DataNonAscii, isUtf16DataNonAscii)` will return `0` in the 0-the lane of the resulting value.

You need to use `MinPairwise` here. You would use `MaxPairwise` if the element type was unsigned.

This is why I originally suggested to use `MinAcross` for this.

In my reply to Kunal I also assumed the unsigned type of the values (see https://github.com/dotnet/runtime/pull/39041#discussion_r455225992)"
"This seems wrong... it appears we are discarding all HTTP2 connections here, when what we really want to do is discard just the expired connections."
"You should know that i was very confused when i made this table, and put the wrong behavior in the wrong column, then swapped the columns. 

And now, It turns out that both columns were the wrong column the whole time? 😬"
"Style is wrong, "
"Sorry, on closer inspection I was wrong about what to do here, I think the best thing would be to leave the original source alone and paste in the new actual diagnostics to VerifyDiagnostics"
"It seems that different API / SDK versions behave differently - is there a best practice how to handle that for UI tests? Can I mark tests to only run for specific versions? Should I avoid the hassle and just mark them as ManualReview?

It seems that newer iOS versions are using `UIImageView` for the native bottom badge that's why `SetSectionBadgeUnselectedColorTest` and `SetSectionBadgeColorTest` do not work - don't think there is a possibility to get the color here (prove me wrong).

Lower Android versions are returning `HashMap` for `getColor` instead of `ColorStateList` for the `GradientBackground`, that's why `SetItemBadgeUnselectedColorTest` and `SetItemBadgeColorTest` are failing here. Didn't check if there is an alternative to determine the background color yet.

For all the other failing tests - I don't know what's going on here, but I guess that's not related to the PR?"
"This is all very confusing, and I agree its this isn't a very stable model within the compiler. The problem is that we tend to check for architecture with a simple equality check, and there are quite a few checks (and it would be really easy to get this wrong as we don't actively test this.).

With the abi, as this change is actually specific to the abi, and we don't have many abi checks in the product, this seemed safer and less risky going forward."
"I realize this pre-existed, and it doesn't seem to actually cause problems in practice, but...

Technically this seems wrong. We calculate the Content-Length as Content.Length * 100 above, but then we add a newline each time we write it."
"@github TBH at work we always do merges instead of rebase, I tried rebasing but I think I did something wrong"
"No, that was a conscious decision. Git task derives from ToolTask which is inherently dumb to use when you need to invoke a command more than once - you need to create a state machine so that you can return different parameters from `GenerateCommandLineCommands` and then call `base.Execute()`, then use the state machine again in `LogEventsFromTextOutput` to place the results where they should be. With code like in `GitCommitInfo` it would quickly become messy."
"Why is this conditional on the compilation language, rather than on some configuration parameter (for example: which runtime is being compiled)?  I don't think it's wrong, just curious."
"Can you use the ""inP1363Format"" versions described in https://docs.oracle.com/en/java/javase/12/docs/specs/security/standard-names.html#signature-algorithms?  Their documentation is wrong, but hopefully their code is right.

The P1363 format is the .NET default, r and s as a fixed-length unsigned encoding each as long as the size of the order.

Of course, that would mean you have to split off from ECDsaOpenSsl already, since ECDsaOpenSsl expects the X.509 DER version."
"Yes, the existing test was wrong given the change to the language specification.

We should always produce the same symbols and bind the same way, regardless of language version. The only thing that can differ is what diagnostics are produced.
For example if you used `record struct` in an older language version, we'll still probably produce a symbol with members. But we'll also produce a diagnostic. When you switch to a newer language version, the error merely goes away.

Regarding the present test: the `ToString` member should never be produced when the base type has a sealed `ToString`. But an error should be produced when that happens with a language version which isn't high enough. This test should remain an error in C# 9, but the reason changes (it's no longer because we *can't* handle the situation, it's because we *won't* given the insufficient language version). #Closed"
"i dont' understand the return value vs the name of the method.  it says ShoudlExpressionDisplayCOdeACtion... but it returns a tuple of bools.  i don't know how to interpret this.  the name is wrong afaict, and there's no docs on how the 4 possible combinatinos should work."
"Going to mark this as draft until we see if something is wrong with the tests at:

https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=6089774&view=ms.vss-test-web.build-test-results-tab&runId=39320146&resultId=100166&paneView=debug"
"Agreeing with @github here: to me I fundamentally expect that Omnisharp isn't doing binding redirects and compiling against one version but supporting another. That would then mean we have to have a much higher compat bar where we have to support that and that's simply not something we've signed up for or have a plan in place for.

If we have to support binding redirects for this layer in a case like is being proposed, then I don't want an Omnisharp External Access layer at *all* because suddenly it means changing any other interface is potentially more expensive than _what we even do for Visual Studio_, and that's crazy."
This is wrong and must be fixed before this is merged.  This can't be stored for reuse until GetResult is called on VTS.
"I _think_ unless this makes more sense as a class, since I believe in a struct we can't modify the value of `DeleteCount` without creating an entirely new struct. (If I'm wrong, please let me know. 🙂)"
"Ah, which ones are considered common properties? I originally tried to make it alphabetical order but clearly that was wrong too (DebuggerSupport before CustomResourceTypesSupport) 😅 "
this seems wrong.  what if you have `X<Y<Z>>`  The argument to X<> won't be an identifier.
"This looks wrong, according to the `Copy` [rule](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmRules.html) you own the return value from `FSEventStreamCopyPathsBeingWatched `, I think it should be like this:

```suggestion
				using var cfarray = new CFArray (FSEventStreamCopyPathsBeingWatched (handle), true);
```"
Is there some sort of auto formatting happening? Because this is formatting to the wrong style...
"wrong `r`
`OpCsRrequest` -> `OpCsrRequest`"
"Wait, I just realized this is the wrong ref assembly.  This is for a legacy compat nuget package."
"Thanks @github , that makes sense. Here's where I need help understanding git revision specs as `git shortlog -s -n -e --since rel/1.0.0-preview1@{2015-10-26} --until rel-preview1/1.0.0@{2016-03-21}` and `git shortlog -s -n -e --since master@{2015-10-26} --until master@{2016-03-21}` (yeah, dates are likely wrong for cli as well) produce identical output. 
"
"This API should use `SetFileInformationByHandle` and I think it shouldn't throw for a null `fileHandle.Path`, instead, let the pinvoke decide if something is wrong with the handle.

You could use `SetFileAttributesW` when `fileHandle.Path` is not null but only if SetFileAttributesW shows better performance than SetFileInformationByHandle i.e: as an optimization."
"@github I'm fine with changing this back, but some of this of course relates to `Substring` API and this not ""knowing"" constraints of input, while when span is created, those constraints are in place. So it's not necessarily because something is ""wrong"" with `Substring` but more that inside this context we can side step these checks by using already verified state. If that makes sense. Again this only matters - no big impact though - for very short lines, but this is where we have seen the regressions."
"Is that wrong? I like to separate my `using`s from my `using static`s.
"
"dumb question.  is this type safe to use on a BG thread?  i won't block the PR on this, but can yuo check with amadeus?"
"That was two mixed questions together, one of them is very dumb :)

Remaining question is related to the default value of `PreferTopLevelStatements`. If a brand new project is created, without any `.editorconfig`, this will convert it to `Program.Main` since the default value is to not prefer top-level statements. Isn't this regressing how the new template works?"
"I don't see a valid reason here to keep this suggestion because of the reasons above. As about delegate constraint:
1. VS will prioritize `Delegate` if you are typing `delegate`
2. The fact, that VS doesn't have a `delegate` completion can arouse suspicion in user's mind, that he is doing something wrong.
3. User can still force-type `delegate` against completions and ensure, that this is invalid. He will be provided with a clear error message and a quick fix."
hmm... something might have went wrong in the `xcode12.2` backport to `main`
"Hmm, I hope we won't need to define the platform enumeration in every single test getting converted to the new model, will we? I would assume this should come from some common reference module, ideally shared with the Roslyn source generator. I noticed a discussion about <code>TestPlatforms</code> in the source generator code itself, I'm not sure to what extent these two can be reused either by compiling the same source file twice or by using some common dependent assembly but duplicating the enumeration in test code clearly sucks."
"@github issue is compiler analyzer's SupportedDiagnostics is wrong. since it reports diagnostics that it can never produce as supported diagnostics. SupportedDiagnostics should return only those that can be produced by compilation.GetDiagnostics() rather than including all errors ever defined in compiler (command line argument issues, binary output issues and etc)

..

by the way, the filtering sounds to me a bit of workaround. since regardless whether we special case compiler analyzer or not, its current behavior is not right.
"
This comment is wrong
"I am not suggesting to report a different error, just saying that the parser is probably the wrong place to report it.
"
I saw your other comment. This is probably wrong so I'll fix it.
"The code changed here, so this is no longer an issue.
Turns out we needed more fine-grained code here in order to catch the different ways a private-named property access can go wrong. This is one of the most interesting functions I've ever had the privilege of working on, really made me think!"
"I think this is wrong now. You definitely **do want to** cancel the body as well if we're tearing down the request.
It should be fine to skip the `shouldCancelBody` and `duplex` checks entirely. If an exception occurs, cancel everything."
"This prevents confusing errors as in https://dnceng.visualstudio.com/public/_build/results?buildId=526104&view=logs where bootstrap command failed but format.py continued and ended up using a wrong version of clang-format, which reported formatting errors."
"> Just a question here. In order to do that in S.Drawing.Common we switched to harvest for 3.0 or earliest. Should we do the same? Or do we want this new support in Unix to be available for 2.1?

The package today contains implementations for NS2.0(throws PNSE) and NCA2.0-Windows implementation. That means that we could potentially do that, but that would basically mean drop Unix support for this library for netcoreapp 2.0 and 2.1 which IMO is not what we want. The issue that we tried to fix by adding support on Unix was logged in 2017 and has 250+ upvotes meaning that most likely there are NCA2.0 and NCA2.1 apps out there that could benefit by adding this support today, and it seems wrong to me to drop 2.0 and 2.1 just because of a tiny implementation detail which is why for now we opted to cross compile."
"I think we should be fixing the error reporting we have instead of introducing a redundant one. The checks left in this PR are about validating that you got good cmake and C++ compiler. The best way to validate that you got a good cmake and C++ compiler is to compile something and run it.

My proposal is that we create a new subset that is built before the package restore step. This subset should compile a ""hello world"" using cmake, run it and fail the build if anything goes wrong. This design should have mimimal duplication and it will ensure that the tools actually work (e.g. that cmake is of the right version, etc.)"
Found the catch - this will do the wrong thing for a non-symlink file in a symlinked directory.
"Now I'm confused.  

Are there two problems here?

1. Do we agree that the test is definitely wrong? it shouldn't dispose of the `Metafile` instance in the scope of a `Graphics` that's using it?  If so then this is the PR that fixes that.
2. The next question is - if it's possible for libgdiplus to detect that it's being used incorrectly, should we assert or return some error code?  (I see that `Image.Dispose` is prepared to deal with error statuses, so
https://github.com/dotnet/runtime/blob/master/src/libraries/System.Drawing.Common/src/System/Drawing/Image.Unix.cs#L448 maybe the right thing is to return an error code from libgdiplus)

If there's a bug to be fixed in libgdiplus, I think that's a separate issue, no? 
"
"Hey @github, something went wrong when publishing results. ([You can check the log here](https://typescript.visualstudio.com/TypeScript/_build/index?buildId=103055&_a=summary))."
"> I thought that adding `undefined` wouldn't change anything since that used to be the semantics, but it sounds like I was wrong.

I believe the deal is that if you naively add `| undefined` to _every_ optional property, you wind up with no errors, minus the ones you couldn’t change because they were in node_modules etc. But the codefix doesn’t want to add `| undefined` to every optional property; it just does the ones that it identifies as needing to change. [Here’s](https://www.staging-typescript.org/play?exactOptionalPropertyTypes=true&ts=4.4.0-pr-45032-20#code/PTAEAEFMA8EMGMAuB5ADoglgewHawDYAKATlqpMYgJ4AqV5AzgFyiLECukAUDxjohQBmCSKACCARlABvLqFCwA-CwZs+Ac1AAfUDnYBbAEYUA3FwC+vfkJHiATDLkLloVcQ3bQhrFnyRYOGaWXHwCxMLwogBCoDACOAAmDOISADT2jvJKKmo46kE8CZDw+LDEon6IXixRZoYAdLCgALyg7ImQgnyQCWZAA) an example of a contrived program with one fixable error that turns into two unfixable ones upon being fixed.

```ts
// @github: true

interface A1 {
  a?: string | number;
}

interface A2 {
  a?: string | boolean;
}

interface B extends A1, A2 {
  a?: string;
}

declare let b: B;
b.a = undefined;
//^^ Type 'undefined' is not assignable to type 'string' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.
```

Fixing the property assignment adds an “incorrectly extends” error for each of `B`’s extended interfaces."
"I think this satisfies what @github asked for for _devices_

Todo:

- [x] Simulator needs component dylibs
- [x] Strip things. Nothing's stripped
- [x] Catalyst has a different directory structure for dumb Apple reasons, and greatly complicates things because symlinks aren't allowed in nupkgs. Might need to hide the .frameworks inside archives of some kind (suggestions gratefully received)

Catalyst has this layout:

```
$ tree Mono.framework
Mono.framework
├── Mono -> Versions/Current/Mono
├── Resources -> Versions/Current/Resources
└── Versions
    ├── C
    │   ├── Mono
    │   └── Resources
    │       └── Info.plist
    └── Current -> C
```

Apple's tooling is creating it like that, not ours"
"There seems to be something wrong with the arg iterator, I am investigating it."
"Tagging subscribers to 'arch-android': @github, @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

- Use F_SETLK64 for fcntl to fix an issue where 32bit arm Android apps would get the wrong flag
- Add numerical magic numbers for missing file systems to Interop.UnixFileSystemTypes so they are correctly recognized
- Make ping test a bit more forgiving if the process returns a few milliseconds _before_ the timeout
- Disable System.IO.Net5Compat.Tests.csproj on Helix for non-Windows platforms like intended, we were still building it since we pass `/p:ArchiveTests=true` on CI

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>akoeplinger</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.IO`, `os-android`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"@github 
I kind of figured out how to use it, but there are a few questions.

Is it right that I run asmdiff through this?:
> py superpmi.py asmdiffs -jit_name clrjit_universal_arm64_x64.dll --altjit -target_os Linux -target_arch arm64 -arch x64 -filter coreclr_tests

The same question is, is there an opportunity to run not all tests, but some specific one that does not work? This would speed up the work of superpmi, especially it works for a long time when you set the --diff_jit_dump key to get a dump.

After the first and second run, I had a situation that regression occurs in different files, and sometimes it does not exist at all. I ran the command twice in a row and that's what brought out:

[First](https://gist.github.com/SeanWoo/7ee7c42825a61d6c9b34e5dba0eabac4)
[Second](https://gist.github.com/SeanWoo/2ec3d7649ef14f72ae233e2cabc8447e)

It seems I'm doing something wrong :)"
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

# Customer Impact

The VS4Mac team reported that native frames missing crashreport.json causing problems with their Watson analysis.

The wrong module was being passed to the remote unwinder because the load bias for shared modules
was being calculated incorrectly.

Issue: https://github.com/dotnet/runtime/issues/63309

# Testing

Local testing. Ran diagnostics tests against this change. Will get VS4Mac team to verify after this PR's build is finished.

# Risk

Low. It undo's a change/regression from PR https://github.com/dotnet/runtime/pull/61063.



<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>mikem8361</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>mikem8361</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Diagnostics-coreclr`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github/area-system-collections
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Fixes #67423


# About 

There are multiple libraries that have `ArgumentOutOfRange_Index` error message in their resource files. Even if it states that 
> Index was out of range. Must be non-negative and less than the size of the collection.

1. In some libraries it's used even in the situations where index being equal to the size of the collection is allowed. 
 
  - `System.Private.CoreLib`
  - `System.Collections`
  - `System.Collections.NonGeneric`
  - `System.Text.Encoding.CodePages`
  

- [x] Every such library was modified to throw [appropriate message on appropriate occasion](https://github.com/dotnet/runtime/issues/67423#issuecomment-1085691457).

2. In some libraries it's used solely in appropriate case of ""throw if index >= size"". So the message is ok here.

  -  `System.Security.Cryptography.Xml`
  -  `System.Security.Cryptography.Pkcs`
  -  `System.Security.Cryptography`
  
- [ ] But maybe for the sake of future development of the library we should split it into  `ArgumentOutOfRange_IndexMustBeLT` and `ArgumentOutOfRange_IndexMustBeLE` too? Just to be consistent throughout the repo.

3. In some libraries it's included in resource files but never used.

  - `System.Console`
  - `System.Diagnostics.Process`
  
- [ ] Should we remove it from there, leave as is or split it like in previous question?

# Other

### `ThrowHelper`

- [x] Some of `ThrowHelper` methods too were splitted into two. That's 

* `ThrowArgumentOutOfRange_IndexException`
* `ThrowStartIndexArgumentOutOfRange_ArgumentOutOfRange_Index`

### Docs

On msdn probably lots of methods with wrong `Exceptions` sectors. Like [`List<T>.IndexOf`](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.indexof?view=net-6.0#system-collections-generic-list-1-indexof(-0-system-int32)) here:
![image](https://user-images.githubusercontent.com/32279961/162179513-111237bf-1b51-4891-bc49-89f5261956d8.png)
This one actually **CAN** accept index that equals to it's length. 

- [ ] I want to fix it, but I thought it would be quite a piece of a commitment, so decided to ask first: may I?

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>B1Z0N</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Collections`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
I see this brings in System.Graphics. We are in the middle of a rename Microsoft.Maui.Graphics. It really should depend on that. Also the MauiShapeViews are  using Platform Specific drawing layers. This is wrong. They should use the graphics layer. That way it will draw with any graphics backend.
It would work 99% of the time. The only time BaseDirectory would be wrong is when the app is published into subdirectory.
"Nevermind, this logic is wrong. We can only rely on UrlContext if this instance created the queue. Otherwise we don't know what those indexes were set to. We'll have to iterate through the collection and look for the longest match manually."
"/fyi there were two things wrong w/ the old `BeforeTargets` value:
1. `ResolveAssemblyReferencesDesignTime` didn't matter because that depends on `ResolveAssemblyReferences`
2. `ResolveAssemblyReferences` runs later (closer to `CoreCompile`) than needed to ensure information needed from packages is available where / when it needs to be"
"> Would the above be `Slice(0, args.Length)`, or `Slice(args.Length)`?

`Slice(0, args.Length)` (sorry that the comment shows it wrong).

> For my understanding is the constant value performance gained on a level below IL?

The JIT can produce better [machine code](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIAYACY8gOgCUBXAOwwEt8YLAMIR8AB14AbGFADKMgG68wMXAG4aNYgGYG3XNgBmMJqQYAxCBAYBvGgwdNdwAJ4YTAQQAUvHg1y8AF4wAJT2jnbUjtEMru4AVAxiGFAMALz+GNhgANbYkpIQYLFuMADaAcEAuhpRMQ7EAOwM8clQtdEAvuEOPU4l7gwAQj5+laF9kfUOcTCJbemZ2XkFRQPlpACsSDV90U0tbR2O3XW9Zwxlsjm8YgAyRfm4AJJcvBhVfTrrDEKjGP4gjBAmELlNprN5ilFrgsrl8oVirMylsdsd6gdWil0QxTp0gA=) as with the constant (a power of 2) it's just a pointer move and zeroing -- except `[SkipLocalsInit]` then it's only the pointer move.
If stack-allocated to a `size` then the JIT has emit code that figures out the right size at runtime, which is overhead as it needs to round up to a power of two anyway.
Further note: small constant value (i think 16 is the limit) will be treated as ordinary locals by the JIT -- another optimization done.

> relying on stackalloc being zero-initialized

Good point!
Right now you can rely on the runtime to zero-init the stack-allocated content, as there's no `SkipLocalsInit`-attribute applied. But be aware of https://github.com/dotnet/aspnetcore/issues/26586.
"
"> ReferenceEquals(decodedElementType, type) [](start = 19, length = 41)

There is something wrong with this check, it will never be true. #Closed
"
"Compare to
- https://github.com/dotnet/aspnetcore/blob/main/eng/helix/content/RunTests/TestRunner.cs#L225
- https://github.com/dotnet/aspnetcore/blob/main/eng/helix/content/RunTests/TestRunner.cs#L243

It's likely you're still using the wrong syntax and `$(RunQuarantinedTests)` overrides `--filter` options anyhow: https://github.com/dotnet/aspnetcore/blob/main/eng/QuarantinedTests.BeforeArcade.props#L7-L10"
"https://github.com/dotnet/aspnetcore/blob/c3acdcac86dad91c3d3fbc3b93ecc6b7ba494bdc/src/ProjectTemplates/test/Infrastructure/GenerateTestProps.targets#L18 is resolving to `3.1.2`, due to https://github.com/dotnet/aspnetcore/blob/c3acdcac86dad91c3d3fbc3b93ecc6b7ba494bdc/eng/Versions.props#L36. This seems wrong - now the deb/rpm installers will pin their PackageVersions to 3.1.2: https://github.com/dotnet/aspnetcore/blob/c3acdcac86dad91c3d3fbc3b93ecc6b7ba494bdc/src/Installers/Debian/TargetingPack/Debian.TargetingPack.debproj#L41

@github my interpretation here is that we shouldn't be pinning `TargetingPackVersionPrefix` to 3.1.2 - it should just be the repo's version prefix. I'm not quite sure what the template tests should be referencing, though"
"Ah oops, looks like I copied the wrong link, this should be it: https://dotnetcli.azureedge.net/dotnet/Sdk/5.0.100-rc.1.20452.10/dotnet-sdk-5.0.100-rc.1.20452.10-win-x64.zip. 
"
"not always. it is reported only on cases when we found the member, but something was wrong with it. 
The idea is to help implementers of the method, but not complain about the method when it is clearly not provided.

---
In reply to: [167649336](https://github.com/dotnet/roslyn/pull/24469#discussion_r167649336) [](ancestors = 167649336)"
"The commented out code, which is being deleted, was simply wrong.

---
In reply to: [171346660](https://github.com/dotnet/roslyn/pull/23921#discussion_r171346660) [](ancestors = 171346660)"
"> Changing editorconfig is not a pre-req for commenting on pull requests.

I'm not saying it is a prerequisite. I'm saying it will reduce noise in the pull request and will be less of a shock for users who: 

1. Work elsewhere in dotnet/roslyn
2. Become used to the UI alerting them to use `var` everywhere
3. Write code in the compiler layer using `var`, and find no UI indication that anything is wrong
4. Submit review, blows up"
"> I assume if StatusCodePagesMiddleware with re-execute would be used after routing it will automatically add the routing, right?

@github, @github's comment makes me realize we designed this wrong. `UseStatusCodePagesWithReExecute` must go _before_ UseRouting to work, but it must go _after_ routing for `[SkipStatusCodePages]` to work. Both are not possible. We will have to re-think the ordering requirements. Either re-open #10317 or file a new issue please."
"❕ This is a collection initializer, not an object initializer (test is correct, but the method name here is wrong)"
you are passing the wrong cancellationtoken here.
"This seems wrong. We should either not be offering a FixAll in document in generated files OR if we do offer it then it must apply the Fix all instances in the document. "
"same comment from previous PR about defaults and additional docs.  personally, i don't even like what we had before.  but at least it was only ""real doc + additional doc"".  now that we're adding more types, having this sort of 'implicit additional default' feels very wrong to me.  "
"making LanguageSettingPersister (or IOptionPersister) UI thread free is not small work.

I believe proper way to fix it is make IOptionPersister (http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/Options/IOptionPersister.cs,b13bd3bcaf4949ad) to be async interface.

and change everyone who using it to async

and then make LanguageSettingPersister to use JTF to lazily initialize it when they need it.

and caller (directly or indirectly through other service) on UI thread should change to use JTF.Run

…

any other way to fix it seems a hack such as creating yet another service just for LanguageSettingPersister so that it can queue actual work to other service which can have race (if someone ask option too fast, data is not there yet or if someone save data at wrong time, it doesn't get saved since VS passed shutdown time, or block shutdown time and etc which just make things more complicated)

…

anyway, I believe this PR is not trying to fix underlying option persister problem we have been having for several times now. 

we should have issue opened for this issue and there are other IOptionPersister issue (https://github.com/dotnet/roslyn/issues/27677, https://github.com/dotnet/roslyn/issues/27678)

and fix it all together. and this part of code (UI, JTF) seems people having many different opinions.

so, we should bring this to design meeting and agree on how to fix option persister issue once for all. 

tagging @github "
"I personally have a small preference for it.  At the same time, it really is just a personal preference in general, and obviously some folks have the opposite opinion, and I don't want to force my preference here on others.  Given that, I'd suggest fixing the analyzer and then just redo'ing the PR with the new results, since I think 99.9% of the changes here are from span/memory (David, correct me if I'm wrong)."
"Repro'd. It's not fixed by using isVisible instead. The issue is that when the user snaps the panel hidden, this function is called while the panel is still visible.
It could mean the event is firing at the wrong time."
"> In particular, what the behavior of calling SemanticModel.GetIOperation on that UnsafeStatementSyntax is.

I would expect to get nothing as for any node that disappears from the tree, parenthesized and such.

> The Type property of those nodes will be wrong unless you wait for [https://github.com/dotnet/roslyn/pull/42403](https://github.com/dotnet/roslyn/pull/42403) to merge and merge 16.8-p1 into your local code, but I'd expect other symbols like the method symbols of IInvocationOperations or local symbols to reflect the correct nullability.

These are statements, they do not have types, and I expect to get no IOperation node for them.


---
In reply to: [444547469](https://github.com/dotnet/roslyn/pull/45334#discussion_r444547469) [](ancestors = 444547469)"
"@github I believe Jason and I discussed this and, correct me if I am wrong, the purpose of implementing the IAccurateTagger is for thread safety concerns? I think since the tagger and the UI element are being created on a completely separate thread than that of the tagger provider which is finding the locations of the adornments means it's going to be threadsafe inherently? "
"This is failing on iOS and Android. It's possible that 1. this bug is also affecting those platforms, 2. this is actually not a bug and is expected behavior, or 3. the test is wrong.

```
Expected: 15
But was: 18.0d
```"
"I also took a look at the files in this PR and there are some issues with the icns file (wrong icon and corrupted images)

![image](https://user-images.githubusercontent.com/35271042/94845804-0adb6580-03d5-11eb-8867-39f94fdccb34.png)
"
"Yes they do. I've added them for completeness and as regression tests. They don't rely on the Pointer class tho, so this file may be the wrong place for them."
"We plan to deprecate our DependencyService in the near future. merging this now would send the wrong signal. So I'm closing this for now.

If our plans change and we keep our DependencyService, we'll reopen this."
"> But doesn't this mean that this PR is invalid?

I think so, the difference between colors is a visual hint that something is wrong with the comment"
"> This PR fixes the proprietary blobs with opensource vscode :) #
> 
> 

are you crazy?

Open source is great. But do you get permission from all contributors? "
"would it be tremendously dumb to oneline this as 

```c++
        return _GetActionByKeyChordInternal({ modifiers, keys.Vkey(), 0 }).value_or( _GetActionByKeyChordInternal({ modifiers, 0, keys.ScanCode() }).value_or(nullptr));
```"
"> What's wrong with just recognizing the different kinds of methods, lambdas and local functions?

i'm not strictly opposed to that.  it's more that it means keeping that list maintained.  for example, if we add a new construct to the language.  THe benefit of ISymbol.Location is that it exists for this purpose.

> but I think doing it syntactically seems easier.

I'm not certain.  LMK what you find.  I personally think symbolic would be easier.  but i could be wrong here.  I also don't my symbolic as goto-def is normally semantic work anyways, so it's not like it's a bad thing for us to go to symbols here. #Resolved"
"Hm, that's definitely not expected. A guess at what's happening- perhaps the cpp file you open finds the wrong `pch.h`, while the header finds the correct one. IntelliSense could then build a working PCH in response to opening the header, which could then be picked up by the cpp file when you return to it.

If so, one thing to double check is the order of the `AdditionalIncludeDirectories` list. Make sure `lib` is before the existing `..`. (Or even replace it, if that doesn't break anything else?) It might also help to temporarily disable PCH use project-wide and make sure the compiler can still find everything.

If that doesn't help, then maybe it's just some leftover state that would go away if you did ""Project > Rescan File,"" restarted VS, and/or deleted the .vs directory. (Fair warning, that will reset a few things like the set of open files; if that's a problem then it may be enough to delete just `.vs/<Project>/v16/ipch`)"
"> For my records here...
> 
> The weird crash I was experiencing in the middle `OpenConsole.exe` while testing off the handoffs from the operating system, especially from background tasks running out of things like Visual Studio, VS Code, and on login, were because there was TOO MUCH handoff occuring.
> 
> I had a torn state. My inbox console was doing the very aggressive handoff strategy, including in the case of connect of a second client. That's no bueno. The handoff happens just fine, but the `OpenConsole.exe` accepting the handoff doesn't have the process list table or other records of the already connected clients. Therefore when it eventually receives a disconnect message for them... it tries to look them up in its table and horks because it was the `conhost.exe` that accepted the initial connection, not the `OpenConsole.exe`.
> 
> I already solved this problem in [1cf4fb1](https://github.com/microsoft/terminal/commit/1cf4fb180634333b24fb1cda2797e45c3d18490d) by blocking handoff for attaches and for consoles that are already initialized the first time.
> 
> I'm putting my foot down that there's no half way state here right now. Either the inbox one, when it initially starts up, hands everything off and is done with the matter OR something goes wrong and the inbox one remains the console server for the remainder of that session. Otherwise there's this state and countless other state that would have to pass, and that's beyond the scope of what I'm trying to accomplish right now.
> 
> Also, technically, we probably should be having some opaque value stored in `CONSOLE_API_MSG.Descriptor.Process` instead of a `(ConsoleProcessHandle*)` so this would fail in a table-lookup sort of way not an access violation from a weird pointer dereference off of a foreign heap value. But I'm just going to put this over here...
> ![image](https://user-images.githubusercontent.com/18221333/111551128-c18d9100-873c-11eb-8d60-c9a4cf875eff.png)

Stories like these are why I browse open source, good luck with the rest of the fire.😅"
"> Now I don't want to go too crazypants here, but I'm thinking about future extensions to some degree.
> 
> I'm curious if you considered a design where the text buffer figures out the patterns on its own instead of being pumped to do that action by a thread from way outside itself, in this case from up in the Terminal* and friends.
> 
> I'm not saying this one is bad or wrong, but an alternate vision I have is that you would register an object with the TextBuffer that contained a pattern, region of interest, and a callback method/event inside of it. The TextBuffer would just... of its own accord as things are written in on the other methods (and maybe with its own internal, private thread or threadpool worker) grind through the region with the pattern and make callbacks as necessary.
> 
> Almost like you have an `ITextScanner` interface with an `ITextMatchFound` callback interface... which might lend itself toward easy adaptation into a COM/WinRT-based plug-in model for arbitrary buffer scanners in the future.

As Dustin and I are musing about this... your `ITextScanner` could just also contain `ITextEffect` on it as an optional in lieu of a callback that is just handed straight into the renderer and now you've also managed to design rendering effect extensions at the same time..."
"Please check my thinking here, though, since I could be wrong :smile:"
"🤮 now the commit history is extra crazy. sorry about that. Probably just best to review #9854, get that in, then let me rebase this one. 

The commits that actually comprise this PR are:
305e627..045a8db, c95a429, 24bfbe6"
"I believe this logic was wrong (and was wrong before).

We should only treat readBytes == 0 as EOF here if we don't have any bytes already buffered. 

This can only happen on the first read through this loop, **but** just the fact that it is the first read doesn't guarantee we don't have bytes already buffered from previous read calls.

I think this actually ends up making the logic simpler, since you don't actually need to treat the first read and subsequent reads differently. You just need to fail the case when we readBytes == 0 but we already have some data buffered."
Does this mean that we are technically constructing a font fallback *every time there's a `j` or `i` in the input?* That seems crazy. Can you verify if that's the case?
"> Should `sufficientFraction` instead be computed based on the number of cases...?

Maybe? Seems like 3 could be special case.

The likelihood needs to be high enough to offset the cost of the extra compare and branch if we guess wrong. So I think the likelihood should always be at least something like 0.3 and not go lower for larger switches. That covers switches with 4 or more cases.

We already specially transform switches with 1-2 cases in `fgOptimizeSwitchBranches`. We likely also handle case switches, though I don't see where we look for these.

That leaves 3 case switches. If we have a dominant non-default case over 0.3 and are also going to peel for the default then we're basically reducing the switch to a compare tree, but not getting the full benefit of doing so. I think this is ok for now.

-----

(Some other notes on switch peeling)

Ideally, once we peel, the residual switch would get simplified and perhaps some of this other logic would kick in and simplifies things further.  We could do this now if we peeled the highest numbered case, but not if we peel some other case.

Since we're always peeling the default (when lowering, so it would be peeled under any peel we do here), we should perhaps change strategy if the default case has a reasonable likelihood. For example, say there are 10 cases and the default case likelihood is 0.5, and case 0 has likelihood 0.25. We'd be better off first peeling for the default case. Once we do that, we can renormalize the switch likelihoods (multiplying by 1 / ( 1 - 0.5 )) and so case 0 relative likelihood is now 0.5, so we should peel for that case.

Of course once we do that second peel we can renormalize again and perhaps another case now becomes likely enough that we'd be willing to peel for that too. The rule of thumb I've seen here is that going up to 3 levels here can pay off (say the dominant cases are 0.9, then 0.09, then 0.009, these all become 0.9 with successive normalization). But I'm not sure we're ready for this just yet, as we also have to keep wonder how accurate our profile is when we start getting into the tail of the frequency distribution, and balance likely performance win vs code size increases. And there's some cost to having a high branch density.


"
I removed this.  I believe it was a legacy from our using the wrong version of NuGet in source-build.
Your indentation is wrong somewhere.
"> And also a test for where the outer class isn't partial, or at least verify the behavior manually? To ensure the user gets a decent error experience so they know what they did wrong.

For something like
```c#
    class ClassNotPartial
    {
        internal static partial class NestedClass
        {
            [LoggerMessage(EventId = 10, Level = LogLevel.Debug, Message = ""M10"")]
            public static partial void M10(ILogger logger);
        }
    }
```

We'd get
```
error CS0260: Missing partial modifier on declaration of type 'ClassNotPartial'; another partial declaration of this type exists 
```
I think the error message is clear enough.

---

TODO

- [x] Add a test where the outer class isn't static
- [x] Test with a struct outer type as well."
"Don't get me wrong here, this isn't a technical limitation. The targeting pack is already constructed before references for OOBs are resolved. Projects can opt into not defining their granular reference via this property: https://github.com/dotnet/runtime/blob/fc4a42746d9cf65ad3db4074207069ab9c168bc9/src/libraries/Microsoft.Extensions.Logging.Console/src/Microsoft.Extensions.Logging.Console.csproj#L8-L9"
">  I refactored this a bit, but I ended up that I'll need to ask the property whether it has a get accessor or not

This sounds wrong. If accessor knows whether its body is supposed to be synthesized and that is something that is known at its construction time, then why do we need to ask property anything here?"
elif TVOS but the string says: maccatalyst14.0 that will result in a warning with either the wrong string or wrong platform.
"In any case this change is wrong, the P/Invoke accepts NULL for the parameter in question (which means that the managed parameter should become nullable instead)."
"@github It works, I just updated the PR by changing only the Build agent and setting HOME. I was verifying the wrong bits"
"Actually, I'm wrong. It is a requirement for `ReadOnlyDictionary<TKey, TValue>`"
"Might be a dumb question, but why do we limit it to 5 characters?"
"Leaving a comment just to share a conversation I had in my head.

* Me: OK, this is changing whether or not we call base..ctor.  Why is that making me slightly nervous?
* Also me: dtor.
* Me: Right...  ok.. what does `new` do?  Allocates space for all the fields, runs field initializers... base to derived? Then invokes the ctor, derived to base.  Right?
* Also me: As far as I know, that's right.
* Me: K.  So if base has a Finalizer...
* Also me: which it doesn't.
* Me: ::eyes also me warily:: IF base HAD a Finalizer then the finalizer would still run, but without running the ctor.
* Also me: Doesn't apply here, but yes.
* Me: And that should, in general, be fine because a) if that broke something here you wrote the dtor wrong and b) we don't have a lot of dtors.
* Also me: You know that a finalizer and a dtor are different, right?
* Me: Yeah, I'm being lazy when typing.
* Also me: Continue, then.
* Me: K.  So this pattern is fine if there's no dtor on the base type, and if there is then maybe do a quick check to see if it does weird things based on base.ctor.
* Also me: How do you know if the base type has a 'dtor'?
* Me:  I'll... uh... know by instinct?
* Also me: So you're not gonna check.
* Me: I might.
* Also me: All right, then.

In conclusion: it's fine.  Probably always. But definitely here.  By assertion."
"My recollection (no, I haven't rewatched the video) is that this is supposed to be a friendly method.  Basically, on the order of ""back up this directory to there"".  If it returns true, everything's happy.  If it returns false then now I have to do something more complicated.  The copy stopping at the moment the first thing went wrong is super easy to explain, sure, but has low utility... if it long-path-name violated out on the first file but literally everything else could have succeeded, then the method has now annoyed me more than helped me.

Put another way: With no retry policy/error handler callback/etc, the method feels, to me, too trivial to be worth adding if it throws on the first failure (except for a few degenerate cases, like ""your destination is an illegal path"")."
The indentation here is wrong.
"This is wrong.
"
"Wut. That seems... wrong? The function is inline and anonymous, so it should be hoisted in declaration emit into a local member named `_exports`.

For this file, I'd expect declarations like
```ts
declare function _exports(p: number): void;
declare class _exports {
  constructor(p: number);
  t: number;
}
declare namespace _exports {
  export function Sub(): void;
  export class Sub {
    instance: _exports;
  }
}
export = _exports;
```
ideally. ...I guess it's fine? I think it's the reference in `Sub` that actually would trip us up, since we can't track the rename+hoist. If `Sub` didn't have a public reference to the exported class, I'd definitely expect it to be OK."
"```suggestion
                    DigestAlgorithm = counterSignerKey is DSA ? new Oid(Oids.Sha1, Oids.Sha1) : new Oid(Oids.Sha256, Oids.Sha256)
```


MacOS is failing because it's trying to sign with SHA2+DSA which it does not support, but we're checking the wrong key for ""is DSA"" here. This should green that up."
"Beyond these unit tests validating safe size, are we missing functional tests, i.e. patterns/inputs that would be producing the wrong answer on NonBacktracking before this PR?"
"It is currently not an issue because `impNormStructVal` makes sure to either wrap things with an `OBJ<correct handle>`, or spill to a local of the correct type.

The sequence of events where things would ""go wrong"" would be along the lines of:
1) We spill `Vector4.Zero` to a temp typed as `Vector128<int>`.
2) We forward-substitute into said temp. (which cannot happen today)

It is not a theoretical problem. I've hit a case #69965 that was similar in spirit (only there the handle pre-morph was correct, but lost after morphing the argument)."
"This fixes the types and symbols on tests allowJscheckJsTypeParameterNoCrash`. If you feel like this are wrong, I can roll it back as without this the crash is fixed."
"> So we write to what we hope is happening, but we are resilient to being wrong. 

I don't dispute this fact. I'm just saying I'd prefer throwing and catching an exception at one spot instead of having to propagate failure manually using TryXxx pattern throughout the code. I assume now that all the TryXxx methods only return false if the compiler does something we don't expect, but it's not obvious from looking that the code.

> What is an incorrect input? How do we test that?

Couldn't you create `SyntaxToken` with invalid `Text` using `SyntaxFactory.Literal(..)` and pass it to the method?
"
"> Is this blog post a fair assessment of the cgroup v2 landscape?

Yes, I think it is. I have been using it as the source of truth myself :smile: I haven't found anything in it that's wrong.

For a more technical details, https://systemd.io/CGROUP_DELEGATION/ is also a useful resource as is https://www.kernel.org/doc/Documentation/cgroup-v2.txt."
"> I already did.  See DuplicateDeclarations_04

I might be wrong, but it doesn't look like the test binds ```source``` against retargeting ```baseCompilation```. At least I do not see where we assert expected diagnostics for this scenario. 

---
In reply to: [657904694](https://github.com/dotnet/roslyn/pull/45849#issuecomment-657904694) [](ancestors = 657904694,657898198)"
"@github, we document the OOM that can be thrown by failing to allocate as a ""catastrophic failure"" and distinct from the user-defined variant: https://docs.microsoft.com/en-us/dotnet/api/system.outofmemoryexception?view=netcore-3.1#remarks

It might be that the docs are wrong here, but I would still classify it as breaking even if you already could get OOM, because its general classification is different and the user might interpret it differently."
"I checked on the `isNewIdentifierLocation` as well and I disagree it must be true. This issue only happens for `js` files and when comparing against `ts` files, `isNewIdentifierLocation` still remains as false. `symbols` and `keywordFilters` are the ones that avoid returning early.

In regards to the tests, the completions provided are actually incorrect as the code would be wrong and not really access the property. i.e. in `completionInUncheckedJSFile.ts`, hello and goodbye are not related to the console object or in `javaScriptPrototype2.ts` the example is not really able to access to ctor prototype attribute so completions would be incorrect in my opinion.
"
"Hah, I'm actually XState maintainer 😅 In a way - I think that our types need a solid overhaul *anyway*. I wonder if there is anything in particular that we could take into consideration when refactoring, are there any particular things that we could try to avoid. While... we are flattered to be included in your perf test suite 😉 it's also a good sign that maybe we are overcomplicating things for the typechecker. 

Some recent changes to our types are in particular quite crazy (those designed to work with the typegen and have very unusual patterns used in them to ""stitch"" types together). My sincere hope is that this particular perf problem is not related to this part of the types as I took a loooot of time to get them working. Could you tell me against which version of XState are you running this benchmark? It would be useful for such information to be included somewhere in the result - as far as I can tell it's not in the comment of the bot nor in the attached benchmark file.

When it comes to the variance itself - I'm pretty sure our types ""get it wrong"" (from the user perspective). While I understand the concept of variance and can ""compute"" variance type in simple cases, I have no idea how I should think about it with such complicated types as ours, with a lot of layers, a lot of generics etc. Are there any resources/comments from the past that could help me understand this? Are there any tricks that could help TS to determine the variance type ""quicker""?

On a more positive note - I've tested this build and it seems to fix my minimal repro case reported [here](https://github.com/microsoft/TypeScript/issues/44572#issuecomment-1042915921) and it also fixes the issue in our repo from which I've distilled this minimal repro. 🎉 "
"@github maybe it's worth adding this feature to the 4.6 beta blog post:

https://devblogs.microsoft.com/typescript/announcing-typescript-4-6-beta/#control-flow-analysis-for-dependent-parameters

The blog post does not mention object restructuring, only tuple/union destructuring, but I checked the 4.6 nightly playground and it works with objects too now, which is highly anticipated by React users (more than the example showcased in the blog post IMHO)

---

Edit: oups actually I'm wrong it's not yet 100% good enough for React, and the following still fails:

```tsx
import React from ""react"";

type ItemData =
    | { kind: 'user', name: string }
    | { kind: 'company', id: string }

function Item({ kind, ...data }: ItemData) {
    if (kind === 'user') {
        <div>{data.id}</div>
    }
    if (kind === 'company') {
        <div>{data.name}</div>
    }
    return null;
}
```

But the following now works:

```tsx
type ItemData2 =
    | { kind: 'user', data: {name: string} }
    | { kind: 'company', data: {id: string} }

function Item2({ kind, data }: ItemData2) {
    if (kind === 'user') {
        <div>{data.name}</div>
    }
    if (kind === 'company') {
        <div>{data.id}</div>
    }
    return null;
}
```

Still worth highlighting that in the post :)

"
"On a desktop with tsserver logging enabled [1], I created a simple project, then opened a new Typescript file and pasted in some code [2].
I opened ajv.min.js, a single-line 121k file, and switched back to my test file. Goto-def was responsive after a second or so.
Then I opened Typescript's own run.js that we use to run tests, a 14 MB file, and switched back to my test file. Goto-def was responsive after 2-3 seconds.

- In both cases, as soon goto-def was responsive, the rest of the language service was responsive.
- Code notified me that it was not tokenising ajv.min.js, and there was no syntax highlighting.
- It took considerably longer to get quick info from run.js itself when I switched back to it. Probably another 10 seconds?

Based on this:

1. I think it's fine to proceed with the simple approach of requesting semantic diagnostics for plain JS files. If a particularly slow use case turns up in the beta period, we'll have a couple of ways to fix it.
2. I'll try to find out why grammar errors are in the checker and see how hard it would be to move them earlier. They make up about 20% of the errors in the checker, and most of the value for plain JS is probably in the grammar errors.

[1] So, faster because it's a desktop; slower because logging is on.
[2] Just some random code I worked on recently.

```ts
export class C {
    set x(...n) { }
}
declare var x: Promise<number>
await x
const y = await x

class Test {
    foo() {

    }

    bar() {
        this.blargh(this, ""completely wrong"") // Can't autocomplete second parameter

        const t = new Test()
        this.blargh(t, ""bar""); // Second parameter autocompletes to ""foo"", ""blargh"", ""bar""
    }

    blargh<T>(a: T, k: keyof T) {
        // some implementation
    }
}

const t = new Test()
t.blargh(t, ""bar"")
t.blargh(t, ""hi"")
```"
"Tagging subscribers to this area: @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

The goal of this PR is change the current files to support the implementation of iCorDebug on mono:
- Split debugger-agent into debugger-protocol and debugger-agent, debugger-protocol will be used in the next PR in mscordbi implementation.
- Fix strings with the meaning of the commands, there were missing strings and then the PRINT_DEBUG_MSG was printing wrong information.
- On debugger-engine pass the offset of the IL when stop in a breakpoint.
- Created a new protocol major version to support the changes that we need to implement mscordbi.
- When mono debugger is started with server=n will waint until the timeout for a server to connect, this is necessary because depending on how we will launch the process with iCorDebug implementation, maybe mono will start before the debugger server(mscordbi). 

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>thaystg</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Debugger-mono`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
oh actually NM.... I was wrong - I forgot that we do not go into the code path that adjusts `gradual_decommit_in_progress_p` if we are in `pause_no_gc`... so I agree with you @github.
"Tagging subscribers to this area: @github, @github, @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Fixes partially issue #51564
(this issue is still under progress, more PRs are to come)

This PR makes the following calls compliant with Interop gudielines :

* Crypt32.CryptQueryObject
* Crypt32.CertGetCertificateContextProperty
* Crypt32.CertDuplicateCertificateContext
I know the PR should be small, but it's barely the minimum to move CryptQueryObject : this call uses many struct/enum/class and safe handles, that should either also be moved to Common folder.or deleted because they already exists there (so we need to reuse the later)

There's a change to CERT_INFO class inside Common folder, so it uses the created struct FILENAME (like CERT_INFO inside System.Security.Cryptography.X509Certificates\src\Internal\Cryptography\Pal.Windows\Native\Primitives.cs), using CERT_INFO with COM FILENAME causes overflows in tests since it uses int instead of uint.

I create this file Common/src/Interop/Windows/Crypt32/Interop.CertGetCertificateContextProperty_NO_NULLABLE.cs instead of reusing Common/src/Interop/Windows/Crypt32/Interop.CertGetCertificateContextProperty.cs because it's referenced by System.Windows.Extensions which does not support nullable yet

Sorry for the PR #60218 I was trying to solve a conflict by rebasing my branch on master and I did something wrong.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>pedrobsaila</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Security`, `community-contribution`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"macOS arm64 ABI is different in that multiple small arguments can be packed into the same stack slot. It means we have different behavior in some places in the JIT, and that different behavior was wrong here.
The behavior for the other ABIs did not have this bug."
"Hey folks this is getting really elaborate:

1. Is the string supposed to be UTF8 or UTF16 when it goes into the buffer?  all this talk of `wchar_t` is confusing.  We generally don't use `wchar_t` in Mono - we use `gunichar2` for utf16 and `ep_char8_t*` for UTF8
2. Is it important to use fancy string storage here? Anything wrong with just heap allocating a buffer?
3. If we need to use fast fancy storage, how about using a MonoMempool ?

/cc @github "
"Nevermind the first one as well. I was looking at the wrong overload too. The one that is now internal is in the generated syntax code. Thanks
"
"It's difficult to quickly glance at the cases being tested. Instead use:

```csharp
                async Task CheckEvaluateFail(string expr, string message)
                {
                    (_, Result _res) = await EvaluateOnCallFrame(id, expr, expect_ok: false);
                    AssertEqual(message, _res.Error[""result""]?[""description""]?.Value<string>(), $""Expression '{expr}' - wrong error message"");
                }
```"
"cache cached descriptor, but descriptor can have different exception handler subscribed to it. so if one uses cached descriptor without checking whether given exception handler is subscribed to the descriptor, returned value could be wrong. @github should be able to explain more detail.
"
"As a side note, I had trouble finding a reasonable area label for this change. The bot ended up choosing ""area-infrastructure-coreclr"" but that seems just wrong, this is not an infra bug, this is a plain code bug in the CoreCLR native runtime build."
@github I don't understand what's going wrong with the tests/PR. I have copied the behavior/structure from the `AbstractMakeMemberStaticCodeFixProvider` (and sub-classes).
"heyYui, can you file a bug on having us provide a better error message here.  Here we're giving an error about 'pop' being wrong (where pop is a method on Array), where it would probably be better to indicate that the type of the tuple array isn't assignable to number.

This is all about improving the error message and providing more directed, useful, information to the person who runs into this.

Thanks!
"
"> Couldn't you create SyntaxToken with invalid Text using SyntaxToken.Literal(..) and pass it to the method?

Could do that.  We'll need a way then to *not* trigger the telemetry/watson reporting in that case.  

i.e. we need to still get info about when this happens in the wild, while not bothering to report on teh cases we're using in tests just to validate that our invalidation logic works.

--

This is all seeming exceptionally overwrought IMO.  There is absolutely no precedence for this afaict in teh IDE.  We simply do not attempt to construct/test things we don't think are possible.  Nor do we try to assume things not stated through contracts.  Things we hope to be true we code for, and we bail if false, optionally reporting the unexpected cases to us.

That way, when we're wrong about an invariant, things legit crash (possibly caught by a boundary exception layer), and we can get info in a non-crashing way for things we're uncertain about.
"
"After some sleep, I'm wondering if this should be netcore-only since even if the existing behavior on legacy is wrong, code could rely on it anyway (especially since it reflects windows docs, even if they're wrong)."
"Thanks for following up on this PR, and my apologies again for giving the wrong guidance on how to handle the WRN_PrecedenceInversion.

Basically I'd suggest that if the warning blocks emit in a test, for example, that we can parenthesize in order to suppress it, but for most tests it is probably good to just paste in the new diagnostics."
"> how do you determine what actions should be run as separate AzDO tasks and which should be within single task? E.g. you can argue that signing should be separate if you want to see how signing time has changed over time.

I made the determination based off of various investigations I've had to do over the past few years which required me to essentially analyze trends or flakiness across builds. The most notable areas where this occurs is restore, SDK acquisition and test duration. 

As for signing I've definitely seen that be a problem in official builds where the signing service has caused us enormous grief. I haven't personally had to track it down myself on non-official builds where we aren't hitting the service. If you think it's a source of problem though I can pull that out too. 

> Seems like AzDO is really not very well designed in this aspect. Either you put more stuff into AzDO tasks, making your YAML more complicated and your build not runnable locally, or you put everything into one script that you can run locally but can't get AzDO telemetry out of - or can you? 

Indeed this is a major tension point for AzDO (and looking forward GitHub Actions). Their unit of execution is tasks and that is where they primary reporting comes from. While we'd prefer to bundle everything up into a simple script and just execute one thing. 

> Aren't there AzDO commands (printed to the script output) that would allow you to answer your telemetry questions? So instead of merging/splitting build actions couldn't we report AzDO telemetry from the build scripts?

Yes and no. 

Yes: you can use logging detail commands to create mini records. Those are structured and appear in the timeline which means scripting data collection is pretty straight forward as it appears in the timeline data stream. T

No: this is basically completely invisible from the AzDO UI, it only appears at an API level. This means in order for developers to understand what is going wrong with their builds they actually have to sift through the build logs and look at the errors. Experience has shown that on the whole developers are not great at this. Where as when a task named ""Restore"" fails it's pretty obvious what went wrong here. 

> Yes, it was the case if you wanted a specific flavor. At least basic run with some defaults worked. I think it would still be useful to have cibuild.cmd that has a single parameter that identifies the CI leg (using the display name, ideally).

One tension point I found within our own infra is understanding where the responsibility lies to change defaults based on whether or not we are running in CI. The responsibility seems to be duplicated between cibuild.cmd, build.ps1 and arguably our YML in a few places. Feels like there should be one place that says ""okay I'm in CI mode, let me set the defaults for CI"". 




"
"@github squash merge of this PR is fine. I definitely want to *merge* the PR going into VS though as those commits are carefully curated. 

I'd rather merge my PR into VS right away and have your insertion follow-up and succeed on its own. Since your insertion will appear to 'downgrade' the nuget packages that you optimize, the bot that resolves conflicts will pick the wrong one and I have to manually fix it. But if my PR goes in first (or your insertion PR targets my PR's source branch instead of main) I believe the right thing will happen.
My PR by itself doesn't trigger any RPS regressions, so loss of IBC data from the Unsafe assembly evidently isn't too significant. And since that IBC data will be back with your next insertion, it doesn't seem like they _have_ to go in together."
"### User Tests

User Tests show expected breaks for js-only projects. These breaks don't exist when not in strict mode, and are addressable via `/** @github */` jsDoc type assertions.

### DT Tests
There are some breaks in DT tests that may need to be addressed:
  - [ ] `electron-spellchecker` - `Error in electron-spellchecker\nOK` - Unsure what is wrong here as there is no output.
  - [ ] `electron-prompt` - `Error in electon-prompt\nOK`
  - [ ] `electron-window-state` - `Error in electon-window-state\nOK`
  - [ ] `electron-localshortcut` - `Error in electon-localshortcut\nOK`
  - [x] `memcached` - `Expected 1 arguments, but got 0`. These may be due to incorrect calls to `resolve` in the tests and if so are the kind of error this PR is intended to catch.
  - [x] `system-task` - `Expected 1 arguments, but got 0`
  - [x] `async-stream-emitter` - `Expected 1 arguments, but got 0`
  - [x] `graphql-relay` - `Expected 1 arguments, but got 0`
  - [x] `node-wit` - `Expected 1 arguments, but got 0`
  - [x] `react-window-infinite-loader` - `Expected 1 arguments, but got 0`
  - [x] `stream-demux` - `Expected 1 arguments, but got 0`
  - [x] `undertaker` - `Expected 1 arguments, but got 0`
  - [x] `xml` - `Expected 1 arguments, but got 0`
  - [x] `listr` - `Expected 1 arguments, but got 0`
  - [x] `mirrorx` - `Expected 1 arguments, but got 0`
  - [x] `nightmare` - `Expected 1 arguments, but got 0`
  - [x] `polka` - `Expected 1 arguments, but got 0`
  - [x] `react-router-guard` - `Expected 1 arguments, but got 0`
  - [x] `redux-form/v4` - `Expected 1 arguments, but got 0`
  - [x] `redux-form/v5` - `Expected 1 arguments, but got 0`
  - [x] `snapsvg` - `Argument of type (value: unknown) => void' is not assignable to a parameter of type '() => void'. Seems like the kind of error this PR is intended to produce.
  - [x] `react-virtualized` - `Type '(value: unknown) => void' is not assignable to type '() => void'`. Seems like the kind of error this PR is intended to produce.
  - [x] `fetch-mock` - Seems like the type specified to be assignable to `PromiseConstructor` is wrong and needs to be addressed in `fetch-mock`.
  - [x] `aframe` - `Property 'setHSL does not exist on type 'string | number | Color`. **Unrelated to this change**.

In general it seems the DT tests need to be updated, but that shouldn't be too difficult as correctly supplying an argument would be a backwards-compatible change.

### RWC Tests

Test failures in RWC seem to be expected and fall into the following categories:
- Untyped `Promise` usage in checked JS files in `--strict` mode.
- Untyped `Promise` usage in TS files when passing the `resolve` callback (whose type is `(value: unknown) => void`) to a function that expects `() => void`, which is the kind of error this PR is intended to produce.
- Expected changes to existing errors due to a change in the call signature for `resolve`.

### Summary

All errors in DT, User, and RWC tests are the expected outcome of this change. The DT tests mentioned above can be addressed by a backwards-compatible PR to DefinitelyTyped, which I can create prior to merging this PR.

Related PR: https://github.com/DefinitelyTyped/DefinitelyTyped/pull/47216"
"If we're willing to give up the expressiveness of the runtime assertions in cases where we already report compile-time errors, then the two-helper emit can be even further reduced:

```js
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (typeof state === ""function"" ? receiver !== state : !state.has(receiver)) throw new TypeError(""Private state access of wrong provenance"");
    if (kind === ""method"") throw new TypeError(""Attempted to set private method"");
    if (kind === ""accessor"") f.call(receiver, value);
    else if (typeof state === ""function"") f.value = value;
    else state.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (typeof state === ""function"" ? receiver !== state : !state.has(receiver)) throw new TypeError(""Private state access of wrong provenance"");
    return kind === ""method"" ? f : kind === ""accessor"" ? f.call(receiver) : typeof state === ""function"" ? f.value : state.get(receiver);
};
```

The above still errors at runtime in the same places (since `f` would be `undefined`), even though the error would be more cryptic. We can even further reduce the size of the `__classPrivateFieldSet` if we don't mind emitting somewhat harder to read code:
```js
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (typeof state === ""function"" ? receiver !== state : !state.has(receiver)) throw new TypeError(""Private state access of wrong provenance"");
    if (kind === ""method"") throw new TypeError(""Attempted to set private method"");
    return (kind === ""accessor"" ? f.call(receiver, value) : typeof state === ""function"" ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (typeof state === ""function"" ? receiver !== state : !state.has(receiver)) throw new TypeError(""Private state access of wrong provenance"");
    return kind === ""method"" ? f : kind === ""accessor"" ? f.call(receiver) : typeof state === ""function"" ? f.value : state.get(receiver);
};
```

Which is 9 lines of code as opposed to 14 separate helpers."
"Discussed in the call, but to put in writing—the reason `isNewIdentifierLocation` should be true in this case is because

```ts
({ | })
```

at this point you very well may be writing a new property declaration or even binding pattern, which is exactly what `isNewIdentifierLocation` is for—_any_ time you could be writing a name not already in scope, that property must be set to `true` on any completion responses. It sounds like that flag is wrong in TS files too."
"Tagging subscribers to this area: @github, @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Based on a customer feedback received in https://github.com/dotnet/runtime/issues/45592#issuecomment-741994471 I decided to try to shrink `CacheEntry` a little bit more. I was able to reduce the managed memory needed for allocating a `CacheEntry` from 280 to 224 bytes (on x64).

Main changes:

- remove two enum fields (`2x sizeof(int)`), store the information in an union struct called `CacheEntryState`. It now consists of two bytes for the mentioned enums and one byte for all the boolean flags. There is one more that is still not used, so we can add more stuff in the future ;). This looks like a magic and @github is responsible for teaching me this kind of crazy stuff ;)
- move 3 lists related to tokens to a separate type called `CacheEntryTokens`. This allows us for saving space if they are not used (the most common scenario)
- remove the `_lock` field, use the field that stores `CacheEntryTokens` for locking instead (it guards the access to the tokens and the lock is needed only to work with the tokens)

The CPU time has not changed, but allocations did:

|                           Method |                Toolchain | Allocated |
|--------------------------------- |------------------------- |----------:|
|                                  |                          |           |
|                      SetOverride |  \after_size\CoreRun.exe |     224 B |
|                      SetOverride | \before_size\CoreRun.exe |     280 B |
|                                  |                          |           |
|                      CreateEntry |  \after_size\CoreRun.exe |     224 B |
|                      CreateEntry | \before_size\CoreRun.exe |     280 B |
|                                  |                          |           |
|       AddThenRemove_NoExpiration |  \after_size\CoreRun.exe |  42,370 B |
|       AddThenRemove_NoExpiration | \before_size\CoreRun.exe |  47,058 B |
|                                  |                          |           |
| AddThenRemove_AbsoluteExpiration |  \after_size\CoreRun.exe |  41,265 B |
| AddThenRemove_AbsoluteExpiration | \before_size\CoreRun.exe |  47,490 B |
|                                  |                          |           |
| AddThenRemove_RelativeExpiration |  \after_size\CoreRun.exe |  54,482 B |
| AddThenRemove_RelativeExpiration | \before_size\CoreRun.exe |  61,090 B |
|                                  |                          |           |
|  AddThenRemove_SlidingExpiration |  \after_size\CoreRun.exe |  41,313 B |
|  AddThenRemove_SlidingExpiration | \before_size\CoreRun.exe |  46,002 B |
|                                  |                          |           |
|   AddThenRemove_ExpirationTokens |  \after_size\CoreRun.exe |  53,706 B |
|   AddThenRemove_ExpirationTokens | \before_size\CoreRun.exe |  54,634 B |

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>adamsitnik</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Extensions-Caching`, `tenet-performance`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> Does it fix the official build issue which was encountered previously (#48647)?

Unfortunately not yet. I opened the PR so that we can take a look at the binlog that is produced in the internal build to figure out what went wrong. @github mentioned that a binlog should tell."
~~cc @github~~ wrong pr
"> That is, we could compute in one of the following orders (assuming reordering was allowed):

    size, dst, src
    size, src, dst
    dst, src, size
    src, dst, size

> Now, we'll generate one of:

    dst, src, size
    src, dst, size


@github Not quite... The imported canonical order for a dynamic block copy is `dst, size, src` (notice that it is wrong w. r. t. the original IL order). So we could have:
```
dst, size, src <-- unchanged
size, dst, src <-- gtEvalSizeFirst = true
src, dst, size <-- reversed ASG
src, size, dst <-- reversed ASG + gtEvalSizeFirst = true
```
After this change:
```
dst, size, src <-- unchanged
src, dst, size <-- reversed ASG
```

I have collected the following statistics for the `DYN_BLK` nodes from SPMI:
```scala
# Collection          | Total DYN_BLK nodes | gtEvalSizeFirst nodes | Reversed DYN_BLK ASGs | Inverse DYN_BLK density |
# --------------------|---------------------|-----------------------|-----------------------|-------------------------|
# aspnet.run          | 37                  | 0                     | 2         | 5.4 %     | 1193                    |
# benchmarks.run      | 84                  | 0                     | 28        | 33 %      | 508                     |
# coreclr_tests       | 7329                | 0                     | 7312      | 99 %      | 36                      |
# libraries.crossgen2 | 48                  | 0                     | 12        | 25 %      | 4611                    |
# libraries.pmi       | 193                 | 0                     | 73        | 38 %      | 1225                    |
# libraries_tests.pmi | 307                 | 0                     | 182       | 60 %      | 1159                    |
# --------------------|---------------------|-----------------------|-----------------------|-------------------------|
#                     | 7998                |                       |                       |                         |
```
(Inverse `DYN_BLK` density = number of method contexts / number of `DYN_BLK` nodes)
(Notably I measured this just before rationalization to not have noise from cases where we turn dynamic blocks into regular `BLK`s)

So it appears that indeed, we never set this value to `true`. Most likely because in the majority of cases the `size` is a simple local node - I would not expect complex expressions as inputs to what is essentially `memcpy` to appear often."
"Stream end is a http2 and http3 concept. I assume it has no impact on http11. Probably worth double checking with winhttp folks.

I would like a unit test of a http2 server returning more content than its content-length defines. We can check what socketshttphandler does, what winhttphandler does today (pre-pr) and what it does after adding this flag.

My experience is in the server side of http, but there we validate the content length and error if doesn’t match the actual content.

Correct me if I’m wrong @github :)"
"Tagging subscribers to this area: @github, @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Handles issues like wide-char strings being passed as `%s`, narrow-char strings being passed as `%S`, 64-bit integers being passed as `%d`, etc. It's likely we'll need to make a second pass at these in a few weeks so that we can cover other configurations, but this is an initial list of matches from my dev box.

Fixes violation of CodeQL rule __cpp/wrong-type-format-argument__ (https://lgtm.com/rules/2160310550/).

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>GrabYourPitchforks</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Host`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"yea, definitely not on purpose but it's been like that since XF :-/ 

https://github.com/xamarin/Xamarin.Forms/blob/ba709a180f1ac2218a1c9fa8b0566bd92e96e215/Xamarin.Forms.Core/Brush.cs#L78

So probably been wrong for a bit now"
"My concern is that this might be a step in the opposite direction we're trying to go. We want it to be dead-simple to work on this repo, and to have obvious error messages when contributors do the wrong thing or are missing required tooling. I don't think we're there yet -- the current errors are useless --, but I prefer the build fail fast instead of failing later with mysterious test errors."
Nit: wrong class
I'll see why it's being confused since it looks rather wrong if there are extraneous files.
"We don't think we want to do this.

This I believe could result in the creation of multiple certificates if there is a persistent issue that is causing an exception here.

We'd rather see the tool fail in these cases and get a chance to understand what's going on wrong."
can you explain what was wrong with the old code?
"As this solves it in the wrong place, closing."
"> This PR is retaining the existing behavior, so there's no risk of anything breaking. The previous code was extremely confusing because it looked like we were requiring asynchronous continuations, but because we were using the wrong enum type, it actually had no effect at all (the TaskContinuationOptions.RunContinuationsAsynchronously value was being passed as the state parameter, being boxed as an object!).

Ahhhh, we passed in the wrong options. The existing behavior is still questionable 😄 "
"Before the fix one test would pass, and another would fail. It also easy to get into a regression where either both start failing or only one. I had such cases due to mistakes while fixing the bug.
I figured, it is better to keep separate tests so that it would be easy to diagnose what went wrong.

---
In reply to: [166780870](https://github.com/dotnet/roslyn/pull/24679#discussion_r166780870) [](ancestors = 166780870)"
"Seems to use the correct load on Avx2
```asm
G_M58431_IG02:
       movsxd   rax, r8d
       vmovupd  ymm0, ymmword ptr[rdx+rax]
       vmovupd  ymmword ptr[rcx], ymm0
       mov      rax, rcx
```
Perhaps `.Count` is wrong when Avx is not supported? "
"What is checked in is wrong (maybe someone manually edited it?).  until it is fixed, anyone who edits these resx will have this change."
"Agreed.  This is patching things up at the wrong level.  We have a mechanism to do this already in normal symbol completion.  But unfortunately, we're not doing the same thing here.  The right fix is to adopt that strategy.  @github I can provide more information if my explanation so far wasn't clear."
"It turns out I was wrong, and the `NonNullTypesAttribute` still needs to be handled as an early attribute (some tests unrelated to nullable feature hit them in CI, similar to ""Assert 2"" case described in OP). I've reverted a commit and adjusted the caching logic so that the computation only happens once). #Resolved"
am i wrong... or does every flow path call nextCommandHandler as the very last thing it does.  It feels like we coul dmake this much simpler by pulling out 'nextCommandHandler' to a parent entrypoint and calling into a helper function that never has to deal with it.
"also, the comment 5 lines above is also wrong now."
"Unfortunately, the code in the binder is intertwined with error reporting and other error recovery in a way that makes sharing it nontrivial.  Like most of the nullable walker, I believe this code simply has to reproduce the correct language semantics.  I did try a simpler logic, but it is wrong.

---
In reply to: [276447420](https://github.com/dotnet/roslyn/pull/34973#discussion_r276447420) [](ancestors = 276447420)"
"I'm not sure this is correct, because this conversion will be using types from initial binding. There's probably a nested generic substitution with a user-defined conversion scenario you could get into where this will have the wrong type arguments. #Closed"
"I must admit I'd be a little worried about:

> A less risky approach would be to explicitly implement the public version of IsStatic separately from the internal Symbol.IsStatic, and doc what the difference is.

It does reduce risk _now_, but I'd then be worried if our public API was getting the same attention of the internal code. Or also if the compiler at one point would accidentally call the ISymbol implementation and get the ""wrong"" behavior."
"> This does not feel like the right behavior for a constant declared in an interface.  Similarly for a static method.  

NoPia feature is not supposed to embed constants or static methods.

> I'm not sure we intend to forbid them in an embedded interface, but even if we do this seems like the wrong diagnostic.

Could you please elaborate what is wrong with it?

---
In reply to: [315919836](https://github.com/dotnet/roslyn/pull/38140#discussion_r315919836) [](ancestors = 315919836)"
dumb question.  why not just have the TypeItem do the same thing the extension method item does?  then you can operate on both consistently.
"@github I was thinking about this after our offline conversation. I don't think the metadata is wrong. The current limitations are largely an implementation detail and there is nothing wrong with the metadata since it is valid/parsable. I would argue that the `InvalidProgramException` should not be thrown if the compiler emits it. This isn't to say the compiler can't emit an invalid program, but then it would be a compiler bug."
Style is wrong we use tabs
"Actually, no, this should have been working fine. Something else is wrong. There shouldn't be any need for the class constraint here.

What is the exact error? What SDK are you using?"
"I mean, technically the change is not really wrong (aside from the fact that now it could throw if the cast fails), but it's not a change related to nullability.
Up to you if you want to revert it."
"Alright I know I'm the one who did this wrong the first time, so I can't really fault you, but this actually needs to get captured like so:

```c++
std::weak_ptr<Pane> weakThis{ shared_from_this() };

paneTextBox.LostFocus([weakThis](const winrt::Windows::Foundation::IInspectable& sender, auto&&) {
    if (auto pane{ weakThis.lock() })
    {
        // use `pane` as `this`
    }
```

I'm pretty sure that `auto weakThis{ shared_from_this() };` is actually capturing a strong-ref (which might be leading to some of the crashes 😨 )"
"Of course, I have no problem with any additions/removals that are needed. Please continue to do as you see fit, I'm also very keen on getting this merged so any thing necessary to move towards that goal is no issue with me.

> However I do not understand the logic you encoded there with regards to the offsetHeight and I also think that we now always set the multi-line class, even when not needed. Can we discuss this algorithm there?

Sure, my thinking was the following:

1. If `allTabsWidth` exceeds `visibleTabsContainerWidth`, then apply the `multi-line` class to wrap tabs if multi-line tabs have been enabled in settings
2. However, the flaw in the above is that once the tabs were wrapped,  `allTabsWidth` would once again be equal to `visibleTabsContainerWidth`, so the class would be immediately removed. So, if `allTabsWidth` and `visibleTabsContainerWidth` are equal, it also checks if `allTabsHeight` is equal to `EDITOR_TITLE_HEIGHT` (the default height). If it is, then the `multi-line` class is removed.

You mentioned that the class is set even when not needed, is there a specific example of this? If my logic is wrong somewhere I can attempt to revise it.

> For example we can simply use the DEFAULT_EDITOR_MIN_DIMENSIONS.height as a driver and disable multi-line tabs if the editor height gets below this value?

Can do, if possible could you give me a pointer for where to get the current editor height from? I can try to look for it/create a method for it myself if it doesn't already exist."
Nit: this comment is wrong
"I'm confused.   Doesn't this give the wrong answer for odd numbers? 

if `source = 3.0` then `result = round (3.0 * 0.5) * 2.0` = `round (1.5) * 2.0` = ([`round`](https://en.cppreference.com/w/c/numeric/math/round) rounds midpoints away from zero) = `2.0 * 2.0` = `4.0`"
"This PR was against a wrong branch, opening a new one..."
"This is wrong after you messed with the tasks, bro."
This seems wrong
"Also, stop introducing boolean optional parameters please. Maybe even be careful introducing boolean parameters at all? It's crazy to have functions that you call with `Thing(false, true, false, false)` and `Thing(false)` and `Thing(false, false, false, false, false, false)`"
"Dumb idea, if text is both ""more bright"" and ""more faint"", would that mean that it negates itself and you just see text at normal brightness? In other words, would `IsBold() && IsFaint()` mean that we should just use the default font config?"
"I see we use `persistent` in `EnvironmentVariableCollection`, but it's a value given to the extension and optional booleans in the case of this API feel wrong weird when they default to false and I don't think we do this anywhere.

`isTransient` seems fine to me if we can't use persistent/persistence, there's always the docs to clarify."
"That won't fix the bug because the call we want to avoid making if there's already a `ContentDialog` being shown is the `FindName` call.

Also, I like the logical separation between `ShowDialog` and `CanShowDialog`, instead of having `ShowDialog` do double duty of checking whether a dialog is currently open before showing it. It keeps the presenter as a sort of 'dumb' component and puts the onus on the caller."
"@github I'm pretty sure we're working on some of the fallout from this in #900 - could you update that thread with what font & glyphs you're seeing render at the wrong size? We'd rather just fix the issue you're having with those characters than add a setting to disable a bug fix 😄 "
I think this versioning is wrong. This manifest file will ship with SDK so the versioning will be done by darc
"Actually, I think this isn't wrong. I was thinking that this was `FileStream.DisposeAsync`."
"I know this was just copied from before; but why is this `ReadAsync(...).GetAwaiter().GetResult()` and `Read(Span)` is `base.Read(buffer)`?

Couldn't this also be 
```csharp
return base.Read(new Span(buffer, offset, count));
```
Or is the other one wrong?"
"this seems wrong.  the AreIdentical was very likely intending to ask the exact question of if the green nodes were identical.  if that's not appropriate, it's likely we need to fixup the caller of this to adopt whatever semantics we need."
"After further inspection, looks like this suppression is wrong. Even though here we are not passing in knownTypes directly to the serializer, this is not taking into account the fact that the type you pass in may have a KnownTypeAttribute to it which would make it go through the unsafe codePath."
"Got it. 

There is another problem with removing WeakDelegate, now it is not possible to assign a delegate where the user requests different marshaling based on a custom [Export] and using IntPtr for scenarios where we do not want the object to be NSObject.GetNSObject() as a result for example.

So I still think that this is the wrong policy and should be undone."
The comment says tvOS but we are inside a if MONOTOUCH_TV || MONOTOUCH_WATCH. Either the comment is wrong or this was added to WATCH too when it shouldn't.
"Actually, nevermind. It looks like you are doing the right thing here in matching the existing APIs. The problem is the API approval got the nullability wrong here. I'll follow up on that."
"```suggestion
            // that come from embedded source or SourceLink this could be wrong, as there is no reason
            // to assume a type is defined in a filename that matches, but its _way_ too expensive
```"
"As best I can tell, yes, and if it's wrong that also means Hot Reload probably has bugs too, since that other code also needs an update."
"btw. this looks wrong in the existing native/libs code since we use cmakedefine01 for it too: https://github.com/dotnet/runtime/blob/fa1f2834dace0a34c53f1e1039b5af640fe51576/src/native/libs/System.Native/pal_io.c#L214

https://github.com/dotnet/runtime/blob/fa1f2834dace0a34c53f1e1039b5af640fe51576/src/native/libs/Common/pal_config.h.in#L25"
"Init() didn't set the DateTimeKind bits so the result will be wrong. 
As I suggested in other comment, make Int() to handle the DateTimeKind too and that will make it work just fine at that time. Just pass Unspecified kind to the Init(). #Closed"
The type `T` here is wrong. The compiler didn't catch that because `MapLike<T>` is a very weak type.
"Alternative is just to dumb down the error message and check if it's strictly a tuple type or array type that isn't readonly, only then giving the adjusted error message"
"It's still possible to write `Promise<Promise<number>>` and get the wrong experience, which is unfortunate. We've been investigating a [number](https://github.com/microsoft/TypeScript/pull/17077) of [ways](https://github.com/microsoft/TypeScript/pull/21613) to [resolve this](https://github.com/microsoft/TypeScript/pull/29317) for some time now. Until we have a firm decision on how to handle nested promises, I'm not sure I could approve this PR."
"The parser for `@github` must be wrong. This produces the error: `@github {!Puppeteer.ProductLauncher}`, but this does not: `@github {Puppeteer.ProductLauncher}`."
"@github Sorry, I didn't add clarification for my question :).

In the current implementation, there are three steps to insert a new class declaration
1. copy comments., I think in this stage `copyLeadingComments` changes comment and adds `\r` 
2. delete node (with comments, for that reason need to copy comments before)
3. insert a new node

As I understood from the https://github.com/microsoft/TypeScript/issues/23871 description, better to combine three steps into one to just replace a node with a function by class declaration. Maybe I'm wrong and need to do the following steps 

1. copy comment before (to change comment with a carriage return) and remove (to avoid comment duplication) previous original comment (I'm not sure, however, we can try to use `{ leadingTriviaOption: textChanges.LeadingTriviaOption.IncludeAll }` in `replaceNode`)
2. replace a node with function by a class declaration

Do `fourslash/server` tests require explicit changing comments to add carriage return symbols?

"
"I think it was because you were watching at wrong time.. Infact resolutionCache is suppose to handle the caching/updates so i think its worth the try for cleaner approach. I dont think we should use main project to do resolutions for this as it may have some additional logics on when and what to resolve or which files to assume as present etc and that shouldnt play role into it.. If it shoiuld, it needs to be more explicit"
"this would normally be true but there are some cases where it's not:
- we cache not configure type info
- we try to get configured type info but error occurs (i.e. number handling is wrong) but after effective converter is computed
- same as above

we want to make sure we get same exception each time but there is no really point of optimizing this path"
"What I mean is that in the following code

```
(namedImport.importClause?.namedBindings as NamedImports).elements
```

if the assertion is wrong, then this has the potential to crash before the call to `map`, because you'll end up running `undefined.elements`.

But it was already similarly the case for the old code:

```
(namedImport.importClause!.namedBindings as NamedImports).elements
```

where you'd end up running `undefined.namedBindings`.

So I guess I don't understand the need to switch to a `?.`.

Maybe it's unclear, but [a parenthesized type assertion *does* break the optional chain](https://www.typescriptlang.org/play?#code/DYUwLgBAHhC8EAoCGB+AdAIwkgztgdgJ4CUaAxkA)."
"i somewhat feel like this is the wrong place for this.  We shoudln't ever really get a source file without set parents.  So perhaps we should fix up the .update and createSourceFileFromScriptSnapshot calls to do this instead.  what do you think?
"
"@github could you take a look at these changes?

The gist of this change is
* Don't lock on the input string
* Swap locks for Interlocked operations
* Add some validation to prevent custom parsers from corrupting Uri instances
* Remove a (very hard to hit) race condition where `Uri.Equals` could return the wrong result
* Reduce race conditions around `MoreInfo` accesses, that would result in throwing away a value instead of caching it (not dangerous, just potentially duplicated work)"
"Bah. my commit is wrong for 2 reasons:
1. It's in the `__MACH__` section, which is the OSX version of the code, it should be in the `#elif defined (HAVE_PTHREAD_SETNAME_NP)` part which is where Linux should be.
2. It's checking the _current_ thread's OS id against `getpid()`.  Which is wrong. We need to map `MonoNativeThreadId` (`pthread_t`) to `pid_t`.  That won't be an easy fix.  Going to revert my change.

@github I'm going to revert my change, open a new GH Issue for Mono runtime, and then disable the test for Mono"
"@github I think you're right about the return code. That makes this PR wrong, so don't merge :-)

I've been hunting through the glibc source to see what happens, and when. I think I found the right code at https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/createthread.c;hb=HEAD#l122 which indicates that if the `attr` parameter to `create_thread` has a flag defined to set the affinity then it will fail and kill the thread if it receives an `EPERM` from the syscall. I'll cycle back tomorrow to see if I can work out whether the .NET PAL is explicitly setting the affinity flags causing glibc to attempt to use the syscall.

@github might have more input about glibc's behaviour."
"> It looks like you delete the wrong copyLeadingComments duplicate, but otherwise looks good.

Oops! Okay, I added a new commit from the browser switching those to the correct order. Let's see if that still passes"
Seems something wrong if extends others
"**Unpopular opinion:** The basic functionality of this feature is spot on (specially where we were lacking of getting this `get('a.b[0].c', obj)` to work,) tho case modifiers and being able to parse literals (with a bunch of conditional types) feel wrong."
"> Corner case:
> 
> a.ts
> 
> ```ts
> interface Foo {
>     x: number;
> }
> 
> export interface Bar {
>     M(f: Foo);
> }
> ```
> 
> b.ts
> 
> ```ts
> import { Bar } from ""./a"";
> 
> const b: Bar = {
>     M(f: Foo): any {
>         
>     },
> }
> ```
> 
> I would have ignored it, but the completion is _not_ offered if `Foo` is exported, but not imported, so it appears that there's code trying to handle this.
> 
> Presumably, this behavior was inherited from the code fix and is out of scope?

That case works on tests, with a signature completion showing up for `M` that has an associated action for importing `Foo`, but it doesn't work on vscode (the editor doesn't show it). I'm going to try and find out why.
Edit: it is showing up, it was just showing up as the very last item in the completion list (even after snippets). Once I picked it, it started showing up on the top again, right below the normal entry for `M`. My conclusion is that the vscode ordering of entries is a mystery 🤷‍♀️

That also made me realize that, if `Foo` is not exported, the signature we offer for `M` is going to reference type `Foo` anyways, and that's an error. I think that's ok though, since the user could either change `Foo` to be exported, or realize they can't write a signature for `M`, but I might be wrong.
"
"cc @github/jit-contrib 

Simple example where this kicks in:
```C#
    public static int F(int x)
    {
        int r = 0;
        for (int i = 0; i < 50; i++)
        {
            if (x != 0) continue;
            r++;
            if (x != 0) continue;
            r++;
        }
        
        return r;
    }
```
Here the jit was unable to prove the second `x != 0` was redundant. The flow in this case looks like

![image - 2021-04-25T144333 568](https://user-images.githubusercontent.com/10121823/116010578-ac760e80-a5d4-11eb-84cd-eafd2ebc18a7.png)

[edit: had the wrong graph here initially]

While trying to prove that the branch at D would make the branch at S1 redundant, the jit was considering the path S2 -> D -> S1, and so decided both S1 and S2 could reach S1, and hence the value of `x != 0` at S1 was not known.

The fix is to designate D as an excluded block, so that the jit only considers paths that do not pass through D.

A moderate number of diffs, largely improvements. The largest improvements are cases where blocks with some substantial computation (newarr) are now unreachable. 

The two largest regressions (see libraries pmi) are case where the RA creates large numbers of compensation blocks.

**asm.aspnet.run.windows.x64.checked** 
```

Summary of Code Size diffs:
(Lower is better)

Total bytes of base: 114615
Total bytes of diff: 114111
Total bytes of delta: -504 (-0.44% of base)
    diff is an improvement.
```
<details>

<summary>Detail diffs</summary>

```


Top file regressions (bytes):
           1 : 26476.dasm (0.02% of base)
           1 : 29167.dasm (0.02% of base)

Top file improvements (bytes):
         -40 : 40160.dasm (-2.02% of base)
         -40 : 16026.dasm (-5.28% of base)
         -28 : 21750.dasm (-8.05% of base)
         -28 : 24069.dasm (-8.05% of base)
         -28 : 41797.dasm (-8.05% of base)
         -23 : 40339.dasm (-4.76% of base)
         -20 : 40227.dasm (-3.92% of base)
         -19 : 13856.dasm (-2.47% of base)
         -17 : 24619.dasm (-0.47% of base)
         -16 : 7556.dasm (-4.36% of base)
         -16 : 19154.dasm (-1.51% of base)
         -14 : 21751.dasm (-7.07% of base)
         -14 : 24066.dasm (-7.07% of base)
         -12 : 39060.dasm (-0.71% of base)
         -11 : 13950.dasm (-0.29% of base)
          -9 : 21975.dasm (-0.52% of base)
          -9 : 32204.dasm (-3.06% of base)
          -9 : 24554.dasm (-0.72% of base)
          -9 : 40726.dasm (-0.73% of base)
          -9 : 39025.dasm (-0.54% of base)

47 total files with Code Size differences (45 improved, 2 regressed), 41 unchanged.

Top method regressions (bytes):
           1 ( 0.02% of base) : 26476.dasm - RelationshipDiscoveryConvention:CreateRelationships(IEnumerable`1,IConventionEntityTypeBuilder):this
           1 ( 0.02% of base) : 29167.dasm - RelationshipDiscoveryConvention:CreateRelationships(IEnumerable`1,IConventionEntityTypeBuilder):this

Top method improvements (bytes):
         -40 (-2.02% of base) : 40160.dasm - Expression:ValidateLambdaArgs(Type,byref,ReadOnlyCollection`1,String)
         -40 (-5.28% of base) : 16026.dasm - IPv4AddressHelper:ParseNonCanonical(long,int,byref,bool):long
         -28 (-8.05% of base) : 21750.dasm - PathNormalizer:RemoveDotSegments(long,long):int
         -28 (-8.05% of base) : 24069.dasm - PathNormalizer:RemoveDotSegments(long,long):int
         -28 (-8.05% of base) : 41797.dasm - PathNormalizer:RemoveDotSegments(long,long):int
         -23 (-4.76% of base) : 40339.dasm - LambdaCompiler:AddReturnLabel(LambdaExpression):this
         -20 (-3.92% of base) : 40227.dasm - LambdaCompiler:EmitArguments(MethodBase,IArgumentProvider,int):List`1:this
         -19 (-2.47% of base) : 13856.dasm - IPv4AddressHelper:ParseNonCanonical(long,int,byref,bool):long
         -17 (-0.47% of base) : 24619.dasm - HttpResponseHeaders:CopyToFast(byref):this
         -16 (-4.36% of base) : 7556.dasm - PathNormalizer:RemoveDotSegments(long,long):int
         -16 (-1.51% of base) : 19154.dasm - HttpHeaders:ParseConnection(HttpHeaders):int
         -14 (-7.07% of base) : 21751.dasm - PathNormalizer:ContainsDotSegments(long,long):bool
         -14 (-7.07% of base) : 24066.dasm - PathNormalizer:ContainsDotSegments(long,long):bool
         -12 (-0.71% of base) : 39060.dasm - SignatureHelper:AddOneArgTypeHelperWorker(Type,bool):this
         -11 (-0.29% of base) : 13950.dasm - HttpResponseHeaders:CopyToFast(byref):this
          -9 (-0.52% of base) : 21975.dasm - RuntimeParameterInfo:GetParameters(IRuntimeMethodInfo,MemberInfo,Signature,byref,bool):ref
          -9 (-3.06% of base) : 32204.dasm - ViewBuffer:MoveTo(ViewBuffer):this
          -9 (-0.72% of base) : 24554.dasm - HttpHeaders:ParseConnection(HttpHeaders):int
          -9 (-0.73% of base) : 40726.dasm - HttpHeaders:ParseConnection(HttpHeaders):int
          -9 (-0.54% of base) : 39025.dasm - RuntimeParameterInfo:GetParameters(IRuntimeMethodInfo,MemberInfo,Signature,byref,bool):ref

Top method regressions (percentages):
           1 ( 0.02% of base) : 29167.dasm - RelationshipDiscoveryConvention:CreateRelationships(IEnumerable`1,IConventionEntityTypeBuilder):this
           1 ( 0.02% of base) : 26476.dasm - RelationshipDiscoveryConvention:CreateRelationships(IEnumerable`1,IConventionEntityTypeBuilder):this

Top method improvements (percentages):
         -28 (-8.05% of base) : 21750.dasm - PathNormalizer:RemoveDotSegments(long,long):int
         -28 (-8.05% of base) : 24069.dasm - PathNormalizer:RemoveDotSegments(long,long):int
         -28 (-8.05% of base) : 41797.dasm - PathNormalizer:RemoveDotSegments(long,long):int
         -14 (-7.07% of base) : 21751.dasm - PathNormalizer:ContainsDotSegments(long,long):bool
         -14 (-7.07% of base) : 24066.dasm - PathNormalizer:ContainsDotSegments(long,long):bool
         -40 (-5.28% of base) : 16026.dasm - IPv4AddressHelper:ParseNonCanonical(long,int,byref,bool):long
         -23 (-4.76% of base) : 40339.dasm - LambdaCompiler:AddReturnLabel(LambdaExpression):this
         -16 (-4.36% of base) : 7556.dasm - PathNormalizer:RemoveDotSegments(long,long):int
          -8 (-4.19% of base) : 41798.dasm - PathNormalizer:ContainsDotSegments(long,long):bool
         -20 (-3.92% of base) : 40227.dasm - LambdaCompiler:EmitArguments(MethodBase,IArgumentProvider,int):List`1:this
          -9 (-3.06% of base) : 32204.dasm - ViewBuffer:MoveTo(ViewBuffer):this
          -4 (-2.88% of base) : 24578.dasm - NpgsqlParameterCollection:Clear():this
          -4 (-2.72% of base) : 19088.dasm - NpgsqlParameterCollection:Clear():this
          -4 (-2.63% of base) : 20462.dasm - NpgsqlParameterCollection:Clear():this
         -19 (-2.47% of base) : 13856.dasm - IPv4AddressHelper:ParseNonCanonical(long,int,byref,bool):long
          -4 (-2.42% of base) : 40958.dasm - NpgsqlParameterCollection:Clear():this
         -40 (-2.02% of base) : 40160.dasm - Expression:ValidateLambdaArgs(Type,byref,ReadOnlyCollection`1,String)
         -16 (-1.51% of base) : 19154.dasm - HttpHeaders:ParseConnection(HttpHeaders):int
          -5 (-1.32% of base) : 41066.dasm - ViewBuffer:MoveTo(ViewBuffer):this
          -9 (-1.31% of base) : 16127.dasm - IPv4AddressHelper:ParseNonCanonical(long,int,byref,bool):long

47 total methods with Code Size differences (45 improved, 2 regressed), 41 unchanged.

```

</details>

--------------------------------------------------------------------------------

**asm.benchmarks.run.windows.x64.checked** 
```

Summary of Code Size diffs:
(Lower is better)

Total bytes of base: 110522
Total bytes of diff: 109825
Total bytes of delta: -697 (-0.63% of base)
    diff is an improvement.
```
<details>

<summary>Detail diffs</summary>

```


Top file regressions (bytes):
           6 : 3602.dasm (0.07% of base)
           3 : 13827.dasm (0.16% of base)
           1 : 1147.dasm (0.74% of base)

Top file improvements (bytes):
        -456 : 2504.dasm (-4.56% of base)
         -35 : 3374.dasm (-0.67% of base)
         -27 : 18095.dasm (-4.35% of base)
         -26 : 12929.dasm (-1.38% of base)
         -21 : 6429.dasm (-0.20% of base)
         -16 : 613.dasm (-0.61% of base)
         -14 : 8623.dasm (-5.67% of base)
         -13 : 410.dasm (-0.54% of base)
         -13 : 22647.dasm (-2.14% of base)
         -11 : 6787.dasm (-0.26% of base)
          -9 : 9716.dasm (-1.31% of base)
          -8 : 3771.dasm (-0.24% of base)
          -5 : 9901.dasm (-0.14% of base)
          -5 : 22377.dasm (-4.81% of base)
          -5 : 4334.dasm (-1.46% of base)
          -5 : 20226.dasm (-0.51% of base)
          -5 : 13843.dasm (-0.74% of base)
          -5 : 3563.dasm (-0.80% of base)
          -5 : 17923.dasm (-0.35% of base)
          -5 : 3396.dasm (-0.83% of base)

28 total files with Code Size differences (25 improved, 3 regressed), 41 unchanged.

Top method regressions (bytes):
           6 ( 0.07% of base) : 3602.dasm - System.Xml.Serialization.XmlSerializationReaderILGen:WriteLiteralStructMethod(System.Xml.Serialization.StructMapping):this
           3 ( 0.16% of base) : 13827.dasm - AssignRect:second_assignments(System.Int32[,],System.Int16[,])
           1 ( 0.74% of base) : 1147.dasm - LinqBenchmarks:Count00ForX():bool:this

Top method improvements (bytes):
        -456 (-4.56% of base) : 2504.dasm - Utf8Json.Resolvers.Internal.DynamicObjectTypeBuilder:BuildSerialize(System.Type,Utf8Json.Internal.Emit.MetaType,System.Reflection.Emit.ILGenerator,System.Action,System.Func`3[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Utf8Json.Internal.Emit.MetaMember, Utf8Json, Version=1.3.7.0, Culture=neutral, PublicKeyToken=8a73d3ba7e392e27],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]],bool,bool,int)
         -35 (-0.67% of base) : 3374.dasm - System.Reflection.Emit.CustomAttributeBuilder:.ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[]):this
         -27 (-4.35% of base) : 18095.dasm - NameToSymbolMapBuilder:CreateMap():System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol, Microsoft.CodeAnalysis.CSharp, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Collections.Immutable, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]:this
         -26 (-1.38% of base) : 12929.dasm - AssignJagged:second_assignments(System.Int32[][],System.Int16[][])
         -21 (-0.20% of base) : 6429.dasm - MessagePack.Internal.ObjectSerializationInfo:CreateOrNull(System.Type,bool,bool,bool):MessagePack.Internal.ObjectSerializationInfo
         -16 (-0.61% of base) : 613.dasm - System.Text.Unicode.Utf8Utility:TranscodeToUtf16(long,int,long,int,byref,byref):int
         -14 (-5.67% of base) : 8623.dasm - Jil.Common.Utils:_GetFieldHandles(System.Reflection.MethodInfo):System.Collections.Generic.List`1[Int32]
         -13 (-0.54% of base) : 410.dasm - MemberInfoCache`1[__Canon][System.__Canon]:PopulateProperties(Filter,System.RuntimeType,System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.List`1[[System.Reflection.RuntimePropertyInfo, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]],System.Boolean[],byref):this
         -13 (-2.14% of base) : 22647.dasm - Benchstone.BenchI.Array2:Bench(int):bool
         -11 (-0.26% of base) : 6787.dasm - ClassDataContractCriticalHelper:ImportDataMembers():this
          -9 (-1.31% of base) : 9716.dasm - System.IPv4AddressHelper:ParseNonCanonical(long,int,byref,bool):long
          -8 (-0.24% of base) : 3771.dasm - System.Xml.XmlTextReaderImpl:ParseXmlDeclaration(bool):bool:this
          -5 (-0.14% of base) : 9901.dasm - <SendWithRetryAsync>d__72:MoveNext():this
          -5 (-4.81% of base) : 22377.dasm - System.Collections.IterateForEach`1[Int32][System.Int32]:List():int:this
          -5 (-1.46% of base) : 4334.dasm - <OfTypeIterator>d__61`1[UInt64][System.UInt64]:MoveNext():bool:this
          -5 (-0.51% of base) : 20226.dasm - System.Xml.Serialization.XmlReflectionImporter:SetArrayMappingType(System.Xml.Serialization.ArrayMapping,System.String,System.Type):this
          -5 (-0.74% of base) : 13843.dasm - JetStream.Hands:playHands(System.Collections.Generic.List`1[[JetStream.Player, MicroBenchmarks, Version=42.42.42.42, Culture=neutral, PublicKeyToken=null]])
          -5 (-0.80% of base) : 3563.dasm - System.Xml.Serialization.XmlSerializationReaderILGen:GenerateBegin():this
          -5 (-0.35% of base) : 17923.dasm - ReferenceManager:InitializeNewSymbols(System.Collections.Generic.List`1[Int32],Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol,System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.CommonReferenceManager`2+AssemblyData[[Microsoft.CodeAnalysis.CSharp.CSharpCompilation, Microsoft.CodeAnalysis.CSharp, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[Microsoft.CodeAnalysis.CSharp.Symbols.AssemblySymbol, Microsoft.CodeAnalysis.CSharp, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]],Microsoft.CodeAnalysis.CommonReferenceManager`2+BoundInputAssembly[Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Microsoft.CodeAnalysis.CSharp.Symbols.AssemblySymbol][],System.Collections.Generic.Dictionary`2[[Microsoft.CodeAnalysis.AssemblyIdentity, Microsoft.CodeAnalysis, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[Microsoft.CodeAnalysis.CSharp.Symbols.MissingAssemblySymbol, Microsoft.CodeAnalysis.CSharp, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]])
          -5 (-0.83% of base) : 3396.dasm - System.Xml.Serialization.XmlSerializationWriterILGen:GenerateBegin():this

Top method regressions (percentages):
           1 ( 0.74% of base) : 1147.dasm - LinqBenchmarks:Count00ForX():bool:this
           3 ( 0.16% of base) : 13827.dasm - AssignRect:second_assignments(System.Int32[,],System.Int16[,])
           6 ( 0.07% of base) : 3602.dasm - System.Xml.Serialization.XmlSerializationReaderILGen:WriteLiteralStructMethod(System.Xml.Serialization.StructMapping):this

Top method improvements (percentages):
         -14 (-5.67% of base) : 8623.dasm - Jil.Common.Utils:_GetFieldHandles(System.Reflection.MethodInfo):System.Collections.Generic.List`1[Int32]
          -5 (-4.81% of base) : 22377.dasm - System.Collections.IterateForEach`1[Int32][System.Int32]:List():int:this
        -456 (-4.56% of base) : 2504.dasm - Utf8Json.Resolvers.Internal.DynamicObjectTypeBuilder:BuildSerialize(System.Type,Utf8Json.Internal.Emit.MetaType,System.Reflection.Emit.ILGenerator,System.Action,System.Func`3[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Utf8Json.Internal.Emit.MetaMember, Utf8Json, Version=1.3.7.0, Culture=neutral, PublicKeyToken=8a73d3ba7e392e27],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]],bool,bool,int)
         -27 (-4.35% of base) : 18095.dasm - NameToSymbolMapBuilder:CreateMap():System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol, Microsoft.CodeAnalysis.CSharp, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Collections.Immutable, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]:this
         -13 (-2.14% of base) : 22647.dasm - Benchstone.BenchI.Array2:Bench(int):bool
          -5 (-1.46% of base) : 4334.dasm - <OfTypeIterator>d__61`1[UInt64][System.UInt64]:MoveNext():bool:this
         -26 (-1.38% of base) : 12929.dasm - AssignJagged:second_assignments(System.Int32[][],System.Int16[][])
          -9 (-1.31% of base) : 9716.dasm - System.IPv4AddressHelper:ParseNonCanonical(long,int,byref,bool):long
          -4 (-0.98% of base) : 24292.dasm - LinqBenchmarks:Where01ForX():bool:this
          -5 (-0.83% of base) : 3396.dasm - System.Xml.Serialization.XmlSerializationWriterILGen:GenerateBegin():this
          -5 (-0.80% of base) : 3563.dasm - System.Xml.Serialization.XmlSerializationReaderILGen:GenerateBegin():this
          -5 (-0.74% of base) : 13843.dasm - JetStream.Hands:playHands(System.Collections.Generic.List`1[[JetStream.Player, MicroBenchmarks, Version=42.42.42.42, Culture=neutral, PublicKeyToken=null]])
         -35 (-0.67% of base) : 3374.dasm - System.Reflection.Emit.CustomAttributeBuilder:.ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[]):this
         -16 (-0.61% of base) : 613.dasm - System.Text.Unicode.Utf8Utility:TranscodeToUtf16(long,int,long,int,byref,byref):int
         -13 (-0.54% of base) : 410.dasm - MemberInfoCache`1[__Canon][System.__Canon]:PopulateProperties(Filter,System.RuntimeType,System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.List`1[[System.Reflection.RuntimePropertyInfo, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]],System.Boolean[],byref):this
          -5 (-0.51% of base) : 20226.dasm - System.Xml.Serialization.XmlReflectionImporter:SetArrayMappingType(System.Xml.Serialization.ArrayMapping,System.String,System.Type):this
          -5 (-0.44% of base) : 46.dasm - System.Diagnostics.Tracing.EventSource:InitializeProviderMetadata():this
          -4 (-0.39% of base) : 12928.dasm - AssignJagged:first_assignments(System.Int32[][],System.Int16[][]):int
          -5 (-0.35% of base) : 17923.dasm - ReferenceManager:InitializeNewSymbols(System.Collections.Generic.List`1[Int32],Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol,System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.CommonReferenceManager`2+AssemblyData[[Microsoft.CodeAnalysis.CSharp.CSharpCompilation, Microsoft.CodeAnalysis.CSharp, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[Microsoft.CodeAnalysis.CSharp.Symbols.AssemblySymbol, Microsoft.CodeAnalysis.CSharp, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], Microsoft.CodeAnalysis, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]],Microsoft.CodeAnalysis.CommonReferenceManager`2+BoundInputAssembly[Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Microsoft.CodeAnalysis.CSharp.Symbols.AssemblySymbol][],System.Collections.Generic.Dictionary`2[[Microsoft.CodeAnalysis.AssemblyIdentity, Microsoft.CodeAnalysis, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[Microsoft.CodeAnalysis.CSharp.Symbols.MissingAssemblySymbol, Microsoft.CodeAnalysis.CSharp, Version=2.10.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]])
         -11 (-0.26% of base) : 6787.dasm - ClassDataContractCriticalHelper:ImportDataMembers():this

28 total methods with Code Size differences (25 improved, 3 regressed), 41 unchanged.

```

</details>

--------------------------------------------------------------------------------

**asm.libraries.crossgen.windows.x64.checked** 
```

Summary of Code Size diffs:
(Lower is better)

Total bytes of base: 105905
Total bytes of diff: 105434
Total bytes of delta: -471 (-0.44% of base)
    diff is an improvement.
```
<details>

<summary>Detail diffs</summary>

```


Top file regressions (bytes):
          11 : 77787.dasm (0.97% of base)
          10 : 125322.dasm (0.72% of base)

Top file improvements (bytes):
         -63 : 78570.dasm (-1.39% of base)
         -59 : 75731.dasm (-1.30% of base)
         -52 : 105429.dasm (-1.94% of base)
         -39 : 42323.dasm (-2.75% of base)
         -26 : 73699.dasm (-1.38% of base)
         -20 : 163282.dasm (-0.32% of base)
         -17 : 38273.dasm (-5.80% of base)
         -16 : 18980.dasm (-0.60% of base)
         -14 : 105443.dasm (-0.97% of base)
         -14 : 105446.dasm (-1.04% of base)
         -12 : 8642.dasm (-0.50% of base)
         -11 : 94220.dasm (-0.17% of base)
         -11 : 94934.dasm (-0.18% of base)
         -10 : 102056.dasm (-0.46% of base)
          -9 : 102389.dasm (-0.35% of base)
          -9 : 102434.dasm (-0.28% of base)
          -9 : 140223.dasm (-0.37% of base)
          -9 : 125107.dasm (-0.42% of base)
          -9 : 112924.dasm (-0.50% of base)
          -9 : 152051.dasm (-1.32% of base)

36 total files with Code Size differences (34 improved, 2 regressed), 19 unchanged.

Top method regressions (bytes):
          11 ( 0.97% of base) : 77787.dasm - System.Data.Common.DbCommandBuilder:BuildUpdateCommand(System.Data.Common.DataTableMapping,System.Data.DataRow):System.Data.Common.DbCommand:this
          10 ( 0.72% of base) : 125322.dasm - System.Configuration.ConfigurationElement:ParseLockedAttributes(System.Configuration.ConfigurationValue,int):System.Configuration.ConfigurationLockCollection:this

Top method improvements (bytes):
         -63 (-1.39% of base) : 78570.dasm - System.Data.RBTree`1[Int32][System.Int32]:RBDeleteFixup(int,int,int,int):int:this
         -59 (-1.30% of base) : 75731.dasm - System.Data.RBTree`1[__Canon][System.__Canon]:RBDeleteFixup(int,int,int,int):int:this
         -52 (-1.94% of base) : 105429.dasm - System.Text.GB18030Encoding:GetChars(long,int,long,int,System.Text.DecoderNLS):int:this
         -39 (-2.75% of base) : 42323.dasm - Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceNamedTypeSymbol:AddEnumMembers(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax,Microsoft.CodeAnalysis.VisualBasic.Binder,Microsoft.CodeAnalysis.DiagnosticBag,MembersAndInitializersBuilder):this
         -26 (-1.38% of base) : 73699.dasm - System.Data.NewDiffgramGen:GenerateTableErrors(System.Data.DataTable):this
         -20 (-0.32% of base) : 163282.dasm - Number:NumberToStringFormat(byref,byref,System.ReadOnlySpan`1[Char],System.Globalization.NumberFormatInfo)
         -17 (-5.80% of base) : 38273.dasm - Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation:CommonLanguageVersion(System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.SyntaxTree, Microsoft.CodeAnalysis, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]):int:this
         -16 (-0.60% of base) : 18980.dasm - System.Text.Unicode.Utf8Utility:TranscodeToUtf16(long,int,long,int,byref,byref):int
         -14 (-0.97% of base) : 105443.dasm - System.Text.ISO2022Encoding:GetCharsCP5022xJP(long,int,long,int,ISO2022Decoder):int:this
         -14 (-1.04% of base) : 105446.dasm - System.Text.ISO2022Encoding:GetCharsCP50225KR(long,int,long,int,ISO2022Decoder):int:this
         -12 (-0.50% of base) : 8642.dasm - MemberInfoCache`1[__Canon][System.__Canon]:PopulateProperties(Filter,System.RuntimeType,System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.List`1[[System.Reflection.RuntimePropertyInfo, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]],System.Boolean[],byref):this
         -11 (-0.17% of base) : 94220.dasm - System.Xml.Schema.Compiler:CompileLocalAttributes(System.Xml.Schema.XmlSchemaComplexType,System.Xml.Schema.XmlSchemaComplexType,System.Xml.Schema.XmlSchemaObjectCollection,System.Xml.Schema.XmlSchemaAnyAttribute,int):this
         -11 (-0.18% of base) : 94934.dasm - System.Xml.Schema.SchemaCollectionCompiler:CompileLocalAttributes(System.Xml.Schema.XmlSchemaComplexType,System.Xml.Schema.XmlSchemaComplexType,System.Xml.Schema.XmlSchemaObjectCollection,System.Xml.Schema.XmlSchemaAnyAttribute,int):this
         -10 (-0.46% of base) : 102056.dasm - System.Xml.Serialization.XmlSerializationReaderCodeGen:WriteEnumMethod(System.Xml.Serialization.EnumMapping):this
          -9 (-0.35% of base) : 102389.dasm - System.Xml.Serialization.XmlSerializationWriterCodeGen:WriteEnumAndArrayTypes():this
          -9 (-0.28% of base) : 102434.dasm - System.Xml.Serialization.XmlSerializationWriterILGen:WriteEnumAndArrayTypes():this
          -9 (-0.37% of base) : 140223.dasm - System.IO.Enumeration.FileSystemName:MatchPattern(System.ReadOnlySpan`1[Char],System.ReadOnlySpan`1[Char],bool,bool):bool
          -9 (-0.42% of base) : 125107.dasm - System.Configuration.BaseConfigurationRecord:ResolveLocationSections():this
          -9 (-0.50% of base) : 112924.dasm - Microsoft.VisualBasic.CompilerServices.ConversionResolution:ResolveConversion(System.Type,System.Type,System.Collections.Generic.List`1[[Microsoft.VisualBasic.CompilerServices.Symbols+Method, Microsoft.VisualBasic.Core, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]],bool,byref):System.Collections.Generic.List`1[[Microsoft.VisualBasic.CompilerServices.Symbols+Method, Microsoft.VisualBasic.Core, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]
          -9 (-1.32% of base) : 152051.dasm - System.IPv4AddressHelper:ParseNonCanonical(long,int,byref,bool):long

Top method regressions (percentages):
          11 ( 0.97% of base) : 77787.dasm - System.Data.Common.DbCommandBuilder:BuildUpdateCommand(System.Data.Common.DataTableMapping,System.Data.DataRow):System.Data.Common.DbCommand:this
          10 ( 0.72% of base) : 125322.dasm - System.Configuration.ConfigurationElement:ParseLockedAttributes(System.Configuration.ConfigurationValue,int):System.Configuration.ConfigurationLockCollection:this

Top method improvements (percentages):
         -17 (-5.80% of base) : 38273.dasm - Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation:CommonLanguageVersion(System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.SyntaxTree, Microsoft.CodeAnalysis, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]):int:this
          -6 (-4.84% of base) : 41801.dasm - Microsoft.CodeAnalysis.VisualBasic.OptionsValidator:IsValidNamespaceName(System.String):bool
          -4 (-2.80% of base) : 25073.dasm - System.Diagnostics.Tracing.ManifestBuilder:TranslateIndexToManifestConvention(int,System.String):int:this
         -39 (-2.75% of base) : 42323.dasm - Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceNamedTypeSymbol:AddEnumMembers(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax,Microsoft.CodeAnalysis.VisualBasic.Binder,Microsoft.CodeAnalysis.DiagnosticBag,MembersAndInitializersBuilder):this
         -52 (-1.94% of base) : 105429.dasm - System.Text.GB18030Encoding:GetChars(long,int,long,int,System.Text.DecoderNLS):int:this
          -5 (-1.85% of base) : 97060.dasm - System.Xml.Xsl.Xslt.CompilerScopeManager`1[__Canon][System.__Canon]:IsExNamespace(System.String):bool:this
          -5 (-1.77% of base) : 147739.dasm - System.Text.SimpleRegex:IsMatchWithStarWildcard(System.ReadOnlySpan`1[Char],System.ReadOnlySpan`1[Char]):bool
         -63 (-1.39% of base) : 78570.dasm - System.Data.RBTree`1[Int32][System.Int32]:RBDeleteFixup(int,int,int,int):int:this
         -26 (-1.38% of base) : 73699.dasm - System.Data.NewDiffgramGen:GenerateTableErrors(System.Data.DataTable):this
          -9 (-1.32% of base) : 152051.dasm - System.IPv4AddressHelper:ParseNonCanonical(long,int,byref,bool):long
         -59 (-1.30% of base) : 75731.dasm - System.Data.RBTree`1[__Canon][System.__Canon]:RBDeleteFixup(int,int,int,int):int:this
          -5 (-1.29% of base) : 75147.dasm - System.Data.DataTable:RecordStateChanged(int,int,int,int,int,int):this
         -14 (-1.04% of base) : 105446.dasm - System.Text.ISO2022Encoding:GetCharsCP50225KR(long,int,long,int,ISO2022Decoder):int:this
         -14 (-0.97% of base) : 105443.dasm - System.Text.ISO2022Encoding:GetCharsCP5022xJP(long,int,long,int,ISO2022Decoder):int:this
          -5 (-0.76% of base) : 41492.dasm - Microsoft.CodeAnalysis.VisualBasic.Syntax.VisualBasicWarningStateMap:GetAllWarningDirectives(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.ArrayBuilder`1[[Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, Microsoft.CodeAnalysis.VisualBasic, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]])
         -16 (-0.60% of base) : 18980.dasm - System.Text.Unicode.Utf8Utility:TranscodeToUtf16(long,int,long,int,byref,byref):int
          -8 (-0.55% of base) : 113491.dasm - Microsoft.VisualBasic.CompilerServices.OverloadResolution:CollectOverloadCandidates(System.Reflection.MemberInfo[],System.Object[],int,System.String[],System.Type[],bool,System.Type,byref,byref,Container):System.Collections.Generic.List`1[[Microsoft.VisualBasic.CompilerServices.Symbols+Method, Microsoft.VisualBasic.Core, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]
         -12 (-0.50% of base) : 8642.dasm - MemberInfoCache`1[__Canon][System.__Canon]:PopulateProperties(Filter,System.RuntimeType,System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.List`1[[System.Reflection.RuntimePropertyInfo, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]],System.Boolean[],byref):this
          -9 (-0.50% of base) : 112924.dasm - Microsoft.VisualBasic.CompilerServices.ConversionResolution:ResolveConversion(System.Type,System.Type,System.Collections.Generic.List`1[[Microsoft.VisualBasic.CompilerServices.Symbols+Method, Microsoft.VisualBasic.Core, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]],bool,byref):System.Collections.Generic.List`1[[Microsoft.VisualBasic.CompilerServices.Symbols+Method, Microsoft.VisualBasic.Core, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]
         -10 (-0.46% of base) : 102056.dasm - System.Xml.Serialization.XmlSerializationReaderCodeGen:WriteEnumMethod(System.Xml.Serialization.EnumMapping):this

36 total methods with Code Size differences (34 improved, 2 regressed), 19 unchanged.

```

</details>

--------------------------------------------------------------------------------

**asm.libraries.crossgen2.windows.x64.checked** 
```

Summary of Code Size diffs:
(Lower is better)

Total bytes of base: 113049
Total bytes of diff: 112503
Total bytes of delta: -546 (-0.48% of base)
    diff is an improvement.
```
<details>

<summary>Detail diffs</summary>

```


Top file regressions (bytes):
          11 : 132273.dasm (0.96% of base)
          10 : 155120.dasm (0.74% of base)

Top file improvements (bytes):
         -63 : 137308.dasm (-1.39% of base)
         -59 : 134318.dasm (-1.30% of base)
         -52 : 60819.dasm (-1.94% of base)
         -27 : 105906.dasm (-2.10% of base)
         -26 : 136294.dasm (-1.38% of base)
         -25 : 105238.dasm (-1.16% of base)
         -24 : 107675.dasm (-1.65% of base)
         -20 : 189491.dasm (-0.32% of base)
         -19 : 91389.dasm (-2.28% of base)
         -19 : 100168.dasm (-4.60% of base)
         -16 : 29425.dasm (-0.60% of base)
         -15 : 100141.dasm (-3.61% of base)
         -14 : 60806.dasm (-0.97% of base)
         -14 : 60803.dasm (-1.04% of base)
         -13 : 39476.dasm (-0.59% of base)
         -13 : 101664.dasm (-0.85% of base)
         -11 : 53319.dasm (-0.18% of base)
         -11 : 54034.dasm (-0.16% of base)
         -10 : 46234.dasm (-0.46% of base)
          -9 : 91390.dasm (-1.31% of base)

38 total files with Code Size differences (36 improved, 2 regressed), 21 unchanged.

Top method regressions (bytes):
          11 ( 0.96% of base) : 132273.dasm - System.Data.Common.DbCommandBuilder:BuildUpdateCommand(System.Data.Common.DataTableMapping,System.Data.DataRow):System.Data.Common.DbCommand:this
          10 ( 0.74% of base) : 155120.dasm - System.Configuration.ConfigurationElement:ParseLockedAttributes(System.Configuration.ConfigurationValue,int):System.Configuration.ConfigurationLockCollection:this

Top method improvements (bytes):
         -63 (-1.39% of base) : 137308.dasm - System.Data.RBTree`1:RBDeleteFixup(int,int,int,int):int:this
         -59 (-1.30% of base) : 134318.dasm - System.Data.RBTree`1:RBDeleteFixup(int,int,int,int):int:this
         -52 (-1.94% of base) : 60819.dasm - System.Text.GB18030Encoding:GetChars(long,int,long,int,System.Text.DecoderNLS):int:this
         -27 (-2.10% of base) : 105906.dasm - Microsoft.CodeAnalysis.VisualBasic.AbstractFlowPass`1:VisitTryStatement(Microsoft.CodeAnalysis.VisualBasic.BoundTryStatement):Microsoft.CodeAnalysis.VisualBasic.BoundNode:this
         -26 (-1.38% of base) : 136294.dasm - System.Data.NewDiffgramGen:GenerateTableErrors(System.Data.DataTable):this
         -25 (-1.16% of base) : 105238.dasm - Microsoft.CodeAnalysis.VisualBasic.Binder:BindLateBoundInvocation(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode,Microsoft.CodeAnalysis.VisualBasic.BoundMethodOrPropertyGroup,Microsoft.CodeAnalysis.VisualBasic.BoundExpression,System.Collections.Immutable.ImmutableArray`1[Microsoft.CodeAnalysis.VisualBasic.BoundExpression],System.Collections.Immutable.ImmutableArray`1[System.String],Microsoft.CodeAnalysis.DiagnosticBag,bool):Microsoft.CodeAnalysis.VisualBasic.BoundExpression:this
         -24 (-1.65% of base) : 107675.dasm - Microsoft.CodeAnalysis.VisualBasic.AbstractFlowPass`1:VisitTryStatement(Microsoft.CodeAnalysis.VisualBasic.BoundTryStatement):Microsoft.CodeAnalysis.VisualBasic.BoundNode:this
         -20 (-0.32% of base) : 189491.dasm - Number:NumberToStringFormat(byref,byref,System.ReadOnlySpan`1[System.Char],System.Globalization.NumberFormatInfo)
         -19 (-2.28% of base) : 91389.dasm - Microsoft.CodeAnalysis.VisualBasic.Syntax.VisualBasicWarningStateMap:CreateWarningStateEntries(System.Collections.Immutable.ImmutableArray`1[Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax]):Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap+WarningStateMapEntry[]
         -19 (-4.60% of base) : 100168.dasm - Microsoft.CodeAnalysis.VisualBasic.ClsComplianceChecker:GetDeclaredCompliance(Microsoft.CodeAnalysis.VisualBasic.Symbol,byref):System.Nullable`1[System.Boolean]:this
         -16 (-0.60% of base) : 29425.dasm - System.Text.Unicode.Utf8Utility:TranscodeToUtf16(long,int,long,int,byref,byref):int
         -15 (-3.61% of base) : 100141.dasm - Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation:CommonLanguageVersion(System.Collections.Immutable.ImmutableArray`1[Microsoft.CodeAnalysis.SyntaxTree]):int:this
         -14 (-0.97% of base) : 60806.dasm - System.Text.ISO2022Encoding:GetCharsCP5022xJP(long,int,long,int,System.Text.ISO2022Encoding+ISO2022Decoder):int:this
         -14 (-1.04% of base) : 60803.dasm - System.Text.ISO2022Encoding:GetCharsCP50225KR(long,int,long,int,System.Text.ISO2022Encoding+ISO2022Decoder):int:this
         -13 (-0.59% of base) : 39476.dasm - MemberInfoCache`1:PopulateProperties(System.RuntimeType+RuntimeTypeCache+Filter,System.RuntimeType,System.Collections.Generic.Dictionary`2[System.String, System.Collections.Generic.List`1[System.Reflection.RuntimePropertyInfo]],System.Boolean[],byref):this
         -13 (-0.85% of base) : 101664.dasm - Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceNamedTypeSymbol:ValidateInheritedInterfaces(Microsoft.CodeAnalysis.SyntaxList`1[Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax],System.Collections.Generic.HashSet`1[Microsoft.CodeAnalysis.VisualBasic.Symbols.NamedTypeSymbol],Roslyn.Utilities.ConsList`1[Microsoft.CodeAnalysis.VisualBasic.Symbol],Microsoft.CodeAnalysis.VisualBasic.Binder,Microsoft.CodeAnalysis.DiagnosticBag):this
         -11 (-0.18% of base) : 53319.dasm - System.Xml.Schema.SchemaCollectionCompiler:CompileLocalAttributes(System.Xml.Schema.XmlSchemaComplexType,System.Xml.Schema.XmlSchemaComplexType,System.Xml.Schema.XmlSchemaObjectCollection,System.Xml.Schema.XmlSchemaAnyAttribute,int):this
         -11 (-0.16% of base) : 54034.dasm - System.Xml.Schema.Compiler:CompileLocalAttributes(System.Xml.Schema.XmlSchemaComplexType,System.Xml.Schema.XmlSchemaComplexType,System.Xml.Schema.XmlSchemaObjectCollection,System.Xml.Schema.XmlSchemaAnyAttribute,int):this
         -10 (-0.46% of base) : 46234.dasm - System.Xml.Serialization.XmlSerializationReaderCodeGen:WriteEnumMethod(System.Xml.Serialization.EnumMapping):this
          -9 (-1.31% of base) : 91390.dasm - Microsoft.CodeAnalysis.VisualBasic.Syntax.VisualBasicWarningStateMap:GetAllWarningDirectives(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.ArrayBuilder`1[Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax])

Top method regressions (percentages):
          11 ( 0.96% of base) : 132273.dasm - System.Data.Common.DbCommandBuilder:BuildUpdateCommand(System.Data.Common.DataTableMapping,System.Data.DataRow):System.Data.Common.DbCommand:this
          10 ( 0.74% of base) : 155120.dasm - System.Configuration.ConfigurationElement:ParseLockedAttributes(System.Configuration.ConfigurationValue,int):System.Configuration.ConfigurationLockCollection:this

Top method improvements (percentages):
         -19 (-4.60% of base) : 100168.dasm - Microsoft.CodeAnalysis.VisualBasic.ClsComplianceChecker:GetDeclaredCompliance(Microsoft.CodeAnalysis.VisualBasic.Symbol,byref):System.Nullable`1[System.Boolean]:this
         -15 (-3.61% of base) : 100141.dasm - Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation:CommonLanguageVersion(System.Collections.Immutable.ImmutableArray`1[Microsoft.CodeAnalysis.SyntaxTree]):int:this
          -4 (-2.78% of base) : 23605.dasm - System.Diagnostics.Tracing.ManifestBuilder:TranslateIndexToManifestConvention(int,System.String):int:this
         -19 (-2.28% of base) : 91389.dasm - Microsoft.CodeAnalysis.VisualBasic.Syntax.VisualBasicWarningStateMap:CreateWarningStateEntries(System.Collections.Immutable.ImmutableArray`1[Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax]):Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap+WarningStateMapEntry[]
         -27 (-2.10% of base) : 105906.dasm - Microsoft.CodeAnalysis.VisualBasic.AbstractFlowPass`1:VisitTryStatement(Microsoft.CodeAnalysis.VisualBasic.BoundTryStatement):Microsoft.CodeAnalysis.VisualBasic.BoundNode:this
         -52 (-1.94% of base) : 60819.dasm - System.Text.GB18030Encoding:GetChars(long,int,long,int,System.Text.DecoderNLS):int:this
          -5 (-1.84% of base) : 51216.dasm - System.Xml.Xsl.Xslt.CompilerScopeManager`1:IsExNamespace(System.String):bool:this
         -24 (-1.65% of base) : 107675.dasm - Microsoft.CodeAnalysis.VisualBasic.AbstractFlowPass`1:VisitTryStatement(Microsoft.CodeAnalysis.VisualBasic.BoundTryStatement):Microsoft.CodeAnalysis.VisualBasic.BoundNode:this
         -63 (-1.39% of base) : 137308.dasm - System.Data.RBTree`1:RBDeleteFixup(int,int,int,int):int:this
         -26 (-1.38% of base) : 136294.dasm - System.Data.NewDiffgramGen:GenerateTableErrors(System.Data.DataTable):this
          -9 (-1.31% of base) : 194202.dasm - System.IPv4AddressHelper:ParseNonCanonical(long,int,byref,bool):long
          -9 (-1.31% of base) : 91390.dasm - Microsoft.CodeAnalysis.VisualBasic.Syntax.VisualBasicWarningStateMap:GetAllWarningDirectives(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.ArrayBuilder`1[Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax])
         -59 (-1.30% of base) : 134318.dasm - System.Data.RBTree`1:RBDeleteFixup(int,int,int,int):int:this
          -5 (-1.29% of base) : 134880.dasm - System.Data.DataTable:RecordStateChanged(int,int,int,int,int,int):this
         -25 (-1.16% of base) : 105238.dasm - Microsoft.CodeAnalysis.VisualBasic.Binder:BindLateBoundInvocation(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode,Microsoft.CodeAnalysis.VisualBasic.BoundMethodOrPropertyGroup,Microsoft.CodeAnalysis.VisualBasic.BoundExpression,System.Collections.Immutable.ImmutableArray`1[Microsoft.CodeAnalysis.VisualBasic.BoundExpression],System.Collections.Immutable.ImmutableArray`1[System.String],Microsoft.CodeAnalysis.DiagnosticBag,bool):Microsoft.CodeAnalysis.VisualBasic.BoundExpression:this
         -14 (-1.04% of base) : 60803.dasm - System.Text.ISO2022Encoding:GetCharsCP50225KR(long,int,long,int,System.Text.ISO2022Encoding+ISO2022Decoder):int:this
         -14 (-0.97% of base) : 60806.dasm - System.Text.ISO2022Encoding:GetCharsCP5022xJP(long,int,long,int,System.Text.ISO2022Encoding+ISO2022Decoder):int:this
         -13 (-0.85% of base) : 101664.dasm - Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceNamedTypeSymbol:ValidateInheritedInterfaces(Microsoft.CodeAnalysis.SyntaxList`1[Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax],System.Collections.Generic.HashSet`1[Microsoft.CodeAnalysis.VisualBasic.Symbols.NamedTypeSymbol],Roslyn.Utilities.ConsList`1[Microsoft.CodeAnalysis.VisualBasic.Symbol],Microsoft.CodeAnalysis.VisualBasic.Binder,Microsoft.CodeAnalysis.DiagnosticBag):this
         -16 (-0.60% of base) : 29425.dasm - System.Text.Unicode.Utf8Utility:TranscodeToUtf16(long,int,long,int,byref,byref):int
         -13 (-0.59% of base) : 39476.dasm - MemberInfoCache`1:PopulateProperties(System.RuntimeType+RuntimeTypeCache+Filter,System.RuntimeType,System.Collections.Generic.Dictionary`2[System.String, System.Collections.Generic.List`1[System.Reflection.RuntimePropertyInfo]],System.Boolean[],byref):this

38 total methods with Code Size differences (36 improved, 2 regressed), 21 unchanged.

```

</details>

--------------------------------------------------------------------------------

**asm.libraries.pmi.windows.x64.checked** 
```

Summary of Code Size diffs:
(Lower is better)

Total bytes of base: 589020
Total bytes of diff: 588087
Total bytes of delta: -933 (-0.16% of base)
    diff is an improvement.
```
<details>

<summary>Detail diffs</summary>

```


Top file regressions (bytes):
         268 : 49284.dasm (15.10% of base)
         268 : 42327.dasm (15.93% of base)
          29 : 6591.dasm (0.91% of base)
          18 : 47520.dasm (0.53% of base)
          11 : 227232.dasm (0.93% of base)
          10 : 165949.dasm (0.62% of base)
           8 : 61803.dasm (0.93% of base)
           8 : 233185.dasm (0.40% of base)
           6 : 147858.dasm (2.11% of base)
           5 : 56554.dasm (2.22% of base)
           4 : 164690.dasm (0.22% of base)
           4 : 33418.dasm (2.74% of base)
           4 : 165740.dasm (0.17% of base)
           4 : 107560.dasm (0.18% of base)
           4 : 194764.dasm (0.62% of base)
           4 : 210141.dasm (0.58% of base)
           4 : 106238.dasm (0.08% of base)
           4 : 56533.dasm (2.20% of base)
           3 : 135812.dasm (0.07% of base)
           1 : 23687.dasm (0.19% of base)

Top file improvements (bytes):
         -76 : 67520.dasm (-3.47% of base)
         -63 : 108457.dasm (-1.40% of base)
         -59 : 108396.dasm (-1.31% of base)
         -48 : 139090.dasm (-1.86% of base)
         -45 : 100361.dasm (-4.14% of base)
         -39 : 142771.dasm (-1.24% of base)
         -36 : 23078.dasm (-0.14% of base)
         -32 : 134849.dasm (-1.45% of base)
         -30 : 51037.dasm (-1.89% of base)
         -29 : 74716.dasm (-3.46% of base)
         -29 : 174448.dasm (-0.94% of base)
         -28 : 141597.dasm (-1.76% of base)
         -28 : 106227.dasm (-1.28% of base)
         -27 : 44904.dasm (-4.43% of base)
         -27 : 83781.dasm (-4.99% of base)
         -26 : 52848.dasm (-0.07% of base)
         -26 : 47022.dasm (-2.64% of base)
         -26 : 69970.dasm (-2.56% of base)
         -24 : 137656.dasm (-12.24% of base)
         -23 : 135442.dasm (-4.32% of base)

149 total files with Code Size differences (129 improved, 20 regressed), 366 unchanged.

Top method regressions (bytes):
         268 (15.10% of base) : 49284.dasm - Microsoft.CodeAnalysis.VisualBasic.Symbols.Metadata.PE.MetadataDecoder:SubstituteNoPiaLocalType(byref,bool,Microsoft.CodeAnalysis.VisualBasic.Symbols.TypeSymbol,System.String,System.String,System.String,Microsoft.CodeAnalysis.VisualBasic.Symbols.AssemblySymbol):Microsoft.CodeAnalysis.VisualBasic.Symbols.NamedTypeSymbol
         268 (15.93% of base) : 42327.dasm - Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.MetadataDecoder:SubstituteNoPiaLocalType(byref,bool,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol,System.String,System.String,System.String,Microsoft.CodeAnalysis.CSharp.Symbols.AssemblySymbol):Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
          29 ( 0.91% of base) : 6591.dasm - <StartupCode$FSharp-Core>.$Quotations:eq@197(Microsoft.FSharp.Quotations.Tree,Microsoft.FSharp.Quotations.Tree):bool
          18 ( 0.53% of base) : 47520.dasm - Microsoft.CodeAnalysis.VisualBasic.Binder:BindFieldAndPropertyInitializers(Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol,System.Collections.Immutable.ImmutableArray`1[ImmutableArray`1],Microsoft.CodeAnalysis.VisualBasic.Symbols.SynthesizedInteractiveInitializerMethod,Microsoft.CodeAnalysis.DiagnosticBag):System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.VisualBasic.BoundInitializer, Microsoft.CodeAnalysis.VisualBasic, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]
          11 ( 0.93% of base) : 227232.dasm - Internal.NativeFormat.NativeWriter:Save(System.IO.Stream):this
          10 ( 0.62% of base) : 165949.dasm - System.Configuration.ConfigurationElement:ParseLockedAttributes(System.Configuration.ConfigurationValue,int):System.Configuration.ConfigurationLockCollection:this
           8 ( 0.93% of base) : 61803.dasm - Microsoft.CodeAnalysis.VisualBasic.Syntax.VisualBasicWarningStateMap:CreateWarningStateEntries(System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, Microsoft.CodeAnalysis.VisualBasic, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]):Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap+WarningStateMapEntry[]
           8 ( 0.40% of base) : 233185.dasm - Xunit.Sdk.TestCaseDescriptorFactory:.ctor(System.Object,System.Object,System.Object):this
           6 ( 2.11% of base) : 147858.dasm - <>c:<GetStringValue>b__19_2(System.Span`1[Char],System.String[]):this
           5 ( 2.22% of base) : 56554.dasm - Microsoft.CodeAnalysis.VisualBasic.Syntax.InternalSyntax.VisualBasicSyntaxNode:CollectConstituentTokensAndDiagnostics(Microsoft.CodeAnalysis.VisualBasic.Syntax.InternalSyntax.SyntaxListBuilder`1[[Microsoft.CodeAnalysis.VisualBasic.Syntax.InternalSyntax.SyntaxToken, Microsoft.CodeAnalysis.VisualBasic, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]],System.Collections.Generic.IList`1[[Microsoft.CodeAnalysis.DiagnosticInfo, Microsoft.CodeAnalysis, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]):this
           4 ( 0.22% of base) : 164690.dasm - System.Composition.Convention.PartConventionBuilder:BuildTypeAttributes(System.Type):System.Collections.Generic.IEnumerable`1[[System.Attribute, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]:this
           4 ( 2.74% of base) : 33418.dasm - Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CSharpSyntaxNode:ApplyDirectives(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.DirectiveStack):Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.DirectiveStack:this
           4 ( 0.17% of base) : 165740.dasm - System.Configuration.BaseConfigurationRecord:ResolveLocationSections():this
           4 ( 0.18% of base) : 107560.dasm - System.Data.DataTable:EvaluateDependentExpressions(System.Collections.Generic.List`1[[System.Data.DataColumn, System.Data.Common, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]],System.Data.DataRow,int,System.Collections.Generic.List`1[[System.Data.DataRow, System.Data.Common, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]):this
           4 ( 0.62% of base) : 194764.dasm - System.Net.Http.Headers.HttpHeaders:RemoveParsedValue(System.Net.Http.Headers.HeaderDescriptor,System.Object):bool:this
           4 ( 0.58% of base) : 210141.dasm - System.Security.Claims.ClaimsIdentity:WriteTo(System.IO.BinaryWriter,System.Byte[]):this
           4 ( 0.08% of base) : 106238.dasm - System.Data.XmlDataTreeWriter:XmlDataRowWriter(System.Data.DataRow,System.String):this
           4 ( 2.20% of base) : 56533.dasm - Microsoft.CodeAnalysis.VisualBasic.Syntax.InternalSyntax.VisualBasicSyntaxNode:AddSyntaxErrors(System.Collections.Generic.List`1[[Microsoft.CodeAnalysis.DiagnosticInfo, Microsoft.CodeAnalysis, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]):this
           3 ( 0.07% of base) : 135812.dasm - System.Xml.Serialization.XmlSerializationReaderCodeGen:WriteLiteralStructMethod(System.Xml.Serialization.StructMapping):this
           1 ( 0.19% of base) : 23687.dasm - Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel:GetBasesBeingResolved(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax):Roslyn.Utilities.ConsList`1[[Microsoft.CodeAnalysis.CSharp.Symbol, Microsoft.CodeAnalysis.CSharp, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]:this

Top method improvements (bytes):
         -76 (-3.47% of base) : 67520.dasm - Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode:DoGetSyntaxErrors(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxNodeOrToken):System.Collections.ObjectModel.ReadOnlyCollection`1[[Microsoft.CodeAnalysis.Diagnostic, Microsoft.CodeAnalysis, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]
         -63 (-1.40% of base) : 108457.dasm - System.Data.RBTree`1[Byte][System.Byte]:RBDeleteFixup(int,int,int,int):int:this
         -59 (-1.31% of base) : 108396.dasm - System.Data.RBTree`1[__Canon][System.__Canon]:RBDeleteFixup(int,int,int,int):int:this
         -48 (-1.86% of base) : 139090.dasm - System.Text.GB18030Encoding:GetChars(long,int,long,int,System.Text.DecoderNLS):int:this
         -45 (-4.14% of base) : 100361.dasm - Microsoft.Diagnostics.Tracing.Analysis.GC.TraceGC:GetFreeListEfficiency(System.Collections.Generic.List`1[[Microsoft.Diagnostics.Tracing.Analysis.GC.TraceGC, Microsoft.Diagnostics.Tracing.TraceEvent, Version=2.0.65.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]],Microsoft.Diagnostics.Tracing.Analysis.GC.TraceGC):Microsoft.Diagnostics.Tracing.Analysis.GC.FreeListEfficiency
         -39 (-1.24% of base) : 142771.dasm - Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder:AdjustCallArgumentsForParams(Microsoft.CSharp.RuntimeBinder.Semantics.CType,Microsoft.CSharp.RuntimeBinder.Semantics.CType,Microsoft.CSharp.RuntimeBinder.Semantics.MethodOrPropertySymbol,Microsoft.CSharp.RuntimeBinder.Semantics.TypeArray,Microsoft.CSharp.RuntimeBinder.Semantics.Expr,byref):this
         -36 (-0.14% of base) : 23078.dasm - Microsoft.CodeAnalysis.CSharp.CSharpCommandLineParser:Parse(System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]],System.String,System.String,System.String):Microsoft.CodeAnalysis.CSharp.CSharpCommandLineArguments:this
         -32 (-1.45% of base) : 134849.dasm - System.Xml.Serialization.ReflectionXmlSerializationWriter:GenerateMembersElement(System.Object,System.Xml.Serialization.XmlMembersMapping):this
         -30 (-1.89% of base) : 51037.dasm - Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceFile:BindImports(Microsoft.CodeAnalysis.SyntaxList`1[[Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax, Microsoft.CodeAnalysis.VisualBasic, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]],Microsoft.CodeAnalysis.VisualBasic.Binder,Microsoft.CodeAnalysis.DiagnosticBag,byref,byref,byref,byref,System.Threading.CancellationToken,System.Nullable`1[TextSpan])
         -29 (-3.46% of base) : 74716.dasm - Microsoft.CodeAnalysis.AssemblyPortabilityPolicy:LoadFromXml(System.IO.Stream):Microsoft.CodeAnalysis.AssemblyPortabilityPolicy
         -29 (-0.94% of base) : 174448.dasm - System.DirectoryServices.Protocols.BerConverter:Encode(System.String,System.Object[]):System.Byte[]
         -28 (-1.76% of base) : 141597.dasm - ILCompiler.Reflection.ReadyToRun.Amd64.GcInfo:GetLiveSlotsAtSafepoints(System.Byte[],byref):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[ILCompiler.Reflection.ReadyToRun.BaseGcSlot, ILCompiler.Reflection.ReadyToRun, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]:this
         -28 (-1.28% of base) : 106227.dasm - System.Data.NewDiffgramGen:GenerateTableErrors(System.Data.DataTable):this
         -27 (-4.43% of base) : 44904.dasm - NameToSymbolMapBuilder:CreateMap():System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol, Microsoft.CodeAnalysis.CSharp, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Collections.Immutable, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]:this
         -27 (-4.99% of base) : 83781.dasm - Microsoft.Diagnostics.Tracing.EventPipe.EventCache:SortAndDispatch(long):this
         -26 (-0.07% of base) : 52848.dasm - Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser:Parse(System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]],System.String,System.String,System.String):Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineArguments:this
         -26 (-2.64% of base) : 47022.dasm - Microsoft.CodeAnalysis.VisualBasic.DataFlowPass:SetSlotUnassigned(int):this
         -26 (-2.56% of base) : 69970.dasm - MemberLookup:MergeInterfaceLookupResults(Microsoft.CodeAnalysis.VisualBasic.LookupResult,Microsoft.CodeAnalysis.VisualBasic.LookupResult,Roslyn.Utilities.ConsList`1[[Microsoft.CodeAnalysis.VisualBasic.Symbol, Microsoft.CodeAnalysis.VisualBasic, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]],System.Nullable`1[Boolean],byref)
         -24 (-12.24% of base) : 137656.dasm - System.Speech.Internal.StringBlob:FromOffset(int):System.String:this
         -23 (-4.32% of base) : 135442.dasm - System.Xml.Serialization.XmlSchemaExporter:ExportRootIfNecessary(System.Xml.Serialization.TypeScope):this

Top method regressions (percentages):
         268 (15.93% of base) : 42327.dasm - Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.MetadataDecoder:SubstituteNoPiaLocalType(byref,bool,Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol,System.String,System.String,System.String,Microsoft.CodeAnalysis.CSharp.Symbols.AssemblySymbol):Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol
         268 (15.10% of base) : 49284.dasm - Microsoft.CodeAnalysis.VisualBasic.Symbols.Metadata.PE.MetadataDecoder:SubstituteNoPiaLocalType(byref,bool,Microsoft.CodeAnalysis.VisualBasic.Symbols.TypeSymbol,System.String,System.String,System.String,Microsoft.CodeAnalysis.VisualBasic.Symbols.AssemblySymbol):Microsoft.CodeAnalysis.VisualBasic.Symbols.NamedTypeSymbol
           4 ( 2.74% of base) : 33418.dasm - Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.CSharpSyntaxNode:ApplyDirectives(Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.DirectiveStack):Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.DirectiveStack:this
           5 ( 2.22% of base) : 56554.dasm - Microsoft.CodeAnalysis.VisualBasic.Syntax.InternalSyntax.VisualBasicSyntaxNode:CollectConstituentTokensAndDiagnostics(Microsoft.CodeAnalysis.VisualBasic.Syntax.InternalSyntax.SyntaxListBuilder`1[[Microsoft.CodeAnalysis.VisualBasic.Syntax.InternalSyntax.SyntaxToken, Microsoft.CodeAnalysis.VisualBasic, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]],System.Collections.Generic.IList`1[[Microsoft.CodeAnalysis.DiagnosticInfo, Microsoft.CodeAnalysis, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]):this
           4 ( 2.20% of base) : 56533.dasm - Microsoft.CodeAnalysis.VisualBasic.Syntax.InternalSyntax.VisualBasicSyntaxNode:AddSyntaxErrors(System.Collections.Generic.List`1[[Microsoft.CodeAnalysis.DiagnosticInfo, Microsoft.CodeAnalysis, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]):this
           6 ( 2.11% of base) : 147858.dasm - <>c:<GetStringValue>b__19_2(System.Span`1[Char],System.String[]):this
           8 ( 0.93% of base) : 61803.dasm - Microsoft.CodeAnalysis.VisualBasic.Syntax.VisualBasicWarningStateMap:CreateWarningStateEntries(System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, Microsoft.CodeAnalysis.VisualBasic, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]):Microsoft.CodeAnalysis.Syntax.AbstractWarningStateMap+WarningStateMapEntry[]
          11 ( 0.93% of base) : 227232.dasm - Internal.NativeFormat.NativeWriter:Save(System.IO.Stream):this
          29 ( 0.91% of base) : 6591.dasm - <StartupCode$FSharp-Core>.$Quotations:eq@197(Microsoft.FSharp.Quotations.Tree,Microsoft.FSharp.Quotations.Tree):bool
          10 ( 0.62% of base) : 165949.dasm - System.Configuration.ConfigurationElement:ParseLockedAttributes(System.Configuration.ConfigurationValue,int):System.Configuration.ConfigurationLockCollection:this
           4 ( 0.62% of base) : 194764.dasm - System.Net.Http.Headers.HttpHeaders:RemoveParsedValue(System.Net.Http.Headers.HeaderDescriptor,System.Object):bool:this
           4 ( 0.58% of base) : 210141.dasm - System.Security.Claims.ClaimsIdentity:WriteTo(System.IO.BinaryWriter,System.Byte[]):this
          18 ( 0.53% of base) : 47520.dasm - Microsoft.CodeAnalysis.VisualBasic.Binder:BindFieldAndPropertyInitializers(Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceMemberContainerTypeSymbol,System.Collections.Immutable.ImmutableArray`1[ImmutableArray`1],Microsoft.CodeAnalysis.VisualBasic.Symbols.SynthesizedInteractiveInitializerMethod,Microsoft.CodeAnalysis.DiagnosticBag):System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.VisualBasic.BoundInitializer, Microsoft.CodeAnalysis.VisualBasic, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]
           8 ( 0.40% of base) : 233185.dasm - Xunit.Sdk.TestCaseDescriptorFactory:.ctor(System.Object,System.Object,System.Object):this
           4 ( 0.22% of base) : 164690.dasm - System.Composition.Convention.PartConventionBuilder:BuildTypeAttributes(System.Type):System.Collections.Generic.IEnumerable`1[[System.Attribute, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]:this
           1 ( 0.19% of base) : 23687.dasm - Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel:GetBasesBeingResolved(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax):Roslyn.Utilities.ConsList`1[[Microsoft.CodeAnalysis.CSharp.Symbol, Microsoft.CodeAnalysis.CSharp, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]:this
           4 ( 0.18% of base) : 107560.dasm - System.Data.DataTable:EvaluateDependentExpressions(System.Collections.Generic.List`1[[System.Data.DataColumn, System.Data.Common, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]],System.Data.DataRow,int,System.Collections.Generic.List`1[[System.Data.DataRow, System.Data.Common, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]):this
           4 ( 0.17% of base) : 165740.dasm - System.Configuration.BaseConfigurationRecord:ResolveLocationSections():this
           4 ( 0.08% of base) : 106238.dasm - System.Data.XmlDataTreeWriter:XmlDataRowWriter(System.Data.DataRow,System.String):this
           3 ( 0.07% of base) : 135812.dasm - System.Xml.Serialization.XmlSerializationReaderCodeGen:WriteLiteralStructMethod(System.Xml.Serialization.StructMapping):this

Top method improvements (percentages):
         -24 (-12.24% of base) : 137656.dasm - System.Speech.Internal.StringBlob:FromOffset(int):System.String:this
         -20 (-9.57% of base) : 110742.dasm - System.Data.Common.DbDataAdapter:UpdatedRowStatusContinue(System.Data.Common.RowUpdatedEventArgs,System.Data.Common.DbDataAdapter+BatchCommandInfo[],int):int:this
         -10 (-7.58% of base) : 194015.dasm - System.Net.Http.HttpConnectionPool:TransferConnection(System.Net.Http.HttpConnection):bool:this
         -17 (-5.35% of base) : 53093.dasm - Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation:CommonLanguageVersion(System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.SyntaxTree, Microsoft.CodeAnalysis, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]):int:this
         -27 (-4.99% of base) : 83781.dasm - Microsoft.Diagnostics.Tracing.EventPipe.EventCache:SortAndDispatch(long):this
         -20 (-4.94% of base) : 78137.dasm - Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor:ExecuteSyntaxNodeActions(System.Collections.Generic.IEnumerable`1[[Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]],System.Collections.Generic.IDictionary`2[[System.Byte, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalyzerAction`1[[System.Byte, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.CodeAnalysis, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Collections.Immutable, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]],Microsoft.CodeAnalysis.SemanticModel,System.Func`2[[Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.Byte, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]],System.Action`1[[Microsoft.CodeAnalysis.Diagnostic, Microsoft.CodeAnalysis, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]],SyntaxNodeAnalyzerStateData):this
         -27 (-4.43% of base) : 44904.dasm - NameToSymbolMapBuilder:CreateMap():System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceOrTypeSymbol, Microsoft.CodeAnalysis.CSharp, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Collections.Immutable, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]:this
         -23 (-4.32% of base) : 135442.dasm - System.Xml.Serialization.XmlSchemaExporter:ExportRootIfNecessary(System.Xml.Serialization.TypeScope):this
         -10 (-4.29% of base) : 107410.dasm - System.Data.DataSet:FindTable(System.Data.DataTable,System.ComponentModel.PropertyDescriptor[],int):System.Data.DataTable:this
         -45 (-4.14% of base) : 100361.dasm - Microsoft.Diagnostics.Tracing.Analysis.GC.TraceGC:GetFreeListEfficiency(System.Collections.Generic.List`1[[Microsoft.Diagnostics.Tracing.Analysis.GC.TraceGC, Microsoft.Diagnostics.Tracing.TraceEvent, Version=2.0.65.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]],Microsoft.Diagnostics.Tracing.Analysis.GC.TraceGC):Microsoft.Diagnostics.Tracing.Analysis.GC.FreeListEfficiency
          -5 (-3.88% of base) : 53130.dasm - Microsoft.CodeAnalysis.VisualBasic.VisualBasicPreprocessingSymbolInfo:Equals(System.Object):bool:this
         -76 (-3.47% of base) : 67520.dasm - Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode:DoGetSyntaxErrors(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxNodeOrToken):System.Collections.ObjectModel.ReadOnlyCollection`1[[Microsoft.CodeAnalysis.Diagnostic, Microsoft.CodeAnalysis, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]
         -29 (-3.46% of base) : 74716.dasm - Microsoft.CodeAnalysis.AssemblyPortabilityPolicy:LoadFromXml(System.IO.Stream):Microsoft.CodeAnalysis.AssemblyPortabilityPolicy
          -4 (-3.36% of base) : 83474.dasm - Microsoft.Diagnostics.Tracing.StackSources.BlockedTimeAnalyzer:get_TotalBlockedTime():double:this
          -9 (-3.36% of base) : 130552.dasm - System.Xml.Xsl.Xslt.CompilerScopeManager`1[__Canon][System.__Canon]:IsExNamespace(System.String):bool:this
          -9 (-3.36% of base) : 130578.dasm - System.Xml.Xsl.Xslt.CompilerScopeManager`1[Byte][System.Byte]:IsExNamespace(System.String):bool:this
          -5 (-2.81% of base) : 142760.dasm - Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder:FindNamedArgumentsType(Microsoft.CSharp.RuntimeBinder.Semantics.Expr):int
          -5 (-2.76% of base) : 67288.dasm - Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory:NodesAreCorrectType(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList):bool
          -5 (-2.72% of base) : 27992.dasm - Microsoft.CodeAnalysis.CSharp.SyntaxFactory:NodesAreCorrectType(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList):bool
          -5 (-2.66% of base) : 163638.dasm - System.ComponentModel.TypeDescriptor:set_ComNativeDescriptorHandler(System.ComponentModel.IComNativeDescriptorHandler)

149 total methods with Code Size differences (129 improved, 20 regressed), 366 unchanged.

```

</details>

--------------------------------------------------------------------------------

**asm.tests.pmi.windows.x64.checked** 
```

Summary of Code Size diffs:
(Lower is better)

Total bytes of base: 107192
Total bytes of diff: 105763
Total bytes of delta: -1429 (-1.33% of base)
    diff is an improvement.
```
<details>

<summary>Detail diffs</summary>

```


Top file regressions (bytes):
           4 : 242414.dasm (1.80% of base)
           4 : 217097.dasm (0.22% of base)
           3 : 191117.dasm (0.16% of base)

Top file improvements (bytes):
        -310 : 167469.dasm (-1.41% of base)
        -243 : 244274.dasm (-9.49% of base)
        -243 : 244265.dasm (-9.49% of base)
        -154 : 244248.dasm (-5.71% of base)
        -153 : 244257.dasm (-3.14% of base)
         -39 : 235178.dasm (-2.17% of base)
         -39 : 241187.dasm (-5.02% of base)
         -31 : 250088.dasm (-9.20% of base)
         -26 : 235181.dasm (-1.53% of base)
         -26 : 191107.dasm (-1.38% of base)
         -17 : 167488.dasm (-0.75% of base)
         -16 : 217480.dasm (-0.07% of base)
         -16 : 81075.dasm (-15.69% of base)
         -13 : 247582.dasm (-2.14% of base)
          -9 : 221331.dasm (-2.09% of base)
          -9 : 216715.dasm (-2.21% of base)
          -9 : 221307.dasm (-2.09% of base)
          -6 : 231305.dasm (-0.37% of base)
          -6 : 81079.dasm (-5.22% of base)
          -5 : 166386.dasm (-2.19% of base)

39 total files with Code Size differences (36 improved, 3 regressed), 38 unchanged.

Top method regressions (bytes):
           4 ( 1.80% of base) : 242414.dasm - AA:Static4():System.Int16[]
           4 ( 0.22% of base) : 217097.dasm - Span.IndexerBench:Main(System.String[]):int
           3 ( 0.16% of base) : 191117.dasm - AssignRect:second_assignments(System.Int32[,],System.Int16[,])

Top method improvements (bytes):
        -310 (-1.41% of base) : 167469.dasm - ReliabilityConfig:GetTestsToRun(System.String):this
        -243 (-9.49% of base) : 244274.dasm - structarr:gaussj(MatrixStruct,int,MatrixStruct,int)
        -243 (-9.49% of base) : 244265.dasm - plainarr:gaussj(System.Double[,],int,System.Double[,],int)
        -154 (-5.71% of base) : 244248.dasm - classarr:gaussj(MatrixCls,int,MatrixCls,int)
        -153 (-3.14% of base) : 244257.dasm - jaggedarr:gaussj(System.Double[,][],int,System.Double[,][],int)
         -39 (-2.17% of base) : 235178.dasm - string1:ProcessJagged2DArray(byref)
         -39 (-5.02% of base) : 241187.dasm - BB:Static1(System.Double[,,][],byref,int,byref)
         -31 (-9.20% of base) : 250088.dasm - Program:Test(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]],System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]],System.String,int,long):int
         -26 (-1.53% of base) : 235181.dasm - string1:ProcessJagged3DArray(System.String[][])
         -26 (-1.38% of base) : 191107.dasm - AssignJagged:second_assignments(System.Int32[][],System.Int16[][])
         -17 (-0.75% of base) : 167488.dasm - ReliabilityFramework:TestStarter():this
         -16 (-0.07% of base) : 217480.dasm - DefaultNamespace.cb6054ToByte_all:runTest():bool:this
         -16 (-15.69% of base) : 81075.dasm - Test.AA:Method1(bool)
         -13 (-2.14% of base) : 247582.dasm - Benchstone.BenchI.Array2:Bench(int):bool
          -9 (-2.09% of base) : 221331.dasm - PartialCompactionTest.PartialCompactionTest:UpdateReferences()
          -9 (-2.21% of base) : 216715.dasm - LinqBenchmarks:Where01For():bool:this
          -9 (-2.09% of base) : 221307.dasm - PartialCompactionTest.PartialCompactionTest:UpdateReferences()
          -6 (-0.37% of base) : 231305.dasm - PinStress.PinStress:Main(System.String[]):int
          -6 (-5.22% of base) : 81079.dasm - Test.AA:Method1(byref)
          -5 (-2.19% of base) : 166386.dasm - Internal.TypeSystem.TypeSystemHelpers:FindMethodOnTypeWithMatchingTypicalMethod(Internal.TypeSystem.TypeDesc,Internal.TypeSystem.MethodDesc):Internal.TypeSystem.MethodDesc

Top method regressions (percentages):
           4 ( 1.80% of base) : 242414.dasm - AA:Static4():System.Int16[]
           4 ( 0.22% of base) : 217097.dasm - Span.IndexerBench:Main(System.String[]):int
           3 ( 0.16% of base) : 191117.dasm - AssignRect:second_assignments(System.Int32[,],System.Int16[,])

Top method improvements (percentages):
         -16 (-15.69% of base) : 81075.dasm - Test.AA:Method1(bool)
        -243 (-9.49% of base) : 244274.dasm - structarr:gaussj(MatrixStruct,int,MatrixStruct,int)
        -243 (-9.49% of base) : 244265.dasm - plainarr:gaussj(System.Double[,],int,System.Double[,],int)
         -31 (-9.20% of base) : 250088.dasm - Program:Test(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]],System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]],System.String,int,long):int
        -154 (-5.71% of base) : 244248.dasm - classarr:gaussj(MatrixCls,int,MatrixCls,int)
          -6 (-5.22% of base) : 81079.dasm - Test.AA:Method1(byref)
         -39 (-5.02% of base) : 241187.dasm - BB:Static1(System.Double[,,][],byref,int,byref)
          -5 (-3.94% of base) : 191595.dasm - ABIStress.SysVAbi:ApproximateArgStackAreaSize(System.Collections.Generic.List`1[[ABIStress.TypeEx, pinvokes_do, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]):int:this
          -5 (-3.94% of base) : 191588.dasm - ABIStress.Win86Abi:ApproximateArgStackAreaSize(System.Collections.Generic.List`1[[ABIStress.TypeEx, pinvokes_do, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]):int:this
          -5 (-3.82% of base) : 216720.dasm - LinqBenchmarks:Count00For():bool:this
        -153 (-3.14% of base) : 244257.dasm - jaggedarr:gaussj(System.Double[,][],int,System.Double[,][],int)
          -9 (-2.21% of base) : 216715.dasm - LinqBenchmarks:Where01For():bool:this
          -5 (-2.19% of base) : 166386.dasm - Internal.TypeSystem.TypeSystemHelpers:FindMethodOnTypeWithMatchingTypicalMethod(Internal.TypeSystem.TypeDesc,Internal.TypeSystem.MethodDesc):Internal.TypeSystem.MethodDesc
         -39 (-2.17% of base) : 235178.dasm - string1:ProcessJagged2DArray(byref)
         -13 (-2.14% of base) : 247582.dasm - Benchstone.BenchI.Array2:Bench(int):bool
          -9 (-2.09% of base) : 221331.dasm - PartialCompactionTest.PartialCompactionTest:UpdateReferences()
          -9 (-2.09% of base) : 221307.dasm - PartialCompactionTest.PartialCompactionTest:UpdateReferences()
          -5 (-1.60% of base) : 221337.dasm - PartialCompactionTest.PartialCompactionTest:AddRefFrom(System.Object)
          -5 (-1.60% of base) : 221317.dasm - PartialCompactionTest.PartialCompactionTest:AddRefTo(System.Object)
          -5 (-1.60% of base) : 221316.dasm - PartialCompactionTest.PartialCompactionTest:AddRefFrom(System.Object)

39 total methods with Code Size differences (36 improved, 3 regressed), 38 unchanged.

```

</details>

--------------------------------------------------------------------------------

**asm.tests_libraries.pmi.windows.x64.checked** 
```

Summary of Code Size diffs:
(Lower is better)

Total bytes of base: 521536
Total bytes of diff: 519828
Total bytes of delta: -1708 (-0.33% of base)
    diff is an improvement.
```
<details>

<summary>Detail diffs</summary>

```


Top file regressions (bytes):
          77 : 188550.dasm (8.52% of base)
          50 : 188519.dasm (7.24% of base)
          50 : 189070.dasm (7.24% of base)
          27 : 188511.dasm (9.15% of base)
          27 : 189062.dasm (9.15% of base)
          22 : 187763.dasm (0.50% of base)
          20 : 189552.dasm (6.69% of base)
          20 : 188937.dasm (6.69% of base)
           8 : 128992.dasm (1.04% of base)
           7 : 187898.dasm (0.38% of base)
           7 : 121278.dasm (0.22% of base)
           6 : 21392.dasm (0.09% of base)
           4 : 130012.dasm (0.27% of base)
           4 : 3931.dasm (0.19% of base)
           4 : 3962.dasm (0.19% of base)
           4 : 117659.dasm (0.34% of base)
           4 : 262127.dasm (0.91% of base)
           4 : 195130.dasm (0.62% of base)
           3 : 104070.dasm (0.45% of base)
           2 : 151318.dasm (0.30% of base)

Top file improvements (bytes):
        -146 : 103679.dasm (-2.93% of base)
         -72 : 125511.dasm (-2.44% of base)
         -70 : 209265.dasm (-2.59% of base)
         -58 : 119164.dasm (-10.53% of base)
         -58 : 6035.dasm (-10.53% of base)
         -58 : 118003.dasm (-10.53% of base)
         -46 : 244956.dasm (-2.49% of base)
         -46 : 240550.dasm (-2.49% of base)
         -40 : 240580.dasm (-0.82% of base)
         -40 : 244986.dasm (-0.82% of base)
         -36 : 228027.dasm (-4.34% of base)
         -36 : 200230.dasm (-4.34% of base)
         -36 : 229695.dasm (-4.34% of base)
         -36 : 144579.dasm (-4.34% of base)
         -36 : 272586.dasm (-4.34% of base)
         -36 : 63204.dasm (-4.34% of base)
         -36 : 292085.dasm (-4.34% of base)
         -36 : 293413.dasm (-4.34% of base)
         -36 : 294554.dasm (-4.34% of base)
         -36 : 157129.dasm (-4.34% of base)

141 total files with Code Size differences (117 improved, 24 regressed), 429 unchanged.

Top method regressions (bytes):
          77 ( 8.52% of base) : 188550.dasm - System.SpanTests.ReadOnlySpanTests:SequenceEqualNoMatch(int)
          50 ( 7.24% of base) : 188519.dasm - System.SpanTests.ReadOnlySpanTests:StartsWithNoMatch()
          50 ( 7.24% of base) : 189070.dasm - System.SpanTests.SpanTests:StartsWithNoMatch()
          27 ( 9.15% of base) : 188511.dasm - System.SpanTests.ReadOnlySpanTests:StartsWithNoMatch_Long()
          27 ( 9.15% of base) : 189062.dasm - System.SpanTests.SpanTests:StartsWithNoMatch_Long()
          22 ( 0.50% of base) : 187763.dasm - System.MemoryTests.MemoryTests:MemoryExtensionsTest()
          20 ( 6.69% of base) : 189552.dasm - System.SpanTests.SpanTests:EndsWithNoMatch_Long()
          20 ( 6.69% of base) : 188937.dasm - System.SpanTests.ReadOnlySpanTests:EndsWithNoMatch_Long()
           8 ( 1.04% of base) : 128992.dasm - Microsoft.Diagnostics.Runtime.Desktop.DesktopStaticField:TryBuildType(Microsoft.Diagnostics.Runtime.ClrHeap):Microsoft.Diagnostics.Runtime.ClrType:this
           7 ( 0.38% of base) : 187898.dasm - System.MemoryTests.MemoryPoolTests:EachRentalIsUniqueUntilDisposed()
           7 ( 0.22% of base) : 121278.dasm - Microsoft.CodeAnalysis.CSharp.ReplaceDiscardDeclarationsWithAssignments.CSharpReplaceDiscardDeclarationsWithAssignmentsService:ReplaceAsync(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.Workspace,System.Threading.CancellationToken):System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis, Version=3.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]:this
           6 ( 0.09% of base) : 21392.dasm - <CreateIndexAsync>d__21:MoveNext():this
           4 ( 0.27% of base) : 130012.dasm - Microsoft.Diagnostics.Runtime.Utilities.DefaultSymbolLocator:FindBinary(System.String,int,int,bool):System.String:this
           4 ( 0.19% of base) : 3931.dasm - Microsoft.Build.BackEnd.BuildRequestEngine:<CleanupForBuild>b__38_0():this
           4 ( 0.19% of base) : 3962.dasm - Microsoft.Build.BackEnd.BuildRequestEngine:EvaluateRequestStates():this
           4 ( 0.34% of base) : 117659.dasm - Microsoft.Build.Tasks.Deployment.Bootstrapper.BootstrapperBuilder:GetOutputFolders(System.String[],System.String,System.String,int):System.String[]:this
           4 ( 0.91% of base) : 262127.dasm - Emitter:GenType(LoggerClass):this
           4 ( 0.62% of base) : 195130.dasm - System.Net.Http.Headers.HttpHeaders:RemoveParsedValue(System.Net.Http.Headers.HeaderDescriptor,System.Object):bool:this
           3 ( 0.45% of base) : 104070.dasm - DryIoc.Made:GetArgServiceDetails(System.Linq.Expressions.Expression,System.Linq.Expressions.MethodCallExpression,System.Type,int,System.Object):DryIoc.ServiceDetails
           2 ( 0.30% of base) : 151318.dasm - System.ComponentModel.Composition.CompositionResultTest:MergeResult_ResultWithErrorsAsResultArgument_ShouldReturnResultWithCombinedErrors():this

Top method improvements (bytes):
        -146 (-2.93% of base) : 103679.dasm - FastExpressionCompiler.LightExpression.ExpressionCompiler:TryCollectBoundConstants(byref,FastExpressionCompiler.LightExpression.Expression,System.Collections.Generic.IReadOnlyList`1[[FastExpressionCompiler.LightExpression.ParameterExpression, DryIoc, Version=4.1.4.0, Culture=neutral, PublicKeyToken=dfbf2bd50fcf7768]],bool,byref):bool
         -72 (-2.44% of base) : 125511.dasm - Microsoft.CodeAnalysis.VisualBasic.Extensions.SyntaxTreeExtensions:FindTriviaToLeft(Microsoft.CodeAnalysis.SyntaxNodeOrToken,int):Microsoft.CodeAnalysis.SyntaxTrivia
         -70 (-2.59% of base) : 209265.dasm - System.Tests.ConvertTestBase`1[__Canon][System.__Canon]:Verify(System.Func`2[__Canon,__Canon],System.__Canon[],System.__Canon[]):this
         -58 (-10.53% of base) : 119164.dasm - Microsoft.Build.Shared.FileUtilities:ContainsRelativePathSegments(System.String):bool
         -58 (-10.53% of base) : 6035.dasm - Microsoft.Build.Shared.FileUtilities:ContainsRelativePathSegments(System.String):bool
         -58 (-10.53% of base) : 118003.dasm - Microsoft.Build.Shared.FileUtilities:ContainsRelativePathSegments(System.String):bool
         -46 (-2.49% of base) : 244956.dasm - System.Data.SqlClient.SqlCommand:BuildParamList(System.Data.SqlClient.TdsParser,System.Data.SqlClient.SqlParameterCollection):System.String:this
         -46 (-2.49% of base) : 240550.dasm - System.Data.SqlClient.SqlCommand:BuildParamList(System.Data.SqlClient.TdsParser,System.Data.SqlClient.SqlParameterCollection):System.String:this
         -40 (-0.82% of base) : 240580.dasm - System.Data.SqlClient.SqlCommand:DeriveParameters():this
         -40 (-0.82% of base) : 244986.dasm - System.Data.SqlClient.SqlCommand:DeriveParameters():this
         -36 (-4.34% of base) : 228027.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 200230.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 229695.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 144579.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 272586.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 63204.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 292085.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 293413.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 294554.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 157129.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this

Top method regressions (percentages):
          27 ( 9.15% of base) : 188511.dasm - System.SpanTests.ReadOnlySpanTests:StartsWithNoMatch_Long()
          27 ( 9.15% of base) : 189062.dasm - System.SpanTests.SpanTests:StartsWithNoMatch_Long()
          77 ( 8.52% of base) : 188550.dasm - System.SpanTests.ReadOnlySpanTests:SequenceEqualNoMatch(int)
          50 ( 7.24% of base) : 188519.dasm - System.SpanTests.ReadOnlySpanTests:StartsWithNoMatch()
          50 ( 7.24% of base) : 189070.dasm - System.SpanTests.SpanTests:StartsWithNoMatch()
          20 ( 6.69% of base) : 189552.dasm - System.SpanTests.SpanTests:EndsWithNoMatch_Long()
          20 ( 6.69% of base) : 188937.dasm - System.SpanTests.ReadOnlySpanTests:EndsWithNoMatch_Long()
           8 ( 1.04% of base) : 128992.dasm - Microsoft.Diagnostics.Runtime.Desktop.DesktopStaticField:TryBuildType(Microsoft.Diagnostics.Runtime.ClrHeap):Microsoft.Diagnostics.Runtime.ClrType:this
           4 ( 0.91% of base) : 262127.dasm - Emitter:GenType(LoggerClass):this
           4 ( 0.62% of base) : 195130.dasm - System.Net.Http.Headers.HttpHeaders:RemoveParsedValue(System.Net.Http.Headers.HeaderDescriptor,System.Object):bool:this
          22 ( 0.50% of base) : 187763.dasm - System.MemoryTests.MemoryTests:MemoryExtensionsTest()
           3 ( 0.45% of base) : 104070.dasm - DryIoc.Made:GetArgServiceDetails(System.Linq.Expressions.Expression,System.Linq.Expressions.MethodCallExpression,System.Type,int,System.Object):DryIoc.ServiceDetails
           7 ( 0.38% of base) : 187898.dasm - System.MemoryTests.MemoryPoolTests:EachRentalIsUniqueUntilDisposed()
           4 ( 0.34% of base) : 117659.dasm - Microsoft.Build.Tasks.Deployment.Bootstrapper.BootstrapperBuilder:GetOutputFolders(System.String[],System.String,System.String,int):System.String[]:this
           2 ( 0.30% of base) : 151318.dasm - System.ComponentModel.Composition.CompositionResultTest:MergeResult_ResultWithErrorsAsResultArgument_ShouldReturnResultWithCombinedErrors():this
           1 ( 0.29% of base) : 188620.dasm - System.SpanTests.ReadOnlySpanTests:SequenceCompareToWithSingleMismatch_Bool()
           4 ( 0.27% of base) : 130012.dasm - Microsoft.Diagnostics.Runtime.Utilities.DefaultSymbolLocator:FindBinary(System.String,int,int,bool):System.String:this
           7 ( 0.22% of base) : 121278.dasm - Microsoft.CodeAnalysis.CSharp.ReplaceDiscardDeclarationsWithAssignments.CSharpReplaceDiscardDeclarationsWithAssignmentsService:ReplaceAsync(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.Workspace,System.Threading.CancellationToken):System.Threading.Tasks.Task`1[[Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis, Version=3.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]:this
           4 ( 0.19% of base) : 3931.dasm - Microsoft.Build.BackEnd.BuildRequestEngine:<CleanupForBuild>b__38_0():this
           4 ( 0.19% of base) : 3962.dasm - Microsoft.Build.BackEnd.BuildRequestEngine:EvaluateRequestStates():this

Top method improvements (percentages):
         -58 (-10.53% of base) : 119164.dasm - Microsoft.Build.Shared.FileUtilities:ContainsRelativePathSegments(System.String):bool
         -58 (-10.53% of base) : 6035.dasm - Microsoft.Build.Shared.FileUtilities:ContainsRelativePathSegments(System.String):bool
         -58 (-10.53% of base) : 118003.dasm - Microsoft.Build.Shared.FileUtilities:ContainsRelativePathSegments(System.String):bool
          -7 (-5.11% of base) : 130610.dasm - DictionaryList:TryGetValue(long,byref):bool:this
         -36 (-4.34% of base) : 228027.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 200230.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 229695.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 144579.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 272586.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 63204.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 292085.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 293413.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 294554.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 157129.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 201747.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 180288.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 311257.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
         -36 (-4.34% of base) : 312029.dasm - System.Diagnostics.Tracing.TestEventListener:AddSource(System.String,System.Nullable`1[Guid],int,long):this
          -5 (-4.31% of base) : 262141.dasm - Emitter:<GenLogMethod>g__GetLogger|17_1(LoggerMethod):System.String
         -24 (-4.28% of base) : 12922.dasm - Microsoft.CodeAnalysis.Shared.Extensions.ISymbolExtensions:IsBrowsingProhibitedByTypeLibAttributeWorker(System.Collections.Immutable.ImmutableArray`1[[Microsoft.CodeAnalysis.AttributeData, Microsoft.CodeAnalysis, Version=3.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]],System.Collections.Generic.List`1[[Microsoft.CodeAnalysis.IMethodSymbol, Microsoft.CodeAnalysis, Version=3.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]],int):bool

141 total methods with Code Size differences (117 improved, 24 regressed), 429 unchanged.

```

</details>

--------------------------------------------------------------------------------
"
"There are quite a lot of test failures with `System.DllNotFoundException : libSystem.Security.Cryptography.Native.OpenSsl` on the runtime-staging Android legs, e.g.

```
   at System.PlatformDetection.GetAlpnSupport() in /_/src/libraries/Common/tests/TestUtilities/System/PlatformDetection.cs:line 162
   at System.Lazy`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ViaFactory(LazyThreadSafetyMode mode) in System.Private.CoreLib.dll:token 0x6000fc6+0x43
   at System.Lazy`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor) in System.Private.CoreLib.dll:token 0x6000fc7+0x22
   at System.Lazy`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CreateValue() in System.Private.CoreLib.dll:token 0x6000fcc+0x74
   at System.Lazy`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].get_Value() in System.Private.CoreLib.dll:token 0x6000fd2+0xa
   at System.PlatformDetection.get_SupportsAlpn() in /_/src/libraries/Common/tests/TestUtilities/System/PlatformDetection.cs:line 168
   at System.Net.Test.Common.GenericLoopbackOptions..ctor() in /_/src/libraries/Common/tests/System/Net/Http/GenericLoopbackServer.cs:line 96
   at System.Net.Test.Common.LoopbackServer.Options..ctor() in /_/src/libraries/Common/tests/System/Net/Http/LoopbackServer.cs:line 384
   at System.Net.Test.Common.LoopbackServer..ctor(Options options) in /_/src/libraries/Common/tests/System/Net/Http/LoopbackServer.cs:line 29
   at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in /_/src/libraries/Common/tests/System/Net/Http/LoopbackServer.cs:line 70
   at System.Net.Tests.WebClientTestBase.DownloadFile_Success() in /_/src/libraries/System.Net.WebClient/tests/WebClientTest.cs:line 583
--- End of stack trace from previous location ---
```

This is because we include the Unix/OpenSSL version of Interop.CryptoNative.cs which has the wrong library name.

I think we should rename the `CryptoNative` field to `AndroidCryptoNative` for all the DllImports to `AndroidCryptoNative_` functions to make these mistakes easier to catch."
"Hmm for some reason it thinks you're not a contributor: `Error: @github is not a repo collaborator, backporting is not allowed.` which is weird, probably something wrong with the token being used for the GitHub API."
"The overall logic LGTM.

I left a couple nits/comments about adding comments and possibly minor refactorings to help with readability when this inevitably is looked at again in the future. I likewise called out a peculiar scenario around handling fractional digits which I don't believe is possible (happy to be proven wrong here).

It would be great if this could get a second pair of eyes on it (CC. @github, @github, @github since you've reviewed or worked on BigInteger semi-recently)."
"Tagging subscribers to this area: @github, @github, @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Fixes https://github.com/dotnet/runtime/issues/57702

The casing of the SDK imported via the Sdk attribute was wrong which lead to:

`Microsoft.NETCore.Platforms.csproj : error MSB4236: The SDK 'Microsoft.NET.SDK' specified could not be found.`

We should probably backport this into release/6.0-rc1.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>ViktorHofer</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>ViktorHofer</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Infrastructure-libraries`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to 'arch-wasm': @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

PropertiesBinaryReader could be access by more than one thread which was causing starting reading from the wrong position and skip positions.
Added a test case for it.
@github I would like to backport to rc2.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>thaystg</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`arch-wasm`, `area-Debugger-mono`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> What we are observing here is a limitation that exists in the product and should be fixed there. MSBuild/NuGet doesn't support checking compatibility between platforms yet. Example: $([MSBuild]::TargetPlatformCompatible('$(TargetFramework)', 'unix'))

Agreed. But until we get that functionality in the product, there's nothing wrong with us having some ""helper"" functions to make our code clean/readable."
"Since the advent of NRT, It's been like a green light to use *more* nulls. C# devs seem particularly averse to `Maybe` or `Option`.  Maybe (ahem), if these were added *to the language*, they'd get better adoption and then we wouldn't need so much extra syntax.

I also have another comment re. the actual exception type: in a library, like .NET itself, the exception is as meaningul as it can be. However, in client apps and libraries, where things are much more specific, then `ArgumentNullException` doesn't really convey anything meaninful. For instance, a better exception when processing `Customers` and encountering a null `Customer`, would be a `CustomerProcessingFailedException`.
Over the years, I've had devs quote guidance from 'Framework Design Guidelines' (which is a superb book, don't get me wrong), which makes little sense in non generic Frameworks."
"Yeah, the value it's set to be the ""DPI"" settings from the given platform (Usually from an API called ""DPI""). For example, when Android returns its native rects, it doesn't return the values with the given device DPI, so the math is wrong until it is added. "
Totally... Something went wrong here. I am sure at some point it was correct. Thanks for catching this!
"@github @github - this is wrong and I think will break the templates. Any idea how we can prevent the bot from ""fixing"" this?"
"We weren't doing that because there's no user code that runs inside this try/catch block 😆  

After the comment at L104, it was expected that everything would succeed unless something is seriously wrong.

It was intentional before your changes, and based on my other feedback, I'm not sure it needs to change."
What's wrong with using [Span's void* ctor?](https://docs.microsoft.com/en-us/dotnet/api/system.span-1.-ctor?view=netcore-3.0#System_Span_1__ctor_System_Void__System_Int32_)
"In the API review meeting I believe Ryan claimed we were keeping the same order that the serializer accepted the arguments. Looks like the order was wrong, so we should probably change it 👍 "
"```suggestion
We may not investigate issues which haven't received many votes/comments and choose to close these. The reason is that the impact is very scoped and potentially something is wrong in the user code. Consider asking these questions on StackOverflow.
```"
"Thank you, I was working with the wrong assumption that config should be applied after the code and got confused by the other discussion. Updated"
"Frankly, this feels like the wrong approach.  That you're getting an error here means the returned `DateTime`s aren't `DateTimeKind.Utc`, which seems... not correct for their intended use.  There's no reason for them to be anything other than `Utc`, and the fact that the ""safe"" method doesn't otherwise correct the issue means it's going to cause problems further down the line.  If you echo/pass on the claims, is this currently causing these timestamps to change due to local/utc confusion?

The JWT claims are effectively ignorant of timezone, but are still absolute timestamps, and so can be considered UTC - a far better approach would be ensuring that the parsing method ensures that it returns the `DateTime` with the proper kind, and ensure that anything that could modify has the output coerced to UTC (via `SpecifyKind(DateTimeKind.Utc)` - which is just going to ""assign"" the kind, and leave the timestamp otherwise unchanged, and won't throw).
"
This seems wrong. Why would the page title depend on whether the project uses auth? Is the template with auth not correctly updated to include the `<PageTitle>` components?
I like the `in Endpoint.Metadata`. What's wrong with it? It could point the curious to API docs for endpoint routing.
"I split this into two commits to make reviewing it... possible. The first commit contains all the changes to our code-gened files. These were automatically generated and there is a whole mess of them. I recommend that you look at each commit separately, and on the first commit spot check a couple of the *.codgen.cs files and the *.txt files to make sure nothing crazy has happened, then turn your attention to the second commit, where the code I actually wrote is. "
"> Nice cleanup though I dunno if anything works with this today 😄

Right. The Socket transport ignores it since binding is synchronous and non-blocking. The `IConnectionListenerFactory` interface supports it though, so it felt wrong not to flow it."
"I did a bunch of perf runs locally to generally get a picture of what's going on.

With a custom logging provider which noop'd (to remove the impact of the actual logging), I saw around a 3% regression with logging the request, response, and response body.  

Before (no HttpLoggingMiddleware)
```
Bombarding http://localhost:5000 for 10s using 125 connection(s)
[=================================================================================================================================================================================================================================================================================] 10s
Done!
Statistics        Avg      Stdev        Max
  Reqs/sec     70548.12   12436.92  144929.16
  Latency        1.72ms   763.52us    70.14ms
  HTTP codes:
    1xx - 0, 2xx - 713518, 3xx - 0, 4xx - 0, 5xx - 0
    others - 0
  Throughput:    14.36MB/s
```

After (with middleware and noop logging)
```
Bombarding http://localhost:5000 for 10s using 125 connection(s)
[=================================================================================================================================================================================================================================================================================] 10s
Done!
Statistics        Avg      Stdev        Max
  Reqs/sec     68877.66   14550.83  114951.68
  Latency        1.77ms   629.66us   139.06ms
  HTTP codes:
    1xx - 0, 2xx - 696073, 3xx - 0, 4xx - 0, 5xx - 0
    others - 0
  Throughput:    14.01MB/s
```

I averaged a few runs here and in general, removing the middleware showed around a 3% gain, which is expected.

I'm going to try some worst case scenarios just for kicks now. But there isn't anything obscenely wrong perf wise."
"not sure what you mean. we want to give some initial value to it otherwise, concurrentdictionary goes crazy. you can see how we use concurrentdictionary in other places."
this whole approach feels very wrong.  We generated the tree manually.  Why did we not just put the rename annotation on the name when we generated things?
"@github I think the first item is wrong, the using statements should only be removed if the MSBuild property `ImplicitUsings` is enabled and we don't have that info in the template yet, so we're going to keep the usings there to ensure the template works in all projects. The others look right."
"Hi @github, I search through the references of the `Get<TFeature>` method in the codebase for half of an hour, but am not getting the ""aaahaaa"" moment so that we can use this extension method directly.

In most places if the feature is null we do one of the following - 
1. we are just avoiding certain initialization. literally a guarding `if` condition. 
2. Sometimes we add that feature in FeatureCollection. 
3. uses null coalescing `?.methodCall()` or `!.methodCall()` and forget. 
4. For some places we do throw an `InvalidOperationException` but the problem is the exception message is a different place to place, so if we use our new extension method, then everywhere the same exception message will be thrown and it will be a breaking change for users! I know it's just an exception message change, but still, (I may be wrong) it's breaking change I guess! 

Can you point out any place where you would have thought that we can use this extension method!? 




"
">argument.Type.ToDisplayString() [](start = 20, length = 31)

This feels very wrong. We should compare against type symbols instead.  #Closed"
"This should likely be in the 'CSharp/Features' project, not EditorFeatures.  (but i could be wrong about that)."
"This approach of sometimes caring about the suppression and sometimes not feels brittle. I'm looking through the code wondering how many uses of `BoundNode.Kind` are now wrong. Did we consider other approaches like making suppression a flag, altering the type, etc ...?"
"Lambdas with multiple returns are tested below in `CheckLambdaInLambdaInference`

I tested ternaries and found that the behavior was wrong and filed [https://github.com/dotnet/roslyn/issues/35029](https://github.com/dotnet/roslyn/issues/35029)

---
In reply to: [276122618](https://github.com/dotnet/roslyn/pull/35030#discussion_r276122618) [](ancestors = 276122618)"
">GetSymbolAsync [](start = 39, length = 14)

I'm curious why do we have this logic here. My understanding is that this code is only used by LSP. Do we have different behavior for regular VS vs LSP? That seems wrong."
"I had it drilled into me in college that ""recur"" is what happens when you employ recursion, and ""recurse"" is what happens when you swear again. Ever since ""recurse"" just sounds wrong to me."
"Comment would be great! My primary concern is .First() implies there can be two, but it looks like we'd then handle that wrong, at least in that the code fix description wouldn't say what was going on.="
How are people going to figure what went wrong when they hit this?
"I don't think we have a way to auto-generate only a list of APIs, we can only auto-generate the not supported assemblies using GenAPI at compile time for all the APIs defined in the ref assembly. @github can correct me if I'm wrong. "
"Yikes yea that's not great. I'll revert that - I was having some lifetime issues with TermControl where if you construct one, then don't add it to the UI, it never gets initialized, then it tries to destruct, and we explode here. 

But this change is definitely wrong."
Is it a correctness fix? Were we getting wrong VN pair for `!=` in the past?
"The PR is going in the wrong direction.
I'll look into change to use the presence of the `Microsoft` in uname to find out if we are in WSL1 or 2 and the presence of the env variable `WSL_DISTRO_NAME` to know that we are in a new enough WSL version."
"Yeah, I know, right? I can't wait. Until then, I think @github and I agreed that we can just use it correctly and let it barf gloriously in the compiler should you use the template wrong. Unless I misunderstood that conversation or he gets a new idea in the next week to scope it down."
"yaay, i'm not crazy :)"
"I think that exact point is where the last OSC 7 attempt got stuck as well: Is the `file://` URL we're receiving here per the FD spec, or per the Windows spec?

In the end, we can't support both, because as you've noted, they have different semantics for overlapping cases.

We could perhaps support the common subset by ignoring the FD spec's back-compat parse (`file://usr/local/bin` =>`/usr/local/bin`), and ignoring the Windows remote-host parse (`file://server/share/file` => `\\server\share\file`), and hence having unambiguous parsing for those URLs we don't reject as ""wrong host"" (FD) or ""remote host"" (Windows), although that does block using OSC 7 when my shell's CWD _is_ a remote (UNC) path, which includes WSL mounts accessed from the host.

Whichever format you choose, I can't see a way to avoid making some or all shells aware that they're on Windows, without already-rejected hacking at process information to determine details about the virtualised filesystem they are reporting paths against. The proposal is to punt that to a higher layer, but I don't think a higher layer can do anything differently on this point."
"@github Are Contributors allowed to refactor the test files? As I can see that most of the assertions failed because it is expecting an improper value

For example : 
One test case is expecting `Alt+A` for MacOS instead of `Opt+A` in [keybindingIO.test.ts](https://github.com/microsoft/vscode/blob/659175fa39b994fc39381b0af2874c85efeb2a01/src/vs/workbench/services/keybinding/test/browser/keybindingIO.test.ts#L53) file

Correct me if I am wrong"
"Please rename then (maybe ToImmutableAndClear()).  FWIW, i find the semantics of MoveToImmutable very very very intuitive.  It's exactly as it says.  It takes the underlying array and creates the ImmutableArray out of it, doing it as a simple O(1) move instead of O(n) copy.  It's exception behavior is also intuitive and appropriate IMO.  The only safe way to do this is if the count/capacity are paired.  When not, youi've done something wrong and it throws.

So, please either make the semantics the same, or rename.  I'm fine with either. I'm not ok with teh exact same name having different semantics.  Tnx :)"
"I hit an issue in PMI run when I realized that this is needed.

For non-adaptive case, imagine to have an align boundary of 32 bytes. We will be generating 3 `INS_align` instructions for such cases - 15 bytes, 15 bytes, 1 byte. Now, when generating these 3 instructions, if they all don't fit in current IG (because of `SC_IG_BUFFER_SIZE` limit), we will end up creating new IG and have some `INS_align` instructions in new IG. After that, we will end up marking the `IGF_ALIGN_LOOP` on the newly created IG [here](https://github.com/dotnet/runtime/blob/fa309cb74a406b97ceb49e26d8954c00818095c6/src/coreclr/src/jit/codegenlinear.cpp#L788) (which is wrong). Going forward, when we try to see if we can remove some of the `align` instructions, we end up doing the IG size checks and updates on wrong IG and hit [this assert](https://github.com/dotnet/runtime/blob/fa309cb74a406b97ceb49e26d8954c00818095c6/src/coreclr/src/jit/emit.cpp#L4537). "
"This didn't work either; apparently things are not consistent.

Current [**macOS PR Pipeline Release Build**](https://jenkins.mono-project.com/job/xamarin-android-pr-pipeline-release/125/) fails with:

```
…/src/mono-runtimes/mono-runtimes.targets(397,5): error MSB3030: Could not copy the file ""…/xamarin-android/external/mono/sdks/builds/android-x86-release/share/mono-2.0/mono/eglib/eglib-config.h"" because it was not found.
```

The file *should* exist:

```
inflating: android-x86-release/share/mono-2.0/mono/eglib/eglib-config.h  
```

This implies that perhaps we're extracting into the wrong directory? The [`unzip` command](https://github.com/xamarin/xamarin-android/blob/a10387908dab22e61da2d35418aaf409a14a9ac1/src/mono-runtimes/mono-runtimes.targets#L312) has a working directory of `$(MonoSourceFullPath)\sdks\out`, while this is referencing `$(MonoSourceFullPath)\sdks\builds`; is that correct?"
"That's kind of crazy that default namespace gets exposed the same way. I didn't know that... "
"what I meant was to fake a mark list overflow like you did with this code toward the beginning of sort_mark_list so you didn't need to have plan phase check for the mark_list_piece_size 

```cplusplus
    // if any other heap had a mark list overflow, we fake one too,
    // so we don't use an incomplete mark list by mistake
```
however that's also not correct 'cause some heaps are already using their mark_list_index so it'd be wrong to change it. but now I've thought about it a bit more I think we could make this better by allocating the memory for the new mark_list_piece*, if needed, before sort_mark_list. so for regions we'd have something like grow_mark_list_pieces before the `gc_join_null_dead_long_weak` join. and in the join we fake a global mark list overflow if any heap failed to alloc memory for their mark_list_piece*. this way we don't need to call sort_mark_list at all on any heap if we already don't have memory for the pieces (so we save the sort - of course you can achieve that part by simply moving the alloc code toward the top in sort_mark_list for that heap; but this way we save it for all heaps). what do you think? am I missing anything?

another thing we can do to optimize is to get the actual region count but that can be part of the server GC work.
"
I have to find out what's going wrong in #4673. Probably I'll commit the bug fix here.
"I don't really see a usage of 0 scan code that would turn into something we could know how to handle without further user32 intervention. 

So I'm okay with this being ""it's better than it was and if something proves us wrong, we'll refine further then."""
"this one is scary.  but i'm not sure if it's right/wrong.  both the before and after could be incorrect here.  can you use CancellationToken.None, with a comment saying that that could very well be wrong.

I'm very worried about potential tagging heisenbugs here."
"Hypothesis, in a ""please may I be wrong"" perspective…

Consider `SatelliteAssembly.TryGetSatelliteCultureAndFileName()`: https://github.com/xamarin/xamarin-android/blob/c1a2ee70214e86757541b5759c9ed54941bd4680/src/Xamarin.Android.Build.Tasks/Utilities/SatelliteAssembly.cs

`SatelliteAssembly` uses regular expressions.

The [dotnet/runtime bump](https://github.com/dotnet/runtime/compare/96ce6b3...bd35632) contains changes to regular expressions: https://github.com/dotnet/runtime/commit/7eb749c8b78609865edcad67f57084aa382632a3

Did our use of regular expressions break?  I need an actual *test*. :-/"
"Mmh here's the guideline: https://msdn.microsoft.com/en-us/library/ms229006(v=vs.110).aspx

> **AVOID** indexers with parameter types other than System.Int32, System.Int64, System.String, System.Object, or an enum.

So `Protocol` is definitely not recommended.

> **DO NOT** provide more than one family of overloaded indexers in one type.

I guess that validates your point @github. As I understand it it's fine to ""overload"" an indexer (as in have an indexer that's using an other indexer in the same type) but it's wrong to create a 2nd and different family of indexers."
"The host has relatively complicated code to determine the current RID: https://github.com/dotnet/runtime/blob/bc9f00c226c7716c893576d53ea45a616b2b2c36/src/native/corehost/hostmisc/pal.unix.cpp#L710 (there are special versions of this for certain distros, same source file).
This algorithm may ""fail"", in which case the host falls back to a basic RID - on Linux it will be simply `linux` RID. https://github.com/dotnet/runtime/blob/bc9f00c226c7716c893576d53ea45a616b2b2c36/src/native/corehost/hostmisc/pal.h#L85

If this algorithm works, then there should be no need for `DOTNET_RUNTIME_ID`. If it fails and the fallback is not enough, or if it returns wrong value, then `DOTNET_RUNTIME_ID` is a way to override it and might be necessary. In that case though, we might want to bake the new RID into the hosts produced by the source build somehow, so that running apps using the results of such source build won't require `DOTNET_RUNTIME_ID` to be set. Not sure what the workflow here is..."
Indentation is all wrong in this method (mixed spaces/tabs?)
"Correct me if I'm wrong, but I think we process the string of only one list item at a time. If so, we can probably avoid the overhead of a regex.
Maybe something about like that (not quite tested):
```c++
static hstring ReplaceScanCode(hstring&& keyChordText)
{
    static constexpr std::wstring_view scPrefix{ L""sc("" }; // search string
    const auto frontLength{ std::wstring_view{ keyChordText }.find(scPrefix) };
    if (frontLength == std::wstring_view::npos) // search string not found
        return keyChordText;

    wchar_t* endPtr;
    const auto scanCode{ std::wcstol(keyChordText.data() + frontLength + scPrefix.length(), &endPtr, 10) };
    if (*endPtr != L')') // the conversion ended at a character other than the closing parenthesis
        return keyChordText;

    std::array<wchar_t, 64> buffer;
    const auto keyLength{ GetKeyNameTextW(scanCode << 16, buffer.data() + frontLength, static_cast<int>(buffer.size() - frontLength)) }; // write the key name to the determined position of the buffer
    if (!keyLength) // GetKeyNameTextW() failed
        return keyChordText;

    std::memcpy(buffer.data(), keyChordText.data(), frontLength * sizeof(wchar_t)); // prepend the first substring to the key name
    return { buffer.data(), static_cast<hstring::size_type>(frontLength + keyLength) }; // create the new hstring
}
```
(Edit: order and naming updated)"
"The comments here, and in `fgRemoveStmt`, about ""be inserted"" are wrong; some copy/paste error"
"The extension tests were building in place, which was lazy and wrong of me. Let's copy them to temp.

We also need this since we added a variable to substitute in today."
"I did but you are right, the WARNING is wrong since what you want is `UITableViewControllerDelegate`"
"IMO.  THat seems pointless.  THe code is in error, and the compiler said: welp... the best thing i can come up with is that they bound to these two symbols (illegally).   Things like f12 on the code will then take you to the besft-effort classes.

In those cases, i see no reason why it's a problem for classification to go: yeah... your code is wrong... but it looks like you did bind to these classes, so i'll classify this as a class.

--

In other words... i view the entire endeavor to *not* classify here very suspect and somewhat of a fools errand :)  It's *extra* work to stop doing a thing that is itself not bad at all :)"
test name seems wrong...
"focused is spelled wrong. Otherwise, looks good."
"That comment is wrong apparently it meant: 

```
This example will exclude ALL path changes under src/libraries/ except the ones under src/libraries/*!System.Private.CoreLib/* 
```

`include -> exclude`. "
NIT: Should we add a comment or something here to a) explain why we are changing these two so it doesn't get removed and b) say that the order of these two properties is important since if you switch them now MajorVersion used on assembly version will be wrong?
"Yep, I realize that, but what is the user experience if those are treated like `nameof`?  Does it guide users down the wrong path.
"
"You can make this more typesafe by adding an overload to `getDeclarationOfKind`:

```ts
export function getDeclarationOfKind<T extends Node>(symbol: Symbol, kind: T[""kind""]): T;
export function getDeclarationOfKind(symbol: Symbol, kind: SyntaxKind): Declaration;
```

And using `getDeclarationOfKind<BindingElement>(referenceSymbol, SyntaxKind.BindingElement);`.
That way if you used the wrong `SyntaxKind`, the compiler would catch it."
"Do you know why we infer a literal type here now? AFAIK we only generate a literal if the contextual type of the literal is the same domain as the literal itself, which would imply that the contextual type here is `string`, which seems wrong, given the annotation above."
"Let's assume we not emptying the list and resolving: `test.propString.Split('*', 3, System.StringSplitOptions.RemoveEmptyEntries)`.
Then here: https://github.com/dotnet/runtime/blob/8e6ab78d84c0053da776f0cb04c7b9f029297301/src/mono/wasm/debugger/BrowserDebugProxy/ExpressionEvaluator.cs#L398 we are resolving System.StringSplitOptions.RemoveEmptyEntries. Then, as it's a method call we are entering the `ReplaceVars` method again, now only with `newMemberAccessValues` that has one element: `test.propString` but replacer.memberAccesses have already 2 elements (0: enum, 1: string), so zip will pair them wrong, enum will get the string value and string will be skipped as it does not have a matching value in `ma_values`. That's why we have to clear `memberAccesses` after the first call. 
It should work with `replacer.identifiers` the same way but I could not find a test case to break the current version of code, so I did not add the clean-up there."
"```suggestion
            Assert.False(msg.Verify(DefaultKey, wrongContent), ""Calling Verify with the wrong content"");
            Assert.True(msg.Verify(DefaultKey, s_sampleContent), ""Calling Verify with the correct content"");
```"
"> Don't you need similar change in markExportAsReferenced ?

Actually, I don't need to call `markExportAsReferenced` anymore. The `markAliasReferenced` is more correct for an export assignment (as it mimics what `checkIdentifier` would do). `markExportAsReferenced` looks at the wrong symbol for an export assignment (it looks at the `default` export symbol rather than the symbol of the identifier in the expression), so it hasn't been doing any meaningful work anyway. I'll remove its handling of them. (And you know what? The checking functions built into `markAliasSymbolAsReferenced` are strange - I'll try to move those so they're local to what they check, too)

> Also I think we should remove the isConstEnumOrConstEnumOnlyModule check or update it before calling markAliasSymbolAsReferenced in checkJsxOpeningLikeElementOrOpeningFragment,

I don't know why we check const-ness here, actually. I'm pretty sure we just need to always consider it referenced, const or no (since we need to preserve the import because we'll be referencing it for the factory function in the emit).

> checkPropertyAccessExpressionOrQualifiedName

I don't think so - the check there is just checking `prop` to see if it's even possible for `parentSymbol` to be const - a fast path. It calls into `markAliasReferenced` which does the full check.

> markEntityNameOrEntityExpressionAsReference

No need - this is only used for decorator metadata, which I think we'd rather have been the same for preserve const enums/non preserved (and const enums are just going to be mapped to `Number` and their namespaces `Object` anyway - unlike other types which may have necessitated keeping imports for classes of some sort; so we don't want their imports kept in preserve mode, since we won't use them!)."
"If something goes wrong then we wouldn’t be able to return to the shared pool. I don’t know but it seems like an issue to me, that’s why have a try/finally block. Would do you suggest? "
"This seems wrong; it does not admit annotated parameters; I see no reason why a list of annotated parameters would be treated differently than an empty parameter list when it comes to contextual-ness. Moreover, this sort-of inverts the check; rather than seeing if the return is context sensitive, this is checking if the parameters _aren't_ (almost). We have no reason to do the return type special-casing below if the return _isn't_ context sensitive (it's extra work we shouldn't do since it'll be repeated in later inference phases), so we should still be checking that the return expression is context sensitive, even if we pile on additional constraints."
That's hilarious and we're definitely doing it wrong.  I actually just meant that you could use `\\` in paths in tsconfig.json.
"Agree with @github.  The usage of `TryGetNames` above seems wrong at a glance.  It reads that `TryGetNames` succeeded but we are ignoring the result. 
"
I copied it from the output of the original commit change that was wrong way of doing things. That would return the `ImportMeta` type from the dummy symbol: https://github.com/microsoft/TypeScript/pull/45031/commits/f9ded349d7602ff37ded1e38380fe419d60c60f2
"@github 

> The compatibility with older node or other hosts might worsen.

I'm pretty sure this will not be affected, since this PR is not doing `commonJS` => `ESM`, it's doing `TS namespaces` => `ESM`. There will likely still be a build step that bundles Typescript so that it works with Node as it did before.

> I hope I miss some obvious measurable upsides?

If following coding standards by making real modules (and not using `namespace`s) is not enough, using modules will unlock the possibility to do more optimized builds due to treeshaking that I don't think was possible with the old approach. For example #27891 regarding the growing size of the Typescript project.

There are likely more benefits than the above, but one should not dismiss the benefit of code that is easier to learn and maintain. Future contributors will likely have an easier time to learn the code base after this change than before.

Of course, I might be mistaken. I'll just let a TS member correct any impressions I got wrong 😀"
"@github ~~When I quickly looked at it, I couldn't figure out what's going wrong. The line that sets `defaultValue` is setting it to the expected value correctly. I'll try to debug more deeply.~~ Fixed"
"Hey @github, something went wrong when looking for the build artifact. ([You can check the log here](https://typescript.visualstudio.com/TypeScript/_build/index?buildId=79343&_a=summary))."
"Personally, I feel this is the wrong way around. Improving LINQ to objects instead (#4813) would be an alternative with more long-term benefits."
"I'm definitely in favor of fixing this issue, but I'm not crazy about adding 175 lines of code to do it. Couldn't we just say that certain type facts for intersections are computed as `and` and others are computed as `or`, but otherwise use the existing single function? For example, `TypeFacts.TypeofEQString` would be an `and` whereas `TypeFacts.TypeofEQFunction` would be an `or`."
"@github 
There were a few tests that expecting ```FormatException``` without test data with ```null``` or empty string. So I added that test cases. Should I change now failed tests to expect ```ArgumentNullException```/```ArgumentException``` or I'm doing something wrong?"
"Official builds pass an `enforcepgo` flag to make sure that PGO was successful (on Windows at least).  I agree that it would be good to be intentional about whether or not we expect PGO data to be present and used.  That way if something goes wrong when we do expect it to be present, we can fail, rather than just falling back to not using it."
"> Do you not get notifications when area-System.Text.RegularExpressions

My bad, I was wrong. I do get the notifications for area-System.Text.RegularExpressions. I did get this notification too. It came in right after the P7 one you had open, and the titles were the same, so I assumed all of them were related to the P7 PR :) "
"@github So, it looks like what is going wrong is that RuntimeVariant is not being propagated to issues.targets. There are a bunch of tests that are only excluded in certain mono variants, like interpreter. And it seems like they are incorrectly still being run with those variants.

I don't see exactly what in your change is causing that problem though. I will look more tomorrow if you don't figure it out before then."
"> In total more than 3 hours for PR validation, that's crazy :O

_something something_ mono repo _something something_ 😅"
"This PR is quite large (647 files changed), maybe you can take this specific part out for a separate PR?

If we introduce new MSBuild properties for `icon`/`roundIcon`, that is something that would be good for .NET 7. I wouldn't want to add `AndroidManifest.xml` generation in MAUI at all for this, as it could easily hurt incremental build times if it's done wrong. That also makes me question if it should be in a service release."
"I dunno feels wrong and side effecty. I don’t want to create a feature here especially since it really isn’t faithful part of the future. Can you think of a downside to not setting the feature? "
"Oh, I'm too stupid to read IL properly :wink: (realized that this was wrong when I come back in the office -- too late).
Thanks. I'd liked the explicit version better anyway."
"I didn't mean to ignore your comments, @github - I had to refresh the page for them to show up 😅 

The browser just supplies a ""yyyy-MM"" string for `type=""month""` inputs, and it does appear that the `DateTime` we get is the start of the month at midnight. Same also applies for picking a day for `type=""date""`. Since `DateTime` doesn't have time zones (I believe that's what `DateTimeOffset` would be used for), I don't think we'll have time zone issues here.

I personally don't see it as being a problem to support these cases. But, if they truly only occur when the developer has made a mistake by specifying the wrong input type or binding to the wrong date/time type, maybe it would be better to throw an error 🤷‍♂️ "
"I moved this into the dispose of the new factory: https://github.com/dotnet/aspnetcore/blob/7465741d00784841555dbb5a59671d8b414340dc/src/Servers/Kestrel/Transport.Sockets/src/SocketConnectionContextFactory.cs#L63

The pooled sender/settings and transport schedule bits definitely feel a bit wrong still"
"I'm not positive what's going wrong here but the following seems safer:
```suggestion
    <CrossgenOutput Condition="" '$(TargetArchitecture)' == 's390x' "">false</CrossgenOutput>
    <CrossgenOutput Condition="" '$(CrossgenOutput)' == '' AND '$(Configuration)' != 'Debug' "">true</CrossgenOutput>
```

If that doesn't build correctly, add `-bl` to your build (`/p:SkipTestBuild=true` also recommended) and find the exact location of the error(s) that occur w/o the `@(Reference)` items for the runtime and `crossgen2` packages."
"So here was what I was asking about, how do I get the endpoint metadata out, this doesn't look correct because looking at the current auth tests, I don't think it even exposes anything like an HttpContext in the TestClient that the tests use, or at least other than stuffing in my own IEndpointFeature into the test client, it feels like I'm doing something wrong"
"I think we want to be super crisp about how things convert to/from registry form.  And, in the case where we've stored data in the wrong form, we want to be crisp about the code that gracefully handles it."
"(bonus, will work if name is null)  (might be an issue for crazy parameters like __arglist)."
"Thanks for starting the discussion about the design goals here! It's helpful to see a sketch implementation without getting too bogged down in tests.

I notice that quite a bit of the complexity here (and I'm not saying it's crazy complex) comes from tracking the disposals in groups so we can report their aggregate results. Let's consider whether we could drop some of that and make things simpler for ourselves, which might also make things easier to understand for customers.

Specifically, what if we treat each async disposal as a completely independent background task? If any of them fail individually then we report it (immediately, not waiting for the rest of its friends), but otherwise nothing else happens. Then we don't have to deal with any of the aggregate reporting.

I think this might be easier for customers to understand because if you have a lot of async disposal, some members of the group might take ages to complete, or might not even ever complete. Then if you're waiting for the whole group, you'd never see the failure statuses of the ones that did fail sooner.

It does make sense for prerendering (only) to be waiting for all its associated async disposals to complete before we issue the response, because we do want to fail the response if any of the async disposals fail. However we could do that using the existing `_render.AddToPendingTasks` facility that @github implemented long ago."
"if you don't want Async version, I think we actually have synchronous version of GetSyntaxRoot? I might be wrong though. #WontFix"
"@github that would be the wrong thing to do because as I sad a missing parameter list is not equivalent to an empty one there. The delegate method may have a lot of parameters after all, so I have to check if this returns null and in that case forget about this and synthesize parameters from the delegate method instead.

this is OK:
```c#
Action<string> a = delegate {};
```
this is not:
```c#
Action<string> a = delegate() {};
```
In the first case, I create a parameter with arg1, in the second one I create an empty parameter list - yes the code will be broken but it's already broken now.

With simple lambdas it's ok to make a parameter list because there's no difference between a simple lambda and a parenthesized one with the same argument."
"> Perhaps we can tackle that separately from this PR?

Maybe. It does feel wrong to enforce the limit set by `RequestSizeLimitAttribute`s on minimal route handlers if request decompression is used but not otherwise."
"I think this is MemberSemanticModel not the TreeSemanticModel people would usually get from Compilation.GetSemanticModel.

I might be wrong. but you should check. and I think we should always return TreeSemanticModel since that's the only one we expose. Basically SemanticModel.Parent"
"Actually, i'm more confused having read ths review.  Some of our simplest intellisense cases are not IFeaturesCustomCommitCompletionProvider's.  Someting seems *super* wrong for that to be the case.  

Indeed, as far as i can tell IFeaturesCustomCommitCompletionProvider  is simply the GetChangeMethod that already exists in CompletionService.  in which case, 100% of our providers/services should implement this.  

So i don't see the purpose of this interface at all.  We should *always* be deferrin to teh CompletionService to figure out what change ot make.  it will do the right thing, and there's no reason i can tell to ever do otehrwise.."
That code is wrong too then. We should change it as well. Guessing the author wasn't aware of this really odd corner case.  #Resolved
"And for the record: when we were talking about this feature offline, I got which `readonly` meant what wrong.

---
In reply to: [266668722](https://github.com/dotnet/roslyn/pull/34022#discussion_r266668722) [](ancestors = 266668722)"
"Hum, I just realized my fix is wrong :-( I'll take another look #Closed"
">(other.Equals(this) [](start = 28, length = 19)

It feels like there is something wrong with the fact that objects are equal, yet different to a degree that they cannot replace one another.  #ByDesign"
I would have targeted suppression here. The issue is even as info I believe they pollute the build logs which is something that is already noisy. If I am wrong and there are no messages about these locations during build then I am fine leaving as is.
"Didn't want to change code, in case my understanding of the code was wrong (changing to a cast would throw).

---
In reply to: [377819607](https://github.com/dotnet/roslyn/pull/41063#discussion_r377819607) [](ancestors = 377819607)"
"if the app introduced wrong config switch, I would say fail fast is better here. because will give early clue what can be fixed. I am not sure what will happen if we throw DllNotFoundException in that early execution and at that time we should introduce a fallback path.

---
In reply to: [414603770](https://github.com/dotnet/runtime/pull/35383#discussion_r414603770) [](ancestors = 414603770)"
"the major problem is primarily that it impacts callers unpleasantly.  Esp. as they end up having to realize these back into arrays.  it also worries me in terms of having the wrong side accidentally be lazy.  I just far prefer ImmutabelArray for the clarity and well known semantics it has.  if this was all new code, i would use that for everything.  but we've shipped some IEnumerable versions, so i want to be consistent with those."
">this could be a breaking change [](start = 24, length = 31)

I guess, given the current CLR behavior, the code could switch from overriding the right method to overriding the wrong method at runtime. #Closed"
"I'm not sure if that update is correct. I was thinking that your code was right before but the comment in the function was wrong. Is that not the case? I was reading this fix as:

Selected if available. If not, suggested if only one suggested.

Which is what you had before. What it's changed to now you would return undefined if there was only one suggested and 2+ total kernels. "
"I think the schema's wrong here. When linking ""Direction"" it'll show up/down/left/right as possible values. But the description says that it only accepts up/down.

I also don't immediately understand what this is saying. I'll circle back around to see if this makes sense after I play with the branch a bit."
"1. should GetAssetAsync return SolutionAsset.Null if it can't find the item?
2. when does GetAssetAsync return null?  seems... wrong that it could do that as that would mean we're not able to sync assets right?"
"> making ZLibStream derive from DelegatingStream bakes that implementation detail into the public API surface area. That seems to me very undesirable. 

I get the point, but it seems unfortunate. The broader implication here is that derivation to support code reuse is not a viable approach in our public API. That kinda sucks."
"Ok, I misunderstood the goal of this PR then. So currently it's just meant to provide a standardised provider for inline hints, possibly with addition of doc hover and context menu support?

I just found #101085, which I now realise is the feature I was looking for. It's already possible to implement inline hints via [`TextEditor#setDecorations`](https://github.com/microsoft/vscode/blob/337b3e8d055bdb25cd7ba142ed14e71ef53a4bac/src/vs/vscode.d.ts#L1163), as many extensions have done, but the user experience is really lacking compared to IntelliJ (for example) where the inline hints are treated as ""virtual"" characters.

Don't get me wrong though, having a standardised API for this is not a bad thing, and sets us up for the future possibility of improving the feature, not to mention that doc hover and a context menu would be a step forward as well. I do realise that there may be architectural changes required in order to support ""virtual"" characters for the inline hints, and that it's probably the reason the feature has been sitting in the backlog for all this time. But if there's any chance of implementing #101085, I would be very happy."
Just curious - what was wrong with `mach_absolute_time` ?
"I fear that this was wrong. see #11169, the inability to set small MinValue, the counter going off if the increment is changed, or the logic being wrong if the counter is manually set."
"We may want to keep this one at 17763 -- I know that sounds crazy, but the only limiting factor that kept us on MIN 18362 was _XAML Islands_. These tests don't use xaml islands :smile:"
"This is almost certainly wrong, anyone have a better idea for how we can distinguish between 'the user set bold/something else' and 'this is the weight value to use when the font is normal'?"
"OK, this is now built using $(CONFIGURATION). which works in local testing, but i expect was the wrong choice for a real build."
think I see what's wrong. fixing
"It looks like we had it wrong from the beginning. The signature of the function in Mono is:

```C
void mono_aot_register_module (gpointer *aot_info);
```

It was added in [this commit](https://github.com/mono/mono/blob/6c8eefbd482aef9ea51be7ab400bd02f79baa263/mono/mini/aot-runtime.c#L818-L819) to the `C` code and in [this commit](https://github.com/mono/mono/blob/0e0f1b9be08ff14b192fdadc66efb6bb763867a4/mono/mini/jit.h#L106-L107) to `jit.h` using `void*` instead of `gpointer`."
"Then we're gonna need an overload to disable it over there as it captures the context. I'll fill another bug. Anything created lazily is notorious for capturing the wrong execution context "
"huh, you're right! It was correct the first time:
https://github.com/microsoft/terminal/blame/bba0527af9853f984a30183c2d9d5bfca7469f09/src/types/UiaTextRangeBase.cpp#L312-L315

Would it be wrong of us to change this back to that behavior? It's been ""broken"" for 3 years now.

CC @github "
"No we cannot have this in resx. Resources need globalization. If ICU is missing then all globalization would be broken. We usually use hardcoded message for the things we fail fast with. one example when there is something wrong in the builds which cause recursive lookup for resources. at that time we just fail fast with hardcoded message. "
"It removes a `mov`, but also flips some `if`s the wrong way. Will back it out and look at it separately"
"This seems wrong. Feels like we should only skip the zero init constructor, but not any other default value type constructor. #Closed"
"Probably took longer that you would have, and I might have blown up my state file a couple of times with the wrong file attributes, but I think it is working correctly now."
"THe ""nullable value type"" portion seems wrong. We're not changing those #Closed"
"I think it would be fine marking possible optimizations with clear PROTOTYPE comments precisely explaining what we want to do and then addressing them in follow up PRs. However, I'd like us to address issues about actual APIs behavior in context of this PR. For example, behavior changes around ```IsAutoProperty``` and the like. I think those are fundamental and we should get them right from the start in order to avoid taking dependency on ""wrong"" behavior as we keep working on the feature."
"No test project in main targets net461 as the min supported .NETFramework is net462, hence this is wrong.

Also, we already have a PackageReference to NS.Library here: https://github.com/dotnet/runtime/blob/03bc2c28cc250b1a10a5394277e3cbe5b2820bce/eng/testing/xunit/xunit.targets#L4-L6. Please update that one (i.e. remove the condition) instead of adding another one."
"Note: I changed this because it was wrong. I should be able to read into a zero-length array when `count` is 0. Or when `index` is equal to `buffer.Length` and `count` is 0.

Also, by .NET convention, if `index + count` is greater than `buffer.Length`, the exception that is thrown shouldn't have `index` or `count` as its parameter. I should be an `ArgumentException`  with a special message without a parameter (because it related to both parameters, or rather all 3 and the relationship between them).

See: https://source.dot.net/#System.Private.CoreLib/StringReader.cs,86"
"The primary fix is here. We were using the wrong cancellation token before.
"
"I was wrong -- getPropertySymbolsForContextualType could return undefined if the property it finds has no name, which it might not for some computed properties. (Probably should have a test for this case too)

---

In reply to: [87303918](https://github.com/Microsoft/TypeScript/pull/12107#discussion_r87303918) [](ancestors = 87303918)
"
"`I` was very wrong. `any` is at least the type of `p2`, which is bound to the same symbol as that property because the object literal at this location isn't being correctly interpreted as a binding pattern in all locations. This PR is like a partial fix for that (now the type isn't completely incorrect, at least), but the symbols still need to be bound up correctly. IMO, the root cause is object literal/binding pattern confusion causing us to not handle binding patterns correctly in all the places we need to. I'd like to do a more directed fix at making binding patterns actually appear in expression positions instead of object literals when they're actually binding patterns, and use that to fix this.

For now, this is much better, though."
"> if someone adds `-mcpu=generic` to CMake

What is the default flag used for osx? Since its basline is 8.1, it should be `-mcpu=armv8.1` by default, even if we don't specify it? 

> While an intrinsic would always be fine since there is no pre 8.1 hw on osx-arm64

I don't understand how/why will someone want to use  `-mcpu=generic` and even if they use it, it will be `v8.1` only. Correct me if I am wrong.

> While an intrinsic would always be fine 

Can you check what code we generate today with default flags on osx for `__sync_val_compare_and_swap`? Should be `casal`. In that case, we can eliminate the `__sync_synchronize` for OSX. What change you tried that you mentioned in https://github.com/dotnet/runtime/issues/67824#issuecomment-1094337248?"
"This is certainly wrong since HashSet is mutable. I'd prefer not use strings. If we use strings then ImmutableArray<string> would be more appropriate.

---

In reply to: [73979817](https://github.com/dotnet/roslyn/pull/13013#discussion_r73979817) [](ancestors = 73979817)
"
"Good catch for the wrong reason - this rule's only here for compat in non-strict mode; as such, it probably still needs to check for constraint presence (as inconsistent as that is). Otherwise it should also look for `TypeFlags.Unknown` on the constraint in addition to `Any` (which'd still change the assignability of `T extends unknown` in non-strict mode)."
"this comment appears to be wrong.  we don't return text ranges, we return 'Comments'.  this should just be getComments.
"
"Comment with the character - older crowds call this a ""pound"". Crazy, I know. :wink: 
"
"> I want to make sure that the analyzer and code fix is completely working correctly.
> I've run the RoslynDeployment project from Roslyn.sln, it opens up a new instance of Visual Studio, then I created a VB Console App. However, here is what I got:
> 
> ![image](https://user-images.githubusercontent.com/31348972/83903521-93ffca00-a75e-11ea-8b37-382fb008d4c3.png)
> 
> Log:
> 
> ```
> =====================
> 05/06/2020 6:57:47 PM
> LimitedFunctionality
> System.AggregateException: One or more errors occurred. ---> Microsoft.VisualStudio.Composition.CompositionFailedException: Expected 1 export(s) with contract name ""Microsoft.VisualStudio.ProjectSystem.LanguageServices.IWorkspaceProjectContextHost"" but found 0 after applying applicable constraints.
>    at Microsoft.VisualStudio.Composition.ExportProvider.GetExports(ImportDefinition importDefinition)
>    at Microsoft.VisualStudio.Composition.DelegatingExportProvider.GetExports(ImportDefinition importDefinition)
>    at Microsoft.VisualStudio.ProjectSystem.FilteringExportProvider.GetExports(ImportDefinition importDefinition)
>    at Microsoft.VisualStudio.Composition.ExportProvider.GetExports(String contractName, ImportCardinality cardinality, Type type, Type metadataViewType, IMetadataViewProvider& metadataViewProvider)
>    at Microsoft.VisualStudio.Composition.ExportProvider.GetExports[T,TMetadataView](String contractName, ImportCardinality cardinality)
>    at Microsoft.VisualStudio.Composition.ExportProvider.GetExport[T,TMetadataView](String contractName)
>    at Microsoft.VisualStudio.Composition.ExportProvider.GetExport[T](String contractName)
>    at Microsoft.VisualStudio.Composition.ExportProvider.GetExport[T]()
>    at Microsoft.VisualStudio.Composition.ExportProvider.GetExportedValue[T]()
>    at Microsoft.VisualStudio.ProjectSystem.ActiveConfiguredProjectImpl`1.SetValueForConfiguration(ConfiguredProject activeConfiguredProject)
>    at Microsoft.VisualStudio.ProjectSystem.ActiveConfiguredProjectImpl`1.Initialize()
>    at Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.EnsureInitialized(Boolean allowInitializing)
>    at Microsoft.VisualStudio.ProjectSystem.ActiveConfiguredProjectImpl`1.get_Value()
>    at Microsoft.VisualStudio.ProjectSystem.LanguageServices.ActiveWorkspaceProjectContextHost.<PublishAsync>d__3.MoveNext()
>    --- End of inner exception stack trace ---
> ---> (Inner Exception #0) Microsoft.VisualStudio.Composition.CompositionFailedException: Expected 1 export(s) with contract name ""Microsoft.VisualStudio.ProjectSystem.LanguageServices.IWorkspaceProjectContextHost"" but found 0 after applying applicable constraints.
>    at Microsoft.VisualStudio.Composition.ExportProvider.GetExports(ImportDefinition importDefinition)
>    at Microsoft.VisualStudio.Composition.DelegatingExportProvider.GetExports(ImportDefinition importDefinition)
>    at Microsoft.VisualStudio.ProjectSystem.FilteringExportProvider.GetExports(ImportDefinition importDefinition)
>    at Microsoft.VisualStudio.Composition.ExportProvider.GetExports(String contractName, ImportCardinality cardinality, Type type, Type metadataViewType, IMetadataViewProvider& metadataViewProvider)
>    at Microsoft.VisualStudio.Composition.ExportProvider.GetExports[T,TMetadataView](String contractName, ImportCardinality cardinality)
>    at Microsoft.VisualStudio.Composition.ExportProvider.GetExport[T,TMetadataView](String contractName)
>    at Microsoft.VisualStudio.Composition.ExportProvider.GetExport[T](String contractName)
>    at Microsoft.VisualStudio.Composition.ExportProvider.GetExport[T]()
>    at Microsoft.VisualStudio.Composition.ExportProvider.GetExportedValue[T]()
>    at Microsoft.VisualStudio.ProjectSystem.ActiveConfiguredProjectImpl`1.SetValueForConfiguration(ConfiguredProject activeConfiguredProject)
>    at Microsoft.VisualStudio.ProjectSystem.ActiveConfiguredProjectImpl`1.Initialize()
>    at Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposed.EnsureInitialized(Boolean allowInitializing)
>    at Microsoft.VisualStudio.ProjectSystem.ActiveConfiguredProjectImpl`1.get_Value()
>    at Microsoft.VisualStudio.ProjectSystem.LanguageServices.ActiveWorkspaceProjectContextHost.<PublishAsync>d__3.MoveNext()<---
> 
> ===================
> ```
> 
> Can someone assist on that?


Due to this problem, I made a new analyzer project to try to test my code here inside Visual Studio, but something seem to go wrong (although the unit tests pass)

![image](https://user-images.githubusercontent.com/31348972/83916592-bd782000-a775-11ea-80fd-e82e1c6a4532.png)

![image](https://user-images.githubusercontent.com/31348972/83916639-d1238680-a775-11ea-9351-86e3dc263743.png)

I made [this separate project](https://github.com/Youssef1313/ByValAnalyzer) in case it may be easier to debug this crash their (it'll be much faster to build it rather than building roslyn)."
"> 
> 
> the `MONOPATH=""$assemblyDir""` in your example should probably be `MONO_PATH=""$assemblyDir""`.

Hmmm maybe it wasn't needed then, since the variable name was wrong but the POC runs fine without it anyways"
"Are these messages intended to be shown to a user? If so, they need to go in `diagnostics.json` so they can be localized. 

Also, I realize this came from @github’s proposal so if the editor folks have a strong opinion you can disregard—but the terminology `error` was a little misleading to me in this context, since it has nothing to do with compiler diagnostic errors and it doesn’t indicate that anything went _wrong_; it’s not like the refactor threw an error and had to abort."
"Hey @github - thank you so much for the feedback and suggestions! 😊

I made some changes starting from them and made a new PR that completely removes all `Unsafe.Add` usages from the entire `Microsoft.Toolkit.Mvvm` package, and with no effective performance loss at all from what I can see now 🚀

To reply to your previous points:

> Here are some ideas where you can save the cycles instead: [...]

Yup, basically ended up applying both those suggestions, I've documented everything in the new PR.

> What if there is a corner case bug in DictionarySlim where the property returns wrong size?

Just for sake of clarify, the `DictionarySlim` we use is not directly from the `Microsoft.Experimental.Collections` package, but it's a custom type that used the source of that as a base, which I've then customized and optimized specifically for our needs in the messenger types in the MVVM Toolkit. Of course, your point is still perfectly valid and a bug might very well slip into the codebase in that area at some point, so this PR should made the whole thing much more resilient and easier to debug 😄

As a final note, to get back to @github's original point, I was wondering if the expected adoption of the MVVM Toolkit would be enough to have this PR (I mean this one for .NET 5) meet the requirements for the .NET 5 release? Otherwise as Stephen said, I can just sprinkle a bunch of `!` operators where needed, so it wouldn't be a breaking change, sure."
"A lot closer, but the tooltip on the completion is wrong (says attribute), yet no snippet appears. They should not differ, as the call that determines the kind is the same one that determines that it's not a snippet completion."
"I'm also fine either way.

> libnethost.lib does not ship .h either

This is misleading. `nethost.h` is used for `nethost.dll`, `nethost.lib`, and `libnethost.lib`, with different behavior based on `NETHOST_EXPORT` and `NETHOST_USE_AS_STATIC`.

> The downside of not providing the header would be if people get it wrong in subtle ways... but I guess that's not that risky.

I don't think the program would link at all if they get it wrong."
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Fixes https://github.com/xamarin/xamarin-android/issues/6161

In this case the index that come from debugger-libs is 0 but the correct index after reading pdb info is 1. That is why it was showing wrong variable value.

The index that comes from icordbg is already the correct one read from pdb we don't need to ""fix"" it on runtime side.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>thaystg</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Debugger-mono`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Do I need to do anything else for this PR? I can see some of the checks have failed, but I don't think it's related to this code (but could be wrong)"
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

When performing value numbering of the initial memory state for loop entries, we treat single-entry loops specially. First, we walk the loop to determine it contains non-analyzable (from VN's point of view, i. e. not stores to fields or arrays) memory-related side effects (""havoc""). While doing so, we collect the handles of fields and types of arrays, later to be used as primary selectors in VN, of modified fields. If the loop is determined to not have ""havoc"", we compute the initial memory VN (which would ordinarily consist of a `PHI` with one unknown input) as follows: take the outgoing VN of the non-loop predecessor, and reset all the maps corresponding to primary selectors that we know will be stored to in the loop from the previous walk to ""new, unique"" values.

This then allows us to find the values for locations that were not modified in the loop when walking the `MapStore` chains while numbering nodes in the loop.

This is all rather nice, but has one flaw: the VNs given to primary maps (corresponding to the values obtained via indexing into the heap with a primary selector) all have `TYP_REF` types, which is strictly not ""right"" for at least static fields, and for others, confuses the code that numbers stores to indirections.

Consider the following C# snippet:
```cs
private static void Problem(ClassWithFields a)
{
    for (int i = 0; i < 10; i++)
    {
        a.Field++;

        if (a.Field == 1)
        {
            break;
        }
    }
}
```

We had the following numbering for the interesting trees:
```scala
finish(BB02).
SSA PHI definition: set VN of local 2/3 to $280 {PhiDef($2, $3, $d9)} .
Computing GcHeap state for block BB07, entry block for loops 0 to 0:
  Init GcHeap state is $247, with new, fresh VN at:
     VNForHandle(hackishFieldName) is $187
    VNForMapStore($247, $187, $8e):ref in BB07 returns $2c0 {$247[$187 := $8e]@github}
     Array map int[]
    VNForMapStore($2c0, $188, $8f):ref in BB07 returns $2c1 {$2c0[$188 := $8f]@github}
  Final GcHeap state is $2c1.
The SSA definition for GcHeap (#6) at start of BB07 is $2c1 {$2c0[$188 := $8f]@github}

***** BB07, STMT00007(before)
N011 ( 11, 11) [000035] -A-XG---R---              *  ASG       int   
N010 (  4,  4) [000034] D--XG--N----              +--*  IND       int   
N009 (  2,  2) [000120] -------N----              |  \--*  ADD       byref 
N007 (  1,  1) [000029] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1
N008 (  1,  1) [000119] ------------              |     \--*  CNS_INT   long   20 field offset Fseq[hackishFieldName]
N006 (  6,  6) [000033] ---XG-------              \--*  ADD       int   
N004 (  4,  4) [000031] ---XG-------                 +--*  IND       int   
N003 (  2,  2) [000122] -------N----                 |  \--*  ADD       byref 
N001 (  1,  1) [000030] ------------                 |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000121] ------------                 |     \--*  CNS_INT   long   20 field offset Fseq[hackishFieldName]
N005 (  1,  1) [000032] ------------                 \--*  CNS_INT   int    1

N001 [000030]   LCL_VAR   V00 this         u:1 => $80 {InitVal($40)}
N002 [000121]   CNS_INT   20 field offset Fseq[hackishFieldName] => $105 {LngCns:  20}
N003 [000122]   ADD       => $148 {ADD($80, $105)}
  VNApplySelectors:
    VNForHandle(hackishFieldName) is $187, fieldType is int
      AX2: $187 != $188 ==> select([$2c1]store($2c0, $188, $8f), $187) ==> select($2c0, $187) remaining budget is 99.
      AX1: select([$247]store($2c0, $187, $8e), $187) ==> $8e.
      ==> Not updating loop memory dependence of [000031], memory $247 not defined in a loop
    VNForMapSelect($2c1, $187):int returns $8e {MemOpaque:L00}
    VNForMapSelect($8e, $80):ref returns $210 {$8e[$80]}
    VNForCastOper(int) is $48
    VNForCast($210, $48) returns $da {Cast($210, $48)}
N004 [000031]   IND       => <l:$dc {norm=$da {Cast($210, $48)}, exc=$200 {NullPtrExc($80)}}, c:$db {norm=$1c4 {MemOpaque:L00}, exc=$200 {NullPtrExc($80)}}>
N005 [000032]   CNS_INT   1 => $41 {IntCns 1}
N006 [000033]   ADD       => <l:$e0 {norm=$de {ADD($41, $da)}, exc=$200 {NullPtrExc($80)}}, c:$df {norm=$dd {ADD($41, $1c4)}, exc=$200 {NullPtrExc($80)}}>
N007 [000029]   LCL_VAR   V00 this         u:1 => $80 {InitVal($40)}
N008 [000119]   CNS_INT   20 field offset Fseq[hackishFieldName] => $105 {LngCns:  20}
N009 [000120]   ADD       => $148 {ADD($80, $105)}
  VNApplySelectors:
    VNForHandle(hackishFieldName) is $187, fieldType is int
      AX2: $187 != $188 ==> select([$2c1]store($2c0, $188, $8f), $187) ==> select($2c0, $187) remaining budget is 99.
      AX1: select([$247]store($2c0, $187, $8e), $187) ==> $8e.
      ==> Not updating loop memory dependence of [000035], memory $247 not defined in a loop
    VNForMapSelect($2c1, $187):int returns $8e {MemOpaque:L00}
    VNForMapSelect($8e, $80):ref returns $210 {$8e[$80]}
    VNForMapStore($8e, $80, $de):ref in BB07 returns $2c2 {$8e[$80 := $de]@github}
  VNApplySelectorsAssign:
    VNForHandle(hackishFieldName) is $187, fieldType is int
    VNForCastOper(int) is $48
    VNForCast($2c2, $48) returns $e1 {Cast($2c2, $48)}
    Cast to int inserted in VNApplySelectorsAssignTypeCoerce (elemTyp is ref)
    VNForMapStore($2c1, $187, $e1):int in BB07 returns $24a {$2c1[$187 := $e1]@github}
  fgCurMemoryVN[GcHeap] assigned for StoreField at [000035] to VN: $24a.
N011 [000035]   ASG       => $VN.Void

***** BB07, STMT00007(after)
N011 ( 11, 11) [000035] -A-XG---R---              *  ASG       int    $VN.Void
N010 (  4,  4) [000034] D--XG--N----              +--*  IND       int    $de
N009 (  2,  2) [000120] -------N----              |  \--*  ADD       byref  $148
N007 (  1,  1) [000029] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N008 (  1,  1) [000119] ------------              |     \--*  CNS_INT   long   20 field offset Fseq[hackishFieldName] $105
N006 (  6,  6) [000033] ---XG-------              \--*  ADD       int    <l:$e0, c:$df>
N004 (  4,  4) [000031] ---XG-------                 +--*  IND       int    <l:$dc, c:$db>
N003 (  2,  2) [000122] -------N----                 |  \--*  ADD       byref  $148
N001 (  1,  1) [000030] ------------                 |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000121] ------------                 |     \--*  CNS_INT   long   20 field offset Fseq[hackishFieldName] $105
N005 (  1,  1) [000032] ------------                 \--*  CNS_INT   int    1 $41

---------

***** BB07, STMT00008(before)
N007 (  8,  8) [000040] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000039] J--XG--N----              \--*  LE        int   
N004 (  4,  4) [000037] ---XG-------                 +--*  IND       int   
N003 (  2,  2) [000124] -------N----                 |  \--*  ADD       byref 
N001 (  1,  1) [000036] ------------                 |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000123] ------------                 |     \--*  CNS_INT   long   20 field offset Fseq[hackishFieldName]
N005 (  1,  1) [000038] ------------                 \--*  CNS_INT   int    26

N001 [000036]   LCL_VAR   V00 this         u:1 => $80 {InitVal($40)}
N002 [000123]   CNS_INT   20 field offset Fseq[hackishFieldName] => $105 {LngCns:  20}
N003 [000124]   ADD       => $148 {ADD($80, $105)}
  VNApplySelectors:
    VNForHandle(hackishFieldName) is $187, fieldType is int
      AX1: select([$2c1]store($24a, $187, $e1), $187) ==> $e1.
      ==> Updating loop memory dependence of [000037] to L00
    VNForMapSelect($24a, $187):int returns $e1 {Cast($2c2, $48)}
    VNForMapSelect($e1, $80):int returns $e2 {$e1[$80]}
N004 [000037]   IND       => <l:$e4 {norm=$e2 {$e1[$80]}, exc=$200 {NullPtrExc($80)}}, c:$e3 {norm=$1c5 {MemOpaque:L00}, exc=$200 {NullPtrExc($80)}}>
N005 [000038]   CNS_INT   26 => $49 {IntCns 26}
N006 [000039]   LE        => <l:$e8 {norm=$e6 {LE($e2, $49)}, exc=$200 {NullPtrExc($80)}}, c:$e7 {norm=$e5 {LE($1c5, $49)}, exc=$200 {NullPtrExc($80)}}>

***** BB07, STMT00008(after)
N007 (  8,  8) [000040] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000039] J--XG--N----              \--*  LE        int    <l:$e8, c:$e7>
N004 (  4,  4) [000037] ---XG-------                 +--*  IND       int    <l:$e4, c:$e3>
N003 (  2,  2) [000124] -------N----                 |  \--*  ADD       byref  $148
N001 (  1,  1) [000036] ------------                 |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000123] ------------                 |     \--*  CNS_INT   long   20 field offset Fseq[hackishFieldName] $105
N005 (  1,  1) [000038] ------------                 \--*  CNS_INT   int    26 $49
```

As can be seen, there is a cast inserted when `VNApplySelectorsAssign` performs the map updates for the store, it is coming from here:

https://github.com/dotnet/runtime/blob/972891ff4682968e6d693c4b618408a55befe0b1/src/coreclr/jit/valuenum.cpp#L8325-L8330

Here `newFldMapVN` will have `TYP_REF`, `indType` - `TYP_INT`, causing the mismatch, because the code just above uses `TypeOfVN(fldMapVN)`:

https://github.com/dotnet/runtime/blob/972891ff4682968e6d693c4b618408a55befe0b1/src/coreclr/jit/valuenum.cpp#L8301-L8303

The cast is inserted at an unfortunate point: above the primary selector map (in this case, the field map), breaking the `MapStore` chain and causing subsequent load to not find the value from the store. Giving proper types to the primary selector maps helps avoid that.

Now, a keen reader will notice that the code above is actually just wrong, as it will constantly insert casts in cases when the first fields is actually of a `struct` type, and where no casts are needed at all, as they, if required, would have been inserted in the `VNApplySelectorsAssign` call that ""gets rid of the remaining struct references"". So the question is: why am I not fixing this code, and instead fixing some other code that just happens to trigger this bug in another way?

The answer is that I think it is beneficial to the model to have it be typed consistently, which is both more understandable and more efficient (by avoiding allocating unnecessary VNs). Changes to VN are somewhat high in risk, so I will be making them very incrementally, and in small chunks. Ideally, most of them should be zero-diff ones. This one is not, so I am making it separately.

Question: with this change, more VM will be made, is that a concern? Answer: the method in question is rather cold (not discernible on a profile taken from replaying `libraries.pmi`), the new VM calls should be of the quick variety, and additionally, there are many, many more similar VM calls made inside `VNApplySelectors/Assign`, their cost will dwarf anything added here (I actually have an experiment that caches some of the info on the `FldSeq` nodes, it shows `0.1%` PIN improvements under SPMI, but it is probably not worth it in the VM scenario as it also increases the memory consumption by about the same margin).

Diffs: [`win-x64`](pending).

Part of #58312.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>SingleAccretion</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-CodeGen-coreclr`, `community-contribution`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"@github @github I did the replay with `-arch x86` option and got the same error `MISSING: Method context 90668 failed to replay: SuperPMI assertion failed (missing map IsFieldStatic): key 00000000095B5894
SuperPMI encountered missing data for 1 out of 260068 contexts`.
There must be some way to investigate what is wrong with the assertion, how do you usually debug such cases?
[superpmi.100.log](https://github.com/dotnet/runtime/files/7773924/superpmi.100.log)
`"
"@github 
> What does ""registered at [/etc/dotnet/install_location_arm64]"" mean

On each platform we have a different way to ""Register"" a global install of .NET. On Windows it's in the registry, on Linux and macOS it's in a config file in the `/etc/dotnet` location. Since these registrations are potentially architecture specific it's a good piece of information to diagnose issues with finding runtimes (for example if the registration is wrong).

You can read more about this here: https://github.com/dotnet/designs/blob/main/accepted/2020/install-locations.md
and (architecture specific) here: https://github.com/dotnet/designs/blob/main/accepted/2021/install-location-per-architecture.md"
"> Looks like one of those return nulls was important 😄

Yeah I used the wrong exception in `NameOrOidToHashAlgorithmName`. I restored the exception so the exceptions that come out of the not-private methods should be consistent to what they were before the changes."
"Yeah, this is ... wrong. I'm rewriting this now."
"Please, fixes original issue instead that fixes a issue that caused by original issue.

Original issue : sender of CollectionChanged was wrong
Your fix : fixes handler of CollectionChanged to working with ObservableCollection"
"Also if there's any chance that customers could see this error, can you make it clearer what's gone wrong? Customers won't know how to fix their code based on this message."
"Possible yes, but it would require doing crazy things. Both the managed and native dlls are in the same package, so you can't reference different versions if you tried. It would require you copy a different inprocess native dll to the published/build directory. In that case, this would throw. Trying to cover this case is pointless. 

The only thing I do want to protect against is making sure we are actually running inprocess in the startup hook."
Wrong comment?
VS being VS. Shine on you crazy diamond!
"@github right, you can build stuff as portable and still create a ""manifest"" to ensure that the distro specific package references the right dependencies to install. 
I have thought that the packaging tools somehow extract the list of dependencies from the compiled binaries automatically when creating the package, but I guess I was wrong. If the dependency list is always prepared manually by the package maintainer, then there is no difference between the portable and non-portable build. Except for the dynamic search for the libSSL.
@github could you please share what are the reasons for using non-portable builds for the packages you build? Maybe we are missing some important aspect here."
"John, can you take a quick ""pre-review"" to see if I've done anything fundamentally wrong? "
"Does this new task support the user overriding the values in the manifest? I think that is more the issue here. If the tool overwrites the file, then if it makes a mistake or the user wants something different they can't do that.

For example, if some designer comes and gives the dev a set of files to copy directly into the platform folder and the dev adds some more icons - effectively adding 2 icons into the app: 1 from the designer and 1 from MauiIcon. Is there a way for the dev to prefer the specific icon and overwrite all the values?

For the other platforms, if there is no icon set in the manifest, then the tool provides one. If there is an icon, then the tool does nothing. This allows for the tool to only do work if the dev has not explicitly told it not to. The dev should always have the last say - even if they are wrong. :)

It may just be the case that the new template manifest has nothing in it so the tool always generates the file. "
"This one I've been trying to figure out:
```
XamlApp.xaml(11,37): XamlC error XFC0128: GetResourcePath failed: uri=AppResources.xaml, rootTargetPath=XamlApp.xaml [D:\a\_work\1\s\src\Controls\samples\Controls.Sample\Maui.Controls.Sample.csproj]
XamlApp.xaml(11,37): XamlC error XFC0128: GetResourcePath failed: uri=AppResources.xaml, rootTargetPath=XamlApp.xaml [D:\a\_work\1\s\src\Controls\samples\Controls.Sample\Maui.Controls.Sample.csproj]
```
It's also happening on `net7.0` branch.

There are other failures on the samples/templates lanes, I think something might be wrong there?"
Hmm maybe not after I added the BuildDependsOn. Made the fix in separate commits so I forgot to remove the wrong one.
"I don't know what to say, i was debugging few tests trying to understand why i had serialization issues.
I was in the process of testing small POC referencing 1.7 and 2.0 to see if i did not used a wrong `MessagePack` method itself 

Thx a lot for finding this typo"
"Here too, I'd go back to unquarantining both tests. I looked more closely and the Sockets variant has (I think) also been successful for 30 days. But, ignore my follow up if I'm reading things wrong 😺 "
"Thank god this is new, I saw it on twitter and I was starting to feel dumb after 10+ years not knowing you could do this :)"
"Since there doesn't seem to be a good way to detect when a component was prerendered (AFAIK) and avoid invoking this JS method altogether, I've instead taken an approach in which `<title>` elements rendered from Blazor components are not removed after the initial render. I will concede this is a bit of a hack and only works because we know that `<title>` will be the first and only element rendered by `<PageTitle>` components. I also considered adding a special attribute to `<title>` elements rendered from Blazor components, but thought it might not be best to clutter things that way.

I'm open to other suggestions for approaches to this. If we were able to detect prerendering in `BuildRenderTree()` (or, rather, detect when we weren't prerendering), we could simply not render any `<title>` in `HeadSection` at first, then remove all `<title>` elements in `OnAfterRenderAsync()` without needing to check if they are rendered from Blazor components, then re-render with the new `<title>`. This would be a much better way of doing things IMO, but there just doesn't seem to be a good way to check if we're prerendering on the first render pass. Someone please correct me if I'm wrong about that. 😃 "
"I was wrong about the default formatting. It looks like `Symbol` arguments are formatted by `MessageProvider.GetErrorDisplayString()` using `ToDisplayString(CSharpShortErrorMessageFormat)`. "
"> it is much nicer to have it on the entire method body.

Why do you think it is much nice to squiggle entire method body for the feature error? I there something wrong with the code in the method? How is this going to interact with other errors in the body? Will the customer be able to see that location?"
Good catch! That is wrong for sure.
"I'd push back on that. The dumps are only captured in our jobs in two cases:

1. Jobs hang and eventually our timeout is hit.
1. Xunit crashes and collect a dump file to see what happens (this PR).

Both these cases are rare and lacking the full dump files there is literally no way for us to find out what is going wrong here. We don't keep the builds long so I'm not concerned about the size here.  #Resolved"
"break line
In general, we don't have a strict limit, but I'm confused why some code above (for example, call to `DeriveArguments`) is on multiple lines (good, readable), but some other lines are crazy long..."
"> I've also implemented a check to see if the calculated item size is within some margin of the user-provided item size

This seems a bit quirky. Maybe it is the right design, but I'd be interested to discuss it. What I'm concerned about is that commonly, developers *think* they know what the item size is, but they are wrong by a small margin of error, perhaps because of the element `margin` being added onto its `height`. My hope had been that we can calculate the actual height and thereby free developers from the consequences of being slightly wrong, whereas the rule in this PR means we couldn't help them in this way.

I understand it's hard to determine the exact height but I'm unsure how bad are the consequences of us getting it wrong by a < 1px fraction or if there are any other approaches you've considered. Let's discuss when possible!"
"@github correct me if I'm wrong, but we are not supporting operators right now, as the emitted IL will differ based on the underlying type of the IL. So operators cannot be applied to generic types still.

---
In reply to: [162510809](https://github.com/dotnet/roslyn/pull/24199#discussion_r162510809) [](ancestors = 162510809,162502034)"
@github The work item number is wrong here (22672 instead of 24344). I think I can't correct it because you changed the target branch and if I push it will bring other changes with it. Can you correct this or should we leave it?
"> Wait why are we taking this change? Isn't this in the wrong layer? Removing information from loggers is the wrong place to do this sort of filtering.

Won't argue, it looks weird at best. :) But my understanding is #29801 asks to remove this information from the log without suppressing the exception. (See https://github.com/dotnet/aspnetcore/issues/29801#issuecomment-771196428)  Maybe I misunderstood the ask."
"Hmm Components.E2ETests, which use Selenium, seems to be timing out after the update. I haven't investigated what's wrong, but I think I'll only update Playwright in this PR and file an investigation issue."
">SourceModule.UtilizesNullableReferenceTypes [](start = 20, length = 43)

It feels wrong that we should check this explicitly here, I think ```Compilation.NeedsGeneratedNullableAttribute``` should cover this.  #Closed"
"The reason I put it here rather than in binding was to avoid pulling on `NonNullTypes` early.
I'll add a PROTOTYPE to consider after the PR for warning on `string?` in wrong context is merged.

In non-executable code, there should already be an error so I'm not worried. Aren't we going to run `NullableWalker` on such code anyways?

---
In reply to: [205838382](https://github.com/dotnet/roslyn/pull/28825#discussion_r205838382) [](ancestors = 205838382)"
"Copied wrong test, my bad: 
```csharp
    static void Main()
    {
        Bar(x => [||]Goo(x));
    } 
```"
"By my understanding such transferred nullability is not tracked by design, correct me if am wrong @github @github "
"So two followups I learned after more digging.

1.  Goto definition doesn't actually need the UI thread.
It calls into [FindDefinitionsAsync](http://sourceroslyn.io/#Microsoft.CodeAnalysis.EditorFeatures/GoToDefinition/AbstractGoToDefinitionService.cs,495ff7831b9e7b4d,references) to get the defintion which doesn't seem to require the UI thread (correct me if I'm wrong).  It also doesn't seem to get third party references either (seems like missing support, will file an issue to track that).

2.  I also learned it isn't safe to use JTF to switch to the main thread across a stream json rpc boundary.  It could still deadlock as the call isn't tracked across rpc.  So for FAR, I will be unable to migrate to the IlanguageClient until we remove the UI thread dependency.

thoughts @github @github ?"
"From what I can tell, this is always returning zero terminated string.

Would it be best to create the string from the pointer and not bother with using the returned size? I would be fine with not using the Span in that case because of there is no buffer math that can go wrong.

```
char* pGeoIso2Letters = stackalloc char[10];

if (Interop.Kernel32.GetGeoInfo(..., pGeoIso2Letters, ...) != 0)
{
    CultureData? cd = GetCultureDataForRegion(new string(pGeoIso2Letters), ...
```"
">CSharpAccessorOverrideComparer [](start = 55, length = 30)

Looking at the call sites that use this comparer, I see that they also use `RuntimeSignatureComparer` (for example in `MakePropertyAccessorOverriddenOrHiddenMembers` depending on `accessorIsFromSomeCompilation`).
Should `RuntimeSignatureComparer` also be adjusted?

Also, I notice that this PR hasn't updated `MakePropertyAccessorOverriddenOrHiddenMembers`. That means it is using a relaxed comparison, which is not constrained by new covariance rules.
Oh, I see that's what you meant by ""Note that we now consider a get accessor with the wrong return type to still be an override."". Should probably be marked as PROTOTYPE #Closed"
"The existing `@github` parsing was added as a quick solution that addresses the simplest case. `{@github http://example.com}` is what the majority `@github` uses I've seen look like.

Without more user feedback, I'm also not convinced there is enough demand for file://./`style link support. Such links just look wrong to me and I also don't know if other tooling would support these"
"I think there is also something wrong here. `injectedText` contains injected text in the `decorationsWithInjectedTextInEditedRange` which covers lines from `firstEditLineNumber` up to `lastEditLineNumber`. It does not cover new lines. You can think the case is that I paste `\n\n\n\n\n\n\n` in the middle of a line that contains injected text, but before the injected text."
Are we okay truncating these if user sets them to something crazy? Seems like something they'd want to see in diagnostics.
"should be:

```suggestion
			((IndicatorsView)bindable).ResetIndicatorsStyles();
```

like it's done everywhere else. I prefer a failing cast exception than continuing with a property being set on the wrong control

"
"We have a suite of tests for that already, they were just previously passing for the wrong reasons due to the old, bad behavior. I'm planning to update a bunch of our loader tests next week to try and catch this stuff throughout."
"Something wrong here, trying to understand why Test fails on Android but it's green on VSTS, 

On VSTS on Androdi reports 47 tests on ISSUES, it should be around 500"
don't love this.  it seems like it would actually be wrong in many circumstances (for example .editorconfig setting newline to '\n').  deserves tests of that :)
"Do we really want `(?<key>([A-Za-z]*))`? That would match *no* characters, allowing a match of `{}`. Is that sensible?

Additionally, does the `0*` make sense? That looks like it should be *any* format string, so what would be wrong with e.g. `{versionCode:x8}`?"
"I did this for backward compatibility. The issue is that when the KeepAliveInterval is validated in WebSocketCreationOptions, when invalid an ArgumentOutOfRangeException for paramName ""KeepAliveInterval"" (PascalCase), but the existing code was throwing ArgumentOutOfRangeException with paramName ""keepAliveInterval"" (camelCase). There was even a test for that. It felt wrong for me to change the test to check for PascalCase for the name or even more wrong to throw camelCase when validating the property.

If you consider that the CreateFromStream would throw ArgumentOutOfRangeException with different casing than the actual name of the argument OK and not a breaking change, I will remove it and validate it only once in the property setter."
"If you typed one of the hash codes wrong, or an entry was missed from the table, then I assume this test would fail?
https://github.com/dotnet/runtime/blob/e6f093cf0e711d9ba91b133b23a38c9a1911584d/src/libraries/System.Web.HttpUtility/tests/HttpUtility/HttpUtilityTest.cs#L95

I compared all the entities in that test vs this table, and they match except for one case: `&apos;` is missing from the test, but it is in the table. You might consider adding to that test."
Still want this goto or its going to fail with the wrong message for things not found?
"Just playing with this, it feels really good. I'm a little shocked that this doesn't work for the new tab dropdown. Maybe that's not technically a child of the `TerminalPage` - I think flyouts might technically have some other crazy XAML root that lets them escape the window confines.

I'll double check the code now, but from a UX perspective this seems good to me"
"Thanks @github!

This works and I can communicate with the server with a wrong host certificate. However, it is not ideal since I need to use a platform-specific API (Android) in order to extend HostnameVerifier and establish communication.

Ideally, since my app targets multi-platforms, a universal solution for my http client library targeting a single framework would be the best (my http client communication library is universal and consumed by all of my platforms), which was how it worked before in the Android platform (when using mono android 8.1 framework) by simply extending the ServerCertificateCustomValidationCallback.

This is, although a bit cumbersome (since my client library needs to target android specifically for this workaround), an acceptable workaround for my case, however.

Thank again!"
"I'm not sure what this is doing.

1. Is it adding the runtime config template from the functional test to every testsuite?  That seems wrong.
2. Why is it using the `.template.json` file from the source directory?  it should be using the generated `runtimeconfig.json` from the output directory (ie from ""bin/Debug/.../runtimeconfig.json"") or maybe from the publish directory (I'm not sure) - there is probably some property that is set to the path to that file.  I'm not sure.
3. It probably doesn't need to be part of the `BundleTestAndroidApp` target.  It can be its own target that the `PublishTestAsSelfContained` task can depend on.
4. I don't like the ""output.pefile"" filename.  (a) it's not a PE file anymore, (b) ""output"" doesn't really mean anything.  How about ""runtimeconfig.bin"" or something?
"
"The condition is wrong, this is in mmp, which means the XAMCORE_2_0 condition is not taken into account (the condition should be `if (Driver.IsClassic) return true;` or some such).

I've only tested XI/mtouch, but the intention is to support everything that makes even a little bit sense in XM/mmp as well, so I'll fix this."
"> Adding the suggested test is just testing the UI culture is not cached.

This is not true. The suggested test is testing the `ci.DisplayName` is not cached. It is to test the following change being made, from the description above:

> Display names were cached which is wrong. The display names should be treated as the localized resources and should be retrieved every time using the CurrentUICulture."
"And I was more wrong then: the VB implementation allows null to mean to convert a Function to a Sub; the C# implementation however would throw, and there are no tests covering that. I've marked SetType as null accepting and moved the assert."
Codign style is wrong in most of the file.
"Oh, no. I was thinking about the wrong place. This is just making sure we are clean to rebuild with LLVM. It stays."
"Call `InitializeHandle (ptr, ""selector"")` instead, which shows a better error message if something goes wrong (if the native init method returns NULL)
"
"We know GCHandle could be re-used, we already discussed that. 
But the GCHandle id/index could be only re-used after it was released by us in `Runtime.ReleaseJSOwnedObjectByHandle()`
Could you please be more specific on how it could go wrong ? Or write unit test for it."
This is in the wrong spot.. fixing
"Either this comment is wrong, or your removal of the `Where` is wrong, but I have no idea which"
"I believe the original comment is wrong, but also confusing.

In particular, we expose `Vector128<float> Fma.MultiplyAdd(Vector128<float> a, Vector128<float> b, Vector128<float> c)`, this is logically `r = (a * b) + c`.

All three instructions are of the form `VFMADD***PS xmm1, xmm2, xmm3/m128` differing on which argument is treated as `a`, `b`, or `c`.

As such:
* `132`: `xmm1 = (xmm1 * xmm3/m128) + xmm2`
* `213`: `xmm1 = (xmm1 * xmm2) + xmm3/m128`
* `231`: `xmm1 = (xmm2 * xmm3/m128) + xmm1`

This path was originally `op1->isContained` meaning, `op1` is the ""memory"" operand and should (to avoid an additional `movaps reg, [addr]`) take the position of `xmm3/m128`.

Since `op1` is part of the multiplication and should take the spot of `xmm3/m128`, we can therefore pick `132` or `231` as the correct form. Which we pick should depend on if the storage location was `op2` or `op3`"
"Oh, I guess it's these?
```
Xamarin.Tests.DotNetProjectTest.BuildAndExecuteNativeReferencesTestApp(""NativeFileReferencesApp"",MacOSX,""osx-x64""): Contains magic word
Expected: String containing ""20ea6b97-85d6-424c-b381-f5a103440b50""
But was: ""dyld: Library not loaded: /System/Library/Frameworks/CHIP.framework/Versions/A/CHIP
Referenced from: /Users/builder/azdo/_work/1/s/xamarin-macios/tests/dotnet/NativeFileReferencesApp/macOS/bin/Debug/net6.0-macos/osx-x64/NativeFileReferencesApp.app/Contents/MacOS/NativeFileReferencesApp
Reason: image not found
""

Xamarin.Tests.DotNetProjectTest.BuildAndExecuteNativeReferencesTestApp(""NativeFrameworkReferencesApp"",MacOSX,""osx-x64""): Contains magic word
Expected: String containing ""ca06cf57-2e9f-4687-aba2-32e13c9a8e22""
But was: ""dyld: Library not loaded: /System/Library/Frameworks/CHIP.framework/Versions/A/CHIP
Referenced from: /Users/builder/azdo/_work/1/s/xamarin-macios/tests/dotnet/NativeFrameworkReferencesApp/macOS/bin/Debug/net6.0-macos/osx-x64/NativeFrameworkReferencesApp.app/Contents/MacOS/NativeFrameworkReferencesApp
Reason: image not found
""

Xamarin.Tests.DotNetProjectTest.BuildAndExecuteNativeReferencesTestApp(""NativeXCFrameworkReferencesApp"",MacOSX,""osx-x64""): Contains magic word
Expected: String containing ""f3e5466b-58d2-429d-a2b4-6fe66875247a""
But was: ""dyld: Library not loaded: /System/Library/Frameworks/CHIP.framework/Versions/A/CHIP
Referenced from: /Users/builder/azdo/_work/1/s/xamarin-macios/tests/dotnet/NativeXCFrameworkReferencesApp/macOS/bin/Debug/net6.0-macos/osx-x64/NativeXCFrameworkReferencesApp.app/Contents/MacOS/NativeXCFrameworkReferencesApp
Reason: image not found
""

Xamarin.Tests.DotNetProjectTest.BuildMyWatchApp: watchOS not supported on net6
Xamarin.Tests.DotNetProjectTest.BuildAndExecuteNativeReferencesTestApp(""NativeDynamicLibraryReferencesApp"",MacOSX,""osx-x64""): Contains magic word
Expected: String containing ""dc8bd019-bea2-4c86-92dc-dda22e2e6b88""
But was: ""dyld: Library not loaded: /System/Library/Frameworks/CHIP.framework/Versions/A/CHIP
Referenced from: /Users/builder/azdo/_work/1/s/xamarin-macios/tests/dotnet/NativeDynamicLibraryReferencesApp/macOS/bin/Debug/net6.0-macos/osx-x64/NativeDynamicLibraryReferencesApp.app/Contents/MacOS/NativeDynamicLibraryReferencesApp
Reason: image not found
```

I don't see how this change would break these.

If this PR had something wrong, no Mac Catalyst project would be able to build."
"And the answer is - we create 2 closures (display classes). So the change is correct - we need to associate this block with a syntax distinct from the body of the statement (which represents a different closure). Just the comment is wrong.
"
"I think I was wrong about this.  I think we should pass ""-f"" to FakeSign and then check result.Succeeded/return (as below).
"
"Just because someone goofed up and did the wrong thing doesn't mean we should use it as justification.
"
"Oof - is there really no way to avoid errors from the prior parse? This seems wrong, but is there any existing precedent for this?"
"```suggestion
                    return Debug.assertNever(name.name);
```

The `default:` clause below is wrong and should just read `return` as well. "
"I played around with it a bit more. Breaking out the `AssignmentDeclarationKind.Prototype` case and adding the `ObjectLiteralExpression` properties to that node seems to do the trick. Don't need the `prototypeAccess` either since we should be in one...

```ts
case AssignmentDeclarationKind.Prototype: {
    const binaryExpression = (node as BinaryExpression);
    const assignmentTarget = binaryExpression.left as PropertyAccessExpression;

    // If we see a prototype assignment, start tracking the target as a class
    if (isIdentifier(assignmentTarget.expression)) {
        addTrackedEs5Class(assignmentTarget.expression.text);
    }
    if (isFunctionExpression(binaryExpression.right) || isArrowFunction(binaryExpression.right)) {
        addNodeWithRecursiveChild(node,
            binaryExpression.right,
            assignmentTarget.expression as Identifier);
    }
    else {
        startNode(binaryExpression, assignmentTarget.expression as Identifier);
            forEachChild(binaryExpression.right, addChildrenRecursively);
        endNode();
    }
    return;
}
```

I had to set `[AssignmentDeclarationKind.Prototype]: true` in `isEs5ClassMember`. I haven't tested it thoroughly enough to see if that breaks anything else. It does look like children of the constructor are showing up in the wrong place though (directly under the class). It's otherwise looking really good, super stoked for your changes!

![lookingGood](https://user-images.githubusercontent.com/42591254/63644050-becbd680-c694-11e9-8bee-54e1dce8d4ca.png)
"
"Serious comment: I wouldn't make the second parameter have a default until there's a reason for it, unless the default is really easy to get wrong."
"Its not clear why you need to call this from wild card watching.. This seems incorrect. Eg if i had my tsconfig file with say include as src directory, then server is going to watch src folder and not project directory itself so it seems incomplete and wrong place to do this."
Would it be worthwhile to store `getNodeLinks(node).resolveSymbol` on a local? If nothing else it might be a little easier to read. (I could easily be wrong though)
"Let's make sure we're on the same page:

**Are you saying `spellingSuggestionGlobal1.ts` (as written, with `const x`) should produce the error message `Cannot find name 'global'. Did you mean 'globalThis'?`?**

If so, I disagree. Users will follow that suggestion and change `global.x` to `globalThis.x`, then get another error (`Property 'x' does not exist on type 'typeof globalThis'.`), then be confused/frustrated and have to research why it doesn't work, then probably end up ignoring the suggestion anyway and write `x` instead of `globalThis.x`.

**Or are you saying that in situations where `x` is a known property of `globalThis` and the user writes `global.x` that it would be nice to say `Cannot find name 'global'. Did you mean 'globalThis'?`?**

If so, I agree, but unfortunately that would be tricky to implement (unless I'm missing something). I'd bet that this situation occurs rarely in the wild, so it might not be worth the complexity cost to maintain a dedicated suggestion for it. I could be wrong, though.

In any case it seems orthogonal to the bugfix in this pull request. Currently [if you write something like `global.Math` the error message won't suggest `globalThis`](https://www.typescriptlang.org/play?#code/OYGw9gRghiB0CyUAuALIA), either.

---

Regardless, I should add a test case that uses `var` in the global declaration. I'll push a commit for that soon."
Is it expected that we have to use VS2022 **Preview** to build the stable 6.0 LTS servicing branches?  That seems pretty wrong to me.  We try to avoid churning the build tools in servicing.
"AFAICT this `completionKind` had no effect prior to me moving the aforementioned filtering code, but was conceptually wrong, and changing it to be conceptually right allowed me to move the filter."
"Also, the dominator tree itself is not accurate. 

I think this just leads to missed opportunities as during the rewalk as we might visit blocks in the wrong order (we are trying for bottom-up). But I'm not 100% sure."
"all these are wrong 64K minimum VM requirement is on view not map file. so this optimization actually doesnt save anything since we don't manage view but just mmf.
"
"UpdateProjectBinPath_Foreground is making calls back into AbstractProject instances for metadata to P2P reference conversion, and I didn't know what may go wrong if that happens from multiple background threads - I just retained that functionality on foreground thread.
"
"> Changes based on review by @github

Wrong way around :wink: "
"Seems there was something wrong with the previous PR.  This one went through.  Thanks, @github."
">                 // (19,33): error CS0106: The modifier 'sealed' is not valid for this item

This error feels a bit wrong. The equivalent instance method error is `'symbol' cannot be sealed because it is not an override`. By the current spec, this modifier _is_ valid for the item, just not in conjunction with `abstract`, and also not without a body. I think we'd benefit from a more specific error. #WontFix

---
Refers to: src/Compilers/CSharp/Test/Symbol/Symbols/StaticAbstractMembersInInterfacesTests.cs:95 in 1cd7bb4. [](commit_id = 1cd7bb4b367f104dc0dec258710546352a54bb7e, deletion_comment = False)"
"The example of using `Object.entries` in the PR description (which is referenced from the TS 4.1 release notes) seems wrong — I think this should be using `arr.entries()`, and the order of `el` and `i` are reversed?"
"Working:
- Linux x64
- OSX x64

Failing:
- Windows x64
- Windows x86

Building, but building wrong:
- Linux arm64"
"> Suppressions are a hack for hacking your way out of issues a cast won't fix (like weird inheritance issues). But a cast will fix almost any issue (even those issues if you're creative with where you cast and to what) - every example you have here can be fixed with a single `any` cast (on the receiver, library itself, or argument), which is much better handled in the language. In other cases, where you have a massive chunk of unchecked code, the per-file directive is fine. If a third party lib has the wrong type, you cast to the correct type or `any`, up to you, a suppression is completely incorrect and the wrong solution to the problem.
> 
> Honestly, we thought suppressions were a bad idea to begin with and I had to argue they had uses when migrating JS projects to TS (essentially as automatable TODOs since per issue suppressions are easy to place automatically). But some people turn to them rather than the much simpler cast, and seeing the arguments here just reinforces that - suppressions aren't ""better"" than a cast - they're much much worse, and they leave the compiler in a silent error state where things may not behave as expected. They are an absolute last resort, and _honestly_ the presence of a suppression should itself be an error, to indicate that the project has unchecked code that may have unintended cascading effects on downstream code (like quietly leaking an `any` that isn't caught by `noImplicitAny`).
> 
> If anyone is left thinking a suppression like this is their only possible solution, then we've failed in our documentation somewhere - even in JS we support jsdoc casts now, so you can cast out of almost any issues in JS, too. (Even missing imports can be fixed with `declare module` declarations)

Then why do we have `@github`? The same case goes, there's already a few use cases over in the issue linked in the OP. I understand the point that we want everything to be strict and casted correctly, however if we have options such as ts-ignore already, aren't we are already doing that suppression option anyway? what harm does this really have at the end of the day? If people are adding `@github` already, surely we want to enhance the developers experience?

I do agree suppressions are bad and we shouldn't supress before casts. However.. there's a use case for developers during debugging, migration etc."
"Tagging subscribers to this area: @github/ncl
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Backport of #46151 to release/5.0

Fixes: #45651

## Customer Impact

On Unix, when using blocking overloads of `Socket.ReceiveFrom` after an asynchronous call to the same socket, the call may return wrong `remoteEP`.

## Regression?

Yes. The behavior is correct on 3.1.

## Testing

Extended `SocketTestHelper` so existing tests can validate the sync-over-async path of the blocking `ReceiveFrom`. Unfortunately, those tests are disabled on the 5.0 branch, so I had to port a minimal subset of #44591 (fix enabling the tests) so we can run them on CI for 5.0.

## Risk

Low. The bug was a small overlook, the fix is trivial, that impacts only the affected sync-over-async `ReceiveFrom` path.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>antonfirsov</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Net`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Could we talk about this change first? I'm still not convinced that coupling `Start` with ctor is a way to go. For example, `TcpListener` has `Start`, `LocalEndpoint` keeps port `0` until you start it. I don't see anything particularly wrong with keeping the behavior same here."
"Just for my understanding, this is a difference between debugger-libs+debugger-agent, and icordbg+debugger-agent? And wasm uses the latter, and what uses the former? Please correct me, if I have that wrong!"
"@github on further inspection, this seems like a one-off but was these DNS failures to talk to AzDO were the first two things this VM did after startup.  Given it successfully had to talk to and resolve DNS for Azure Storage, Azure Service Bus, Azure Event Hub, and Microsoft Container registry in this time, and that we've had stuff in place to make sure the Helix daemon doesn't start before the network services I think it can be chalked up to a temporary network problem on this VM.

That said, there are a lot of -4 exit codes still from ""Test run with id XXXXXXXX could not be found. It may have been deleted."", which shouldn't be causing -4; I will try to reason about why and make sure we have a tracking issue for this.
(**EDIT** Nope we just still use exit code -4 here, nothing wrong with those)"
@github Oops. Wrong. I misread that `if`. Let me try this again.
"I can repro the `System.Text.Json.Serialization.Tests.StreamTests_Sync.HandleCollectionsAsync` failure but it's intermittent; have not yet pinned down where things go wrong, or how it's related to QJFL/OSR.

On my RPI4, I can repro this about 10% of the time; each run takes ~400s currently, so no insights yet. There is a second failure symptom that crops up too:
```
    System.Text.Json.Serialization.Tests.StreamTests_Sync.HandleCollectionsAsync [FAIL]
      System.Text.Json.JsonReaderException : '0x00' is invalid within a JSON string. The string should be correctly escaped. LineNumber: 9 | BytePositionInLine: 12573.
      Stack Trace:
        /home/andy/repos/runtime/src/libraries/System.Text.Json/src/System/Text/Json/ThrowHelper.cs(279,0): at System.Text.Json.ThrowHelper.ThrowJsonReaderException(Utf8JsonReader& json, ExceptionResource resource, Byte nextByte, ReadOnlySpan`1 bytes)
        /home/andy/repos/runtime/src/libraries/System.Text.Json/src/System/Text/Json/Reader/Utf8JsonReader.cs(1365,0): at System.Text.Json.Utf8JsonReader.ConsumeStringAndValidate(ReadOnlySpan`1 data, Int32 idx)
        /home/andy/repos/runtime/src/libraries/System.Text.Json/src/System/Text/Json/Reader/Utf8JsonReader.cs(1293,0): at System.Text.Json.Utf8JsonReader.ConsumeString()
        /home/andy/repos/runtime/src/libraries/System.Text.Json/src/System/Text/Json/Reader/Utf8JsonReader.cs(1036,0): at System.Text.Json.Utf8JsonReader.ConsumeValue(Byte marker)
        /home/andy/repos/runtime/src/libraries/System.Text.Json/src/System/Text/Json/Reader/Utf8JsonReader.cs(1801,0): at System.Text.Json.Utf8JsonReader.ConsumeNextToken(Byte marker)
        /home/andy/repos/runtime/src/libraries/System.Text.Json/src/System/Text/Json/Reader/Utf8JsonReader.cs(1689,0): at System.Text.Json.Utf8JsonReader.ConsumeNextTokenOrRollback(Byte marker)
        /home/andy/repos/runtime/src/libraries/System.Text.Json/src/System/Text/Json/Reader/Utf8JsonReader.cs(884,0): at System.Text.Json.Utf8JsonReader.ReadSingleSegment()
        /home/andy/repos/runtime/src/libraries/System.Text.Json/src/System/Text/Json/Reader/Utf8JsonReader.cs(272,0): at System.Text.Json.Utf8JsonReader.Read()
        /home/andy/repos/runtime/src/libraries/System.Text.Json/src/System/Text/Json/Document/JsonDocument.cs(961,0): at System.Text.Json.JsonDocument.Parse(ReadOnlySpan`1 utf8JsonSpan, JsonReaderOptions readerOptions, MetadataDb& database, StackRowStack& stack)
        /home/andy/repos/runtime/src/libraries/System.Text.Json/src/System/Text/Json/Document/JsonDocument.Parse.cs(692,0): at System.Text.Json.JsonDocument.Parse(ReadOnlyMemory`1 utf8Json, JsonReaderOptions readerOptions, Byte[] extraRentedArrayPoolBytes, PooledByteBufferWriter extraPooledByteBufferWriter)
        /home/andy/repos/runtime/src/libraries/System.Text.Json/src/System/Text/Json/Document/JsonDocument.Parse.cs(261,0): at System.Text.Json.JsonDocument.Parse(ReadOnlyMemory`1 json, JsonDocumentOptions options)
        /home/andy/repos/runtime/src/libraries/System.Text.Json/src/System/Text/Json/Document/JsonDocument.Parse.cs(321,0): at System.Text.Json.JsonDocument.Parse(String json, JsonDocumentOptions options)
        /home/andy/repos/runtime/src/libraries/System.Text.Json/tests/Common/JsonTestHelper.cs(19,0): at System.Text.Json.JsonTestHelper.AssertJsonEqual(String expected, String actual)
        /home/andy/repos/runtime/src/libraries/System.Text.Json/tests/System.Text.Json.Tests/Serialization/Stream.Collections.cs(65,0): at System.Text.Json.Serialization.Tests.StreamTests.PerformSerialization[TElement](Object obj, Type type, JsonSerializerOptions options)
        /home/andy/repos/runtime/src/libraries/System.Text.Json/tests/System.Text.Json.Tests/Serialization/Stream.Collections.cs(53,0): at System.Text.Json.Serialization.Tests.StreamTests.RunTestAsync[TElement]()
        /home/andy/repos/runtime/src/libraries/System.Text.Json/tests/System.Text.Json.Tests/Serialization/Stream.Collections.cs(23,0): at System.Text.Json.Serialization.Tests.StreamTests.HandleCollectionsAsync()
```
Via DumpJittedMethods there are maybe 100 OSR instances created, so it could very well be OSR related.

Various attempts at getting this to repro faster and more consistently haven't panned out yet:
* Tried reproing with release builds: no luck. 
* Tried narrowing things down to the failing test and passing the test assembly 32x on command line: no luck

Will see if enabling OSR stress gets us anywhere."
"PTAL @github/jit-contrib 

Diffs: https://dev.azure.com/dnceng/public/_build/results?buildId=1582186&view=ms.vss-build-web.run-extensions-tab
(not sure it's correct, running locally, the CI job might picked up a wrong baseline)

From a local run I see a lot of size regressions due to inlining (along with improvements). Now, when the inliner sees a GT_CNS_STR it considers it as a constant argument so all operations on this argument in callees are considered foldable including branches leading to bigger ""benefit multipliers"". Example: https://www.diffchecker.com/mLb1tijN (see https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Private.Xml/src/System/Xml/Serialization/SoapAttributeOverrides.cs#L41)

Unfortunately, there is a faulty (too optimistic) heuristic ""if I see an unknown call and we have a const argument on stack - the call most likely returns another const"" - I am going to remove it, it's responsible for huge diffs in general.

"
I bet there will be some crazy corner case/thing and it won't work ... but I definitely hope it's not the case.
"> Seems like we use the ""enumerate early args then late args"" pattern quite often, I wonder if some sort of combined iterator makes sense.

I think for the most part these cases are ""visit all operands of `GenTreeCall` nodes"" and we should probably look into making them use either `GenTree::UseEdges`, `GenTree::Operands` or `GenTreeVisitor`. Also if the ordering is not important we can just use `Args()` and access both `GetEarlyNode()` and `GetLateNode()` in the loop body. However, I think this is a cleanup for another PR.

> Also wonder if we can come up with some kind of safeguards to make it harder to look at the wrong enumerations. Or maybe find better descriptive names?

I agree, it would be nice to find a better name for `LateArgs` that makes it clear that this is a subset of `Args` and that it may not be in arg order. `ArgsNeedingLatePlacement` could be one, although a bit verbose...
I do think with this PR the situation is significantly better than before. Iterating `Args()` and using `GetNode()` is in almost all scenarios the thing you want (it will never give you a placeholder/setup node). Contrast that with before, where iterating `gtCallArgs` and using `GetNode()` would give you setup nodes/placeholder after morph.

Note that many places in this PR are using `GetEarlyNode()` before morph which is always the same node as `GetNode()`. New code should probably just use `GetNode()` here, but when I mass-converted the uses I attempted to make sure the semantics were the same as previously. Perhaps something I might look at simplifying in a future PR."
"Tagging subscribers to this area: @github/area-system-text-regularexpressions
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

We use this `additionalDeclarations.Add` mechanism in the source generator when we can't declare the local exactly where it's needed due to branching structure and the compiler not always being able to see that the local is definitely assigned.  In such cases, we instead emit the local at the beginning of the method, default initialized, and then later assign it where we need to.  In this particular case, we should be default assigning it but are accidentally calling base.Crawlpos().  This isn't functionally wrong, but it's unnecessary.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>stephentoub</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Text.RegularExpressions`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>7.0.0</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Introduced changes are fixing the problem of wrong stack size calculation for control flows with back edges.

This has been achieved by modifying the code generation loop in `generate_code` function to:

- Skip blocks which have uninitialised stack sizes 
- Mark emitted blocks
- When the loop finishes if the code generation is not complete (there were some skipped blocks), the code generation loop is repeated
- Following passes only handle blocks skipped in previous ones (already emitted blocks are not taken into account)

This change may impact performance.

Fixes #68757.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>ivanpovazan</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Codegen-Interpreter-mono`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
Probably good to just merge these methods like iOS since it always calls UpdateRotation - and I think that name is a bit wrong.
"The developers are always right, even when they are wrong."
"@github I see, but when you talk about the MainPage.cs sample, is to add the Editor instead of the entry, right? (Yeah it's a dumb question from me, but just to make sure)
"
"Font and Format seem to be working, but max and min date  seems something wrong..

```
new DatePicker { MinimumDate = DateTime.Now.AddDays(-1), Date = DateTime.Now, MaximumDate = DateTime.Now.AddDays(1) };
```

this still allows me to select days and months

![image](https://user-images.githubusercontent.com/1235097/117484637-463ba500-af5f-11eb-9403-05297c35e67a.png)



	
	

"
"~HttpsConnectionAdapterOptions should be as fully populated from config ass possible before calling ApplyHttpsDefaults which calls into user code with the options object.~


~I'd remove the two if blocks that were added to this method and add the following right before ApplyHttpsDefaults.~

```C#
// This was wrong: httpsOptions.SslProtocols = endpoint.SslProtocols ?? ConfigurationReader.EndpointDefaults.SslProtocols ?? SslProtocols.None;
```

Edit:

Instead, I would add the following right before ApplyHttpsDefaults:

```C#
httpsOptions.SslProtocols = ConfigurationReader.EndpointDefaults.SslProtocols ?? SslProtocols.None;
```


Then, right here, after ApplyHttpsDefault, I would add the following:

```C#
if (endpoint.SslProtocols.HasValue)
{
    httpsOptions.SslProtocols = endpoint.SslProtocols;
}
```

It's important that this second part happens before finding `matchingBoundEndpoints` or calling the `configureEndpoint` callbacks for named endpoints."
What's the purpose of all these `typeof` statements (they seem to be removed afterwards). I imagine this is to cause compiler errors if something goes wrong. What's the reason in this case for them to be open generic types instead of `typeof(Grid<DateTime>)`
">null [](start = 17, length = 4)

Passing null here feels wrong. It looks like that will result in IMemberReferenceExpression.Member to be null. I think we should pass ```method``` instead. #Closed"
"> wrong link to issue / pull request for th the `addresses #xxxx` I think

Thanks, fixed it."
">This is still where I'm stuck. If they both get their version from a single project reference then how did they get out of sync at all? I can definitely understand how they would be the wrong version but not how they would be out of sync.

I think he doesn't mean ""shared"", he means there is one in sdk, and one in aspnetcore?"
"Ok, so we were looking at the wrong class for references, the in memory repository logic is here:

https://github.com/dotnet/aspnetcore/blob/c925f99cddac0df90ed0bc4a07ecda6b054a0b02/src/DataProtection/DataProtection/src/KeyManagement/XmlKeyManager.cs#L556 and has its own slightly different log message, so looks like there already is two separate logging messages, so just changing this one to Info might be good...

"
"(yes, previous code was wrong as well). #Closed"
"https://github.com/dotnet/aspnetcore/pull/33251/commits/7711c4228e4be8ba6690cf4cce35d115f5d8963d

@github @github I pushed a commit resolving most of your feedback - Still need to fix the log folder name issue/rolling files after restart, which I'll do on Monday. File Logger tests are failing because now timestamps are being appended even to custom folders, so the tests are looking in the wrong place for the files - haven't fixed the tests because I'm going to change that behavior on Monday."
"hmm, I don't know... The only thing that should really be changed is the icon. I don't know why the order is different... even if I did change the order in which I return them (which I don't think is the case), shouldn't that be irrelevant because it's all ordered afterwards by the completion list? something must be working wrong there"
">type [](start = 122, length = 4)

This looks wrong, does this type match method's return type? #Resolved"
">IInvalidOperation (OperationKind.Invalid, Type: null, IsInvalid) (Syntax: 'goto label1;') [](start = 8, length = 89)

The node disappeared. This feels wrong. #Closed"
"`SmallDictionary` has the wrong API for the clients of this API. Which is sad. :(

---
In reply to: [194895435](https://github.com/dotnet/roslyn/pull/27753#discussion_r194895435) [](ancestors = 194895435)"
Indentation also looks wrong here.
i'm not exactly understanding why this is the right fix.  can you provide insight as to what's actually going wrong when you have `await x..`? #Resolved
Where is that property `NETCoreAppFrameworkIdentifier` defined in libraries? I don't see it anywhere. I was suggesting to use `TargetFrameworkIdentifier` which _should_ contain the right value here but I might be wrong (if this project doesn't have a target framework set).
"> Does adding a Volatile.Read in IsNextOperationSynchronous_Speculative have an effect on performance? It would make more clear at what point we're picking a value that got set on another thread.

It wouldn't have any effect on x64, would have to check on arm64. On arm64 I think the memory barrier would usually be redundant (and in the wrong place, after the read instead of before), and the overhead would be incurred for each event and each queue. Adding an explicit memory barrier before the loop may be better, but I suspect it would be difficult to quantify how much it would help."
">Assert.Null(rootModuleType.GetMember("".cctor"")); [](start = 16, length = 48)

Since this method is private, we cannot trust this check unless ```MetadataImportOptions.All``` is used (you already did that in previous PR), because we might simply not import it. That option is probably not used by default, but I could be wrong. Please add an assert for ```ImportOptions``` on the module and do that for all similar tests to make them more robust. #Closed"
"I rolled through this a few times. `fallbackSourceFileEncoding` is something that's informed by a compilation. Specifically, if we store on `EmitOptions` that means that the act of doing a compilation changes the `EmitOptions` that were passed into the compilation, which seemed to be wrong. Is there a way `fallbackSourceFileEncoding` makes sense to pass in for something that wouldn't be determined by a compilation? "
"My concern is this scenario:

1. Project A depends on a Metadata.dll that _doesn't_ have any IVT attributes in it.
2. Project B also depends on a different Metadata.dll, but it does use internals via IVT from it's Metadata.dll.
3. Some search happens on a public type in Metadata.dll, and the analysis is done with the IAssemblySymbol that is seen through A; the cache is populated that Metadata.dll is consumed from A and B, but because we're using the IAssemblySymbol of the Metadata.dll as seen through A, neither are marked with ""has internal access"".
4. A search happens in B's code on an internal type obtained from Metadata.dll through the IVT B sees. Because it's internal, we fetch the entry from step 3, and filter it to only things with internal access, which is nothing. B's code is never searched, so the identifier you invoked find reference on might not be found!

I see a few approaches for this:

1. Delete the cache. Problem solved; I think you said privately you are already doing that, so maybe that's the easiest answer.
2. [If we have to restore the cache...] Don't care. I'm hesitant to say this only because I don't know how widespread this is, I do know how difficult it will be to figure out a customer report if it does happen. I'm also wondering if Roslyn could hit this itself: our CodeStyle layer builds against NuGet packages that are older: would we end up building the IVT list based upon the IVTs in the NuGet package we build against, a newer IVT added in the source might potentially get skipped...? Consider my scenario above, where Project A is our Code Style layer and B is some code that has IVT into our Workspaces layer. Minimally, if we choose to not care, a comment at least recognizing the cache issue might be wise so that way if somebody else is debugging and thinks the cache is wrong, they know they're not crazy.
3. [If we can't delete the cache and find we must care...] Fix it. We already have to walk through all projects and all IAssemblySymbols to actually see which projects are referencing the assembly name in question; at that point we've collected all the IAssemblySymbols that might have an IVT we need to consider -- if we union all of the IVTs together of all the those assembly symbols, then the cache is safe. Assuming you don't process the same IAssemblySymbol more than once, this shouldn't really be any slower than what we have now. I'm guessing multitargeting might mean each IAssemblySymbol might be different, but it's easy to ask if two come from the same PE file path on disk, which would be sufficient for our needs here."
"I .. honestly don't know why I didn't choose that. It seems wrong for WindowsTerminal.exe to be depending on an interface from all the way down in TerminalControl; it's an app concern, and Control just happens to share the same concern."
"There likely should be an output from the task that includes the written generated files into FileWrites, so later builds delete the previously outputted files and a MSBuild clean would actually delete them. Is there a plan to include that? My impression is the file tracker mechanism you did write tests isn't used for that, but I could be wrong."
The check above which checked for category being exactly TypeFlags.ValueType was wrong which caused single element structs wrapping an enum to behave incorrectly.
"> Oh. I'll make sure to remember to use `git grep` in the future instead of relying on GitHub's search. Haha.

@github Or use [grep.app](https://grep.app/search?q=_renderLineHightlightOnlyWhenFocus&filter[repo][0]=microsoft/vscode) (Extended view) :wink: GitHub search sucks..."
"@github 

> No, but the spec recommends to wait for a client to cancel since a server can not decide whether the result is useful for the client or not.

Just as it is important for clients to be robust to naive servers (and LSP accommodates this), servers need to deal with imperfect clients.

The ability to reject requests with ContentModified is important to prevent an ever-growing backlog of file versions that need to be parsed. In particular we have seen clients in the wild that can send implicit requests after each keystroke and never cancel them. This causes a backlog when reparses are slower than the edit frequency.

Of course it's sufficient for either the client or the server to be smart, but absent some capability advertised by the client, servers must assume clients are dumb (and vice versa)."
"Whoops, sorry, wrong repository. Code is proof of concept for a class project."
"Even with the fix, the `_glyphIndices` for simple runs will have *wrong start* index, if there's N-M runs previous to them. For example a simple line like this:

```text
😀
```

There's two runs. First is complex, the second is simple. 

| Text | Length | Glyph Count |
| -- | -- | -- |
| 😀| 2 | 1 |
| (A lot of spaces | 118 | 118 |

The correct `_glyphIndices` is this:

| Index | Value |
| -- | -- |
| 0  | 11685 |
| 1  | 3 |
| 2  | 3 |
| 3 | 3 | 
| ... | ... |

But here we have:

| Index | Value |
| -- | -- |
| 0  | 11685 |
| 1  | **0** |
| 2  | 3 |
| 3 | 3 | 
| ... | ... |

Notice there's an incorrect 0 indice here, because when we do `GetTextComplexity` on the second run, we have no idea how many glyphs the previous run takes up, and assume the number is equal to the textLength (2) and fill up the `_glyphIndices` from there."
">enumeratorMethod.Parameters.Any(p => p.IsParams) [](start = 74, length = 48)

This calculation feels fragile and possibly incorrect in a general case. Presence of ```params``` modifier doesn't actually imply that the argument always has an expanded form. For example, the parameter might not have the right type. Or ```params```, which is just an attribute in metadata, can be on a ""wrong"" parameter. Etc. See, ```OverloadResolution.IsValidParams``` for example. Rather than trying to re-infer this information, I think we should find a way to thread it through from the binding. Also, with recent work to move creation of default values to binding, I would expect that would also take care of param arrays, when necessary.  

 #Closed"
"What is the purpose of an error message? It's not (necessarily) _just_ to say ""something went wrong."" If that were the sole purpose, we could print out the `Reason` message and be done with it.

The purpose of the error message is _also_ to inform the user of _what_ the problem is in such a way that _they can fix it_.

Your updated message doesn't satisfy that purpose. We just know that unzipping _some file_ failed for _some reason_. We don't know what to do to fix it. Should we clean and rebuild the project? Sacrifice a chicken? Burn the world? Who knows! The error message certainly doesn't say....

As such, the previous message is much better.
"
"I did some quick and dirty profiling on my current change. One note: I have a pretty degenerate case: Four installations of VS, which adds seven! profiles when both generators are enabled.
1. It looks like CShellLink::SetPath is crazy expensive! Makes me think the longer the jump list gets, the worse startup perf is going to be. Maybe worth a user setting to disable creating jump list entries, separate from creating dynamic or proto-extension profiles.
2. The two generators I added are proportionally about the same amount of CPU time as any one of the other generators.
3. There is a definite opportunity to increase the VS generators performance by caching the instances of ISetupInstance instead of getting them twice. I'll work on that for my next commit.

![image](https://user-images.githubusercontent.com/5862883/94674924-d0a89000-0310-11eb-8426-b5ee20bb0436.png)
"
"In the above `<SupportedPlatform Include=""browser"">` added only for enabling browser warnings for browser targeted or multitargeted build, this actually affected the multitargeted builds of lower targets like `netstandard2.0` but there is still warnings for targeted builds like `netstandard2.0-Linux-Debug`, we wouldn't like to enable warnings for `linux` build. Second not all assemblies have  `UnsupportedOSPlatform(""browser"")`, i added here because this is where assembly level  `UnsupportedOSPlatform(""browser"")` attribute added. 

But after giving into it another look instead of adding `<SupportedPlatform>` i think we should restrict adding the `UnsupportedOSPlatform(""browser"")` for platform targeted builds, we only need that for cross platform build, correct me if i am wrong @github 

"
"NSMenuValidation is just totally wrong. Copy and paste error. Good catch.
"
"Good catch, but for the wrong reason.   The ""owns"" already will ensure Retain is called, so this was an extra retain.
"
"> When set to ""none"", we won't. (the pre-1.10 behavior)

This sounds wrong to me. If the long term plan is to allow the choice of ""none"", ""bright"", ""bold"", and ""all"", then the pre-1.10 behavior is ""bright"" rather than ""none"". "
"'Get' sounds wrong since this is still creating and returning an MLFeatureValue same as the other static methods.  FromType doesn't work since it doesn't tell you that it's an UndefinedFeatureValue, but maybe just UndefinedFeatureValueFromType?  or even CreateUndefinedFeatureValue"
We have a fix for this in https://github.com/dotnet/runtime/pull/42879. Since it's test code it should be OK to also port that one over. It feels wrong adding a test which is semi-broken when we know how to fix it.
"I think we should open a new issue about extensibility. This issue is about optimizing the 90% case. I'm not a fan of using DIMs in libraries that cross compile, it feels wrong to differ the contract based on runtime capabilities. That said, it's unrelated to optimizing this code path."
"Correct me if I'm wrong but this is only unsafe if the serializationformat is not xml right since in that case it would use BF. If so, would it make sense to add it to the message so it can be suppressed upstack when we know that the format is xml?"
"> This looks wrong.

@github do you mean not using the accessor is wrong, or checking for a default interface method using the method flags is wrong?"
"Yup, I understand the problem. After all it was me who reported it. I am just not seeing how this change will address the problem: making sure non-fp functions use add rsp to de-allocate the stack frame. Instead it seems as it is add a pop rbp. Am I reading it wrong?"
"Actually all changes here are wrong, this is a generated file. This isn't us targeting `netstandard1.3` in our builds but rather testing the compilers ability to do builds against `netstandard1.3`"
"> Because doing this correctly adds cost to workaround a server that's actively doing the wrong thing. There are a myriad of ways it could be doing the wrong thing, and by returning the data without error, it's only working around this one very specific way the server is doing it wrong, and in doing so, passing along effectively corrupt data to the consumer. What if the server said it was speaking gzip but sent down data as zlib or deflate? What if the server said it was speaking gzip but didn't send the gzip header, only the compressed body and gzip footer? Etc.

ok, i'm agree with this, but then we could simply return an meaningfull error instead of the wrong error message ""The archive entry was compressed using an unsupported compression method."" and returning something like ""The request is announced to be compressed but isn't a valid gzip stream"" and give the caller an ability to access the underlying stream.

somthing like `InvalidGzipStreamException:InvalidDataException(string mesage, Stream underlyingStream)`"
"> Maybe I'm reading the XML wrong. Its in the composition, but won't be scanned. Perhaps that just means it won't be scanned for [Import]s but can still participate in [Export]s

IDK what that means specifically. On my Mac it appears to light up correctly.

> How similar?

The goal is that all non-obsolete public members and features should eventually be present on both the Mac and Windows hosts. 

It looks like LanguageServerSnippetExpander does indeed exist on both Mac and Windows builds. The one thing to be aware of is that @github made a breaking change to this API May 12th and it probably hasn't yet been inserted to Mac, so we'll have to rev the LSP client before we can insert this version of Roslyn: https://devdiv.visualstudio.com/DevDiv/_git/VSLanguageServerClient/pullrequest/398270"
Nope.  I'm entirely wrong.  It's never null.  Fixed up annotation and cleaned up.
"I've added a test showing that it was wrong.
"
"Yes, the comment is wrong. The line for the second clause should read something like:

_""The implied type of the second clause is never, but this does not get just because it includes a default case""_"
"In case of INVALID_STATE we're doing something wrong (we = user of System.Net.Quic), 2 cases here:
- closing connection locally and then opening stream
- opening stream twice

In both cases, we're fully responsible for the wrong combination of operations.

==> I think we should keep the original exception for INVALID_STATE and change it only for ABORTED.

Note that we might revisit this in the future (APIs, customer feedback, ...), so no need to obsess about it."
"~~By my understanding that is the case of instantiated (created) case for which I would expect that `pMethod->IsUnboxingStub()` is already set as needed, therefore I don't thinks we should change that, though I might wrong~~  `` UPDATE this was wrong, not sure when this path would hit"
"> 15.0|default|latest [](start = 34, length = 19)

Crazy nit pick but in the C# help we use Default and Latest, here default and latest (casing difference). 
"
"> Both examples are weakly typed (return object). What is the example for the strongly typed consumer of this?

Possible scenario (though it would require API tweaks):

```cs
// calculate and cache these upfront
Type actualServiceType = environment.GetConcreteTypeForAbstraction(typeof(IMyService));
ObjectFactory<IMyService> factory = ObjectFactory.Create<IMyService>(actualServiceType);

// call this in a hot path, such as per-request
IMyService service = factory.CreateInstance();
```

Or, for an MVC-like framework's per-request processing logic:

```cs
Type controllerType = GetControllerTypeForCurrentRequest();
ObjectFactory<Controller> factory = s_factories[controllerType];
Controller controller = factory.CreateInstance();
Console.WriteLine(controller.GetType()); // could be AdminController, WeatherController, etc.
```

There's nothing stopping us from saying ""`ObjectFactory.CreateInstance` always returns object, not T."" But IMO there is something nice about an API that returns _T_ instead of _object_, meaning you don't have to cast the return value and you don't have to worry about putting the wrong category of factory (`ObjectFactory<IServiceA>` vs. `ObjectFactory<IServiceB>`) into your static cache, etc."
"This is suspicious; the code above says defines param `b`'s type as `{y: typeof b}` , which is self referential and surely wrong."
"We can't move this out because it is a global regex and when you reuse it, the last index will not be at zero so it will produce wrong result. Alternatively we can set the last index to zero but I think this way is more clear
"
"There are a few other tricks that might prove useful here. Disclaimer: I haven't tried any of these.

[**Click for SharpLab!**](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIAYACY8gOgCUBXAOwwEt8YLAMIR8AB14AbGFADKMgG68wMXAG4a9JqwByHAVGXqamgMxNSDIQwDeNBg8cOxhhdgwxtSBrx4MAkjympAAqEAASMAhCABbYULgAFLJi2FwAPGBxUAB8DMAcAGaFMmgMHL4YDG6SHDBllQwxUQBCePU+fgAmvADmvBi4AJT2To521GNTnVUFxTIAolxdgV1RDAC8+UUlUCwAMjBcvRgxGpPTTgDuMVKeiYlwcD39gww5W4yEhNXYtZ4AQk+QwYADJQQwAPQAKgYAHkuJIAJ4MDAQBgwSS8Nb5CDcLq4BhZGBgADWDGhkIYiQqPCGjzgc12SxWyyiIPS1NpGCGTJkByOJxiIwulwcEzF02ASI8DBeA021OlHnpNTqYIYdAQADEhudJVM+VAANpGlmrKIAXUViSy8Xp8qqAGpqY6GJzyIwAPxKmUwIYAcjoAYYICarXaQz1owNjjVnhyHwYKH1BoAvjGxcQAOzbeZQc1shCpqYZ0UMTNOFy8Nyy5jeRqBDDBMKRaLZXAAfRayVSGTtuTzuzK3N+/wafmaCDauA6jUdw0r4yXU0aZuWFoQiqNAuOpxLYpud2pDIX70+DG+Y/VQM1IPBUNhCORqPRmOxnmAeOWhOJZIpVI0pU9JPOurJrAgHJcsBO6HHuwormMEqxo4o5uls8Yalq2oHrGjRgDawFui6QYBrhBq8IUrp9AqSaeiCNhEgwTpbFOM4wGoDBlihjhGqaOyLBuRbWlstrZEMYDkZKmGJlsKaIU43EGjmQ6CeBURSVxmaIdWtaePWMwBEEoQRFEsTxF2Qi9mkmTZHkRojo08YTlUbHtC5co0YMIqXMhkqNNgYAYBwfxtgAIl5IjcFUWxRTw4VeUk8bRuWlyUdSgXBaFUQRa8cVVHkC4+QafkoWeWyZSFkgJXl34YJpikKY46UPNyQxnpyQF0rBgqnMVkqlbGRrbgJeyyFiKiJHQZRFQ1jhKZKTUOI0vAjfmu5CnNDhHtIrXAQyvBQV1PI9fB/VioNBpoV5iqYRC2FbWMMlJvJqUUX4BGiURN0kcGj1OC1bp0XQDFMSx4bTu0nELShfG8CJ1IDhJj0w5cS1MLmp2bYhZaIcaACyMCnBAKziJIiSE8TpNiJIcJiHwEBcLgLAAIK9L0sC4LgNYwIEWJcL4vRDJaiHEOYBmNPlNUDEko7JYhl1TJCVIhM0DBcPowAyAwEBUVOnmvISvCEpIEC9OQSCJMlzEMOQZTQAwpu9KQVt/HUIJUigNtUG9UwqYkLQDHTMjuLwjPM/sZsu9biYMKQIIuuQmllmmQA=)

### Baseline proposal

(This is the PR as I reviewed it, where _Int32ToHexChars_ has undergone a straightforward conversion from pointer-based to span-based.)

```cs
        private static int Int32ToHexChars(Span<char> buffer, uint value, int hexBase, int digits)
        {
            int bufferEndIndex = buffer.Length;
            while ((--digits >= 0 || value != 0) && /* Only to elide bounds check */ (uint)(--bufferEndIndex) < (uint)buffer.Length)
            {
                byte digit = (byte)(value & 0xF);
                buffer[bufferEndIndex] = (char)(digit + (digit < 10 ? (byte)'0' : hexBase));
                value >>= 4;
            }
            return bufferEndIndex;
        }
```
```asm
C.Int32ToHexChars(System.Span`1<Char>, UInt32, Int32, Int32)
    L0000: push rdi
    L0001: push rsi
    L0002: mov rax, [rcx]
    L0005: mov ecx, [rcx+8]
    L0008: mov r10d, ecx
    L000b: jmp short L0035
    L000d: mov r11d, edx  ;; START OF LOOP
    L0010: and r11d, 0xf
    L0014: movsxd rsi, r10d
    L0017: lea rsi, [rax+rsi*2]
    L001b: cmp r11d, 0xa
    L001f: jl short L0026
    L0021: mov edi, r8d
    L0024: jmp short L002b
    L0026: mov edi, 0x30
    L002b: add r11d, edi
    L002e: mov [rsi], r11w
    L0032: shr edx, 4
    L0035: dec r9d
    L0038: test r9d, r9d
    L003b: jge short L0041
    L003d: test edx, edx
    L003f: je short L0049
    L0041: dec r10d
    L0044: cmp r10d, ecx
    L0047: jb short L000d  ;; END OF LOOP (total loop instruction length = 60 bytes)
    L0049: mov eax, r10d
    L004c: pop rsi
    L004d: pop rdi
    L004e: ret
```

### Modification B - simplify hex conversion

This modification involves replacing the two jump instructions within the hot loop with a single conditional jump instruction. The conditional jump is only taken if the digit is 'A' - 'F'. If you do this, you'll need to modify [`GetHexBase`](https://source.dot.net/System.Private.CoreLib/R/9e867b5206ddc67d.html) to append a `- '0'` to the end. That modification allows you to perform the `+ hexBase - '0'` operation as a single step.

```cs
        private static int Int32ToHexChars_B(Span<char> buffer, uint value, int hexBase, int digits)
        {
            int bufferEndIndex = buffer.Length;
            while ((--digits >= 0 || value != 0) && /* Only to elide bounds check */ (uint)(--bufferEndIndex) < (uint)buffer.Length)
            {
                uint digit = value & 0xF;
                int c = (int)digit + '0';
                if (digit >= 10) { c += hexBase; }
                buffer[bufferEndIndex] = (char)c;
                value >>= 4;
            }
            return bufferEndIndex;
        }
```
```asm
C.Int32ToHexChars_B(System.Span`1<Char>, UInt32, Int32, Int32)
    L0000: push rsi
    L0001: mov rax, [rcx]
    L0004: mov ecx, [rcx+8]
    L0007: mov r10d, ecx
    L000a: jmp short L002b
    L000c: mov r11d, edx  ;; START OF LOOP
    L000f: and r11d, 0xf
    L0013: lea esi, [r11+0x30]
    L0017: cmp r11d, 0xa
    L001b: jb short L0020
    L001d: add esi, r8d
    L0020: movsxd r11, r10d
    L0023: mov [rax+r11*2], si
    L0028: shr edx, 4
    L002b: dec r9d
    L002e: test r9d, r9d
    L0031: jge short L0037
    L0033: test edx, edx
    L0035: je short L003f
    L0037: dec r10d
    L003a: cmp r10d, ecx
    L003d: jb short L000c  ;; END OF LOOP (total loop instruction length = 51 bytes)
    L003f: mov eax, r10d
    L0042: pop rsi
    L0043: ret
```

### Modification C - hoist _digits_ and _value_ checks outside the loop

This eagerly calculates how many characters will _actually_ be written as part of the loop, and it resizes the buffer to be the appropriate length before entry to the loop. It's a little more work upfront, but it means the loop itself is very tight since the only condition you're checking is whether you've run off the end of the buffer. In particular, _value_ and _digits_ no longer contribute to the loop evaluation condition dependency chain.

(Edit: On review, I'm passing the wrong parameters to _Slice_, but that's outside the hot loop so it shouldn't affect any theoretical perf numbers.)

```cs
        private static int Int32ToHexChars_C(Span<char> buffer, uint value, int hexBase, int digits)
        {
            int actualHexDigitCount = CountHexDigits(value);
            if (actualHexDigitCount > digits)
            {
                digits = actualHexDigitCount;
            }
            if ((uint)digits < (uint)buffer.Length)
            {
                buffer = buffer.Slice(0, digits);
            }
            
            int i = buffer.Length;
            while((uint)(--i) < (uint)buffer.Length)
            {
                uint digit = value & 0xF;
                value >>= 4;
                int c = (int)digit + '0';
                if (digit >= 10) { c += hexBase; }
                buffer[i] = (char)c;
            }
            
            return buffer.Length;
        }
```
```asm
C.Int32ToHexChars_C(System.Span`1<Char>, UInt32, Int32, Int32)
    L0000: sub rsp, 0x28
    L0004: mov rax, [rcx]
    L0007: mov ecx, [rcx+8]
    L000a: mov r10d, edx
    L000d: or r10d, 1
    L0011: lzcnt r10d, r10d
    L0016: xor r10d, 0x1f
    L001a: sar r10d, 2
    L001e: inc r10d
    L0021: cmp r10d, r9d
    L0024: jle short L0029
    L0026: mov r9d, r10d
    L0029: cmp r9d, ecx
    L002c: jae short L003b
    L002e: mov r10d, r9d
    L0031: mov ecx, ecx
    L0033: cmp r10, rcx
    L0036: ja short L006e
    L0038: mov ecx, r9d
    L003b: mov r9d, ecx
    L003e: jmp short L005f
    L0040: mov r10d, edx  ;; START OF LOOP
    L0043: and r10d, 0xf
    L0047: shr edx, 4
    L004a: lea r11d, [r10+0x30]
    L004e: cmp r10d, 0xa
    L0052: jb short L0057
    L0054: add r11d, r8d
    L0057: movsxd r10, r9d
    L005a: mov [rax+r10*2], r11w
    L005f: dec r9d
    L0062: cmp r9d, ecx
    L0065: jb short L0040  ;; END OF LOOP (total loop instruction length = 39 bytes)
    L0067: mov eax, ecx
    L0069: add rsp, 0x28
    L006d: ret
    L006e: call System.ThrowHelper.ThrowArgumentOutOfRangeException()
    L0073: int3
```"
"> Do you know what these two lines were trying to guard against in the first place?

No. looks we just inherited this from the full framework. I doubt this is the case anymore. this is why I the comment to Santi was trying to tell if the CI pass on Win7/Win8 then we should be fine to proceed with this fix. 

a side from that, the behavior of not enabling the linguistic casing for invariant is wrong. as you seeing, Windows turning off some casing which will not be the desired behavior for us."
"Argh, based on wrong branch. Will create new PR."
"> A workitem is supposed to be ""Passed"" if it ran tests without crashing. 

Really? That seems confusing, if I read data and I see a workitem passed, my instinct would be to think there were test failures.

> @github I may be wrong, but the constant test failures may be an indication of what is happening.

That's unrelated, the constant test failures are infrastructure issues we're trying to fix. Could you elaborate on which test failures you're referring to in case they're not related? "
"> It looks like dotnet-sdk-6.0.100-preview.6.21355.2-linux-arm64.tar.gz is still broken? Am I doing something wrong?

The preview.6 SDK doesn't have the fix."
"@github This was auto-closed. As soon as you have time to look at the bug in the wrong SHA encoding, feel free to reopen the PR :)"
"IMO, it's totally generic, but IMO in general it's easy for us to get it right, but easy for users to get wrong. It also makes it really hard to reorganize individual callbacks,etc in order to resolve conflicts (what if you have two pieces that add a callback and override each other).

In general, when we have this type of composition, I like it when it's backed by primitives and visible, so that:
1) I get a clear understanding of how the system works.
2) I can reorder/reconfigure the system to suit my needs without having to go bonkers or digging into the details of how each component on the stack works."
The original assertion was wrong here. We want this to generate strong typed stuff that won't try to do conversions. This is an update based on changes to the compiler that fixed the underlying issue.
"~~I had this originally. Thought it felt excessively noisy and made this change hard to review. I can switch this back as a final commit if everything else is approved.~~ scratch that, I read this change wrong."
oh that was dumb on my part. I will get those fixed.
I could fail if it found the method but had the wrong return type?
Can you rename this so we make sure we're not capturing the wrong parameter instance in the cached function? Making it static would be better but that means you need to pass more stuff.
🙈 wrong pattern matching by my eyes... Thanks.
"Glad to see this having the desired effect.

Should this in some way respect the WaitForDataBeforeAllocatingBuffer setting at the transport layer?  Or if not because it's the wrong layer, if such a setting was important there, is one important here?"
">Split(); [](start = 20, length = 8)

I think think this might be a wrong place to do the Split, it should be done when we are visiting invocation, not the arguments. #Closed"
"I was initially wrong in thinking I didn't have to look at the last node. The blank line is applied to the previous node, so a gap could be required."
I thought we shouldn't capture syntax root or any syntax from the original tree? @github am I wrong?
"Can we add a comment that we believe this behavior is wrong? I strongly detest tests that assert known bad behavior without clear comments tothat effect, because it's confusing as hell when you're trying to fix something, ""break"" a test because you did the right thing, and then ultimately figure it out that way."
"You _may_ want to leave it for now just in case we're wrong, but the comment most definitely isn't correct. #Resolved"
"What is wrong with the `for /f ...` used in the current script (https://github.com/dotnet/runtime/blob/master/src/coreclr/dotnet.cmd#L21)? That's one of the best way to do this, as far as I know."
"yes i should have been more clearer, i meant to ask if the versioning scheme used here is on purpose or just a mistake in packaging (nothing wrong with this pr)"
"> This looks weird. Why would a test project have a reference to its test runner? We don't have that for non mobile OSs.

For non mobile OSs the test runner is XUnit and we get it via a NuGet package. 

In this case the Main application test runner are these test runners which need to wrap xunit in order to make it a runnable mobile app. We need the runners to be in the publish directory and be part of the bundle. Before this change we where hard coding/calculating the path for the runner and copying it manually to the publish dir. Making various things difficult, these were built during Mono builds, which mean that if you follow the split build model like in CI you need to carry them over as artifacts and make sure they land on the right location when building the libraries tests and flow the right runtime configuration, etc. Also in order to reduce size in the bundles we want to run the linker to trim the app, which relies on the SDK list of files that are part of the closure, since we were copying manually these where not consider causing the trim result to be wrong. Another thing, incremental inner dev loop changing these projects was not easy as  you needed to go build them on mono and actually use the same configuration you used for the mono runtime for these to be found, etc.

This is something that all test projects use in mobile so the most natural thing to solve those problems was adding a P2P."
"I understand the concern that you have, but I disagree on some points.

> It should not push down C because the user would then select B instead of C.

You are of course theoretically correct. My arguments here are practical:
1. It doesn't happen that often in practice
2. Clicking on the wrong thing doesn't cost the user anything (UI doesn't change in a dramatic way, can just click again on the intended result)
3. We could throttle updates to predictable intervals (e.g every 1s) so the user can intuitively know when an update might happen.
4. The user can just wait for all results to return (which is what they are forced to do now) before interacting. They are strictly better off with streaming.
5. As long as the user's current selection/view is maintained, I think it is ok for the results around it to be updating.

> It will push down the C-subtree, making the user click the wrong item.

Only if subtree A is expanded. I forget what the behavior is in the PR as it stands now, but we wouldn't need to auto expand any subtree automatically until all results are in. I think the auto expand behavior depends on # results in a subtree so it wouldn't make sense to auto expand anyway until all results are in.

> instead of resetting and resorting all locations we should always have append-insert semantics.

I got the opposite feedback on https://github.com/Microsoft/vscode/pull/28751, because the sorting was relevant there. As of right now, I would agree that the sorting isn't as relevant for references here (still a non-zero amount of relevant), but we would be precluding it from being more relevant in the future.

It also seems a little bit inconsistent if we have different behaviors for streaming in different contexts.

---

I am not sure if I will have time to make progress on this in the next two weeks."
">     [](start = 13, length = 4)

Indent went wrong."
"Agreed, but what're we gonna do... At least it's tested. Like I said last time we had one of these ""organically growing crazy-pants wrapping fixes"" in the PTY rendering."
"So you think that for every new thread, this function needs to be called to make code jitted on other threads executable? That would sound like a weird design of the mechanism behind pthread_jit_write_protect_np to me, but I may be wrong, of course."
"~~It does seem more error-prone, but if the signatures would match up such that the unit test you have would find mismatches, then it would be a nice touch.  Are there any where the signatures don't match?~~

_Wrong thread_ ;-)"
"@github should this be `navBar.TintColor = foreground.ToUIColor();`?

Setting this to background seems wrong at least :D"
"Yeah:

> Hostnames are domains, where a domain is a hierarchical, **dot-separated** list of subdomains

> Each element of the hostname must be from 1 to 63 characters long and the entire hostname, **including the dots**...

Note that specification has other limits like the length of a subdomain and the overall length which I didn't validate, because I think this is basically a sanity check and it seemed like overkill. (And if you want to go for reliable validation regexes are the wrong tool for the job.)"
"Not sure to be honest either.  It looks like it's removing suppression rules that suppress wrapping, but the formatter is magic to me.  If I remove this a bunch of tests fail with the wrong indentation.  Put a comment marking as such and moving on."
This brace is on the wrong line.
"I didn't know there was `integer`, I saw `dropdownDuration` was a `number` with a minimum of 0, so I did the same.
So in that case, this means `dropdownDuration` is also wrong."
"Yep, a stop-gap measure until we can figure out what's wrong."
"Does that mean that `ConfigurationLoadCredential` might be called multiple times on the same configuration with different certificate?
Or how should I go about sharing the configuration?

Am I wrong in my train of thought: instance of `SocketsHttpHandler` corresponds to one connection pool which corresponds to a single `QuicConnection` which holds one configuration. "
"@github We'd like to use ServiceProviderExtensions to clean up our code, but it uses the wrong JTF instance currently. Is there a planned API change we should be watching for or is it best to just mark ServiceProviderExtensions as a banned API?"
"I really haven't done much build-time throughput testing, but [really] early code-gen perf [numbers](https://gist.github.com/layomia/25ce825e2f9abc22e49b344edae65601) suggested the build time isn't increasing by a crazy amount. Do you know of a reliable way to measure the perf here that doesn't include noise from other parts of the compilation?

I've taken a [note](https://github.com/dotnet/runtime/issues/45448#issuecomment-822144624) to optimize the generator's implementation (e.g. looking at caching where possible), and also to adopt the incremental source generator pattern being designed."
I think NUnit creates new instance of the test class for each test so nullying everything might not be needed. But maybe I am wrong and that's XUnit or VSTest
"All of them? To my understanding, line 7-9 should be needed. But I could be wrong."
"Duh, I read wrong. I read Include=... thanks for solving my distracted question 😆 "
"~~@github It is public, but SourceText has internal virtual methods, which means that 3d parties cannot derive from it, right?~~ I'm dumb. Yes, internal virtual methods, but not abstract ones."
"Not sure how I got the right number, but in the wrong place... ;-)"
"At this point the compiler would not write its output files, but after your change the output files have already been written. I'm not sure if that change in behavior is OK. Please correct me if I'm wrong.
/cc @github @github .
"
"This started as a Windows version of PAL `MAPMapPEFile` method. It losely follows the same logic - go through header/sections and map them and bail via `goto` if something unexpected found in the file. There are many things that may go wrong at different stages. Avoiding goto here leads to duplication of the ""failed"" sequence.

"
"Note that ""Intellisense"" is actually correctly spelled ""IntelliSense"". The editor APIs got their namespace wrong.
"
"I'm not too sure about verifying the entire message, as I would just be creating a single-language version of a resource string in a different place, that then needs to be maintained for any change to the text.  I think it would make sense to get the full type name of SyntaxFactory to dynamically set the test value though, making the unit test re-factor proof.  Right now, if SyntaxFactory was re-named or moved to a different namespace, the unit test wouldn't catch that the error message is wrong again.

I will also add a unit test that calls the 3 proper API methods, to validate those work.
"
"I'm surprised we're placing generators in the runtime path, that's wrong.  They don't even target the same thing.  We should see about fixing that (separately is fine). "
"This will, unfortunately, do the wrong thing if `U` is deduced to be an `Array`, but I'm not sure if there's a way of doing `<U extends anything but Array>`. It's a place where the user will have to be careful."
"These two properties are always set (when we create the object):

https://github.com/dotnet/runtime/blob/385fc8832b1d4160abe13645054b65458b6a12f8/src/libraries/Microsoft.Extensions.Hosting/src/HostBuilder.cs#L213-L217

It feels wrong to have consumers need to check these for null, when they won't be."
"@github the intent of this check was to verify the behavior of `object.Equals(object)`.  It seemed wrong to rely on this being tested as an implementation detail of `Assert.NotEqual` (and in fact it doesn't guarantee this).  Much more direct to just call it directly.  
"
"oh I was being dense, I see what you mean about the torn read now. Can we give a shot and see what it does to perf? I think we could make at least a weak argument that 32 bit wasn't incorrect, it was simply a known design limitation. The (hopefully small) group of customers who saw wildly wrong hit ratios probably wouldn't be happy with us though."
"This is possibly unsound. A non-`Identifier` value here indicates something wrong with the compiler. We have a very simple `Debug`-related assertion you can use for this case: `cast(node, nodeTest)`

```suggestion
            const { text, originalKeywordKind } = cast(node.name, isIdentifier);
```"
"> Using int64_t gives me an error on x86 systems. Am I doing it wrong?

What error do you get? 

> What do you mean ""to generalize both sides to intervals""?

I mean you can do what I suggested originally:
```cpp
  int64_t lhsMin;
  int64_t lhsMax;
  if (cmp->gtGetOp1()->IsIntegralConst())
  {
    lhsMin = cmp->gtGetOp1()->AsIntConCommon()->IntegralValue();
    lhsMax = lhsMin;
  }
  else
  {
    IntegralRange lhsRange = IntegralRange::ForNode(cmp->gtGetOp1());
    lhsMin = IntegralRange::SymbolicToRealValue(lhsRange.GetLowerBound());
    lhsMax = IntegralRange::SymbolicToRealValue(lhsRange.GetUpperBound());
  }

  int64_t rhsMin;
  int64_t rhsMax;
  if (cmp->gtGetOp2()->IsIntegralConst())
  {
    rhsMin = cmp->gtGetOp2()->AsIntConCommon()->IntegralValue();
    rhsMax = rhsMin;
  }
  else
  {
    IntegralRange rhsRange = IntegralRange::ForNode(cmp->gtGetOp2());
    rhsMin = IntegralRange::SymbolicToRealValue(lhsRange.GetLowerBound());
    rhsMax = IntegralRange::SymbolicToRealValue(lhsRange.GetUpperBound());
  }

  genTreeOps op = cmp->gtOper;
  if ((op != GT_LT) && (op != GT_LE))
  {
    op = GenTree::SwapRelop(op);
    std::swap(lhsMin, rhsMin);
    std::swap(lhsMax, rhsMax);
  }

  // now handle general [lhsMin; lhsMax] <op> [rhsMin; rhsMax] cases. op can only be LT or LE.
```

For unsigned comparisons it is probably going to be easiest to bail for ranges with negative values."
"I think we should still keep getValidSourceFile as calling this on wrong LS is still error... "
"This tuple be crazy.  Please introduce a named struct/class for this. #Resolved
"
"@github

Tanner acted in good faith by asking questions to the best of his understanding. Telling him that he doesn't know what he's talking about is unacceptable. First of all, it's not an insightful comment from your end. If you want other people to learn, you need to give them more information beyond ""you're wrong"". But more importantly it's just plain rude. You're basically sending him the signal of ""you're not welcome here"".

But instead of apologizing or even just letting that feedback sink in, you're now trying to turn the tables by saying you got victimized by Tanner because he asked you a technical question and that it's unreasonable from our end to ask you to be respectful in your responses to him.

You're more than welcome to continue to contribute to .NET. But I'll be clear: if we observe behavior like this in the future, we'll ultimately block you. We can't have other contributors stop engaging with us because of your behavior. While your contributions are valued, they don't warrant losing other contributors as collateral damage."
"> I have to confess that the design approach of using part rejection to express exports that are only present when another component is present is new to me. I have heard of rejection since 2009 original MEF but it was always considered a huge source of unforeseen errors as rejection tends to cascade and large portions of the graph can just disappear without a trace and good luck debugging why is my type not loading.

I strongly resonate with that.  The number of times i've had mef composition failures without being able to figure out what was going on is in the triple digits.  I remember losing hair over how awful this was.

If the situation still sucks, and part rejection is still an opaque and painful thing to figure out, i would opt toward avoiding rejection semantics.  If, however, part rejection is very easy to understand now, i could feel differently."
"> The main reason typically is that if somebody puts an attribute in the wrong place in a NuGet, when I build the app I would constantly get a warning without a good way to suppress it

If the NuGet author is adding these attributes, they are presumably going to verify they work. If they depend on their customers to verify it, it is their problem.

My default stance would be to warn about misplaced attributes always. It is the good diagnostic experience. Only worry about the noise if/once we find that people are shipping NuGets with misplaced attributes and not correcting the bugs fast enough."
"what is wrong with `tokenIsIdentifierOrKeyword(token)`? do JS keywords appear in the grammar in a valid position?
"
"Based on the review comments it seems I haven't done a good job of explaining what I'm trying to accomplish here. 

A compilation event is a muli-process problem for C# / VB. The MSBuild process (of which there are multiple) begins the compilation event by constructing a message that it sends to the VBCSCompiler process (of which there is one). The compiler receives the request, kicks off a `Thread` and then processes the compilation from there. Upon completion it constructs a response and sends it back to MSBuild. 

The log file contains messages from all these different MSBuild processes and all of the threads within VBCSCompiler interleaved. The only identifying marker for message in the log is the process and thread ID. That means reading a log file requires you to figure out which PID maps to which process (MSBuild or VBCSCompiler) and which TID within specific PID (the VBCSCompiler) maps to a given compilation event. That doesn't help a lot thouh though with the core problem which is typically trying to find the compilation that failed then look at all of the log entries for that compilation. Basically filter the log down to all of the events for a compilation and see where it went wrong. 

This PR attempts to address that by doing the following:

- Replace the PID in the log file with a concrete name: either `MSBuild <PID>`, `csc / vbc <PID>` or `VBCSCompiler`. Now at a glance can tell which process wrote the line
- Use a request id (simple `Guid.NewGuid()`) to track a compilation event across the processes. It is created by MSBuild, attached to the protocol and then every process puts that `Guid` into messages when they're writing a log event specific to a request. That makes it incredibly easy to filter out the log file to the events for a given process 

Below is a sample of how the log file looks after this change. Notice that `c8d7ad91-490f-420c-9a96-f3881a8804ca` is the request for a given compilation. I can easily just search for that in the log file, read through the messages now and easily see ever hop along the way to understand how this event was processed. 

```
ID=MSBuild 9120 TID=5: Begin writing request for c8d7ad91-490f-420c-9a96-f3881a8804ca
ID=MSBuild 9120 TID=5: End writing request for c8d7ad91-490f-420c-9a96-f3881a8804ca
ID=MSBuild 9120 TID=5: Begin reading response for c8d7ad91-490f-420c-9a96-f3881a8804ca
ID=VCBCSCompiler TID=7: Received request c8d7ad91-490f-420c-9a96-f3881a8804ca of type Microsoft.CodeAnalysis.CommandLine.BuildRequest
ID=VCBCSCompiler TID=41: 
Run Compilation for c8d7ad91-490f-420c-9a96-f3881a8804ca
  Language = C#
  CurrentDirectory = 'D:\workspace\_work\1\s\src\Compilers\Core\Portable
  LIB = ''
ID=VCBCSCompiler TID=41: Begin Analyzer Consistency Check
ID=VCBCSCompiler TID=41: End Analyzer Consistency Check
ID=VCBCSCompiler TID=41: Begin c8d7ad91-490f-420c-9a96-f3881a8804ca C# compiler run
ID=VCBCSCompiler TID=41: End c8d7ad91-490f-420c-9a96-f3881a8804ca C# compiler run
Return code: 0
Output:
Microsoft (R) Visual C# Compiler version 3.10.0-ci.21212.1 (<developer build>)
Copyright (C) Microsoft Corporation. All rights reserved.


ID=VCBCSCompiler TID=7: Writing Completed response for c8d7ad91-490f-420c-9a96-f3881a8804ca
ID=MSBuild 9120 TID=14: End reading response for c8d7ad91-490f-420c-9a96-f3881a8804ca
ID=MSBuild 9120 TID=8: CompilerServer: server - server processed compilation - c8d7ad91-490f-420c-9a96-f3881a8804ca
ID=VCBCSCompiler TID=1: Client request completed
ID=MSBuild 5956 TID=3: End reading response for 25074eec-9cf6-4fd9-b5f5-c9dbfd5aea78
ID=MSBuild 8408 TID=24: End reading response for 59d13f52-ec71-43df-b120-3a061af351c8
ID=MSBuild 5956 TID=3: Error Error: 'EndOfStreamException' 'Reached end of stream before end of read.' occurred during 'Reading response for 25074eec-9cf6-4fd9-b5f5-c9dbfd5aea78'
Stack trace:
   at Microsoft.CodeAnalysis.CommandLine.BuildProtocolConstants.<ReadAllAsync>d__4.MoveNext() in /_/src/Compilers/Core/CommandLine/BuildProtocol.cs:line 623
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.CommandLine.BuildResponse.<ReadAsync>d__5.MoveNext() in /_/src/Compilers/Core/CommandLine/BuildProtocol.cs:line 340
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.<TryCompileAsync>d__6.MoveNext() in /_/src/Compilers/Shared/BuildServerConnection.cs:line 289
```"
"@github 

These ones have no additional info (https://github.com/dotnet/runtime/pull/40902#issuecomment-675042706), the others do, like for instance if you have a non-existing unicode property, the error will _also_ show you that wrong property in an additional placeholder.

I don't think it matters much for now, really, as we've decided above to create the internal constructor with the necessary logic, but it won't be called anywhere (the original exceptions remain as they were, of course)."
"> were there particular hostpots where we could benefit from a readonly-dictionary, but also need to clone?

It looked like it was using a Dictionary; but then using `NullableWalker.SaveSharedState()` at various points to create a stack of ImmutableDictionaries representing the snapshots of the Dictionary at various evaluation points; where `.Clone()` would be simpler (e.g. snapshot state now, continue adding items, snapshot, continue adding items), though I may have been reading the code wrong. "
"I'm still tweaking the DT tests, and the DT run was going to give the wrong output, so I cancelled the current run. I'll start a new one:

@github run dt"
"~@github Android builds already contain the interpreter in libmonosgen-2.0.so I think.~ turns out I looked at the wrong line, it seems to be disabled."
"Thanks @github. After my comment I saw @github's twitter [post](https://twitter.com/orta/status/1444958295865937920) and how many people have already questioned this, so I don't want to beat it to death.

For the record, I don't disagree about not wanting to change runtime behaviour and how that is set in stone, I just disagree that it is changing runtime behaviour.

I don't see how converting non-suffixed imports into `*.js` suffixed imports as part of the transpile step would be considered a runtime change in behaviour. To me that is a syntax change, with no runtime behaviour change.

Reading about this more it seems this discussion has become quite entrenched so I will leave it at this comment as I think I've articulated as best I can why I feel this is the wrong conclusion."
"> This PR seems to be written in a way where it detects the testcase it's supposed to be fixing and then changes the result of the computation to match the expected behavior, rather than an edit that addresses a generalized version of what's going wrong. I don't think this is the right approach. This bug is likely quite subtle and might be a very difficult fix contribution.
> 
> Aside: We're generally not able to review PRs that aren't ready to merge. Uses of `any`, left-in debugging code, inconsistent formatting, etc, should all be cleaned up before filing something as a non-draft PR.

Sounds good.  One question about *inconsistent formatting, etc,* - if is passes the typescript rules is that sufficient?  I ask because this code passed the linting - if that's not enough then what is the standard?"
"> we're limiting ourselves to the subset of problems where the developer is prevented from actually doing the ""right thing"" (e.g. they're forced to implement a sync interface and have only async tools at their disposal to do so) rather than the subset where they don't realize they're doing the ""wrong thing"".

I don't think that's true. I think we need some knobs that workloads can use to change behavior, right now what we have works well when everyone plays ball but is quite catastrophic one there's a bad actor somewhere in the system. In that way it might not be the developer that needs to make the choice but potentially framework authors can have more granular control over things.
"
"The condition felt backwards to me to. When the syntax was recommended https://github.com/dotnet/runtime/pull/49155#discussion_r587757748, it felt wrong, but neglected to ask...

Perhaps `ConditionalFact` uses the condition in the opposite sense than `ActiveIssue`.  I guess that makes sense.  For `ConditionalFact` the condition is when to execute a test.  For `ActiveIssue` the condition describes when to disable a test.

I need to revise this, #49165 & #49155.

Thanks for letting me know @github (with 2 `e`s 😉 )
"
"Note about the maintenance of the loop table: one can enable (and potentially improve) `fgDebugCheckLoopTable()` for more phases if it is the eventual goal to have the table be maintained. When I did that a while back though, I remember hitting asserts as early as `optUnrollLoops` (because of wrong `bbNatNum`s)."
"> never unsetting the stopping flag.

I thought about that, but it feels wrong to still have ""_stopping = true"" once the Host is done stopping. Maybe I could rename it to `_stopCalled` or similar, then it would feel better."
"I didn't do it for `in` because one of the tests checks that the value doesn't get updated, but it looks like the test was doing the wrong thing (double-checked built-in). Will update."
"I see, thanks for pointing this out. With this change we end up with the node that has all its members optional, however language doesn't allow all three pieces to be omitted at the same type. Please correct me if I am wrong, I believe that language supports these two forms:
- <Identifier> [As <type>] 
- <type>

I think we should consider structuring syntax model accordingly and have a dedicated derived node for each unique syntactic form. 

---

In reply to: [82036116](https://github.com/dotnet/roslyn/pull/14284#discussion_r82036116) [](ancestors = 82036116,82035049)
"
"Yes, we need to address the problem in the analyzer. I don't think there is anything wrong with the API."
"I just assuemd we did the wrong thing ;) "
"Is there anything we can assert to verify it was a cert error? As is, this would pass even if we put in the wrong address."
"> I guess it also means when shutdown is ungraceful managed code might be forcefully torn down when there's a native code running on a managed threads so AV? 

I think what we want to do is to call `_requestNativeHandle.Dispose()` and await `await new ValueTask<object?>(_requestNativeHandle, _requestNativeHandle.Version);` before calling `CompleteHttpRequest()`. It was previously `http_post_completion` and now presumably `http_indicate_completion` that tells IIS that it's okay to release the backing handle.

The reason we have the weird dispose the SafeHandle then await it logic is to ensure any concurrent p/invokes with the SafeHandle have completed and any future ones will ODE. I think the logic was wrong here previously. We should have been doing this before calling `PostCompletion()` too.

Fortunately, this really only affects buggy code that tries to use the `HttpContext` after middleware complets. Still, it's better to avoid the possible AV."
"I'm a surprised by `ConversionKind.Invalid` here.
In the bound tree, I expect a deconstruction conversion. That conversion is ""secret"" (implementation-only, will likely not be in the spec). I'm not sure how it should be surfaced, but ""invalid"" seems wrong."
">Assign(ref this.StateWhenFalse, slot, true); [](start = 16, length = 44)

This feels wrong, this shouldn't change state of members because no assignment happens during 'is' pattern evaluation. #Closed"
"I just tested whether this works when trying to navigate to an inner class.
I discovered the following issues:
* For `A.B.ClassA.InnerClass` `GetFullReflectionName` returns `A.B.InnerClass`, which is completely wrong.
* The `FullTypeName(string)` ctor expects reflection syntax, so we'd have to use `A.B.ClassA+InnerClass`.
* `CSharpDecompiler.DecompileType` fails when it's passed the name of an inner class. I would say this is by design, but we could improve it by using the top-level type name stored in `FullTypeName`.

So there are two possible fixes:
a) Fix `GetFullReflectionName` to actually return the proper full name using reflection syntax and fix `CSharpDecompiler.DecompileType` to handle nested classes properly.
b) use something like:
```
            while (containingOrThis.ContainingType != null)
            {
                containingOrThis = containingOrThis.ContainingType;
            }
```
to unwrap the inner class before passing it to `GetFullReflectionName`.

I think I will fix the handling in `CSharpDecompiler.DecompileType` in any case."
"> Given the current setup when I hit <kbd>F5</kbd> will the debug fail to launch if the copyright is wrong? 

No. The diagnostic severity is Warning, so it'll work quietly for everything except command line and CI builds where warnings are treated as errors."
"It feels like there is something wrong around isExplicitlyNullable handling in this function. For example, why is this the right thing to do to drop isExplicitlyNullable on the final conversion?  #Pending"
"> I didn't realise there were any issues building the E2ETests project. That sounds serious and we would want to know if that goes wrong. I don't think we should be suppressing that kind of problem (e.g., maybe it reflects some actual SDK issue).

Yeah its usually some variation of something in the basictest app being filed locked, sometimes when compression, sometimes during other build steps. We've had that issue for a long time in some form or another, I saw it on a few builds recently (both locally) and on CI"
"Tagging @github/analyzer-ioperation I think something is wrong here.

From my understanding the area delineated by `<bind>` comment should be a syntax node of the right kind (`VerifyOperationTreeAndDiagnosticsForTest<TSomeSyntaxNode>(...`.
I'd expect the printed IOperation tree to be an assignment, with left being a sub-tree and right being a literal 1.

Try `VerifyOperationTreeAndDiagnosticsForTest<AssignmentExpressionSyntax>(...` instead? #Resolved"
">joinClause.InExpression [](start = 36, length = 23)

It is wrong to put this expression into a nested ```for each```, it should be evaluated only once #Closed"
"thse should not be argument excpetions.  If someone is passing along the wrong kinds, we should fix them.  If this is just trying to assert that we're getting the right type, then just throw `ExceptionUtilities.UnexpectedValue`"
"what would be behavior when a file contains multiple namespace? it doesn't offer the fix? bunch of tests related to namespace changes, but except the wrong folder name (not valid identifier name), I wonder what other tests are that are specific to sync folder name. 

also, might be good to have uni-code folder name?"
"This change looks suspicious but I also don't think it's wrong. "
"1. What is `NumberOfIncrementalIterations` for?
2. Why does the test pass in `.CodeActionEquivalenceKey`.  That seems wrong.  The test shouldn't  have to know what equivalence key was used.  That is strictly an internal detail."
"context and cancellationToken together are redundant (since context has the cancellationToken).  I removed the latter, esp. so we don't accidentally pass the wrong one along."
"If you look at the [`testResults.xml`](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-37494-merge-aff2f1d493a6477ba2/System.Net.Http.Functional.Tests/testResults.xml?sv=2019-02-02&se=2020-07-16T16%3A03%3A21Z&sr=c&sp=rl&sig=YWnQckHeslN6pPz6S61ceHkC787bizoNtwC9Wn%2FZsF8%3D), the failed test took almost 2 minutes (`method=""Send_CancelledRequestContent_Throws"" time=""105.6715878""`).

Also if you look around the file on times of other tests, you'll see similar times elsewhere:
<details>

```
      <test name=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpClientHandler_Cancellation_Test.Expect100Continue_WaitsExpectedPeriodOfTimeBeforeSendingContent"" type=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpClientHandler_Cancellation_Test"" method=""Expect100Continue_WaitsExpectedPeriodOfTimeBeforeSendingContent"" time=""36.5480668"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Proxy_Test.Proxy_SendSecureRequestThruProxy_ConnectTunnelUsed"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Proxy_Test"" method=""Proxy_SendSecureRequestThruProxy_ConnectTunnelUsed"" time=""35.0460034"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Proxy_Test.Proxy_BypassTrue_GetRequestDoesntGoesThroughCustomProxy(proxy: null)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Proxy_Test"" method=""Proxy_BypassTrue_GetRequestDoesntGoesThroughCustomProxy"" time=""10.8030974"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ConnectionPooling_Test.ServerDisconnectsAfterInitialRequest_SubsequentRequestUsesDifferentConnection"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ConnectionPooling_Test"" method=""ServerDisconnectsAfterInitialRequest_SubsequentRequestUsesDifferentConnection"" time=""38.0609817"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Headers_Http2.SendAsync_GetWithValidHostHeader_Success(withPort: True)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Headers_Http2"" method=""SendAsync_GetWithValidHostHeader_Success"" time=""15.9222679"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest.SendAsync_SendRequestUsingNoBodyMethodToEchoServerWithContent_NoBodySent(method: \&quot;HEAD\&quot;, serverUri: http://corefx-net-http11.azurewebsites.net/Echo.ashx)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest"" method=""SendAsync_SendRequestUsingNoBodyMethodToEchoServerWithContent_NoBodySent"" time=""35.262461"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest.SendAsync_SendRequestUsingNoBodyMethodToEchoServerWithContent_NoBodySent(method: \&quot;HEAD\&quot;, serverUri: https://corefx-net-http11.azurewebsites.net/Echo.ashx)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest"" method=""SendAsync_SendRequestUsingNoBodyMethodToEchoServerWithContent_NoBodySent"" time=""15.9431951"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest.SendAsync_SendRequestUsingNoBodyMethodToEchoServerWithContent_NoBodySent(method: \&quot;HEAD\&quot;, serverUri: https://corefx-net-http2.azurewebsites.net/Echo.ashx)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest"" method=""SendAsync_SendRequestUsingNoBodyMethodToEchoServerWithContent_NoBodySent"" time=""10.0093018"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_DefaultProxyCredentials_Test.ProxyNotExplicitlyProvided_DefaultCredentialsSet_DefaultWebProxySetToNull_Success"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_DefaultProxyCredentials_Test"" method=""ProxyNotExplicitlyProvided_DefaultCredentialsSet_DefaultWebProxySetToNull_Success"" time=""35.0168628"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.NtAuthTests.PostAsync_NtAuthServer_UseExpect100Header_Success(ntlm: True, contentSize: 1023)"" type=""System.Net.Http.Functional.Tests.NtAuthTests"" method=""PostAsync_NtAuthServer_UseExpect100Header_Success"" time=""35.3466227"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.NtAuthTests.PostAsync_NtAuthServer_UseExpect100Header_Success(ntlm: True, contentSize: 1024)"" type=""System.Net.Http.Functional.Tests.NtAuthTests"" method=""PostAsync_NtAuthServer_UseExpect100Header_Success"" time=""23.0162003"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.NtAuthTests.PostAsync_NtAuthServer_UseExpect100Header_Success(ntlm: True, contentSize: 1025)"" type=""System.Net.Http.Functional.Tests.NtAuthTests"" method=""PostAsync_NtAuthServer_UseExpect100Header_Success"" time=""16.7852631"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SyncHttpHandlerTest_HttpClientHandlerTest_Headers.SendAsync_GetWithValidHostHeader_Success(withPort: False)"" type=""System.Net.Http.Functional.Tests.SyncHttpHandlerTest_HttpClientHandlerTest_Headers"" method=""SendAsync_GetWithValidHostHeader_Success"" time=""23.6571878"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.InvalidCertificateServers_CertificateValidationDisabled_Succeeds(url: \&quot;https://expired.badssl.com/\&quot;)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test"" method=""InvalidCertificateServers_CertificateValidationDisabled_Succeeds"" time=""22.9605599"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.InvalidCertificateServers_CertificateValidationDisabled_Succeeds(url: \&quot;https://self-signed.badssl.com/\&quot;)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test"" method=""InvalidCertificateServers_CertificateValidationDisabled_Succeeds"" time=""17.5470465"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.InvalidCertificateServers_CertificateValidationDisabled_Succeeds(url: \&quot;https://wrong.host.badssl.com/\&quot;)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test"" method=""InvalidCertificateServers_CertificateValidationDisabled_Succeeds"" time=""10.0228789"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SyncHttpHandlerTest_AutoRedirect.GetAsync_CredentialIsNetworkCredentialUriRedirect_StatusCodeUnauthorized(remoteServer: (BaseUri: http://corefx-net-http11.azurewebsites.net/, HttpVersion: 1.1))"" type=""System.Net.Http.Functional.Tests.SyncHttpHandlerTest_AutoRedirect"" method=""GetAsync_CredentialIsNetworkCredentialUriRedirect_StatusCodeUnauthorized"" time=""14.1564323"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests_Dribble.GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly(maxChunkSize: 1, lineEnding: \&quot;\\n\&quot;, useCopyToAsync: False)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests_Dribble"" method=""GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly"" time=""36.3829722"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests_Dribble.GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly(maxChunkSize: 1, lineEnding: \&quot;\\n\&quot;, useCopyToAsync: True)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests_Dribble"" method=""GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly"" time=""10.6521162"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests_Dribble.GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly(maxChunkSize: 1, lineEnding: \&quot;\\r\\n\&quot;, useCopyToAsync: False)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests_Dribble"" method=""GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly"" time=""13.9719459"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests_Dribble.GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly(maxChunkSize: 1, lineEnding: \&quot;\\r\\n\&quot;, useCopyToAsync: True)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests_Dribble"" method=""GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly"" time=""15.7977029"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_MaxResponseHeadersLength_Test.ThresholdExceeded_ThrowsException(responseHeaders: \&quot;HTTP/1.1 200 OK\\r\\nContent-Length: 0\\r\\nCustom-000\&quot;..., maxResponseHeadersLength: null, shouldSucceed: True)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_MaxResponseHeadersLength_Test"" method=""ThresholdExceeded_ThrowsException"" time=""35.374156"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_MaxResponseHeadersLength_Test.ThresholdExceeded_ThrowsException(responseHeaders: \&quot;HTTP/1.1 200 OK\\r\\nContent-Length: 0\\r\\nCustom-000\&quot;..., maxResponseHeadersLength: null, shouldSucceed: True)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_MaxResponseHeadersLength_Test"" method=""ThresholdExceeded_ThrowsException"" time=""10.4789942"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_SslProtocols_Test.GetAsync_SupportedSSLVersion_Succeeds(sslProtocols: Tls, url: \&quot;https://www.ssllabs.com:10301/\&quot;)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_SslProtocols_Test"" method=""GetAsync_SupportedSSLVersion_Succeeds"" time=""16.0482474"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_SslProtocols_Test.GetAsync_SupportedSSLVersion_Succeeds(sslProtocols: Tls12, url: \&quot;https://www.ssllabs.com:10303/\&quot;)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_SslProtocols_Test"" method=""GetAsync_SupportedSSLVersion_Succeeds"" time=""10.4444674"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests.GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly(maxChunkSize: 1, lineEnding: \&quot;\\n\&quot;, useCopyToAsync: False)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests"" method=""GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly"" time=""35.1213315"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests.GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly(maxChunkSize: 1, lineEnding: \&quot;\\n\&quot;, useCopyToAsync: True)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests"" method=""GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly"" time=""10.7895331"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests.GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly(maxChunkSize: 1, lineEnding: \&quot;\\r\\n\&quot;, useCopyToAsync: False)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpProtocolTests"" method=""GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly"" time=""19.5267953"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpClientHandlerTest.GetAsync_ResponseHeadersRead_ReadFromEachIterativelyDoesntDeadlock(remoteServer: (BaseUri: http://corefx-net-http11.azurewebsites.net/, HttpVersion: 1.1))"" type=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpClientHandlerTest"" method=""GetAsync_ResponseHeadersRead_ReadFromEachIterativelyDoesntDeadlock"" time=""23.7963713"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpClientHandlerTest.GetAsync_ResponseHeadersRead_ReadFromEachIterativelyDoesntDeadlock(remoteServer: (BaseUri: https://corefx-net-http11.azurewebsites.net/, HttpVersion: 1.1))"" type=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpClientHandlerTest"" method=""GetAsync_ResponseHeadersRead_ReadFromEachIterativelyDoesntDeadlock"" time=""16.0797817"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpClientHandlerTest.GetAsync_ResponseHeadersRead_ReadFromEachIterativelyDoesntDeadlock(remoteServer: (BaseUri: https://corefx-net-http2.azurewebsites.net/, HttpVersion: 2.0))"" type=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpClientHandlerTest"" method=""GetAsync_ResponseHeadersRead_ReadFromEachIterativelyDoesntDeadlock"" time=""11.2258624"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_AutoRedirect.GetAsync_CredentialIsCredentialCacheUriRedirect_StatusCodeOK(remoteServer: (BaseUri: http://corefx-net-http11.azurewebsites.net/, HttpVersion: 1.1), statusCode: 300)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_AutoRedirect"" method=""GetAsync_CredentialIsCredentialCacheUriRedirect_StatusCodeOK"" time=""23.8443341"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_AutoRedirect.GetAsync_CredentialIsCredentialCacheUriRedirect_StatusCodeOK(remoteServer: (BaseUri: http://corefx-net-http11.azurewebsites.net/, HttpVersion: 1.1), statusCode: 301)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_AutoRedirect"" method=""GetAsync_CredentialIsCredentialCacheUriRedirect_StatusCodeOK"" time=""15.9792189"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_AutoRedirect.GetAsync_CredentialIsCredentialCacheUriRedirect_StatusCodeOK(remoteServer: (BaseUri: http://corefx-net-http11.azurewebsites.net/, HttpVersion: 1.1), statusCode: 303)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_AutoRedirect"" method=""GetAsync_CredentialIsCredentialCacheUriRedirect_StatusCodeOK"" time=""10.4584034"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Http2.PostAsync_CallMethod_UnicodeStringContent(remoteServer: (BaseUri: http://corefx-net-http11.azurewebsites.net/, HttpVersion: 1.1))"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Http2"" method=""PostAsync_CallMethod_UnicodeStringContent"" time=""23.7853672"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Http2.PostAsync_CallMethod_UnicodeStringContent(remoteServer: (BaseUri: https://corefx-net-http11.azurewebsites.net/, HttpVersion: 1.1))"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Http2"" method=""PostAsync_CallMethod_UnicodeStringContent"" time=""16.0752092"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Http2.PostAsync_CallMethod_UnicodeStringContent(remoteServer: (BaseUri: https://corefx-net-http2.azurewebsites.net/, HttpVersion: 2.0))"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Http2"" method=""PostAsync_CallMethod_UnicodeStringContent"" time=""11.2122835"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpProtocolTests_Dribble.GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly(maxChunkSize: 1, lineEnding: \&quot;\\n\&quot;, useCopyToAsync: False)"" type=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpProtocolTests_Dribble"" method=""GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly"" time=""35.3607151"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpProtocolTests_Dribble.GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly(maxChunkSize: 1, lineEnding: \&quot;\\n\&quot;, useCopyToAsync: True)"" type=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpProtocolTests_Dribble"" method=""GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly"" time=""10.7854075"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpProtocolTests_Dribble.GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly(maxChunkSize: 1, lineEnding: \&quot;\\r\\n\&quot;, useCopyToAsync: False)"" type=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpProtocolTests_Dribble"" method=""GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly"" time=""19.5215231"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Decompression_Tests.GetAsync_SetAutomaticDecompression_HeadersRemoved(remoteServer: (BaseUri: http://corefx-net-http11.azurewebsites.net/, HttpVersion: 1.1), uri: http://corefx-net-http11.azurewebsites.net/GZip.ashx)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Decompression_Tests"" method=""GetAsync_SetAutomaticDecompression_HeadersRemoved"" time=""23.0756572"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Decompression_Tests.GetAsync_SetAutomaticDecompression_HeadersRemoved(remoteServer: (BaseUri: http://corefx-net-http11.azurewebsites.net/, HttpVersion: 1.1), uri: http://corefx-net-http11.azurewebsites.net/Deflate.ashx)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Decompression_Tests"" method=""GetAsync_SetAutomaticDecompression_HeadersRemoved"" time=""10.8656218"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Decompression_Tests.GetAsync_SetAutomaticDecompression_HeadersRemoved(remoteServer: (BaseUri: https://corefx-net-http11.azurewebsites.net/, HttpVersion: 1.1), uri: https://corefx-net-http11.azurewebsites.net/Deflate.ashx)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Decompression_Tests"" method=""GetAsync_SetAutomaticDecompression_HeadersRemoved"" time=""10.6907529"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_MaxConnectionsPerServer_Test.SmallConnectionLifetimeWithMaxConnections_PendingRequestUsesDifferentConnection(lifetimeMilliseconds: 0)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_MaxConnectionsPerServer_Test"" method=""SmallConnectionLifetimeWithMaxConnections_PendingRequestUsesDifferentConnection"" time=""14.5614442"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_MaxConnectionsPerServer_Test.GetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections: 1, numRequests: 5, secure: False)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_MaxConnectionsPerServer_Test"" method=""GetAsync_MaxLimited_ConcurrentCallsStillSucceed"" time=""16.4304093"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_ResponseStreamTest.GetStreamAsync_ReadZeroBytes_Success(remoteServer: (BaseUri: https://corefx-net-http11.azurewebsites.net/, HttpVersion: 1.1))"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_ResponseStreamTest"" method=""GetStreamAsync_ReadZeroBytes_Success"" time=""16.060719"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_ResponseStreamTest.GetStreamAsync_ReadZeroBytes_Success(remoteServer: (BaseUri: https://corefx-net-http2.azurewebsites.net/, HttpVersion: 2.0))"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_ResponseStreamTest"" method=""GetStreamAsync_ReadZeroBytes_Success"" time=""11.232438"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test_Http2.PostAsync_Cancel_CancellationTokenPassedToContent(content: [StreamContent { Headers = [...] }], cancellationTokenSource: CancellationTokenSource { IsCancellationRequested = False, Token = System.Threading.CancellationToken })"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test_Http2"" method=""PostAsync_Cancel_CancellationTokenPassedToContent"" time=""17.4982194"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test_Http2.PostAsync_Cancel_CancellationTokenPassedToContent(content: [StreamContent { Headers = [...] }], cancellationTokenSource: CancellationTokenSource { IsCancellationRequested = False, Token = System.Threading.CancellationToken })"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test_Http2"" method=""PostAsync_Cancel_CancellationTokenPassedToContent"" time=""12.792622"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Headers_Http11.SendAsync_GetWithInvalidHostHeader_ThrowsException"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Headers_Http11"" method=""SendAsync_GetWithInvalidHostHeader_ThrowsException"" time=""35.9788529"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Headers_Http11.SendAsync_GetWithValidHostHeader_Success(withPort: False)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Headers_Http11"" method=""SendAsync_GetWithValidHostHeader_Success"" time=""16.0019838"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ServerCertificates_Test.UseCallback_CallbackReturnsFailure_ThrowsException"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ServerCertificates_Test"" method=""UseCallback_CallbackReturnsFailure_ThrowsException"" time=""35.1341052"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ServerCertificates_Test.NoCallback_ValidCertificate_SuccessAndExpectedPropertyBehavior"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ServerCertificates_Test"" method=""NoCallback_ValidCertificate_SuccessAndExpectedPropertyBehavior"" time=""16.0046528"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ResponseDrain_Test.GetAsyncWithMaxConnections_DrainTakesLongerThanTimeout_KillsConnection(mode: ContentLength)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ResponseDrain_Test"" method=""GetAsyncWithMaxConnections_DrainTakesLongerThanTimeout_KillsConnection"" time=""36.0241138"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ResponseDrain_Test.GetAsyncWithMaxConnections_DrainTakesLongerThanTimeout_KillsConnection(mode: SingleChunk)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ResponseDrain_Test"" method=""GetAsyncWithMaxConnections_DrainTakesLongerThanTimeout_KillsConnection"" time=""19.2937569"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ResponseDrain_Test.GetAsyncWithMaxConnections_DrainTakesLongerThanTimeout_KillsConnection(mode: BytePerChunk)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ResponseDrain_Test"" method=""GetAsyncWithMaxConnections_DrainTakesLongerThanTimeout_KillsConnection"" time=""11.258772"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ResponseDrain_Test.GetAsyncLargeRequestWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection(totalSize: 100000, readSize: 1, mode: BytePerChunk)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ResponseDrain_Test"" method=""GetAsyncLargeRequestWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection"" time=""13.181608"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ResponseDrain_Test.GetAsyncLargeRequestWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection(totalSize: 800000, readSize: 1, mode: ContentLength)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ResponseDrain_Test"" method=""GetAsyncLargeRequestWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection"" time=""16.1632336"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ResponseDrain_Test.GetAsyncLargeRequestWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection(totalSize: 800000, readSize: 1, mode: SingleChunk)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ResponseDrain_Test"" method=""GetAsyncLargeRequestWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection"" time=""26.9584792"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ResponseDrain_Test.GetAsyncLargeRequestWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection(totalSize: 1048576, readSize: 1, mode: ContentLength)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ResponseDrain_Test"" method=""GetAsyncLargeRequestWithMaxConnections_DisposeBeforeReadingToEnd_DrainsRequestsAndReusesConnection"" time=""23.0721038"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Asynchrony_Test.ExecutionContext_HttpConnectionLifetimeDoesntKeepContextAlive"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Asynchrony_Test"" method=""ExecutionContext_HttpConnectionLifetimeDoesntKeepContextAlive"" time=""23.8963807"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.HttpClientTest.Send_TimeoutResponseContent_Throws"" type=""System.Net.Http.Functional.Tests.HttpClientTest"" method=""Send_TimeoutResponseContent_Throws"" time=""36.4633647"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.HttpClientTest.Send_CancelledRequestContent_Throws"" type=""System.Net.Http.Functional.Tests.HttpClientTest"" method=""Send_CancelledRequestContent_Throws"" time=""105.6715878"" result=""Fail"">
      <test name=""System.Net.Http.Functional.Tests.HttpClientTest.Send_TimeoutRequestContent_Throws"" type=""System.Net.Http.Functional.Tests.HttpClientTest"" method=""Send_TimeoutRequestContent_Throws"" time=""73.8389487"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test.Expect100Continue_WaitsExpectedPeriodOfTimeBeforeSendingContent"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test"" method=""Expect100Continue_WaitsExpectedPeriodOfTimeBeforeSendingContent"" time=""13.8793637"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_PostScenarioTest.PostNonRewindableContentUsingAuth_PreAuthenticate_Success(remoteServer: (BaseUri: http://corefx-net-http11.azurewebsites.net/, HttpVersion: 1.1))"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_PostScenarioTest"" method=""PostNonRewindableContentUsingAuth_PreAuthenticate_Success"" time=""24.0552561"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_PostScenarioTest.PostNonRewindableContentUsingAuth_PreAuthenticate_Success(remoteServer: (BaseUri: https://corefx-net-http11.azurewebsites.net/, HttpVersion: 1.1))"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_PostScenarioTest"" method=""PostNonRewindableContentUsingAuth_PreAuthenticate_Success"" time=""20.4867086"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_PostScenarioTest.PostNonRewindableContentUsingAuth_PreAuthenticate_Success(remoteServer: (BaseUri: https://corefx-net-http2.azurewebsites.net/, HttpVersion: 2.0))"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_PostScenarioTest"" method=""PostNonRewindableContentUsingAuth_PreAuthenticate_Success"" time=""15.6915136"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SyncHttpHandler_PostScenarioTest.PostRewindableStreamContentMultipleTimes_StreamContentFullySent(remoteServer: (BaseUri: http://corefx-net-http11.azurewebsites.net/, HttpVersion: 1.1))"" type=""System.Net.Http.Functional.Tests.SyncHttpHandler_PostScenarioTest"" method=""PostRewindableStreamContentMultipleTimes_StreamContentFullySent"" time=""24.0119483"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SyncHttpHandler_PostScenarioTest.PostRewindableStreamContentMultipleTimes_StreamContentFullySent(remoteServer: (BaseUri: https://corefx-net-http11.azurewebsites.net/, HttpVersion: 1.1))"" type=""System.Net.Http.Functional.Tests.SyncHttpHandler_PostScenarioTest"" method=""PostRewindableStreamContentMultipleTimes_StreamContentFullySent"" time=""23.3359397"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SyncHttpHandler_PostScenarioTest.PostRewindableStreamContentMultipleTimes_StreamContentFullySent(remoteServer: (BaseUri: https://corefx-net-http2.azurewebsites.net/, HttpVersion: 2.0))"" type=""System.Net.Http.Functional.Tests.SyncHttpHandler_PostScenarioTest"" method=""PostRewindableStreamContentMultipleTimes_StreamContentFullySent"" time=""15.4472061"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpProtocolTests.GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly(maxChunkSize: 1, lineEnding: \&quot;\\n\&quot;, useCopyToAsync: False)"" type=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpProtocolTests"" method=""GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly"" time=""12.2817692"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpProtocolTests.GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly(maxChunkSize: 1, lineEnding: \&quot;\\r\\n\&quot;, useCopyToAsync: False)"" type=""System.Net.Http.Functional.Tests.SyncHttpHandler_HttpProtocolTests"" method=""GetAsync_Chunked_VaryingSizeChunks_ReceivedCorrectly"" time=""12.9498969"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.PostAsyncDuplex_DisposeResponseBodyBeforeEnd_ResetsStreamAndThrowsOnRequestStreamWriteAndResponseStreamRead"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2"" method=""PostAsyncDuplex_DisposeResponseBodyBeforeEnd_ResetsStreamAndThrowsOnRequestStreamWriteAndResponseStreamRead"" time=""34.6259292"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.SendAsync_ConcurentSendReceive_Fail"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2"" method=""SendAsync_ConcurentSendReceive_Fail"" time=""20.0900152"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.PostAsyncDuplex_DisposeResponseBodyAfterEndReceivedButBeforeConsumed_ResetsStreamAndThrowsOnRequestStreamWriteAndResponseStreamRead"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2"" method=""PostAsyncDuplex_DisposeResponseBodyAfterEndReceivedButBeforeConsumed_ResetsStreamAndThrowsOnRequestStreamWriteAndResponseStreamRead"" time=""10.1601642"" result=""Pass"">
      <test name=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ClientCertificates_Test.Manual_CertificateSentMatchesCertificateReceived_Success(numberOfRequests: 6, reuseClient: False)"" type=""System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ClientCertificates_Test"" method=""Manual_CertificateSentMatchesCertificateReceived_Success"" time=""38.8830747"" result=""Pass"">

```

</details>"
"I discovered this while writing tests for the browser. Now I am ashamed that I did it wrong in my previous PR 😅 On the bright side it is a validation of the fact that we should have tests running in the browser as well :)

Also [my PR to `jschardet`](https://github.com/aadsm/jschardet/pull/58) got merged so we can soon get rid of types workaround."
I am actually not crazy about putting the key in the word format. In similar places we show the verbatim key (like enums) and I prefer this. The wordifying doesn't work well in some cases and I'd actually like to replace it with more customizable setting labels.
"this is wrong, I moved it. oops."
This can probably be toast. I'm pretty sure we put in a dialog box that pops up and stops you from running on the wrong architecture in #1648.
Spec is wrong
I merged the wrong PR.........
"I already have issues with this in the current build. Seems like when text is trimmed off the front of the line, navigating does not respect that. Example:

- Search ""stuff"" in vscode repo
- Look at the `emojis.json` result
- Navigate any any point on that line

I go to the wrong column which seems based on the offset of my cursor after the text has been removed, not before."
@github If I'm not wrong the changes are just _code style_ fixes from VS.
"Thanks a lot @github and @github 🎉 

https://msdn.microsoft.com/query/dev16.query?appId=Dev16IDEF1&l=EN-US&k=k(CS1001);k(DevLang-csharp)&rd=true
https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&l=EN-US&k=k(CS1001);k(DevLang-csharp)&rd=true

At the time of writing this, the first link works, but the second doesn't. Any idea what I'm doing wrong?"
"Thanks very much Martin.

And thank you for finding those issues. My apologies.

I'm embarrassed by the first one. As you say, the problem is in `isBlocked` using the old positions.
Now that the code is in a branch in the Microsoft repository I don't know how I should submit a correction. I think the following would be a minimal change to fix that bug. In foldingRange.ts replace:
```
    if (!isBlocked(hiddenRange.startLineNumber, hiddenRange.endLineNumber)) {
        let decRange = this._textModel.getDecorationRange(this._editorDecorationIds[i]);
        if (decRange
          && decRange.startColumn === Math.max(decRange.endColumn - 1, 1)

```
by
```
    let decRange = this._textModel.getDecorationRange(this._editorDecorationIds[i]);
    if (decRange && !isBlocked(decRange.startLineNumber, decRange.startLineNumber + hiddenRange.endLineNumber - hiddenRange.startLineNumber)) {
        if (decRange.startColumn === Math.max(decRange.endColumn - 1, 1)

```
The second problem is tougher. Typing into a collapsed range seems wrong and I could argue either way for whether the new text should remain visible or not.  Maybe a third choice, should the range automatically unfold when a user does that?  

It gets nastier. Suppose that the first line of a folded region, the one which remains visible, is something like `if (xxx) { // do something`. If the user hits enter in front of the `{` the resulting hidden region should be different than if they use enter after it. And the same is true of the terminating line if it looks like `    } // the end`

I played around with making the decoration region include a larger block of the text and things are still problematic that way. The best overall result seems to come from starting the decoration at the last character + 1 of the region and ending it at the first character of the line following the region. But it isn't perfect, especially when considering the cases mentioned above. And I'm not sure about possible consequences to other parts of the editor from having large decoration ranges hanging around.

I want to mull this over a bit. Maybe there's a simpler way.

By the way, do you recall the reason for the ""isBlocked"" test? I.e. under what conditions there can end up being an active selection point inside a hidden range when ""update"" is called?

"
"@github: please correct me if I'm wrong, but I thought that prior discussion was that it was pointless to do `.ConfigureAwait (continueOnCapturedContext: false)` in a method after having already called it. Here, `.ConfigureAwait()` is called 7 and 11 lines above, so is this invocation necessary?

I'm still not clear on all these async rules & conventions..."
"Perhaps I'm doing something wrong, but this isn't working for me with this task and that setting enabled. @github 
```
{
            ""type"": ""shell"",
            ""label"": ""test-nvm"",
            ""command"": ""node --version""
}
```
I'm using `vscode` as the project/repo and made a `.nvmrc` with the node version


https://user-images.githubusercontent.com/29464607/172906045-87934820-b637-420e-8f1c-7b6602f9c6ba.mov



"
"length != size. **Length** of the array is 10 elements, but its **size** will be times the pointer size. I don't want to mimic STL, especially where it's wrong."
"@github: question about the semantics: if the [`build remap-assembly-ref.csproj` step](https://github.com/xamarin/xamarin-android/blob/a98e4f5e47a59c6299456f1da94806a67a07d4ff/build-tools/automation/azure-pipelines.yaml#L650) fails -- which lacks `continueOnError` or `condition` -- will `yaml-templates/upload-results.yaml` still be executed?  'cause if `build remap-assembly-ref.csproj` fails, presumably we'd need the log files in order to ascertain what went wrong..."
"In some cases it helps sharing strings (like the AttributeCollection case). For these strings, I found that sometimes the method uses the word `value`, sometimes `instance`, and sometimes, `component`. So I just started copying the strings because I didn't want to reference the wrong word."
I think this is the wrong way around— we’re telling TermControl that an OSC 9;9 occurred using its internal API so that it calls TermControl’s working directory handler to trigger the working directory event. Can TerminalApp just handle this at the top layer? :)
"Oops, that's wrong, it's supposed be a 32-bit/64-bit ifdef, not Classic/Unified.
"
Thanks. It was the wrong test
"> Changing
> 
> https://github.com/microsoft/terminal/blob/b3b648496e92d14e88bbede1b2c0b63e9d56b599/tools/OpenConsole.psm1#L399
> to `[IO.File]::WriteAllLines(""$root/$file"", $content)` seemed to fix that, though I assumed you wouldn't want that change in the same PR.

I don't know the first thing about PowerShell, so I wouldn't be hugely surprised to find out that there was something wrong with my patch, but the above change causes the script to fail for me.  I'm running it via the `runxamlformat.cmd` batch file if that makes any difference."
"We normally embed a known serialization of the class and compare the generated serialization with it. This code doesn't correctly validate the generated XML as DCS cares about ordering and this validation code will pass even if things are in the wrong order. If DCS expects the order A,B,C and the XML has elements ordered as B,A,C, the value of A won't get set. When it sees B, it goes through the list of potential consuming fields and matches for B. When it sees A, it starts at B in the list and doesn't find a consuming data member. This has a reasonable chance of currently being broken as DCS serializes alphabetically when using DataMember. You probably need to add the Order property on the attributes."
"We can end up starting with the wrong value, but it doesn't really concern me for several reasons:
1. The trigger for starting with the wrong state involves opening a document, and no matter what option is supposed to be used we know the open document is going to be analyzed.
2. The fallback default is the default state for the IDE as a whole. This is a rarely-changed option, so for most users we start in the correct state no matter what.
3. For the majority of cases where the current solution differs from the default state, the solution state includes _more_ analysis content than the default, so even if the value starts out wrong the IDE will not reach a transient state on the way to steady-state where more diagnostics are shown than desired."
">null [](http://example.com/codeflow?start=23&length=4)

Followup: it'd be useful to log to output window when we encounter errors. So that if something goes wrong the customer can inspect the output and see why it didn't work."
Was commenting on the wrong method. Let me try this one again.
"You are correct, is a #ifdef but the code would compile since we are just defining the new delegate to be called AVAudioSourceNodeRenderHandler2 now, but not in the future, so we have:

* AVAudioSourceNodeRenderHandler2 - Now 
* AVAudioSourceNodeRenderHandler - Once XAMCORE_4 is defined.

The description of the compat files is correct, but in this case we are not create a method for compatibility reasons, but because it was wrong, so I personally would leave the handler definition were it is, with the fixed sample code I gave. In this case, code locality is important, we keep the delegate signature with the API definition.

tldr; We put inside a #ifdef XAMCORE_4 all those API fixes that we would like to do, but we can since it will break the API. One time, in the future, we will be allow to do it, and we will have nicer APIs. I've heard we had several, but I've never seen one, but XAMCORE_2 etc.. exist."
"It crashes only on local devices if there is a bonjour service present. The issue is that there is an assert in the delegate, in simulator, there are no issues, on a device you might get an assert failing and will raise an exception in the delegate that crashes the app. Could be that you do have bonjour services and the assumptions are wrong.
"
">var model = _containingMemberOrLambda.DeclaringCompilation.GetSemanticModel(node.SyntaxTree); [](http://example.com/codeflow?start=20&length=93)

Changes like that in this component feel wrong. In general, I am surprised that we need to make any changes outside of semantic model and IOperation factory. "
Is this comment now wrong?
"oh yea, I meant is it guaranteed to always be _something_ or do we have cases where the returned value is wrong? Not blocking on this PR, just curious "
"Yes, it's partially wrong, I think. I'm not sure if this is an impossible code path or not, because local functions cannot be generic at the moment. So `symbol` can't ever be a `SubstitutedMethodSymbol`. I think this is code left over from an initial attempt at generic local functions, but I'm not sure - I'll check tomorrow when I'm back at my computer (and delete it if it's unused). In any case, this area will get rewritten once generic local functions are fully allowed.
"
"Removed that part. Find out in FileCleanupTestBase path was wrong for osx, updated that."
"Definitely not a dumb question, and I'm not even sure I understand it myself. :-)

Here's what I understand: `GenTreeCall` has three different fields that store nodes related to args: `gtCallThisArg`, `gtCallArgs` and `gtCallLateArgs`. The two former fields are what I call ""early args"" here while the latter is the ""late args"".
Before morph, the latter is not used, the early args just store the operand nodes for the call. Life is good.
`fgMorphArgs`, as part of morph, is responsible for setting calls up for the optimization/backend to handle, and among other things handles ABI details of how to pass the argument in either registers or on the stack. 

This comes with a constraint: we cannot start placing values in registers (and for non-x86, on the stack) before we have evaluated the arguments, if the arguments contain calls. To handle these cases morph will replace the early arguments with evaluation nodes that evaluate the argument into a temp, and then the temp will be put in the late args. In some cases no evaluation is necessary (e.g. for a simple constant) and the operand will end up either in the early or late args, depending on whether it is going on the stack or in registers.

So for a call like `GetThis().M(Arg1(), 10, Arg2())` we end up transforming something like
```scala
GT_CALL
  gtCallThisArg: GT_CALL GetThis
  gtCallArgs[0]: GT_CALL Arg1
  gtCallArgs[1]: GT_CNS_INT 10
  gtCallArgs[2]: GT_CALL Arg2
```
into
```scala
GT_CALL
  gtCallThisArg: GT_ASG tmp0 (GT_CALL GetThis)
  gtCallArgs[0]: GT_ASG tmp1 (GT_CALL Arg1)
  gtCallArgs[1]: GT_ARGPLACE
  gtCallArgs[2]: GT_ASG tmp2 (GT_CALL Arg2)
  gtCallLateArgs[0]: GT_LCL_VAR tmp0
  gtCallLateArgs[1]: GT_LCL_VAR tmp1
  gtCallLateArgs[2]: GT_CNS_INT 10
  gtCallLateArgs[3]: GT_LCL_VAR tmp2
```

For stack arguments we might not need any entry in `gtCallLateArgs`, so there isn't a 1-1 correspondence between args and late args.

The code in lower is then responsible for creating the nodes to actually place these args into the stack/registers. Morph has pretty much done all the work at this point so this is just creating `GT_PUTARG_REG` and `GT_PUTARG_STK` nodes and inserting them after the corresponding args in the early/late args lists. These particular nodes is what this comment is talking about: it moves them further down than they would normally be, since it needs to insert a call very late (after evaluation of the call target that comes after the late args nodes)."
"> It's not a regression as the same inputs give you the same outputs but as a user this now reads wrong to me and I think an ArgumentException would be better suited now.

There are many places where if the code were being written from scratch we would choose to use a different exception type than is currently being used.  But changing from a more derived type to one of its base types is a breaking change, and so we need a good reason to do so."
This seems to be going in the wrong direction - a declaration shouldn't block an assignment to that same property
The removal of this error is still wrong.
Update: this _is_ currently wrong (that’s why tests are failing)—although I’m pretty sure some iteration of this logic worked yesterday—but it’s quite difficult to discern exactly what kind of symbol appears in the `symbols` array here; it seems like sometimes it’s the `localSymbol` and sometimes it’s the `exportSymbol`. Still investigating and revising this section.
"> This is not a connection aborted by the peer but ourselves. So INVALID_STATE here is expected,

Because the connection is aborted by us, then I as a user would expect all pending operations to throw `QuicOperationAbortedException`, in line with https://github.com/dotnet/runtime/issues/55619 (as currently outlined).

> user is doing something wrong.

If by the user you mean the test code above, then I disagree. The connection is accessed from a single thread, and opening the stream was attempted before trying to close the connection. I can imagine that in a real use case, there would be more logic between the call to OpenStreamAsync and CloseAsync (behind some condition). There is no data race evident in the user code. If we start throwing `QuicException` with `INVALID_STATE`, we start leaking implementation details.

> I'm rather surprised we get sometimes ABORTED.

Side note: this can happen while we are waiting for the stream limit to increase (i.e. PEER_ACCEPTED event) and peer closes the connection on us."
"So i don't want unnecessary _work_ to be done in the registration method.  i.e. don't do things that are _expensive_ and not needed until the fix is actually applied.

What can be in the registration method is:
1. Any work necessary to determine which code fixes to provide.  For example, if multiple fixes may be given, but those fixes are conditioned on tests you need to perform.  Ideally this work is cheap.
2. Extracting out appropriate data _cheaply_ from teh context menu to pass to the fixes.

The reason i don't like passing the context around is that there's a good chance the wrong cancellation token will be used.  (even i've made that mistake).

So the ideal code here for me would be:

``` c#
c => await AddBracesAsync(context.Whatever, context.Whatever, ..., c);
```

Then AddBracesAsync only has what it needs, and only sees one potential cancellation token.  
"
"I don't think this is the appropriate fix. I think the right fix is to make sure that nobody is actually passing in `undefined`, so find the type assertions that are wrong."
"So the problem is as follows:
1. Our per language options only allow us to set a default across all languages.  
2. We don't want the default for this option to be either true or false.  Each of those is wrong for one of our two primary languages.
3. So this is actually a tri-state.  'null' means 'language default'.  'true' and 'false' means ""the user chose these explicit values.

We use this pattern for all options that differ in their defaults between C# and VB.  It allows us to have a 'default' that still gets the right legacy/historical behavior for these two languages.
"
Btw @github the previous version that I pasted above was wrong (missing a number). I just updated my comment.
"@github wow, that's an interesting copy/paste bug. Fortunately, the only use of this function is to swap with next, so the behavior is … correct in the product, but a function that wrong should be fixed. Thank you for your review."
"And if you really wanted to get crazy:
(This is all completely untested, so I don't know if I screwed up the bit twiddling.)

```cs
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Kind IffyKindInlined3()
    {   
        long data = (long)_data;
        if ((data & unchecked((long)FlagsMask)) == 0) { return Kind.Unspecified; }
        
        // At this point, we know the top 2 bits of 'data' are 0x01, 0x10, or 0x11.
        // The ""UTC"" pattern sets the top two bits to 0x01. This allows us to get
        // away with a simple ""is positive?"" check when checking for UTC.
        
        if (data > 0) { return Kind.Utc; }
        else { return Kind.Local; }        
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Kind IffyKindInlined4()
    {   
        long data = (long)_data;
        if (data > 0)
        {
            // Top 2 bits of data are 0x00 or 0x01
            data += data;
            if (data < 0)
            {
                return Kind.Utc; // Top 2 bits were 0x01
            } else {
                return Kind.Unspecified; // Top 2 bits were 0x00
            }
        }
        return Kind.Local; // Top 2 bits are 0x10 or 0x11
    }
```

```asm
Date.KindTest3(Date)
    L0000: mov rax, 0xc000000000000000
    L000a: test rax, rcx
    L000d: je short L001a
    L000f: test rcx, rcx
    L0012: jle short L001a
    L0014: mov eax, 7
    L0019: ret
    L001a: mov eax, 0x5a
    L001f: ret

Date.KindTest4(Date)
    L0000: test rcx, rcx
    L0003: jle short L0013
    L0005: add rcx, rcx
    L0008: test rcx, rcx   ; <-- future JIT should elide, see https://github.com/dotnet/runtime/issues/32389
    L000b: jge short L0013
    L000d: mov eax, 7
    L0012: ret
    L0013: mov eax, 0x5a
    L0018: ret
```"
"> There is nothing wrong with writing tests the old way (customers and ourselves have been doing it this way for years)

This is most certainly true, but doing this requires a lot of knowledge of how roslyn works to set up correctly. The hope is that for common scenarios this is abstracted away."
"> My understanding is that this still doesn't address the underlying concerns. From the linked issue: [...]

Outside of the message you answered being a year and a half old, the problem isn't ""should the design be X"" or ""should the design be Y"", but rather that the TS team appears unwilling to even engage to find a way forward.

Of course if standardizing the JSON format was the only way to get this merged it'd already have been done - but the last message from them was from October 2020, was based on incorrect information, was never publicly reevaluated once corrected, and didn't include any actual action item (such as ""we like the idea, we'll merge it if you rework it so that X / Y / Z criterias are met"").

In fact, it didn't even explicitly request a change in this PR to make it JSON-based, rather suggesting that this use case should be fulfilled via a plugin system that evidently won't see the light of day anytime soon.

From my perspective, the only thing to do that would actually help bringing PnP support to TS  would be for teams *within Microsoft* to actually use it and advocate for it, as it's rather clear it won't be a priority until then. From the outside unfortunately, there isn't much to do but to wait and periodically rebase this PR. Of course I'd love to be proven wrong! I really like TS and the work its maintainers have been doing, outside of this difficult contributing experience.

---

*(Note that I've been considering standardizing the JSON format in the next major, Yarn 4, precisely because Esbuild's maintainer expressed some interest into supporting it if we did so. But as far as TS is concerned this is largely irrelevant, because the real issue is the lack of feedback loop. For all I know they may even have silenced this thread.)*"
"I could be wrong, but I don’t _think_ that will be the case. `exportStar.declarations` should be filled by the binder in source order, and then you’d try to resolve the module (`resolveExternalModuleName`) of each one in order... the order of checking might determine whether those resolutions have already happened before, but I don’t see how that would affect the results you see when checking declarations in source order."
"I've seen `is null!` usages but it's just wrong and misleading. I suppose we need compat council sign off on this. 
Where should we document the breaking change, post VS2019? And what version we're targeting for the fix?"
"> might be good to include a link to the bin logs in a drive somewhere on the issue itself, so we don't have to dig back through teams to find them

Think we really need these. It's the only way to investigate these types of issues. Lacking that someone will be sending a PR in a week to re-enable this and saying ""nothing wrong on my machine"". "
"Tagging subscribers to this area: @github/ncl
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

With TrimRootCertificate=false, the old logic would incorrectly increase count when chain.Build() return partial chain. That would later cause ArgumentOutOfRangeException when iterating through the chain certificate collection.

Further more, the TrimRootCertificate is swapped. If we want to trim root we need to subtract 2 (e.g. root itself and leaf cert) This will cause wrong number of certificates sent on the wire on Unix. (on Windows all the logic is bolted to OS) 

To fix this, I refactor the code a little bit. There is no need to invoke the partial chain logic at all if we are going to give whole chain to OS (Windows)  

I added variant to SslStream_UntrustedCaWithCustomCallback_OK and verified it will expose the ArgumentOutOfRangeException without the fix.

fixes  #46654


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>wfurt</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>wfurt</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Net.Security`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>6.0.0</td>
  </tr>
</table>
</details>"
"> I have triggered another run with QuickJitForLoops flag - https://dev.azure.com/dnceng/internal/_build/results?buildId=998618&view=results

Yes, so nothing changes with QuickJitForLoops, so I am guessing there is something else wrong.

```

Grouped Flag Appearances (20315 contexts)

bits                count  percent  parsed
0000000048820e00       13    0.06%  TARGET_P4 USE_FCOMI USE_CMOV FEATURE_SIMD SKIP_VERIFICATION IL_STUB BBOPT
0000000248820e00      123    0.61%  TARGET_P4 USE_FCOMI USE_CMOV FEATURE_SIMD SKIP_VERIFICATION IL_STUB BBOPT PUBLISH_SECRET_PARAM
0000000040820e10    19976   98.33%  DEBUG_INFO TARGET_P4 USE_FCOMI USE_CMOV FEATURE_SIMD SKIP_VERIFICATION BBOPT
00000000c0820e10      200    0.98%  DEBUG_INFO TARGET_P4 USE_FCOMI USE_CMOV FEATURE_SIMD SKIP_VERIFICATION BBOPT FRAMED
0000000080820e30        3    0.01%  DEBUG_INFO MIN_OPT TARGET_P4 USE_FCOMI USE_CMOV FEATURE_SIMD SKIP_VERIFICATION FRAMED

Individual Flag Appearances

   20179   99.33%  DEBUG_INFO
       3    0.01%  MIN_OPT
   20315  100.00%  TARGET_P4
   20315  100.00%  USE_FCOMI
   20315  100.00%  USE_CMOV
   20315  100.00%  FEATURE_SIMD
   20315  100.00%  SKIP_VERIFICATION
     136    0.67%  IL_STUB
   20312   99.99%  BBOPT
     203    1.00%  FRAMED
     123    0.61%  PUBLISH_SECRET_PARAM
```"
"So I'm trying to run some benchmarks on this and am having difficulty.

I setup two separate copies of this repo on my machine, one for the main branch and one for my branch. I was able to build each of these eventually after several errors but a `git clean -dfx` helped. Then I followed the guide from the performance repo at https://github.com/dotnet/performance/blob/master/src/benchmarks/micro/README.md#private-runtime-builds and got a bunch of errors saying dotnet 6.0 is not supported by the SDK. I then added the path to main branch repo's dotnet.exe to my environment variables and was able to get the benchmarks to run but they failed with my branch's changes. Am I doing things wrong?"
"> Modern kernels are really good at recognizing file access patterns, we don't get anything from this hint.

There's 0% benefit on any Windows system with any file system?  I question whether that's actually the case.  Should we simply change the implementation to only specify this on Windows, since there it's (I believe, please correct me if I'm wrong) free whereas we need to make an additional syscall on Unix and thus it really needs to be worth its weight?"
"OK right, now I see where my comment was on the wrong track. I thought the object here would persist across the lifetime of the circuit (as the circuit host does). Now I realise this is the *hub* and that's one instance per reconnection. So I agree it's correct to tear down all this stuff on disconnect.

> We do re-attach

Ah yes. I was looking at the old code in my local copy and saw it didn't reattach during `ConnectCircuit`. I see now that your PR changes that, so we're OK.

> We're nulling out to CircuitHost to separate the host from the SignalR connection. I guess it doesn't super matter since the connection is now gone. Do you see an angle where this is a problem?

This seems fine now I understand which object we're talking about."
"I created this list based on what I found in the ref pack. This list is very similar to the list at https://github.com/aspnet/AspNetCore/blob/f676c249d25eb438ffc282edb551d86eea1d9709/eng/SharedFramework.External.props#L10-L56 but there are some additional assemblies in the ref pack.  For example Microsoft.Extensions.Logging.AzureAppServices which is used in https://github.com/aspnet/AspNetCore/blob/f676c249d25eb438ffc282edb551d86eea1d9709/src/Azure/AzureAppServicesIntegration/src/Microsoft.AspNetCore.AzureAppServicesIntegration.csproj#L15. 

However, curating this list here does seem unmaintainable and wrong so I'm considering using ExternalAspNetCoreAppReference instead. Especially due to the fact that most of the ""missing"" references in that item group are only used by samples in this repo which will bypass this logic anyway."
"@github Is this the benchmark you've expected?

I think I've done something wrong! I expected to see better result for pipeline. I don't know if it's because of the `MemoryStream` or the way I'm creating `PipeWriter`.


| Method | FileSize |         Mean |        Error |       StdDev |      Op/s |    Gen 0 |    Gen 1 |    Gen 2 |    Allocated |
|------- |--------- |-------------:|-------------:|-------------:|----------:|---------:|---------:|---------:|-------------:|
|   Pipe |      512 |     334.5 us |      1.98 us |      1.76 us | 2,989.614 |   0.4883 |        - |        - |     21.82 KB |
| Stream |      512 |     330.2 us |      2.04 us |      1.81 us | 3,028.014 |   0.4883 |        - |        - |     17.59 KB |
|   Pipe |     1024 |     335.9 us |      4.53 us |      4.65 us | 2,976.832 |   0.4883 |        - |        - |     22.33 KB |
| Stream |     1024 |     330.7 us |      1.77 us |      1.65 us | 3,024.013 |   0.4883 |        - |        - |      18.1 KB |
|   Pipe |     2048 |     339.3 us |      2.65 us |      2.35 us | 2,947.565 |   0.4883 |        - |        - |     23.33 KB |
| Stream |     2048 |     340.7 us |      6.75 us |      8.54 us | 2,934.737 |   0.4883 |        - |        - |      19.1 KB |
|   Pipe |     4096 |     338.5 us |      2.50 us |      2.34 us | 2,954.512 |   0.9766 |        - |        - |     25.33 KB |
| Stream |     4096 |     333.6 us |      2.68 us |      2.38 us | 2,997.450 |   0.4883 |        - |        - |      21.1 KB |
|   Pipe |     8192 |     352.4 us |      6.92 us |      8.50 us | 2,837.805 |   0.9766 |        - |        - |     33.35 KB |
| Stream |     8192 |     337.5 us |      3.15 us |      2.95 us | 2,963.051 |   0.9766 |        - |        - |     29.13 KB |
|   Pipe |    16384 |     346.7 us |      2.02 us |      1.79 us | 2,884.137 |   1.4648 |        - |        - |     49.38 KB |
| Stream |    16384 |     349.6 us |      6.27 us |      7.23 us | 2,860.689 |   1.4648 |        - |        - |     45.15 KB |
|   Pipe |    32768 |     431.1 us |      4.59 us |      4.30 us | 2,319.587 |   2.9297 |        - |        - |     81.54 KB |
| Stream |    32768 |     424.6 us |      3.77 us |      3.53 us | 2,354.890 |   2.4414 |        - |        - |     77.31 KB |
|   Pipe |    65536 |     595.9 us |      6.74 us |      5.63 us | 1,678.087 |   4.8828 |        - |        - |    145.84 KB |
| Stream |    65536 |     580.5 us |      3.91 us |      3.47 us | 1,722.751 |   4.8828 |        - |        - |    141.62 KB |
|   Pipe |   131072 |   1,175.6 us |     21.97 us |     20.55 us |   850.614 |  11.7188 |   7.8125 |   7.8125 |    274.49 KB |
| Stream |   131072 |   1,140.3 us |     18.33 us |     17.14 us |   876.942 |  11.7188 |   7.8125 |   7.8125 |    270.25 KB |
|   Pipe |   262144 |   2,244.1 us |     42.86 us |     40.09 us |   445.613 |  23.4375 |  19.5313 |  19.5313 |    531.72 KB |
| Stream |   262144 |   2,130.0 us |     31.98 us |     29.91 us |   469.484 |  23.4375 |  19.5313 |  19.5313 |     527.5 KB |
|   Pipe |   524288 |   4,404.4 us |     86.47 us |    102.94 us |   227.044 |  46.8750 |  46.8750 |  46.8750 |   1046.21 KB |
| Stream |   524288 |   4,166.9 us |     70.05 us |     62.09 us |   239.984 |  46.8750 |  46.8750 |  46.8750 |   1041.92 KB |
|   Pipe |  1048576 |   8,786.0 us |    171.90 us |    176.52 us |   113.817 |  78.1250 |  78.1250 |  78.1250 |   2074.73 KB |
| Stream |  1048576 |   8,268.6 us |    156.81 us |    167.79 us |   120.939 |  78.1250 |  78.1250 |  78.1250 |   2070.62 KB |
|   Pipe |  2097152 |  17,526.6 us |    202.30 us |    157.94 us |    57.056 | 125.0000 | 125.0000 | 125.0000 |   4131.87 KB |
| Stream |  2097152 |  16,579.7 us |    325.08 us |    361.33 us |    60.315 | 156.2500 | 156.2500 | 156.2500 |    4128.1 KB |
|   Pipe |  4194304 |  36,566.0 us |    726.26 us |    969.54 us |    27.348 | 214.2857 | 214.2857 | 214.2857 |   8245.98 KB |
| Stream |  4194304 |  33,833.3 us |    381.19 us |    356.56 us |    29.557 | 200.0000 | 200.0000 | 200.0000 |    8242.2 KB |
|   Pipe |  8388608 |  72,931.2 us |  1,025.62 us |    959.37 us |    13.712 | 285.7143 | 285.7143 | 285.7143 |  16473.51 KB |
| Stream |  8388608 |  68,822.0 us |    838.08 us |    783.94 us |    14.530 | 250.0000 | 250.0000 | 250.0000 |  16470.18 KB |
|   Pipe | 16777216 | 148,980.0 us |  2,944.87 us |  3,273.22 us |     6.712 | 250.0000 | 250.0000 | 250.0000 |  32929.47 KB |
| Stream | 16777216 | 137,529.4 us |  2,183.99 us |  2,042.90 us |     7.271 | 250.0000 | 250.0000 | 250.0000 |  32925.43 KB |
|   Pipe | 33554432 | 290,936.3 us |  2,184.31 us |  2,043.20 us |     3.437 | 500.0000 | 500.0000 | 500.0000 |   65842.2 KB |
| Stream | 33554432 | 274,720.0 us |  1,797.73 us |  1,501.19 us |     3.640 |        - |        - |        - |  65837.89 KB |
|   Pipe | 67108864 | 592,565.0 us | 11,700.62 us | 15,214.11 us |     1.688 |        - |        - |        - | 131665.52 KB |
| Stream | 67108864 | 549,978.7 us |  4,076.52 us |  3,813.18 us |     1.818 |        - |        - |        - | 131661.42 KB |"
Why isn't this an error. Are there actually cases of this being valid? We could add an option to opt out of the error but by default I feel this is wrong enough to be an error.
Wrong namespace?
~~This seems wrong?~~ Nevermind if I understand it properly now
"No need to do this, `Debug.Assert()` at best if you really want it, but if you get here, something is terribly wrong in your app."
Because the analyzer sucks.
"Then I need to pass the _lazyEmbeddedAttribute in two places now. And I already done a mistake of passing a wrong _lazy . I think it is harder to get wrong when it is a separate method

---
In reply to: [118792352](https://github.com/dotnet/roslyn/pull/19795#discussion_r118792352) [](ancestors = 118792352)"
"I don't think this is ok to merge. This is still a wrong package. You should change it into `""System.Console"": ""4.0.0-beta-23409""`
23409 is the current stable package for beta 8.
23427 has not been listed in NuGet Gallery.

Fixed in #1056 
"
"> FWIW - not sure this needs QueryStringDelete, is there a case where append and delete would both be false or true?
> 
> Line 85 - If (QueryStringDelete`)
> 
> Could be just if (!QueryStringAppend)

I haven't looked at IIS's behavior, so I could be wrong here. But it seems to me by looking at the existing buggy code that QueryStringAppend was meant apply to the pattern and QueryStringDelete was meant to apply to the request query string.


Configuration | Behavior
-- | --
Append = false; Delete = true | No query string ever. Works today.
Append = false; Delete = false | Only request query string. Works today.
Append = true; Delete = false | Merge query string. Works today.
Append = true; Delete = true | Only pattern query string. Still broken.

That said. If you wanted to strip the query string from the pattern, you could just not include a query string in the pattern. It would be a lot simpler if QueryStringAppend controlled whether or not to keep the request query string and have the pattern query string always appended if present. I'm not sure if this is compatible with IIS's behavior though.


"
"The old comment is wrong. We do not drop ref kinds when creating temps (maybe we did long time ago...).
 Also refKind of the temp loses `out` vs. `ref` distinction possibly resulting in incorrect ref kind set here."
indentation wrong.
"In explaining this, I realized two things: (1) the tests don't really verify the highlighted parameters, and (2) the highlighted parameters are probably wrong for items other than the recommended one when named arguments are involved and the parameter names are in different orders in different overloads.

This highlight behavior is probably no worse than our shipped behavior, and it should be better for common cases. But it's probably worth taking more time to do this right. I'll move this PR out to 16.1 preview1. #Resolved"
dumb question.  should we only be returning true if missingparams/missingmembers have at least one element in them?
"@github for performance reasons I think we need to add some buffer logic when processing the events. doing a backup on every keystroke is crazy. you should really measure how many model change events you get while typing to get a feeling on it.
"
What's wrong with the formatting?
"@github i can be wrong, but i guess that your approach won't work properly.
Let's imagine, that we want to have ListView with such backColor
```csharp
ListView.BackgroundColor = Color.Black.MultiplyAlpha(.5);
```
But also we want to have transparent cells (maybe, we have image is under the listView or something else)

But your approach doesn't provide such possibility, because backColor of Cell would be **Color.Black.MultiplyAlpha(.5)** as well.
So, in total we will see 0.5 black over 0.5 black (= 0.75 black)

We are dropping opportunity to set real transparent color for cell."
"Oh, you are right. By the way, it could lead to a bug because default value is nil if I am not wrong"
"also did a quadruple take on this to make sure i wasn't going crazy 👀 "
"Fair enough, will remove flippant comments. Generally speaking there is nothing wrong with how I wrote the test because it works fine it just relys on output labels which are much easier to write tests around. This is compared to say how a standard test would work in an app that cant tailor itself to making testing easy.

In general most tests should probably be written this way.
"
"""Inferred"" may have been the wrong word choice. This should be the default for language clients"
"I was going to do that, but it felt like a bit of a trap. If we remove the tags then all of the offsets are wrong for all but the first tag, so I though ""You can use `StrippedSource` if you know what your doing"" was better than ""if you pass in `removeTags: true` you might end up surprised"".

I'm not too fussed if you think thats not a problem though"
"Yes, see the commit description. It is necessary as the IL.SDK import sequence was wrong and causes problems."
"The tests work on my AMD CPU. The CI servers are clearly running on Intel CPUs. heh. 😎
In all seriousness however it a) sucks because I can't debug it and b) I'm surprised that TAEF doesn't compare floats using a sensible epsilon."
"What would happen if we didn't suppress this - how much would it spread (propagating the attribute to affected public APIs).
The functionality will not work in single-file - so silencing it until it gets fixed is wrong. The warnings are there for this specific reason."
"It seems weird using `.UseCredential` without credentials - please double check docs

Still the current code is hits `return` without calling the `completionHandler` so that's more than likely wrong...

Could it be possible the return statement should be moved into the `if (sessionHandler.Credentials != null) {` condition ?

That would solve both inconsistency, since `completionHandler` would be called (it's not now) and asked to `.PerformDefaultHandling` with the challenge proposed credentials."
"I don't believe this assert gives a lot of value, and it is done in very test. Should be -1  already thanks to the setup. If not, setup or tear down are wrong."
"wrong message!

That's why keeping the original is important. It's much easier to spot a mistake where a message would be incorrectly updated."
"How come the ""wrong"" order doesn't matter here? Or has this been just missed?"
"> Are we sure that the above removed instructions are not trying to keep the hardware's call-ret stack balanced?

Maybe I do not clearly understand the question. I am sure that the above removed instructions keep the hardware's call-ret info on stack balanced. Removed instructions just calculate wrong address.




> If no IP-relative computation is needed I think the entire function can just be
> 
> ```assembly
> mov eax, edx
> mov edx, ecx
> jmp dword ptr [C_FUNC(JIT_WriteBarrierEAX_Loc)]
> ```

Unfortunately this code jumps to `JIT_WriteBarrierEAX_Loc`, not to the address stored in `JIT_WriteBarrierEAX_Loc`:
```gdb
=> 0xf7606c71 <JIT_WriteBarrier_Callable>:      mov    eax,edx
   0xf7606c73 <JIT_WriteBarrier_Callable+2>:    mov    edx,ecx
   0xf7606c75 <JIT_WriteBarrier_Callable+4>:    jmp    0xf7ad49b4
gdb$ disassemble 0xf7ad49b4
Dump of assembler code for function JIT_WriteBarrierEAX_Loc:
   0xf7ad49b4:  enter  0x6075,0xf7
End of assembler dump.
gdb$ disassemble 0xf76075c8
Dump of assembler code for function JIT_WriteBarrierEAX:
   0xf76075c8 <+0>:     mov    DWORD PTR [edx],eax
   0xf76075ca <+2>:     cmp    eax,0xf1a0000c
   0xf76075d0 <+8>:     jb     0xf76075df <JIT_WriteBarrierEAX+23>
   0xf76075d2 <+10>:    shr    edx,0xa
   0xf76075d5 <+13>:    nop
   0xf76075d6 <+14>:    cmp    BYTE PTR [edx-0xa4007dc],0xff
   0xf76075dd <+21>:    jne    0xf76075e2 <JIT_WriteBarrierEAX+26>
   0xf76075df <+23>:    ret    
   0xf76075e0 <+24>:    nop
   0xf76075e1 <+25>:    nop
   0xf76075e2 <+26>:    mov    BYTE PTR [edx-0xa4007dc],0xff
   0xf76075e9 <+33>:    ret 
```"
"I think we should make it hard to use it by mistake on a wrong symbol flavor. I.e. one should get the right flavor before calling the helper. Otherwise there is a risk to get wrong answer. "
"Theoretically, this does not exactly preserves the previous behavior, but it would be wrong for `ToString()` to return null.
"
"I think it is ok. You can also just add `UNIX_LOONGARCH64_ABI` to the target and bring it to the same plan as other architectures: https://github.com/dotnet/runtime/blob/0206926cf3e7d45804c66cbd282de094f69ecf61/src/coreclr/clrdefinitions.cmake#L233
(it will not be wrong since there is no ambiguity)

Note, this interpreter is experimental and it just compiles, it is not used anywhere and its tests were disabled in the CI few months ago. So if interpreter.cpp is compiling on LA64 with fewer and less different tweaks, it is fine for now."
"There are two things: 

1) Is it true that `var s = new MemoryStream();` is equivalent with `MemoryStream? s = new MemoryStream();`?
2) If 1) is true, then this PR changes `s` to be nullable variable. But is it for a good reason?

Maybe I'm wrong, I just want to understand this."
"Wrong Paths, should be fixed by this PR: https://github.com/xamarin/xamarin-macios/pull/14811"
"That's kind of the point, but I might be doing something wrong. `Reset` here is based on what we do with send buffers in `MsQuicStream`:
https://source.dot.net/#System.Net.Quic/System/Net/Quic/Implementations/MsQuic/MsQuicStream.cs,fe7e534486d47fbe,references

Since I planned to reuse this there as well, just not in this PR.

So if you see a problem with it, we might already have an issue in our current code and I'd appreciate some guidance here."
Precedence looks completely wrong.
"It should be noted that I _did_ find an additional case where `let` should be used instead of `const`, but the code before this PR [produces the wrong result](https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMAFASkQbwFAEgBOAplCPksMRABYoDktaAdFFYWCikQM4AOCXhAFyIAhmACeGALwA+LHgKFe-QoimJufMAMYArLgnQBuBURJkNSrQJO4AvmhN2gA) (uses `const`):"
"> I do think we should consider not changing the behavior here, but still annotating these as non-nullable (as proposed above).

We should not do that.  Either we're confident that no concrete implementations will return null (either explicitly or because they don't override the base method and get the base's null-returning behavior), or we're not.  If we're confident it never happens, then the methods can be non-nullable and can be changed to throw.  If we're not confident, then annotating them as non-nullable but returning null is making things worse: we're claiming to consumers they can trust they'll never get back null, but that's simply not true.

Just to make sure it's clear, too, concrete providers can be annotated to return non-nullable even when the base virtual is null-returning.  So, for example, even if we have:
```C#
public abstract class DbProviderFactory
{
    public virtual DbCommand? CreateCommand() => null;
    ...
}
```
we can still have:
```C#
public sealed class SqlClientFactory : DbProviderFactory, IServiceProvider
{
    public override DbCommand CreateCommand() => new SqlCommand();
}
```
Anyone using SqlClientFactory directly would see that CreateCommand returns a non-nullable DbCommand; only when using the base provider would they see that it returns nullable.

We also don't need to do the same thing for every method in question.  The ones we're talking about are these 8?
```C#
public abstract class DbProviderFactory
{
    public virtual DbCommand CreateCommand() => null; 
    public virtual DbCommandBuilder CreateCommandBuilder() => null;
    public virtual DbConnection CreateConnection() => null;
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder() => null;
    public virtual DbDataAdapter CreateDataAdapter() => null;
    public virtual DbParameter CreateParameter() => null;
    public virtual CodeAccessPermission CreatePermission(PermissionState state) => null;
    public virtual DbDataSourceEnumerator CreateDataSourceEnumerator() => null;
}
```
plus
```C#
public abstract class DbConnection
{
    protected virtual DbProviderFactory DbProviderFactory => null;
}
```
right?

Looking at https://source.dot.net and https://referencesource.microsoft.com/, I see every single code path that ends up hitting this (generally via DbProviderFactories.GetProvider) then null checks the result and throws if null was returned.  And looking around on github, I see lots of code that just assumes it's not null and dereferences the result without checking.  So (and please correct me if I'm wrong), that other than the type itself using its own protected override, null being returned is already effectively considered an error.  If that's true, DbConnection.DbProviderFactory could be made non-nullable and changed to throw with minimal impact.

Looking just at dotnet/runtime, neither `OdbcFactory` nor `OleDbFactory` overrides `CreateDataSourceEnumerator`, so they're going to inherit the base method behavior; same for `EntityProviderFactory` in reference source.  Even if we were to ""fix"" those, that's a key indicator that other implementations are unlikely to override it either.  So that needs to be `DbDataSourceEnumerator?`.

Code Access Security is deprecated, so `CreatePermission` doesn't really matter.  It can return `CodeAccessPermission?` and if folks get warnings, great, they should stop using it.  Even without that, though, I see implementations not overriding it and thus inheriting the base null-returning implementation, e.g. https://github.com/Glimpse/Glimpse/blob/master/source/Glimpse.Ado/AlternateType/GlimpseDbProviderFactory.cs.

You mentioned that ""CreateCommandBuilder and CreateDataAdapter return null on Microsoft.Data.Sqlite"" (as can CreatePermission and CreateDataSourceEnumerator, per https://github.com/dotnet/efcore/blob/master/src/Microsoft.Data.Sqlite.Core/SqliteFactory.cs).  If they return null for such a prominent implementation, that's a warning sign.  On to of that, if memory serves these were introduced later than the other methods, which means implementations based on the original DbProviderFactory surface area wouldn't have overridden these because they didn't exist; that's exemplified in examples like https://github.com/mysql-net/MySqlConnector/blob/master/src/MySqlConnector/MySqlConnectorFactory.cs and https://github.com/jonwagner/Insight.Database/blob/master/Insight.Database.Core/DbConnectionWrapperProviderFactory.cs, where these methods won't be overridden when targeting surface area like .NET Standard 1.6 or .NET Core 1.1.  So... CreateCommandBuilder and CreateDataAdapter should return nullable.

Here's an implementation that doesn't override either CreateParameter or CreateConnectionStringBuilder:
https://github.com/CollaboratingPlatypus/PetaPoco/blob/development/PetaPoco/OracleProvider.cs
And another:
https://github.com/cyq1162/cyqdata/blob/master/DAL/NoSql/NoSqlFactory.cs
And another that doesn't override CreateConnectionStringBuilder:
https://github.com/Lifeng-Liang/DbEntry/blob/master/src/Leafing.MockSql/RecorderFactory.cs
And here's one that explicitly returns null from CreateConnectionStringBuilder:
https://github.com/Dogwei/Swifter.Json/blob/master/Swifter.Data/ProxyProviderFactory.cs
and here's one that doesn't override anything other than CreateCommand or CreateConnection:
https://github.com/ChrisFulstow/NBlog/blob/e50a75d83a85e9a31e2ab7fc1a1c8fa7d29e1fa7/NBlog.Web/Models/PetaPoco.cs#L2175-L2207

I couldn't find any implementations that returned null from CreateConnection/CreateCommand.  Maybe we could get away with making those two non-nullable and throwing from the base.

If all of the above makes sense, that would leave us with:
```C#
public abstract class DbProviderFactory
{
    public virtual DbCommand CreateCommand();
    public virtual DbConnection CreateConnection();

    public virtual DbCommandBuilder? CreateCommandBuilder();
    public virtual DbConnectionStringBuilder? CreateConnectionStringBuilder();
    public virtual DbDataAdapter? CreateDataAdapter();
    public virtual DbParameter? CreateParameter();
    public virtual CodeAccessPermission? CreatePermission(PermissionState state);
    public virtual DbDataSourceEnumerator? CreateDataSourceEnumerator();
}

public abstract class DbConnection
{
    protected virtual DbProviderFactory DbProviderFactory { get; }
}
```
but I'd like more data from @github's data sources, if possible.  And with most of the above returning nullable, it may just make sense to do the simple / honest / non-breaking thing, and return nullable from all of them, reflecting exactly the implementation we have today."
"This is another case of GH linking to the wrong run of CI. Here is the proper (passing) CI runs:
 integration CI for this PR - https://dev.azure.com/dnceng/public/_build/results?buildId=850274&view=results
 CI for this PR - https://dev.azure.com/dnceng/public/_build/results?buildId=850273&view=results

This should be good to merge."
"@github Hi Drew! @github asked me about the perf CI leg failure. In the [logs](https://helix.dot.net/api/2019-06-17/jobs/f0431bd5-8c46-421c-bf60-ef4bd9e7a2e6/workitems/release.Partition20/console) linked from [AzDO](https://dev.azure.com/dnceng/public/_build/results?buildId=725680&view=logs&jobId=fb000423-50a9-5897-1483-627612d50fb2&j=fb000423-50a9-5897-1483-627612d50fb2&t=5c6713fc-c8b9-51ee-34c3-d8ed82c144fc), I've found:

```log
[2020/07/11 02:12:33][INFO] // ***** BenchmarkRunner: End *****
[2020/07/11 02:12:33][INFO] // ** Remained 0 benchmark(s) to run **
[2020/07/11 02:12:33][INFO] Run time: 00:00:00 (0.33 sec), executed benchmarks: 1
[2020/07/11 02:12:33][INFO] 
[2020/07/11 02:12:33][INFO] Global total time: 00:01:32 (92.79 sec), executed benchmarks: 99
[2020/07/11 02:12:33][INFO] // * Artifacts cleanup *
[2020/07/11 02:12:34][INFO] $ popd
[2020/07/11 02:12:34][INFO] $ pushd ""/home/helixbot/work/AEFF09D3/p/performance""
[2020/07/11 02:12:34][INFO] $ dotnet build-server shutdown
[2020/07/11 02:12:34][INFO] Shutting down MSBuild server...
[2020/07/11 02:12:34][INFO] Shutting down VB/C# compiler server...
[2020/07/11 02:12:34][INFO] VB/C# compiler server shut down successfully.
Killed
```

This means that all benchmarks have executed and everything was shut down, but the CI went red anyway.

@github do you have any idea of what could have gone wrong here and whether we can ignore this failure? Thanks!"
"@github does this mean that the assemblies in the ""stable"" version of these reference assemblies are wrong, and the ones in the earlier ""preview"" version are right?"
"I think the change here brings us into conformance with the [spec](https://github.com/dotnet/roslyn/issues/59789#issuecomment-1054568347).

Currently, the compiler does something certainly wrong here: it gives no error, and silently uses 'null' as the default argument at call sites. Unless something critical is uncovered, I think we should just fix it and bring ourselves into alignment with the native compiler."
"Sad face...
I guess we could make that work with a fix which I think Mateo actually implemented at one point - the piece of code you asked about (why do we add CoreLib to TPA  at the end, always). We could tweak that to add CoreLib to TPA in the 3.0 compat case (it is currently disabled when CoreLib exists in the bundle, because we expect it to be loaded from the bundle - which is technically wrong)."
"@github The tweet makes it sound like the proposal already advanced but I don't think it did yet, it was ""just"" presented today and _seeking_ stage 2 (which is big news too of course). I'm making assumptions based on very little data here but for example ""BigInt Math"" was [scheduled](https://github.com/tc39/agendas/blob/master/2021/08.md) to be presented _after_ pipelines and its advancement [has already been updated](https://github.com/tc39/proposals/commit/7f1e3947412bc6172b03dd7f084be0e0f620cf8a), unlike pipeline's.

Edit: I guess I was wrong :upside_down_face: https://github.com/tc39/proposals/commit/f410ced102c1ac2506340915d4831c0a38b4c762"
"Hey @github, something went wrong when looking for the build artifact. ([You can check the log here](https://typescript.visualstudio.com/TypeScript/_build/index?buildId=104379&_a=summary))."
"I believe what happened is that the zip produced by libraries build has a problem:
https://dev.azure.com/dnceng/public/_build/results?buildId=1149196&view=logs&j=0ce95488-260d-5e86-47b9-82bc4e703e0b&t=a9a5369a-5269-5579-8bb0-b76ef1819668

Since that build was successful your reruns aren't fixing it.  The legs which are failing are all trying to consume the artifact produced by this build leg.

It's not clear to me why that artifact is bad, I don't see a failure in zipping.  Maybe we can examine the artifact in AzDo and see if something is wrong with it."
"> Oh, I was looking in the wrong spot - they are public:

Those are also illink intrinsics, so it's not a hole, but I fixed those and filed #53121 for the other cases. We should go over them."
@github : I hate to disappoint you but it would appear the native documentation for `gethostname` is wrong. However I can reliably say it does not return the NetBIOS name of the computer and I can find only three possible hostnames that can be set (and can rule out one of them from the comparatively-recent touch to the documentation) so it has to be the remaining one so that's the one I retrieved.
"That seems to be a genuine bug on these lines:
https://github.com/dotnet/runtime/blob/03211e300de68a97d0036ec0ff6c3ab606c072c9/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/AuthenticationHelper.NtAuth.tvOS.cs#L15-L16

The `preauthenticate` parameter should be `false` instead of `true`. It may need some further tweaking but always sending `true` is definitely wrong."
"Tagging subscribers to this area: @github/area-system-reflection
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

Consider the following method signature:

```cs
public static Tuple<Tuple<string?, string?>, string> Field2() { }
```

Attempting to interpret the nullability attributes of `Field2`, it will report that the final `string` is nullable when in fact it is not.  For a complete demonstration, please view this file:

https://github.com/graphql-dotnet/graphql-dotnet/blob/f190a1566f61f29e1909fe6b7dcbb7140c404908/src/GraphQL.Tests/NRTTests.cs

The problem is that when enumerating the generic type definitions of `Tuple<Tuple<string?, string?>, string>`, and specifically the first generic type `Tuple<string?, string?>`, the code does not increment the index of the nullability byte in the metadata by 3 (non-null, nullable, nullable) but instead only increments it by 1.  So it reads the wrong byte value from the attribute.

I have changed the `GetNullabilityInfo` private method to accept a `ref` index argument so that it can update the index properly based on the number of nested types (and whether or not those nested types utilize a nullability byte, since non-generic value types do not).

I would be happy to add tests, but I'm not sure where in the codebase to do so.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>Shane32</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-System.Reflection`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"The remaining issue seems to be a GC hole we hit due to how the JIT internally records GC regs. For
```csharp
[MethodImpl(MethodImplOptions.NoInlining)]
private static string Foo(object o) => o.ToString();
```
we end up generating
```asm
G_M28009_IG01:        ; gcrefRegs=0000 {}, byrefRegs=0000 {}, byref, nogc <-- Prolog IG
        A9BF7BFD          stp     fp, lr, [sp,#-16]!
        910003FD          mov     fp, sp
                                                ;; bbWeight=1    PerfScore 1.50
G_M28009_IG02:        ; gcrefRegs=0001 {x0}, byrefRegs=0000 {}, byref
                             ; gcrRegs +[x0]
        F940000F          ldr     x15, [x0]
        F94025EF          ldr     x15, [x15,#72]
        F94005EF          ldr     x15, [x15,#8]
        97FF30A1          bl      CORINFO_HELP_VALIDATE_INDIRECT_CALL
                             ; gcrRegs -[x0]
        AA0F03E1          mov     x1, x15
        D63F0020          blr     x1
                             ; gcrRegs +[x0]
                             ; gcr arg pop 0
                                                ;; bbWeight=1    PerfScore 11.50
G_M28009_IG03:        ; , epilog, nogc, extend
        A8C17BFD          ldp     fp, lr, [sp],#16
        D65F03C0          ret     lr
```
where we remove `x0` from the gcrRegs too early. The problem seems to be that the JIT bases this on liveness that believes the local allocated to `x0` is dead after the indirection `ldr x15, [x0]`, e.g. even without CFG enabled the jit dump shows:
```scala
Generating: N005 (  1,  1) [000000] ------------         t0 =    LCL_VAR   ref    V00 arg0         u:1 x0 REG x0 $80
                                                              /--*  t0     ref    
Generating: N007 (???,???) [000013] ------------        t13 = *  PUTARG_REG ref    REG x0
Generating: N009 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V00 arg0         u:1 x0 (last use) REG x0 $80
                                                              /--*  t4     ref    
Generating: N011 (  3,  2) [000005] #--X--------         t5 = *  IND       long   REG x1 $102
							V00 in reg x0 is becoming dead  [000004]
							Live regs: 0001 {x0} => 0000 {}
							Live vars: {V00} => {}
							GC regs: 0001 {x0} => 0000 {}     ; wrong, there is a GC pointer in x0 that will be used below
IN0001:                           ldr     x1, [x0]
                                                              /--*  t5     long   
Generating: N013 (  5,  5) [000007] -c----------         t7 = *  LEA(b+72) long   REG NA
                                                              /--*  t7     long   
Generating: N015 (  6,  4) [000008] #--X--------         t8 = *  IND       long   REG x1 $104
IN0002:                           ldr     x1, [x1,#72]
                                                              /--*  t8     long   
Generating: N017 (  8,  7) [000010] -c----------        t10 = *  LEA(b+8)  long   REG NA
                                                              /--*  t10    long   
Generating: N019 (  9,  6) [000011] n--X--------        t11 = *  IND       long   REG x1 <l:$185, c:$184>
IN0003:                           ldr     x1, [x1,#8]
                                                              /--*  t13    ref    this in x0
                                                              +--*  t11    long   control expr
Generating: N021 ( 30, 13) [000001] --CXG-------         t1 = *  CALLV vt-ind ref    System.Object.ToString REG x0 $83
Call: GCvars=0000000000000000 {}, gcrefRegs=0000 {}, byrefRegs=0000 {}
IN0004:                           blr     x1
```
Normally this does not manifest because (it seems?) the JIT does not report dying GC pointer registers until after calls, so the wrong internal view is not really published.
Simple solution for now is to avoid reporting dying GC regs for the validation helper, but it would also be nice to fix the wrong internal view in the JIT."
"This is wrong and is going to break other languages. 

> Since IndexOf doesn't do sorting, do these characters still need to be treated in a special way?

Index Of depends on the collation which does sorting. What you have mentioned is not true. 

Maybe in your case, consider using Ordinal options instead.


```C#
            CultureInfo enCI = CultureInfo.GetCultureInfo(""en-US"");
            CultureInfo.CurrentCulture = enCI;
            Console.WriteLine($""{""SomeText"".IndexOf(""-"")}"");      // this print -1
            CultureInfo thCI = CultureInfo.GetCultureInfo(""th-TH"");
            CultureInfo.CurrentCulture = thCI;
            Console.WriteLine($""{""SomeText"".IndexOf(""-"")}"");     // this print 0
```

We should think in different way to optimize this case."
The azure-pipelines bot went crazy and posted a bunch of comments saying it ran the queues. But it didn't re-run the cancelled legs.
"I don't feel like this layout flip is testable with unit test, so added a sample view, but let me know if i am wrong"
"Can you collect a binlog of the test project? It appears the test project is getting the wrong versions of dependencies, but I'm not sure why. Possibly due to Directory.Build.targets/props imports."
"Further reading now leads me to believe that finalizers don't run ""during"" a GC where the runtime might suspend threads, but that finalization merely triggered by the collection adding objects-waiting-to-be-finalized to the finalizer queue. So the object being finalized is still alive as far as GC is concerned until the object is dequeued from the finalizer queue by the finalizer thread and the object is no longer referenced (that is *if* the object is no longer referenced). When collections are actually run, even the finalizer thread is suspended at least if concurrent garbage collection is disabled.

This is making me think that the effort we go through to reconstruct the MemoryPoolBlock might not be worth it, and that we should just add `this` back to the pool in the finalizer and ""resurrect"" the MemoryPoolBlock. We'd probably need call GC.ReRegisterForFinalize though.

I'm not writing this long explanation because I'm confident I'm correct. I just want to explain my current understanding so the experts can clear up what I'm wrong about."
"I'm on the fence about ValueTask. On one hand, RequestDelegate doesn't return a ValueTask and we're not returning an async *value* so we can just use Task.CompletedTask where appropriate. On the other hand, ValueTask gives us the most flexibility if we ever want to try anything crazy like returning pooled tasks for async operations. Of course, that's only worthwhile if whoever is awaiting the action doesn't immediately convert the ValueTask to a Task like the middleware pipeline would.

What potential IResults are you thinking of that don't write a response? I know StatusCodeResult for example doesn't flush the response so something could completely change the response afterwards, but in practice it's effectively writing a response with the specified status code and an empty body the vast majority of the time.

I know technically an IResult could do nothing or anything, but I think naming the method after what it does the majority of the time makes sense. Are there use cases for IResult that have nothing to do with the response that I'm not considering?"
"Woops, I was reading the wrong line. You're right, I need to test that feature more.
"
This was wrong all-together. ReadonlySequence is a struct.
"Culture can change within the same process. So you write this, culture changes, and now this serialization is wrong. You never want to persist using a format that can change."
"I think we might need to be more restrictive in how we detect the pseudoselector. It would be a breaking change. 

Today we support selectors like “.myelems::first-of-type .another”.

Would it work to just detect “ends with ::after” but not otherwise look for :: appearing anywhere?

Sorry I was wrong saying we could throw if there are unrecognised pseudoselectors. We can’t if we want to continue allowing things like ::last-child etc. 

I think it will be ok to just recognise ::after at the very end of the string. It would also be nice to specifically recognise ending with ::before and throw since otherwise people might get confused. Those two didn’t have any supported meaning before so that’s non breaking. But other pseudoselectors could be ignored. 

Does that sound reasonable?"
"These last two error messages aren't easily recoverable from by the end-user. In which case, we should just display the generic `Unhandled exception occurred` message (thoughts?). Developers will still be able to see what went wrong in the developer console."
"Revert. TryParseValue's [NotNullWhen(true)] markers are wrong, remove them. The parsedName and parsedValue can be null when supportsMultipleValues = true."
"Mostly paranoia.  The correct dumping behavior across process architectures can only be implemented by spawning a capture process with the desired architecture (at least according to the limited documentation I can find).  

There is no documentation on how this process spawning works.  Assuming it just looks for the correct process next to it.  But I'm unsure if it correctly passes along the `--accepteula` flag.  If it didn't it would result in a Jenkins hang.  Seems wrong to fix a jenkins hang with a jenkins hang.  So just maknig it simple here and picking the right architecture.

Would be willing to undo this if we could find some docs that point to `--acepteula` being passed along correctly.  Can't test locally though because I've already accepted it. 
"
"> This bot is wrong, any idea where the rule is?

No, I thought you wrote this bot 😄 "
Nit: this formatting is likely wrong (VB defaults to no space before or after `:=`). Verify that formatting the change leaves it as-is. #Resolved
"Is sending back HTTP/1.1 on a HTTP/2 connection be legal? Sure, the client is wrong, but do two wrongs make a right?

Changing the server response is a much bigger piece of work. To do that I think this would need to be completely robust (i.e. when detecting the error, read additional content until either the end of the line or max request line length is reached). Then send a valid HTTP/1.1 response. That's a lot more work.

Agree that returning an error to the client would help more people, but this is a start."
"this is in a language neutral layer, but you're referring to LanguageNames.CSharp here.  This seems wrong."
">with [](start = 53, length = 4)

Not sure what exactly you're asking, is with the wrong word?"
"❕ This is a collection initializer, not an object initializer (test is correct, but the method name here is wrong)"
These are Windows jobs and the new pool is a linux one. Seems like something is wrong here.
"Ah, I see. I was looking at wrong FindNode. Ok, that would make things
substantially clearer.

Will change it tomorrow. Thanks for the input, starting to understand the
system better now :)."
"this really concerns me.  it seems like we're just going to be putting analyzers in a bad place anyways since their checks will be wrong.  So why not acutally let them know about it instead of having it silently seem like it's succeeding.

it's not like we're breaking binary compat.  we're just makign it clear where they need to fix things up to make their code correct.  otherwise, they'll just be flying blind here.  

tagging @github as these conversations came up with the entire nullable API surface area."
"Yeah, this is wrong. Anyway, this file shouldn't be changed as it is an arcade file"
Thanks for the improvement! I wasn't sure which syntax was the correct one and it seems that SO answers are wrong xD
"In lsraarm64.cpp you specified `tgtPrefUse = BuildUse(op1);` that will make targetReg is more likely to be the same as op1Reg, but it's not guaranteed. @github can you please correct me if I am wrong"
"So this one isn't wrong, but I'll admit the annotation seems odd and unlikely to be useful. I'm kinda willing to leave this one off and honestly wish we redid the signature."
"ok, I have some work still to get rid of the delegate. I was making wrong assumptions on where the cost was."
"@github I don't see record of a discussion about trying to catch this with an analyzer. It's not generally possible to be sure (either way) whether it's unbounded. But an analyzer that forced a pattern of passing a constant value would be doable.

Looking at all our stackallocs, almost all of them already pass a constant directly or via a constant field or local. The few exceptions are not self evidently safe by eyeball, eg.,
```c#
        private static unsafe int EncryptDecryptHelper(OP op, ISSPIInterface secModule, SafeDeleteContext context, Span<SecurityBuffer> input, uint sequenceNumber)
        {
            Interop.SspiCli.SecBufferDesc sdcInOut = new Interop.SspiCli.SecBufferDesc(input.Length);
            Span<Interop.SspiCli.SecBuffer> unmanagedBuffer = stackalloc Interop.SspiCli.SecBuffer[input.Length];
```
and it would be easy for one of them to be wrong. Would it be reasonable to have an analyzer that required them to be rewritten in constant terms, or at least something the analyzer could recognize like
```c#
            Span<Interop.SspiCli.SecBuffer> unmanagedBuffer = stackalloc Interop.SspiCli.SecBuffer[Math.Min(input.Length, BufferSize)];
```"
"Something feels wrong here (and the corresponding properties). The `Empty` instance will return null for both `Selector` and `Field` properties, so they should probably annotated to reflect that."
"@github this seems at the wrong place, can we move it into `theme.ts` e.g. where the knowledge belongs to?"
"Now `enum` values are strictly enforced in comparison with previous behavior.
Values like `""somethingwrong""` _(obviously wrong)_, `""350""` _(now number can be used instead)_, `""lighter""` _(doesn't look useful in this case)_ etc. will be reset to `""normal""`"
"Please test IOperation behavior for when nullable is enabled and the `unchecked`/`unsafe` block is the root. In particular, what the behavior of calling `SemanticModel.GetIOperation` on that `UnsafeStatementSyntax` is. The `Type` property of those nodes will be wrong unless you wait for [https://github.com/dotnet/roslyn/pull/42403](https://github.com/dotnet/roslyn/pull/42403) to merge and merge 16.8-p1 into your local code, but I'd expect other symbols like the method symbols of `IInvocationOperation`s or local symbols to reflect the correct nullability."
@github I'm not sure what went wrong..? Rebuild the whole solution in Debug and then commit the results? Or what am I supposed to do here?
"I'm might be wrong here, but I'm not sure the default is single line labels."
Not crazy about this. Need to see if there's a better way to do this. Just not sure yet how to pull out the IVisual type for the converter to use
"That may have to be another state (DcsIgnoreTerminator) because we'd need to return to DcsIgnore if we got `ESC <anything>` where `anything` was not `\`.

Feel free to correct me if I'm wrong :)"
This seems wrong. Also the parameter is `position` not `cursorPosition`
"This makes XUnit complain: `error xUnit1013: Public method 'ReadWrite_Success_Large' on test class 'ConnectedStreamConformanceTests' should be marked as a Theory.`

Interestingly, XUnit is actually complaining about the wrong class."
It's weird that this is happening in a `fire_and_forget`. I would have assumed that it'd just work. This sucks!
"I'm confused by something. So I'm just going to run through a scenario and you can correct me where I'm wrong.

1. I'm in English-US locale
2. I download Terminal
3. When I open my defaults.json and settings.json, I _literally_ see this...
```
""name"": { ""resourceKey"": ""CommandPromptDisplayName"" }
```
4. To use commandline args, I need to call `wt -p ""Command Prompt""`
5. I change my locale to Spanish-MX
6. My defaults.json and settings.json are unchanged
7. To use commandline args, I need to call `wt -p ""Command Prompt - Spanish Edition""` (but like, with the actual localized string)

Separately, what I'm confused about is, can't we just use your `%Version%` code from before? Just add a `%CmdName%`, then replace it with a localized name? This would fail on everything past step 5, but is that an important scenario?

And we wouldn't have to worry about `wt -p ""<localized cmd name>""` because we search through the profiles be a normal name, so that'd be ok?"
"Ah, sorry for the confusion. I meant to suggest using the include path *instead* of adding the extra `#include` lines.

And now that you mention that you've tried that, I think I see why it didn't work- `#include ""pch.h""` with """" instead of <> prioritizes the source file's directory over the include search paths, and the wrong PCH happens to be in the source file's directory.

So I tried adding `$(OpenConsoleDir)\cascadia\TerminalApp\lib` *and* replacing `#include ""pch.h""` with `#include <pch.h>` and that seems to be working. (Well, I'm now hitting a different bug where IntelliSense crashes on some coroutines stuff, which `TerminalPage.cpp` is full of, but at least it's not spitting out errors 🙂)"
"> 
> 
> > I've written this 5 days ago in the ticket 😛
> 
> Yea you're not wrong. I thought I could solve it quick without reading 🤦‍♂️
> 
> As a team, we thought maybe the best way to go about this would be to do just the tab switching solution for the timeframe of 1.6, and come back to this discussion for 1.7. @github You still cool spinning up that fix?

@github - waited to make sure you are not working on this. Can try to do it now. I hope it won't take too long."
"The tool detected an `## Example` header and separated the code examples from the remarks section. What the tool didn't do, is detect the new `:::code` sections, which should've been preserved inside a markdown section.

@github @github correct me if I'm wrong: in dotnet-api-docs, do the :::code sections only work if they are inside a remarks section? Or do they also work if they are in plain xml, like here?"
"@github correct, normally these kind of objects are the result of some other API calls and if we we are wrong adding a ctor is not a breaking change but removing one is :) "
"First, 'safe' is crazy here.  We should never be in a situation where we need to munge positions.  Everything shoudl be known with exact locations and we should always be able to safely use the data collected.  This approach to specifying inclusive end positions, but then rectifying them is just bad.

Second, using inclusive for start/end just violated all of our (and the BCL) patterns around ranges/spans.  Nothing else works this way (esp. string slicing), so we really don't want to do this."
"Eh, I'm wary of making that even more non-deterministic based on [my experience last time][1] from the AIA tests. But those tests for sensitive to execution time, so maybe I am applying the wrong logic. I suppose it can't hurt to try the more narrow way first.

[1]: https://github.com/dotnet/runtime/pull/42680"
"wrong style, space before `(`"
"(I was under the impression it's all in-proc now, but maybe that understanding is just wrong.)"
"It doesn't guarantee it as far as I can tell, but it happens to work for now.

I'm not particularly pleased with this solution, but it's the closest thing I can find to a workaround that will scream if something goes wrong.

Long term plan needs to be to make these tests thread safe"
"Yeah, it's at least half of the fix. `System.Reflection` handles WinMDs fine, because it knows about virtual `AssemblyRefs`. `System.Reflection.MetadataLoadContext` didn't. I dropped the wrong/incomplete `GetTokenRowNumber` impl from `System.Reflection.MetadataLoadContext`, and used the correct `System.Reflection` one."
This comment is wrong. This setting only affects nuget package under src/mono.
"actually I think this was just my fault
```
                    (""this.CallMethodWithParmString(\""🛶\"")"", TString(""str_const_🛶"")),
                    (""this.CallMethodWithParmString(\""\\uD83D\\uDEF6\"")"", TString(""str_const_🛶"")),
                    (""this.CallMethodWithParmString(\""🚀\"")"", TString(""str_const_🚀"")),
```
you should be fine because https://github.com/dotnet/runtime/pull/61386 fixed and the test I wrote first was wrong"
"It's safe to assume that strings are immutable. __However__, code paths like this have a tendency to get refactored such that their inputs become `ROS<char>` instead of `string`, and at that point all immutability guarantees are void.

That said, what's the worst thing that can happen if the span contents end up changing mid-operation? We accidentally read the wrong directory names, maybe resulting in an i/o error and exception? That's probably ok, not the end of the world. We accidentally read off the end of a buffer and start corrupting memory? That's unacceptable.

So if we pessimistically assume that the contents may be mutable in a future release, and we also think that the consequences of something being mutated out from under us isn't really all that bad, then I wouldn't worry too much about it. :)

As an example of this in action, see [`string.Replace`'s implementation](https://github.com/dotnet/runtime/blob/10e107debae28de4bd1e710cfe448be3c293e841/src/libraries/System.Private.CoreLib/src/System/String.Manipulation.cs#L1055), which uses an index-based approach as you ponder here, and which does not defend against mutation. If it ever gets refactored to depend on `ROS<char>`, worst case behavior is that we'll end up inserting improper substitutions into the output string. But we _won't_ run off the end of the buffer and corrupt memory. So it's not worth putting a guard in here."
"indent is wrong
"
"but what was wrong with the previous pattern where we check parameter node, and then check it has a questiontoken set?
"
"They were failing in the previous builds for this PR. I dont have a setup on Windows or Linux yet to figure out exactly whats going wrong. Unfortunately, AzDO is currently broken so I dont have the logs, but from memory, this one might have hit `Process {_pid} not running compatible .NET runtime.` "
"one of these names seems wrong.  this should either be ""var completoinHelper"" or ""GetCompletionRules"".
"
The indentation here is wrong.
"Oh, got it. The fallback would be “ignore.” There are a number of preferences/rules that have a disclaimer about what version of TypeScript they require. It’s not the end of the world, but it’s not ideal.

It just gives me an uncomfortable squirmy feeling thinking about an option that means, “I want you to fix up all my semicolons, but I _don’t_ want to tell you how I like them!”

Of course, that has a highly practical application: “Please adapt my semicolon habits to match whatever project I happen to be working on right now.” But, that request may as well apply to _every_ formatter option, not just semicolon preference. As such, I think this is the wrong venue to try to solve the problem of “I work on a bunch of different projects with different formatting conventions.”"
"This pattern seems like quite the verbose way of saying:
```
assert(c->m_typ == TYP_SIMD);
return reinterpret_cast<VarTypConv<TYP_SIMD>::Lang*>(c->m_defs)[offset];
```
I don't think we need to return zero in release build in case something calls this with a wrong type, it will be broken either way."
Not crazy about this *always* being there.
"There are two main things here:

1. The IDE will have no way to disambiguate and so it doesn't matter what we put in source. `nint` will be displayed by the tooling. These types in ECMA-335 (runtime spec) were never designed to be different. C# decided to disambiguate them while other languages, such as F# did not. C# trying to disambiguate them turned this into a massive leaky abstraction where its trying to express a difference that doesn't actually exist, which definitely doesn't exist in several other languages, and which fundamentally breaks down the more `System.IntPtr` gets used and gets support for integer like operations.

2. People having a pre-conceived notion that `IntPtr` means ""pointer like"" is wrong and needs to be changed. This is and always has been an incorrect association and is one that extends beyond the boundaries of just .NET. `IntPtr` comes from C/C++ where the corresponding name `intptr_t` exists. It is in the same format and of the same meaning as `Int32`. That is `Int` meaning `integer` and `32` meaning `32-bits`. Therefore `IntPtr` is `Int` meaning `integer` and `ptr` meaning `ptr-bits` (same width as a pointer).

The official guidance and what the `System.IntPtr` docs are being updated to indicate is that while you can use `IntPtr` to expose/represent/pass pointers and handles, this is unsafe and error prone. Usage needs to be carefully considered and primarily done in cases where the corresponding language doesn't have pointer support. In languages that support them handles and pointers should be represented as pointers or a type-safe wrapper (such as by correctly deriving `SafeHandle`). Trying to represent a `ushort*` as an `IntPtr` is unsafe, as is trying to represent a `HWND` as an `IntPtr`. Sometimes this is appropriate for interop code, but even there it is ""technically incorrect"" and could run into ABI issues on future platforms.

We should definitely follow our own guidance where it isn't a breaking change. But otherwise, the few remaining cases where it is a pointer being exposed ""safely"", people will get adjusted to the difference with time and it will be ultimately no different than seeing `intptr_t`, `uintptr_t`, or one of the many other typedefs in C/C++ which have the same meaning."
"That walks upward, which is the wrong direction. I need to remove the parens, not walk up from the inside to the outermost parens."
"> If you throw an exception you can also test the behavior on incorrect inputs.

What is an incorrect input?  How do we test that?  The point is that we don't know for certain exactly how the compiler works here.  If we could generate these inputs we would just test these cases and make the code work.

This is about how to write code that isn't sure about all the possible cases that can come through and isn't 100% sure how the compiler will treat things (since it's not documented).  

So we write to what we hope is happening, but we are resilient to being wrong.  As above, i'm fine with telemetry/watson here as that's just a feedback channel.  I'm not fine with a crash/throw/contract as those do not fit.  Reporting a contract violation about a non-violated contract is not correct. "
"GitHub is picking up the wrong runs of CI for this PR. CI is passing:
CI - https://dev.azure.com/dnceng/public/_build/results?buildId=652067
Integration CI - https://dev.azure.com/dnceng/public/_build/results?buildId=652068"
And also not part of the latest nightly build (if I didn't do something wrong when trying to test with the nightly)...
"Things that I have to fix *in this PR*: for some reason, the entries are shown in the wrong order in vscode. I'm investigating that to see what's the best way to address it.

Edit: updated the sort text on the method signature completion entries so that they show up lower than the normal entries. They now have a `sortText` that is one lower than the normal entries would have."
"Not cleear yet what's going wrong with the installer builds, could be related.
```
  Microsoft.NETCore.App.Runtime.Composite -> 
/root/runtime/artifacts/bin/Crossgen2Tasks/Debug/net6.0/Microsoft.NET.CrossGen.targets(463,5): error : /root/runtime//dotnet.sh:***@"" [/root/runtime/src/installer/pkg/sfx/Microsoft.NETCore.App/Microsoft.NETCore.App.Runtime.Composite.sfxproj]
```

Also have a branch off this change where I'm trying to remove all the `? true : false` from the runtime to see if it's no longer needed."
"CI with the suggested change has run. The regression is still present but it is now including the alignment. [13400.zip](https://github.com/dotnet/runtime/files/8838647/13400.zip) . The sizes of some groups show up in the diffs so I extracted the ig sizes and summed them. 

| file | reported size | calculated size | reported prolog size |
| --- | ---: | ---: | ---: |
| old | 7827 | 7868 | 65 |
| new | 7839 | 7839 | 67 |

So the new file is making some sense but if you use the old total value then the new one looks like a regression. 
The prolog group in the old file was the same as the new file, in both it reports the size as 67 bytes.
I'm tempted to say the regression isn't real because the numbers in the base are wrong.

The 32bit diff was also run. I haven't looked into the regressions it contains yet."
Ultra-nitpick (sorry!): Indentation looks wrong
would it be wrong not to clear these?
Nevermind my brain is crazy.
Move the mitigation to launchsettings? Just let devs set it rather than the crazy mayhem.
"> Idk, but the test currently doesn't hit line 89, so something is wrong with it.

I noticed that, the first call to it returns `completed: true`. The input hits the boundary though. Hence I was asking earlier

> I'm curious if we need to call this in a loop at all, and just call it once and log the result in the ArrayWriter.
"
"This took some manual playing around with to get work, I initially tried the wrong method which triggered the change update, this api simulates typing in the textbox, so its not until you press tab or enter that the browser seems to trigger the change event, so this test types some characters and verifies that things don't change before, the tab key is sent using PressAsync which causes things to update"
"I think you want to add the solution folder from the folder you created in step 1, so that it will also include `tests` or `samples` you add there - can someone else confirm (@github @github @github)? I realized recently I've been doing this wrong, I had manually been adding each .csproj (src, test, sample) one-by-one."
"@github Let me recap what I think I need to do. Correct me if any points are wrong.

- Keep the newly created Microsoft.AspNetCore.Http.BadHttpRequestException but it won't be sealed now
- Make IIS and Kestrel's BadHttpRequestException derive from Microsoft.AspNetCore.Http.BadHttpRequestException
- Remove the Obsolete attributes from IIS and Kestrel's old BadHttpRequestException, they'll still be used as they are now
- Move all of the internal members from Kestrel's old BadHttpRequestException and have them in KestrelBadHttpRequestException instead which will derive from Kestrel's old BadHttpRequestException 

I also have a question about AllowedHeader. That is currently only used in the following two places https://github.com/dotnet/aspnetcore/blob/d1d9b97f77cfe672618512e30b5b78b81ce44ff2/src/Servers/Kestrel/Core/src/Internal/Http/Http1Connection.cs#L427 
https://github.com/dotnet/aspnetcore/blob/d1d9b97f77cfe672618512e30b5b78b81ce44ff2/src/Servers/Kestrel/Core/src/Internal/Http/Http1Connection.cs#L471

The property is then used to set the http header here 

https://github.com/dotnet/aspnetcore/blob/d1d9b97f77cfe672618512e30b5b78b81ce44ff2/src/Servers/Kestrel/Core/src/Internal/Http/HttpProtocol.cs#L1263

Can the response header be set in the place the exceptions are thrown in Http1Connection or is it too early in the request pipeline?"
"@github I reproduced the wrong problem, trying a few more things&hellip;"
"> This default makes me uneasy. Can it be reached? Could the switch be made complete (throw in default case)?

Certainly synthesized methods don't have body in syntax. One might say they shouldn't inherit from this class, but they do. So, there is nothing wrong in getting here.

---
In reply to: [170045622](https://github.com/dotnet/roslyn/pull/24918#discussion_r170045622) [](ancestors = 170045622)"
"I agree it won't copy those if we change them. But I don't see that as a negative here. It forces us to be explicit about the dependencies we take here. 

Note: the uses of System.* was IMHO equally as wrong. Not every facade begins with System. For example Microsoft.Win32. Same argument could be made for that as S.C.I. "
"AFAICT, the MSBuildTask never sets command-line args with `-`. Do let me know if I'm wrong about that."
"I'm on build-ops, but timezones mean it's not realistic for me to do pair programming to figure out what is going wrong. I think someone else should work with Matt on this tomorrow if it's urgent. Or wait a day for the next build-ops person."
`ValueText` is wrong. `@github` shouldn't be considered `var` #Resolved
"no need for skipped syntax (which **sucks**).  We can totally represent this expected sort of case simply in the syntax model. "
"I think I get it, but please correct me @github if I'm wrong. The HTTP_DLL should be removed, but very similar constant must be introduced for WinHttpHandler library with pretty much the opposite meaning to HTTP_DLL. Then filter overrides and access modifier according to this."
"```suggestion
                // In the case of 'implement interface through field / property', we need to know what
```

ℹ also English rules say the comma must not go on the outside of the quotes, dumb as that is."
Eh that's the wrong one
"Constraints was the wrong word, will rename these."
"If we don't already have one - can you consider adding a test where multiple threads (de)serialize different types, to make sure there's no regression later about the wrong class info being picked up?"
"The setting should be called `debug.console.closeOnEnd`.

Also the descriptpon needs to be updated, it is wrong"
"Gotcha. No matter how many times I see it, I'm going to mentally have this one wrong, just like you with the typo rule"
">if (foundBaseCopyCtor is null) [](start = 20, length = 30)

I do not understand why are we performing this check at all. It really doesn't matter whether there is a copy constructor in the base or not if we are bound to something else. I think the diagnostics is actually going to be confusing. Rather than saying, you are using wrong thing, we say, something is missing in the base. Consider removing this logic.  #Closed"
"This sounds like a wrong dependency to me, the model should not reach back into the service and I think it should not use the same event as the UI event. "
"I'm not fully understanding the logic here. My thinking was to just restrict the if condition to rules that are set to warning. But most likely, my ""overly simple thinking"" would be unfortunately wrong."
"This test actually covers `EnumConverter<T>.Write`.  The false condition of this code wasn't being visited by any tests (although given that we're running different test commands, maybe there's something I'm doing wrong here 😉 )
https://github.com/dotnet/runtime/blob/4bc91cb3805bc4a119fc18f4a32d5126ac72db60/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/Converters/Value/EnumConverter.cs#L193-L196

Sorry for the confusion.  While I was looking at the WriteWithQuotes branch you were talking about, I came across this other piece of uncovered code.

"
"Yeah, this is probably wrong. I think LSP will send everything in UTF-16 (being json serialized) but I didn't know if there were implications of changing the encoding or algorithm."
"The indicated location is wrong - the coverage folder isn't generated at the root of the repo. It's in the .build folder instead. Just updating the docs to be correct for anyone trying to run the tests with coverage. "
"@github 

```
const referencesViewExt = await vscode.extensions.getExtension<SymbolTree>('ms-vscode.references-view');
```

This would break downstream extensions which contributes a customized references-view, because of referencing wrong extension id. E.g. vscode-java extension contributes a class hierarchy view. 


"
"it fixes a problem as I mentioned in the checkin notes: 

> Moved the decision of condemning 1 when bgc is in progress to joined_generation_to_condemn (should logically belong there anyway) which fixes the problem that GCToEEInterface::DiagGCStart was getting the wrong condemned gen in this case."
removing symbols in LTS releases feels wrong to me.
The tests aren't being run on this machine. They are sent and run on helix (correct me if I am wrong @github). This machine just waits for the helix results to report as passed (however if the single-machine run passes that will tell us what the problem is).
"This is not right. the ""certificate"" is union of different structs so whatever is after this will have wrong offset. 
It may not matter right now but the fields after are not safe to use. We should switch the the CredentialConfigCertificateUnion or put in big warning. 

cc @github"
"@github @github I took a swing at adding trimming based on the AndroidSampleApp project file and it didn't seem to have an impact, so I'm probably doing something wrong.

If it's okay with you I'd like to just merge this PR so we can finish getting this data flowing. We can add this test when I add other Xamarin apps."
"Correct me if I'm wrong, but as far as I can see the existing code that is being improved here isn't optimal in the first place. We don't have to make the hashing faster if we remove the need for expensive hashing.

Reasons:
* The only place where `_textFormatMap` is being used is inside `DxFontRenderData::TextFormatWithAttribute`
* `_textFormatMap` is cleared when the font changes and can only contain a single font ❗
* `_textFormatMap` lookup only occurs with `weight`, `style` and `stretch` (let's abbreviate it as ""WSS"")

My personal conclusion:
The hash function for `_textFormatMap` only needs to hash WSS and that's it. We can improve the performance of hashing by inlining the FNV1a algorithm, which requires around 4ns for 12 bytes (the amount of data we need to hash) in my experience. If we use xxHash we can reduce it to 1-2ns.

Edit: In fact we can cram all 3 values into a single uint32_t lol."
Wrong indentation.
"I did a full search of the diff, and this appears to be isolated. There were 3 in close and 2 of them had one syntax and one another. My eyes my have glazed over and I hit the wrong macro three times.

This section of conversion was only semi-automated.

I also hit a number of ""should be converted but weren't due to not matching my pattern"". I'm fixing those as well."
"> Have you tried to add `assert(!varTypeIsFloating(cast->CastOp() || !fromUnsigned)` and fix the callers who call it with wrong value of bool `fromUnsigned`?

Yes, in fact that was the original version of the fix, and the only place I had to fix was the importer. I went back and forth on this a few times, and ultimately decided to have the change initially be with this more conservative implementation, because it is ""guaranteed"" (not really because I did not add it to the constructor, but nothing calls the constructor directly) to always return ""correct"" result to the caller. I suppose I should revisit it and run the `assert`ty version through the CI. Maybe it turns out more callers are getting it wrong and it would be better to normalize centrally (regardless of that, the flag flipping will be fixed)."
"Hey @github, I'm a bit confused by that and would love to understand how this works and why that is safe a bit better, would you mind sharing some more details? Specifically, when you said that ""Mono treats those [`Ephemeral` instances] as having no ref fields"", that makes me wonder: in that case wouldn't it be possible that if a compacting GC was triggered right after loading that local and before reading its fields, and in case that GC moved the referenced objects, those references stored in the local could become invalid? As in, if the runtime treats the type as having no ref fields that would make me think the GC wouldn't be properly tracking the object references in its fields either and updating them as needed? Am I reading this wrong or maybe I'm just missing something here? Thanks! 😄"
"The line is evil and will make people read it wrong, I'd add a ()"
">! [](http://example.com/codeflow?start=40&length=1)

If I were you, I would disable nullable analysis for the entire file instead. It really doesn't help much in tests, quite the opposite. It forces us to do some extra work to suppress warnings one way or another. The test is going to fail anyway if something is wrong. It is not meant to handle every possible scenario, just specific scenario we have at hand. #Closed"
Taking a look on what went wrong here
"Comment looks to be on the wrong line.. should be above line 164, no?"
"Unfortunately it uses it to get names for methods and types :( It's dumb, but it is what it is.
"
"This change looked wrong until I realized that this is the *fourth* declaration of `a`, and the first declaration has type `A1`, which is the type shown here.
There is a test below showing that a variable whose *only* declaration is of type `true | false` will still print as `boolean`."
"I wanted to cache results in `createJsxAttributesTypeFromAttributesProperty` (as it's called at least twice for each overload resolved through JSX), but it _could_ be called in a contextual context (and often is), in which case caching indeterminate results would be bad. I'm not in for putting ad-hoc checks on cache safety at every use-site - I'd rather `checkExpressionCached` make it impossible to do the wrong thing."
"I've just quickly checked which tests are failing when unwrapping is commented out and seeing following types of failures we check for (84 tests failures total in System.Text.Json.Tests alone):
- property/element/key type is not valid for serialization - this is happening when converter is determined and converter is required for constructing JsonTypeInfo
- while determining properties: invalid naming policies etc. - this could potentially be delayed although it cannot be moved to `Configure` - the latest we can move that to is when user first time accesses properties (we will have to do that for source gen already)
- invalid converter (i.e. different converter type that property type) - again this should be done during construction
- extension property is of wrong type - this could also potentially be slightly delayed (to first time accessing properties)
- invalid property type
- couple of other sanity errors (i.e. combining number handling with custom converter for numbers)
I'll stop checking here.

Given above I don't think it can really be delayed. Also note that this is happening only during construction of JsonTypeInfo which is a one time operation"
Would it be better to skip items that were expected && present and only show the missing and extras? Collections might be huge in the general case with only one item wrong.
"I thought loop alignment added nops of varied lengths after everything else had been done.
```
void CodeGen::genGenerateMachineCode()
{
...
    genCodeForBBlist();
...
    if (GetEmitter()->emitRemoveJumpToNextInst())
    {
        genUpdateLiveRangesForTruncatedIGs();
    }
    genGeneratePrologsAndEpilogs();

    GetEmitter()->emitJumpDistBind();

#if FEATURE_LOOP_ALIGN
    GetEmitter()->emitLoopAlignAdjustments();
#endif

    /* The code is now complete and final; it should not change after this. */
}
``` 
And that alignment was flagged in `genCodeForBBlist()` but instructions added in `emitLoopAlignAdjustments()`. I may have got that wrong. "
"FYI -- this doesn't look like a response to my comment above about the API change. Did you put it in the wrong place. I'm assuming this is in response to my comment about using a walker.

FWIW, I still think a walker is overkill to gather up `<param/>` tags that are poorly nested. It's easier to just use `DescendentNodes(...)` like so:

``` C#
var paramAttributes = myXmlDocComment
    .DescendentNodes().OfType<XmlNameAttributeSyntax>()
    .Where(n => string.Compare(n.Name.LocalName.ValueText, ""param"", StringComparison.OrdinalIgnoreCase));
```

FWIW, I would not even bother will esoteric malformed cases like the one you showed above. I've never seen someone intentionally write an XML doc comment that way.
"
"Well, looking back at it this week, I think I was confused and thought that both line 2 and 3 were new, but only line 3 is. So fixing an existing wrong error is out of scope for this PR -- sorry I suggested it."
"Briefly: no.

This logic could be wrong in two ways. It could return false when it should return true; it could miss a `this.x` reference nested on the rhs of a binary expression with a `this.x` lhs. Making this code more complex raises the risk of this happening; I can only think of it missing `this[""x""]` right now. Missing a `this.x` reference produces (1) `any` (2) a bogus error, just like today.

Or it could return true when it should return false, which is the case you're pointing out. In this case, a single declaration incorrectly produces `any`, but other declarations will still provide the correct type, which will sometimes result in the right type being assigned to the property.

The penalty for being wrong isn't that bad, and the code is no longer so simple, so I don't think it's worth it, especially since no customers have complained that the *current* behaviour isn't correct."
"Well, the previous version only returns React if it *can* resolve `Text` via `checker.resolveName(symbolToken.text,...)`. This seems right, but clearly it produces the wrong results. I just don't understand why.

Edit: Of course the previous version forgets to handle ClosingElement, but I think that if it handled Opening- and ClosingElement the same, then both would be buggy."
"Because that's what we merged for `combineUnionParameters` in https://github.com/microsoft/TypeScript/pull/32056 :V

Also, ""some name is better than arg0"" isn't really true. Names carry semantic meaning, so let's say you have `(index: number) => any` and `(object: Whatever): any ` - calling the result `index` where's it's type is `number | Whatever` has the potential to be misleading. Particularly problematic is when the types are the _same_, but semantically different, like
`(length: number): any[]` and `(firstElement: number): any[]` - yeah, `number` is the type of both, but there're not semantically the same! So calling both ""length"" or ""firstElement"" would be dead wrong. Now, I had a _super old_ version of this that concatenated the names in cases like this, to `lengthOrFirstElement`, but that was shot down as too easily producing names that are unwieldy as unions grow. And thus, the preference for `arg0` was born. It carries no information, thus you can draw no (potentially inaccurate) conclusion as to the usage of the parameter."
"While export maps like this can exist, they're always wrong because they mess up the format of the file ts sees in either cjs or esm format importers, so the nested condition pattern case is probably even more important to support."
">     public virtual void F1<T>([AllowNull]T  t1, [AllowNull] out T  t2, [AllowNull] ref T  t3, [AllowNull] in T  t4)                  => throw null!;

It feels wrong that we ever allow input-affecting attributes on output parameters. #Resolved

---
Refers to: src/Compilers/CSharp/Test/Semantic/Semantics/NullableReferenceTypesTests.cs:29427 in 4ab452c. [](commit_id = 4ab452c43e6d2725f85f114c2a460a6fd411b16b, deletion_comment = False)"
I fixed minor problems from review; however I ran into problems dealing with File.Replace. Filed doc issue https://github.com/dotnet/docs/issues/22288 ; the code might also be wrong in master.
"The problem here is one of readability and cognitive burden just trying to parse out the expression to figure out things like precedence.  For example, just reading this i kept seeing it as:

`!!(node.initializer || isBindingPattern(node.parent)) && hasInitializer(<VariableDeclaration>node.parent.parent);`

I was then stuck for ages going ""why, if the node has an initializer, do you then need to check that the grandparent of the node has an initializer as well?""

Seeing and properly breaking up these complex conditionals is very tricky and easy to get wrong.  Even when finally seeing the appropriate location for the parens, it is then necessary to perform complex lookahead mentally to determine precedence.  For example, when reading this left to right you start with:

""ok, if the node has an initializer _or_ if it is a binding pattern"".  When you then reach the && you have to then go back and figure out what portion the && applies to.   ""oh.  it's on the right of a paren.  Ok.... let me backtrack and find the start paren.  Ok.  Found it.  Now what precedes that.  Was it something with lower or higher priority than what i started with?  Wait.  What did i start with again?"" :)

Now, there are many ways to address this to make the code more readable.  One way is to go the imperative route (which is my personal preferred form most of the time).  However, if that is distasteful, an alternative way is to instead rewrite things like so:

```
    return node.initializer || isBindingPatternWithInitializer(node.parent);
}

function isBindingPatternWithInitializer(node: Node) {
    return isBindingPattern(node) && hasInitializer(<VariableDeclaration>node.parent);
}
```

Now the code is _much_ clearer in how it should be read and how it shoudl be interpreted.   The naming gives an intuition as to what's going on, and there doesn't need to be time spent just trying to break down a complex conditional into something more reasonable in the brain.   It is still simple, functional, boolean expressions.  Just with appropriate clarity added to make comprehending it much simpler.
"
"@github I just tried on a project that I tried to convert to .NET Core many months ago and I can confirm that it finally works on x86 as well (using ACE/Jet driver).

Also, someone (that I believe was from Microsoft) posted this link more recently for the nightly NuGet package feed: https://dnceng.pkgs.visualstudio.com/public/_packaging/dotnet5/nuget/v3/index.json
Both @github and I have found this one to work better than the one I posted in the comment you referenced.

Perhaps the dotnet/runtime repo docs could be updated to make the correct nightly build feed more discoverable?  I don't think that it'd be too crazy to have a small docs section for ""Nightly Builds"" or even something as simple as: https://github.com/FreddyD-GH/runtime/commit/5ee341c5e44fb06efaedc3c54b4638f90e77b843?diff=split.  I know that, for me, when you guys first mentioned a nightly package feed, I found it super-difficult to find an actual URL of the feed mentioned anywhere."
"> > ```
> >                             builder.NonTypeMembers.Add(backingField);
> > ```
> 
> > After reverting behavior of `BackingField` we probably need to patch this place to not add fields with `IsCreatedForFieldKeyword: true`. Otherwise, `GetFieldsToEmit` is going to return it twice.
> 
> Just bringing attention to this thread. I think it is still relevant.
> 
> In reply to: [1000545813](https://github.com/dotnet/roslyn/pull/57076#issuecomment-1000545813)
> 
> Refers to: src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol.cs:4417 in [ec5d03a](https://github.com/dotnet/roslyn/commit/ec5d03a0ca3100d59c01e0a768be8ddfb9f3b676). [](commit_id = [ec5d03a](https://github.com/dotnet/roslyn/commit/ec5d03a0ca3100d59c01e0a768be8ddfb9f3b676), deletion_comment = False)

@github Per my understanding, `BackingField` and `BackingFieldForFieldKeyword` can never both return a non-null value. Given that, there shouldn't be any duplication (there is already a test for `GetFieldsToEmit` involving initializer).

Is my understanding of how `BackingField` and `BackingFieldForFieldKeyword` should work wrong?"
"Oh I had to switch the branch from `Default` to `Main` !
Is that included in latest VS2022 preview ? doesn't seem to but I may have things wrong on my side .."
"Just wanted to add a confirmation that there's a huge improvement from this PR.

Here's a before:
https://user-images.githubusercontent.com/697707/128908402-d34c2c8d-1b60-49b0-904a-dbd802920085.mov

And after:
https://user-images.githubusercontent.com/697707/128908325-0c07ff58-f80d-4317-9272-499881f44f9e.mov

@github you mentioned there would be no performance improvement (besides fixing the wrong positions they land on), but in the ""after"" video the squigglies stick to code and don't jump around as much. I wonder why that is."
"When `useDefineForClassFields` is false, `es2022` transforms simple static class fields into class static init blocks. This is a problem for users that need `useDefineForClassFields` ([lit](https://lit.dev) requires this). As well, class fields and class private members are widely supported, where class static init blocks are not. Class fields have smaller bytecounts than transformed output, and are easier to read. I understand that the code is equivalent on an engine which supports static class blocks, but this presents a serious problem for some users, and I think TSC should provide an escape hatch. 

Don't get me wrong, I think static blocks are super cool, and I'm looking forward to using them, but many users will want to use `es2022` to get native [private class members, which are widely supported](https://caniuse.com/mdn-javascript_classes_private_class_fields), but they'll get stuck with static init blocks that they didn't write in source - [a syntax error in most toolchains and on apple's monopoly engine webkit](https://caniuse.com/mdn-javascript_classes_static_initialization_blocks)

https://www.typescriptlang.org/play?target=9#code/MYGwhgzhAECC0G8BQ1XQgFzBglsaY0AvNAORikDcSAvkA

input: 
```ts
class A {
  static a = 'a';
}
```

output:
```js
""use strict"";
class A {
    static { this.a = 'a'; }
}
```

In my case, I have library sources that use decorators and need to be compiled with set semantics, but I also want them to have untranspiled private fields, which are widely supported.

Thank you for considering this case."
"I looked closer and it appears I was wrong.  If we want to rename that is fine, double check what is happening with the icall tables as well."
This is the main change to fix the wrong positioning.
"Seems to be working, in general:
```
  Installing pack Microsoft.Maui.Core.Ref.any version 6.0.100-preview.7.5661+pr.1788-sha.eb8ada7b3-azdo.43629...
  Writing workload pack installation record for Microsoft.Maui.Core.Ref.any version 6.0.100-preview.7.5661+pr.1788-sha.eb8ada7b3-azdo.43629...
  Installing pack Microsoft.Maui.Core.Runtime.any version 6.0.100-preview.7.5661+pr.1788-sha.eb8ada7b3-azdo.43629...
  Writing workload pack installation record for Microsoft.Maui.Core.Runtime.any version 6.0.100-preview.7.5661+pr.1788-sha.eb8ada7b3-azdo.43629...
  Installing pack Microsoft.Maui.Controls.Ref.any version 6.0.100-preview.7.5661+pr.1788-sha.eb8ada7b3-azdo.43629...
  Writing workload pack installation record for Microsoft.Maui.Controls.Ref.any version 6.0.100-preview.7.5661+pr.1788-sha.eb8ada7b3-azdo.43629...
  Installing pack Microsoft.Maui.Controls.Runtime.any version 6.0.100-preview.7.5661+pr.1788-sha.eb8ada7b3-azdo.43629...
  Writing workload pack installation record for Microsoft.Maui.Controls.Runtime.any version 6.0.100-preview.7.5661+pr.1788-sha.eb8ada7b3-azdo.43629...
  Installing pack Microsoft.Maui.Essentials.Ref.any version 6.0.100-preview.7.5661+pr.1788-sha.eb8ada7b3-azdo.43629...
  Writing workload pack installation record for Microsoft.Maui.Essentials.Ref.any version 6.0.100-preview.7.5661+pr.1788-sha.eb8ada7b3-azdo.43629...
  Installing pack Microsoft.Maui.Essentials.Runtime.any version 6.0.100-preview.7.5661+pr.1788-sha.eb8ada7b3-azdo.43629...
  Writing workload pack installation record for Microsoft.Maui.Essentials.Runtime.any version 6.0.100-preview.7.5661+pr.1788-sha.eb8ada7b3-azdo.43629...
```

But then if I look at the `.binlog`, the ""design"" assemblies are in the wrong folder:

![image](https://user-images.githubusercontent.com/840039/127153576-ba415b4e-8c59-413a-a596-45b1087c05f6.png)

I think the `*.DesignTools.dll` files need to be in a `Design` subfolder. Will look into this."
"@github This PR is currently wrong because now adding the children to the menubar directly does not update parents.

Should this rather update the parents, but not the binding context?

Technically, the menu items are being re-assigned, so lots of things might break - bindings, styles - anything that comes from the parent."
">this.SetIsExtensionMethod(false); [](start = 20, length = 33)

As we discussed offline, I believe this is the wrong thing to do. This is an extension method, the one that we cannot consume, but it is still an extension method.  #Resolved"
"2 reasons:
- That looks crazy 
- HTTP and Protocol are 2 words 😄 "
"@github - yes, that's our plan unless something goes wrong somehow..."
This looks wrong.  this means we would not properly escape things in something like ```Foo(int @github)``` anymore. #Resolved
"> Why tell mode?

### Short answer

It's all build infrastructure. Well, not quite but&hellip;

### More correct answer

The main changes are in a tool (`RazorSyntaxGenerator`) that does not ship and is only used manually. I am changing a single generated source file but only its contained `#line` pragmas and only to satisfy Roslyn.

### Background

The change corrects build failures I've repeatedly seen locally but aren't yet happening on the CI.

The src/Shared/ErrorPage/ErrorPage.Designer.cs file is checked into the repo and compiled into a number of our projects. Newer versions of Roslyn validate the generated `#line` pragmas in this file and complain when the ErrorPage.cshtml file isn't found because it's in the src/Shared/ErrorPage/Views sub-directory. That is, builds fail because the `#line` pragmas are wrong.

We fixed this in 'master' but haven't done the same in 'release/5.0' yet. This will soon be necessary because the Roslyn compiler ships (in part) with VS and core-eng updates VS on the build agents.

The specific fix is to correct the tool used to generate the ErrorPage.Designer.cs file (`RazorSyntaxGenerator`) and then use it to fix the `#line` pragmas.

An alternate fix would be to move the generated file into the Views sub-directory and then change the references in consuming projects. I chose the current fix because it was somewhat more localized and gave me an opportunity to fix the ""script also did not know `RazorSyntaxGenerator` had moved to this repo"" bit."
"Then is it the case that part of the implementation in the provider is in the wrong place, given that the `ActionDescriptor` itself is created here?

https://github.com/dotnet/aspnetcore/blob/2032c68402a8cae2bc9e312ddbedc6fa47878b97/src/Mvc/Mvc.ApiExplorer/src/EndpointMetadataApiDescriptionProvider.cs#L92-L99

The class modified here implements `IActionDescriptorProvider`, so I don't quite follow the argument that only action descriptor providers should modify it because it is one.

It's also not really modified per se, as it's just completely empty - there is no metadata at all, as it was constructed just a few lines earlier.

The application has no prior access to the `ActionDescriptor` before the method returns because it is the source of it.

If that's still incorrect, then I'll close this PR. In that case though, what is the intended design that would allow the action's metadata to be accessible to the API Explorer for inspection?
"
Nit: Test name still seems wrong after latest change.
"@github/runtime-infrastructure @github/aspnet-build  Starting with [dotnet/aspnetcore@`7454494` (#40507)](https://github.com/dotnet/aspnetcore/pull/40507/commits/74544942af6a574467bf3462da8b9782f37a306d) every pipeline is failing early with the following error. Does anyone have any idea what could be wrong?

```
##[error]CSC(0,0): error CS8032: (NETCORE_ENGINEERING_TELEMETRY=Build) An instance of analyzer System.Text.RegularExpressions.Generator.RegexGenerator cannot be created from /__w/1/s/.packages/microsoft.netcore.app.ref/7.0.0-preview.3.22154.1/analyzers/dotnet/cs/System.Text.RegularExpressions.Generator.dll : Could not load file or assembly 'Microsoft.CodeAnalysis, Version=4.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified..
```


Do we need to start bumping our [CodeAnalysis versions in Versions.props](https://github.com/dotnet/aspnetcore/blob/7d25adbc85aa0ca05f5e49ef8f2dd70e09263b10/eng/Versions.props#L191-L202)? If so, why isn't arcade doing this automatically?"
"yup.  this comment indicates how both the enum name and the property name now seem wrong.  Either we should update both, or we shoudl add a new enum and reference that here, with a comment saying taht SymbolUsageInfo can be used when ValueUsageInfo is .None."
">fieldOrPropertyType.IsReferenceType [](start = 62, length = 35)

~~Should this be `... && (!fieldOrPropertType.IsValueType || fieldOrProperty.IsNullableType())`?~~

I think my proposal was wrong, but I still feel there is a problem here. Probably with unconstrained `T`. #ByDesign"
why the added comma check?  this code needs comments giving examples.  This actually seems wrong to me...
"It feels like this is probably the wrong implementation approach. I do think that the public `ISymbol.IsStatic` should reflect what this PR achieves, but there's a lot of internal code that depends on the implementation of `IsStatic`. A less risky approach would be to explicitly implement the public version of `IsStatic` separately from the internal `Symbol.IsStatic`, and doc what the difference is."
"Yes he meant that, ok then my understanding was wrong"
"I can't remember why I put it in the spec; I think it was based on feedback of someone because I wouldn't have been smart enough to put either of these mime types in. If you believe `text/plain` is wrong let's remove it. Do we consider adding additional mime types in the future as a breaking change? IOW, would people commonly catch exceptions can do something different if a given mime type isn't accepted/produced by the server?"
"> This feels like a strange way to detect whether the statement that was parsed was meaningful. Could we maybe extract out a helper for ParseLocalDeclarationStatement that returns null when it has nothing to consume from the source text, and the ParseLocalDeclarationStatement method can call it and replace with an ""empty"" LocalDeclarationStatement to preserve behavior for existing callers?

I think that would still require checking if we are making any progress, but in a different place. I'd rather keep this logic here, to avoid people calling the wrong helper unintentionally. 

---
In reply to: [382867655](https://github.com/dotnet/roslyn/pull/41706#discussion_r382867655) [](ancestors = 382867655)"
"The risk I see with your steps @github is that in the window between 1 and 3 anybody could write a code fix that uses JTF now works, and then gets broken when we do 3. And that window in time may not be small -- I assume we'd ship at least one or two minor releases in meantime. In some sense we used the code we had here as a (partial) block so anybody trying to do the ""wrong thing"" would find out because their code doesn't work; if it suddenly does work they won't find out until it's perhaps too late and our mutual customers are getting hangs. I look at that very much as an opening of the barn door: we might be able to close it again, but the horse has already left either way.

Do we have confidence that this fix actually works? Given this is potentially waiting on tasks that have already kicked off or might be using AsyncLazy or something else that isn't JTF-aware in the implementation of ICodeFixService, is JTF able to let the right things through here? My concern here being an independent question of ""is JTF wise?"" but rather ""is JTF actually going to work here given we have an existing body of code that in places is not following JTF rules?""

I don't know if JTF has support built in but we _could_ do something where we have a handshake between the code fix at hand and the Wait() we do on the UI thread to make a SwitchToMainThreadAsync()-like method that is able to run code despite being in that wait. Conceptually something like ""we are blocking jumps to the UI thread, unless you are this specific jump with a specific password, and then we let you through."" Or some custom way to control exactly what is ""let through"". If it doesn't have support we _can_ implement a very constrained system that might meet exactly our needs here (and not try to solve the general problem) which at least means we can barn-door-opening in the general case. In some sense this means we're reinventing JTF but rather than making a general-purpose thing the specific purpose thing can be more precisely targeted. Is this evil? maybe, but it might be an alternative solution worth looking at if we haven't already.

More generally, out-of-proc is on the horizon here; I don't know if there we'd start running everything OOP except for things marked as ""I need to be in-proc"", and if those run with JTF it's already clear they're doing evil and the evilness is already called out."
"My initial thought is no. While it's not useful to have both values, it's not technically wrong. DefaultSourceFileEncoding will always take precedence over FallbackSourceFileEncoding. From the pure perspective of EmitOptions it seems fine, even if the compiler implementation will never use both. "
"`@github`, I think this being wrong would have broken it at runtime?"
"this is all wrong. Behaviors are meant to be declared in Styles, and have shared instances. So your behavior should keep track of an AssociatedObject, but an array of AssociatedObjects.

and then you need to keep a kind of proxy for the bindable context thing, so the bindings are applied.

I'm guilty of this, I'm the one who made Behavior inherit from BindableObject"
the IDE just makes it by default :-/ so I like to just get these kinds of these checked in otherwise it'll just keep making this change. This got defined wrong when it was initially checked in
"I KNEW IT. I knew that I thought I finally found something in a James PR and it turns out that I'm the one who is wrong. Pffsh. Figures.

@github assures me he thought the same thing here but it's really `this` that is copied byval into the lambda and since it's used only in the context of this same function, everything is just peachy."
"I know the redundancy sucks. FromJson, ToJson, Clone, Copy, TSM idl, TSE idl, TSE xaml, IControlSettings, ICoreSettings, IAppearanceConfig. It's awful."
"So currently, `wt -d c:\some\invalid\path` will do this:

![image](https://user-images.githubusercontent.com/18356694/102246700-a8b6da80-3ec4-11eb-8979-16a5c8584422.png)


That's not a super useful error, `ERROR_DIRECTORY` - I guess that makes sense, though not totally obvious what's wrong here. 

I'm okay with us leaving this for now. We do some validation of the `startingDirectory` on settings load, but nothing for directories passed as commandline args, and I think that's fine.

If we did want to try and pre-validate, we could pull `Profile::EvaluateStartingDirectory` into a helper, and only use the control's directory if it's valid. That's actually probably a good idea."
"Hi, 
There is still a problem with the Stepper when the increment is smaller than 0.5.
The rounding are totaly wrong per increment.
as example:
increment: 0.06 => 0.0199999999999996, 0.0800000000000001, 0.139999999999999, 0.199999999999999, ....
increment: 0.05 => 0, 0.0500000000000007, 0.100000000000001, 0.15, ....
and so on..

 Assembly: Xamarin.Forms.Core, Version=2.0.0.0 
nuget: xamarin.forms\4.6.0.800\lib\netstandard2.0\Xamarin.Forms.Core.dll

can you please check."
"> Yep, in place of where ignoreProcessNames was being used

Hey @github , I made the changes, but I feel that  they are incorrect and syntax is wrong , could you please verify and tell me what to do, thanks"
">IInvocationOperation (virtual System.Threading.Tasks.ValueTask System.IAsyncDisposable.DisposeAsync()) (OperationKind.Invocation, Type: System.Threading.Tasks.ValueTask, IsInvalid, IsImplicit) (Syntax: 'this') [](start = 20, length = 209)

~~This looks wrong. Only ""valid"" (amount of arguments correspond to parameters, etc.) invocations should be represented as IInvocationOperation. Also, it looks like System.IAsyncDisposable.DisposeAsync is not a valid candidate for pattern based dispose. We shouldn't treat it as one, The DisposeMethod should be null.~~ Confused System.IAsyncDisposable.DisposeAsync with C.DisposeAsync, the noode actually looks as expected.  #Closed"
"I think the existing variable names are falling out of touch with what they mean as we start teasing apart trusted/untrusted builds. To encourage YAML reuse between the trusted and untrusted pipelines, we need this abstraction.

There is no need to conditionally set these variables IMO because there is no circumstance that an untrusted build should run on the untrusted pool (and likewise for the trusted pool). Writing in the condition only increases the chance of having the build get assigned to the wrong pool."
"Ok thank you for explaining.

Do you think it's ok if I remove that test and I instead add a more general test that checks if the scrolling is done correctly, but that no longer checks if the selection and renderer behavior works correctly (see 1508ff1895f94373f22b609a4ee5793f30c47dee)?

Here's why I personally think that it's better: instead of mocking the renderer to check if it received the right values, the test was relying on the fact that the function `_NotifyScrollEvent` was always called right after it sent the scroll delta to the renderer. So the test was relying on an implementation detail, and not actually checking if anything overflows (at least this is what I understand, I may be wrong).

The problem is that because I've changed some code, the assumption that the tests relied on is no longer valid so if I want to keep the test I probably have to refactor it and mock things and I don't think that it's worth it."
"This is wrong, because this means XI can't instantiate NSInputStream objects for Objective-C subclasses.

For instance: NSUrlRequest.BodyStream is an `NSInputStream`, but when fetching that property, XI wouldn't be able to create an instance, because `NSInputStream` is abstract (and it's likely we haven't bound the actual Objective-C subclass, because it can be Apple internal)."
"Sorry, it looks like this is a case where we relaxed the analysis in a later version. We do have a behavior where if you return a bool constant we verify that variables referenced in NotNullWhen/MemberNotNullWhen have not-null flow state and otherwise give a warning on the return. It looks like nothing is wrong here, although it may be prudent to add a debug assert here."
"Yup I got this wrong, thought it failed because the conformance was defined in categories. Filing a radar now as my Swift test case for protocol conformance doesn't work (;"
"`MarshalDirective` is a workaround we have to work around a calling convention limitation with P/Invokes.

The problem is that certain native types (such as `Vector3`) are not put in the normal registers when used as parameters to methods, instead they're passed in special SIMD registers. Unfortunately managed code (i.e. P/Invokes) doesn't know about this, so we can't call these native methods using P/Invokes because the arguments would be in the wrong registers.

Our workaround is a bit involved: we generate a native wrapper method where the parameters are passed in the expected registers, and that calls the actual native function, so that the native compiler puts the arguments in the right registers. The `MarshalDirective` attribute tells the generator that it should generate a call to the wrapper method instead of the normal P/Invoke (and that the name of the wrapper method is the name of the native function prefixed by `xamarin_simd__`, and the library where the wrapper method is located - `__Internal` means the executable itself)."
"> So I would prefer not to validate it

Because we don't like the name that emerges in the exception?  Does that instead suggest we're throwing the wrong thing from this API?"
hrmm.. this comment seems to be in the wrong place.  what is this referring to?
"~The `delay * 2` (`delay` is up on line 37). There are two certificates that we are going to check revocation for in this chain, and each one is expected to take ~8 seconds since that `delay` is a per-certificate timeout. So in general we would expect the whole operation to take at least 16 seconds. But, as this PR is trying to address, Windows 7 appears to be timing out just a bit late.~

I see. I will reword the comment since it appears I noted the wrong thing."
@github sorry for pinging you here but do you know from the top of your head if what slngen does here is correct? I believe the parsing of the project name is wrong:  `Microsoft.Extensions.Logging.Generators.Roslyn3.11.csproj -> Microsoft.Extensions.Logging.Generators` instead of `Microsoft.Extensions.Logging.Generators.Roslyn3.11`.
"> Is the comment wrong?

Answering my own question, looks like the answer was ""yes"""
"Having re-read this I realized I asked the wrong question, but thanks for humoring me and answering anyways.

The question I really wanted to ask was: could you add a test for a local variable in the body named `value` and the rename conflict that will arise.
"
That exception blames the wrong thing though - it sends whoever hits it the wrong way. Code that fails fast is easier to work with than code that makes bugs take a scenic route through the codebase before they manifest themselves.
"@github: Made it `1 << 30` now. Billion digits with > billion exponent will give wrong answer. That OK?
"
"checking index.ts seems wrong. Wouldnt it depend on package.json and ""main"" field in there? "
"INVALID_STATE is an indicator that what user is doing is wrong; and while sometimes the user might get away with something wrong because they lucked out (e.g. using non-thread-safe object in multithreaded environment might sometimes work) I still think we should preserve the information when we have it.

We had a similar discussion about preserving the exception for the code I linked https://github.com/dotnet/runtime/pull/67342#discussion_r838850848

We might choose later to incorporate the two exceptions together (as an inner exception or as an additional field), but the point is that user should have an access to the information in one way or another."
"It's not about lifetime, but rather about not being moved by GC. Pinning makes sure that GC will not move it when it does compaction. We pin the individual buffers within the `QUIC_BUFFER[]` but we don't pin this holding array itself. Which I think is wrong and is only working by pure chance, but I'm not 100% sure. @github maybe you can shed a light here?"
"Also (I'm done after this I promise):
> Only Unreliable rather than Unmeasurable since it should be that in any case where the variance result is wrong, it's because the variance is overstrict because we have more relaxed arity-based rules on the signature than tuples have.

Implying that any false negatives will be discarded in favor of the structural result."
"Add this to make the compiler assert.

We also need to fix up the way these sort.

```suggestion
            var refStdcallSuppressTransition = (delegate* unmanaged[Stdcall, SuppressGCTransition]<ref byte, byte, void>)stdcallMethod;
            if (string.Empty.Length > 0)
            {
                // Do not actually call this because the calling convention is wrong. We just check the compiler didn't crash.
                refStdcallSuppressTransition(ref storage, 56);
            }
		}
```"
"`referenceLocation.parent` can’t be both a `BindingElement` and a `RequireVariableDeclaration`, right?

_Checks that function..._

Oh no, someone added

```ts
if (node.kind === SyntaxKind.BindingElement) {
   node = node.parent.parent;
}
```

without noticing that the return type of the function is `node is RequireVariableDeclaration` 🤦 

That function is now wrong but you’re not relying on the incorrect results of it, so this is fine."
"Think I discovered what was going wrong in the other PR with alignment; so have included aligning `rep stosb` and reduced the cut over to 128 bytes, so all lengths should benefit and at R2R time. (Didn't bring over the `ymm` size version)"
"Not sure what's going wrong with arm; is warning about mismatched files, otherwise isn't not sure
```
chmod: cannot access '/root/helix/work/workitem/*.sh': No such file or directory
+ chmod +x /root/helix/work/workitem/bin/coreclr/Linux.arm.Checked/crossgen
+ mkdir -p /root/helix/work/workitem/log/Linux.arm.Checked
+ python -u /root/helix/work/correlation/crossgen_comparison.py crossgen_framework --crossgen /root/helix/work/workitem/bin/coreclr/Linux.arm.Checked/crossgen --il_corelib /root/helix/work/workitem/bin/coreclr/Linux.arm.Checked/IL/System.Private.CoreLib.dll --core_root /root/helix/work/workitem/tests/coreclr/Linux.arm.Checked/Tests/Core_Root --result_dir /root/helix/work/workitem/log/Linux.arm.Checked
+ python -u /root/helix/work/correlation/crossgen_comparison.py compare --base_dir /root/helix/work/workitem/log/Linux.x64_arm.Checked --diff_dir /root/helix/work/workitem/log/Linux.arm.Checked
Comparing crossgen results in ""/root/helix/work/workitem/log/Linux.x64_arm.Checked"" and ""/root/helix/work/workitem/log/Linux.arm.Checked"" directories for files of type ""NativeOrReadyToRunImage"":
File hash sum mismatch for ""Microsoft.CodeAnalysis"" assembly for files of type ""NativeOrReadyToRunImage"":
 - ""/root/helix/work/workitem/log/Linux.x64_arm.Checked"" has ""8cdf4235c28b3da04429ca5a762cb8d1f83278cfb1b364c25663a109683a9a2b""
 - ""/root/helix/work/workitem/log/Linux.arm.Checked"" has ""242689aaf24704b75ee64ff34174f7870984773a3173b2c690453b2cdf44670e""
File hash sum mismatch for ""Microsoft.Diagnostics.Tracing.TraceEvent"" assembly for files of type ""NativeOrReadyToRunImage"":
 - ""/root/helix/work/workitem/log/Linux.x64_arm.Checked"" has ""92daecb8a3dd0e1a258bc4820162d494eaabfcf048b60de2a0f1f87e51a2d881""
 - ""/root/helix/work/workitem/log/Linux.arm.Checked"" has ""5efc4130f37218df48b2b28422a610b1401b3500883c60502b4b9cc355aa1410""
File hash sum mismatch for ""System.Private.CoreLib"" assembly for files of type ""NativeOrReadyToRunImage"":
 - ""/root/helix/work/workitem/log/Linux.x64_arm.Checked"" has ""bd1e9612235f866e2845ff9e0a299e2849253d274bb1aaec74b9f8d517f9e1b2""
 - ""/root/helix/work/workitem/log/Linux.arm.Checked"" has ""b3bb52ab337f61f3ca8bb60ca85d313d79e50c169dc487b206395e0955764c58""
File hash sum mismatch for ""System.Private.Xml"" assembly for files of type ""NativeOrReadyToRunImage"":
 - ""/root/helix/work/workitem/log/Linux.x64_arm.Checked"" has ""f18638349e8d1ba6a343b69dbd47f1c4f27b66d01ece1136e9486e4d005c3fb1""
 - ""/root/helix/work/workitem/log/Linux.arm.Checked"" has ""e9893d922a652df5fc5028419eb34e7523499124c1b225cb4a20069b69014620""
File hash sum mismatch for ""System.Runtime.Numerics"" assembly for files of type ""NativeOrReadyToRunImage"":
 - ""/root/helix/work/workitem/log/Linux.x64_arm.Checked"" has ""13d52bd8076b077234a5c71ccbf083e5f4e459c6483e4d93b829ce1c57f3b183""
 - ""/root/helix/work/workitem/log/Linux.arm.Checked"" has ""be730ba22ab9192251ddb835d772da7e00730b73935f5d87452fb22188173582""
Number of omitted results: 0
Number of mismatched results: 5
```"
"Bracket on wrong line? Or is this on GitHub only?
"
"> @github is there any reason we want this to live in the roslyn-analyzers repo vs. just being in the compiler? Considering the compiler is aware of d is double.NaN and translates it into double.IsNaN(d) this feels like a language level issue and not a library issue. Today doing this comparison is always incorrect and I would be very surprised if there was pushback from users here.

It is a wrong statement to classify CA analyzers as just .NET API analyzers. `Microsoft.CodeAnalysis.NetAnalyzers` inserted into the SDK has two big analysis areas:

1. .NET API analyzers
2. Generic code-quality analyzers, which are API agnostic, code quality improvement analyzers.

`CA2242` falls into the second bucket. It has existed for close to a decade, starting in FxCop, then ported to FxCop analyzers and now .NET SDK analyzers. I don't see a good reason to deprecate this ID and move it to the compiler - it seems like lot of unnecessary work for no net gain. I am going to mark this PR as blocked until both the IDE team and compiler team are able to approve that we want to go the route of moving API agnostic CA analyzers into compiler layer."
"@github I found a bug in the old (current) implementation (outside my PR).
I tested this in a totally different environment
`NormalizeWhitespace` is adding a space between ""-"" and ""="" tokens in the remove accessor of the event.
Please note that this bug makes the program invalid, so it is pretty bad.

```
class f
{
    event w x;
    event w e
    {
        add
        {
            x += value;
        }

        remove
        {
            x - = value;
        }
    }
}
```
Repro:
```
        private static void testEvents()
        {
            var content =
            ""class f"" +
            ""{\r\n"" +
            ""event w x;\r\n"" +
            ""event w e\r\n"" +
            ""{\r\n"" +
            ""add\r\n"" +
            ""{\r\n"" +
            ""x\r\n"" +
            ""+=\r\n"" +
            ""value;\r\n"" +
            ""}\r\n"" +
            ""remove\r\n"" +
            ""{\r\n"" +
            ""x\r\n"" +
            ""-\r\n"" +
            ""=\r\n"" +
            ""value;\r\n"" +
            ""}\r\n"" +
            ""}\r\n"" +
            ""}\r\n"";

            var syntaxTree = Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.ParseText(content);
            var root = syntaxTree.GetRoot();
            root = root.NormalizeWhitespace();
            var text = root.ToString();
        }
```

What do you want me to do?
1. fix the issue as part of this PR
2. add a commented Test in this PR and fix the issue in a separate PR
I definitely don't want to add a test enforcing the wrong behavior as this may cause an invalid AST.
"
"Ok, well I still don't quite get how this happens; since we get the same disassembly twice, and it's from the altjit (right?) so something is running the altjit twice -- it can't be that the base jit also reports disassembly as it would be different.

Since your fix works then I won't hold this up, but I think there's something else wrong here that would be nice to unearth."
"@github we’re having the same issue as @github, but I don’t understand your comment. Can you clarify what’s the difference between codebases with and without global files?

Previously we specified an array of files in the `files` property in `tsconfig`. But after getting rid of this array, the problem still persists and `assumeChangesOnlyAffectDirectDependencies` doesn’t seem to do anything, neither as a compiler option in `tsconfig`, nor as a CLI flag.

What could we be doing wrong?

Many thanks (and apologies if this is not the right place to ask)!"
"> The Function you mentioned will always get different size so there is no there choice. icmp6stats was working for years before breaking change. I could change that if that is consensus but I see that personally as unnecessary complication.

So, the thing here is that in fact, doing it the way it was being done (assuming a specific size, etc.) was *always* unsupported because it will *frequently* have breaking changes. It just was never given sufficiently strong warnings around making assumptions about sizes and locations. The recommended way has always been to use `sysctlbyname()` (which has a near-zero syscall penalty.) 

The actual reason for that requires hopping in your wayback machine and going back about 20 years. Basically, the concept of 'dynamic' sysctls (which may or may not exist) were introduced all the way back there, which shifted the recommendation to `sysctlbyname()` instead of statics on a global basis since `sysctlbyname()` can return `ENOENT` gracefully among other things. However, given it was 20 years ago, it wasn't really documented at all. And nobody ever went back and fixed the lack of documentation. They just got their fingers whacked with a ruler if they did it wrong.

So ultimately, doing it by static map or numeric *actually is the more complicated way* and technically 'the wrong way,' regardless of whether it's a single sysctl or a struct."
"> it now tightly couples the perf on one area to an implementation detail of another value and how it relates inheritance-wise to others

But perf *always* depends on implementation details of any external code and libraries you're using, because those implementation details affect the perf. In the next version of a library, the function you're using might be 2x slower (although realistically, that would usually be treated as a regression in corefx and it's unlikely to happen in the first place because they take perf of every area really seriously and have automated tests to detect any regressions). But still, when you're comparing 2 ways of doing something and you find that 1 of them is faster, in the next version, it could be the other one. So with perf, you're *always* relying on implementation details. That's why I tested this with multiple .NET versions.

Most importantly though, I'm not relying on implementation details with respect to correctness of behavior, only with respect to desirable perf outcomes.

> The cost is on maintainability. Anyone who has to maintain this now needs to hold all this complexity in their head and get things right on framework/core for any changes here in the future. That added complexity is more chance to get things wrong and to introduce subtle issues (like potential corruption).

I really don't see where the complexity or maintainability cost is. You're talking about this piece of code:
```c#
var @github = (TextWriterWriteReadOnlySpanDelegate)textWriter.Write;
if (@github.Method.DeclaringType != typeof(TextWriter))
{
    // Use the Write(ReadOnlySpan<char>) overload only if the method is overriden, because if it's not, the base
    // TextWriter implementation needs to delegate to the array overload and could potentially allocate a really
    // large array, which would be slower than the buffering base implementation.
    textWriter.Write(this.Source.AsSpan(span.Start, span.Length));
}
else
{
    base.Write(textWriter, span, cancellationToken);
}
```
That's literally just 1 condition - to check whether the `TextWriter` *supports* writing directly from a span, and 2 branches based on that, each do the same thing and both 1 line (or rather the second one calls an existing method). I really don't see where the cost is on maintainability. Both branches have the same behavior so if someone edits this someday and gets the condition wrong, it's not like the code will start behaving incorrectly or like there would be any corruption, as you're saying. It would just lose the perf benefit - that's literally it. The behavior would still be correct (and the tests also cover the behavior in both branches). And on top of that, this isn't the kind of method that has to evolve for new language features etc. This just copies a piece of data. This is the kind of code that is written once and usually stays the same because it doesn't need to evolve or change.

I'm kinda surprised by this. In dotnet/aspnetcore and especially dotnet/runtime, they routinely add all sorts of convoluted and hard to read code with many branches and different implementations to achieve perf benefits in any public API. This is really *nothing* compared to that. This is just one condition and 2 equally simple branches. I just don't see the complexity. I guess the recent perf enthusiasm in .NET hasn't reached Roslyn as much 😔

> Specifically, these types are already complex. To the point that it makes implementing language features harder

StringText.cs is currently 103 lines (without this PR). And as I mentioned, this isn't really the kind of code that has to evolve for new language features. This just copies a string.

>  I don't believe we do this elsewhere.

That doesn't mean it's complex though. 😳"
">I'm pretty sure there's some other stuff going on with like, turning parts of the value's type into the type in satisfies via contextual typing, most likely exclusively in cases that don't widen it. I might be wrong on that front though? That's stuff I don't really understand besides how to use it haha

That's pretty much exactly the stuff I'm asking about. 😄
Although in hindsight, my example was maybe a bit too simple to dig into it properly. 🤔"
"Tagging subscribers to this area: @github, @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

MicrosoftNetCoreAppRefPackRefDir was redefined on NetCoreAppCurrent and relied on the ResolvedFrameworkReference item which isn't available when an SDK is used that doesn't support the current TFM yet.  Redefining MicrosoftNetCoreAppRefPackRefDir on NetCoreAppCurrent isn't necessary and will stop the wrong calculation of the property.

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>ViktorHofer</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Infrastructure-libraries`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"Tagging subscribers to this area: @github
See info in area-owners.md if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

!! This PR is a copy of mono/mono#20658,  please do not edit or review it in this repo !!<br/>Do not automatically approve this PR:<br/><br/>* Consider how the changes affect configurations in this repo,<br/>* Check effects on files that are not mirrored,<br/>* Identify test cases that may be needed in this repo.<br/><br/>!! Merge the PR only after the original PR is merged !!<br/><hr/><br/>…r instead of aborting via g_error on an unexpected type.

We were hitting an issue in our fork ([this one](https://issuetracker.unity3d.com/issues/crash-on-raiseexception-when-calling-jsonutility-dot-fromjson-with-a-corrupted-json-file)) where a user was deserializing a corrupt managed object and crashing the editor. A discussion on discord with @github lead to interest being expressed in having this change also in mono/mono. 


<!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
-->


<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>monojenkins</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-VM-meta-mono`, `mono-mirror`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"> it's fine - it's much better than introducing full on new syntax.

@github This is wrong, we're using the `assert` keyword for something that isn't an assertion. Why? You're correct that this is a type-only statement, all the more reason to do literally anything else and not misuse a JS syntax.

There are plenty of other options that make sense without _completely_ new and ts-only syntax e.g.
```ts
// comment directive, nothing new

// @github=require
import type { RequireInterface } from ""pkg"";
```
```ts
// https://github.com/tc39/proposal-import-reflection

import type { RequireInterface } from ""pkg"" as ""resolution=require"";
```
```ts
// dangles off the already ts-only part

import type(resolution=require) { RequireInterface } from ""pkg"";
```

Please consider reverting this change."
"From a servicing perspective it's definitely better to dynamically load from the global install. But if these are scenarios where the dll is shipped with app anyway, then it doesn't matter.
There's also the ""how to acquire"" the .lib which is currently not very easy - so it also acts as a barrier for entry (it's much easier to get the .dll then the .lib).

The downside of not providing the header would be if people get it wrong in subtle ways... but I guess that's not that risky.

I'm fine either way."
@github it looks like there are a couple Android and WASM specific failures. Would you be able to provide some pointers on how to debug/diagnose what's wrong here?
"> I'm trying to follow @github suggestions to include only necessary ComWrappers projects, and now i get the following error building tests:
> 
> `/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.cs(648,76): error CS1514: { expected [/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.csproj] /runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.cs(648,76): error CS1513: } expected [/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.csproj] /runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.cs(649,10): error CS1513: } expected [/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.csproj] /runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.cs(652,128): error CS1002: ; expected [/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.csproj] /runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.cs(659,87): error CS1002: ; expected [/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.csproj] /runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.cs(2037,1): error CS1022: Type or namespace definition, or end-of-file expected [/runtime/artifacts/tests/coreclr/Linux.x64.Debug/TestWrappers/Interop.COM/Interop.COM.XUnitWrapper.csproj] 21 Warning(s) 6 Error(s) `
> 
> I've tried to discard changes but nothing, the errors still remains; could it be something dirty in artifacts folder?
> The error is due to a wrong generated class (public class _ComWrappers_GlobalInstance_GlobalInstanceTrackerSupportTests _TargetUnix_GlobalInstanceTrackerSupportTests _TargetUnix_) inside Interop.COM.XUnitWrapper.cs; it has a space inside the class name and i suppose is generated starting from the new unix dedicated project I've created (GlobalInstanceTrackerSupportTests_TargetUnix.csproj )

I've found the problem, there was a project related folder with space (GlobalInstanceTrackerSupportTests _TargetUnix) in obj  folder under assets. Maybe one of the first test I made had a typo"
"I looked at this a bit more, but I think `compRsvdRegCheck` returning a wrong value is extremely hard or impossible to hit because it requires us to allocate all non-volatile registers while still having the LSRA frame layout size be close to the final frame layout size. The former does not happen in debug code (I think), and the latter is very hard to see in non-debug code (all locals need to have a stack home -- probably not impossible with EH write-thru, but I gave up on getting LSRA to do what I wanted). This is because it seems hard to get a significant amount of spill temps -- not sure if it's possible to have arbitrary many of these."
"@github @github 
I had tried to implement the both ways and use superpmi replays afterward and got
`MISSING: Method context 91188 failed to replay: SuperPMI assertion failed (missing map IsFieldStatic): key 00007FFD63664B30
SuperPMI encountered missing data for 1 out of 260885 contexts` the both times. 
I suppose there must be some jitoptions allowing me to see what's wrong and debug it, but I haven't managed to find them. 

Here is the last run logs that I got.
[superpmi.77.log](https://github.com/dotnet/runtime/files/7769834/superpmi.77.log)
[superpmi.78.log](https://github.com/dotnet/runtime/files/7769835/superpmi.78.log)
 "
"> We're including the right header <stdalign.h> so not clear what is wrong yet.

`stdalign.h` comes from Windows SDK (e.g. `C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt`). Maybe we are using a bad Windows SDK version on CI machines?"
"@github @github Is there something wrong with the xharness bump?

I'm seeing this in some of the failed runs:

```
/usr/bin/python3 -u /datadisks/disk1/work/BF180A16/w/A18D0948/u/xharness-event-processor.py
/usr/bin/python3: can't open file '/datadisks/disk1/work/BF180A16/w/A18D0948/u/xharness-event-processor.py': [Errno 2] No such file or directory
```"
"Tagging subscribers to this area: @github
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.
<details>
<summary>Issue Details</summary>
<hr />

We are implementing Hot Reload feature support during debug session in our debugger (https://github.com/Samsung/netcoredbg) for Tizen devices. We have Linux/Tizen arm32/arm64/amd64 devices with custom built runtime, that have `FEATURE_ENC_SUPPORTED` defined in order to make deltas apply debugger API part work.

During netcoredbg functional testing, I found, that for Linux arm32  `ICorDebugFunction2::GetVersionNumber` return wrong code version (it return `1` all times), but execute proper (updated by deltas) code in the same time.
This happens for `IcorDebugFunction` received from current frame, that received from provided by callback ICorDebugThread (`IcorDebugManagedCallback::Breakpoint`, `IcorDebugManagedCallback::StepComplete`, …).

I found, that point of issue for Linux arm32 is wrong `DebuggerMethodInfo::FindJitInfo` work, that not return proper `DebuggerJitInfo` (with proper method's code version), since can’t find it due to 
https://github.com/dotnet/runtime/blob/ecb4e6c178b98aec29fbf3e7a70a820240c1dd0b/src/coreclr/debug/ee/functioninfo.cpp#L1526
comparation, that all times produce `false`. In case no `DebuggerJitInfo` was found by `DebuggerMethodInfo::FindJitInfo`, `1` version (initial code version) are used.

During investigation, I found that `m_addrOfCode` in `DebuggerJitInfo` have a THUMB code bit set unconditionally all the time:
https://github.com/dotnet/runtime/blob/ecb4e6c178b98aec29fbf3e7a70a820240c1dd0b/src/coreclr/debug/ee/debugger.cpp#L2498-L2500
In the same time, `addrNativeStartAddr` THUMB code bit at `DebuggerMethodInfo::FindJitInfo` call is not defined and in case of our issue, have assertion and even unconditionally remove it from address (since this required by other code logic) before `DebuggerMethodInfo::FindJitInfo` (`DacDbiInterfaceImpl::LookupEnCVersions`-> `DebuggerMethodInfo::FindJitInfo` ) call:
https://github.com/dotnet/runtime/blob/ecb4e6c178b98aec29fbf3e7a70a820240c1dd0b/src/coreclr/debug/daccess/dacdbiimpl.cpp#L1417-L1421

Looks like in `./src/coreclr/debug/ee/debugger.cpp` and `./src/coreclr/debug/ee/functioninfo.cpp` we calls `DebuggerMethodInfo::FindJitInfo` in proper way (with proper addresses in `addrNativeStartAddr` argument) and even have assertion about  THUMB code bit before call:
https://github.com/dotnet/runtime/blob/ecb4e6c178b98aec29fbf3e7a70a820240c1dd0b/src/coreclr/debug/ee/functioninfo.cpp#L1593-L1594
but other sources call `DebuggerMethodInfo::FindJitInfo` without care about THUMB code bit. In this commit I propose fix `DebuggerMethodInfo::FindJitInfo` itself in order to care about THUMB code bit right before compare addresses.

I tested this changes with our debugger on Linux arm32 and can confirm, this fix arm32 issue in `ICorDebugFunction2::GetVersionNumber`.

CC @github 

<table>
  <tr>
    <th align=""left"">Author:</th>
    <td>viewizard</td>
  </tr>
  <tr>
    <th align=""left"">Assignees:</th>
    <td>-</td>
  </tr>
  <tr>
    <th align=""left"">Labels:</th>
    <td>

`area-Diagnostics-coreclr`, `community-contribution`

</td>
  </tr>
  <tr>
    <th align=""left"">Milestone:</th>
    <td>-</td>
  </tr>
</table>
</details>"
"I think Picker is a input control, please let me know if that is wrong and i need to add the property to the interface instead"
"The issue that #5896 fixes is when the manifest AND unpackaged is specified. That PR tried to fix it by not including the manifest, however, this is wrong because the way the PR did it was to check after the nuget had already defaulted to None and thus never included it.

Technically, this is actually an invalid state with unpackaged AND a manifest, however since we auto-include we also need to un-include. And secondly, what if this is a multi-mode project? Instead of requiring the user to do weird conditions, just not exclude it for the user."
"@github 

I think, this changes little bit wrong, because an original issue was that sender was wrong.
sender should be SwipeItems but ObservableCollection

CollectionChanged event sender should be an original object that a owner of event"
"Noooo, this is the wrong fix.

Change `GetLocalizationSafeMessage` to remove the ""(Parameter"" section of the string"
"
> Just to check, what are the possible scenarios where this might conflict unexpectedly with other things a developer might be doing? Are they safe to have their own separate `UseStaticFiles` calls with different options elsewhere?
> 
> Not saying it's the wrong design - just want to get my understanding right.

Yes, you can have your own static files middleware and except for the case they are being mapped into the same subpath (or to ""/"") this should not interfere.

In the future, I want to flow the paths into the host so that it can map exactly the files the blazor app is meant to serve and nothing else. At that point there's no room for ever conflicting with the static files middleware."
"I think it's wrong. We are not building it in the repo so we shouldn't be signing it. It's signed by the build queue of symreader-portable repo.
"
"The use of ""Internal"" here seemed wrong given users may need to change it.  Can't tell if this is an established pattern though.  If it is then okay."
"wrong place for all these tests.  Tests for specific keywords should be in things like:

ReadOnlyKeywordRecommenderTests
RefKeywordRecommenderTests
InKeywordRecommenderTests

these tests will validate that everything works properly (including bringing up completion at the end of the file, or if the keyword is partially written). #Resolved"
Dumb question: why isn't the accessibility check in GetOverridableMembers?
"The worse part of this method is the crazy things that happen inside these closures.

This closure (like the one that I replaced), mutates peStream and signingInputStream in the outer scope when it is run."
">discardedUseSiteDiagnostics [](start = 125, length = 27)

It is not clear why is it safe to discard use-site diagnostics here. It is probably possible to have conversion test fail due to some error that we haven't reported before, therefore causing us to make wrong decision without reporting any error. #Closed"
"I still want to see how often VS uses wrong LCID and what LCID it uses. "
It seems like you're doing the merge wrong?
"> Why is that the case? can you provide an explanation to help make that clear?

since last token is only if selection is ended at the token. if this code is included in larger selection, that rule does nothing. I dont think I need to write that in the code since no point what it was doing wrong before when the code get removed. I wrote in the PR description what it is trying to do.

> It sounds then like this will lead to a behavior change. Can you write a test demontrating the existing bad 'random thing which is actually worse' and how it gets better with your change here?

tagging @github 
I dont think we need such test.

> it's not clear to the reviewer why the new place is the 'proper place'. Can you document the code effectively to explain why the new location is 'the right place'?

because the rule matter only when smart token formatter runs on ""}"" and no where else.
"
I'll fix this up.  I agree adding this is wrong
"this is the wrong place for this logic.  The place we should be doing this is where we're actually figuring out the symbol to preselect.  once we figure out htat symbol, we should update things *there* to say if we actually need to use another symbol.  We do not need change the ""display/insertion text logic"".  "
"It involves more changes in other files. Hopefully, i made them properly. Please correct me if I'm wrong.

---
In reply to: [254071119](https://github.com/dotnet/roslyn/pull/33148#discussion_r254071119) [](ancestors = 254071119)"
"This looks wrong, it won't catch people who call Emit with errors."
"Yeah, ""this is null only when some other local state says it will be"" and ""this isn't null when some other local state says it won't be"" are definitely big holes in the logic.

Effectively this type is a discriminated union; and assuming you read the typeID field you now know that the value can't be null.

Similarly with the cert.Get[Alg]PublicKey() methods... if you asked the ""what kind of thing is this"" you already know the nullarity.  We made them return null for the wrong algorithm for simpler flow control (and annoying cases like redundant identifiers)."
:memo: This file is in the wrong folder. #Resolved
@github @github correct me if I am wrong but the only BE target at the moment - is classic (non dotnet/runtime one) mono which uses some of the dotnet/corefx sources (but 2.1)
"> The ones named here were all of the formats that only had one possible formats. This switch insures that you properly update this method when adding new instr formats. With your change the assumption is made that a newly added instrFormat is an INST1 case by default. Where as before your chanfge it would assert on the newly added format.

That would assert only if you haven't added a new format **and** set fmt to the same value in one of emitIns_X_Y_Z functions. But if the latter is false (i.e. the function returns wrong format) then it wouldn't assert. 

After this change it is not longer required to update this switch and it will automatically check that the `fmt` set in emitIns is consistent with the one declared in instrsarm64.h table."
"I may be wrong here but, in case of 64-bit pointers, `*((guint32 *)s - 2)` may not be getting zeroed"
"quite possibly.  @github what are you visibly ""seeing"" as the wrong experience?  you say you're not getting all results.. but what does that mean in particular?
"
"(All test suggestions below can be tracked/PROTOTYPE as needed)

1. What is expected for `public Derived : Base { public new string M => null; }` scenario?
2. What is expected for `public Derived : Base { public string M => null; }` scenario? (I assume we still produce a warning about hiding)
3. What is expected for `public Derived2: Derived { public new object/string M => null; }` scenarios?
4. Please add a test where `Base` has a property, `Derived` hides it with a different return type, and `Derived2` tries to override with either return type.
5. These are also applicable to virtual methods.
6. I assume that an abstract method can be implemented with a covariant return. Please add a test.
7. Are interface implementations in scope for this feature and/or PR?
8. Please add a test with nested variance involved (returning `CIn<object>` vs. `CIn<string>`, or `COut<object> vs. `COut<string>`). Also consider nullability variance (`COut<object?>` vs. `COut<string!>` and some permutations).
9. Test with an override that doesn't have an implicit reference conversion from base. For instance, numeric types, types convertible via user-defined operators, etc.
10. Test with wrong variance in override (`Base.Method()` returns `string` but `override Derived.Method()` returns `object`)
11. I assume that we can't emit or run yet. If that's not the case, then let's add some emit and execution tests
12. low-pri: Test other implicit reference conversion scenarios, such as `Interface Base.Method()` and `TypeThatImplementsInterface Derived.Method()`, to lock-in the proper check
13. test some DIM scenarios #Closed"
i was wrong here too.  we should always fade for this case :)
unless the comment is wrong (?)
"Sorry, I don't understand what's wrong here. I only pop the underlying pointer to pass it to `_AssignChildNode`, which just reads the pointed object and copies it (copies object, not the pointer). It could receive it by reference as well, except it has to be nullable. Or it could receive reference to `unique_ptr` but that's anti pattern in such situations (not to force implementation). And I don't see any two `unique_ptr`s to hold the same value. "
"Feel like there is a missing `throw` statement or assert here. Given that we unconditionally return in the case of a single file (don't do the `NonSourceFiles.Contains` check) there appears to be an implicit assumption the data is correct. Basically if there is one file it must be the correct one so use it. 

In the case of multiple files though we do extra checking. But shouldn't that extra checking always match a value? It feels like if we get to the end of the `foreach` and have not matched a value then something is wrong here."
"@github @github I am pretty sure this is not what wee wamt longer term.

So the situation is when building natively on osx-arm64, we are currently using the osx-x64 dotnet core.  This means we are running msbuild in a Rosetta process.  When the shell is spawned, it apparently is also spawned in x64 shell. Here uname -m is returning `x64` or `amd64` and we get the wrong arch.  We get the rosetta arch and not the machine arch.

This hack allows CPUName as an environment variable to override `$(uname -m)`

We probably want a better environment variable if we want to go that way.
"
"Don't think the `MemoryBarrier` will provide that. The barrier controls read / write reordering from within a thread. It doesn't do anything to guarantee the synchronization of writes from other threads for this thread. 

Stated another way. Lets say Thread 1 is the one which enters the `if (managedKind ==)` above and T2 skips the if and goes straight to this line. In T1 the order of writes is indeed `_managedKindUseSiteDiagnostics` and then `_flags`. That does not mean the order in which the writes become visible to T2 is the same. The order in which the writes become visible could be `_flags` then `_managedKindUseSiteDiagnostics`. The `MemoryBarrier` doesn't help here because all it does is control the order of read / writes within T2. It doesn't control whether or not those reads are consistent with the writse from T1. 

It's possible I'm remembering part of this wrong but pretty much whenever u have to depend on the ordering of writes between threads there is usually this type of gap.
"
">symbol is Symbols.PublicModel.NamedTypeSymbol namedTypeSymbol [](start = 23, length = 61)

This looks wrong. Please add a test that imports a record to VB, gets a symbol for it (VB symbol) and pushes it through here by feeding  the symbol to C# symbol display. This is a supported scenario. #Closed"
"This file deals with the diff approach: https://github.com/dotnet/roslyn/blob/eb3e158f7bfb2556cc541419c966ac12ec672fdd/src/Features/LanguageServer/ProtocolUnitTests/SemanticTokens/SemanticTokensEditsTests.cs

And this test also tests the diff approach:
https://github.com/dotnet/roslyn/blob/eb3e158f7bfb2556cc541419c966ac12ec672fdd/src/Features/LanguageServer/ProtocolUnitTests/SemanticTokens/SemanticTokensTests.cs#L53

Also, you were totally right with your earlier comment about the original diff logic being wrong. 😅 "
"On netcore we only have one domain and it's named 'mono', so this doesn't actually offer any useful information and looks dumb in the logs. Note that this log is in netcore-specific code and I haven't touched the legacy equivalent. If you think there's a reason to keep it I'm happy to, but otherwise might as well clean it up."
sorry wrong base
"If the docs are wrong or don't add value, then I wouldn't have any concern removing them.

However, in this case I think this summary is adding value, as most people (myself included) don't know what a Quaternion is off the top of their head."
What is the failure mode that you are seeing? I do not see anything wrong with the reflection code that this PR removed. Is it exposing bug in the reflection code or in the Process type?
"this is wrong .. 
"
"Apologies, I did see that and I've accidently cloned the wrong repo. I'll make one for the referenced repo and attach a link."
"Hi @github,

Yes this fix is still needed.
If you want to navigate during the app init (like to implement an auto login feature), either the app crash or is not in the correct page after init without this change.

I updated the reproduction case with the latest version of the framework source code to confirm it still reproducible.
[issue4729_v5.zip](https://github.com/xamarin/Xamarin.Forms/files/7520750/issue4729_v5.zip)
In this reproduction case the app will throw an exception on start and if you add an delay of one second in the OnStart method  of the App class you will found that it doesn't crash anymore but now the stack is in the wrong order.

I regularly rebase this fix above the framework latest version and used it in my apps for almost 3 years now without any issue.

Like I say earlier if this fix introduce some issue or break some tests, please let me know.
I will do my best to fix it because I really want this PR to be fixed and I think i'm not the only one affected by this issue.
"
"```suggestion
        /// Attribute constructor used to specify the attached class is a source generator that provides CSharp sources.
```

Crazy aside: is it required to be a `class` or can it say be a `struct`? "
"`sizeof (module_path)` is wrong here. [According to the `GetModuleFileName()` docs](https://msdn.microsoft.com/en-us/library/windows/desktop/ms683197(v=vs.85).aspx):

> *nSize* [in]  
> > The size of the *lpFilename* buffer, in **TCHARs**.

Alas, this is *not* `sizeof(module_path)`. This is instead `sizeof(module_path)/sizeof(module_path[0])`.

Aside: this is the *first* time I've ever even heard of the `_pgmptr` global variable, encountered from reading those docs..."
@github while you may find it harder to read it should have a higher contrast ratio using standard relative luminance comparisons (correct me if I'm wrong). If this bothers you I suggest either reducing `terminal.integrated.minimumContrastRatio` a little or setting it to 1.
"> What is wrong about
> 
> ```ts
> // export function setModelMarkers(model: ITextModel, owner: string, markers: IMarkerData[]): void;
> 
> setModelMarkers(model, myOwner, []);
> ```
> 
> ?

It only removes the markers for a single model"
"@github, I appreciate your enthusiasm, but this isn't high on my priority list right now. We have crashes and bugs and errors that are required to ship 1.0 and this is code health rearrangement. Don't get me wrong, I love code health improvements. But I think this will probably land after 1.0 branch forks as it doesn't really *do* anything for the product."
"Nit:
```suggestion
        if ((argCnt == 1) || VectorConstantIsBroadcastedI64(vecCns, simdSize / 8))
```

would it be wrong to always call `VectorConstantIsBroadcastedI64(vecCns, simdSize / 8)` for simplicity?

"
"> The best way I feel here is to first generate all the syntax nodes for members using the same parse option, and then doing the insertion.

I'm not opposed to that. However, I feel like something is still wrong here:

> And later the default option is translated to the latest C# version

There should be some way to avoid this. Maybe @github knows?  It seems patently weird that we fork nodes and trees, but end up changing the options here. Would prefer we avoid that, or force the options to be what we started with. 
"
All region names have characters in ANSI. if the caller pass non-ANSI that will make it as if passing wrong region name anyway. The API will just return the default name at that time. The behavior should still be correct.
start with either `!unknown-` or `!wrong-` so it gets sorted along other important/critical logs
"### Discussion points
1. How do we feel about `Enter` being bound to `copy()` by default?
   - It's consistent with conhost, and worst-case, people can disable it. I don't expect people to bind `Enter` to anything nowadays anyways.
2. Should we backport a fix for the copy on select stuff?
   - It's a decently sized fix and nobody's complained about it. Ethically, we should, but there is _some_ risk due to the size. I'd basically copy over anything that references `IsInQuickEditMode()`.
3. Also found another ""bug?"" where if you select empty text while copy on select is enabled, we end up copying literally nothing. I'm guessing this is because we switched the default `copy()` behavior to trimming whitespace. Should that be a part of this PR?
   - I vote no. I'm also not sure if we should even commit to fixing this for 1.14 and 1.15. But I could 100% be wrong. Either way, bringing it to your attention.

CC @github as my favorite `copyOnSelect` user who definitely has opinions on this stuff haha
"
"Yes, the text is wrong, it was one of the first things i wrote.

```Skip native reference extraction from assembly. Those native references must be passed in to options directly.``` ?"
I was surprised to see these jobs removed entirely. I thought we could adjust the configuration to ensure they only run on rolling builds and not on PRs. Was I wrong on that?
Coding style is wrong in this file.
"As far as I understand the RFC, as part of the graceful termination process of outstanding streams, the server is still allowed to react to PINGs after sending a GOAWAY, so I had to add this state. Correct me if I was wrong."
wrong casing
"correct, but we have an issue, what if the caller does not have nullability enabled? The compiler won't complain, and the call will be wrong."
"> but when debugging the conversion operation wqs definitely on the other side

Does that mean `IOperation` is providing wrong info?"
"> Debug.Assert(RuntimeInformation.IsOSPlatform(OSPlatform.Windows)); [](http://example.com/codeflow?start=19&length=67)

what is the value of these asserts? is it possible at all something can go wrong here when we already checking with WindowsServiceHelpers.IsWindowsService()?"
"Do we care about this being an `IOException`?
It's technically a combination of IO + wrong headers.

Currently you would get
```c#
new HttpRequestException(
    net_http_content_stream_copy_error,
    new IOException(
        net_http_content_write_larger_than_content_length,
        new HttpRequestException(
            net_http_content_write_larger_than_content_length)))
```
after this PR
```c#
new HttpRequestException(
    net_http_content_write_larger_than_content_length)
```

(this extends to the rest of the exceptions we are throwing in this PR)"
"Yep, I ended up reusing `ContainsSpreadExpression` in the object-rest PR. It works pretty well, but the emit for will over-downlevel to ES5 with `--target es2015`. For example,

``` ts
var { a: [x, ...y], ...rest } = source;
// should emit as
var { a: [x, ...y] } = source, rest = __rest(source, [""a""]);
// but actually downlevels all the way to [1]
var _a = source.a, x = _a[0], y = _a.slice(1), rest = __rest(source, [""a""]);`
```

Because the destructuring code checks `ContainsSpreadExpression` to find out whether to downlevel a binding element.

[1] I wrote this emit; it's not pasted, so it might be wrong. You get the idea though.
"
"Dumb question.  Why .IsKind instead of "".Kind == ...""?
"
"I moved the xor related code into this method and noticed that the condition of this branch looks odd to me.
https://github.com/dotnet/runtime/blob/34493120aa0f698287a75ca6cb621ca4d0252b7f/src/coreclr/jit/morph.cpp#L13901-L13909
Is it actually possible for a child node of XOR node to be a compare node? If I'm not wrong then it is a good candidate to be removed and extend the previous condition with `|| op2->IsIntegralConst(1)` since ""x ^ -1 "" = ""~x"" and ""x ^ 1"" = ""~x"". Correct me if I'm wrong :)
"
"No reason, I just suggested it since it's a ""dumb"" string wrapper type."
"I habitually [type proper apostrophes by hand](https://twitter.com/atcb/status/1119075745446256640) when writing English sentences, including in code comments. (OS-level quote replacement tends to be unreliable, and hard to fight when it’s wrong, e.g. figures like `50° 32' 24.1""` or `6' 2""` require straight hatches. Bad typography drives me bananas so at some point I disabled all the auto-replacement features and started typing the character I mean.)

Is there some environment where this causes a problem? I’ve never had any issues, nor has anyone ever noticed or pointed it out 😄 "
"this test seems wrong.
"
"Wrong resource.  
"
"Should this be a HashSet? It looks like we're adding a new string element ""System.Private.CoreLib"" to the list every time we call this method unless I read the code wrong."
"@github Not sure if we need to add additional checks that `isFunctionUsedInConditionBody` uses to test the same expression target, because, in a `BinaryExpression` context,  we just need to find the same symbol in all expressions from the right side ` && `, or am I wrong?.  Maybe you have additional test cases that need to cover?
"
"My initial reaction to this one was that this is wrong because `T` might have some property that would conflict with the remapped property type, e.g. if `T` was instantiated with `{ foo: string, boolfoo: number }`. However, it looks like that’s an unsoundness that [already exists](https://www.typescriptlang.org/play?#code/JYOwLgpgTgZghgYwgAgGIHt3IN4ChkHIAeA-AFzIDOYUoA5gNz6ECe5VN9ThyAXu9VohGuAL65cMAK4gEYYOhDIYAHgAqAPgAURCmoCUOZgQSLqyAPoUMWALzEmooA) independent of mapped types entirely:

```ts
interface Foo {
    x?: string;
    y?: string;
    z?: string;
}

function f<T>(x: T) {
    const _: Foo = x;
}
```
"
"This is using the wrong llvm build, we fixed the darc subscription. Closing so it can be picked up."
"Same reason I used `getWidenedType` elsewhere. I'll get rid of the calls since they are wrong.
"
">@github I did the changes as requested, but this problem #49632 (comment) still applies and I have no idea what's wrong with it and how to address it.

Looking into this.  It repros for me."
"What's the motivation for the change here? True we don't require code to be explicit about `ConfigureAwait` in the tests but it's not wrong either. "
"So it changes from wrong to right, rather than from nothing to something?  Makes sense."
"Thanks for the feedback!

> But it requires a unique error code, which means replacing ""This expression is not callable"".

That partially answers my question about the best way to make the code fix. But is it really desirable to replace this error message? I guess I'm worried about the rare cases where the `remove ()` suggestion is wrong, and then the new error message wouldn't really make sense. Should we try to also preserve the ""not callable"" error (the actual ""root cause""), or do you really think it's best to replace it?"
">> Just add #nullable disable at the top of the test file.

> Sounds overkill,

Quite the opposite. In my opinion, using nullable analysis in tests is an overkill. It simply introduces unnecessary overhead on every angle. A test doesn't have to handle every possible scenario. If it doesn't fail, there is nothing to get wrong about nullability, it is focused on a very specific scenario. 

---
In reply to: [1003255889](https://github.com/dotnet/roslyn/pull/58288#issuecomment-1003255889) [](http://example.com/codeflow?ancestors=1003255889,1003255889)"
"> If we're going to do anything here (and I don't think it's a particularly high yield scenario) we should add additional logic to `getIntersectionType` that reduces intersections of array types and tuple types

This was my first thought as well, but I noticed that dealing with unreduced intersections of arrays and tuples works totally as expected, from an assignability perspective. It’s only during the normalization into another tuple (specifically this last condition where it’s assumed that anything that reaches this branch can just become a rest element of the index type) that things go awry—so while eagerly reducing more intersections would prevent that, it seemed like unnecessary work to me. And while I agree that this is a strange edge case, there are examples that are weird and wrong enough that I thought fixing it would be worthwhile if it didn’t come at the cost of performance (which I need to check). But I guess my test cases didn’t show the worst manifestations of the bug:

```ts
type Intersection = number[] & [""a"", 2, 3];
type Normalized = [...Intersection]; // (3 | 2)[]
```

We can reason that `Intersection` ought to be `never`, and although it does not immediately reduce, the only types that are assignable to it are `never` and 3-length tuples where at least the zeroth element is `never`, which are arguably as good as `never`. And of course, `Intersection` is assignable both to `number[]` and to `[""a"", 2, 3]`. I have no problem with `Intersection` in its non-reduced form.

But after spreading into another tuple, it becomes `(3 | 2)[]`. This breaks the identity that I _think_ should hold, that `[...T]` is equivalent to `T` for any array-like `T`, because `(3 | 2)[]` is not assignable to `[""a"", 2, 3]`. So I’m not sure I see why eager intersection reductions would be necessary when no assignability problems are observable until tuple normalization happens."
"Also

> Does it matter that isDefinition may be wrong in a way that has no effect on CodeLens, the only consumer?

When you find-all-refs on a declaration of a symbol that has only 1 non-declaration reference, both VS Code and emacs jump to that lone non-declaration. I think that code must rely on isDefinition too&mdash;at least the emacs code did when I first wrote it in 2016.

In this case, making imports have `isDefinition: true` would mean that find-all-ref would not jump to a single import, but display the usual find-all-refs UI. I think this is fine."
"> superpmi seems to be failing with JIT failed to initialize

superpmi.py has an algorithm for determining the baseline JIT to download from the JIT rolling build and use, but it's fragile as it depends on your branch being branched from a local 'main' branch, so it might be wrong, and in this case, it's probably picked a baseline JIT from before the last JIT/EE GUID change. You can build/download and specify your own baseline, using the `-base_jit_path` argument to `superpmi.py asmdiffs`"
"@github reordering them would certainly be a better choice, but it isn't trivial for me, as I'm no expert in the details of how the JIT really works. As the reverse p/invoke is added to the prolog/epilog in the flowgraph stage, and the inlined call frame logic is handled during lower; however, I'm not comfortable making such a change myself, as the fix looked to be more involved than I was prepared to handle, and prolog/epilog code is notoriously fussy to get right. That said, if this gets checked in in the current state, I'll open an issue against the JIT team to look at coming up with the more optimal fix. I've been able to get this to reproduce reliably by running the determinism test in a loop under jitstress1 mode, so verifying a more complex fix is not a difficult task.

@github Rare is possibly the wrong word.... possibly, less common would be a better term. There are certainly scenarios in which the reverse pinvoke to pinvoke logic is in the same function, but I don't see that its all THAT common. (Also, the penalty from using the helper functions isn't terrible.) I'm pretty sure that we don't have significant test coverage of this scenario in our test beds as the characteristic assertion messages are quite rare."
"Why? What's wrong with this PR? Is it somehow prevent you from back-porting docs in the future?
As a user I usually go to method definition and read comment, and I usually assume that it's correct. I think you should either fix comment or remove comment at all, because now it confuse your users. I spent 20 minutes debugging the code, the last thing I thought of was a wrong comment in the official library. 
"
">  Is the portable rid supposed to be portable (that is: work across a range of distros)?

Let's say the answer is yes. You can build a portable RID, but if you build in the wrong environment, the result is not portable at all. If the answer is no, and you build it in the correct environment using an appropriate build configuration, the result is portable, irrespective of the RID itself.

IOW, I am not sure I see the relationship between a build being portable and the portable RID itself."
"> With this change you can achieve the same by invoking the following command from a fresh clone: build.cmd libs.sfx /p:RefOnly=true.

While the command you share is simple enough, what is wrong with keeping the libs.ref subset? The whole point of subsets is exactly that: Only build certain parts of the repo which you care about. The other nice thing about subsets is that it is simple enough to figure out all the available subsets as they are right there for you as part of the help of the build.cmd/sh command. Why do we prefer two different mechanisms to filter out projects? (Subsets and properties like RefOnly)

I think one of the main goals we should have with these kinds of changes, is to try to minimize the impact as much as possible to developers existing workflows and by removing subsets (which are likely being used by a lot of devs) we are very likely breaking their workflow. My suggestion here would be to keep the RefOnly logic, but also keep the libs.ref subset, and potentially also keep the libs.src subset which internally would build libs.sfx+libs.oobs subsets."
"> > [Edited] The rule is already there, but it didn't warn? https://github.com/dotnet/runtime/blob/main/.editorconfig#L22
> 
> I don't use an editor that reads .editorconfig, or that displays compilation warnings.
> 
> But I'll try to build with warnings as errors next time I modify c# files.

No no you got me wrong 😅, you can use the editor whatever you like. My point was the config is already there in place, why CI didn't fail when the rule was violated? Maybe the value is just set to `all` instead of `all:warning` ? 

cc @github "
"> I don't want us to be generating constructed type handles for the element types of arrays as a blanket rule because it's a waste.

I was wrong. This is observable. Fixed the dependency analysis to account for that and added a test."
"We can also implement the activity counting in our implementation. I mean, no use bringing in a new package just to do that. Unless we are afraid of crazy changes."
From what I understand these make sense to me. I got these bug fixes for free. Let me know if I am wrong.
"comment is the wrong "
"I've not dug deep on the null-forgiveness operator so correct me if I'm wrong. Is this quite right though? It seems like we're saying `Assembly.FullName` might be null, but that's fine and we'll assign it to a string that should be non-null. Or does this actually mean ""Assembly.FullName CLAIMS that it will return `string?`, but I know better and I'm telling you that that value will always be a non-null string""?"
"So `njsproj` requires every file to be listed explicitly? Does anything go wrong when developers add new files but don't list them here?

My guess is it just means they won't show up in VS. So:

 * If all developers on a team are using VS, then they'd add files using VS, and the project would be updated. Everyone's happy.
 * If all developers on a team are *not* using VS, then they add files some other way and the project isn't updated. But nobody cares because they don't need VS to know about the files, so everyone's happy.
 * If some developers on a team are using VS and others aren't, then everyone gets cross with each other... :)

Maybe that third case is something we can live with. But if it's any more complicated than this, it makes me question whether such a project type is a good idea."
"My guess is that your code here is correct and HttpConnectionDispatcher is wrong (as in, contains a redundant check), but would like you to confirm :)"
"At https://github.com/AzureAD/microsoft-identity-web/blob/master/ProjectTemplates/templates/ComponentsWebAssembly-CSharp/Server/Startup.cs#L23-L25 this logic is nested in IndividualLocalAuth. That looked wrong to me, can you explain why it should be nested?"
Removing this file is wrong. This is needed to proxy to the backend
"I would not trust the analyzer on this - just yet. There were lot of issues fixed in the analyzer recently for one thing. (Not saying that you should not pay attention and tells us about any discrepancies). The general rule we're trying hard to follow is:
- analyzer should not report warnings which the linker does not

So in short, if you see analyzer warning, but linker doesn't -> don't trust the analyzer, it's very probably wrong (and let us know so that we can fix it)."
Chose `tell-mode` @github. Please let me know if that's the wrong choice.
"Wrong SDK version. The [installer table](https://github.com/dotnet/installer) is giving an extremely out of date installer as well (7.0.100-alpha.1.21568.2). Where should I fetch the version from?

"
"Confirming my understanding:

When the editor has encountered what it and the language consider to be a ""potential commit character"", it lets us know that we should try to commit it.

There are two main exception cases where we do not commit, both of which are due to the chosen completion item having special, non-standard rules about filtering/committing.
1. The chosen item has explicitly declared that the typed character is to be used for _filtering_. That is, the character enters the buffer but the original completion session keeps running.
2. The chosen item has explicitly declared that the typed character is *not* to be used for committing. 

We check the above exception cases in order, so exception 2 actually means that the original completion session should be immediately halted. Then, the problem was that when halted after a `.`, that `.` was then not being considered as a trigger character for the next session because we were halting the wrong way.

---

So more to this PR, if `CommitBehavior.Cancel` is returned, that's our way of communicating that we actually know something the editor doesn't, and the completion session should continue on (the case of additional filter characters).

Then, every `CommitBehavior` _except_ `Cancel` means we are, in fact, ""doing"" the commit. There are three ways to mark it as such, one of which is `CommitBehavior.None`, and the other two non-`Cancel` commit behaviors that just tell the editor whether to handle TypeChar/Tab/Return non-standardly. In all 3 of these cases, the session is completed **and a new session is free to start if a trigger character had been typed**. This is why changing `Cancel` to `None` has the desired effect

---

@github Is everything above correct?"
"dumb question... why does it contain `ToString()` (with parens), but `GetHashCode` (Without parens)?  Is that just a test harness issue?"
">Diagnostic [](start = 16, length = 10)

This looks wrong to me #Closed"
"Did you try this? Do we actually print out any ""error"" message? As in ""There's no available runtime to run this app"" (or something similar)... The text you're printing here is just the ""How to fix it"", not the ""What went wrong""."
"We should check if `converter.CanConvert(underlyingType)` returns true here before CreateValueConverter. If not, throw. (and add a test for that). This just means the converter is essentially applied to the wrong property."
"hmm... the extension method is annotated as return a non-null value. Potentially by design but not desired... 

`SemanticModel.GetDeclaredSymbolForNode` might be annotated wrong? "
"> Are you proposing to remove sealed instead?

Yes.

> We can remove sealed if we ever have a more specific implementation. 

What is the point to seal it? This actually removes it from the list of valid override candidates in completion list. Making it very easy to miss to override the API properly. It is fine to provide default implementation in this type, but I think we shouldn't be sealing any of them simply because it sends the wrong message and likely to lead to an oversight when derived types are implemented. 


---
In reply to: [411548036](https://github.com/dotnet/roslyn/pull/43275#discussion_r411548036) [](ancestors = 411548036,411007115)"
I'm receiving `current` as `null` when calling `ReplaceNode` with callback: https://github.com/vanashimko/roslyn/commit/067050ef86fd34ab150b22b420163d20dbcd49ff. Seems to be I'm doing something wrong again :(
"I removed it because its behavior is wrong on big-endian.
I ran the benchmark for 32bit and there is a ~4% regression in the worst-case.

If we believe this kind of optimization is necessary, I can add an alternative version of it - initial testing showed it can save ~15% from ctor time for simple Uris."
">AssertEx.SetEqual(cMembers.ToTestDisplayStrings(), [](start = 12, length = 50)

nit: The re-ordering of arguments seems wrong. The first parameter of `SetEqual` is ""expected"".  #Closed"
"Without having run it or really grokked everything in here yet this seems wrong. The ContainerArea should be the region of the TabbedPage that does NOT contain the tabs itself. So in general this would be 0, 0, r - l, b - t - bottomTabBarHeight"
"Hmmm.... that would assumedly need the array to be sorted on the VTID, which isn't a very obvious order, and is the kind of think you could easily get wrong. You'd also lose the readability of the logical order (e.g. grouping the fallback id with it's primary id), which is a bit of negative. The switch does feel unnecessary repetitive now that it's a flat list, but I'd probably still prefer it to an array map if that array had to be sorted. In terms of efficiency I wouldn't have thought there'd much difference - I think the compiler is quite good at optimising a switch. "
"@github - dumb question.. let's say we introduce ""m"" for minimized, and then I write -mf. What will the command line do: minimized focus or move focus? :smile:"
"BTW I also tested today whether there's any difference in the generated assembly between using `mutable` and not and there doesn't seem to be any.

But this isn't really surprising anyways: As usual C++ continues to not have any rules forbidding aliasing non-const references, which sucks 🍑. Meaning: Every time (if on MSVC without strict aliasing support) or almost every time (with strict aliasing) you dereference a value in C++ you fetch it's value from memory, because the compiler can't prove you didn't change it as a side-effect somewhere else. In C++ every pointer is basically something of a 50%-`volatile` pointer. So yeah... `mutable` doesn't make it worse, because it's already suboptimal by default lol."
I feel that it is an indicator for running the sample on CI or locally. But I might be wrong.
Yes - it's auto updated - I think this is the commit which brought it into runtime... but I could be wrong: https://github.com/dotnet/runtime/commit/2f03850bade9930757281f8840b5c6745f3f9a3a
"i added these optiosn for tests and for local experiementation.  because persistence service fails over gracefully it can be hard to tell when something has gone wrong.  With this option enabled, we hard fail, which is great for local testing as you know immediately if there is a problem."
Yes indeed. Somehow I pushed the wrong local testing commit to this branch. Let me fix that.
"On the one hand, I'm wrong in saying that `.Contains()` is locale-sensitive. [It isn't](https://msdn.microsoft.com/en-us/library/dy85x1sa%28v=vs.110%29.aspx):

> This method performs an ordinal (case-sensitive and culture-insensitive) comparison

Alas, that means it's case sensitive. Hopefully that won't break anything.

That said, it'll accept with `some_file_name_that_contains_MACOSX.class`, so if you happen to have some resource that you _want_ that _contains_ `_MACOSX`, you're screwed.

I would thus suggest _two_ checks for `_MACOSX`, for a total of three:

```
if (entry.FullName.Contains (""/__MACOSX/"") ||
        entry.FullName.EndsWith (""/__MACOSX"", StringComparison.OrdinalIgnoreCase)) ||
        entry.FullName.EndsWith (""/.DS_Store"", StringComparison.OrdinalIgnoreCase)))
    continue;
```

Additionally, the commit message should be updated to use two `_`s to be consistent with the code.
"
">  What did you mean by ignores?

I assume (but maybe this is wrong) that it may be necessary to set `DOTNET_RUNTIME_ID` when building the source-built tarball on a distribution that is not in the graph of the SDK used during the build.
In this case, we'd still want the `OutputRid` to reflect `/etc/os-release`. We'd be setting `DOTNET_RUNTIME_ID` just to make the build work."
"To be honest I don't like this approach. I feel like Windows Terminal does the wrong thing by splitting all arguments by semicolon unconditionally. As far as I can see this is no different than cmd.exe splitting everything by space unconditionally, which is equally confusing. If we were to only split the startup actions by semicolon, then we'd solve this issue as well as improve the UX, by removing a surprising behavior (as semicolons should only have a special meaning for actions).

But I don't mind this PR, as it solves the most obvious case of this issue already."
"For these, I would actually assert that `_stringBuilder` isn't null. The API is being used wrong if it is."
I'm not sure this extra code is worth it and it's wrong for signature[11] != 0
Because I must have picked the wrong code fix. Good catch!
"~~This is probably still wrong, I think it was `arguments` keyword~~ Outdated, sorry."
"@github there's something wrong in the file check wrt tests enabled. If xharness is modified then we should run all (non device) tests.

```
monotouch-test (Succeeded; Ignored)
-Mac [dotnet] (Succeeded; Ignored)
+Debug (ARM64) [dotnet] (Ignored)
+Debug (CoreCLR) [dotnet] (Ignored)
+Debug (CoreCLR, ARM64) [dotnet] (Ignored)
+Debug [dotnet] (Succeeded)
```

^ hmm... maybe not (in this case) since they would not run properly yet (and the `dotnet` variation was run).

Still any change in `xharness` is an unknown (when the decision to run which tests is made) so **all tests** should be run."
Wrong branches!
"Does line 16096 handle the `const A =` test (external) and 16099 handle the `const B =` test (local)? The two tests differ in syntax, so I *thought* the difference in the two cases in getJavascriptClassType was syntactic, and that both needed to come from external files. I guess that's wrong, and the difference is external vs local?"
"1. Do we care if the name is missing?
2. Do we care if the name is wrong (i.e. squiggled)?
3. Why do we need to call ToCamelCase?  Shouldn't we follow the casing of the named argument?
"
"I... don't think so but someone can tell me where I went wrong.

`CreateReadOnlySpanFromNullTerminated` has two overloads. The `char*` works for Unicode (UTF-16). The `byte*` works for UTF8 (and thus likely ANSI), but gives you have a `ReadOnlySpan<byte>`, so we'd still need to get it in to a `string` or `ReadOnlySpan<char>` again somehow. So I just left it alone."
">Nope, you will have to manually verify it on x64 machine :(

Good news: The performance tests are showing a slight improvement on X86 (roughly 0.9 for all the tests).

I'm using Ubuntu 20.04 on an Intel(R) Xeon(R) Gold 5120T CPU @ 2.20GHz.

Bad news: The functional tests are failing. My own unit test was working - so I'll investigate what's gone wrong. That'll explain the test failures below too.
"
this was fixed in Jan 4. I think the tsc version is wrong here too -- it must be 4.1 or older.
"I think I’m ok with this targeted fix for now, but it would be nice to know if we need the same fix a few lines down. You could try replacing `indentation: undefined` with something like `indentation: 42` or something definitely wrong in order to find tests that touch that code."
"This fix for #32942 appears to be wrong or at least surprising.  I use this warning to detect possibly misused methods, and while this change avoids the incorrect *autofix* for an unused expression value, it also suppressed the warning.

Specifically, the warning now no longer works whenever an expression is unused due to being the result of a void-returning expression-bodied lambda; before, the warning was reported (as expected), yet the autofix was wrong.

Is that by design?  It certainly surprised me..."
"Looks like something is wrong. I am taking look at what went wrong.. 
"
"this is wrong too. In ES6 we need to emit this as the long form, since x does not exist in the scope.. so this sould be emitted as:
""x: m.x""
"
"> > The best would be to not call these functions if you want proper encrypted TLS.
> 
> So for, `EncryptionPolicy.RequireEncryptionDefault`, we should not call `SSL_CTX_set_cipher_list`?

Yes, that would be the best.
 
> > The choices that allow unencrypted TLS are also wrong as with the default SECLEVEL (which is 1) the eNULL ciphers are disabled.
> 
> I guess that means `EncryptionPolicy.NoEncryption` (`""eNULL\0""`) will always fail?

Yes, that does not select any enabled ciphers.

> And `EncryptionPolicy.AllowNoEncryption` (`""ALL:eNULL\0""`) will allow any cipher?

Not any, but all ciphers that are allowed in SECLEVEL=1.

$ openssl ciphers -s -v ALL | wc -l
73

$ openssl ciphers -s -v ALL:eNULL | wc -l
73

"
"It’s just an experiment, and in fact it’s more @github’s than mine, and I’m not sure what his thoughts on this are long-term. We’ve tossed around the idea of exposing this as an opt-in option. For my part, I’m currently pretty leery of that, because aside from the things that look clearly wrong in this diff, there are tons of constructs where we currently don’t check for whitespace, and adding a check to each of those places adds complexity and impacts performance."
I hit the wrong button 😄 (twice). I'll keep an eye on the build
"I've fixed the H2 failures and a few other bugs.
We should also add tests for different error conditions (like IPv6 for Socks4, no password provided vs wrong password etc.)

Thanks for all the work here, should be mostly finished now!"
"Why was seemingly only this test affected? There are many other places we test last error that I would expect to cause the wrong exception etc. "
">  The changes looked good to me even though choosing a Preview4 SDK at this point seems wrong.

I matched the SDK aspnet is using, as the preview 2 one had a bug with creating ZIPs. We could try preview 3 if we still want a signed SDK, which is soon enough and we still have the IJW issue anyway. "
"> 1. A new `cuint64.ts` module that stores it as two 32-bit pieces.  

I had this PR some time ago and will need to finish it soon and it's in the same area.
https://github.com/dotnet/runtime/pull/64845

I need to be able to convert C# `long` into JS `number` as part of the new marshaling.
But I need it to use all 52 integral bits of the underlying double. `Number.MAX_SAFE_INTEGER`
Beyond that range, it should round to next possible integer, and not go crazy by setting exponent bits.

My naïve implementation uses BigInt to do the conversion, but it allocates object. 
So I want to improve and use math+shifts instead.

Your `CUInt64` is also expensive by allocating array.  
I wonder if we could use 'Number' and it's 64 bits to store the bits and only do some math when we need full sized BigInt.
But that would be different math than in my use case, because we would store different bits.
And different math to get `Number`.

Thoughts ?

> 2. Exposed `stackAlloc`, `stackSave`, `stackRestore` 

That's OK. Soon I will need them too.

"
I know throwing in dispose is wrong but I'd rather do that then do sync over async...
"> What do you think of expanding this message to explain why routing should be first? I think it is useful to teach the dev about what is going on at each step. On the other hand the message is quite long already.

I really don't personally think we can use exception messages to teach people things, other than that the current thing is wrong. If you have a suggestion of how to reword this or some specific language you want me to add, I'd be happy to try anyway. 


> What about the scenario when some middleware has set an endpoint without routing, and we just want to execute the set endpoint? This is what EndpointMiddleware use to do.

I don't want this to work. I don't want the endpoint middleware to be optional, or to show conflicting examples. "
"For `$(UseProjectReferences)`, yes. The logic was wrong for `$(ReferenceReferenceAssemblies)` and `$(ReferenceImplementationAssemblies)` given everything builds against ref/ assemblies."
"I agree we use default values.  However, we also get bugs because of it :)

The default value does nothing (IMO) here but open up the possibility of someone passing in the wrong value.  By being required, that possibility is avoided entirely.  To me, that seems valuable.  Why even introduce that possibility?

I mean, i'm leaning at this point to just removing both errorcodes and just having a generic: ""Block bodies and expression bodies cannot both be provided.""  I don't think there's much value in having specific error codes for these different symbols kinds."
"So I've hit an interesting wrinkle with this that either proves you right @github (and my understanding wrong) or represents a mismatch between what the routing system considers the most specific metadata (the last one of a given type in the list), and what our projection into `ApiExplorer` considers the most specific metadata (the first one of a given type in the list)."
"We could even assume that `HTTP/1.` is actually a wrong version, and not that the request is bad. Updating the test to reflect that. That would be considered a breaking change, right?"
This has been superseded by https://github.com/dotnet/aspnetcore/pull/20494/files - we no longer use use machine-wide certs in these tests. @github correct me if I'm wrong and I'll reopen.
"Hah that's just dumb, will fix."
"> It's crazy that GitHub generated that ""diff"" when this was targeting master

oO right ... something else went wrong and it's a bit hard to find out what was it ...

kudos to @github 

> Do you know if there's a way to make the title bar match

Nop, I knew something was off, but now I really see it WHYYYYYYYY"
"This is wrong (losing other information inside the parse options you start with). See `WithFeatures` above for contrast.
Assuming we end adding such a compiler API, it needs corresponding API-level compiler tests."
"Latest Windows attempt do build the repo: running `restore.cmd` from root I get this:
```
...\aspnetcore\src\Servers\IIS\build\Build.Common.Settings(12,3): error MSB4019: The imported project ""...\
aspnetcore\.tools\msbuild\16.5.0-alpha\tools\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.Default.props"" was not found. Conf
irm that the expression in the Import declaration ""...\aspnetcore\.tools\msbuild\16.5.0-alpha\tools\MSBuild\Micro
soft\VC\v160\\Microsoft.Cpp.Default.props"" is correct, and that the file exists on disk. [...\aspnetcore\src\Serv
ers\IIS\AspNetCoreModuleV2\AspNetCore\AspNetCore.vcxproj]
```

No idea what I'm doing wrong :-("
"> it feels like it should be a pretty trivial function to write...

That's what I thought on Friday. I got it wrong.

Much of the complexity of mine is coming from the fact that we don't always have all the transitive map is often incomplete: prior to my change, we compute that project-at-a-time. In your pseudocode, you would need additional checking that transitiveReferences might not have that entry, and if so then you have to preserve that. I could alternately choose to investigate that further, but at this point I feel we're entering bikeshedding territory.

Your code is also missing one important point: you're only propagating the new direct references. If A -> B and C -> D, and I'm adding B -> C, then you need to get D added too. My first loop computes you need to include D, also accounting for the fact we might not know C's transitive references and thus instead need to propagate ""we don't know""."
"I mean consider you have something like:

`var foo = """";`

Then delete the first "" (say you hit the wrong key by mistake), and then type @$"". What does the undo experience look like then?"
Not sure if this needs some name to clarify it's also not being inherited or something? It otherwise seems like somebody might naviely write nullableContext == NullableContext.Disabled and that's *wrong*. #Closed
"Sorry, can you explain to me the architectural changes happening?  The picture above shows a Roslyn completion item.  So something is def populating it :)   I'm just pointing out that they're populating it *wrong* :D  

> Note: this will also impact Roslyn when you move to using the VS LSP client to handle presenting completion items.

Can you explain what the stack will look like?  We just did the work to switch to the new async completion presenter system.  Will we be moving off of that into a new LSP based presenter?"
"Just looking through the `AnalyzeSwitchStatement` implementation, we're setting `shouldRemoveNextStatement` always to true if there is no default. That's potentially wrong, especially in the case noted in #37949 

Maybe we can check if there is a default that makes sense before assuming we need to remove next? "
"> TargetOS will suggest a wrong meaning there as we cant build Linux version of coreclr on windows machine.

You can build the managed parts (System.Private.CoreLib) and I do it all the time. https://github.com/dotnet/runtime/issues/32991#issuecomment-592844413 shows the current command and command to use after Jeremy's build refactoring.

You cannot build the unmanaged portions today because of we do not have the right Windows-hosted Linux-targeting compilers readily available, but that should not be driving our designs."
Wrong license. #Resolved
"The results here were totally wrong. The code fix made a change in an unrelated method, with two impacts:

1. The original diagnostic was still reported in the same place, with a code fix offered
2. The iterative application of code fixes was an infinite loop, adding more incorrect code with each iteration

There was no way to port the test of local functions without this change."
I was referencing the wrong one...
"No, not to the best of my knowledge - System.Data is quite consistent with representing database nulls via DBNull.Value. I'll take another look at the SqlClient implementation to see if I'm wrong here and there's some edge cases."
"@github yeah, seems to work fine then. I prefer this way better because if we don't expose streaming API from `iconv-lite-umd` there is not chance that someone will accidentally use it in the wrong environment.

Can you restart the failed job? It looks like it was just some random failure. Otherwise it's ready then."
"So this is dumb. Here's a table of what happened:

|  | `<var-name>` | `.c_str()` | `winrt::to_hstring(<var-name>)` | `winrt::to_hstring(<var-name>.c_str())` |
|--|--|--|--|--|
| `wstring textData` | ❌ | ✔ | ❌ | ✔ |
| `string htmlData` | ❌ | ❌ | ✔ | ✔ |

So, for consistency and to make it look normal, I'm just going with the last one and wrapping in `winrt::to_hstring()` AND calling `.c_str()`."
"```suggestion
        virtual const COORD GetSelectionAnchor() const = 0;
```
I assume you don't want to allow people to modify the state. But I could be wrong."
"@github Just before submitting the merge request I pull the master brach and rebase my branch onto it. I'll try again.

@github The reason for the bug was indeed that `instance.shellLaunchConfig` was not ready. I was looking for a way to dermine when the `TermianlInstance` is ready and I encountered the `processReady` property. 
It could be that I got the purpose of this property wrong, so I labeled the PR as WIP, in that case my bad 😬.

And yes, in order to reproduce the bug close all terminals and click on Run Active File."
"Here's a test case which checks what happens if you ""terminate"" an OSC with a new CSI sequence:

    printf ""\e]11;rgb:FF/00/00\e[44mBlue\e[m\n""

My understanding is that the OSC hasn't received a valid string terminator so it should just be aborted, and the CSI starts a new sequence which should be executed. So I would except this to not alter the color table, but to write out the word ""Blue"" with a blue background (which is what XTerm does). Our current implementation executes the OSC, changing the default background color table entry to red, and then fails to execute the CSI, so it writes out ""44mBlue"" with the default color. I'm pretty sure that's wrong.

In short: This is a change, but I believe it's a bug fix, and we'd be matching XTerm (or so I assume - I haven't actually tested your branch)."
"Pretty sure this is the default ItemsPanelTemplate; if you don't set one explicitly, I think this is what you get. So I don't think we need this. (I could be wrong.)"
"It's wrong but possible. The standard has always been for the deflate-compressed content to be wrapped in a zlib wrapper, but some of the early web servers got it wrong:
https://stackoverflow.com/questions/9170338/why-are-major-web-sites-using-gzip/9186091#9186091
We could make it try both, though that gets complicated."
"> What is the mode of failure when the server provides deflate stream instead of zlib?

Exception saying the data is in the wrong format / can't be decompressed

> Presumably there are enough servers out there providing only deflate that this bug went unfixed for some time.

From what I've seen, it's more that very few clients actually request deflate because there historically was such confusion about what it meant.  But, yes, it's possible someone somewhere would break.

> I'd hate for us to break clients talking to those servers.

@github, opinions on what you'd like to see done here?"
"I don't get why we should not be able to detec whether they are auto implemented properties or not.
As for the initial post, this was my goal:
- collapse the auto implemented properties
- fix the double (wrong) extra line terminators on the initializers
The rest of the formatting should stay the same (and I added a lot of tests on incorrect syntax as well just to cover those cases).
With regards to events, I will comment them on the test question you commented."
"Coreect me if I'm wrong here - if we had a buffer like:

```
1234567890
```

And the cursor was on the `1`, and we inserted 5 characters, we'd call this with `(textBuffer, { 0, 0, 80, 1 }, 5)`


<hr>

Actually nevermind me. That works perfectly fine. I thought we'd start reading from the section we were writing from, so it'd look like 

```
12341234
```

or something, but nah this works fine. "
