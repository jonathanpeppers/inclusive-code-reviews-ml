text,isnegative,importance
_holy crap you actually did it_,0,0.5
_technically_ yes.,0,0.5
- [ ] Investigate caching TypeConverters for properties and types. I'd recommend going for a sourcegen solution and generate a switch instead of a dictionary to avoid allocation bump,0,0.5
- [ ] Investigate why ColorTypeConverter and EasingTypeConverter are whitelisted,0,0.5
- [x] - #code is having scaling issues (migrie: ✔️ I think; @github ✅ i can't get anything weird to happen ),0,0.5
- [x] - #code needs to account for scaling (migrie: ✔️),0,0.5
- [x] - Can we completely hide all pixel stuff into the renderer for the fake font scaling - Not likely in this PR,0,0.5
- [x] - Check #code (@github ✅ it works even better than before),0,0.5
- [x] - Gutter isn't cleared scaling font with wheel to size that makes fewer lines fit (migrie: ✔️),0,0.5
- [x] - Scaling font with Ctrl+mouse wheel doesn't work right (migrie: ✔️),0,0.5
- [x] - The buffer size changes when we drag across a DPI boundary 😮😮😮,0,0.5
- [x] - WPF control needs auditing,0,0.5
- [x] ~(Bonus Points) _maybe_ make these settings observable (we'll need that soon anyways)~ Nope,0,0.5
- [x] Fix #code being null,0,0.5
- [x] Fix tests,0,0.5
- [x] fix/add tests,0,0.5
- [x] fix/test Copy,0,0.5
- [x] merge master (new Profile setting),0,0.5
- [x] Profile has a few settings we handle manually (i.e. BI alignment). I need to hook those up properly too,0,0.5
- [x] really do get rid of #code internally,0,0.5
- [x] remove IInspectable crap,0,0.5
- [x] Update IDL with #code functions,0,0.5
- [x] Update spec and propagate changes from spec,0,0.5
- #code for any case this PR already handles for just Ordinal,0,0.5
- Commands with arguments that are complex could be presented with a ... in the grid on the edge that launches a modal with the raw JSON to be edited,0,0.5
- Concern with how to display/present the commands that people might not know about (easily buried in a dropdown/combo),0,0.5
- Do we want extensions to control the styling insides hovers at all? Right now we control the presentation and can try our best to make sure the hovers look ok with all themes,0,0.5
- I'm not sure how common this requirement is outside of MVC,0,0.5
- IEquatable has arity 2,0,0.5
- IEquatable is a nested type and container's name is and is not System,0,0.5
- miniksa on 4/20: We're going to leave this for now. It's too crazy to come up with a solution to this right now and it's not that bad of a transition with reflowing,0,0.5
- Needed to use the engine's scaling in the first #code,0,0.5
- one that indicates per socket the usage is safe for inlining,0,0.5
- Save the exception and not its value in the test after the scenario is complete,0,0.5
- seemingly fixed by 4a32b33,0,0.5
- Simply fail because the exception happened,0,0.5
- The bot did a terrible job at replacing these words - [EbookFoundation/free-programming-books#6801](#url),0,0.5
- The bot ignores all context whatsoever at [moby/moby#43441](#url),0,0.5
- The code fails to compile at [rust-lang/rust#95508](#url),0,0.5
- This is the simplest thing to do for now,0,0.5
- Turn the exception into an error,0,0.5
- We don't think we have a readily available grid control,0,0.5
-- | -- | -- |,0,0.5
---,0,0.5
:+1 for #code,0,0.5
? I've never seen the usage of backticks here,0,0.5
. image](ht,0,0.5
. recording](ht,0,0.5
... developers could do,0,0.5
.... Because I clearly wrote this with very little to no sleep 😅 yea wtf was I thinking,1,0.5
" Stupid context specific diff, did not notice",1,0.5
"_renderEngine->UpdateFone(newDpi, _desiredFont, _actualFont, whatever we want to add)",0,0.5
"- [ ] - Check that the #979 hack still works correctly, at the right location",0,0.5
"- [ ] Investigate #code usage in Core, and the reason it was ported there, and not deprecated",0,0.5
"- [ ] Investigate the usage of #code in Controls. It's probably unused, in that case #code and the 2 caches in TypeConversionExtension could go away",0,0.5
"- [ ] None of our TypeConverters have any side effect, and instances could be reused (we can speak for 3rd party converters, unfortunately...)",0,0.5
"- [unlikely] CurrentCulture case if we add ""IsAscii or fallback"" check",0,0.5
"- [x] - 1px cursor types will be very thin as they're not being scaled (_migrie_: wait is this bad? this looks crisp and beautiful IMO, but sure let's scale it)... Not scaling per Mike and Dustin opinion",0,0.5
"- [x] - Also related: Ctrl+mousewheel to increase the font size, then make a selection. Entire display disappears? When selecting a row, it gets repainted correctly. (migrie: ✔️)",0,0.5
"- [x] - Check initial sizing for padding, showTabsInTitlebar at 1.0 scaling (@github ✅)",0,0.5
"- [x] - Check initial sizing for padding, showTabsInTitlebar at high-dpi scaling",0,0.5
"- [x] - Dragging between monitors doesn't fully refresh, receives multiple events (migrie: still receives multiple events but ✔️)",0,0.5
"- [x] - Open vim.exe in one tab, wsl vim in another. Switch to tab 0. Drag from 125% to 100% display. Switch to tab 1. Vim there seems to reflow real badly. Might be b/c 24eb455",0,0.5
"- [x] - Settings reload doesn't work right for font scaling (migrie: ✔️, with a bug in vim below) (validated as working @github ✅ )",0,0.5
"- [x] - Vim is blanked. This is on master too.  (migrie: Not seeing this anymore, so ✔️? This might be the same issue that's fixed by 4a32b33, see below.)",0,0.5
"- [x] (after #7877 merges) address ""TODO CARLOS"", copy commands/keybindings/schemes in globals",0,0.5
"- [x] Check if the ""suppress the first resize"" logic works",0,0.5
"- [x] Dragging #code across the DPI boundary to a 100% scale display corrupts the first line of the buffer -> This is actually in master totally separately, moved to #5428",0,0.5
"- [x] It doesn't actually work most of the time. It was based off the false premise that we got three messages, which I have no idea why I was seeing consistently on Thursday and not Friday, but whatever. I'll yank all that code",0,0.5
"- [x] Open WSL vim. Add a line of text to a file, in the middle of the viewport. Write the file. Whole screen is cleared, except cursor line and the status line",0,0.5
"- [x] open WSL vim. Increase font size a bunch. Reload the settings (down to a smaller font size). Buffer seems to get corrupted, and not repainted correctly. (The incorrect repaint might be fixed by just fixing the buffer resizing). The artifact is highly similar to the one that was fixed by 436a05c",0,0.5
"- [x] Runtime error when #code is being assigned (only when loading settings.json, fine otherwise)",0,0.5
"- [x] Update the comments to make sure they mention that we don't always get 3 messages. Usually we only get two, and _rarely_ we get the useless first one",0,0.5
"- After initial PR being closed, the bot keeps sending PRs, effectly spamming the repos. For example, these 5 PRs were sent to the same repo within 2 days [#1](#url) [#2](#url) [#3](#url) [#4](#url) [#5](#url)",0,0.5
"- As you can see from the delegate, #code is always a reference type",0,0.5
"- Automatic saving: No. We don't want to thrash the JSON file. If we had an in-memory model struct... maybe. Or if we were using a tear-off window, maybe",0,0.5
"- Commands with arguments that are already stringable by the command palette (e.g. new tab 1, new tab 2) are offered as drop down items",0,0.5
"- Enabling css expands the potential attack surface. If someone finds an exploit in Chromium related to CSS, it could potentially now effect VS Code too",0,0.5
"- fixed in 4a32b33. That commit message is wrong, but this definitely is the fix for it",0,0.5
"- I have this delegate type, which is used to register message recipients with the ability to specify both the recipient type (so the input to the lambda expression is already of the right type and they don't need to cast), and the message type",0,0.5
"- I'd argue it'd be an abstraction leak. You want an observable collection, the fact that some callsites would need to perform range operations on that is just an implementation detail of your viewmodels. You shouldn't need to use a completely different collection type just to support this",0,0.5
"- I'm _okay_ with this, for now, but it's definitely a regression from 0.10",0,0.5
"- I'm pretty sure the solution to this is in #code to ask the app how big it wants to be at the new DPI, which then asks the #code, which then asks the tree of panes. Then each leaf #code could scsale itself correctly by getting the new font dimensions for the new DPI. This also seems _insane_. If we didn't have a TermControl as the leaf in a #code, how would it respond? It wouldn't know about DPI",0,0.5
"- IEquatable is constructed with a ""wrong"" argument",0,0.5
"- In the future, can migrate some of the ...s to launch a more robust editor based on the situation of the type of command, but default will allow raw editing if there is no specialty editor",0,0.5
"- It'd make updating codebases much more tedious, as now you'd have to swap the whole collection type in all locations rather than just being able to opt-in into a range update whenever necessary",0,0.5
"- OK, Cancel, Apply and/or a ""Save"" button and a ""Preview Now"" button.",0,0.5
"- One less conditional branch in the ""fast"" version",0,0.5
"- one that enables the inlining, which scales up the nr of engines",0,0.5
"- The core issue is that right now, the various UI frameworks don't support multiple collection updates. Where they come from is not what's causing the issue. That is, even with a new collection type, you'd get the same exact crashes until the frameworks were updated to handle the args. And if they were updated, then there would be no reason to have a separate collection type in the first place, as it'd just be the same exact one but with two new APIs. Those should just be added on what we have",0,0.5
"- The name match, but containing namespace name doesn't",0,0.5
"- This API should never be used by libraries (including MAUI itself and the toolkit). An idea would even be to put something like #code, add the #code attribute to at least warn MAUI devs",0,0.5
"- Unanimous ""launch inside the tab"", not a new window",0,0.5
"- Unanimous yes. Do this. TermControl with a new connection that isn't real, just filled with some dummy sample text like what people might use (emojis, powerline fun, text tables, colors, etc.)",0,0.5
"- Update Apex to call GetAllTags(), wait for it to return (signaling that the parse has completed) and then call the regular GetTags() call. This would still require the extender to implement IAccurateTagger<T>",0,0.5
"- Use #code, which is just terrible for performance/memory usage. We wanted to have the broadcast method have an amortized allocation cost equal to 0, and also to avoid using reflection completely in this implementation",0,0.5
"- UTF8 string literals or RVA data (e.g. either, hopefully, upcoming Utf8String literals or [ufcpp/StringLiteralGenerator](#url))",0,0.5
"- We need a rocket ship icon for ""Launch""",0,0.5
"- We should move this singleton #code to a place that has a name that says ""Use this only if you are sure that this code will only be used in single window apps"" (something more explicit than a comment in the documentation that most devs will not read)",0,0.5
"- when applying a binding (this includes AppThemeBinding, DynamicResource, ...)",0,0.5
"- Which css rules do we allow? Do we try sanitizing the css? If we do have a whitelist of allowed css, how do we handle feature requests to support additional properties",0,0.5
"- Worst case, could have a separate pipeline developers could execute when they suspect it's needed e.g. for this PR and the mega merge",0,0.5
"- Wrap each input handler in another one with just an #code parameter. This would've meant to completely defeat the whole point of structuring delegates this way to allow the C# compiler to cache them (as they're static), as we would've had to allocate a new display class capturing the input delegate every single time one was registered. Also each broadcast would've had twice the number of virtual calls, as each handler would've had to go through its proxy one doing the recipient cast first",0,0.5
".Lock(0, 0) and .Unlock work everywhere, which is why I'm using them, but sadly I can't use those to block deletion - you can still delete a file that has a lock held on it, and then create a new file with the same name in its place",0,0.5
"""but my recollection is that it broke in a substantial way as soon as runtime merged this change originally.""",0,0.5
"""normal"" AOT aka",0,0.5
"""null"" means ""task of null""? (no insane @github stuff here? :smile:)",0,0.5
"""Would doing that be a less disruptive way for newer frameworks to get range support?""",0,0.5
"""Wouldn't be surprised if other components in the ecosystem exhibited the same problem.""",0,0.5
"(3) is the least realistic here, but this is confusing even if the types are the same. At scale, I think that this is a bug, but maybe not one worth fixing. I guess it boils down to how much excluding arguments hurts performance in our tests",0,0.5
"(edit: I had the wrong line number before, sorry)",0,0.5
"(Granted, that would require having a lib with #code environment variables, which is *insane*...but kinda/sorts shows the utility of negative numbers. :-)",0,0.5
"(high horse) and *here* is where negative numeric types are handy!  *IF* (lol?) there were #code environment variables, this would become an infinite loop, as we'd loop from #code to 0 without nary a blip",0,0.5
"(I documented this a bit more, too)",0,0.5
"(no action needed) I know it's been like that before but it seems weird to me that lifetime of this namespace is ""until garbage collected"" (unless TryGetTarget gets called before that) - if the gc happens then we loop again until we succeed. Feels to me you should be storing the ref first in the local and then returning that stored result and adding same instance to the dictionary. Not sure why the looping is needed (can't see any state changing except this operation being somewhat random)",0,0.5
"(oh, i'm also an idiot since i read this as #code not #code.  But the above points still stand)",0,0.5
"(pseudo code, i have no idea if it's something good or bad since it's intrusive and also how properly speak english and being both nice and clear to the customer)",0,0.5
"(This is just historical info, not anything to do with this PR:  For example we definitely had issues where one thread raises an exception while another thread attempted to GetThreadContext/SetThreadContext.  The GetThreadContext/SetThreadContext would not happen atomicly and we could read half-torn contexts.  A lot of these weird helpers were working around those kinds of problems.  One implication of our old desktop code is that being in something like ""NakedThrowHelper"" would prevent us from redirecting that code because it's in this assembly helper and not in managed code and not having created a Frame...which would quietly work around a lot of issues because it simply stopped CLR from redirecting at problematic places...)",0,0.5
"(We do want to do this at some point -- there was a refactor in progress to make pane clearer/less clear/make it a control -- we just haven't landed it. If you are interested in _horriffic, terrible upheaval_ and working on such a change . . . I wouldn't call it out-of-scope!)",0,0.5
"(yes, i have made myself sad)",0,0.5
"(yes, I know this logic was there, but if we're deleting stupid code we mind as well delete more stupid code)",1,0.5
"[edit: never mind about the last part, it is a bug, and it's fixed in the nightly. Sorry should have checked that first]. Can you explain what's going on with f3's parameter type? We know that #code and that #code, so the nested conditional *should* evaluate to #code, but it doesn't seem to. Is that a bug? Or am I doing something stupid here? The really weird thing is that if I change it to #code, then f3 doesn't accept #code, #code *or* #code as its parameter",0,0.5
"@github  Ah good catch! I didn't realize I was calling the same method... The reason I made this change is that the SetHighlightedItemForProperty (int property, int identifier) is Obsolete and suggests that I use this one - which in this case does not make sense. Should I in fact continue to use the obsoleted one",0,0.5
"@github  same NRE, this a better fix ",1,0.5
"@github  thanks very muck, right now we will start this work on the Xamarin.Forms repo on the main branch",0,0.5
"@github  you can try again, i fixed that on main, and merged now on this branch",0,0.5
"@github - This is intended to optimize lab runs where we need to run build-test several times with limited sets of steps (e.g. native component build takes place on a different machine than managed component build and the layout gets generated on yet another machine in the lab pipeline) and Bruce noticed that we're unnecessarily duplicating some steps in such scenario. You're right that removing crossgenning of framework from ""generatelayoutonly"" is a breaking change, I'll fix that. Frankly speaking, the command-line syntax of build-test is a terrible mess with its arbitrary combination of exclusive (skip***) and inclusive (***only) commands",0,0.5
"@github : Compared with Asp.net Core that deliberately has no #code for some reasons, do you have any reason to define #code for Xamarin.Forms",0,0.5
"@github @github @github Ok, I am using the SharedFramework SDK to make a new #code nuget - it seems to be working at least for #code",0,0.5
"@github @github how likely do we think it is that people will implement the IPC protocol without using our DiagnosticClient library? We already know that the OpenTelemetry guys implemented their own, I suspect other profiler vendors might be inclined to write their own library given how we keep adding profiler stuff to it. It may be worth thinking about users of the lower level pipe too",0,0.5
"@github @github i removed the dispose When the ContentView goes away, the layer should bealso grabbed and dispoed, no need to set to null, right @github  ",0,0.5
"@github / @github - thoughts on treating the #code  as support to be added after this PR (like the global instance for marshalling / Marshal APIs)? You've both dealt with the #code side of this more than me - if we did that, would we be leaving a terrible inconsistency / gap that will bite us",0,0.5
"@github and father F*cker, u still didnt give no source haha:P what a sore f*cking loser haha:P",1,0.5
"@github any specific preference to the preferred sort, or just sort via StringComparer.Ordinal or something",0,0.5
"@github Any thoughts on this? Between #code and just adding the property to #code, do you see a clearly better option? Or a third way that we're missing",0,0.5
"@github Are there any docs on the low level design of liveshare?  specifically, i'm looking to understand how it works from a client/server perspective.  Where is information expected to live?  Who is responsible for ""source of truth"".  How clients and servers synchronize and ask questions in a way that is consistent, etc. etc",0,0.5
"@github are you manually updating these logger messages? I used a code-fix to do this in the past because it's far too easy to introduce errors / typos with such a large number of messages and it's incredibly difficult to review these in a PR. #url has a version of the codefix, perhaps you want to give that a go (in a separate branch so you don't lose these changes)",0,0.5
"@github at above commit, with GCStress=C, HeapVerify=1, on Linux arm32",0,0.5
"@github Can you add a comment stating the intent then? I could totally imagine somebody coming by, saying ""heh, that's stupid it's not sorted"", and adding in the exact thing you're removing",0,0.5
"@github Comments from @github were only some renaming of tests and spacing, and discussion on certain doc comments. I tried to edit them from mobile, but hit the wrong buttons (it's really quite tricky to delete one line in a file)",0,0.5
"@github found a slight hiccup with this, C# bindings often required #code. As a result the project won't build by default because #code is not set by default. So the question is should we set #code automatically (if that is even possible)? Other options are rethink about the default for the #code attribute, or just allow the project to fail and let the user set #code manually",0,0.5
"@github git says you are responsible for this... fibonacci is obviously called with the wrong number number of arguments, is this intentional",0,0.5
"@github great catch, if I'm not mistaken, I think pinned composite ids is also the wrong choice, we only care about visible ids when dragging in dropping. looks good",0,0.5
"@github I agree that with this calculator sample specifically, gray might work better with the general color scheme. Unfortunately, the proposed colors aren't accessible so I think it would be best to keep the current colors which have already been tested and validated for accessibility via our templates. Naturally, different colors might look better with different samples and scenarios, and folks can always change these styles as they wish. If you want to use grays for the calculator sample, I recommend a light gray button on black background in dark mode! But again, for the templates, I think keeping the current button style (with regard to colors) is ideal in terms of accessibility",0,0.5
"@github I don't think we're opposed to it, but let's see what the change looks like; it's hard to get a feel of it without seeing the end result. Worst-case scenario, we'll just revert the commits",0,0.5
"@github I figured this out friday, I think: #url",0,0.5
"@github I fixed the ugly rebase! Build is failing now because Shadow is using Color and Size though, so that still needs to be fixed",1,0.5
"@github I haven't tried this yet, but I'm wondering what it looks like after I have a new descriptor. Still, I need to destroy the old grid, right? Which will disconnect the whole workbench from the dom and reattach. Is that what you have in mind",0,0.5
"@github I implemented it a different way, please have a look again :)",0,0.5
"@github I saw this was done for ObservableItemTemplateCollection for Windows, so I copied that. Mainly just for the dispatcher, but if we pass the view in, then we never have to worry about reaching out into the Application. or Device. worlds",0,0.5
"@github I think musl libc is an incredibly small niche, but I can try to set up a VM if you're concerned",0,0.5
"@github I think the ask on #url is for restoring #code when the value provided in #code (that changes Position to the arg. passed) fails, so if you try to write to a file by first checking how much space is left, the Writing should start from where it originally was",0,0.5
"@github I tried the mono ""HelloWorld' sample (src/mono/samples/HelloWorld) with the interpreter on linux-x64 (#code in that directory) in a debug build of mono (#code)",0,0.5
"@github I would consider keeping this test as #code considering that the test above, #code, which uses a similar code minus the insane amount of dictionary instances, is",0,0.5
"@github I'm good with removing #code. The setting is deprecated and has known issues, which is why we added #code",0,0.5
"@github I'm stupid, wanted to do this on d16-8, looks like changing the target branch is a bad idea. I'll close and recreate",0,0.5
"@github in #url I remember some LLVM tests failed when I tried, but there are other changes in xamarin-android/main now. Could the LLVM-IR support @github added make this work now",0,0.5
"@github is a common prostitute, a sock-puppet",1,0.5
"@github is it ok for this to go into preview8? It's currently targetting the wrong branch. I will take care of doing whatever it needs to get done here, but I'll have to get the change through ask mode to get it in preview8",0,0.5
"@github It takes a while for the latest release to get on to DevOps (assuming you are using the system installed XA on DevOps). As they have to update the image, tests it etc",0,0.5
"@github let me know if the json was tool generated, in that case ignore my comments",0,0.5
"@github no i don't want it to move down to #code, either. Check out my edit. I want it to be DX only, which helps all of us",0,0.5
"@github oh my you're right, I feel so stupid! Thanks",0,0.5
"@github Once I have one approval, what's next? I see some build errors, but build was not so stable at this time. Should I somehow retrigger? Also who is merging this PR, me or somebody from the team",0,0.5
"@github or @github, any suggestions on resolving the Components.E2ETest and Mvc.FunctionalTests failures❔ I might be doing something wrong in this PR but it's not apparent to me. Sample stack trace [above](#url)",0,0.5
"@github please excuse me if this is a stupid question, but how do our CI runs the WASM unit tests? Are they being executed on dedicated mobile devices or are we using V8 and running them on a VM? I am asking because I would like to repro the failure and according to my research, I should follow [these](#url) instructions",0,0.5
"@github Rare is possibly the wrong word.... possibly, less common would be a better term. There are certainly scenarios in which the reverse pinvoke to pinvoke logic is in the same function, but I don't see that its all THAT common. (Also, the penalty from using the helper functions isn't terrible.) I'm pretty sure that we don't have significant test coverage of this scenario in our test beds as the characteristic assertion messages are quite rare",0,0.5
"@github reordering them would certainly be a better choice, but it isn't trivial for me, as I'm no expert in the details of how the JIT really works. As the reverse p/invoke is added to the prolog/epilog in the flowgraph stage, and the inlined call frame logic is handled during lower; however, I'm not comfortable making such a change myself, as the fix looked to be more involved than I was prepared to handle, and prolog/epilog code is notoriously fussy to get right. That said, if this gets checked in in the current state, I'll open an issue against the JIT team to look at coming up with the more optimal fix. I've been able to get this to reproduce reliably by running the determinism test in a loop under jitstress1 mode, so verifying a more complex fix is not a difficult task",0,0.5
"@github Seriously dude, Rome wasn't built in a day. We're working on it, one step at a time. We're tracking MRU tab switching over in #973, so please have that discussion in that thread",1,0.5
"@github Sincerely i dont know. The last time i tried to ""play"" with task and Navigation in UWP i gave up, i was getting a lot of random MemoryAccess violation that drove me crazy.... (expecially when navigation fast between pages)",0,0.5
"@github So the budget is common for all the callees for a specific root and it gets eaten very quickly with string.Equals, e.g",0,0.5
"@github stupid question, does it run the tree targets all the time? i.e. it would not considered passed until the test passed on the three targets? if so i would keep it to two if we can",0,0.5
"@github Sure enough if there's people enthusiastic about it! It's not trivial to rebase it, but it's not completely terrible either. I might be a bit busy during the start of this week but might have time in latter half. Feel free to message me here and push me forward again If I don't write an update here during this week. :-)",0,0.5
"@github Thank you, that's the kind of response I was hoping for",0,0.5
"@github Thanks for taking a look, appreciate it! 😊",0,0.5
"@github Thanks. That makes sense. But in that case, it seems like its not really ok to be conservative about when to do the transformation? eg right now it would reject",0,0.5
"@github there is something else weird here, but I think it's our test",0,0.5
"@github There was no MacCatalyst.todo, but most of these interfaces say they support MacCatalyst in the web docs",0,0.5
"@github there's a number of confusing NREs thrown on this branch that are unresolved. If you could take a look and share any tips you might have, that would be awesome",0,0.5
"@github this code path is only used for #code, #code and #code entries which are normally included in one of the Support Libraries. So we might have an attribute like",0,0.5
"@github We actually have two sanitization passes currently, one from #code and one from #code. The #code is the more complete sanitizer so we probably don't need the marked one",1,0.5
"@github We actually have two sanitization passes currently, one from marked and one from insane",0,0.5
"@github what are your thoughts about including an app context switch (default to the new behavior)? If there is a customer broken by this, they would still be able to receive the other fixes in the 6.0.2 patch. There is no need for a switch in main/7.0 as that is a voluntary update",0,0.5
"@github why not? my opinion is consistency is good. but worst is it silently failing and do nothing only because it couldn't keep consistency. as bad as we crashing VS, because outlining couldn't figure out a region",1,0.5
"@github will be looking into darc, I think. We can start with getting it to bump the dotnet/sdk version",0,0.5
"@github yeah I did git clean -xfd :/ This is what shows up in the error list: Error	MSB3491	Could not write lines to file ""obj\staticwebassets.pack.sentinel"". The process cannot access the file 'C:\Users\rachelkang\maui1\src\Controls\samples\Controls.Sample\obj\staticwebassets.pack.sentinel' because it is being used by another process.	Maui.Controls.Sample	C:\Program Files\dotnet\sdk\6.0.300-preview.22154.4\Sdks\Microsoft.NET.Sdk.Razor\targets\Microsoft.NET.Sdk.Razor.StaticWebAssets.targets	429	",0,0.5
"@github you're a fag. Learn it, know it",1,0.5
"@github, @github, In the stream context, is completing the transport output like this considered a suboptimal workaround or a refined solution? I'm unsure 🤷",0,0.5
"@github, could this issue possibly stem from not allocating sufficient time for mlaunch to complete?",0,0.5
"@github, could we explore different options together to find the most effective solution? Your expertise in this area would be very beneficial.",0,0.5
"@github, could we work together to address the concerns you have with your user-id and all edits on the platform?",0,0.5
"@github, do you mind revising this code for better clarity and maintainability?",0,0.5
"@github, do you recall whether we still use these for anything or can they be safely removed? Context [here](#url)",0,0.5
"@github, encountering unexpected buffer sizes can lead to serious issues. Let's ensure our method handles such situations gracefully to prevent any potential problems.",0,0.5
"@github, Every coding style has its nuances, and it's all part of the learning process. Let's continue collaborating constructively.",0,0.5
"@github, everyone has room to grow and learn. Let's support each other.",0,0.5
"@github, everyone has their own preferences. Let's try to understand each other's viewpoints.",0,0.5
"@github, Everyone makes mistakes sometimes. It's okay, let's learn together and move forward positively.",0,0.5
"@github, How inefficent is this? By including it here, it avoids the need for a second dictionary lookup per page invocation",0,0.5
"@github, I agree that the worst-case scenario seems unfavorable -- however, it is highly improbable",0,0.5
"@github, I apologize for the delay in reviewing your PRs. Your hard work deserves timely feedback.",0,0.5
"@github, I appreciate the effort you put into your comments. It seems like you may have been a bit tired when writing them, but it's great that you're taking the time to contribute.",0,0.5
"@github, I appreciate your attention to detail and caution in reviewing changes. It's always good to be mindful of potential risks and make thoughtful observations.",0,0.5
"@github, I appreciate your dedication to fixing the rebase. Let's address the issues with Color and Size to get the build passing smoothly.",0,0.5
"@github, I appreciate your effort. However, I have some concerns about this code.",0,0.5
"@github, I appreciate your perspective. Let's think about this in a different way and find a solution that benefits us both.",0,0.5
"@github, I believe consistency is important. It would be beneficial if we ensure our processes are consistent to avoid issues, like failing silently due to inconsistency.",0,0.5
"@github, I believe I may have mentioned this before, could you please take another look?",0,0.5
"@github, I changed, but now it says",0,0.5
"@github, I don't anticipate the performance impact due to filtering to be significant on the Azure DevOps build machine, as it should be relatively empty compared to my HDD filled with various files and data ;-)",0,0.5
"@github, I encourage you to learn and understand. Let's work together to improve.",0,0.5
"@github, I got 2 simple words for you, Shut Up",1,0.5
"@github, I hope to offer feedback that can help improve the code. Let's discuss.",0,0.5
"@github, I made an error in my previous comment, let's work together to improve our code reviews.",0,0.5
"@github, I perform a double search per line to ensure I don't overlook cases like #code. I opted not to extensively utilize Regex as it's easy to make errors",0,0.5
"@github, I really appreciate your effort in contributing to our codebase. Let's ensure our comments are constructive and supportive.",0,0.5
"@github, I recommend reviewing and refining this code to better fit the required standards.",0,0.5
"@github, I see that you're actively tracking and addressing issues. Let's keep the communication lines open to address any concerns or questions that arise.",0,0.5
"@github, I see that you're not a fan of the current implementation. That's totally valid feedback. Let's work together to find a better solution.",0,0.5
"@github, I suggest exploring alternative approaches for this task to ensure a better outcome.",0,0.5
"@github, I think it's important to ensure that the #code and #code variables are properly handled to avoid any potential issues or unexpected behavior.",0,0.5
"@github, I think we may need to address some unresolved issues. Can we talk about it?",0,0.5
"@github, I understand the desire to clean up unnecessary code. It's important to ensure we're removing code thoughtfully to avoid any unintended issues.",0,0.5
"@github, I understand the frustration with the challenges we're facing. Let's work together to overcome them step by step.",0,0.5
"@github, I understand your concern about catching only the #code, it could lead to potential issues. Perhaps we can discuss a more comprehensive approach to error handling.",0,0.5
"@github, I would like to discuss my concerns with you constructively.",0,0.5
"@github, I would like to kindly request you to refrain from such language. Let's communicate respectfully.",0,0.5
"@github, I'm sorry to hear you're having trouble with this. Let's collaborate to find a solution that works for you.",0,0.5
"@github, If you're wondering who implemented an extension method that handles #code values for #code, that was me. I still feel a bit embarrassed about it",0,0.5
"@github, it looks like there may be some opportunities for improvement in the code.",0,0.5
"@github, it looks like there might have been a small oversight in the code diff. No worries, we all miss things sometimes.",0,0.5
"@github, it may be helpful to consider the impact our actions might have on others.",0,0.5
"@github, it seems like I might have skimmed through your changes too quickly. Let's take a step back and review them more thoroughly together.",0,0.5
"@github, it seems like there might be some disagreements with the approach we are taking. Let's discuss and find common ground.",0,0.5
"@github, it seems like there might be some frustration here. Let's address the issue together and find a solution that works for everyone.",0,0.5
"@github, it seems like there might be some room for improvement in these dummy values. Maybe we can work together to make them even better?",0,0.5
"@github, it would be beneficial for future collaboration if we could discuss your approach in more detail. Your unique perspective can help us improve our codebase.",0,0.5
"@github, it's always a good idea to double-check our assumptions. While unlikely, we should verify that #code doesn't contain anything unexpected.",0,0.5
"@github, It's always a learning process, and making mistakes is a part of it. Thank you for your time and effort.",0,0.5
"@github, It's important to approach discussions with empathy and understanding. Let's focus on constructive dialogue to move forward.",0,0.5
"@github, it's important to communicate intentions clearly in code reviews. If there are any areas that need further explanation or clarification, please let me know.",0,0.5
"@github, it's important to provide constructive feedback that can help improve the code or situation. Can you elaborate on your concerns?",0,0.5
"@github, It's important to provide feedback respectfully. Let's work together to improve the code in a positive manner.",0,0.5
"@github, it's worth considering whether a comment explaining the reasoning behind the code would be beneficial to future maintainers. Let's aim to help others understand our code.",0,0.5
"@github, Learning from each other is a valuable experience. Let's continue supporting and guiding each other in our coding endeavors.",0,0.5
"@github, let's collaborate to enhance the clarity and quality of this code.",0,0.5
"@github, let's discuss improvements to the damage that has been done.",0,0.5
"@github, Let's encourage open and constructive dialogue without resorting to negative language. Every question is valid and deserves a respectful response.",0,0.5
"@github, Let's maintain a respectful and professional tone in our communications. Let's focus on constructive feedback.",0,0.5
"@github, Let's promote a positive and inclusive environment for collaboration",0,0.5
"@github, let's strive for high-quality work together.",0,0.5
"@github, Let's strive to keep respectful and constructive language in our dialogue",0,0.5
"@github, let's strive to provide respectful and constructive feedback, even when addressing difficult situations. Let's focus on the code rather than personal remarks.",0,0.5
"@github, let's work on refining this confusing code to make it clearer for everyone.",0,0.5
"@github, let's work together to address any potential leaks in the code.",0,0.5
"@github, let's work together to ensure a smooth and efficient process. Your suggestions are always welcome.",0,0.5
"@github, let's work together to identify and improve problematic patterns in the code. By discussing potential improvements, we can enhance the overall quality of our codebase.",0,0.5
"@github, Let's work together to improve the code quality. Your feedback is valuable, and together we can make positive changes.",0,0.5
"@github, please ensure the content shared is valuable and meaningful.",0,0.5
"@github, Please ensure to maintain professionalism and respectful language in all communications",0,0.5
"@github, please refrain from promoting personal content on this platform. Let's maintain neutrality.",0,0.5
"@github, regarding the buttons in the UI, your point about simplifying event handling during the prototype phase is well-taken. Let's discuss further to come up with the best approach.",0,0.5
"@github, there are a few things that could be corrected in the code.",0,0.5
"@github, there's a saying that goes, 'If it looks stupid but it works, it ain't stupid.' Let's discuss this further to understand the reasoning behind the implementation.",0,0.5
"@github, this can serve as a helpful pointer for improvements in the code.",0,0.5
"@github, this was obsoleted around April 2019. Can we safely remove it now but do you think we should wait for another release? I'm not sure if this is something customers will be depending on",0,0.5
"@github, we all have strengths and areas for growth. Let's support each other in our endeavors.",0,0.5
"@github, we can learn from this experience and make necessary improvements.",0,0.5
"@github, We currently have two sanitization passes in place, one from #code and one from #code. The #code pass is more comprehensive, so we may not need the redundant one.",0,0.5
"@github, We prefer to consider the layout as a whole instead of adding view by view. This approach ensures that all the necessary calculations happen efficiently in the background. Let's strive to create a user-friendly API for this feature.",0,0.5
"@github, your attention to detail is appreciated. Let's work together to ensure the quality of our codebase.",0,0.5
"@github, your commitment to our projects is acknowledged and valued. Let's work together to overcome any challenges and achieve our goals.",0,0.5
"@github, your contribution is valued and your efforts are appreciated in our collaborative work. Your insights and perspectives are important for our team.",0,0.5
"@github, your contributions are valuable. Let's talk about ways to ensure best practices are followed.",0,0.5
"@github, your contributions have been noted and are greatly appreciated. Let's work together to address any issues.",0,0.5
"@github, your contributions matter! Let's improve together.",0,0.5
"@github, your dedication to our projects is commendable. Let's work together to find the best solution that benefits our team.",0,0.5
"@github, your determination to improve our codebase is commendable. Let's collaborate to address the issues and make necessary improvements.",0,0.5
"@github, your efforts to maintain the integrity of our code are recognized and appreciated. Let's collaborate to make further improvements.",0,0.5
"@github, your input is always valuable to our discussions. Let's collaborate to come up with the best solution for the code.",0,0.5
"@github, YOUR MOTHER SOUNDS TO BE SOME SLIMMY DONUTE. NOW WATCH WHAT'S COMING YOUR WAY. HA HA HA HA",1,0.5
"@github, your recent fix is a step in the right direction. Let's continue collaborating to resolve the build issues and improve the codebase.",0,0.5
"@github, your structured approach to tasks is admirable. Let's work together to understand each other's perspectives and find common ground.",0,0.5
"@github: How insane would it be to build #code ""separately"" for the Android Designer, so that we can #code out this logic for on-device use but leave it in for the Designer",0,0.5
"@github: Remember, we all make mistakes. Let's focus on learning and improving together.",0,0.5
"* ""c"" -> ""config.guess""",0,0.5
"* ""n"" -> ""nfig.guess""",0,0.5
"* ""o"" -> ""onfig.guess""",0,0.5
"* [x] About looks... Fine? The links aren't underlined anymore, but that might just be how WinUI works these days",0,0.5
"* [x] Icons throughout the app are still on the Segoe MDL2, not Segoe Fluent",0,0.5
"* #code now is a little weird, ""move the pane to tab 0 (to the left???)"" That doesn't make sense. The two options (#code and #code) would have to be exclusive",0,0.5
"* an unknown outcome with matching dominator -- branch is partially redundant along some paths, behavior requires path analysis",0,0.5
"* Assume we search backwards for some word, such that the matches are in lines 10, 20, 30",0,0.5
"* Double-rent from an array pool, leading to the pooled array being garbage collected? Don't do concurrent operations",0,0.5
"* Double-return to an array pool, causing two future instances to have accidental concurrency problems? We should guard against that, since it was shared state corruption",0,0.5
"* For HWIntrinsics, this represents no change in behavior. We just emit the instruction and it will fail at runtime with #code (Undefined Opcode) if the user didn't do the appropriate check",0,0.5
"* For other code paths, like #code this indicates we can't emit this without some corresponding #code check being in place (we don't currently support such a check, so we treat it as #code",0,0.5
"* for something like #code, the long form could actually just be #code 🤔",0,0.5
"* for the phi-destructuring we may need to disregard dominators with known-outcome VNs,  and/or else disregard the unreachable paths from those dominating compares. Here the path from BB01->BB03 is unreachable and so the phi value (j =2) is unrealizable",0,0.5
"* Garbage in, garbage out: ""12"" is valid as far as we're concerned",0,0.5
"* If the instruction is part of the baseline encoding but not part of the baseline, we get #code, which indicates you can only use it if behind some kind of #code check",0,0.5
"* If the instruction is part of the baseline, we get #code and it can be emitted without any considerations, for example #code can be constant folded to be #code",0,0.5
"* If the instruction set is unsupported, even behind a check, then we return #code and we should never go down that path",0,0.5
"* if we substitute in a phi value and we get a constant then the branch is partially redundant regardless of any dominating compare, for any pred that would bring in that phi value. We don't keep track of the correspondence between phis and pred BBs (indeed we don't even have a 1-1 correspondence) so we'd need to reconstruct this info somehow",0,0.5
"* It would be nice if we could do this if there's a static constructor. .NET Native could inline the ""did static constructor already run?"" checks. There was a previous attempt at that in #url (and corresponding #url)",0,0.5
"* Leave it here at the P/Invoke, and pass key.Length (RC2) or 0 (everything else)",0,0.5
"* phi inputs that lead to ambiguous outcomes may be partially redundant with a dominating compare (as was the intention of this PR) but again the resolution is only for those pred blocks that bring in that value. Other preds associated with other phis may have the same, the opposite, or an ambiguous outcome",0,0.5
"* The build doesn't really support OS subgroups (i.e. #code, #code), it's a gross hack where the system thinks it's actually the OSGroup OS (Linux for musl), some magic autodetection code in a few shell scripts tells it otherwise and causes changes in build behaviour, and the RID gets overridden post-hoc via #code. I've removed this assumption in a few places and parsed #code, because it's not possible to autodetect the difference between Android and linux-bionic based on anything in the rootfs",0,0.5
"* The collection has more than a few elements, but less than ~10K elements",0,0.5
"* The dictionary is built up from empty, as opposed to built by transforming a previous collection through add/remove operations",0,0.5
"* Then assume the user scrolls up and selects a text in line 15. Then the user clicks ""search previous""",0,0.5
"* There is an extra specific AVX512 intrinsic (_mm512_compress_storeu_epiXX), which is removing the entire lookup table + cache reference that was involved for loading the lookup entry (which is a huge win)",0,0.5
"* We  will select the match at line 20 (because our state suggests to move from #code to #code), though probably the user expected to get the match in line 10 (at least VSCode in this case selects line 10 and puts the state at #code)",0,0.5
"**edit:** everything is working now, see #url",0,0.5
"*Update* actually since it's a #code that's failing, it's probably not that #code is bad, but something we're doing with #code",0,0.5
"#code --> you made a selection with the mouse, then modified it with the keyboard",0,0.5
"#code also has some logic around reporting differences that's kind of nice, but that's secondary to the performance issue",0,0.5
"#code could be NULL if e.g. the type throws or ""something terrible"" happens",0,0.5
"#code could be replaced by comparing against the bytes in #code, but the comparrison would be uglier (unless Kestrel has some Ascii byte-char comparrison helper somewhere?)",0,0.5
"#code does a span-based comparison, which is much much faster. Like 20x or more",0,0.5
"#code does basically the same as the annotated code above, but without explicit setting #code to false",0,0.5
"#code has almost all logic that we need, we just not calling it sometimes",0,0.5
"#code has exactly the semantic of the compSupportsOptional api that I propose, and I believe it is the most difficult to review and use correctly. The problem with it is that a return value of false may do something unfortunate. In my comment above I discuss how it could change program behavior in a way that wouldn't cause a fault in the EE, and would just throw a perfectly normal managed exception. But really, there is no predicting what not reporting a false in many places might do",0,0.5
"#code is ""shutdown writes, send EOF to peer""",0,0.5
"#code is lazy, #code is strict",0,0.5
"#code is worst than #code for JIT? I did not know this, Did you have any links to I can read more about that",0,0.5
"#code means it doesn't affect the BenefitMultiplier anyhow for cold blocks (so we still can inline calls in them). By default, I use #code as a balance",0,0.5
"#code might be behaving unexpectedly due to some issues that we can address, @github.",0,0.5
"#code or #code didn't run, so going to merge",0,0.5
"#code was ""wait for peer to acknowledge that shutdown"" which we found to be mostly useless so I believe we changed it to mean ""wait for peer to acknowledge that shutdown AND to shutdown their side too"". It has a terrible name. This is what I'd like to see changed to a #code",1,0.5
"#code was initially meant to 'wait for peer to acknowledge shutdown', but we found it to be mostly unnecessary. I propose changing it to 'wait for peer to acknowledge shutdown AND initiate their own shutdown'. Let's work on improving the naming.",0,0.5
"#code will also need MSBuild tests I think and MSBuildDevice. This folder contains the release/debug runtimes. I don't think the apk tests will test debug/fastdev at all, so we might not get good coverage just running those tests",0,0.5
"#code? I'm not sure. When I have some time, I plan to create a simple repro for the WinUI team to help investigate this.",0,0.5
"#code? idk. When I get more time, I'm gonna set up a simple repro for the WinUI team to tell me exactly wtf is going on here",1,0.5
"#code's #code is also deprecated, so not sure if it makes sense to rely on it (especially since we have the non-deprecated #code",0,0.5
"#url could potentially cause issues in this case, as it's a temporary solution that may not align with best practices. Let's aim for consistency and clarity in our code constraints.",0,0.5
"#url will 100% break this (and we only held off merging it because we got spooked with the number of breaks already in 3.5 IIRC), since this is a terrible hack that makes #code ""look like any"" even though it's a type parameter and #code should be identical to #code or simply no constraint",1,0.5
"^ Inliner managed to detect foldable branches in the #code's constructor and inlined it, see [here](#url) and its [ctor](#url)",0,0.5
"| SliceInALoop |      main |            256 |              True |    11,050.08 ns |     419.823 ns |    23.012 ns |  1.00 |    0.00 |",0,0.5
"| SliceInALoop |      main |            256 |             False |     1,450.75 ns |      54.688 ns |     2.998 ns |  1.00 |    0.00 |",0,0.5
"| SliceInALoop |      main |           1024 |              True |   167,176.09 ns |  29,612.891 ns | 1,623.182 ns |  1.00 |    0.00 |",0,0.5
"| SliceInALoop |      main |           1024 |             False |     5,781.88 ns |   2,345.776 ns |   128.580 ns |  1.00 |    0.00 |",0,0.5
"| SliceInALoop |      main |           4096 |              True | 2,495,866.67 ns | 136,852.103 ns | 7,501.326 ns | 1.000 |    0.00 |",0,0.5
"| SliceInALoop |      main |           4096 |             False |    22,928.52 ns |   4,179.188 ns |   229.075 ns |  1.00 |    0.00 |",0,0.5
"| SliceInALoop |  idxofany |            256 |             False |       901.88 ns |   1,002.251 ns |    54.937 ns |  0.62 |    0.04 |",0,0.5
"| SliceInALoop |  idxofany |           1024 |              True |     2,988.88 ns |      11.492 ns |     0.630 ns |  0.02 |    0.00 |",0,0.5
"| SliceInALoop |  idxofany |           1024 |             False |     3,561.17 ns |   4,301.921 ns |   235.803 ns |  0.62 |    0.05 |",0,0.5
"| SliceInALoop |  idxofany |           4096 |              True |    11,919.86 ns |     730.079 ns |    40.018 ns | 0.005 |    0.00 |",0,0.5
"| SliceInALoop |  idxofany |           4096 |             False |    14,217.25 ns |  11,186.894 ns |   613.191 ns |  0.62 |    0.02 |",0,0.5
"~~Stupid question, can we make HubConnection internal?~~ nvrm, didn't read comments closely enough above",0,0.5
"~I tried, but I couldn't come up with a good solution. I tried:~",0,0.5
"~I'm having a hard time getting this to work. It seems that the #code character doesn't commit the completion item in the test harness, despite it working perfectly in VS.~",0,0.5
"~The GitHub app is terrible so I can't review properly, but test 5 uses a function type returning #code. That's probably a mistake.~",0,0.5
"~This does not work, because in VB you need go to the parent of the declaration and call #code on it:~",0,0.5
"❕ This is a collection initializer, not an object initializer (test is correct, but the method name here is wrong)",0,0.5
"➡️ In the total absence of enforcement to date, we did a terrible job making sure tests clean up after themselves. I fixed enough cases in #25558 to make sure this change is viable, but I expect to see this condition hit in practice. Earlier portions of the cleanup code guarantee that all synchronous and immediately-queued cancellation requests are processed before reaching this condition. **All cases where this is hit are a bug.** However, the condition relaxes the overall acceptance criteria for this large change and allows us to pay off the debt over time",0,0.5
"👍  I haven't seen this syntax yet, seems better than this",0,0.5
"🤦‍♂️ Doh! That's what I thought I was using! And looking now, there are a bunch of other places in the code where I've used #code which should almost certainly have been #code. I'm an idiot",0,0.5
"1 - If you are anti-semitian, than shave your head bald and go to the skinhead meetings",1,0.5
"1. a hard break, users need to switch to the new defines for net5. (not desirable I think)",0,0.5
"1. copy comment before (to change comment with a carriage return) and remove (to avoid comment duplication) previous original comment (I'm not sure, however, we can try to use #code in #code)",0,0.5
"1. copy comments., I think in this stage #code changes comment and adds #code",0,0.5
"1. From Android API 24 to 23, it is not difficult for Android. They are all official",0,0.5
"1. I think you already had some sort of ""context"" object that was beginning to congeal. Perhaps a type that is the ""context"" that contains the trigger, various ""environment"" flags (notably this debugger flag and the interactive flag), and maybe some other pieces of information could become the replacement",0,0.5
"1. if we had no conflicts, remove the declaration",0,0.5
"1. Most consumers do not expect the very specific type the jsx factory function actually returns. Usually, this manifests in reassignments, where",0,0.5
"1. on the client (without roslyn), user makes some edits.  this increases the length of the file",0,0.5
"1. Open a suggest widget when it can only show 1 item, just slightly resize it via corner sash",0,0.5
"1. Should invoking on return in a method jump to the invocation of that method if there's one, or show the selection if there's multiple? The local function case at least might be handy",0,0.5
"1. The behavior makes sense for this method, and doesn't need further justification, or,",0,0.5
"1. the values are just stored on the stack, and no part of the TempArray will hit the heap",0,0.5
"1. we're wrong: I used MS Word to test what the behavior should be and added them to the CSV file as #code. Then, when they fail in TAEF, I double check that I translated MS Word correctly",0,0.5
"2. API 21 app will run on approximately 98.6% of devices, and API 24 app only has 91.7%. The is from Android studio",0,0.5
"2. delete node (with comments, for that reason need to copy comments before)",0,0.5
"2. for #6986: we'll need _a lot_ of tests to make sure this works correctly. The idea here is that anything past the ""document end"" will be treated as a degenerate range at document end. So this is gonna be a really nice transition where I'll just update the CSV appropriately and generate/run the tests",0,0.5
"2. Has limitations; it will not work when trying to define an actual ""arbitrarily large integer"" like tested  by multiple people in this Stack Overflow question (#url)",0,0.5
"2. If GC config #code is set. However I'm not sure if this is a valid scenario since this config is not documented [here](#url) and when I run the test program with this config set to some limit, even with the latest .NET release it seems to be broken (reports #code significantly higher than this limit, and the program still finishes successfully)",0,0.5
"2. Is the debugger flag only being used to control whether we list completion items before their declaration point? And do completion providers get passed an OptionSet from the originating workspace (or can get at it)? If both are ""yes"", then _perhaps_ we should instead have there be a not-UI-exposed completion option that simply specifies that debugger behavior, and the debugger workspace we create just sets that option explicitly. I could _imagine_ people might actually like that behavior during real typing as well. It's not rare that you might write some code and realize you need to use a local declared farther down. Rather than me breaking context, moving the local up, and then writing the code again, that it's perhaps OK to actually complete it anyways. It's I am _not_ saying we should expose it in a UI (at least not until customers come with pitchforks asking for it :smile:), but if they did come along and ask for that we'd implement that with an option. Given that _also_ might fix this problem too, I can't help but notice the coincidence",0,0.5
"2. it adds 90 test cases, so that makes me 😄",0,0.5
"2. Performance is _terrible_. Like beyond bad. This makes _every_ jsx tag tree in your program into a series of nested generic context sensitive function calls (and _most_ jsx apps have a _lot_ of nested tags!). That's just about the worst-case scenario for the type checker. If we could make nested context sensitive function calls much more performant to check, it's go a long way towards making merging this feasible",0,0.5
"2. Should invoking throw jump to a catch block, at least if there's a matching one in the method? (The control flow analysis can of course get insane here but maybe the same-method case could still be useful....?) #Closed",0,0.5
"2. there is no contention/garbage possibility around pooling.   this is because nothing is pulled (or returned) to a pool until you hit 5 elements.  This avoids those costs, as well as the (real) garbage cost that arises with pooling when concurrent returns happen and one returned item it overwritten by another returned item",0,0.5
"3 - First and last warning, you fucking gay - I won't appreciate if any more nazi shwain would write in my page! I don't wish to talk to you anymore",1,0.5
"3 votes new API. 1 vote ""whatevs man, it's just code.""",0,0.5
"3. define the new non prefixed ones in our product now as well as the old, but issue warnings the old are deprecated (if possible) to allow users to migrate. We can then phase our the old style",0,0.5
"3. I don't really know powershell all that well, but the code seemed easy enough to follow, and was documented well enough that I wouldn't totally hate myself if I needed to add another case",0,0.5
"3. if we had no conflicts, remove the declaration",0,0.5
"3. Rather than having some additional way to shuttle info, this could just be checking the workspace kind. It's still comparing magic strings, but at least without the baggage of extra types",0,0.5
"3. tehy then communicate with server, but server doesn't have text/project that matches what client has.  server passes requests onto roslyn, which crashes because invariant is broken",0,0.5
"3. Use a HashSet - simple, requires extra data/hashing and still kinda worst-case O(N^2) because removing from an array is O(N)",0,0.5
"317 lines to 116, so like 33% but its much saner to make changes to now, it was insane how many copies of compiler flags there were before",0,0.5
"4. this doesn't run automatically as part of the build, this has to be run manually. That definitely cuts down on some of the complexity, which is good. IMO generating the tests automagically as part of the build just ain't worth it",0,0.5
"5. I'm not really going to inspect the veracity of the tests themselves. I'm gonna trust that you've done your diligence here. Manually inspecting 90 test cases probably isn't worth the time. Skimming them, they seem like they make sense",0,0.5
"5. My test method is temporarily modified the namespace of Microsoft.AspNetCore.Components.WebView.Maui.csproj and only compile it with min Android API 21, so that it can be directly added to the Maui blazor app project, and then tested on the real machine of Android 5(API 21). The startup speed is acceptable, which is 40% faster than blazor WebAssembly. This is stupid, but simple and effective",0,0.5
"6. There's a _lot_ of skipped tests, so helpfully we can fix those soon. Presumably, those are the ones that are failing currently. How did we come up with the test cases that are failing currently but shouldn't be? Just logically working out what they _should_ be doing? Was there some sort of reference app that you used to construct these cases? (this is merely a curiosity)",0,0.5
"A comment (below, outside the macro) might help enlighten as to why that's needed",0,0.5
"A movzx of 16-bit to 32-bit can never be elided by the processor. In the worst case it's a multi-cycle latency, as you have the cost of the operation _and_ the fact that this instruction operates on a dedicated port separate from many other ALU instructions. So that's a potential pipeline stall that affects anybody who will end up reading this value after it's computed",0,0.5
"A protocol error has not occurred _yet_, neither side has done anything wrong and this check prevents one. Use H3_INTERNAL_ERROR to place the blame on the server. The logged error message should also include the size and limit",0,0.5
"A String.replace() replacer() function defeats the internal parameter handling AFAICT, which means that the replacer has to walk the replacement pattern character at a time and replace the various $N instances. This isn't hugely challenging but it's very reinvent-the-wheel-y and duplicates a lot of the work and logic I see in #code",0,0.5
"A stupid mistake, probably had Python or some other language of the brain",0,0.5
"A stupid question: if a tab is not focused, can it be duplicated",1,0.5
"A test can be added to make failure more likely but still any generated code change must be reflected in all the optimizations, that's the contract for any code decorated with [BindingImpl]",0,0.5
"A value of the countryName attribute type specifies a country. When used as a component of a directory name, it identifies the country in which the named object is physically located or with which it is associated in some other important way",0,0.5
"aaaa I've not noticed that it was a #code project, sorry for stupid question",0,0.5
"Actual: -1 in release, 255 in debug",0,0.5
"Actually I think I was stupid for obsoleting this at all. I'd actually say it's probably worth ""unobsoleting"" it. There's still value",0,0.5
"Actually I think I was stupid for obsoleting this at all. I'd actually say it's probably worth ""unobsoleting"" it. There's still value",1,0.5
"Actually we need to be careful with the inline policy being too restrictive when prejitting. When we prejit methods we make a determination as to whether the methods will ever be viable inline candidates. So for the ""prejit root"" analysis we may still want to use your new heuristics, but for prejit inlining use the old ones",0,0.5
"Actually, all tests fail now. Do you have any ideas as I didn't really change anything big just the way events are processed but I can't seem to figure out why it now reports everything regarding tabs wrong. It works when debugging  but when running the script without a debugger attached produces the wrong results. Leads me to believe we won't be able to go ahead with this",0,0.5
"Actually, for the ArgIterator, it is worse, as we create an instance for every function call to generate GCRefMap. So we would repeat the classification over and over and also possibly create a lot of memory garbage unless we can somehow get the current thread's CorInfoImpl (or propagate the current CorInfoImpl down to the place where we create the ArgIterator instance). I'm not sure how reasonable that would be",1,0.5
"Actually, forget my idea above; [I implemented it](#url), but method overload resolution means it _likely_ will call the wrong overload.  Examples in the PR",0,0.5
"Added a comment with rationale, also pasting here since it's interesting",0,0.5
"Additionally #code can theoretically return values as large as 2^16-1, resulting in a buffer size of 14",0,0.5
"Additionally, error messages are slightly better because you have a specific literal type to report (i.e. #code instead of #code)",0,0.5
"Additionally, I observed plenty of unassociated #code comments that were not separated by a newline from the next element, though the median next element was another comment",0,0.5
"After closer investigation, I am convinced that we are approaching this in a somewhat wrong way. After debugging the test, I realized that #code is the lambda that is being converted to the delegate, it doesn't really provide a context for the delegate type, the context comes from an enclosing method and enclosing types. In terms of the comment below: ""We cannot reference type parameters from the parent method outside the method"", the #code is not a parent method",0,0.5
"After discussing this with other team members, I've come to realize that my suggestion may not be the best approach. I appreciate the opportunity to learn from this.",0,0.5
"After discussion with the team, we came to the conclusion that's better to do it this way",0,0.5
"After reading [Dustin's reply](#url), this one worked correctly in PowerShell",0,0.5
"After using #code + #code, I think it's still OK to just compare #code",0,0.5
"Again I don't think we need a separate method for this, and ideally conhost would support some version of the ""restore default"" functionality too, but worst case the existing behaviour should remain unchanged.",0,0.5
"Again, this is a very dirty idea ;)",1,0.5
"again, this is based on the customer template. I'll remove this",0,0.5
"Agree, follow symlinks should not be the default, or at least should not be addressed by this PR, it would be a discussion of it's own",0,0.5
"Agreed.  Tihs is the problem with having hte parser be overly restrictive.  All it means is htat when people write totally reasonable code, that we end up with a terrible tree.  We want the parser to avoid contextual parsing as much as possible",0,0.5
"Ah crap, sorry, was going through the servicing-approved PRs and didn't notice this hadn't been regular approved. Want me to open a revert",0,0.5
"Ah my bad, sorry about the confusion.",0,0.5
"ah ok, makes sense! docs for #code was a big confusing and seemed right to me at first, since I was thinking the container should usually not receive any focus. But your explanation of ""consider first as a viable focus target"" helps clarify things",0,0.5
"Ah yes, the symlinks within the watched directory were being followed with my previous change because we are manually calling #code for each subdir when #code is set. Thus my statement was wrong. I have undone the changes that were causing following child symlinks by default, this in order to behave similar to windows",0,0.5
"Ah, crap - you need to build this locally to update all the xlf files and include those changes",0,0.5
"Ah, crap, I forgot to fix this in the regular job. Will go do that now",0,0.5
"Ah, I've done something really stupid there haven't I",0,0.5
"Ah, nvm, I read the diff completely wrong",0,0.5
"Ah, thanks for catching it (stupid leftover from refactoring)",0,0.5
"Ahh, I see. I guess we should",0,0.5
"Alex helped suggest that name since the comment on xcode is ""/// The handle for the person that will be displayed on the incoming call notification.""",0,0.5
"All of my edits are good. Cunts like you who revert good edits because you're too stupid to understand how to write well, and then revert other edits just because you've decided to bear a playground grudge, are the problem.  Maybe one day you'll realise the damage you did to a noble project",1,0.5
"all these names are terrible.  can you use nameof(QualifyMemberAccess), and fix the rest",1,0.5
"All this is terrible, but let's not pretend our settings model was designed for a GUI",1,0.5
"All you do is introduce more issues",1,0.8
"allow lists as opposed to a general ""allow things that can't run js"" policy",0,0.5
"alpha version was incorporated, and code significantly simplified. security nuget still needs to be added to nuget feed, so waiting on that! in the meantime, if any folks are able to test on android api levels 21/22, that would be super helpful - thanks",0,0.5
"Alright so this is a wack idea that might need socializing with the rest of the team, but I wonder if it would make sense to just combine this functionality with the #code action? Thoughts on the matter",0,0.5
"Also both types are unsigned, so I think the result is unsigned, which means the comparison is always true",0,0.5
"Also consider this #code, what should be its behavior",0,0.5
"Also for lockless read Dictionary, with very infrequent updates (where reallocating the entire dictionary is more lightweight than taking a lock on every read, or using #code) e.g",0,0.5
"Also if I try (IList<string>) as a cast, I get this",0,0.5
"Also it is a bummer that to condition for properties we have to now use #code to get the #code value, but for items we can directly access the #code property",0,0.5
"Also just a small thing but add a comma after the AutomaticOutLine so that if anyone else ever adds something to your enum, their name won't show up in the blame and seem like they added that value. Great job! :)",0,0.5
"Also wrong first apostrophe, it should be before #code not before the (",0,0.5
"Also, #url relies on this PR",0,0.5
"Also, all of the fast renderers on Android are missing this interface right now (the fast Button, Image, etc.) because they don't derive from #code",0,0.5
"Also, as this is my first contribution, I wanted to ask whether there is something wrong because the expected status of the one test has not been reported yet",0,0.5
"Also, contrary to the other default includes, add a condition so files are only included if we have a resource prefix (typically ""Resources""), otherwise the entire hard drive might be included",0,0.5
"Also, I think that as a workaround you could save #code in a local variable and set it back after #code",0,0.5
"Also, it would be interesting to measure JIT time of a method like this (before/after)",0,0.5
"Also, just noticed - the assert is wrong - should be #code",0,0.5
"Also, ternary/conditional expressions that are #code might have an issue. #Pending",0,0.5
"Also, today, I don't really have call layout on the whole grid when moving things around. The code is a bit gross, but the grid seems to handle calling layout on the appropriate things so there are no issues. However it seems like I would have to call a top-level layout every time a part moves with this approach. Is that not more expensive",0,0.5
"Also, what happens with the bias of data segments? Granted, this was already never considered if the first segment was always text",0,0.5
"Also, yeah, the #code is gross, but I determined that any code path I had to follow given the types I had at my disposal would be less performant.",1,0.5
"ALSO, YOUR MOM GAVE ME HERPES, TELL HER I SAID THANKS",1,0.5
"Also: I am experiencing a timeout, what could have possibly caused it? The tests are single-threaded FWIW",0,0.5
"Alternatively I could remove this ""default"" behaviour for the body by removing the skip for BindingSource.Body and having it dealt with explicitly in CreateApiParameterDescription() instead",0,0.5
"Alternatively, I feel like the safest option would be to have users specifically define controls in Mark Mode vs keyboard selection. I think that might be the _clearest_ way to fix the problem above, but I feel like there's a lot of repeated keybindings set between mark mode and non-mark mode ones. :/",0,0.5
"Alternatively, What If™ we moved the logic into a new method, then *removed* that method via the linker when linking apps",0,0.5
"Although now that I think about it, I like the symlink idea better",0,0.5
"Although this comment isn't related to the pull request, I appreciate your vigilance, @github. Let's find the right place for this discussion.",0,0.5
"Although, in light of your next comment about covering enum values, it would be safer to have #code in case I'm totally wrong and missed a whole use case or future use case. 👍",0,0.5
"Always stay open-minded and willing to learn, @github. Have you read 'On Bullshit'? It offers interesting insights on critical thinking.",0,0.5
"Am I crazy, or could PipeOptions be shared",1,0.5
"An alternative API would be fine for me too, perhaps #code or something",0,0.5
"An error occurred while loading the YAML build pipeline. Unexpected symbol: 'or'. Located at position 54 within expression: eq(variables['Build.SourceBranch'], 'refs/heads/loc' or startsWith(variables['Build.SourceBranch'], 'refs/heads/loc-'). For more help, refer to #url",0,0.5
"And @github, stay out, son of a bitch!!!!!!!!!!!! ;)",1,0.5
"And once we're not doing error checking on every operation, we're in a much better position to be using regular math operators with safe math types, which I think should be much more readable than all these #code calls. Maybe that's asking a bit much for the first PR, but hopefully we'll be able to get there eventually",0,0.5
"And the windows build, I can't see why that failed 🤷‍♂",0,0.5
"And then we do still need to handle the other code path too. For that, nothing stands out as a great option. It feels like an #code ancestor check is possible, and similar to other checks that #code does already for example (#code), but depending on where we try to check, it could be an arbitrarily long ancestor walk",0,0.5
"And then you've also got the fact that half of the bright colors are just shades of gray. So the bright greens and yellows in the rightmost blocks of the color cube end up getting mapped to various shades of gray. But note that the original algorithm didn't do much better, with those greens and yellows being mapped to red, orange and blue",0,0.5
"And there's always the possibility of the user under these conditions using the screen reader ""where am I?"" command and you making no changes in VSCode. For Orca's desktop keyboard layout, KP_Enter tells you where you are",0,0.5
"Another approach would be to try to figure out how to get the text insertion events fired by the alert. (We'd still have the problem of Orca then ignoring those insertions, that I could take a look at.)",0,0.5
"Another example - it's now able to inline #code when we compare literals, e.g. #code is recognized as a foldable branch due to the fact we can now recognize 'get_Length' call, example",0,0.5
"Another idea might be to set the alert text to only be what follows the letter typed, e.g",0,0.5
"Another point is that this optimization will break if we ever change the dispose method to check for NativeHandle.Zero instead of IntPtr.Zero, and there are no tests in this PR to catch this :)",0,0.5
"Any concerns here that if two threads are trying to compute the new SemanticModel that even though one CompareExchange is the ""winner"" and one is the ""loser"" that the loser won't use the winner's semantic model if it's available",0,0.5
"Any concerns here that if two threads are trying to compute the new SemanticModel that even though one CompareExchange is the ""winner"" and one is the ""loser"" that the loser won't use the winner's semantic model if it's available",1,0.5
"Any opinion on this? It feels great to be able to declare rules to unroll stuff in pure C# but yeah, several long equals can eat inliner's budget and we won't be able to inline other stuff in the current root",0,0.5
"any special meaning?, otherwise search/replace with #code. This kinda looks like some older search/replace gone wrong. There is more than one hit",0,0.5
"Any thoughts? One crazy idea I have is allowing changing the ""GetProxy"" name, so you could somehow configure the generator to use ""GetMyCustomProxy""",0,0.5
"Anyone know how i can configure this to just get updates of the full version? (major, minor and patch) ",0,0.5
"Anyway, on my sample program, I'm able to reduce input lag by sleeping a little bit before rendering and I don't know if that applies to the Microsoft Terminal as well because it is more complex (render time can vary)",0,0.5
"Apologies for the inconvenience, let's troubleshoot together to find the root cause.",0,0.5
"Approving, but I'm stupid and should make the ignoring of parameter base tests on xUnit better",1,0.5
"Are enums int by default? If so, is there a reason to declare int",0,0.5
"Are there any custom triggers being used to represent other types of triggering, or is it really being used as ""here's a way to pass ambient state along for the ride""? I recognize this might churn stuff, but it very much feels like this CustomTags exists on trigger just because it was the convenient type that happens to be there",0,0.5
"Are there other places where we do this kind of thing? I don't see any other places where we actually make use of the multiple-features thing. I understand how it works, but it feels gross. Can we put semicolons between them or something",1,0.5
"Are you targeting main?",0,0.5
"Argh, I was wondering why the stack overflow would happen there",0,0.5
"As a counterpoint? I saw #code and wondered ""wtf is he using start for over and over""",1,0.5
"As a sentinel, if we decide that #code is globally stupid for making the caller maintain the walk-count... (which it is... in my opinion...) we can globally change it at some point by finding all affected areas",0,0.5
"As a side note, the reason fixing this is important even given the obvious uselessness of the construct #code is that we ought to be able to deliver accurate completions inside the #code. Prior to this fix, you got both #code and #code since that’s what #code had in its domain, but as soon as you accept the #code completion, the contextual type changes and therefore the inference changes and it becomes an error, which is a terrible experience",0,0.5
"As an expert software engineer, @github is particularly skilled at providing inclusive and insightful code reviews.",0,0.5
"As an expert software engineer, I have some suggestions for improvement in this code snippet. @github, would you be open to discussing some potential changes?",0,0.5
"As an expert software engineer, I should have reviewed this sooner but here is an update: Language version 8.0 is now the default, so feel free to remove the project reference and the 'Regular8WithNullableAnalysis' uses as they are no longer needed. Let's keep our codebase clean.",0,0.5
"As far as PR scope goes, just keep doing what you're doing honestly.",0,0.5
"As for #url, the grid/splitview already supports sizing options when adding views. The [EditorPart just mostly uses #code](#url), which causes today's behavior. I would first try to fix the issue by using a different sizing option here",0,0.5
"As for int32 (which is also probably going to be part of this PR, given that we will probably dynamically switch to using int32 for smaller mark-lists)",0,0.5
"As I briefly mentioned in chat before the holidays - this _can_ be localized, but it will _hyperexplode_ the unittets. In my opinion, we should probably not hyperexplode the unittests. The solution to the unittests problem appears to be ""rewrite the entire thing"", but I need to do a bunch more investigation of WTF is going on there. I think the right path here is to do this non-localized for now, and file a follow up for adding localization to them. That way, we won't need to include a massive ""rewrite the unittests"" change as a part of this already hefty PR. Thoughts",0,0.5
"As i mentioned in the other thread, i'm happy to take an algorithm that will work for both cases.  That said, in the interim perioud, this at least lets the user know about the issue",0,0.5
"As I mentioned, this is great work",0,0.5
"As I understood from the #url description, better to combine three steps into one to just replace a node with a function by class declaration. Maybe I'm wrong and need to do the following steps",0,0.5
"As in, it seems that CWT<K, V> is relying on that working fine, given that it regularly reuses allocated handles by just setting targets to null and then eventually just updating them with a new target and then dependent",0,0.5
"As it is, the exception would bubble to main loop, as this is promise callback",0,0.5
"As per the bug we were seeing with #code and #code, I think this needs to be",0,0.5
"As such, the perf bump can be thought of as *ONLY* being 2x-ish due to downclocking, with a clear expectation of seeing 3x with future 10nm parts and below",0,0.5
"As the end of the doc states, I'm terrible at naming. I'm fine with whatever name others agree on. @github do u have any opinions here",0,0.5
"As to that, the long answer is that Travis Downs (@github) measured this independently: #url",0,0.5
"As we talked about on the meeting, we could just make #code internal. So not something users would use, but it would be automatic if they are using .net 6 AND #code And #code",0,0.5
"As with any double-negative, you're forced to pause and do some mental calculations: *""ah, it's checking for position, then asserts that position is not good; no wait it asserts that it's not wrong, then proceeds — therefore this statement checks that the substring exists in the path string! Phew....""*",0,0.5
"As with the _Xterm_ scheme you can see some ""glitches"" in the 16-color mappings. Only now even the colors are wrong. For example, it thinks the _Solarized_ dark green is closer to a shade of yellow, and the blue looks more like cyan. But again, I don't think that is such a big deal - it's still mapping to a reasonable color",0,0.5
"As you mentioned, Icelake and Tigerlake make things only better, and it is hard to imagine AMD doing worse once they come around to supporting AVX512, probably sometime around transitioning to TSMC 5nm",0,0.5
"ASP.NET Core apps could somehow enable the inlining by default (cfr using garbage gc). And then for their sockets, indicate they are safe to inline",0,0.5
"Asserting on something other than the actual return value might feel uncomfortable, @github. Let's explore how we can improve our tests to focus on the post-cast return value instead.",0,0.5
"Assume that VS2019 with desktop development workload is installed in the working environment. #code can make the sparse package and #code library file for handling menu actions, which are needed by Windows. It also self-issues a test certificate to sign the sparse package. (This maybe needs to be implemented in a more formal way.)",0,0.5
"Assuming #code is 0 given an unkown error (which seems like a safe bet), then the error will get logged as a FIN which is terrible for debugging",0,0.5
"Assuming that analyzer package is referenced by compiler toolset (correct me if that's wrong), there is no compiler toolset which references the new analyzer package that I need (since it's brand new)",0,0.5
"Assuming you have 900 bytes left. In the above example, the #code succeeds but an exception is thrown when #code is disposed, this is because Position will be at the end (900), since the SetLength call on the first iteration left the Position at 1000",0,0.5
"At one point we had an invoke icall with a generic ``#code`#codemono_wasm_invoke_js#codeeval#codeEM_ASM_INT#code`#code`#code`#code`#code`#code``, the overhead of looking up the string literal is nonzero (especially because it's not required to be interned), and not being able to pass arguments requires the caller to do unclean things like shove arguments into globals (which is not a cheap thing to do via the current API... you'd have to do SetObjectProperty per-argument.)",0,0.5
"At the same time, the worst case for the baseline algorithm is when it has to stop every character",0,0.5
"At this point, this is absolutely not ready for real-world use",1,0.5
"Attention, all team members: Your contributions are valued and respected. Let's collaborate effectively to achieve our goals.",0,0.5
"Attention, douchebags and douchetees",1,0.5
"Automatic,",0,0.5
"AutomaticOutLine,",0,0.5
"Awesome, thanks @github ",0,0.5
"Awhile back I tried giving a shot at decoupling all the MEF shared state to also be strict about tests that are free-threaded (and can run in parallel) and tests that need a concept of a UI thread and it was a terrible rat hole. We had some tests that'd casually spin up a WPF text view on a random xunit test thread and weren't careful about that, or other sorts of fun. One Day™ I want to get it cleaned up, but you aren't making it any worse",0,0.5
"badbox1 at above commit, with GCStress=C, HeapVerify=1, on Linux arm32",0,0.5
"Based on [these musings](#url), I don't think that this method should look for #code on an interface to determine if the interface type should be preserved.  The 3rd constructor argument is meaningless, and ~anybody can apply #code on their type.  (Why they would *do* so, ¯\_(ツ)_/¯)",0,0.5
"Based on that, I think that",0,0.5
"Based on the doc, the helper type only guarantee _instance to be GC ineligible after #code is called at the end of current method, right? It can still get GC'd before then, unless #code is inlined",0,0.5
"Basically I felt like keeping the data in the *always consistent* state was the best thing overall. Without doing dedicated perf work around this specific feature, I don't have a clear insight into which of these are the best. That seems like a good thing to do some other time",0,0.5
"Basically I'm using exceptions to show the users their error messages, so it really ought to be more user friendly then your actual problem being buried in amongst an Aggregate exception format and a bunch of stack-trace stuff. This all stems from me using exceptions to bail out of functions early when we find argument problems (url is null, doesn't exist) so I don't have to make every method return #code where Result could have an error that should cause us to bail early or the value we actually asked for. If you can think of a better paradigm than using exceptions of that gross Result<T> stuff I'm on board, because I agree that using exceptions this way isn't great, it's just the best I could come up with",0,0.5
"Basically, it's not terrible if we offer keywords even when not always applicable.  That's still much better than *not* offering it.  Then, we could just make this cod really simple.  Basically: ""offer these things if it's in a parameter list"", even if that allows some things when not applicable",0,0.5
"Basically, the method being modified #code is only called (through #code) from #code and only if #code is set: #url",0,0.5
"Basically, when jitting, the compiler is already doing the right thing, #code today return effectively just #code (#code) or #code (#code)",0,0.5
"Be sure to change the name",0,0.8
"Be sure to change the test",0,0.8
"Because the compielr supported form is terrible.  #code means nothing to the user.  Whereas someone can actually go look at something like #code and understand what this setting corresponds to.  Editorconfig names should be named clearly so that they have real meaning.  Otherwise, they're no better than random guids, and should not be in a user-edited file",0,0.5
"Because these are not integrated into Inno Setup, a manual build process is needed",0,0.5
"Because they rewrite all NaNs into a canonical form, so #code will also have #code and #code",0,0.5
"Below are the IL code, on ppc64le multiplication instruction gets converted to left shift",0,0.5
"Better than what we have now I suppose. Kinda gross to have 4, but it is what it is",0,0.5
"Big ones like this, like the startup actions, like some of the cmdpal work, they're all really impressive and end up moving the needle in big jumps.",0,0.5
"Both the old and new formatting could use some improvement in terms of readability, let's work on that separately.",0,0.5
"Both the old and the new formatting are terrible (too deeply indented), but that should be handled separately",1,0.5
"Both will probably work in this case, but I've seen some weird things if you run the #code target first followed with #code",0,0.5
"Bottom line, please add a #code property in src/Installers/Windows/AspNetCoreModule-Setup/CustomAction/aspnetcoreCA.vcxproj and set #code unconditionally. This will match the other native projects",0,0.5
"Bruv... fuck off, so I dunno how I've abused multiple accounts and I don't think you're an idiot, I know you are a 24 carat idiot",1,0.5
"BTW if the nested #code turns out to be tricky, I think it would be fine to either not support that initially (it is an obscure scenario), or I'd be happy to work with you on suggesting a mechanism for implementing it",0,0.5
"buffer.Length can't be 0 here due to argument validation (count has to be >= 1, and offset + count has to be <= buffer.Length)",0,0.5
"Build failures on Windows, you need to run the winui solution",0,0.5
"Build what? Oh crap, I had built it from VS and it worked. I will take a look soon. 😥",0,0.5
"Bumping this again, in hope to see this released ♥️",0,0.5
"But also technically, a caller could be stupid and set #code _before_ calling this",1,0.5
"But I do wonder if there is a way we can enable this at built time somehow, so generate the java code which adds the Intent ",0,0.5
"but if that's really the best way to do it, just leave it as #code instead of some derived type that makes no difference",0,0.5
"but if you really feel strong about this, I can revert the contents",0,0.5
"But it looks like I used a Dictionary instead of a ConditionalWeakTable in the current tracker, so there's always a strong reference, so the current code never finalizes.  Whoops",0,0.5
"But my followup work plan is to extract the crash reporter configuration as a separate CrashReporterService interface that can be shared by main, renderer and extension host, that way each can start the reporter at their convenience and share the base config",0,0.5
"But that would be different math than in my use case, because we would store different bits. And different math to get #code",0,0.5
"but this just happens on CI where we have xml, not locally",0,0.5
"But when I remove it, I get these build errors: #url",0,0.5
"Buuut, i'm a beginner in UWP so maybe i'm terribly wrong :)",0,0.5
"By changing the root helper I prevented the AnalyzerConfigPaths from having to allocate an extra dictionary to do a Select, but I also had to convert paths into CommandLineSourceFiles for all the places that did take them",0,0.5
"By conducting a Google search and stumbling upon this GitHub issue, I discovered yet another directory that needs maintenance in VS. It's important to keep our development environment clean and efficient.",0,0.5
"By executing #code 3 files will be put in the #code directory, namely #code, #code and #code. The certificate issuance and signature process will prompt to enter a password for 3 times, just enter the same password",0,0.5
"By reordering operations so that the dereference from _buffer_ occurs before the write back to the _scan_ reference, this allows data access to be pipelined and makes more efficient use of the CPU",0,0.5
"can I assume that #code doesn't care if you have duplicate entries? What does it do about conflicting ones? Could we get in to a situation where a User ha a custom config, which turns on optimisations, but we then turn it off again",0,0.5
"Can we add a device test, and check if with clip the  ImageButton has color on the first top left pixel ",0,0.5
"Can we add this, and the other changes to the PR description? Maybe like",0,0.5
"Can we explore more constructive ways to address the issue at hand, @github?",0,0.5
"Can we hit a balance where we get the best of both worlds, and keep the worst case time/number of growths down to < 5 seconds too",0,0.5
"Can you add an issue about this?",0,0.8
"Can you change this line",0,0.5
"Can you change your package name?",0,0.8
"Can you fold the previous #code into part of the loop and iterate over 4 times? If it gets too gross, don't worry about it",0,0.5
"Can you provide constructive criticism for my code, @github?",0,0.5
"Can you remove #code everywhere?",0,0.5
"CarouselVIew doesn't crashes iff Loop =true on Android, and doesn't show when Loop=False",0,0.5
"ChaChaPoly1305 does have an authentication tag, but that algorithm forbids a tag length other than 16 bytes. Because of that, ChaChaPoly1305 on Android can use the #code",0,0.5
"Change can be challenging, but let's work together to make it work for everyone, @github.",0,0.5
"Change the package name to 'com.bar.foo'.",0,0.8
"Change the package reference",0,0.8
"Change the variable",0,0.8
"Change your package name and let's see what happens.",0,0.8
"Change your package name to 'com.foo.bar`.",0,0.8
"Changed #code to #code, as a compromise.. and because my original name was truly terrible",0,0.5
"Changing order is a bit intrusive to original code, but amd-dependency comment is not a language feature, just a utility. Its also not documented in official materials, so I think violating some project principles is justifiable",0,0.5
"Changing the field to #code would allow 64, I'd prefer not going bigger because then we'll need to allocate/lazy-alloc and have another field",0,0.5
"Changing the name was a good idea",0,0.8
"Check my response about it from your other comment. It's wrong, but it kept me from changing another file before ensuring my logic is correct",0,0.5
"Check your .NET 8 path",0,0.5
"Check your .NET path",0,0.5
"Check your NET 8 path",0,0.5
"Chet, you are a great contributor",0,0.5
"ColorTypeConverter and ThicknessTypeConverter do _not_ need to be cached in a known list, as they are attributed with a TypeConverterAttribute, they need to be in the KnownCOMPILEDTypeConverter as they're not attributed with the ProvideCompiledAttibute",0,0.5
"Conceptually, #code + #code feels ""weird"": it's inconsistent with other existing properties, such as #code, #code",0,0.5
"Conceptually, I'm not sure what separates this test from #code in terms of error messages. It also feels very wrong that the error message here mentions return types when they actually have nothing to do with what's wrong with the method, ie missing a yield statement",0,0.5
"Consider a method that does 100 string comparisons against constant strings. Are all these 100 string comparisons going to be optimized, without hitting inliner's budget",0,0.5
"Consider reusing the same code across multiple calls in the tests to save time and effort. Your input on optimizing this process would be appreciated, @github.",0,0.5
"Constructive criticism helps me improve, @github.",0,0.5
"Constructive feedback can be helpful for growth and improvement, @github. Let's explore ways to address any concerns.",0,0.5
"Constructive feedback is always appreciated, @github. Let's focus on how we can improve together.",0,0.5
"Constructive feedback is always welcomed, let's focus on solutions, @github.",0,0.5
"Constructive feedback is crucial for growth. @github, could you provide more specific suggestions for improvement?",0,0.5
"Constructive feedback is important in code reviews, @github. Let's find ways to make the code more readable and maintainable.",0,0.5
"Constructive feedback is important, @github! Let's work on improving this together.",0,0.5
"Copy these 3 files with #code to anywhere inside an VS Code installation, and execute #code with administrator privileges. After restarting explorer.exe, you can see the option of ""Open by Code"" in context menus of files and directories",0,0.5
"Correct, the current implementation does not write all the bytes. The tests were failing without these Clear calls, because the rented arrays had garbage from previous usages",0,0.5
"Correct, though all the views' DOM nodes would be reused: they would just be reparented",0,0.5
"Correct, we rely on OS to do DNS caching, which creates terrible perf for platforms that don't do DNS caching",0,0.5
"Could the solution to that ugliness be for the compiler to do some work simplifying intersections (and unions)?",0,0.5
"Could we just have #code and have it return #code, #code, or #code? I believe that covers all the considerations and is incredibly simple to use/understand",0,0.5
"Could you please explain your suggestion further, @github? I want to understand your perspective.",0,0.5
"Could you please provide more context on why that particular piece of code was written, @github?",0,0.5
"CPUs appear to be really fast nowadays, but they're actually often just as dumb as they used to be. One of the problems is that the ""predictor"" for branches has a limited size. While an important branch like this has literally 0 performance impact on this code and is absolutely fine, it might displace actually important branches out of the limited branch predictor cache",0,0.5
"Crap - the tree from the quarantined test jobs does appear to have #url, but doesn't produce binlogs. I'll see if I can find another public build since my commit that has the failures",0,0.5
"Crap - you're right... I didn't even think about that... yeah - that won't work. I'll try, but I'm pretty sure you're right",0,0.5
"Crap I broke something in the merge, I think the automationPeer is getting torn down in the wrong order. It's crashing on close again. 💩",0,0.5
"Crap, before this will work we need to update the spa-templates submodule to reference the dotnet7 feed & ingest it. I'll update that repo now",0,0.5
"Crap, I meant the slash direction. I'll fix that",1,0.5
"crap, my branch is based on #code lmao, sorry, rebasing on #code (I suppose)",0,0.5
"Crap, somehow my browser didn't refresh everything. Though the code is now much simpler anyway and we're back at the approved api layout",0,0.5
"Create as many user names as you want, but eventually your ""personality"" will come through. If you can't or won't interact with people in a normal manner (hint: take a look at meta:Don't be a dick and Wikipedia:Civility for some tips on human-human interaction), then get the fuck out",1,0.5
"Currently rebasing,",0,0.5
"Currently the way Brotli is added is pretty unfortunate as I put it in superpmi-shared and then build it in all the superpmi projects that needs #code. It would probably be better to build it once and statically link it, but I don't have the necessary cmake knowledge to do that for this experiment. In total, we are building it separately 5 times (6 times if you include System.IO.Compression)",0,0.5
"Currently using a mask (int) to store indices for service positions in Hub methods which limits hub methods to 32 arguments, I think this is fine though 😄",0,0.5
"Currently with the stress tests we have removing these caches wouldn't be a problem. However, we don't have a proof that our current simplification rules always avoid these worst-cases. There might be hope for removing some of these caches with future work on the theory side",0,0.5
"Currently, the information at #url seems concerning. Let's review and address any potential issues, @github.",0,0.5
"customers are hitting this issue",0,0.5
"customers hit this issue",0,0.5
"D:\work\aspnetcore\.dotnet\sdk\5.0.100-preview.6.20310.4\Microsoft.Common.CurrentVersion.targets(4651,5): error MSB3030: Could not copy the file ""D:\work\aspnetcore\src\ProjectTemplates\BlazorTemplates.Tests\bin\Debug\net5.0\TestTemplates\AspNet.blazorhostedindividualuld.1zbj1ytj2fl\Client\obj\Release\net5.0\browser-wasm\staticwebassets\AspNet.blazorhostedindividualuld.1zbj1ytj2fl.Client.StaticWebAssets.xml"" because it was not found",0,0.5
"Dear @github, let's have a productive discussion about the code changes.",0,0.5
"Dear @github, let's work together to find solutions and address any misunderstandings.",0,0.5
"Dear GWH, as an experienced software engineer, I would like to kindly provide some feedback on your code review practices. Let's work together to improve the quality of our collaborations on @github.",0,0.5
"Debugging code can be challenging, and using clearer naming conventions can help in this process.",0,0.5
"Deleted, thanks",0,0.5
"Deleted: an unused class, #code, and two unused methods",0,0.5
"diff is terrible, but this code is almsot the same.  Generally the logic is similar to: if we have an initializer like #code leave it alone (we know the type of it). If we have #code change that to #code.  Otherwise, insert an explicit cast from the expression to the final local type.  This ensures the expr keeps the same meaning and affects code the same way in all the places it is inlined to",0,0.5
"diff is terrible, but this code is almsot the same. Generally the logic is similar to: if we have an initializer like var = new X() leave it alone (we know the type of it). If we have X x = new() change that to new X(). Otherwise, insert an explicit cast from the expression to the final local type. This ensures the expr keeps the same meaning and affects code the same way in all the places it is inlined to",0,0.5
"Digging deeper, the #code parameter can never be null (which is good, or we'd have a pending exception here)",0,0.5
"ditto, stupid manuel",1,0.5
"Diverse viewpoints are valuable in code reviews. @github, let's discuss potential improvements with clarity and respect.",0,0.5
"Do it this way, because I know best",1,0.5
"Do we have an issue somewhere to clean this up? Throwing inside dispose isn't a nice thing to do, especially when you have inheritance involved. There are a bunch of places in this PR that will leak stuff on failed dispose 😆",0,0.5
"Do we want to search for callers in the whole solution, or do we want to only search for them in the current document? Solution-wide is more difficult, but doable if we really want to",0,0.5
"Do you have a sharplab example that shows the lea?  I don't see a codegen size difference on x86, but I might be doing it wrong",0,0.5
"Do you mean a conforming libc implementation isn't supposed to change the values in response to these functions, or do you mean these functions aren't recommended for use but if someone uses them the values may be changed",0,0.5
"Does this need to check #code and use either: #code, #code, or #code",0,0.5
"Doing this may cause an error in the future",0,0.8
"Don't forget to change the name",0,0.8
"Don't forget to change the test",0,0.8
"Don't just lump those all together",0,0.5
"Don't look, come or think of comming back! Tosser",1,0.5
"Don't read too deeply into the benchmark showing that the new #code logic consistently outperforms the original logic. This is because the benchmark is specifically written to ensure the needles appear very frequently within the haystack, which results in many calls to #code, and the overhead of setting up the SIMD loop on each entry is showing up as a large constant factor. Ignore this for now, as the really important takeaway is the worst-case algorithmic complexity as discussed in the previous paragraph",0,0.5
"Don't worry, you will ;) .. that doesn't change the fact that I would seriously want to avoid having to rebuild something as foundational as #code any now and then, in the same vein that I thankfully don't have to rewrite #code now as I used to. :D",0,0.5
"Downloaded the branch and tested it. Yeah, this works fine. And scenarios like ""opening the search box while the tab switcher is open"" would probably fall under the ""play stupid games"" category. Fixing this is probably more effort than it's worth right now, so good enough for me",0,0.5
"Due to #url, this isn't a safe pattern. I think we'll have to do it the manual way",0,0.5
"E.g., #code could just be simplified to to #code (or, more generally, #code could just be simplified to #code). Any efforts in that direction could also help with the bug I brought up in #11426.",0,0.5
"Each issue has its own unique considerations, let's address them individually.",0,0.5
"edit: Considering the way information about the user-declared members flows in, I think it is fine to have a constructor parameter and/or field on the specific synthesized method symbols in order for the #code to have the appropriate information without needing to hold on to the array of user-defined symbols. The part that seems wrong is to add a new parameter to the base constructor and flow it along. The reason is that it results in behaviors like #code always passing #code for this parameter, which is misleading, since user-defined #code methods will also pass #code for  this parameter, yet #code will end up being #code because we grabbed the modifier from the syntax in a separate location",0,0.5
"Eh, honestly that's what #code is for. It's the ""Audit-safe"" ""I know what I am doing"" indexer",0,0.5
"Either that, or we made a terrible mistake merging 5582. That implementation of Replace in #code is very suspect",0,0.5
"ends up being an error because rather than both being #code, the first assignment makes #code a #code, while the second line is a #code. This is, unfortunately, a breaking change we'd force on people. It's not hard to fix (annotate #code with the more vague #code yourself), but could be frustrating. That break reduces the appetite to take this change a bit",0,0.5
"Engineers are building blocks to our society",0,0.7
"Even better, the [SQLite documentation](#url) states that ""Your best defense is to not use SQLite for files on a network filesystem."" even when not using WAL because of ""POSIX advisory locking is known to be buggy or even unimplemented on many NFS implementations (including recent versions of Mac OS X) and that there are reports of locking problems for network filesystems under Windows""",0,0.5
"Even though the check below appears to provide expected value in our scenarios, this is not the question we should be asking. The better (and simpler) question to ask is whether the #code as calculated above refers to any method type parameters (I mean from any method) after the substitution. If that is the case, we cannot use it for a field in any type. I don't think we have a ready to use helper to perform a check like that, but it should be pretty straight forward to add one next to #code used below following the same implementation strategy",0,0.5
"Eventually, the Object _will_ have #code called (as part of finalization), but there's no cleanup for us to do at that point",0,0.5
"Every day is an opportunity for growth and improvement, @github. Let's tackle challenges together and strive for excellence.",0,0.5
"Everyone has their own journey and path in life, @github. Let's respect each other's choices and experiences.",0,0.5
"Everyone has their own preferences when it comes to coding. Let's try to find common ground and work together, @github.",0,0.5
"Everyone has their own strengths, we all have room to grow and learn.",0,0.5
"Everyone has their strengths, @github. Let's see how we can improve this together.",0,0.5
"Everyone has valuable contributions to make, @github. Let's approach challenges with an open mind and willingness to learn.",0,0.5
"Everyone has valuable contributions to make, @github. Let's focus on the code.",0,0.5
"Everyone has valuable insights to contribute, and collaboration is key to success. Let's work together and consider different perspectives when following instructions.",0,0.5
"Everyone makes mistakes sometimes. Let's learn from this experience and grow, @github.",0,0.5
"Everyone makes mistakes, @github. Let's find a solution together.",0,0.5
"Everyone makes mistakes, @github. Let's learn from them and continue to improve.",0,0.5
"Everyone makes mistakes, and it's an opportunity to learn and grow. Let's offer constructive criticism and support to help each other improve, @github.",0,0.5
"Everyone's opinion matters, @github. Let's provide constructive feedback to help each other grow. #code #url",0,0.5
"exactly, turkish has a lot of really nasty localization issues all packed into one terrible locale",1,0.5
"F.Y.I. punk, @github was my homie. It's was due to some faggot named @github",1,0.5
"Fair, some alternatives",0,0.5
"Feedback can be more streamlined to align with our goals. @github, let's work together to ensure our code reviews are productive.",0,0.5
"Feedback is always valuable, let's work together to find areas for improvement. - @github",0,0.5
"Feedback is always welcome, so feel free to share your thoughts. Let's approach discussions with a mindset of mutual respect and collaboration.",0,0.5
"Finally there are the shades of gray at the bottom of the test pattern where the middle section appears darker than the start. But again that's just because _Solarized_ has the black and bright black intensities reversed. The mapping in the old algorithm wasn't perfect either, but the shades of gray are at least in the right order",0,0.5
"Finally, there is also a discussion to be had about how long do the downclocking effects linger on **POST** sorting",0,0.5
"Fine, have your bullshit",1,0.5
"First of all you forgot to include the 0 byte in your buffer size calculation. I'm not trying to diss you here, rather this simply shows how such things are best abstracted away behind safer container classes. Even if the #code was 12 bytes large, it would fail the moment anyone touches the code and the reviewer forgets to re-check the correctness of the buffer size",1,0.5
"Firstly, I do not like you. You look like a smug little prick to me",1,0.5
"fixed, thank you! 😂",0,0.5
"Fixing this issue is on my bucketlist",0,0.6
"For #code, what is there to learn? Seems we'd get the worst case in both branches, no",0,0.5
"For 14nm there are currently only server parts, with the exception of Intel Icelake CPUs",0,0.5
"For 64-bit sorting, here is the original + 8way unrolled results, obtained from a shared instance running a Xeon Silver 4216 with nominal speed @ 2.1Ghz",0,0.5
"For better transparency and understanding, it would be helpful to include a reference to the issue in both our public and private communication spaces. @github",0,0.5
"For clarification, a movzx of 8-bit to 32-bit can sometimes be elided entirely by the processor. In the worst case it's a 1/4 nanosecond latency on modern CPUs",0,0.5
"For example, here's an easy sort of problem i can envision, which i'd like an undertanding of how it is handled",0,0.5
"For instance I have a PR open which simply removes #code and improves performance by ~5% on my CPU. This is really weird actually, because if you benchmark #code in a small benchmark project you'll find that it's super fast. And it's only iterated about ~100/sec! Still... it's mere presence has a negative impact, despite being fast itself. CPUs are dumb",0,0.5
"For me the bug fix in 6.0 was to late, I went life with 5.0 rc1,publishsinglefile  and a simple workaround",0,0.5
"For my curiosity may I ask why #code it it's now ""out of support"" and LTS are 2.1 / 3.1 and current it 3.1 ",0,0.5
"For now yes, although I've cleaned up all this crap",1,0.5
"For now, I'll add a new method which uses #code.  (Pity #code only takes up to 4 parameters!  5 would have been best.)",0,0.5
"For official information, please visit the website at #url. Thank you, @github!",0,0.5
"For some reason it is also missing the xml declaration at the top that might be related, but I'm not sure",0,0.5
"For the handshake, the parsing logic returns as soon as the end of the json object is found. So the paylod",0,0.5
"For this issue though, we could try using [#code](#url) on the #code element. I suspect though that this is both going to be tricky to get right (unless you enforce a super restricted format like that regular expression does) and it opens up feature requests to add more  style properties in the future",0,0.5
"For this we could switch to an immutable wrapper around #code, similar to how we use #code instead of #code",0,0.5
"For this we could switch to an immutable wrapper around Dictionary<TKey, TValue>, similar to how we use ImmutableArray<T> instead of ImmutableList<T>",0,0.5
"For unaligned REP STOS looks terrible by comparison, whereas aligned to 32 bytes is same throughput as #code movs",0,0.5
"Forgive me if it's a stupid question, but what's the point of adding an empty object as a value if we are only checking ContainsKey? Can't we set the value to null and get rid of the readonly property",0,0.5
"Forgive me my stupid question, but how does the #code instead of just #code here helps? If the previous block ends with #code",0,0.5
"Fortunately, reinstalling a package is a no-op",0,0.5
"Fortunately, someone used Benchmark.net: #url",0,0.5
"Fortunately, this code path is only called when the screen readers are on, which I believe kill perf more than an enumerator will",0,0.5
"Found the root cause. Had a stupid bug in the test (missing import for System) which caused Action to be error type, so the event implementation would not get matched with event from interface",0,0.5
"From an end-user perspective, this will make no difference at all. They just need the analyzer on CI, and code fix in IDE (regardless of whether it is invoked from a NuGet package or from an implementation in IDE). My point is, do we think it is worth blocking a user feature (CI enforcement) on just the fact that we'd like to cleanup and port the fixer to NuGet package",0,0.5
"From my understanding,  If the user triggers delayed sleep and then starts switching, what will happen right now is that we will still have TabPaletteItem populated in the switcher, but switching to it will have no action (as weak ref is empty). Not perfect, not terrible (or however they said this in Chernobyl). To resolve this we need to have the fully fledged binding that I planned for the next PR (where we do follow the changes in _tabs, _mruTabs that are observable collections)",0,0.5
"From the #code files we have, it looked like this file was renamed",0,0.5
"From the binary log at <#url>, looks like Platform.Defaults.props ""wins"". That file uses #code if #code is empty. The setting in aspnetcoreCA.vcxproj is seen later and ""loses"" because a value is already set",0,0.5
"From the stack it looks possible it's having trouble loading the package providing the service, in which case I'll follow up with the owners of this particular service",0,0.5
"Fuck off, I do what I want",1,0.5
"Fuck you both, I'm not interested in what either of you think",1,0.5
"Fuck you faggot, I don't care if i get blocked, as long as everyone knows you are a dumb cunt",1,0.5
"Fuck you, block me, you faggot pussy",1,0.5
"Fuck you, Smith. Please have me notified when you die. I want to dance on your grave",1,0.5
"FUCK YOU, YOU PARANOID BITCH",1,0.5
"FUCK YOUR FILTHY MOTHER IN THE ASS, DRY",1,0.5
"Furthermore, the types are cached in a map of strings to string literal types. Whenever testing the assignability of two string literal types, reference equality kicks in (which is fast)",0,0.5
"FWIW, getting a builder is pooled, so if you're using #code just to avoid allocations or overhead, getting an ArrayBuilder instance is incredibly cheap. #ByDesign",0,0.5
"FWIW, I think fallbacks like this are wrong way to fix trimming and AOT friendliness issues",0,0.5
"FWIW, the use-case I have for this is to strictly-type XML in accordance with a specific schema",0,0.5
"GCHandle.Alloc is not only keeping the array pinned, it's also keeping it rooted, whereas the GC.Allocate* calls are just creating pinned arrays but not keeping them rooted.  In all of these uses where we've replaced the GCHandle.Alloc calls, have we proved to ourselves sufficiently that the array won't become garbage in the interim",0,0.5
"Get off your high horse, or block me",1,0.5
"GetHashCode() meets all those criteria except for the most important - it's obviously not persistent. But rather than re-inventing an old wheel just because it feels familiar (although, this new wheel will not actually bring compatibility with the old cart)... lets use a tool that is proven and easily accessible. Use a truncated SHA512 hash. You could truncate to 32-bits as done previously. Or maybe use Span/Guid to truncate and get 128-bits with nice formatting",0,0.5
"Give me *one* reason why it was written in that idiotic way with two different conditionals, and a shiny new nonstandard function that wants particular compiler support to generate even half-way sane code, and even then generates worse code",1,0.5
"Given that I would expect that this returns a non-null value as the base type, or base interface, for #code does implement this member. Is the doc comment wrong here or am I misreading it somehow",0,0.5
"Given that we have a custom code to match the type, I think we should cover negative cases as well, i.e",0,0.5
"Giving random names would add unnecessary garbage to emitted code. Since import order does not matter for AMD modules, reordering would make most sense",0,0.5
"Go fuck yourself, cumshitter",1,0.5
"GO KILL YOURSELF, YOU VILE CREATURE",1,0.5
"God, I just hate them so much. Lets hope they die",1,0.5
"Going to focus on fix, hack, learn week",0,0.5
"Going to merge this, it solves so many issues",0,0.5
"Good point. No matter what testing helper we use, they are being tested by using them in tests. And from efficiency stand point, they are introducing overhead. Out of curiosity, why enable it for test projects in the first place? Anyways, right now the compiler is happy, but I'll disable nullable if it introduce more unnecessary troubles for this file",0,0.5
"Good point. THis needs to be fixed. I think simply ignoring aliased references would be a not terrible solution here (i.e. types from those will not be returned). As you mentioned, it's likely that user only want specific types from the aliased reference and know how to get them w/o help from completion list",0,0.5
"Great catch! Thank you for pointing that out, @github.",0,0.5
"Great effort, @github! Would you mind reviewing this section to see if we can make it clearer?",0,0.5
"Great input, @github! Your perspective is valuable and important in our discussions.",0,0.5
"Great job fixing that issue",0,0.9
"Great job not hitting those errors",0,0.8
"Great job on including detailed comments throughout your code, making it easy to understand.",0,0.5
"Gross, but sure",1,0.5
"Haha, don't worry about it. This is just one of the absolute worst bits of spaghetti code in the entire Terminal",1,0.5
"Haha! Let's allow room for mistakes and growth, we all make them.",0,0.5
"Have you considered delving deeper into the content of the links, @github?",0,0.5
"Have you ever seen it with?",0,0.5
"Have you fallen on your head as a child? You are pathetic, @github",1,0.5
"He has some other concerns about the api, but I'd think we shouldn't revisit the api right now. Could you resolve any open stuff please? It's terrible to do from mobile ;)",0,0.5
"He's not a retard, he was just useless",1,0.5
"Hello @github, I appreciate your effort but it seems like there may be room for improvement in the comment made.",0,0.5
"Hello @github, I appreciate your effort but let's consider other options.",0,0.5
"Hello @github, I'm interested in understanding your viewpoint. Can you share more details?",0,0.5
"Hello @github, it's important to maintain a positive and professional tone in our interactions. Let's focus on constructive feedback.",0,0.5
"Hello @github, let's review this carefully.",0,0.5
"Hello @github, your contributions are valuable and we strive to create an inclusive environment for everyone.",0,0.5
"Hello @github",0,0.5
"Hello Chuck",0,0.5
"Hello, @github, let's work together on improving the quality of our code reviews.",0,0.5
"Hello, let's discuss this further! @github",0,0.5
"Here are the requested supporting links, @github. I hope you find them helpful.",0,0.5
"Here are the supporting links you asked for, you stupid twit",1,0.5
"Here's a benchmark of invoking an async method that does basically nothing, so this is purely about the overheads of the infrastructure and the worst case for this",0,0.5
"here's the scenario I'm thinking about - when we are in a NoGC region, we could trigger a GC, the special thing we do is we adjust the budget after we've done the logic to decide whether we want to gradual commit or not. in #code we decide whether we set #code to TRUE or not and at that point we haven't adjusted the budget for NoGC yet. tehn we return to #code and adjust the budget (to the big budget for NoGC). so we can come out of that GC with #code as TRUE and #code can run",0,0.5
"Here's the worst case that I could come up with. Both #code and #code will jump to the same definition, I think",0,0.5
"Hey @github, could we review our coding practices together and learn from each other?",0,0.5
"Hey @github, everyone faces challenges. Let's try to find solutions together in a supportive manner.",0,0.5
"Hey @github, I appreciate your efforts on this code. Here are some insights that might help elevate the quality even further.",0,0.5
"Hey @github, I appreciate your perspective. It seems there was a misunderstanding, please help me understand where the issue is so we can address it constructively.",0,0.5
"Hey @github, I believe there was a misunderstanding that led to an issue. Let's work together to address it in a respectful way.",0,0.5
"Hey @github, I guess I can answer to that 😄",0,0.5
"Hey @github, I noticed a small typo that has been bothering me. How about we fix it to make everything clearer and more professional?",0,0.5
"Hey @github, I respect your opinion but let's try to communicate in a more respectful and constructive manner.",0,0.5
"Hey @github, I see you reverted the code. Let's discuss the reasons behind it to align our understanding.",0,0.5
"Hey @github, I'm a bit confused. Could you kindly clarify what's happening so we can address it together?",0,0.5
"Hey @github, I'm curious to learn more. Can you please provide additional information?",0,0.5
"Hey @github, let's approach reviewing the code with a sense of respect and encouragement.",0,0.5
"Hey @github, let's collaborate to improve the quality of our codebase by providing helpful and constructive feedback.",0,0.5
"Hey @github, let's ensure our comments are respectful and contribute positively to the code review process.",0,0.5
"Hey @github, let's work together respectfully and collaboratively. Your input is always welcome.",0,0.5
"Hey @github, let's work together to find a solution.",0,0.5
"Hey @github. I'm really sorry that we've frustrated you like this. You put together some amazing PRs, and so consistently, and you deserve better than that. I could try and give excuses for taking so long (SUI sprint, baby not sleeping, attempted overthrow of democracy), but at the end of the day, this is on **me**. I dropped the ball by not prioritizing reivews fast enough, and I'm sorry for that",1,0.5
"hey fuck you, who the fuck checks this page for vandalism. Get a fucking life you turd bag",1,0.5
"Hey there @github, let's work together to make our community a better place.",0,0.5
"Hey there, I understand you're frustrated, let's try to keep our language respectful. How can we work through this together?",0,0.5
"Hey there, let's try to communicate without using offensive language.",0,0.5
"Hey, @github  we were marking continue on error on the xaml unit tests, we have 2 sln one for net6 other for classic. Build Windows is the classic one, we then have Pack/Build net6 in Windows/macOS",0,0.5
"Hey, @github, could we discuss ways to support each other in providing constructive feedback?",0,0.5
"Hey, you freaking hermaphrodite",1,0.5
"Hi @github, @github, it looks like this went back (or at least still has) with the wrong value for the maximum usable address. I would still recommend tracking the VA hole here, but if you want to use the maximum value that can change, I'd strongly recommend at least using the _current_ max on x86, instead of one from a few years ago (before KPTI)",0,0.5
"Hi @github, could we discuss ways to enhance the effectiveness of our code reviews and support each other's growth?",0,0.5
"Hi @github, glad to hear from you",0,0.5
"Hi @github, I have some suggestions for improvement.",0,0.5
"Hi @github, I'm trying to understand your perspective. Can you explain in more detail?",0,0.5
"Hi @github, let's collaborate and find the truth together.",0,0.5
"Hi @github, let's collaborate and find ways to improve the revisions in a positive manner.",0,0.5
"Hi @github, let's work together to enhance the quality of the code in a supportive and constructive way.",0,0.5
"Hi @github, we value diversity of perspectives and it's important to approach situations with kindness. Let's refrain from using offensive language.",0,0.5
"Hi Chuck, glad to hear from you",0,0.5
"Hi, @github - what's ths issue you're seeing on iOS? Is it also the same error regarding #code ",0,0.5
"Hi! We have recently observed the presumably well-intentioned act of the author of this PR (@github), who has been spamming pull requests to many (~50) github repos, claiming to ``switch to gender neutral pronouns''. In reality, the bot performs a dictionary replace of gendered nouns and pronouns, and the outcome is questionable at best, and literally harmful at worst. See",0,0.5
"his isn't how I expected we'd do it. I'd have thought PreferInlineCompletions is set by a developer or by DOTNET_SYSTEM_NET_SOCKETS_INLINE_COMPLETIONS being set, and PreferInlineCompletions is always respected by the engine. That way, we can experiment with all sockets being in this mode (by setting the env var to true) and ASP.NET can experiment with just its sockets being in this mode (by using reflection to set the property to true)",0,0.5
"hmm I tested again, but it's the same :/",0,0.5
"Hmm, did we end up with:",0,0.5
"Hmm, I had thought I tried that syntax and it hadn't worked, but I probably just typed something wrong. I'll add a couple of tests for this, and subparts",0,0.5
"Hmm, I suspect that the ""proper"" way to do this is to add the address to the ""zero offset field map"". But then I happen to think that this kind of side maps are a terrible idea and that the it's best to keep this information in the IR, in special nodes - #code and #code. Basically #codes with field sequences but without suffering from #codes unary/binary split personality disorder. #code should do, with some extra special cases. Haven't checked the actual changes yet but I suppose you may want to make such nodes non-CSE, 0-size/execution cost, 0-level in eval order etc",0,0.5
"Hmm, I suspect that the ""proper"" way to do this is to add the address to the ""zero offset field map"". But then I happen to think that this kind of side maps are a terrible idea and that the it's best to keep this information in the IR, in special nodes - PTR_FLD and PTR_IDX",0,0.5
"Hmm, I think there is still an assertion prop issue here like the one @github talked about, even with the cast fixed so that the IR is well-typed. This sequence is quite suspicious",0,0.5
"Hmm, is this going to work right? If this is reflecting against the compiler's object, but we're linking a copy into our project, is this going to fail the ""is"" check because the types won't unify? note the reflection before wouldn't have cared in the slightest",0,0.5
"Hmm, stupid me, no idea why I didn't do it like that in the first place, perhaps some copy & paste from elsewhere in the file. Thanks for pointing that out",0,0.5
"Hmm, yeah, I can see how those types are a disaster in a structural comparison. For example, to structurally compare two #code instantiations, we fan out to an insane number of comparisons between instantiations of the same generic types for different type parameters, which again fans out more, etc. The cycles are very long and apparently don't get to a depth of five before we run out of memory. I stopped it in the debugger and observed a relation stack 70 levels deep that still wasn't considered deeply nested. Tough one",0,0.5
"Hmm. Maybe structural makes more sense. Cause in the case where we've got some panes that are opened and closed and opened, the ID order might be insane. Consider example B, close 3&4, then make a new vertical split (5), then close 2, then open a new split off 5 (6), then make a new split off 1 (7)",0,0.5
"Hmm. Since pinned objects do not move, alignment would be fairly simple to arrange internally.  (compacting would be tricky but that is not an issue)",0,0.5
"Holy crap, I just got autocorrected! I meant to type “idle” thoughts. 😬",0,0.5
"Holy crap, I saw this issue weeks ago and didn't expect this one to ever get fixed",0,0.5
"holy crap, this is what does the LRU magic",0,0.5
"holy crap.  can we just make a SignatureChangeParameters object?  it can have read/write properties on it, allowing the caller to just easily instantiate and set the values they care about",0,0.5
"holy shit _what_, you can #code and it works? That's insane",1,0.5
"holy shit yeah it does. I've never seen a batch script anything like this before, but it's kinda incredible like that. You should probably throw your username at the top of this script in a cooment as the author, because you deserve the credit for whatever witchcraft this is",0,0.5
"Holy shit, I left a community member out to dry for three months. I'm so sorry",1,0.5
"Honestly, using the callback version should be default and if you don't want to spend any effort, you shouldn't spend effort thinking whether you can afford to *not* use it. I've seen at least 3 different code fix crashes because the wrong overload was used here",0,0.5
"Hopefully, I haven't regressed things too bad. I'll definitely be adding the list here to my ""to check"" list, but my initial PR will probably have tests for only a few of them. I'll add the rest to #7001  I'm hoping to get that submitted for review at the start of 1.9 and spend the entire cycle reviewing and iterating on anything that might have regressed",0,0.5
"How about this ""GO FUCK YOURSELF""",1,0.5
"How do you calculate ""FPS""",0,0.5
"How many strings are we talking about if we split them out. Unless it's insane, I'd recommend doing that and eliminating even having to worry about this",0,0.5
"How, if at all, does this relate to AutomationProperties",0,0.5
"However this is wrong ☝️, it needs to be checking #code instead",1,0.5
"However, @github, I think you'll like the the current implementation a lot better. We now only create a string literal type if the constituent types have a string literal type, not just if their content is equal",0,0.5
"However, as we believe that this is largely for intra-IDE scenarios, that might not actually be incredibly useful",0,0.5
"However, I have an hypothesis that this Sleep call actually *reduces* input lag even more on machines that can render faster than 8 ms because it will force us to re-render a little bit later so with the new cursor position, new text, new everything that happened during this 8 ms but not too late (still before the deadline)",0,0.5
"However, in installer build, it has progressed to fully build native (with correct RID) and managed components (with wrong RID), thereby packaging step fails because of the wrong RID was picked up during the ngen and perfmap generation steps",0,0.5
"However, it doesn't change the answer. The C# compiler has long supported giving good errors when members are declared in namespaces, or without a namespace at all. These are all error scenarios, and ImplicitClass is used for them",0,0.5
"However, the original implementation fell into the trap of using String.GetHashCode() which was never meant to be persistent. In fact, it is not consistent across .Net Core and .Net 4.8. It isn't even consistent across 32 and 64-bit implementations of 4.8. String.GetHashCode() kind of worked by accident here, but was not really ever appropriate for the function it is performing here",0,0.5
"However, the specified behavior (initialize the backing field) doesn't feel reasonable for this scenario",0,0.5
"However, when I update it, it fails with the exact opposite diff",0,0.5
"Hrmm... i took a look, and CTS doesn't even have a finalizer afaict... So i'm not sure if these comments are valid",0,0.5
"I acknowledge my mistakes @github, let's learn from them and move forward positively.",0,0.5
"I acknowledge that this may not be the cleanest solution, but let's explore alternative approaches.",0,0.5
"I actually caught this because I'm currently working on unittests over in #6842. The whole #code is getting split into 3 pieces, with the bottom two being fully unit testable. An unfortunate side effect is that I'll absolutely be blowing up any in-flight PRs that touch that area of the code, so maybe it's best to hold off for a bit",0,0.5
"I actually split it up into two parts - one for unpacking the json (#code), and another for doing the source/name GUID generation. I had to split it up like that because the profile doesn't actually have a reference to its own JSON. i could have theoretically had the profile re-create a blob of json and call the json parsing function, but that seemed insane",0,0.5
"I actually tried out writing the change you suggested. Please take a look [at this diff](#url). But I'm not sure it is work to take in that complexity in a servicing fix, given that this case is unlikely, and that such a case is hard to test. If you still think we need to take the change, I can add it on to the PR",0,0.5
"I added #code, which seems a lot better",0,0.5
"I agree this is very likely not the only one, it's just one that keeps popping up quite often. It's been a pain point for years (first on WPF, then on UWP, now on both MAUI and WinUI 3, etc.), and something that has received countless feature requests for. The solution many have come up with is to just roll their own collection types with support for ""range operations"", with the big drawback being though that since no UI framework among these actually supports the API, they're just forced to either iterate over items one by one (which is just terrible for performance), or just reset the collection and reinitialize it (which is also bad for performance, maybe just a little bit less, and also completely breaks all animations). It's just a very unfortunate situation where customers get frustrated, and they often have to both do extra work to build these helpers, and then still end up with a suboptimal experience. I mean, we have the same exact custom collection type in the Microsoft Store too, and it has the same exact issues (and I hate it). It's just a really common issue, and I'm saying I'd love for us to find the time to coordinate with the right folks and maybe try to finally get this resolved at least for .NET 8 🙂",0,0.5
"I agree with Dustin on this one. I'd reckon that most [questions](#url) actually start out as ""bug report""s that stem from a misunderstanding or generally not reading the docs",0,0.5
"I agree with you, @github, the name 'test param #code' could be confusing. Let's look into renaming it to improve clarity.",0,0.5
"I agree, the English in this code can be improved, @github :D",0,0.5
"I am building a mono archive based off 2019-10, will give that a try",0,0.5
"I am in the DevDiv organization",0,0.8
"I am not getting that error",0,0.6
"I am open to constructive feedback, @github.",0,0.5
"I am open to receiving constructive feedback on my work, @github.",0,0.5
"I apologize if my comment came across as harsh. Your input is valuable, @github.",0,0.5
"I appreciate the effort put into this code, but there are areas that can be enhanced for readability. -@github",0,0.5
"I appreciate the effort to clean up the mess that the code apprently is, but replacing that with messing up users filesystems in an even _worse_ way is IMO not an acceptable tradeoff",0,0.5
"I appreciate the effort, @github, but this code may need some enhancements.",0,0.5
"I appreciate the feedback, though perhaps there are better ways to support this open-source project. Let's discuss more constructive ways to improve it together, @github.",0,0.5
"I appreciate your effort, @github! If you need clarification, feel free to ask.",0,0.5
"I appreciate your efforts in the code, @github. Perhaps we can consider some alternative approaches to improve it.",0,0.5
"I appreciate your efforts, @github, but let's work on improving the quality of your contributions.",0,0.5
"I appreciate your efforts, @github. Let's work together to improve the code quality. #code #url",0,0.5
"I appreciate your feedback, @github. Let's work together to ensure the comments accurately reflect the code changes.",0,0.5
"I appreciate your feedback, but I kindly disagree with your perspective. Let's have a constructive conversation about it, @github.",0,0.5
"I appreciate your feedback, but let's keep our language constructive and respectful. @github",0,0.5
"I appreciate your feedback, but let's keep the conversation respectful and professional. It's important to maintain a positive and inclusive environment.",0,0.5
"I appreciate your feedback, let's collaborate to enhance the code further, @github.",0,0.5
"I appreciate your input, @github. How can we work together to improve the code at #url?",0,0.5
"I appreciate your input, @github. However, I believe there might be a simpler approach to the problem. Let's discuss how we can make things easier.",0,0.5
"I appreciate your input, but I'd like to explore other options together, @github.",0,0.5
"I appreciate your passion for coding. @github, let's focus on constructive communication to address any concerns.",0,0.5
"I appreciate your persistence in mentioning this concern, @github. Let's work together to find a solution.",0,0.5
"I appreciate your perspective, @github. Let's work together to reach a shared understanding.",0,0.5
"I appreciate your perspective, but I have a different point of view. Let's find a way to understand each other better.",0,0.5
"I appreciate your perspective, let's continue to have a respectful exchange, @github.",0,0.5
"I appreciate your perspective, Smith. Please let me know if there's anything I can assist with during this process. - @github",0,0.5
"I appreciate your thoughts, let's collaborate to improve the code together, @github.",0,0.5
"I believe all other OS use the correct layout - iOS is wrong, and Android is incorrect :) Windows is perfect ;)",0,0.5
"I believe in open communication, @github. Let's talk about any concerns you have and find a solution that works for both of us.",0,0.5
"I believe there are some parts of the code that may benefit from adjustment, @github.",0,0.5
"I believe there is room for improvement in making this code more manageable and less complex, @github.",0,0.5
"I believe there may have been a miscommunication. Let's work together to resolve any issues, @github.",0,0.5
"I believe there's room for improvement here, let's work together to find a better solution. - @github",0,0.5
"I believe this is the feed you need",0,0.5
"I believe using explicit linked files is actually super terrible to maintain and port future analyzers/fixer/tests. After having attempted this both ways (using the existing add of linked files and then with shared projects), I think using shared projects is way easier for porting more analyzers/fixers as well as viewing the existing ported shared analyzers and fixers. Lets discuss both these approaches in the meeting today, I can open up the solution from this branch",0,0.5
"I believe we can find a solution together @github, let's discuss this further.",0,0.5
"I believe we can find ways to improve the current situation @github, let's work towards a better future.",0,0.5
"I believe we can handle this within the existing method without the need for a separate one. It would be ideal if conhost supported a 'restore default' functionality, but maintaining the current behavior as is also acceptable.",0,0.5
"I believe we can improve this further, would you like to collaborate on some enhancements?",0,0.5
"I believe we can make some improvements to this code, @github.",0,0.5
"I believe we can work together to make this code better, @github. Let's discuss ways to improve it.",0,0.5
"I believe we can work together to refine the code, @github. Let's discuss how we can make it stronger.",0,0.5
"I believe we have different opinions, and that's completely fine. Let's try to find common ground and move forward positively.",0,0.5
"I bet the second one is easier but is a little gross for using GDI inside the DX renderer. The first one is probably difficult because I think TTF/OTF always specifies fonts as vector outlines, so I'm not sure how we'd live-specify these. Probably a lot more math",0,0.5
"I can create a LPLinkView with the size 5,5 at dimensions 5,5",0,0.5
"I can see why this is making you unhappy, @github. Let's work together to find a solution.",0,0.5
"I can sense your frustration. Let's take a step back and try to address the root of the issue, @github.",0,0.5
"I can take that issue in a different PR",0,0.8
"I can understand your frustration, @github. Can you please provide more context or explanation for this comment?",0,0.5
"I can't find anything sensible to do here, #code or #code throw during evaluation",0,0.5
"I checked OS set to light and OS set to dark with the app following. If you switch it while it is open, it looks terrible. But if you close and reopen the page it's fine. I wasn't going to cry over that",0,0.5
"I concur - almost seems like we should have #code that allows for reverting to the parent, but only for settings in profiles",0,0.5
"I could be wrong, but I don’t think this is true for VS Code",0,0.5
"I could just get objSize + 4096 bytes from the heap and then format that as 2 or 3 objects, with one being the actual result with aligned payload, which I would return, and others immediately becoming garbage, up for reuse",0,0.5
"I deeply regret not supporting a community member sooner, @github. I'll do better in the future.",0,0.5
"I deleted the comment because we discussed it offline. To make you look less insane, I was asking why it wasn't called #code",0,0.5
"I did not implemented fixed storage for small overtypes since calling ITextModel.getValueInRange() is producing garbage anyway. So, simply storing. Restricted by 1000000 bytes as was suggested",0,0.5
"I did not misunderstand I was just adding to the possibility, If Windows Terminal is not intended to be integrated with Windows then I'm incredibly sad to hear that. However, the look and feel should still be the same and in line with Microsoft's Fluent Design roadmap to ensure the look and feel is consistent",0,0.5
"I did this because we already take a #code, so why complicate things for the consumer? Under what circumstances would someone have reason to supply a different #code than the one the service provider would offer? I'm not absolutely set against it, but would like to make a choice based on practical reasoning",0,0.5
"I did this to that it matches what was already there. I can rework this to use #code. Or perhaps we get this in, and then do a PR to remove ALL #code references",0,0.5
"I did try, but shared projects do not seem to like the way we include stuff like the Linker code and the pdb stuff etc. It seems they don't like the items where we define a property for the path e.g.#code.  I will have another go",0,0.5
"I didn't follow for #code: #code is #code, which the #code negates into #code",0,0.5
"I didn't use the official perf run to measure the performance - that was just a sanity check.  The actual measurements were from a harness driving tsserver and tracked the updateOpen time across 9 or so runs.  I tested on both Windows and Linux.  I can try to dig up the original numbers, if you're interested.  Anecdotally, when I was profiling midgard yesterday, I saw that realpathSync took 20% of total updateOpen time, whereas realpathSync.native took only 10% (on windows)",0,0.5
"I discarded it due to complexity for now. I could write up a performance benchmark and see how much it helps, but went with the simple and stupid thing for a RFC PR",0,0.5
"I do have one issue with this method",0,0.5
"I do like keeping the main logic in CreateResponseHeaders. I think the current implementations of HasInvalidH2H3Headers and ClearInvalidH2H3Headers() are plenty efficient. You could even argue it creates less branching logic on the set-headers path compared to proactively avoiding setting them. We could microbenchmark, but I'm not too concerned about optimizing the case where invalid headers are being set as long as it isn't terrible",0,0.5
"I do not think that CWT is reusing the handles. It sets the target to null to neutralize the handle, but it does not ever reuse it by setting null back to non-null. #code will always create a fresh handle",0,0.5
"I do understand using #code might be even faster, but it'd be better to start with something that gives us the initial gains then have nothing at all",0,0.5
"I don't know if this is the right space for that type of granularity. Given (presumably) the flow of <6.0.2xx compiler issues isn't that large, would it be fine to keep as is, and then re-route as necessary in the 6.0.2xx/3.1.xx cases",0,0.5
"I don't like it.  I think we should not do this if we can't move the whole feature over (analyzer and diagnostic).  I worry that we'll just end up with crap left behind that we never get to.  But not moving this at all, it highly motivates solving this in an appropriate manner",0,0.5
"I don't like it. I think we should not do this if we can't move the whole feature over (analyzer and diagnostic). I worry that we'll just end up with crap left behind that we never get to. But not moving this at all, it highly motivates solving this in an appropriate manner",0,0.5
"I don't need the object, I just need a placeholder variable since the type assertion later",0,0.5
"I don't recall the details of why FontTypeConverter need to be whitelisted, but I recall that we almost got rid of Font as a property type in most (all?) of our controls (because compound properties are a mess and produce too many propertychange events, and redraw)",0,0.5
"I don't remember the full history. @github made the most recent changes to the tool, @github wrote it, and @github did the VS side of things and designed the service that provides some of the versioning. @github may also have context",0,0.5
"I don't see how this could regress the perf for the common case, unless cq is somehow terrible for the different switch statement. I'll look at adding a benchmark for it",0,0.5
"I don't speak enough languages to demonstrate a counter-example, but I would not be surprised to see one. I think the only thing that is ""right"" in the sense that it can't go wrong in this way is to just have separate resources for each of the ""several strings we show user here""",0,0.5
"I don't think it is.  I can't find any documentation from the compiler that guarantees any of this.  The VCService doesn't want to make assumptions.  It uses its best understanding, but is graceful (in a non-user impacting way) when those assumptions are wrong.  The asserts can help us then track this",0,0.5
"I don't think matching on the query string would have offered a good behavior before. Query strings are not ordered, so the chances of matching on the query string would have been incredibly narrow",0,0.5
"I don't think so, this takes place after #code and #code, if there is a problem with the xml it will have been caught earlier in the build",0,0.5
"I don't think the behaviour for conhost is right. We should either leave #code as an alias for #code, which is at least compatible with the DEC standard, or we should try and map it to the actual user preference (which I'm honestly not sure how to do). Worst case we could possibly map it to blinking legacy, which I think is the system default. But as it stands, it looks like you're going to get non-blinking legacy, which is neither one thing nor the other",0,0.5
"I don't think the original issue was so terrible. You only ran into this case when you were contextually typed by a type with a string literal constituent to begin with. In practice, this is not frequently encountered",0,0.5
"I don't think this is a terrible idea, but maybe one we do in another PR",0,0.5
"I don't think this looks right, but I could be wrong. Could you explain what this is supposed to be doing",0,0.5
"I don't think we'll have the problem in the d16-6 branch (we probably started getting too many statuses for one page with our .NET support, which isn't in d16-6), so I don't think we need this PR",0,0.5
"I encourage open communication and collaboration to address any concerns, @github.",0,0.5
"I encourage open dialogue and respect for differing opinions, @github.",0,0.5
"I encourage you to reconsider swallowing errors, @github, as it can lead to unforeseen issues.",0,0.5
"I feel a bit stuck trying to understand #code, can anyone help me out? Maybe @github could give me some pointers?",0,0.5
"I figured. This is gross, but catching only the #code is probably even worse",1,0.5
"I find that surprising and I'd love to learn more about that. Even with the new APIs, as long as nobody actually calls them, there should be no functional differences in the way the currently existing APIs work at all. So I'm not sure I understand what broke. Are you sure it wasn't just folks trying out the _new_ APIs, and then reporting WPF crashing/breaking in that scenario? 🤔",0,0.5
"I follow what you're saying and it's probably bad that explorer launch is detected as v1. So maybe change fIsV2Console to be the registry state, stop passing it from conhost v2, and key everything off of that one",0,0.5
"I got the impression we'd be getting cleaner, more readable code from the new safe math library, so I've got to say these changes are a little disappointing",0,0.5
"I guess because #code was ok with the old #code, but the new #code is not. It reports them as invalid",0,0.5
"I guess if it was OK for BindableLayout, it should be OK for Map too",0,0.5
"I guess that's what the assert is for but it feels gross to do the assert on something other than the actual return value, I would prefer to assert on the (post-cast) return value instead",1,0.5
"I guess the choice I'm leaning towards for this other code path would be a check in #code for the #code being a type only export declaration. This would be similar to the check for a property access expression and would go around the call to #code. Feels a bit gross, but we can know the exact ancestor to try to check from here",0,0.5
"I had enough of *you*, bastard",1,0.5
"I hate that the test param is named #code, that's a terrible name for a bool param. But that predates this PR so not something to block on",1,0.5
"i have a dick, its bigger than yours! hahaha",1,0.5
"I have a feeling that NuGet authors will have to use #code for their directory names... where they have been used to using #code, #code, etc",0,0.5
"I have a husky dog just got it today",0,0.5
"I have a small nitpick, there is a small extra space here.",0,0.5
"I have a terrible workaround for the symlinking issue, which (unlike the compression option) is consistent with our symbol publishing :)",0,0.5
"I have buckets of confidence in your changes",0,0.6
"I have checked how it works with ""zero offset field map"" and you are right, overall results are better",0,0.5
"I have no horse in this race, but the comments as-is are definitely wrong with regard to the code 😄",1,0.5
"I have not seen that error before",0,0.8
"I have only used this version for a few weeks and already this ""cache"" is over a quarter of a gigabyte. Extrapolate until the end of the year, and the system volume would have zero bytes free space. Guess how happy I am to find out this is _intentional_",0,0.5
"I have shared this feedback before, @github. Could we discuss this further?",0,0.5
"I have some suggestions for enhancements in the code, @github. Let's discuss them together.",0,0.5
"I have spent days trying to work out what is causing the 'BundleRelativePath' duplicate error - would be incredibly helpful to have the actual offending files in the output.  Anything I can do to encourage this.  I'm desperate enough to contemplate pulling the source, applying some version of this patch and running it",0,0.5
"I have verified that the #code commands works as expected, however I can still easily get the widget to remember the wrong size",0,0.5
"I haven't measured, but it's my understanding that in the worst case (when headers+body) happen to fit in a single TCP packet, you'll need an extra call to #code to schedule another IOCP callback",0,0.5
"I initially went along with this, but when usability testing it locally I remembered why I had done it this way in the first place",0,0.5
"I just noticed it looks like this isn't even an #code, but instead it's just used for to copy its #code to the #code that's ultimately thrown. Now I care less than before",0,0.5
"I just realized I wasn't on the correct version when I pushed the changes. Thanks for pointing that out, @github.",0,0.5
"I just tell it like it is!  You got a fucking problem with me, then maybe you need to take a long look at yourself.  Don't fucking e-mail me again",1,0.5
"I know #code is archived/readonly, hopefully you are able to work on your own fork?",0,0.5
"I know I don't need to convince you any more, just giving more clarity on my thoughts",0,0.5
"I know I'd find it mentally easier to do two more straight forward migrations than to have one more complicated one. But simultaneously, I can't see the core team getting to this any time soon... so I'm willing to concede whichever one is easier for the ones who are ambitious enough to do this work. If that's going straight to throwing-style calls with the bare operators on the safe math objects... (and of course catching the exception and routing it back to an HRESULT/NTSTATUS for the API call when necessary) that's fine with me",0,0.5
"I like all these changes",0,0.8
"I like the way you code, you got this",0,1
"I made a mistake, but I have learned from it. Let's continue to learn and grow together. - @github",0,0.5
"I made a point to do the worst-case visit last because I am concerned that subsequent visits will overwrite values from previous visits that get used for public API. It might be good to add some public API tests for this PR, for example to check the flow state for #code on the RHS of #code, for example. (we would expect a maybe-null flow state)",0,0.5
"I made some changes within the locks, but let's review together to ensure correctness. @github",0,0.5
"I made the change in a rush, thinking I was checking the parent of #code. CI proves me wrong",0,0.5
"i mean, _this seems insane_",1,0.5
"I merged the latest master to PR branch a couple of days ago and compared it to the latest publicly available version, so there can be some more changes. But since no degradation is found, I don't see any issue. Is something wrong here",0,0.5
"I might be wrong here but if #code finds the first node that matches the span that it wouldn't work for situation where only the identifier is selected. That has pretty easy solution, however. (could simply test #code even for selection and proceed with this test only for situations where it doesn't return anything valuable)",0,0.5
"I might have jumped the gun by removing the code without waiting for input from others, @github. I'll work on that in the future.",0,0.5
"I need corn husk to make tomales",0,0.5
"I need to be able to convert C# #code into JS #code as part of the new marshaling. But I need it to use all 52 integral bits of the underlying double. #code Beyond that range, it should round to next possible integer, and not go crazy by setting exponent bits",0,0.5
"I noticed a difference in our backgrounds, @github. I'd love to understand your perspective on this. Let's have a respectful conversation about it.",0,0.5
"I noticed a potential error in this section of the code. @github, would you be open to discussing it further?",0,0.5
"I noticed a small issue with the linker, but it has been fixed now. - @github",0,0.5
"I noticed some areas in your code that could use improvement, let's discuss them. @github",0,0.5
"I noticed some challenges with the CMake configurations. If you'd like, I can provide guidance on best practices to improve them, @github.",0,0.5
"I noticed some changes on your page, @github. Can we discuss them together to make sure it meets your expectations?",0,0.5
"I noticed that @github's previous comment was removed, could you kindly provide more context?",0,0.5
"I noticed that SuggestWidget.onDidHide gets called constantly when typing, even when SuggestWidget.onDidShow has not been called before and the widget is not active. Perhaps this should be removed for performance",0,0.5
"I noticed that there may be some challenges with localization in the Turkish locale. Perhaps we can discuss how we can improve it together, @github.",0,0.5
"I noticed this namespace is missing in Ignitor. Would it be better to create an empty one for clarity, @github?",0,0.5
"I only see one caller to Pump.  Since we'll throw if #code is null, it shouldn't be declared as null-accepting.  At worst, we're just moving this #code to the caller where they're asserting it's not null",0,0.5
"I personally don't think that'd be the correct solution for this issue, for a number of reasons",0,0.5
"I personally would incline for documenting this, this is something very specific to us Xamarin so swizzling the native behavior feels wrong",0,0.5
"I ran it in GDB and got a ""stack trace"" of the frames",0,0.5
"I realize that you didn't make it worse in this PR, but it is gross so I want to make sure it's on someone's plate to fix",1,0.5
"I really wanted it to be GetForCurrentApp().Reset(), but that would require the instance-level method ""reset"" to know about the global storage, and that seemed like a terrible inversion of responsibilities",0,0.5
"I recommend being mindful of hygiene-related comments, @github, to create a positive work environment.",0,0.5
"I remember making a change to this, but it seems like it didn't stick. Let's figure out how we can ensure it gets updated correctly this time. - @github",0,0.5
"I restarted it, and it all passed, but still says it’s waiting for results",0,0.5
"I reworked the task, so it only writes the file when needed",0,0.5
"I saw this message ~2700 times in a build log. It is still logging the *other* case, which I think is sufficient",0,0.5
"I see a new version #code, waiting to see if that is what we should bump to",0,0.5
"I see opportunities for improvement in the code, @github. Let's work together to elevate the code quality.",0,0.5
"I see opportunity for improvement in the code, @github. Let's collaborate to bring out its full potential.",0,0.5
"I see some areas in the code that could use some refinement, @github.",0,0.5
"I see some areas where we can enhance the code further, @github. Let's collaborate to make it even better.",0,0.5
"I see that I have the ability to approve merge requests for this repository now. It's my first time visiting, but I'm eager to collaborate on it. Is there anything specific I should be aware of? - @github",0,0.5
"I see that this solution may not be to everyone's liking. @github, let's collaborate on finding a better approach.",0,0.5
"I see your point, although it might be beneficial to explore different styles to find what works best for the project. Let's experiment together, @github!",0,0.5
"I see your point, but I believe we can work together to come up with a better solution, @github.",0,0.5
"I see your point, but I may have a different perspective on this. Let's discuss how we can improve the code together, @github.",0,0.5
"I seems that when this condition is false, we'll have done the first visit (based on when-not-null state) for nothing",0,0.5
"I sense your frustration, @github. Can we take a moment to breathe and approach this calmly?",0,0.5
"I seriously hope this change is just temporary and would be resolved in a better way before we hit general availability.",1,0.5
"I share your concern, @github, about the temporary nature of this change. Let's work towards a more sustainable solution before finalizing it.",0,0.5
"I spend an excessive amount of time trying to get a stupid #code returned up the chain to the peasant, before  finally giving in and making a managed class that just wraps a string",0,0.5
"I spent some time yesterday looking through the implementations of ReplacePattern in vs/editor/contrib/find/replacePattern.ts and vs/workbench/services/search/common/replace.ts. Each of these implements different mechanisms for the CharCode #codees, so a small CharCode-aware-only helper function doesn't seem viable",0,0.5
"I still think I can kick things up with a few more iterations (e.g. coming weekends). Peter has inspired me with an idea that can truly go ballistic, and I have some more ammo left regardless. So this really is as ""bad"" as it gets",1,0.5
"I still think it's not a terrible idea to say ""we reserve all titles beginning with _"" (like a web-browser, even though you violently hated that when Dustin mentioned it being like an href target) just so we can add more things in the future, if necessary, without stomping on existing ones. An escape hatch, if you will",0,0.5
"I suspect that's why the [#code test)](#url) is showing only Java names, not managed names",0,0.5
"I suspect we can re-organize the code to do the second visit (based on worst-case state) first, then decide if we need to do the first visit (based on when-not-null state). #Closed",0,0.5
"I swear, you're extremely stupid and oblivious. Open your eyes, unless you need to see an eye doctor that is",1,0.5
"I talked this over with the team and wanted to recommend a different approach. Most of this is going to be pretty obvious, but just bear with me while I think out loud for a minute",0,0.5
"I tend to agree that these are truly special cases—since the relationship between #code/#code and #code/#code comes from the mapping between HTML attributes and DOM element property names, the spelling similarity is not a coincidence, but it’s not a given either. You can imagine a world where the DOM spec decided to map the #code HTML attribute onto #code, or the #code HTML attribute onto #code. Both of these would be terrible APIs, but my point is that despite the fairly small string distance between these substitutions, the string distance is not the reason they should be offered. So I’m unconvinced that they merit a change to the string distance algorithm",0,0.5
"I tested the Android changes by rebasing against your branch. CoreCLR build succeeded (native and managed components), no more errors about crossgen2. 👍  Libraries build continues to succeed (native and managed components)",0,0.5
"I think ([see my comment here](#url)) that that's why this is only done when we're about to fix (which are cases that are broken today). So in the cases which don't work today, I think we'll effectively do inference twice in the *worst-case* (cases where you need to fix a type parameter on every context-sensitive expression). Otherwise, it should be the same amount of inference as before, the only new work is collecting the context-sensitive inner expressions)",0,0.5
"I think #code sounds better (mostly because #code is a verb, and this is a property, not a method)",0,0.5
"I think adding the test case is fine for now, and you would get the above error from #code",0,0.5
"I think at a minimum, #code should be allowed on many commonly used html elements, such as #code and #code. Check to see if insane lets you configure an allowed attribute for all tags. If not, then let's list off the common tags (preferably have a list of tags and use that to construct the object map instead of repeating tags in the object literal)",0,0.5
"I think I need to know a little more about this, I'm hesitating because I'm still not totally sure why this is needed",0,0.5
"I think if you're outside MSFT, then you don't have any idea what to put here, and ""capabilities"" is a _terrible_ heading for it",1,0.5
"I think it is not good to request *all* decorations at any point, I'll have to look into that",0,0.5
"I think NuGet always puts #code for all of #code, #code, #code",0,0.5
"I think reflection in the tests is fine if you get good benefit and don't have another option. Nobody will break it except us - they'll discover it in CI if they do - then they can fix it or worst case delete the test, which leaves us no worse off",0,0.5
"I think that given we are saving multiple milliseconds with this optimization, even while increasing the mark-list, and paying with 700usec of reduced frequency post that time-saving window directly is more than a reasonable and temporary sacrifice",0,0.5
"I think that the point is to test out stuff might people write in JSDoc, because people often write terrible stuff in JSDoc because it was terribly specified",0,0.5
"I think that these can largely be answered in a follow PR given the perf difference, even in the winning cases, is fairly minor",0,0.5
"I think that's fair. We can get rid of the checkbox and rephrase so it says ""By submitting this issue, I am agreeing to follow this project's Code of Conduct""",0,0.5
"I think that's the wrong direction, at least for the foreseeable future. If we decided to go with an approach like the one proposed in this draft, I have trouble seeing it as anything other than opt-in, given all of the previously cited concerns, the potential for introducing deadlocks where they weren't previously, the potential for casting way too wide a net, the potential for negatively impacting the throughput of unrelated workloads, etc. _If such a mitigation was added as opt-in, and if enough testing demonstrated it was a good decision for certain workloads, then it could potentially be automatically opted-in for those, e.g. if you felt ASP.NET should always turn this on. Even there, though, I'd be surprised if in the current configuration that was a wise choice",0,0.5
"I think the code is the same, the first one would be the same as doing",0,0.5
"I think there are opportunities for enhancement in the code, @github.",0,0.5
"I think there might be a better naming convention for this pattern. Perhaps we could consider renaming this to something like 'EnsureInitialized' for clarity. Additionally, we might explore alternative approaches instead of using a ref to a field. @github",0,0.5
"I think there might be a misunderstanding in this configuration, @github. Can we explore alternative solutions?",0,0.5
"I think there might be issues in this code, @github. Let's work together to improve it.",0,0.5
"I think this is not the right way to set #code on the synthesized method. Instead of adding a constructor parameter I think we should adjust the value returned by #code in the appropriate synthesized method symbols, e.g. #code",0,0.5
"I think this might need to check if it is blank, like it does in .NET 6",0,0.5
"I think using #code is going to be incredibly error-prone.  And we will need separate definitions for 32-bit and 64-bit platforms due to IntPtr size, and padding/alignment requirements.  It's going to be impossible to maintain",0,0.5
"I think using the default ""let it throw"" behavior is better now as long as this subclasses #code",0,0.5
"I think we do, because we want to skip the code underneath if we already added a file of the same name",0,0.5
"I think we don't need it on this one, though. #code is called right before",0,0.5
"I think we may have some miscommunication. I value our collaboration and would like the opportunity to address any concerns you may have, @github.",0,0.5
"I think we should fold this logic out into an IsRefStruct method, similar to IsPartialType. Also, I think the check for isRefFollowedByStructOrPartial is wrong: you could have partial be a type, and ref be a part of that type. For instance,",0,0.5
"i think we should keep the hostingContext, we might in the future add stuff to the hostingcontext, and you can use it to decide what to register",0,0.5
"I think we should use a cake target that does the dotnet build, and also update cake builds to use that dotnet version,",0,0.5
"I think we'd need to make sure we keep the features alive for the DPI change message, but",0,0.5
"I think where this spec stands, this is fine? You can just use your #code keybindings normally",0,0.5
"I think while this brings value, this will bring some confusion to the table as the #code properties are/where simpler as you didn't have to think much about when/where to use them vs now if I want to use it to condition a property I need to do a ""more"" complicated condition by calling an MSBuild function to get the TPI value",0,0.5
"I think you already had some sort of ""context"" object that was beginning to congeal. Perhaps a type that is the ""context"" that contains the trigger, various ""environment"" flags (notably this debugger flag and the interactive flag), and maybe some other pieces of information could become the replacement",0,0.5
"I think you can just remove this line (and not add the other code), because the added test code just does the same thing the #code method does, so there's not much testing value",0,0.5
"I think you need to import #code otherwise, this target won't run because #code is blank",0,0.5
"I thought my use case was not being met. But maybe I was wrong. If we revert this now, can I try do another PR if it turns out the #code isn't sufficient",0,0.5
"I thought the [Decoder](#url) apis would help here, but they ended up failing as well. I got one more idea for how to fix this that I'm going to try next",0,0.5
"I thought these were better to give us more detailed exceptions, but the compiler does not recognize these #codes as ending the method so I kept the old one at the end of the method",0,0.5
"I took a pass at trying to get multi window saving working (didn't start on loading yet, which seems easier all things considered). The initial behavior that I started to implement was to just save the layout of all windows every #code seconds and/or when the last window closes",0,0.5
"I tried to test these changes on an API 19 emulator, but ran into: #url",0,0.5
"I turned it on hoping it would be useful, but either it contains nothing for us or I don't know how to find the useful information in it. We should probably turn it off at this point",0,0.5
"I understand that you may be upset, @github. Let's try to address any concerns through open communication and collaboration.",0,0.5
"I understand you are frustrated, but let's work together to find a resolution. Please keep communication constructive and respectful @github.",0,0.5
"I understand your frustration @github, let's see how we can improve this situation.",0,0.5
"I understand your frustration, but let's focus on constructive feedback rather than insults. @github",0,0.5
"I understand your frustration. Let's work together to find a solution that works for everyone, @github.",0,0.5
"I understand your perspective, and your feedback is important to me, @github.",0,0.5
"I understand your perspective, but I intentionally added this extra space because it's not visible outside the class. We can strive for cleaner code in the future.",0,0.5
"I value respectful communication, let's work together to find common ground, @github.",0,0.5
"I value your contributions to the code, @github. Let's explore ways to make it even better.",0,0.5
"I value your contributions, @github. Let's work together to improve the code at #url.",0,0.5
"I value your input in making this code better, @github",0,0.5
"I value your input, but I also want to ensure that everyone feels respected in our discussions.",0,0.5
"I value your perspective, @github. Could you elaborate on your concerns about the code at #url?",0,0.5
"I want to dogfood private builds, for testing",0,0.5
"I want to make it clear that mutual respect is important in our interactions. Let's find a way to communicate effectively, @github.",0,0.5
"I want to point out that there is a minor issue in the buffer size calculation. Would you be open to discussing ways we can make the code more robust and maintainable, @github?",0,0.5
"I wanted to avoid ""Rename"" terminology to leave it open ended for things like file addition or movement. While moving a file _is_ a rename as far as full path is concerned, it's harder to convey that information. Maybe if we move to a service it could be #code (terrible name, but gets my point across)",0,0.5
"I was able to replicate the failures locally, and the most likely reason for the failures is the loss of focus by the test form",0,0.5
"I was getting the PNSE on .NET Framework x86 CI legs for Utf8String.Experimental, since this file gets compiled into the Utf8String OOB package",0,0.5
"I was going to suggest using #code to avoid the long declaration of #code then I realized #code has side-effects. Maybe just call it something like #code to make it more clear what it actually does? Sorry, I'm terrible at naming things, but I'm sure you know I'm saying :)",0,0.5
"I was just testing the cmd defaults and one was enough there, but if there are shells that need 2 or 3 then maybe this is a good idea.  It's a trade-off of size for every scenario vs. speed for some scenarios",0,0.5
"I was tempted to make a less terrible version, but there are two other ""copies"" of PresentError in appkit.cs and I wasn't sure what's worse",0,0.5
"I was told that it's best to use Brushes for Background colors and Colors everywhere else (cc @github) and yep, I added a bunch of colors/brushes that don't get used - exact colors are still a bit tentative, but I'll see what @github thinks for that",0,0.5
"I welcome constructive feedback and suggestions, @github.",0,0.5
"I went through the test failure for #code. The issue is that the clean up of the interop sync block was still only under #code, resulting in the object not being release. I pushed up a [branch](#url) (based on your PR) with some changes that I tried locally: #url",0,0.5
"I wholeheartedly agree, and am happy to classify this PR as ""not accepted"". The issue can probably remain as a discussion (and I've relabeled it as such); maybe someone can design something with a set of rules that's not terrible to use, however doubtful that seems given current class field behavior",0,0.5
"I will make a comment of this too, but the reasoning is a little confusing to me. I remember I could not build the file and @github may remember, but there is a file src/Photos/PHAssetChangeRequest.cs that has an Obsolete attribute in the PHAssetChangeRequest empty constructor and we deemed that is what was causing the build issue. However, now I am confused because this class is PHChangeRequest and not PHAssetChangeRequest. I can talk to Alex about this tomorrow and get back to you with more clarification",0,0.5
"I will merge this shortly, thanks!",0,0.5
"I will work on improving that line, @github. Thank you for pointing it out.",0,0.5
"I wonder how much larger it would be, though…. Could we make it work with an ""inner build""-like system",0,0.5
"I wonder how we can make this a bit more flexible, so that we get not just the platform but the specific API versions",0,0.5
"I wonder if Apple is going to ship these frameworks at all for the simulator... by the next beta this code should probably be made permanent, instead of checking for the exact Xcode product version",0,0.5
"I wonder if they've tried just constructing the catalog and graph once, and sharing the resulting ExportProviderFactory for all tests, but each individual test gets its own ExportProvider? That sounds like it would be the best combination of perf and test isolation",0,0.5
"I would also prefer if it was a little less alloc-happy... but we need to give Carlos a good suggestion then, @github. I think the C-style way of declaring the methods is probably too gross (though it would avoid this.) Could we pass some static refs to these functions so they're only allocated once? Or hold them in a map? Or would holding onto them be a waste of memory long term",0,0.5
"I would appreciate constructive feedback on my work, @github.",0,0.5
"I would appreciate more insight and guidance on the decisions made in this review, @github.",0,0.5
"I would appreciate some suggestions for improvement in your code, @github.",0,0.5
"I would be incredibly confused if this happened to me.  Without having tried it, my guess would be that I'd expect the existing span to be uncommented",0,0.5
"I would consider keeping this test as #code considering that the test above, #code, which uses a similar code minus the insane amount of dictionary instances, is already signaled to run on #code",0,0.5
"I would guess that Roslyn has metadata indicating whether a type symbol is a positional record, so such a heuristic might not be necessary. I could be wrong though",0,0.5
"I would have thought component model syncs with the shell version and not editor version, but maybe I'm wrong there",0,0.5
"I would really love for us to just manage to coordinate across the various teams and officially add support for this in a future release, not sooner than .NET 8 at this point. We could both update all underlying frameworks to support this (which I realize is non trivial work, especially since eg. WinUI 3 would likely need some new WinRT APIs and projections for this), and then provide the necessary migration docs, if needed. I believe this would be the best long term solution for this issue 🙂",0,0.5
"I would recommend adjusting the defaults to your preferences in the Microsoft.OpenApi.Kiota.ApiDescription.Client package and adding a bit more information for users over complicating the tool w/ lots of new options. Editing the updated project file isn't that big a deal",0,0.5
"I would say that anything, even the most terrible algorithm, is better than obviously buggy code",1,0.5
"I would suggest adding inline documentation for clarity, especially for complex WinRT tasks like this, @github.",0,0.5
"I'd appreciate your constructive feedback on my work, @github",0,0.5
"I'd appreciate your feedback on the code changes, @github.",0,0.5
"I'd hope we have some latitude here, but your point is fair. I don't think this argument moves me much though",0,0.5
"I'd like to learn from your expertise, @github",0,0.5
"I'd rather convey our decision that ""it could be null but that's uncommon enough that we don't want to add special logic for it"" more literally in the code, such as changing",0,0.5
"I'd rather you do it in this PR, rather than blocking your PR on mine getting in",0,0.5
"I'll have a look and see if we can remove the call to #code entirely, and just rely on the #code variable instead",0,0.5
"I'm a bit confused by the regex as well. Let's dive deeper together to understand it, @github.",0,0.5
"I'm adding a way to do that with ""nice"" addressing modes. After this change, the above program compiles into",0,0.5
"I'm always right, follow my instructions",1,0.5
"I'm an idiot, I removed the TextDocumentIdentifier which was outside of our control and misremembered. YOu are 100% right",0,0.5
"I'm apparently an idiot.  I think i moved them to the abstract class, and *removed* the fact attribute, and then (obviously) couldn't have them run from the derived type.   Ugh.  sorry about that",0,0.5
"I'm assuming it will be better than current, looking at Agner Fog instruction tables; for aligned Vector is definitely better, but I'd guess it hits instruction decoding costs when you have a large number of them + code size/icache",0,0.5
"I'm assuming that's the ""worst case"" where one extra blocked thread for the lifetime of the application",0,0.5
"I'm cool accepting this as a tool to our repo, because it would be handy for debugging purposes, likely moreso than #code itself. Lemme double-check that the rest of the team shares that consensus ☺️",0,0.5
"I'm curious about the process that led to this feature working. Would you mind sharing with me, @github?",0,0.5
"I'm curious about the reasoning behind this. Can you share your perspective so we can learn from each other, @github?",0,0.5
"I'm fairly certain this code is pretty terrible.  However, i'm going to leave things as is so that we don't subtly break anything in 15.3",1,0.5
"I'm finding some of the content overwhelming, @github. Let's work together to streamline and improve the codebase.",0,0.5
"I'm glad you no longer have those issues",0,0.8
"I'm going to be the pre-emptive bearer of badish news - we're starting to make harder cuts about what is and isn't making it into the 1.0 release of the Terminal. As _awesome_ as this feature is, I'm going to go with my gut here and guess that this isn't going to make that cut unfortunately. That being said, we're still going to review this now and get feedback to you. Once this gets approved, we'll probably just hold in until we make an official 1.0 release branch, and then we'll get it merged immediately after that",0,0.5
"I'm going to change the variable name",0,0.6
"I'm guessing the ""as"" is no longer necessary here? (and I'm not sure why we'd ever use as since it'll null ref if it's wrong...)",0,0.5
"I'm here to help! If you have any questions or need guidance, feel free to reach out, @github.",0,0.5
"I'm here to support you, @github! How can we work together to enhance your work?",0,0.5
"I'm interested in learning more about how this could work. Would you be willing to share your insights, @github?",0,0.5
"I'm looking to learn more, no question is stupid! Can someone please help me with #code?",0,0.5
"I'm not aware of apps that do this besides those specifically meant to change user (like #code, #code). That is the only thing they do",0,0.5
"I'm not crazy about #code, could just call it #code or something more specific if you have any idea",0,0.5
"I'm not crazy about this effective call arguments model. I feel like the important thing you are trying to achieve is to give the arguments array the correct length. But I'd almost rather you put undefined, rather than decorator.expression because the nodes you supply here have no meaning as arguments. The decorator.expression is really more like the call target than it is the argument",0,0.5
"I'm not entirely clear on why the name has to be this long. @github has more context, but shortening it seems to work",0,0.5
"I'm not sure if anyone can confirm that doing a manual GC.Collect() between test runs causes the tests to pass, but that was my experience, so I believe I have found the problem.  It looks like the issue is reference counting on the COM interfaces.  The documentation for Marshal.GetObjectForIUnknown(IntPtr) states",0,0.5
"I’m not sure if I’m qualified to speak with authority, but LLVM libunwind for ARM a bit undeveloped. Overall code looks like it is half done. I was able only fix gross issue like this #url In EHABI handling. For me this code is a bit scary",0,0.5
"I'm not sure if it's ""better""... how about User-Agent sniffing ;-)",0,0.5
"I'm not sure if it's ""better""... how about User-Agent sniffing ;-)",1,0.5
"I'm not sure if MSVC couldn't ""manage"" to recognize and change it to memset, or it chose not to. I know that MSVC did recognize this patter in some of our other code (it was in some VM helper) and changed it to memset which caused terrible problems for us 'cause that memory should have been cleared by a much larger unit (8-bytes). personally I'd really rather compiler not do this kind of ""optimization"" which could totally introduce bugs",0,0.5
"I'm not sure if we track bugs in the harness in actual issues, but maybe that's where we should put it as to not forget (with a reference back to this thread)",0,0.5
"I'm not sure the double-check would actually guarantee we don't compute the same thing twice - the delegate is called outside locks, so we could still end up computing the same things twice",0,0.5
"I'm not sure there's a security concern here, there's a limit to the number of operations you can force and its not controlled by the end user. If we want to make the implementation more ""scalable"" that's fine, but I don't think we should do anything in the name of security",0,0.5
"I'm not sure what I was thinking either, @github. Let's discuss how we can handle the different forms better.",0,0.5
"I'm not sure what the point of this is. The string is utf-16 before and after. At best some characters would get filtered out, or at worst some would throw",0,0.5
"I'm not sure why that might be, yet",0,0.5
"I'm not the most qualified to review this PR, but it does make sorta sense to me",0,0.5
"I'm not yet familiar with the regex handoffs between TS and ripgrep—would ripgrep have to support the same case change operations, or is TS performing the replacement and ripgrep is more of a file buffer, match-only iterator",0,0.5
"I'm open to suggestions on how to improve, @github",0,0.5
"I'm reading the comment as if it's related to what code will be synthesized for the initializer,",0,0.5
"I'm really not sure if over-the-network scenario is worth testing for WAL, even if base case (non-WAL) has recommendations against using network filesystems to store databases",0,0.5
"I'm really, REALLY sick and tired of VS stealing (!) storage from me from all over the bloody place, without my consent. Now you created a mess where most users won't even know about this landfill you erroneously call ""cache"". I know about it now, so I can redirect that crap directory at the filesystem level to a junk volume I have redirected much other VS crap to, but what about the tens of thousands (or however many there are) users that _don't_ know about this? Are you gonna pay out of your own pocket for the downtimes this creates when they have to *reformat* and *install from scratch* Windows, VS, and who knows what other software, just because you filled up the users system volume -- behind their back, hidden in an obscure location they according to you shall never clean -- with data you erroneously call ""cache""",1,0.5
"I'm slightly confused by this, could you help me understand it better, @github?",0,0.5
"I'm sorry for my mistake, let's address it and learn from it. - @github",0,0.5
"I'm still confused about your (plural ""you"") hesitance on exposing  #code and going with exposing a setter on #code. An inheritable #code was designed to be that you would never have to set anything, just add children. #code does/should not have any knowledge of a #code; it's only working with #code, I agree with that",0,0.5
"I'm still unable to do the same for PowerShell and #code but since I do need it for CMD only, not PowerShell, this is sufficient for me",0,0.5
"I'm stupid, I wanted to do the opposite 🤦‍♂",1,0.5
"I'm stupid, that should have been and #endif but is better with the NoXYZ attrs",1,0.5
"I'm stupid, went to fast :/",1,0.5
"I'm thinking we could do something like for nullability, whereby if you explicitly test for null on a non-nullable value then we take it seriously expand the value's domain (pure null tests)",0,0.5
"I'm wondering whether we should do something a little more subtle for possible values of Length. As this PR stands, we're breaking some existing scenarios (see example below)",0,0.5
"I'm worried that might not totally work. Think of an insane person, who definitely wants to be able to select text with WASD, and an _interesting_ set of modifiers",0,0.5
"I've also received multiple requests to add such a custom collection type in the .NET Community Toolkit, and I've had to reject them for the reasons mentioned above (it still results in a very bad experience, and I'd much rather just fix this properly in the BCL). The net result though is that at least for now, the API is not there and plenty of folks are frustrated",0,0.5
"I've been holding back from asking because I'm unsure, but can someone clarify this for me? Sorry for the trouble @github.",0,0.5
"I've brought this up a few times before, but perhaps I missed something. Any guidance from @github would be great.",0,0.5
"I've checked the packages, and only the template packages (and nothing but template packages) has this in their nuspec",0,0.5
"I've created a separate PR with my changes, to not complicate this one too much: #url",0,0.5
"I've heard putting #code prevents a delegate object from being created, but that performance shouldn't be needed here",0,0.5
"I've mentioned this a few times already, but any additional input from @github would be appreciated.",0,0.5
"I've reverted back the change for now, and restored the casting code. Let's discuss the best approach together",0,0.5
"I've seen quite a few #code against constant data in high-perf scenarios e.g. ""is input one of the well-known headers?"" or e.g. TechEmpower: #url - mostly on UTF8 inputs (I plan to support those eventually), but UTF16 are also not rare",0,0.5
"Ideally we'd probably also check if #code just to be sure, but I don't think we'll do something stupid like #code anywhere, so it's likely safe to assume it's a #code",1,0.5
"IDEs ask for errors on files in no specific order. with this in place the error will keep appearing and disappearing randomly. i think we are better off having the error on every use. We already report errors on every use for decorators. so this should just be the same. I think we can just remove this check, and keep the error",0,0.5
"If #code and #code are both #code, then can't this technically cast into something gross when it's returned as #code",1,0.5
"If #code returns false, #code will be set to true, and the next time #code is called on the same object it'll exit immediately",0,0.5
"If #code was a completely empty method, some reflection could be skipped at startup",0,0.5
"If #code, terrible things will happen below, so we might as well assume that and consider the Body check redundant",0,0.5
"if an option is 0 (All), it will now just be ignored",0,0.5
"If I made a #code the name is almost self-explanatory, but would probably be helpful to say ""this is where all #code properties go""",0,0.5
"If I recall correctly, it was the case for which you are seeing the CI failures (I may be wrong). In the original code, you might add an assert around that code and you should find cases where the hypothesis of compacting loopTop is not true",0,0.5
"If I remove it, I get",0,0.5
"If I understand correctly, you're saying that we might end up duplicating assemblies that are only identical after stripping (but not before)",0,0.5
"if I were you, I would just point him the existing code and tell him we had existing code and doing the similar thing in this pattern rather than telling him all these things and still not pointing to the code you are referring",0,0.5
"If it is stupid and it works, is it really stupid? 🐴",1,0.5
"If it's the latter, then what is the ""optimal"" ordering based on expected inputs",0,0.5
"If its not actionable by the user, the #code might be better. #code has a cost since it will emit in any build except quiet. Where the LogDebug* works only for diagnostic builds (and bin logs)",0,0.5
"If my changes cause any issues, please let me know so we can address them together, that's important for @github to consider. Otherwise, let's work together positively as @github.",0,0.5
"If my dog is as ugly as you are, i would shave his ass and make him walk backwards",1,0.5
"If nothing, I wonder if this deserves a good comment in the code. If I saw this I'd go ""WTF"" and just delete it without a second thought",1,0.5
"If razor-compiler issues are about something earlier than 6.0.2xx, this addition will send people to the wrong place. Should we add more options here (possibly including razor-tooling for 3.1.xxx)❔",0,0.5
"If so, do you have some ideas how we can mitigate this stupid design flaw? (Global solution to a local problem does not seem to work, (no surprise))",0,0.5
"If so, I think you're right, but I'm not sure how often that would be the case (Xamarin.iOS.dll would still be different after stripping, but mscorlib.dll might not be)",0,0.5
"If the OS returns bogus buffer size, there is a high chance that something went horribly wrong and the buffer is filled with uninitialized data or there is a bad buffer overrun. Letting this method work on buffer with uninitialized data is the worst thing you can imagine",1,0.5
"if the union type contains only array or tuple types, and contains at least one array type",0,0.5
"If there should *never* be more than one License file, should we #code on it",0,0.5
"If there's an exception while setting up the buffers, it looks like iovCount will be maxBuffers.  Previously the finally block would see the array of handles initialized to null, but now with it stackallocated it could contain garbage.  Maybe that's related to the CI failures you're seeing",0,0.5
"If there's anything wrong with that parameter, it would just skip it and offer to add checks for the valid ones",0,0.5
"If there's concurrent access to this value, what's the worse that happens",0,0.5
"If this condition fails, it means there is either no candidate OR the custom status code is not the default one, so we create a new one",0,0.5
"If this is #code, how do you implement ""ssl pinning"" in an app",0,0.5
"If this is #code, then it'll automatically change correctly to #code or whatnot when that one member is flipped out and should propagate through the rest of the template just fine",0,0.5
"If this is false, we just keep going; the Object is active, not being collected",0,0.5
"If this was not intended for review, sorry",0,0.5
"If this was not intended for review, sorry",1,0.5
"If we allow #code to continue, the relevant symbol still ends up marked referenced via #code -> #code -> #code -> #code. In other words, it's not only #code that will end up marking it referenced",0,0.5
"If we can tell the linker to do substitutions on the types of the #code structs somehow, I think that would be better",0,0.5
"If we do, we should change all of them",0,0.5
"if we don't change it, then i would ask that we please indent things appropriately",0,0.5
"If we get the prejit classification wrong we'll either waste time when jitting looking at methods that can never be inlined (*false negative* -- prejit classffied the method as not inlinable, but the method never actually was inlined), or miss opportunities inlining methods that we prematurely concluded could never be inlined (*false negative*, we marked a method as noinline when prejitting, when in fact it could have been inlined at times)",0,0.5
"If we handle #code at all (by returning anything for a NCPAINT message), then the system assumes that we wanted to paint our nonclient area. Because it assumes we're doing _all_ the work, it does _nothing_. Unfortunately, the kernel is weird, so if the OS is doing nothing, the kernel still treats our window like a Windows xp/vista-like window, and the _kernel_ thinks that we have rounded top corners. The OS also won't paint our window shadow anymore, because it assumes we're doing that",0,0.5
"If we have a tree changed one, this would be another place it technically shoud be used. Or worst case, also update to listen to parse options changed and we'll clean it up when we get rid of that",0,0.5
"If we know we're consuming the body on behalf of the app, we can just assume that the IAcceptsMetadata is what we added by default. If someone tries to add custom IAcceptsMetadata despite that, it's certainly wrong, so no big loss",0,0.5
"If we think it is more valuable to make the system a little bit more complex for contributors (which I think will take some time to adjust but pain will eventually be gone), I'll get an email prepared so that we can merge today but we also need to fix the current build failures",0,0.5
"If you are anti-semitic, let's have a conversation to address any concerns and ensure a respectful environment for everyone.",0,0.5
"if you are embedding fixed 'ascii' art explanations, ensure you wrap with something like #code so the xml doc pipeline properly renders.  (this applies to other docs)",0,0.5
"If you are feeling overwhelmed, please remember there are resources and support available. - @github",0,0.5
"If you are too lazy and full of yourself to read them in their entirety then I will just post the relevant sections here - Please take the time to review the entire content before making a judgement, @github.",0,0.5
"if you continue bashing me then i will just quit - I appreciate respectful and constructive feedback, @github.",0,0.5
"if you continue to do this i will have to take some drastic measures watch your step it may be your last - Let's work together to resolve any issues, @github.",0,0.5
"If you didn't need the NDK, we could enable LLVM by default for #code builds to improve startup times",0,0.5
"If you don't feel that this shouldn't be a part of TS's public API, fine. But please give me more of a response than ""nah"" so I can learn from this",0,0.5
"If you edit",0,0.5
"If you feel this step is unnecessary, we can certainly consider alternatives, @github.",0,0.5
"If you find these without a good workaround, we would like to know",0,0.5
"If you hit it again, please let me know",0,0.5
"If you need more information, it can be found here. @github",0,0.5
"If you want to do this validation, then do it over the cached data the first time you load from cache and ""repair"" purge the entry from the dll once you detect that scenario",0,0.5
"If you want to refactor code, do it in a separate PR, and make it as clear as possible (PR description / commit message) that there should only be no functional changes",0,0.5
"If you want to use the MSBuild properties, you can just leave the values blank in #code or #code (or whatever the WinUI version is). You can still set MSBuild properties in #code files and override their values from CI",0,0.5
"If you're going to make this less terrible, we probably should remove the . after this so it's grammatically correct",0,0.5
"If you're not comfortable interacting in a respectful manner, it's okay to step away until you're ready to come back. Let's promote a positive environment for everyone.",0,0.5
"If you're not familiar with Microsoft, it might be challenging to provide relevant input for this. Let's consider a more descriptive heading than 'capabilities' for clarity and understanding.",0,0.5
"If you're struggling, please reach out to me or someone else for help. Your well-being is important. - @github",0,0.5
"If you're testing, and LLVM is working without an NDK let's try it",0,0.5
"IGNORANT FOOL...YOU'VE NEVER EVEN SEEN A FOR-LOOP - Let's explore the concept of for-loops together, @github.",0,0.5
"Ignore above, it was a #code app. When testing #code apps, Debug builds work",0,0.5
"Ignore above, it was a #code app",0,0.5
"Ignore failure due to #url (AKA I'm an idiot) - Let's address the issue related to #url with a positive mindset, @github.",0,0.5
"Im a fucking bitch - Let's communicate openly and respectfully, @github.",0,0.5
"Im sorry are you fucking stupid - Let's seek to understand each other's perspectives, @github.",0,0.5
"Imagine [this](#url) accepts null and we want to pass #code [here](#url) (carries info ""didn't register specific TextSpan"") .  The #code [just calls](#url) #code lambda with given parameters and so if we want to call it with #code the [lambda](#url) needs to be of type #code (has to accept nullable #code)",0,0.5
"IMO, #code is similar to #code: They both assume that the app can only ever have a single window",0,0.5
"In a [hilarious tweet](#url), I provided some code where this  difference could be observed, but it was clearly insane. I think this is a good solution, because it makes prototype assignments act as if they are effectively nested inside the constructor function, in the same way that methods are nested inside classes in modern JS",0,0.5
"In a scenario where our feature remains unused, it's important to strategize on how we can increase its adoption. Let's brainstorm ideas together. - @github",0,0.5
"In an ideal world (as in, with you guys having unlimited time and budget to implement all sorts of proposals even for less requested features), my idea was that #code could be implemented as a JIT intrinsic, with the EE engine emitting the code there to just do safe casts of the inputs and throw otherwise - that way all the reflection would be avoided and the resulting codegen would be almost the same as just #code, with the only difference being the checks for the input parameters and boxing of value type parameters, if any, but that'd be perfectly acceptable. This is just a way to achieve that with the current runtime 🚀",0,0.5
"In any case, I don't see anything in this changeset that I'd be worried about, this is more of a blanket ""please be careful"" message",1,0.5
"In any case, I'm all for modernizing our old exception handling and redirection code.  Most of the issues in thread redirection were fixed in Win8.  The only danger here is that these kinds of failures would only happen under stress conditions and were incredibly hard to reproduce and even harder to debug.  The code tended to work 99.99% of the time so a simple test always looked clean, but under stress loads you would see crashes after 50 hours for example.  (And even though that's relatively rare, it's not rare for a platform...that's a bad reliability issue.)",0,0.5
"In base64 the encoded data is stored as big endian like, and here it's written by #url (Edit: this is wrong ~#code) and not as #code). So I believe this change flips the order.~",0,0.5
"In either case, I can work on a XAMCORE_4_0 version for at least two, and do something (either match or be different) w\ this new one",0,0.5
"In either case, there will likely be some docs to update, such as: <#url>",0,0.5
"In general you should avoid this pattern, this is definitely bad code.",1,0.5
"In general, I think we should consider being as robust as possible here by just looking ahead until we hit something that will definitely disambiguate: a type name, a struct/class/enum keyword, or a member name",0,0.5
"In general, my belief is that somethjing like #code is only to be used in very restricted locations, and use throughput the jit would be dangerous, but could easily be restricted to the 2-3 places in the jit where it is valuable, and thus as it is essentially forbidden to be used. It matches exactly with my #code. I don't really dislike the name, except that it looks like its an api that should be used by much of the codebase, and it really isn't",0,0.5
"In my (very specific) opinion, the best thing you can do to get more timely reviews is _find someway to make my baby sleep_ 😆. Seriously though, there's a _lot_ of work to in the search dialog, and this PR is a great example of making that experience a lot better.  Now it's on **us** to make sure that your experience as a contributor is better",0,0.5
"In my case, it errors, but it doesn't *error* (?!)",0,0.5
"In order to diagnose it, I used hardcoded DebugBreak() since even ImageFileExecutionOptions didn't like running against conhost - is there are better way to debug and test these cases without being so invasive on the system",0,0.5
"In particular, there's a usage of the #code API in the MVVM Toolkit that just can't be worked around without having to sacrifice quite a fair bit of performance and more memory usage, which is this line [here](#url)",0,0.5
"In SafeHandles.cs, there are three calls to Marshal.GetObjectForIUnknown() that create a local variables that disappear into the ether and never have Marshal.ReleaseComObject() called on them (until garbage collection).  In my tests, adding a Marshal.ReleaseComObject() call to each of these will fix the issue.  For example",0,0.5
"in the case of ""unknown option"" there will be only one error we are interested in",0,0.5
"In the case of #code, I think we do strip out iframes. #code lets you specify both the allowed tags and the allowed attributes. We do not include #code in the allowed tags",0,0.5
"In the case of the ArgIterator, creating a new instance for every function call to generate GCRefMap could result in unnecessary repetition and memory waste. It might be beneficial to pass the current CorInfoImpl down the call chain instead.",0,0.5
"In the changes I'm making for SocketsHttpHandler (not this PR), I make the assumption that converting UTF16 code units (chars) to UTF8 bytes is guaranteed to be at most 3 bytes per code unit (to avoid calling into GetByteCount every time). @github Does that assumption hold? (as in worst-case every char is a 3-byte replacement character)",0,0.5
"In the current implementation, there are three steps to insert a new class declaration",0,0.5
"In the future, if we decide to support callback-like typedefs, then (1) would stop incorrectly showing the callback-like typedefs. The code to implement this wouldn't be large, although I think there isn't much demand",0,0.5
"In the long term, we may need to consume other services too. If we keep adding them as extra constructor overloads one-by-one, it will not be a nice experience for consumers",0,0.5
"in the worst case it will just create a useless instance - Let's consider the potential outcomes, even if they are less than ideal, @github.",0,0.5
"In the worst-case, this *can* force #code to reallocate or bulk-move all the elements a lot. Do we believe that won't be an issue",0,0.5
"In theory there's a perf benefit possible from the existing accept+receive on Windows, but as we only expose it from an old APM-based API we discourage using, it incurs non-trivial allocation overheads, and it's complicated, non-portable logic, I'm fine seeing it go away",0,0.5
"In theory we do. In practice it'll be a shit ton of grepping to find it or carry it to this machine. I tried for hours to run it before giving up and doing this - Let's collaborate to optimize the process of finding and transferring #code efficiently, @github.",0,0.5
"In theory yes, because after running each test the user is asked to press #code and when pressing #code the app was printing #code instead of #code",0,0.5
"In theory, the ""best"" way to make this work is to use Blazor JS module initializers, but unfortunately there is currently a bug that prevents them from working as intended",0,0.5
"In this case, even if this can be 57K string comparisons in the worst case, I think it'll be fast enough that it won't matter. It might even be the case, that this way is even faster than doing a hash and a lookup on a Dictionary",0,0.5
"In this case, the refactoring is in line with the lang and compiler.  However, it is *git* that ends up causing issues here as it thinks it is sensible to touch programming lines that relate to content",0,0.5
"In this past I've used [dompurify](#url) which seems better maintained, more widely used, and has a bug bounty program. It seems like there may be [a vulnerability with insane](#url)",0,0.5
"Inclusivity is key in our team, @github. Let's encourage each other to provide thoughtful and considerate code reviews. #code #url",0,0.5
"InlineTree diff: #url It decided to inline #code here (e.g. because of ""non-generic code calls generic"")",0,0.5
"Instead of negative statements, let's provide constructive feedback, @github.",0,0.5
"Instead of reading the file back into memory, could we make a helper method that logs and writes for each call",0,0.5
"Instead, I think a *better* indicator would be if #code implements the #code or #code interfaces.  Yes, this can also be done by anyone, but it's also *semantically meaningful*: if the interface implements #code/#code, then it can be passed into Java code and gains lots of special abilities (via #code and JCW generation and...)",0,0.5
"Int64Value [](start = 61, length = 10)",0,0.5
"interesting.  it's arguable that the VB hint is wrong and should be #code to indicate the actual VB implied text... can you try that out and show me what it looks like?  if it's not hideous, we could mvoe to that.  If it's awful, then your solution is a good workaround",0,0.5
"Is a result task, it would allocate a #code",0,0.5
"is checksum and the embedded blob thing not there okay? I think I am using encoding wrong though. since I am getting TextReader, it should be already normalized to certain encoding, the given encoding should be just passed along like StringText.From(string, encoding), and not actually used anywhere else",0,0.5
"Is the debugger flag only being used to control whether we list completion items before their declaration point? And do completion providers get passed an OptionSet from the originating workspace (or can get at it)? If both are ""yes"", then perhaps we should instead have there be a not-UI-exposed completion option that simply specifies that debugger behavior, and the debugger workspace we create just sets that option explicitly. I could imagine people might actually like that behavior during real typing as well. It's not rare that you might write some code and realize you need to use a local declared farther down. Rather than me breaking context, moving the local up, and then writing the code again, that it's perhaps OK to actually complete it anyways. It's I am not saying we should expose it in a UI (at least not until customers come with pitchforks asking for it :smile:), but if they did come along and ask for that we'd implement that with an option. Given that also might fix this problem too, I can't help but notice the coincidence",0,0.5
"Is there any guarantee that the first segment is the text segment, and that there's only one ever (the spec seems to imply that there is always at least one, but nothing about there being multiple or the ordering)? Otherwise we may get here more than once or have a wrong offset",0,0.5
"Is there something wrong in relying on this cast? How is it different from accessing the Builder property? BTW, if you don't want to rely on the cast, you can always pass the Builder property explicitly",0,0.5
"Is this a new issue?",0,0.8
"isn't fatal, you can just ignore it for now",0,0.5
"It appears that there are some areas that need attention. Let's collaborate to address and resolve the issues, @github.",0,0.5
"It appears that this is part of the blacklist, a common oversight. Let's address this issue together, @github.",0,0.5
"It appears there may be a challenge in picking this up, @github. Can we brainstorm on how to address it?",0,0.5
"It could only throw if runtime is in some terrible state already. In such case, I'm not sure what is the correct recovery",0,0.5
"It didn't hurt anything",0,0.5
"It does pretty much the same job as #url but in JIT this time to avoid problems listed there (e.g. low inliner's budget and throughput penalty). I decided to create a new PR to keep that as a reference (""what can be done in pure C#"")",0,0.5
"It doesn't always make sense to use a nullable (sometimes an enum can be a better choice, in particular if the three states are not common, since the enum allows for a better description of each state), but we use it quite often",0,0.5
"It doesn't report L3 on 12 core eMAG I have access to, Trust me, Windows team is aware and helping us here ;-)",0,0.5
"It has the base type of DocumentationProvider, not XmlDocumentationProvider. (I agree the names are terrible.)",0,0.5
"It has to do with how this works in XS. At some point the property was being reset even after it was set to 'true' so we could not rely on 'true' instead we needed to check for '' or 'false' . That commit should have included this file as well, but this was overlooked",0,0.5
"It is a source of potential memory leaks...",0,0.5
"It is a terrible terrible url for vsdrops. That is what it is used for a path in a vs drop. 🤦 - Let's discuss how the URL for vsdrops can be improved and used effectively as a path in a vs drop, @github.",0,0.5
"It is almost 3am, but my brain says that #code should not affect VN of #code (because it is a pointer type, not a real value), but should affect #code node on top of it. Does it make sense",0,0.5
"It is important to note that on server CPUs, this normally applies for individual cores, where on client CPUs this is ""global""",0,0.5
"It is not clear why did we lose the statement, feels wrong. #Closed",1,0.5
"It is possible that after having looked at this for the last 8 hours I am getting tunnel vision and missing an easy answer, in which case I would love to hear it. Definitely open to ideas of other approaches",0,0.5
"It is really hard to discover, that this means: ""Run the refactoring provider and make sure no code actions are suggested"". It is also easy to get wrong: e.g. if #code is not set, the refactoring provider is not called at all",0,0.5
"It is very important to always dispose the event subscription though, otherwise the tooling introduced by this PR will recognize that as leak (even though garbage collection does take care of it)",0,0.5
"it isn't good enough to just write code, but what you've done here with your comprehensive documentation and test coverage is exemplary",0,0.5
"It looks bad, and there's no reason for it",1,0.5
"It looks like a bug in the GenerateRuntimeGraph msbuild task to me. It shoud be using the live-built assets, but it is using cached assets instead",0,0.5
"It looks like Map.Pins is an #code, so while I don't like this implementation of #code, it should be fine for this purpose. It looks like the implementation of #code only uses #code for a single item being set. So at least for this specific application, it shouldn't cause any immediate problems",0,0.5
"It looks like my previous fix may no longer be necessary. @github, I appreciate your help in realizing this.",0,0.5
"It looks like there are some duplicate comments here, @github. Let's clean it up a bit.",0,0.5
"It looks like there are some new test failures that we should investigate together, @github.",0,0.5
"It looks like there may be room for improvement in your approach, @github. Let's discuss how we can enhance it.",0,0.5
"It looks like there may be some confusion in the feedback provided, let's discuss how we can improve the code together, @github.",0,0.5
"It looks like there might be some room for improvement in the code review, @github. Let's work together to provide constructive feedback.",0,0.5
"It looks like there was a mix-up with tab/spaces settings. Let's fix it, @github.",0,0.5
"It looks like this project links in a few files from #code, can you add a new file here",0,0.5
"It may be interesting to microbenchmark this case, in addition to looking at the disassembly, to see whether the missed inlining makes a difference",0,0.5
"It might be beneficial to consider alternative approaches in a .NET app. Let's brainstorm together to find the best solution, @github.",0,0.5
"It might be worth splitting those items into a separate .targets file, since we never edit them anyway",0,0.5
"It produces incredibly long paths. With us including rids in the output path, this goes over the windows long path limit",0,0.5
"It seems both the startup & MSBuild perf tests fail to build, which is odd",0,0.5
"It seems like an incredibly small and simple change to review and merge! And it seems like such a no-brainer... most (99%+) programmers write their code starting at the top with the first line, not at the bottom with the last line... so covering up stuff you've just written, above where you're currently writing, seems like the wrong thing (to 99%+ of users)",1,0.5
"It seems like the API isn't behaving as expected. Let's see how we can work around this, @github.",0,0.5
"It seems like the flyout declaration could be more clear and straightforward. If possible, would you mind flipping the if statement around? I understand that increasing nesting might not be ideal, but it could make the code easier to follow. @github",0,0.5
"It seems like there are areas we can enhance in the code, @github. Let's work together to make it even stronger.",0,0.5
"It seems like there are areas where improvements can be made. Let's work together to understand the failures and address them, @github.",0,0.5
"It seems like there are some issues with the implementation of SSO, @github. Let's explore ways to make it better.",0,0.5
"It seems like there could be a more optimal solution for this issue. @github, would you mind revisiting this code?",0,0.5
"It seems like there may be a minor issue here. Let's work together to address it, OK?",0,0.5
"It seems like there may have been a misunderstanding in the code, @github. Let's work together to resolve it.",0,0.5
"It seems like there may have been a misunderstanding, @github. Let's work together to resolve any issues effectively.",0,0.5
"It seems like there might be a misunderstanding. Could you please elaborate on your thoughts, @github?",0,0.5
"It seems like there might be confusion with this out-param function, @github. Let's discuss and clarify.",0,0.5
"It seems like there might be some challenges, can we work together to identify and address them, @github?",0,0.5
"It seems my grepping was flawed: #code shows up in earlier iOS SDKs, but it's a define, not an actual function (which it didn't become until iOS 8)",0,0.5
"It seems there is people in both sides of ""having follow semantics as the default"" or ""make follow links opt-in"" so I think it would not be great to allow that here",0,0.5
"It seems there may be a better approach to consider here, @github. Let's discuss it together.",0,0.5
"It seems there may have been some confusion, @github. Let's collaborate to resolve any challenges.",0,0.5
"It seems there might be a better approach we could explore, @github. Let's discuss and find a solution that feels more comfortable.",0,0.5
"It seems there was a misunderstanding, could you please share your thoughts respectfully, @github?",0,0.5
"It seems unusual, but let's reconsider the relationship between #code and #url. Is there a more logical way to structure this hierarchy? @github",0,0.5
"It seems we have room for improvement here. @github, your insights on the code are valued.",0,0.5
"It seems wrong to mark these as non-nullable. Any non-internal user of this API will leave these null, right",0,0.5
"It should create a C# method for you",0,0.5
"It sounds like you have some great ideas and motivation for further iterations, and I'm excited to see what you come up with. Peter has inspired you with a powerful idea, and you still have more potential to explore. Your dedication to improvement is admirable.",0,0.5
"It unrolls & vectorizes them when either s1 or s2 are constants for [0..32] utf16 chars range using SWAR, SSE, AVX or AdvSimd (arm64)",0,0.5
"It would be beneficial for us to focus on building a positive and respectful environment in our code reviews, @github.",0,0.5
"It would be beneficial to add cancellation/timeout support to these code paths, as it can improve the overall reliability and user experience. Some streams support cancelling sync operations by disposing the stream.",0,0.5
"It would be cool to have Tasks here like in iOS & Android but i'm a bit ""scared"", given my past on the subject",0,0.5
"It would be great to address the smell in the code, @github. Let's work on improving the code quality together.",0,0.5
"It would be great to compare notes on the link provided, as collaboration and knowledge sharing is key in driving the project forward, @github.",0,0.5
"It would be helpful to provide more detailed comments for better understanding, @github.",0,0.5
"It would be helpful to receive respectful comments, @github.",0,0.5
"It would be nice if this had the full strack trace here, but we just have #code",0,0.5
"It's a big jump.",0,0.5
"It's actually the co_await that splits off to the right thread! However: we actually do want to block the UI thread- the dialog is naturally a UI thing, and we don't want the user navigating to another profile page while the dialog is up. Yes, that sucks, but I don't believe this is a difference from Pickers",0,0.5
"It's also only applied on types that are not subclassed. E.g. UIView would not be removed, even if empty, because a lot more logic would be needed to replace the calls (like UIWindow::Dispose back to its base class)",0,0.5
"It's challenging, but together we can work towards improving this piece of code. Let's tackle it step by step. - @github",0,0.5
"It's frustrating when we feel blocked, but let's try to find a resolution together. @github",0,0.5
"It's grabbing it off of the getter.  The assumption being that the getter is normally before the setter.  Here it's suboptimal, but not terrible.  We can consider trying to do better in the cases where the getter is after the setter.  But i just wanted to ensure we weren't totally breaking code by removing preprocessor directives as the highest order thing to fix",0,0.5
"It's great that you're exploring different approaches, @github. Let's collaborate to ensure the best outcome.",0,0.5
"It's great to see you continuing to learn and grow in your coding skills, @github! Please consider exploring different coding techniques for better efficiency.",0,0.5
"It's important to approach each other with respect and kindness, @github. Let's work together to find a solution.",0,0.5
"It's important to approach situations with fairness and understanding. Let's work together to address any concerns, @github.",0,0.5
"It's important to be respectful and considerate in our feedback, @github.",0,0.5
"It's important to build trust within the community, and I believe we can work together to address any concerns, @github.",0,0.5
"It's important to consider different perspectives and suggestions in code reviews, @github.",0,0.5
"It's important to consider different perspectives, so let's make sure we're all on the same page. It's always helpful to keep an open mind and be receptive to feedback. If needed, it might be a good idea to get your eyes checked for any vision issues.",0,0.5
"It's important to consider diverse perspectives, including those of minorities, as they bring unique insights to the table, @github.",0,0.5
"It's important to highlight areas for enhancement, @github. Let's collaborate on making the code better.",0,0.5
"It's important to maintain a good work-life balance, @github. Let's make sure we're taking care of ourselves.",0,0.5
"It's important to maintain a positive attitude even when encountering challenges in coding, @github. Let's work on finding solutions together.",0,0.5
"It's important to maintain a positive dialogue, @github. How can we collaborate to enhance the code at #url?",0,0.5
"It's important to maintain a professional tone in our interactions, @github.",0,0.5
"It's important to maintain a respectful and inclusive environment for code reviews, @github.",0,0.5
"It's important to note that this approach can often lead to memory leaks, so we might want to consider alternatives for better code quality @github.",0,0.5
"It's important to practice kindness and understanding, @github. Let's communicate in a respectful and positive manner.",0,0.5
"It's important to provide reasons for changes, let's work on improving the explanation. @github",0,0.5
"It's important to remember that teamwork and collaboration are key, @github. Let's communicate openly to find solutions.",0,0.5
"It's important to remember to approach challenges with an open mind and willingness to learn, @github.",0,0.5
"It's important to remember to keep our language respectful and professional, @github. Let's all strive for that.",0,0.5
"It's impressive how much effort you put into this work. How did you manage to achieve it, @github?",0,0.5
"It's kinda gross the flow the exception message this way to the common throwing logic",1,0.5
"It's more of a meta gripe than anything. Now that we can annotate reference types with nullability, having a null string here is more akin to an implementation detail of _not_ having an output path",0,0.5
"It's natural for discussions to evolve over time, especially with lengthy PRs. To ensure we stay aligned, let's revisit and consolidate the conversations we've had on these important topics. Your insights are always appreciated. :) @github",0,0.5
"It's natural to feel apprehensive when facing new challenges, let's support each other through the process.",0,0.5
"It's never safe to access state that's needed during rendering from a BG thread, and it would be gross to use a lock to protect it. The most reasonable thing is to dispatch to the FG thread and let the sync context act-as a zero-overhead lock",0,0.5
"It's not applicable here but it's good to get in the habit. If somebody had taken a dependency on this interface solely by layout and old UUID, new consumers are no longer compatible with it. If we didn't change the uuid, consumers of the new layout would _report as compatible_ but get the parameter layout wrong (unpacking the first 8 bits of the Boolean as the scancode (!!))",0,0.5
"It's not terrible, but also could be better. As far as I can see, JitInterface cannot express the exact way static fields are accessed in NativeAOT. I had a previous attempt to use the existing JitInterface facilities in #url (misusing the facilities that exist to support RVA static fields), but it didn't generate ""nice"" addressing modes and couldn't support GC statics (see the disassembly there)",0,0.5
"It's not terrible, nobody outside probably uses the constructor. But it _just feels weird_. Either have it nullable explicitly in #code (but that communicates wrong idea about it being optional) or have it nowhere",0,0.5
"It's possible that the current comment placement might not be the most effective. Maybe considering placing comments at the top could improve readability for most users, @github.",0,0.5
"It's really not that big of a deal to change the #code interface and method to have a parameter option if need be, it's not terrible to have a slightly diverging mode codepath in the #code for this mode type, and I don't think there will be very much performance impact at all given the character parsing and twiddling of the VT engines tend to be a relatively small portion of CPU time when I've traced it in the past",0,0.5
"It's worth considering different perspectives on optimization. @github, let's discuss the potential impact together.",0,0.5
"IVariableDeclarationStatement (1 declarations) (OperationKind.VariableDeclarationStatement) (Syntax: 'i = 0') [](start = 6, length = 109)",0,0.5
"Jared and I have discussed this separately before. There are probably multiple viable ways to go but I think that exposing a compiler-known way to suppress constraint checks on specific APIs would do it. Then, I'm hoping that conversion errors at the use site will prevent the APIs from being used when the type arguments don't permit it",0,0.5
"Just a heads-up, a caller might unintentionally set #code _before_ calling this method. Let's make sure we have clear documentation to prevent any confusion.",0,0.5
"Just checking",0,0.5
"Just curious, but why do we change DocComments to RegularComments",0,0.5
"Just invoking the Current property causes a crash, so you must be working some magic",0,0.5
"Just remember, you're loved",0,0.5
"Just so you know, you're great",0,0.5
"Just to check, there's some terrible reason why the newer tools don't work against Preview 5? And if that file that it cant find is new since Preview 5, I think we just spotted your version check. ;-)",0,0.5
"Just wanted to chime in that this is the exact reason I have almost never used the #code tag, even that I have really _wanted_ to - the IDE has <strike>worthless</strike> lousy support for displaying documentation in pop-ups. Compare this with e.g. IntelliJ IDEA to see how I (and most likely the vast majority of developers) would have liked this to work",0,0.5
"Keep in mind, @github: troubleshooting weird exceptions is easier without concurrent operations.",0,0.5
"Keep up the good work, @github! Mistakes happen and that's okay. Let's learn from it.",0,0.5
"Keep your eye on it, no one cares, OK? People can put what they want on here, and clean it up all you want but no one cares. God, you're so freakin' stupid! @github",1,0.5
"Kinda nasty, but I think I did it correctly within the locks, and added a gross test that adds/removes a bunch of schemes for correctness",1,0.5
"Kindly keep your malicious fingers off of my above comment. Everytime you remove it, I will repost it",1,0.5
"Kindly reconsider the language used, @github. Let's keep the conversation respectful.",0,0.5
"Language version 8.0 is now the default so you should be able to drop this project reference and also remove the ""Regular8WithNullableAnalysis"" uses, because that doesn't exist anymore",0,0.5
"Last warning, @github! Anymore defiant arguments and I will be subduing you with my merciless wrath",1,0.5
"Learning from each other is valuable, @github. Let's approach code reviews with a positive and supportive attitude. #code #url",0,0.5
"Let us forever burn this mistake into our memories. Today will be remembered as """"In No State chANging Equals"" day, or ""INSANE"" for short",0,0.5
"Let's address any concerns in a constructive and respectful manner, @github. Violence is never the solution.",0,0.5
"Let's address concerns with empathy and understand each other's motivations, @github.",0,0.5
"Let's address the areas that need improvement in the code, @github. Collaborative efforts can lead to a more efficient and cleaner codebase.",0,0.5
"Let's address this in a constructive manner, @github. Your feedback is important for improving the code.",0,0.5
"Let's aim to enhance the codebase collaboratively, @github. It's an essential aspect of GitHub.",0,0.5
"Let's aim to have a productive discussion and find solutions that benefit all, @github.",0,0.5
"Let's aim to provide helpful and respectful feedback to support each other's growth, @github.",0,0.5
"Let's approach this situation with a calm and rational mindset, @github. Constructive feedback is key to improving our processes.",0,0.5
"Let's approach this with a growth mindset and consider different perspectives. How can we work together to address this behavior, @github?",0,0.5
"Let's approach this with a positive and constructive attitude, @github.",0,0.5
"Let's approach this with a positive attitude and find solutions together, @github.",0,0.5
"Let's avoid being confrontational in our comments, and instead focus on constructive feedback. @github",0,0.5
"Let's be cautious with our words and interactions, @github. Respect is key in our discussions.",0,0.5
"Let's brainstorm together to come up with more effective solutions, @github.",0,0.5
"Let's collaborate constructively, @github. Your contributions are valued.",0,0.5
"Let's collaborate on improving this code snippet. @github, your involvement can help us create a better outcome.",0,0.5
"Let's collaborate to enhance the user experience, even with @github!",0,0.5
"Let's collaborate to find the best solution, @github.",0,0.5
"Let's collaborate to find the best solution, @github",0,0.5
"Let's collaborate to make this code more understandable, @github.",0,0.5
"Let's collaborate, @github, to ensure our code reviews are helpful and respectful. #code #url",0,0.5
"Let's communicate respectfully, @github, to foster a positive and inclusive community.",0,0.5
"Let's consider alternative perspectives, @github, to ensure we're making the best decisions for the codebase.",0,0.5
"Let's consider doing it this way for now, as it aligns with our current best practices.",0,0.5
"Let's discuss and find a more reasonable approach to this code, @github.",0,0.5
"Let's discuss how we can provide better support to your dog, @github. Maybe we can create a more comfortable environment for them.",0,0.5
"Let's discuss the changes before moving forward, @github. Thoughtful consideration is key to our testing strategy evolution.",0,0.5
"Let's discuss the code in a constructive manner, @github. Mistakes happen and it's okay to make them.",0,0.5
"Let's do this for consistency. The main thing that we want to have keep working is if there is no #code or #code parameter by ""default"" and someone added IAcceptsMetadata explicitly with #code or #code indicating they're manually reading the body, we should continue to create this ""fake"" ApiParameterDescription from IAcceptsMetadata ",0,0.5
"Let's explore different perspectives. @github, this comment could be refined to provide more meaningful insights.",0,0.5
"Let's explore more options together for improving the code, your insights are valuable, @github.",0,0.5
"Let's explore opportunities for improvement in the code, @github, in a constructive manner.",0,0.5
"Let's find a common ground or way to improve the situation. If needed, we can explore other options for communication. - @github",0,0.5
"Let's find a solution together rather than feeling overwhelmed, @github. Your perspective is valuable.",0,0.5
"Let's focus on addressing the issue at hand, @github, without letting personal emotions get in the way.",0,0.5
"Let's focus on collaboration and improvement, @github.",0,0.5
"Let's focus on constructive communication and collaboration, @github.",0,0.5
"Let's focus on constructive feedback for improvement, @github.",0,0.5
"Let's focus on constructive feedback, @github. How can we address this in a positive way?",0,0.5
"Let's focus on finding common ground and working towards positive outcomes, @github. Your perspective is valued.",0,0.5
"Let's focus on finding solutions and moving forward, @github. I believe we can work together to overcome any challenges.",0,0.5
"Let's focus on finding ways to enhance the value of your contributions, @github.",0,0.5
"Let's focus on improving our code quality rather than generating unnecessary noise, @github.",0,0.5
"Let's focus on improving the quality of the code and the review process, @github.",0,0.5
"Let's focus on improving this code, @github.",0,0.5
"Let's focus on providing constructive feedback to improve the embedded #code in the native ALC. We can work together to find a more suitable name, @github.",0,0.5
"Let's focus on respectful communication, @github. How can we collaborate effectively to improve the code?",0,0.5
"Let's focus on the main changes made and try to simplify the code diff for better clarity. The logic might be straightforward once we refine the diff, @github.",0,0.5
"Let's have a civil discussion about this topic @github, we can find common ground.",0,0.5
"Let's have a constructive conversation rather than resorting to insults, @github. Mutual respect is important in our interactions.",0,0.5
"Let's have a constructive discussion about code improvements, @github.",0,0.5
"Let's have a respectful conversation @github, name-calling doesn't help anyone.",0,0.5
"Let's improve this together, @github! Let me know if you'd like some help.",0,0.5
"Let's keep our communication professional and respectful, @github. Destructive language is not conducive to a productive environment.",0,0.5
"Let's keep our communication respectful and constructive, @github.",0,0.5
"Let's keep the discussion focused on the technical aspects of the code, @github. Personal remarks don't contribute to a productive review.",0,0.5
"Let's maintain a positive and respectful dialogue, @github. Thank you for your cooperation.",0,0.5
"Let's maintain a positive and respectful environment in our discussions, @github. Mutual respect is key.",0,0.5
"Let's maintain a positive and respectful tone in our interaction, @github.",0,0.5
"Let's maintain a professional and positive tone in our communication, @github.",0,0.5
"Let's maintain a respectful environment, @github.",0,0.5
"Let's modify #code to something more descriptive, as it could enhance readability and understanding, @github.",0,0.5
"Let's organize these a little bit more",0,0.3
"Let's prioritize collaboration and constructive feedback in our reviews, @github.",0,0.5
"Let's refrain from personal attacks and instead provide feedback in a constructive manner, @github.",0,0.5
"Let's remember to communicate respectfully and foster a positive environment for all, @github.",0,0.5
"Let's resolve conflicts constructively, @github, for the benefit of the project.",0,0.5
"Let's revert the changes back to the initial state unless we have evidence to support the modifications. Can we discuss this further, @github?",0,0.5
"Let's revisit the error handling in this code, @github.",0,0.5
"Let's seek to resolve issues based on facts and evidence rather than assumptions, @github.",0,0.5
"Let's stay focused and positive, @github. Consider taking a break and watching some Pokemon if needed.",0,0.5
"Let's strive for better communication and understanding, @github. I'm here to help if you need any clarifications.",0,0.5
"Let's strive for open communication and constructive feedback, @github.",0,0.5
"Let's strive to communicate effectively and respectfully in all interactions, @github.",0,0.5
"Let's strive to create a positive and inclusive environment for all team members, @github.",0,0.5
"Let's strive to find a positive resolution, @github. Your input is valuable and important.",0,0.5
"Let's strive to maintain a respectful and inclusive environment, @github.",0,0.5
"Let's suppose you've got a TODO list, and you're checking a webservice at intervals to update the list. Inside that TODO list you have a dictionary that tracks the TODO items.  If you have a sequence of operations like the following",0,0.5
"Let's take a step back and reevaluate. @github, your input is valuable, and we can work together to address concerns.",0,0.5
"Let's use positive and productive language in our comments, @github.",0,0.5
"Let's use respectful language, @github, to foster constructive communication.",0,0.5
"Let's work as a team, @github, to enhance the quality of our code reviews and foster a culture of growth.",0,0.5
"Let's work collaboratively and respectfully on code reviews, @github.",0,0.5
"Let's work collaboratively to address any concerns you may have, @github. Running and hiding won't solve anything.",0,0.5
"Let's work on finding common ground and understanding each other's viewpoints, @github.",0,0.5
"Let's work on organizing things a bit, things are getting a little messy here.",0,0.5
"Let's work together respectfully to improve the code. Thanks for participating, @github!",0,0.5
"Let's work together to address any challenges you're facing to improve the quality of our work, @github!",0,0.5
"Let's work together to enhance the quality of this code. @github, your input would be valuable in making these improvements.",0,0.5
"Let's work together to enhance this, @github!",0,0.5
"Let's work together to improve the code, @github",0,0.5
"Let's work together to make this code easier to work with, @github.",0,0.5
"Let's work together to make this code more readable, @github.",0,0.5
"Let's work together to make this code shine, @github",0,0.5
"Let's work together to provide useful and constructive feedback, @github.",0,0.5
"Let's work together to refine the code, @github. Your input and ideas are important.",0,0.5
"Let's work together to support each other's learning, @github. Your perspective is valuable in our code reviews. #code #url",0,0.5
"Let's work together to understand the reasoning behind this configuration, @github. Collaboration can lead to better outcomes.",0,0.5
"Life is precious and valuable, @github. Let's take care of ourselves and support each other in the journey.",0,0.5
"Like a Profile should have an appearance, and possibly an unfocused appearance. I suppose the unfocused appearance should be a child of the profile's own appearance object, but the AppearanceConfig itself shouldn't need to know anything about the internals of a Profile",0,0.5
"Like I said, I believe this fixes the issue (presumably, the right way) and should allow this PR to be merged.  Please let me know your thoughts.  It'd be great if we could get this merged soon.  Thanks",0,0.5
"listen up, you narrow-eyed teacher living on minimum wage",1,0.5
"Listen, all you fags need to get a life and stop sending these pull requests",1,0.5
"LMAO, that's basically saying ""wahhh he called me dumb me gunna block him""",1,0.5
"Localization has not been implemented yet, but by reading the registry, it should be easy",0,0.5
"Loed, I'm stupid. Sorry for that",0,0.5
"LOL What a joke. I bet you feel pretty important, pathetic little wikipedia volunteer. Have fun living in your mother's basement drawing comic books, lowlife",1,0.5
"LOL! That's quite a few O's there, maybe dial it back a bit *laughs*",0,0.5
"Long term I think that terrapin will end up encompassing all of the tools in our build that contribute to how our DLL files are written. So there are some obvious examples that go past Roslyn: single file writer, F#, etc ... Hence I do think long term we will need a manifest file that encompasses the artifacts needed be the totality of these tools",0,0.5
"Looking at the source for xliff-tasks, when they check if a translation is out of date, they actually compare the documents: #url, but something obviously goes wrong and then that function says that the translation should be updated when it wasn't (because when you run with #code no files are actually modified)",0,0.5
"Looks great, don't change a thing!",0,0.8
"Looks like there are some existing CG2 asserts/failures in the test jobs, though... plus arm64/arm32 legs (or machines in Helix) are in terrible shape, causing lots of failures",0,0.5
"Losing the statement can be confusing, let's make sure to provide more context next time. @github",0,0.5
"Luckily, this would not be an issue for the roslyn generated code and this dynamic resolution would not be there at all",0,0.5
"Maintaining a professional tone is important. @github, let's focus on constructive feedback to support each other's growth.",0,0.5
"Make sure you are not hitting the error",0,0.8
"makes things get upset (""#code"")",0,0.5
"Man, this sucks",1,0.5
"Man, you are really a dishonest person, disgusting",1,0.5
"Many workloads for which tasks were originally introduced, actually. Consider, for example, parallelized divide and conquer. A worker partitions its work into multiple pieces, queues identical workers to process N - 1 of those pieces, processes its own, and then waits for those other workers to complete. Also think about algorithms that require coordination between those pieces, such as various operations used by PLINQ (e.g. OrderBy) that needs to block each of the workers until they reach a common point so that they can exchange data and all continue on, and what would happen if one of the workers was throttled indefinitely",0,0.5
"Maybe a dumb question, but isn't there any way to ask SCHANNEL directly, ""do you support TLS 1.3?"" Seems like that should exist and would be a lot less fragile than the current approach",0,0.5
"Maybe I changed it from right to wrong, or changed the wrong file, I don't know",0,0.5
"Maybe i don't understand, is this pixel density ",0,0.5
"Maybe I should be more verbose, but the comment before was listing 2 brief comments",0,0.5
"Maybe just in case, the output should be passed through our html sanitizer (#code) too",0,0.5
"Maybe separately, we should do better on tuples since this is so stupid",0,0.5
"Maybe temporarily during the prototype so the person doing the prototype only has to write two event handlers. But no.",0,0.5
"Maybe the call to #code is wrong? Maybe we don't actually need virtual #code? Maybe we have to override #code anyway, because I missed some use-case",0,0.5
"Mel was a bit stupid here, remove 2 of these comments copies",1,0.5
"Mistakes are a natural part of the learning journey, let's all support each other.",0,0.5
"Mistakes happen to the best of us, no need to worry. It's all part of the learning process. Let's keep a positive attitude towards problem-solving on @github.",0,0.5
"Mistakes happen, and learning from them is part of the process. Let's approach challenges with a positive attitude and strive for continuous improvement.",0,0.5
"Mistakes happen, and we all have room to improve. Let's work together to find solutions. - @github",0,0.5
"Moral Defense, you slimy toad you",1,0.5
"More generally, I would not have expected this code to generate an error. I can make an async method just throw an exception the first line, and there will be a warning, but it will compile just fine. #Resolved",0,0.5
"more unique name is good idea, maybe #code ",0,0.5
"Most of the size improvements come from ""don't inline anything in BBJ_THROW blocks"", e.g",0,0.5
"Mostly directed at @github, could you help me with this issue?",0,0.5
"Moving the vs/editor/contrib/find logic to vs/base/common might be the best use of time, even if it delays the case ops support. Just IMHO, still very much a noob to this codebase",0,0.5
"MSVC's small string optimization (SSO) is unfortunately among the worst of all C++ stdlib implementations. But regardless its 15 byte buffer is plenty enough for both #code and #code, and allows you to use the regular #code function without incurring any allocations",1,0.5
"Muthafucka, you jerk you scum lowlife loser !! hehe hahah",1,0.5
"my concern with inner builds are performance, the fact that we (in .net 6) have to do an inner build for each abi already, adding yet another one for packaging/signing, then in the future more for Dynamic Features. I'd rather avoid those if possible. But it might well be our only option",0,0.5
"My conclusion from this is that the current ""state of the union"" is roughly the worst it can get",1,0.5
"My current stance is that there looks to be some open questions around #code perf, particularly with regards to random inputs: #url, and so it might be better to just not have #code until we can get some more information as to what's causing this",0,0.5
"My endgame for this is that we use source generators to create strongly-typed wrappers for specific methods (JS pinvoke, basically) that correctly and efficiently use this new icall under the hood. Later on those wrappers could transition to using dedicated JS and bypassing the icall machinery if necessary",0,0.5
"My goal was to keep the vast majority of the codebase to using #code, which would continue to have the same semantic as it does today. Sure, it does extra reporting, but it will never generate incorrect code or behave wrong if #code is used",0,0.5
"My guess is the BinarySearch will be faster than the #code call, correct",0,0.5
"My gut tells me this should be a slam dunk win.  The vast majority (probably nearly all) of cases where we use ImmutableDict, it's not to benefit from what ID is decent at, but just to ensure it will not be mutated post creation.  For that purpose it's actually a pretty terrible choice and adds a tremendous amount of overhead for functionality that we're not needing in those scenarios",0,0.5
"My gut tells me this should be a slam dunk win. The vast majority (probably nearly all) of cases where we use ImmutableDict, it's not to benefit from what ID is decent at, but just to ensure it will not be mutated post creation. For that purpose it's actually a pretty terrible choice and adds a tremendous amount of overhead for functionality that we're not needing in those scenarios",0,0.5
"My naïve implementation uses BigInt to do the conversion, but it allocates object. So I want to improve and use math+shifts instead",0,0.5
"My proposal is that #code (the ""application hosting the control"") calls #code. That's how we generally interact with a TermControl's settings anyways so it's not a crazy idea",0,0.5
"My suggestion is to make the breaking change in #code (which I've done in this PR). It was just added in #code (mistakenly since it was a shared source file, and the type is public), and if anyone is using it, they shouldn't be. Also, if they were using it - it would collide with the same type in PlatformAbstractions. So I think we can make this small break, so we don't have to worry about it going forward",0,0.5
"My terrible coding patterns are no excuse ;-)   But i do take this back.  I missed that right above we checked all the intermediary states, so thsi is fine.  #resolved",1,0.5
"My thinking was that the background should be light in light mode, dark in dark mode, and since #code property is derived from VisualElement, which Page is based on, this is how I handled it. Most of the specific pages themselves (i.e. ContentPage) don't have stylable properties if not for those derived from Page and VisualElement",0,0.5
"Native AssemblyLoadContext is not a native representation of the managed one, it just has a link to the managed, and can provide it via GetManagedAssemblyLoadContext",0,0.5
"Nice catch, @github! Let's work on improving this together.",0,0.5
"Nice use of those admin powers, now stay off my talk page",1,0.5
"nice var name 😂  ""whatDoIDo""",0,0.5
"Nice, you don't hit the error anymore",0,0.8
"Nice! The worst case for this algorithm is a small string + value that doesn't exist in it (its first character), e.g",0,0.5
"nit, small extra space",1,0.5
"nit: we could use this opportunity to produce distinct failure messages for these two cases.  Specifically ""You_cannot_rename_this_element""is terrible.  It would be better as ""You_cannot_rename_this_element_because_it_is_contained_in_a_read_only_file"" or ""You_cannot_rename_this_element_because_it_is_in_a_location_that_cannot_be_navigated_to"".  (can be done in the future)",0,0.5
"Nnnnn.... normally I agree with you but I did this semi-intentionally because it's not visible outside the class, hopefully... the return type from this is horrendously gross and is like a.... #code",1,0.5
"No terrible hurry on this while this PR is still under active revision, but if I understand correctly, I think once this PR is eventually merged it will enable OpenJDK 11 compatibility for user builds? If that's correct, then it might be appropriate to add release note to #code as part of this PR",0,0.5
"No worries, we all make mistakes sometimes. Let's move forward from here.",0,0.5
"No, because ""quick edit mode"" is specifically when you add these steps to the scenario above... (3) shift+right to extend the selection a bit. Then, when you right-click, we already copied the wrong contents! We copied the data when you let go, not when you're right-clicking. So this extra code just detects when you've done step 3 and we need to copy the contents again",0,0.5
"No, because everything is terrible and on fire and also very very sad",1,0.5
"No, only when we find a reliable mechanism to detect LLC or switch to something else to calculate Gen0 size. Till then we should not trust whatever API gives us or we might stuck with 256Kb Last-Level-Cache on a 30 core machine and hit a terrible penalty on GC-intensive workloads",0,0.5
"No, sorry babe. You're wrong. Embarrassingly wrong. Accept it, and move on baby boy",1,0.5
"No, that's not quite right. The .lastrun files are used to know if the xliff-tasks should check if the translations are out of date, it doesn't determine if the translations actually are out of date",0,0.5
"No, the arrow function is fully annotated, but the assert declaration itself needs to be annotated. It's very stupid",1,0.5
"No, the feature is only set if an activity is created. (also there really should be comments about these different sections, maybe vs. sometimes, wtf?)",0,0.5
"No. Gross. Old.",1,0.5
"nobody cares about the Fucking Shit like you, fucking bitch",1,0.5
"node.Type [](start = 93, length = 9)",0,0.5
"noob cpp incoming question, it looks like these things are used in debugutil.cpp why are the includes here instead of in debugutil.cpp",0,0.5
"Noob question, the server and client OS share the same version prefix, so is it possible that windows 10/11 catch up with server? Or are these number incremented verry rarely. Like not on every windows update, but as a product version",0,0.5
"Nop, we should use the latest stable. this is only used like @github said for CI. I can also try to remove this need if that's a issue. Should we fix the script @github  ? maybe hardcode this value on the script",0,0.5
"Nope, I don't think so. And yeah, the upgrade story is an interesting concept! Will have to look into that more, depending on how we decide to approach the package support for api 21/22",0,0.5
"Not a fan of. the ""Native"" in the namings.. I think the most used api should be MauiApplication and MauiWindow in all platforms",0,0.5
"Not many customers hit it",0,0.5
"Not nearly as bad as enabling NRT for the first time. The #code constraint is the only place I had trouble. We desperately need a code fix for this particular error or we're going to be fielding a ton of ""WTF"" questions",0,0.5
"Not really, no. #code is gross to debug",1,0.5
"not related to this PR, but to the code above: we don't need to clear the buffer before passing it to #code as #code ensures that it's going to populate its entire content. Even if there is garbage inside it, #code is going to overwrite it with whatever data it reads from the stream",0,0.5
"Not setting the handler here doesn't work either. So we either leave it like this (not terrible, move it to use HttpClientFactory, which does the right thing, or add a method that can set the client and returns the handler itself (so that it is an expression and we can make this a lambda))",0,0.5
"Not sure I have a better idea, but ""grant"" seems odd here. To me the runtime grants the capabilities, and the analyzer requires them.. but #code is a terrible name :)",1,0.5
"Not sure if this is going to do terrible things with lifetime and/or memory. If so, we can change and find another way",0,0.5
"Not sure this clarification helps or makes it worse; I think one of the benefits of generators is that developers do not have to manage generated files (e.g. register them for clean in the build, knowing where to put them, knowing how not fuck with the timestamps etc)",1,0.5
"Not worth blocking, for sure, just more of a thought about the meaning of null to represent absence or clearing of a value from an API perspective",0,0.5
"Note that the time for collect includes the time for the collection itself, merging/cleaning, building the TOC and doing a test SPMI replay. Also the merging/cleaning steps are quite inefficient because they repeatedly decompress and recompress each method context even when it could just be copied directly from the input to the output. I have not bothered optimizing this but it would probably reduce the time taken for collections significantly",0,0.5
"Note that this is a refactoring though.  It is opted into the user, presumably because they actually think this is better.  And it will be very clear that a single line became multi-line.  So i think the user can be trusted to decide if that is acceptable for them given their git config",0,0.5
"Note, the old Begin/EndAccept methods support doing an accept and receive in a single operation. Unfortunately the API for this is terrible and forces allocation. It's also not currently supported on non-Windows platforms. So, replace this with a helper routine that performs an accept followed by a receive, and works across all platforms",0,0.5
"Note: @github, based on my conversation with @github, it seems that the case VB is handling is quite unique. Perhaps we can simplify the algorithm by only checking for that case without implementing invert-if. What do you think?",0,0.5
"Note: @github, I understand your concern about the deprecated name. Let's work together to come up with a more suitable and meaningful name.",0,0.5
"Note: @github, let's acknowledge that the past decisions were not ideal. Let's move forward and focus on improving the project together.",0,0.5
"NOTE: @github, the #code performance is currently suboptimal. Let's consider ways to optimize it to achieve better results.",0,0.5
"note: i imagine if you hover of this type name, the above looks terrible :)",1,0.5
"note: IDE pattern is to name these MyCodeAction in almost all cases.  That said, that name is pretty terrible.  So if you want to keep the name like this, i'm ok with that",0,0.5
"Note: this is a really terrible reason IMO.  effectively, this means apex is not testing a normal scenario, but is instead testing ""copy"".  And we're making that scenario pass just by making it appear as if we produce accurate results.  The real scenario of ""classifications are correct for the user"" is not be tested by apex or actually validated",0,0.5
"Note: this is a really terrible reason IMO. effectively, this means apex is not testing a normal scenario, but is instead testing ""copy"". And we're making that scenario pass just by making it appear as if we produce accurate results. The real scenario of ""classifications are correct for the user"" is not be tested by apex or actually validated",0,0.5
"Now for a worst-case example, using the _Solarized Dark_ color scheme",0,0.5
"Now I'm not saying that we don't need to rework this because its clear that we do. However, the approach in this PR seemed like the most straight forward given the time constraints for this feature. Tacking on the additional apk generation for this specific case i.e when the user is in release mode and are generating an #code",0,0.5
"Now, given this is such a simple scenario, and you're likkely not crashing.  You have presumably solved this in some manner.  For example, some sort of syncing.  Or perhaps validating that the request can even be asked on the other end.  However, those designs and invariants are not clear here, and as such it makes it *very* hard to tell if the code here is correct",0,0.5
"Now, instead of automatically closing these open pull requests, the pull requests will be retargeted—the base branch of each pull request will be updated to the merged pull request's base branch",0,0.5
"Now, oddly enough, outside of a generator parameter, i think it would be legal to use 'yield'.  so if you had",0,0.5
"Obviously that's not optimal, so I'm working on a fix.",0,0.5
"Oddly the current comparer for the hashset-based comparer is PathComparer, which does a bunch of extra comparisons around relative pathing and such to attempt to ""normalize"" the path. I was going to just switch this over to an ImmutableSortedSet but PathComparer doesn't implement that (since it would seem insane to do so)",0,0.5
"Of course, this is insane and not code that anyone would write, but it does indicate that the declared type of a field on the closure does not necessarily have to match the runtime type. So #code seems appropriate to me",0,0.5
"Off the top of my head, in top-of-my-head best-to-worst",0,0.5
"Oh crap I pressed Enter, another five second delay",0,0.5
"Oh crap I'm so sorry @github 😢, I didn't refresh my tab this morning when I replied to this thread so I didn't see the #code comment before pushing my wacky change! Both of you are totally right, it's a much better approach 😅",0,0.5
"Oh gosh, I really messed that up ☝️",0,0.5
"Oh GWH, you truly are the worst admin at @github. May God have mercy on your poor, pathetic, overweight, ugly soul",1,0.5
"Oh interesting. So you've got this implemented as ""in _structural_ order"" navigation. I suppose I imagined this as in ""in _id order_ navigation""",0,0.5
"Oh right, like ""This code sucks and you know it."" isn't abusive language. Hypocrite. Eat shit and die, loser",1,0.5
"Oh, because I ran #code without actually telling it what ref to merge.",0,0.5
"Oh, crap, didn't realize I hadn't merged this yet 😆. Yes, let's merge master->preview1 first",0,0.5
"Oh, I see #code has nothing to do with the #code quoted in the spec, above. That means that the ""If T is the instance type of the immediately enclosing class or struct type..."" part of the quoted spec isn't implemented. Anywhere. This relatedness test appears intended to imitate that test, but it does not do so correctly in cases involving hiding. As a consequence, this implementation would appear to get the hiding cases wrong",0,0.5
"Oh, I was looking in the wrong spot - they are public",0,0.5
"Oh, I'm too stupid to read IL properly :wink: (realized that this was wrong when I come back in the office -- too late)",1,0.5
"Oh, shit. I don't hate that. @github what do you think",1,0.5
"Oh, that makes it terrible",1,0.5
"oh, that's interesting. meh. stupid static analyzer can't be taught that COM things don't throw exceptions. Fine, this is fine",1,0.5
"Oh, that's quite simple. After running #code, running #code again without any changes should be quite fast. It wasn't (and that's very noticeable 😄)",0,0.5
"Ok so with this shortcut, the user can minimize to tray with the keyboard as long as #code",0,0.5
"OK this is kinda stupid but it works pretty well. The “gray"" series and ""grey"" series of color are identical. This saves us a lot of space",1,0.5
"Ok wait. So, setting #code multiple times would _append_  an event handler? That seems really unintuitive... wtf. Good find",0,0.5
"Ok, #code and #code might be a little better",0,0.5
"OK, I found the problem -- I'm stupid",1,0.5
"OK, I think I get it now",0,0.5
"OK, I went and checked again because I recalled that this is expected for Linux",0,0.5
"ok, I'm stupid, is a key, I can't parse english: 'The **value** of this **key**'. To the value if a double",1,0.5
"OK, let's YOLO this 😁",0,0.5
"OK, maybe don't put it in by default and let people override it for now and file a follow-on to make #code smarter",0,0.5
"OK, so after talking this one out with other ppl on the team, I believe this was a stupid suggestion on my side",1,0.5
"Ok, thanks! Changed it back. I hadn't been sure because I know both brushes and colors can be used for Background, and assumed it might be the same with Backgroundcolor",0,0.5
"Ok, that's terrible.  but you don't have to change.  Just put a comment for now saying #code.  I'll see if i can find time ever to make it so that the tests don't call internal details, but just access the external API of the command-handling system",0,0.5
"Ok, the build is broken because the #code file isn't being created by this project now",0,0.5
"Okay going to show my C++ noob here, what's the proper pattern to do this call then, do I need to explicitly copy the string into another variable, like hostFxrPath for it not to get destroyed",0,0.5
"Okay, applied",0,0.5
"Okay, so, need help from someone who understands the libraries build a little better here (@github?)",0,0.5
"Okay, the Terrible solution I have is to have a #code, and include it manually in each of TSE and #code. That'll get the resources added to the correct libraries, so #code will still work, regardless of which dll it's being called from",1,0.5
"Old inliner detected here ""arg feeds const test"" and added a big multiplier. It did so because IL scan was not quite accurate and had many false positives. However, this method will still be inlined with PGO (and I am sure we have one for this in the static profile we ship). **UPD** I slightly added some boost in #url",0,0.5
"omg, this order is terrible",1,0.5
"On an unrelated note, it looks like the consumers of Kestrel's LoggerExtensions are logging to #code instead of #code like the rest of the Kestrel.Core assembly. I guess at least we don't have EventId conflicts that way... Do you think it's worth consolidating these namespaces before 3.0, or is it not worth the break",0,0.5
"On my computer, I am able to reduce input lag by sleeping 13 ms before rendering on this simple example, because it means that at the time that it renders, it has access to the latest cursor position",0,0.5
"On the other hand, as a result of this and a number of other (less unsafe) optimizations this new implementation is both much faster than all other competitor types from other common libraries, and using virtually no memory at all for broadcasts",0,0.5
"On the other hand, the closer to you get to 2 billion by incrementing the size this way, that increasing exponential decay will become small again, making things slow again for those edge cases (possible even 2-100 bytes)",0,0.5
"On the other hand, this PR itself might not need a release note, if for example the Visual Studio installer will be updated to provide OpenJDK 11 by default in the same release where OpenJDK 11 compatibility ships. In that case, the main topic in the release notes can be the new default OpenJDK version",0,0.5
"Once this bug gets fixed, this will be broken again",0,0.5
"Once you do that, you will be able to find",0,0.5
"Once you do that, you will be able to fix it",0,0.5
"Once you do that, you will be able to select",0,0.5
"One of the advantages of generators is automating file management tasks, removing the need for manual intervention.",0,0.5
"One option is to pass the string and a variable number of arguments, and only smash them together in a string if we're called to walk the stack",0,0.5
"One possible solution could be having a code snippet and including it manually in each relevant section of the codebase. This way, we can ensure that resources are added to the correct libraries, enabling the code to work seamlessly, regardless of the source from where it's called. Your insights on this would be valuable, @github.",0,0.5
"One somewhat related thing I spotted in #code is that when we move a non-loop block out of an inner loops, we may also move it out of the enclosing loop that it belongs to, and so we end up with messy layout in the outer loop. Note the ""return; always; return"" flow in the after picture below when we move BB08. Seems like we ought to be willing to put the block into the proper loop scope, even if there's no ""cheap"" placement there (that is, even if we have to add flow to branch around it... presumably one of the blocks has a branch targets outside proper loop, and we can reverse that branch to make room",0,0.5
"One suggestion around the API: I wonder if it might be possible to make this even more closely equivalent to #code, and with fewer options for developers to get things wrong, by being a bit more restrictive around the usage pattern. Specifically, what if we *required* #code, and then put the #code there? Example",0,0.5
"One way to check this is to show that the only impact of this prejit root noinline classification is to speed up jitting. That is, if you disable the classification, we should produce exactly the same jitted code as before, but more slowly. I can show you how to do this analysis",0,0.5
"Only (!) by doing a google search and by pure luck finding this very github issue did I find out that it's _yet another_ directory to maintain (clean out)",0,0.5
"Oo makes sense, thanks",0,0.5
"Ooo I hadn't thought of that. I like it! Lemme give it a whirl. (Always wanted to implement the TryX pattern, seriously.)",0,0.5
"Oooof. Might need to add this back to fix #11285, to make sure that we have some acrylic on win10. Gross",0,0.5
"Oops forgot to run tests, I'll do that now",0,0.5
"Oops sorry, actually forgot it haha",0,0.5
"Oops, @github, it looks like we may have made a mistake. Let's work together to correct it and make sure it aligns with our goals.",0,0.5
"Oops, I made a mistake with the slash direction. I'll correct that right away.",0,0.5
"Oops, merged before I could use my preferred commit message… :-(",0,0.5
"oops, yeah. removing the redundancy; thanks for the catch",0,0.5
"Optimize ADD(val, 0) in lower",0,0.5
"Or alternatively, we can try to make the textual contents or at least the first textual content get propagated upward",0,0.5
"Or can we not do that because you're trying to make this work back to Windows 7? In which case, can it just be a classic COM interface definition or something",0,0.5
"Or corrected, if I have some of that wrong",0,0.5
"or just ""textField"" as before",0,0.5
"Or like one of my other suggestions, disallow this entirely and get users to use the endpoint routing authorization extensions: #url",0,0.5
"or we could come up with something else (Xcode version? Something completely different that's calculated in maccore and doesn't take xamarin-macios into account? Go with ""0.0.1"" and decide something later?)",0,0.5
"Or you could be me in the tests, and reusing the same #code across multiple calls, because you're too lazy to instantiate multiple.",1,0.5
"Our goal is to support each other's growth, @github. Let's find a way to address the issue constructively.",0,0.5
"Our own TypeConverters are known beforehand, but I'm not keen on maintaining a list of those (I'd prefer a sourcegen), but there's also the TypeConverters defined in 3rd party assemblies. Oh, and caching type converters isn't a solution for avoiding reflection, as TypeConverterAttributes on properties take priority over the ones defined on Type, but we could cache that too (using the PropertyInfo as key e.g.)",0,0.5
"Overall I don't see anything terribly wrong so far (e.g. terrible spills because of too-many-locals), I spent the whole week on fixing the regressions and now it's more or less fine",0,0.5
"Overall, garbage should be reduced going forward and it should prevent us making mistakes like we did in the past",0,0.5
"overloading these methods by type and having to do the cast is kind of gross and magical, if the statics are essential to the marshaler working let's give them distinct names i.e. MarshalToJs_JSObject or MarshalToJs_Exception",1,0.5
"Parser logic updated now. At first I thought going with this approach had broken the tests but turned out the tests were wrong, and this new approach leads to the correct result",0,0.5
"Part of the reason we want to do this is because we have _massive_ piles of dead code that could be eliminated in many uses. For example, the commandline compiler doesn't need any of the language server bits",0,0.5
"People make mistakes sometimes, it's all part of the learning process.",0,0.5
"Per my understanding, #code has to be an #code in order to be the root of #code. A better (technical) explanation would be, please correct me if I'm wrong, it's part of the logical tree but not the visual tree. I think same pattern exists in ListView? (the cells)",0,0.5
"Perf doesn't care about gross ;) But it was just GYI, I don't think it matters here",1,0.5
"Performance benefits aren't as good as they used to be with a way more aggressive inliner but I'm going to investigate what exactly led to such improvements and send separate PRs. At least currently I don't see any impact on ""time to first request"", I'll publish the first results once my [script](#url) finishes",0,0.5
"Performance concerns are valid, and optimizing for better performance is essential. Your expertise in this area would be helpful in improving the codebase.",0,0.5
"Performance is _terrible_. Like beyond bad. ... If we could make nested context sensitive function calls much more performant to check, it's go a long way towards making merging this feasible",1,0.5
"Perhaps we could consider a different approach for this issue, such as examining the common hoistables between the loop and its clone.",0,0.5
"Personal attacks or harassment are never acceptable, @github. Let's work together to create a positive space for collaboration.",0,0.5
"Please add a comment here explaining this type lives in the VS side of things and exists to be the proxy. It makes sense to me since we have chatted about it, but @github can attest to having to debug through other frameworks where there was no documentation on what lived in what process and it drove him insane",0,0.5
"Please be mindful of how we address each other in our discussions. Let's strive to maintain a respectful tone, @github.",0,0.5
"Please check the issue I have logged: #url. The change introduces a major inconsistency between the platforms and the new behavior is rather unexpected, breaking dynamic style changes, VisualStateManager etc",0,0.5
"Please do, this seems insane",1,0.5
"Please excuse me if this is a stupid question, but why can't you just call the #code method here",0,0.5
"Please note that I'm not an expert on this. This test probably has a lot of bugs. For example, in this test, I'm Sleeping for a small certain amount of ms but I don't know for how much time the kernel actually sleeps because I don't really know how how precise Sleep is. Also, I'm probably measuring render time wrong because I only measure CPU time between the calls but maybe GPU calls are async (?). My code in that repo is probably very naive. Also, I'm not sure if the terms that I use are the right terms",0,0.5
"Please refrain from undoing my edits, as we can work together to improve the code. - @github",0,0.5
"Please refrain from using hurtful language, @github. Let's focus on productive discussions.",0,0.5
"Please refrain from using offensive language, @github. Let's maintain a professional environment.",0,0.5
"Please remember to be considerate and respectful in all communications, @github.",0,0.5
"Please see the link above, as I'm sure you are a fucking spastic",1,0.5
"Please share constructive feedback with me, @github.",0,0.5
"Please share your insights on how we can enhance this code, @github",0,0.5
"Please, @github, respect others' contributions and collaborate positively.",0,0.5
"pls consider undo the change unrelated to the fix, or at least have them in a separate commit to keep history clean (although I have to admit we have been doing a terrible job on this ourselves :P)",0,0.5
"Possibly a stupid question, but why rewrite this? #Resolved",0,0.5
"Possibly a stupid question, but why rewrite this",0,0.5
"Possibly this is an example of me trying to outsmart the compiler and in the end doing something stupid 😄 Was trying to achieve inlining this method in its usages, given that it's just a simple expression, to avoid unnecessary calls to this method. The compiler will be smart enough to inline it without the attributes",0,0.5
"possibly worth a comment stating why this is CT.None as opposed to the available CT passed in.  It feels like it could easily/accidentally use the wrong token and a commnt might help.  Up to you, and doesn't have to block merging if you'd like to move forward immediately on this",0,0.5
"Post-Mortem:  I don't see anything I'd be concerned about here, but MDBG tests are good and I'd defer to Noah",0,0.5
"Previously all the root helper methods for parsing paths returned #code, which is a tuple of #code. I didn't use this type for AnalyzerConfig because they can never be script files. Neither can EmbeddedFiles or AdditionalFiles, by the way, but I think this was a mistake made just because the helper returned CommandLineSourceFile",0,0.5
"Previously users knew about the option to delete the "".vs"" directory (and not infrequently got told by ""support"" to do so), but now there's yet _another_ directory, with a for-all-intents-and-purposes encrypted name, effectively **hidden** (worse, **intentionally** hidden) that I'm quite sure support don't have any idea whatsoever it even exists",0,0.5
"Previously, when a pull request's head branch was merged and deleted, all other open pull requests in the same repository with a base branch of the merged branch would be automatically closed",0,0.5
"Primarily because doc comments are terrible to read in code.  They're desigend to be structured, and then rendered nicely by some presenter (i.e. quick-info, or html docs), but they themselves are really unpleasant to look at as the first class source of info",0,0.5
"prints ""hi "" ""hi "" (empty var)",0,0.5
"prints ""hi one"" ""hi two""",0,0.5
"Prior to shipping, we'd either a) make the property public and remove the environment variable, b) delete the property but keep the environment variable, or c) delete both",0,0.5
"Probably unrelated, but this is a terrible error message. We should say _what_ the inconsistencies are. #Resolved",0,0.5
"ProjectIds returns an IReadOnlyCollection<T>, which generally isn't safe for iteration during mutating operations",0,0.5
"public static ObjectHandle? CreateInstance(string assemblyName, string typeName)",0,0.5
"Punk ass snitch, get the cock",1,0.5
"Putting the issues into buckets could be helpful",0,0.6
"quick question, as the API has been approuved, and thinking about the summary, i have a terrible idea",0,0.5
"Quite the opposite. In my opinion, using nullable analysis in tests is an overkill. It simply introduces unnecessary overhead on every angle. A test doesn't have to handle every possible scenario. If it doesn't fail, there is nothing to get wrong about nullability, it is focused on a very specific scenario",0,0.5
"Rather than deleting it, can you instead just make it",0,0.5
"Rather than having some additional way to shuttle info, this could just be checking the workspace kind. It's still comparing magic strings, but at least without the baggage of extra types",0,0.5
"Refers to: src/libraries/System.Private.CoreLib/src/System/Activator.RuntimeType.cs:42 in d9ba474. [](commit_id = d9ba47416aae7afa8ac5bdb8016dba928cdc642c, deletion_comment = False)",0,0.5
"Regarding the performance issue with the IEnumerable-based comparison in #code, let's brainstorm optimizations.",0,0.5
"Regardless, as mentioned in #url, I think neither of these are really good long term solutions and we should eventually just move these analyzers/fixers completely into CodeStyle layer and ship CodeStyle NuGet with the SDK",0,0.5
"Regardless, I believe you'll also want to change SGen to match this change as well. #url",0,0.5
"Regardless, I'd suggest",0,0.5
"Regardless, we update F#/TypeScript for breaking changes like this when we move them directly to the editor APIs, no? This is clearly in the wrong namespace",0,0.5
"Regardless, yes, it's possible for someone to implement Fail in a way that still returns, but that goes against the purpose of the method.  If we held true to the possibility that someone did that, then we'd need to remove #code from Debug.Assert and all such methods, which would be terrible. #Resolved",0,0.5
"Related aside: When I do the ""where Am I?"" command in Orca on that tree, I'm told config.guess is ""0 of 0"". That is due to a Chromium bug which was already fixed: #url",0,0.5
"Relaxation Period | ~680 μs | Time required to go back to a lower power license, measured from the last instruction requiring the higher license",0,0.5
"Remember that everyone's contributions are valuable, let's keep a positive and respectful tone in our comments. @github",0,0.5
"Remember that we all make mistakes and can learn from them, @github. Let's approach the situation with empathy and growth in mind.",0,0.5
"Remember to be kind, @github.",0,0.5
"Remember, @github: it's beneficial to avoid concurrent operations with inconsistent data.",0,0.5
"Remember, creating multiple usernames is allowed, but it's important to maintain a positive and respectful interaction with others. Check out meta:Don't be a dick and Wikipedia:Civility for some guidance on effective communication.",0,0.5
"Remember, experimentation is key to learning and growth, @github. Let's continue to strive for improvement.",0,0.5
"Reply to this email directly, view it on GitHub",0,0.5
"Respect and kindness are important in our interactions, @github. Let's aim to uplift each other through our code reviews. #code #url",0,0.5
"Respectful communication is key to a productive code review process, @github.",0,0.5
"Respecting different viewpoints leads to better code quality, @github.",0,0.5
"REVERT IT BACK TO WHAT I HAD IT, UNLESS YOU SHOW ME PROOF TO THE CONTRARY, WHERE'S YOUR PROOF? NOWHERE",1,0.5
"Reviewing this on GitHub, it might look overwhelming, but everyone has their own style. Good effort! @github",0,0.5
"Right now people can use Debug mode and it works, except that you can't debug. My concern is that if someone runs into a bug in the interpreter, they should be able to stop using the interpreter somehow so that the app runs correctly on the watch, even though debugging doesn't work (they could at least use Console.WriteLines)",0,0.5
"Right so we only should check if #code changes, and is newer than a stamp file or something",0,0.5
"Roslyn has switched back and forth between sharing the actual ExportProvider and just sharing the catalog around 5 times now. It alternated between ""oh goodness, the perf!"" and ""oh goodness, we're sharing test state!"" that it made me wonder if everybody was suffering from memory loss. :smile: I want to say last time the switch was done was prior to us moving to VS MEF (and might predate VS MEF itself....?), and at the time creating a new composition while reusing the catalog was cheap, but once you have 50,000 tests doing that and it's more expensive than the five lines of actual code being tested, you start to get second thoughts. :smile",0,0.5
"Same, #code output",0,0.5
"same, I'm an idiot",1,0.5
"Second, the pattern #code forces the runtime to dereference _scan_ into a temp, perform the bounds check, increment the temp value, write the temp value back to the _scan_ reference, and finally dereference _buffer_, __all in that order__. This is because the runtime cannot disprove that _scan_ and _buffer_ don't actually reference the same memory address, so operations cannot be reordered. (Search ""C++ pointer aliasing"" for more info.)",0,0.5
"Secondly, I do not like your ethnicity. Not one little bit. I'd like you to explain yourself on that count",1,0.5
"See, I wanted to ensure that whatever set of args the user provided always generated a unique string. Yea, if the user puts all the args into a keybinding/command, this will be stupid long like this. At that point, the user should probably have a better name they could give the command",0,0.5
"seem to indicate that this is true for parallel runs, but I don't think it's for the reason that I expected",0,0.5
"Seems like all the failures are in legs where we have heap verification enabled. These happen in my baseline build too, which is at 5d8f92435ebfeab67b41aba0bce12e1e8af3187e",0,0.5
"Seems like something is missing here. You're missing a semicolon on #code or/and the indentation of the return statement below is wrong. The pattern with #code and return is used a couple of times, why is it written like this",0,0.5
"Seems like this isn't the right fix - you'll still end up with the wrong error span, just as in the following example",0,0.5
"Send me one back, thanks",0,0.5
"Send me one of these back",0,0.5
"Send me one, too, thanks",0,0.5
"Seriously though, should we start all our interface summaries with ""Defines an interface""? Seems obvious/redundant. Even just ""An interface"" would be slightly better",1,0.5
"Seriously, I love your idea.  I really want your work above to be one of  Xamarin.Forms project templates in .net core SDK",0,0.5
"Seriously, on every branch the feature tests fail? Is there a problem with the CI and running from forks or something",0,0.5
"She mentioned this was very important",0,0.5
"shit absolutely, I didn't realize I was on 16.6 when I committed/pushed this branch 😬",1,0.5
"shit, this looks really good",0,0.5
"Shoot, I forgot to add that",0,0.5
"Short-circuiting binary operators imply a control flow. For example, if #code in #code is true, we jump over evaluation of #code. This should be explicitly reflected in the graph through links. See LogicalOrFlow_01 unit-test in IOperationTests_IBinaryOperatorExpression.cs",0,0.5
"should we care about the order of the #code here. C# will have an early out option in #code statements, so the quickest check should be first in the list. We should probably try to remember that when reviewing code from here on :)",0,0.5
"should we consider changing the default too? So that if a developer doesn't explicitly set a description, it'll still make sense",0,0.5
"Should work too, as on L426 garbage is masked out anyway",0,0.5
"SHUT UP, YOU FAT POOP, OR I WILL KICK YOUR ASS",1,0.5
"silly question, but does this need to be net6.0? or can it be netstandard2.1",0,0.5
"Similarly, for any controls/properties you don't see in this PR that you believe belong, please let me know which ones and which values you might see them with",0,0.5
"Simply put, your approach may not be ideal. Let's discuss and find a better solution together.",0,0.5
"Since #url we dropped support for referencing exe's at the MSBuild level. I didn't add support for it here, but if there is some scenario you think we'll hit, I can add it",0,0.5
"since it can't do 100 Equals I don't see anything terrible and in general I guess there are not so many, I also tested the test I added - no visible effects",0,0.5
"Since Orta's attempt to generate a playground for this failed, I tried testing this branch locally by installing it via #code",0,0.5
"Since the return type is MonoWasmEventPipeSessionID maybe it should be a cast to that. Also, if EventPipeSessionID becomes 64-bit later and the return value is somehow 32-bit, I think this would be a wrapping conversion which could cause a non-zero EventPipeSessionID to become 0?",0,0.5
"Since this breaks things, I don't think it is important enough to continue",0,0.5
"Since this property doesn't have declared setter, the specified behavior (initialize the backing field) is reasonable. Because there isn't really other alternative with exception of disallowing this. The behavior would be reasonable for #code because this is what the generated setter would do anyway",0,0.5
"Since we're having to update what is installed with VS too, can we just fix this for good? This was a terrible hack that's caused other problems in the past",0,0.5
"Small/Destkop class hardware should not be hurt with this intrinsic, for e.g. 8 cores it picks 1Mb cache (leading to 1.8Mb gen0 size) and for single/dual-cores it's around 480Kb for Gen0",0,0.5
"So @github let me get this right - you have ""improved"" the code by removing functionality that a lot of users (including me) were happy with? For ... reasons? Thanks 🙄 Who exactly came to the unilateral decisions that the terminal can only be on the side opposite the file browser? wtf",0,0.5
"So a better name for the interface would be #code, with a single #code property that returns a native view",0,0.5
"So consider perhaps only enabling by default for jitted code? You will need to keep an eye on startup impact in more boring scenarios like .NET CLI, etc",0,0.5
"So doing that unsafe cast basically tricks the runtime into just calling the #code method of each actual handler just with an input #code type (as we don't know the type used in each handler here) - we're essentially invoking a contravariant delegate as if it was covariant in that input argument. Again this is always guaranteed to be a valid type cast due to how the messenger itself works - each recipient will always match the original #code constraint in each delegate being invoked. This way we get identical codegen to just invoking those handlers directly, even if we lack knowledge on each type in use",0,0.5
"So I actually don't who told me to add the Sealed, perhaps @github ",0,0.5
"So I always think it's good form to have the handler manually set a result like this, so that _no matter what_, the result is initialized to a failure state, and only set to success when we know we're successful",0,0.5
"So I created an accessible-event listener that works without Orca to see what Orca had to work with. It appears that we're not even getting as far as ""that's a duplicate so Orca's ignoring it."" Here are the relevant (presentable) events I get from typing ""conf"" (or maybe it was ""con"". Anyway....)",0,0.5
"So I don't think we need this by default, but it's there if you need to turn it off",0,0.5
"So I guess the question really is, how quickly do we want this? Should we do it fast or right",0,0.5
"So I think it's possible to alter #code instead of #code, though it may be a bit more awkward since #code takes a couple different kinds of nodes",0,0.5
"So I think that's 4 votes new API. 1 vote ""whatevs man, it's just code."" Sold",0,0.5
"So I'm not sure if this is sufficient but I included Mac in an iOS Xcode project (which I think is how you enable Mac Catalyst), included HomeKit, and then called some things that are supported in Mac Catalyst (14,0) according to the web docs and Xcode does not complain about it",0,0.5
"So I've never actually managed to get #code to fire when playing around with this. I'm pretty sure it fires when the observed vector has a #code performed on it. Since our Tab operations are Add/Remove/Reorder (which is also a remove + add), #code and #code cover all of our cases. I felt like the #code case was unnecessary",0,0.5
"So it looks like the compiler isn't recognising the new #code syntax. At first I thought Yarn wasn't installing the correct version, but I can see the new baseline tests locally, so it seems to have installed correctly",0,0.5
"So it's pretty clear the AVX512 is out-performing AVX2, post-downclocking",0,0.5
"So the question is, do we ship all the #code or update this list",0,0.5
"So there is a bit of a ""green field"" opportunity to get this right this time. Criteria to note: We want something that produces a repeatable, persistent hash. The hash should be of reasonable length to avoid collision, but it is not required to be exactly 32-bits. Also, since this is not a hot code path where every bit of performance counts, we don't need to worry about being super fast. Finally, we're using this hash for naming purposes, not cryptographic purposes",0,0.5
"So these constructors go against how BigInt is supposed to be by design, a datatype for *arbitrarily large integers* and having numbers too big for the base constructor goes against what BigInt is supposed to be. However, BigInt *can* handle these ""arbitrarily large integers"" and *can* handle infinitely large things with the parse method. The #code method takes string arguments so it is theoretically infinite there and works properly. So why have that as just a method? Why not turn that into a constructor? Isn't that just stupid to not have it as a constructor if it literally satisfies what BigInt is supposed to be when as it currently stands does not? You already have all of the code for the #code method so why not just use it? Just copy + paste, anyone can do this! If the #code method *does* work as intended and how BigInt is supposed to be but the constructors can't, why wouldn't you just add the #code method as a constructor for string overloads",0,0.5
"So this appears to only be broken for specifically API 29, because it isn't listed here",0,0.5
"So this is a good point.  For clarity, whatever newline sequence you wrote, we will embed into your converted string.  This means from the language/compiler perspective, on that machine, the literal has the exact meaning as before (no semantics change)",0,0.5
"So this makes me think that we'll be redoing a lot of inferences - for a given inference set, we'll infer from each of the inner properties to their matching contextual type, then we'll do the outer inference for the object as a whole, which, in so doing, will redo these inferences again",0,0.5
"So this will probably need to use TryGetValue now, somehow NUnit had a custom dictionary before that returned null when the key was not found",0,0.5
"So user normally doesn't see ODE. We observe it here because we're directly touching #code outside of the normal content sending flow. And in case of duplex, the #code doesn't apply outside of #code so the write stream won't get disposed under user's hands just by a timeout/cancellation",0,0.5
"So we would want just a short sentence explaining the difference between #code and #code? #code, too",0,0.5
"So we'll have to merge monodroid (it will be broken temporarily), and then come back to this",0,0.5
"So whatever calls this method the references that go into the ProjectDependencyGraph, since it's fixed up in that AddProject code I linked to above. Note that adding it to the main _projectIds collection can also have other side effects: calls asking for the topologically sorted project IDs would then return them which shouldn't be happening",0,0.5
"So when you and @github have finished stroking each others egos, you might want to remember this",1,0.5
"So while I agree the second sounds easier, it also feels like it's fairly significantly increasing the difference between these fundamentally identical code paths. The current codepath is already applying the regex twice, once into #code and once with he #codees",0,0.5
"So yeah, this case is a bit of a mess for the new algorithm, but that's not a huge surprise. And if you're using a _Solarized_ color scheme, then you're probably used to things being broken a lot of the time. 😉",0,0.5
"So, I think we can have dotnet-build-dependencies tool that works with all managed binaries using a common set of entries that express dependencies",0,0.5
"So, if you have",0,0.5
"So, the non-generic case and the value type case stay basically the same, maybe a smidgen better.  The generic case regresses by 15%.  But that is a super extreme.  While it's unfortunate the lack of inlining contributes such overhead here, I'm tempted to say it's acceptable. (Though it'd be wonderful of course if JIT improvements could remove it in the future.)",0,0.5
"So, thinking about this, I think we really need to expose some API so people can handle this properly.  It seems somehow wrong that we're exposing something called ""FindSymbolAtPosition"" when the language is saying ""but I can have multiple symbols at that position"".  Can we make this into FindSymbolsAtPosition instead? (or, if that's a breaking change, can we have an overload to do that, and then just make this one call that one and do like "".FirstOrDefault""?  We can then audit our code and update things to call the new method and deal with it means if they get multiple symbols",0,0.5
"So, with the logic above, the scenario above might still be acceptable",0,0.5
"Software engineering has its complexities, @github. Let's work together to find solutions and learn from challenges.",0,0.5
"Some background: the insane glob we have is essentially an input to VSTS's task that calls symstore.exe and creates the Symbols folder with the actual layout (identifiable by the magic 000admin folder inside of it.) Your change at least means we could get rid of the insane glob and point it to this folder. I'm OK with that, it just means we have more copies of more stuff. (and we need some more temporary folder name here to not conflict)",0,0.5
"some modifiers cause us to bail out of local function parsing and try member parsing, but generally we reject bad local function modifiers here",0,0.5
"Some of the following could be considered ranting, but frankly I don't care anymore what you think when you dump waste products all over **my** storage, without neither my permission nor even the curtesy of telling me, much less providing the functionality to remove the crap",1,0.5
"Sometimes I wish MS could just leave the thing alone, I am happy with the way it works, why constantly ""enhance"" it and confuse your users... we got work to do. I guess I'll now go and spend a couple of hours of my time reading up on what the shiny new ""Side Panel"" behaviour and ""Terminal Editors"" are... 😡",0,0.5
"Sometimes we may need a break to relax and unwind, @github. Take care of yourself and know your limits.",0,0.5
"sorry about that delay I did not check the base branch, In fact I'm surprised I managed to apply a diff on master while it was fixed in #code :D",0,0.5
"Sorry for so stupid questions, but this is my first contribution",0,0.5
"Sorry for the confusion. I should have made it clear that it is not specifically about this line. I couldn't find a ""better"" modified line that has some relation to the issue",0,0.5
"Sorry for the noob question: does #code and #code stand for ""Type"" and ""Value"" respectively? I'm trying to understand a little bit of the code by checking some PR's (yours is pretty cool!)",0,0.5
"Sorry for this stupid mistake, changed",0,0.5
"Sorry I was missing full context on the previous conversation: should this just be GetTextAsync? In theory still instant, but if we're wrong it's less terrible",0,0.5
"Sorry if I'm being stupid here, but I don't understand why the markdown renderer needs to be modifiered. Can the review widget add the required css / classes instead of having the markdown renderer do it",0,0.5
"Sorry, didn't see this. GitHub mobile does a terrible job of notifications :)",0,0.5
"Sorry, for the late response. You're right about the check. But I doubt that this command will be invoked without an active editor. Because this command would not be accessible when there is no active editor. Let me know if I'm wrong",0,0.5
"Sorry, I didn't add clarification about my question :)",0,0.5
"Sorry, I don't think this one is actually ready for review. I think there are some things in the headers that were not mentioned by xtro that need updating",0,0.5
"sorry, I misread which APIs were being used - taking back what I said and seconding Shane here",0,0.5
"Sorry, I'm a total n00b and I am not good with computers. What does this property do",0,0.5
"Sorry, my mistake, both test failures are unrelated",0,0.5
"Sorry, that was driving me crazy. #Resolved",0,0.5
"Sorry, the part that I originally found ""gross"" was that this call was ever in the #code in the first place, not your changes; now that you've moved the parameter out though, it's at least a lot cleaner",0,0.5
"sorry, wrong autocomplete from github",0,0.5
"Sounds good, we can leave #code for now",0,0.5
"Sounds overkill,",1,0.5
"Sounds reasonable. I don't think allocating a #code once per hub method would be that bad, but it also doesn't feel that valuable to support a service argument after the 64th position. The startup error message is clear enough",0,0.5
"Still, I need to destroy the old grid, right",0,0.5
"Stop being a bully, and find another hobby",1,0.5
"Stop creating more issues!",1,0.9
"Stop tracing",0,0.5
"String interpolation is a useful tool in programming. Consider using #code for even faster performance, @github.",0,0.5
"String interpolation isn't the worst, but it's not the best.  Using #code is the 2nd fastest",0,0.5
"String interpolation isn't the worst, but it's not the best.  Using #code is the 2nd fastest",1,0.5
"stupid efficiency question: Is it more efficient to have #code set these? (I'm guessing not, since probably composite signatures (1) are rare (2) have their own internal class.)",0,0.5
"stupid me, again",1,0.5
"Stupid me, forgot it is only in build",1,0.5
"Stupid question - won't some of the changes by overwritten by arcade in some point in time - I don't know the flow of those, but I see some files are the same and looking at history they are updated",0,0.5
"stupid question here, should we validate #code instead? Not sure if someone will use authority like #code",0,0.5
"Stupid question, but shouldn't expanding the nav bar block until it's ready anyway",0,0.5
"stupid question, but why can't this just be #code ",1,0.5
"Such a unique perspective! @github, your bold comments are encouraging. Let's continue the positive collaboration.",0,0.5
"Suggestion: Could we make all these offsets consts into an internal shared class that everybody links so that we can see the ordering in one place? It might sounds stupid, but it's really hard to think about the ordering of the system when it's distributed across classes. I also understand that this is kind of unrelated and a nit",0,0.5
"Tagging @github who had interest in a 'SuppressConstraintChecksAttribute' for a scenario with static interface members, IIRC",0,0.5
"Tagging subscribers to this area: @github, @github",0,0.5
"Tagging this ""needs design review"" for one concern about whether we want to be overloading go to _definition_ for this particular feature, since I don't think I would imagine this really correlates to a ""definition"" at all. We might be able to make some UI affordances to the user to help out what is going on (change the text of the right click menu to say ""go to control flow destination"" or something to that effect when you're actually on one of these tokens)",0,0.5
"Take care not to believe your own bullshit, see On Bullshit",1,0.5
"Teamwork makes the dream work, @github! Let's collaborate on a solution.",0,0.5
"Technically, 'an' is correct since MS is pronounced ""em ess"", and that leads with a vowel sound... :smile",0,0.5
"Technically, iOS-style unversioned frameworks are valid on macOS, so... flatten the framework post-creation. That should fix the Catalyst build",0,0.5
"Testing the DI package against all aspnetcore projects locally is a bit of a hassle too. I'm working with @github on this and perhaps worst case we could merge this, and test off the published package from merge, and if problems occur then revert accordingly",0,0.5
"Thank you for pointing out potential areas of improvement, let's work together to strengthen the code, @github.",0,0.5
"Thank you for pointing out the typo, @github. Let's make sure it's corrected.",0,0.5
"Thank you for the debugging advice. I've spent few days trying comparing dasm files. It is very hard for me to tell what is exactly wrong, but I found some suspicious facts",0,0.5
"Thank you for your effort, remember that time spent learning is never wasted. Keep going! - @github",0,0.5
"Thanks for catching these, I followed Sebastian's advice about removing the [Introduced] attribute and removing the messages that don't give us much info in the Enums.cs file but not this one. If the documentation does not give a good method to use instead, would I just clear the entire message for these as well? In this case, there are other functions that can fetch assets using different types of parameters. Should I say something along the lines of ""Use other fetchasset methods""",0,0.5
"Thanks for the notice & discussion! TIL 😄 , and it makes a lot of sense",0,0.5
"Thanks to Pobst, it should go through here now: #url",0,0.5
"Thanks, @github.  Not stupid questions.  We handle merging.  I re-ran the failed leg and it passed.  Thanks for the contribution",0,0.5
"Thanks, @github",0,0.5
"Thanks, actually refactored this a bit.  I'm a bash noob so I'm learning quite a bit.  Still testing, but could use another review shortly",0,0.5
"Thanks, chet",0,0.5
"Thanks, seems like there are actually several interesting aspects",0,0.5
"Thanks, this has been such a pain point",0,0.5
"Thanks. To understand worst case, can you try counting a long string of all a's with a pattern that's just a single a",0,0.5
"That being said, I don't think there is anything that is wrong about having two rundowns happening at the same time. You may end up with duplicate information in both traces, but the runtime shouldn't run into any issues. The reader might need to be updated to handle duplicates if it doesn't already",0,0.5
"That being said, it works how it is and I don't think it's a terrible user experience. I would just like it better if I could open one connection. I don't think it's bad enough to try and make us change it when we've already shipped it",0,0.5
"That can get tricky. This requires the state of the outs to be valid and that isn't always the case for out params of native functions. I can recall hitting older Win32 APIs that left outs in a dubious state, but I doubt that is any issue any longer",0,0.5
"That first parameter being #code hits me 90% time when I use it, because I forget to pass #code here and then get stupid behavior a I have args shifted. This helps me a little bit, but I'm ok to revert it or to do something else, if you have an idea",0,0.5
"That gross #code cast is gross, but it could not be prevented, in order to keep common signature",1,0.5
"That is how I am thinking of this feature. There are cases where the compiler can definitely determine if the user is doing something wrong, but also where it _might_ be doing something wrong. The [#code](#url) is another example. If a user calls #code and #code is known to be ByRefLike, the compiler could issue a failure. However, if #code isn't know at compile time then it would be up to the implementer to have handled this appropriately using something like the proposed intrinsi-fication of #code in this document. The updated #code would look as follows and handle the case at runtime. The other APIs in question would have similar checks",0,0.5
"That is true. The #code calls are really a kludge to deal with the existing workflow. The question is... do we take the baby step of getting everything to the chromium one first, even if it's ugly, then make a follow on to convert the ugly ones into a less ugly pattern? Or do we skip the first migration and just go straight for the second",0,0.5
"That is, is it due to #code or is it due to bad branch prediction",0,0.5
"That link documents the rough structure. But symstore.exe is really the only thing that knows about how any of that actually is. If you were going to try putting it directly in that format, I'd just look at what it takes to shell out to it",0,0.5
"that looks insane, does that just set to #code to true the first time it's called then we just check #code",1,0.5
"That might just be a case of ""play stupid games, win stupid prizes""",1,0.5
"That said, I'm not sure if it would still work if it all happens within the same assembly",0,0.5
"That solution really works well, great job! #code",0,0.5
"That sounds like additional customization users could do based on the incredibly poor ""documentation"" in <#url>.",1,0.5
"That wasn't my understanding on the docs on INotify, though I'm far from a Linux expert. The way I read the docs they were talking about pathname which I read to mean only the directory passed in. If a file within that directory is a symlink outside the directory are you seeing that it's still watched? I guess child directories would be followed since those require independent additions",0,0.5
"That way, we can preserve a maximized view's state across #code calls. We can even have tests for this. The problem is what happens when the user resizes the splitview until it reaches the sum of all minimum sizes: at that point no view will be maximized any more. So, growing the splitview from then on would make it grow all views proportionally. This is why using layout priorities would be benefitial here. But we can also live with that behavior",0,0.5
"That will not help for the case which imho is also the most likely one: you see a tree from 1 extension and interact with it multiple times with multiple items in short time frame. Chances are high that if the opening takes long, the context we set is always wrong",0,0.5
"That's a good question as this routine would now produce a unique key. I think the ""worst"" that would happen in that case is we end up with a duplicate test, rather than the worst case now, being tests that should be unique, aren't, and the tests fail with somewhat obscure errors",0,0.5
"That's a lot of files to manage, boost is indeed a powerful tool. #url",0,0.5
"That's fair, it could be made internal but it feels a little gross since users can new it up and use it in their own factory. Though that's gross as well",0,0.5
"That's how I felt on Friday. In my case, I made the reverse mistake: I was correctly adding both C and D to B's transitive references, but forgot to update A too",0,0.5
"That's impressive work with #code, @github! Keep up the good work.",0,0.5
"That's partially correct: you also need to use normal parenthesis instead of curly braces.",0,0.5
"That's the wrong extension point, users should be passing headers via the new option. If they want to do special things in their custom http client then they can do that in send",1,0.5
"That's why I put up this PR, I'm not sure about it",0,0.5
"The ""fast"" version has a single branch just for the #code check, then it simply does a compare with the method table pointer and sets the flag, whereas the other handles each condition separately 🤔",0,0.5
"The [""BellStyle"" setting](#url) was not set explicitly, thus resulting in only a sound (which was not hearable since I turned of all system sounds)",0,0.5
"The [more detailed docs](#url) expands on it: ""SQLite uses filesystem locks to make sure that only one process and database connection is trying to modify the database at a time. The filesystem locking mechanism is implemented in the VFS layer and is different for every operating system. SQLite depends on this implementation being correct. If something goes wrong and two or more processes are able to write the same database file at the same time, severe damage can result",0,0.5
"The #code overload is both internal and obsolete - which makes the obsolete redundant because nobody will see it, and you can just remove the obsolete attribute",0,0.5
"The #code target only calls build if we are running from the command line. In the IDE is does NOT call #code. Our tests run as if they are in the IDE, so a call to Build will be needed",0,0.5
"The above changes were to account for #code possibly being null, but not sure if all this was neccessary",0,0.5
"The above code is sh*t, and it generates shit code",1,0.5
"The above one, the lambda-ness of it is getting insane. There are so many ({{({()})}}}) that I think it will lead to mistakes and issues more than separating out the method. You should prescribe a separate method if possible at this point",1,0.5
"The added code follows the #code method recommended by [Windows Blog](#url), which is the minimal code necessary to implement this feature, and has _not been integrated into the Inno Setup script_. I hope that these codes can be used as an inspiration, and the VS Code developers would find out a sensible way to achieve this feature",0,0.5
"The added codes are located at #code, including an action handler, a minimal sparse package manifest, build script and setup script",0,0.5
"The alternative IMO is to choose (or combine) one of the ReplacePattern implementations, move it to vs/base/common/search.ts (or perhaps .../replace.ts) and tweak the small handful of callers",0,0.5
"The analog here would be that if you do a test for some negative value of Length, then we expand its value domain to include negative values",0,0.5
"The arrow function is well-documented, but we need to provide annotations for the assert declaration as well.",0,0.5
"The benefits as I personally, subjectivelly perceive them",0,0.5
"The BigInt Class' constructors are all conversions to other datatypes making it inefficient and limited while BigInt *already* has a method coded in which uses *string* input **and is really what you should use when actually utilizing BigInt** called the #code method. The issue of the type conversion is *especially* magnetized for BigInt because of how it was intended for and why it was made, as the official microsoft documentation of BigInteger states (#url)",0,0.5
"The build failures look to be on master, too: apk sizes, tls tests, designer, libZipSharp/DotNetPackageXASdkProject test",0,0.5
"The case when recovery is triggered is rare, and is not a path to be optimized.  If the AV blocks for a long time after writing each file, then the recovery will need to wait for it. Still, it is not expected to take the full minute after each file is written",0,0.5
"The cases where macOS failed, it seems like #code. So how would this class know to check if the files exist in that case",0,0.5
"The change itself is fine, but should go in a different PR, it has nothing to do with sprite kit :smile",0,0.5
"The check done on the epoll thread is speculative. The value that is checked is updated under the lock, and since the epoll thread does not take the lock the value read may be incorrect. It is very unlikely to happen because a wait of any sort would typically involve a memory barrier (often even if it does not actually end up waiting), and the value read would be at least as recent as when the epoll wait was released. Even if the wait did not block, it is possible that (if it doesn't involve a memory barrier directly) the call sequence involved would involve a memory barrier of some sort. Nevermind the estimations on memory barriers, the fact is that at worst we are relying on the latency of processor cache consistency here, and how bad that can be depends entirely on the processor. Some old (especially arm) processors don't have any sort of cache consistency and they rely entirely on software to do the right thing. When a processor has cache consistency the whole idea is that it shouldn't take an inordinate amount of time to make caches consistent, otherwise it would defeat the purpose. For example, using #code to exit a lock relies entirely on processor cache consistency latency for it to work reasonably well. My stance remains that considering that the alternative is not functionally incorrect, this should be good enough for the purpose. That is up for debate though, we can sacrifice some perf to guarantee that sync operations are signaled on the epoll thread",0,0.5
"The code has shown significant improvement, @github. Thank you for your efforts in making it better.",0,0.5
"The code looks great, but we can always strive to improve. Your input is valuable",0,0.5
"The code may need some updates due to its age and complexity, @github. Let's work on modernizing it for better maintainability.",0,0.5
"The code passes all the tests, which is good. Additional tests might be useful.",0,0.5
"The comment at #code explains a bit of it - msbuild calls into these members really randomly, and one has to be extremely careful to not accidentally hit a recursion loop",0,0.5
"The comment is also out of date, so it can be removed too",0,0.5
"The commenting out does look gross, I'm OK deleting it 😄",1,0.5
"The constructor thing on the collection is gross, but this works pretty much like what I expected",1,0.5
"The conversion does not change the representation of the value, but the value will not be reported to subsequent garbage-collection operations (and therefore will not be updated by such operations)",0,0.5
"the counter name says ""pause time"", the API says ""GC duration"". for BGCs, these 2 are very different. the time between BGC start and end could be long but only a small portion of it is paused",0,0.5
"The crystal balls of the TypeScript magicians foretell the coming catastrophe, and no one is spared",0,0.5
"The current interface name (#code) doesn't express what it does (and why it exists) very well; the classes implementing it actually have several 'native' views. What this is _really_ saying is ""of all the native  views that make up this renderer, here's the one that makes sense as a tab stop""",0,0.5
"The current performance is below expectations. Enhancing the performance of nested context-sensitive function calls would greatly benefit the project. Your insights on optimizing this process further would be valuable, @github.",0,0.5
"The designer tests keep failing on NuGet restore, I think we can ignore",0,0.5
"The downside of going all the way to a ~2 billion right away, is that for output data that is around 1.1 to 1.5 billion, we are over-allocating by quite a lot (even if that is relatively fast because we only resize once, it isn't very memory efficient). So, the current approach of incrementing by half-way between current and max, has some benefit there",0,0.5
"The elastic annotation is added by #code which is called from the separated list constructor, so avoiding that by preserving the existing comma tokens solves this, and is much easier to boot",0,0.5
"The first behavior seems incredibly insane, so having the default for most variable assignments be #code is good style",0,0.5
"The first indirection is done on #code, the second on #code and after the change they have different VNs, so too hard for #code. Probably that behaviour is responsible for other uneccessary null checks, I will look for an exisitng issue tomorrow",0,0.5
"The first message I wrote was “**Spread** produces a tuple type...” but I wasn’t sure how I felt about it since the error could appear far from the actual spread via instantiation. I guess I can delete the “Type” variant, it just felt wrong to call a type an expression",0,0.5
"The first three suggestions were not accepted, leading to some frustration. It may be beneficial to revisit and consider these suggestions in the spirit of collaboration.",0,0.5
"The game is currently in a state where changes are needed to improve it, @github. Let's collaborate on making it better.",0,0.5
"The grid/splitview can't modify priority, they only read the value. The views themselves set it. The user of the grid (EditorPart) would coordinate across its views and set their priorities accordingly",0,0.5
"The heuristic is ""using a non-thread-safe instance concurrently is allowed to corrupt that instance, but nothing else"" (there's a little bit of fuzziness there, e.g. abusing MemoryStream over a provided buffer is going to corrupt the underlying buffer, but that's OK, you told it to)",0,0.5
"The indentation is always correct at 4 spaces (the only real exception in C# code is LINQ queries). Others are occasionally acceptable as well, but 4 spaces is never wrong",0,0.5
"The initial logic is clear, but refactoring could make it even clearer.",0,0.5
"The issues were fixed",0,0.8
"The lambda, however, isn't an implementation detail. It gets set in [*public* constructor](#url). And that leaks the information that the registration should somehow work with Nullable #code 🤷‍♂️",0,0.5
"The last three are being ignored by Orca because the children being added are static text leaf nodes. Static text leaf nodes are extraneous objects which Orca always ignores by design. It's a long story and not limited to live regions. But changing that behavior in Orca, even if just for live regions, would probably break more things overall than would solve here",0,0.5
"The long wait time can only happen if the rename succeeds close to the 500th iteration for each file. That is, when there is a real failure with EACCESS - the extraction aborts after the first file (after 50s)",0,0.5
"The main benefit is to reduce the size of collections stored on the disk. I had a hypothesis that for HDDs,",0,0.5
"The main idea behind ConHost CMD Mark Mode is basically that as long as <kbd>shift</kbd> is held, the 'start' endpoint is static/frozen/held",0,0.5
"The main issue I currently see is similar to what you mentioned, the #code method lives in user code so that means it has issues such as #code and what if someone has a library that uses GetProxy and they also use GetProxy from their own code? There will probably be a compiler error. This wouldn't be solved by making it internal because ""internals visible to"" is a thing",0,0.5
"The main mechanism we have for issuing Disable commands is the IPC server, which currently is single-threaded. While not ideal because it is implicit, we have an implicit serialization of IPC commands",0,0.5
"The main SendAsync method is registering with the CancellationToken to tear down the connection/stream should cancellation be requested at any time before all the response headers are received, and the implementation enforces that the response content is fully sent before that point",0,0.5
"The maximized state isn't preserved across layout calls. If we fix it, we don't want to change the default spltiview behavior, but add/modify an option. What if we have a [different type for #code](#url)? Like",0,0.5
"The menu action is handled by C++ code implementing the COM interface, while currently for older versions of Windows this is achieved by the installer to directly write into registry. So the COM implemention directly reads the keys from registry to present the icon and determine the executable file path, to keep it simple and stupid. Perhaps this approach needs further improvement",0,0.5
"The native implementation you added currently doesn't write to the status info on error, which means a caller could see statusInfo containing garbage. This function should respect the #code and guarantee that statusInfo is initialized, either ensuring that the P/Invoke always does so or here default initializing it (#code) before calling into the native code",0,0.5
"The new way would be to make the ""best"" patterns (remote+branch combos) then try to #code for each of these patterns. Best case, the first pattern returns a successful branch, which should only be a few (I think I've seen 2 or 3 seconds max) seconds. Worst case, we test all patterns (likely less than 6)",0,0.5
"The old way was to get the world using #code for a commit then do filtering and sorting based on the ""best"" remotes and branches. For microsoft/vscode, this always takes >10 seconds",0,0.5
"The older Begin/EndAccept methods allow for combining accept and receive operations in a single operation. However, the API design could be improved to reduce unnecessary allocations.",0,0.5
"The one performance test that failed, I don't see anything related to this change",0,0.5
"The only converter that can not be retrieved using reflection is UriTypeConverter as System.Uri is NOT attributed on .NET core 6 (even though System provides a UriTypeConverter that we should use now that we replaced our own base TypeConverter type by System.ComponentModel.TypeConverter. Side note, System.Uri is attributed in the net framework profile, go figure). so why do we whitelist ColorTypeConverter and EasingTypeConverter in BindableProperty.cs is something that need clarification",0,0.5
"The only thing which I can think of is, this is too hardware specific and while passing '0x0000271000000001' int64 parameter as int32 parameter to mono_is_power_of_two function, power is somehow making it to power of 2 which is not happening on x64",0,0.5
"The other thing I don't like about that is that it's too subtle vs a call that says ""This will not capture the execution context"" and the code sucks a little bit because. You know what I really want? #code. That would work here as well",0,0.5
"The package was produced",0,0.8
"The PR allows method contexts to individually select compression/no compression so even if we don't want it for the smaller collections, we could potentially use it in case we want to have much larger collections in the future",0,0.5
"The previous version was working wrong with StackAllocation enabled, for reference types #code always returns #code that is not how many bytes it takes on the stack, to see how it was fixed search for #code",0,0.5
"The problem is that the order matters... if a place wants to add '-L' and '/path/to/foo', those arguments have to be kept in the same order, and a HashSet doesn't preserve order",0,0.5
"The problem with ""IsMemberAccessExpressionName"" is then you need ""IsMemberAccessExpressionExpression"".  I think that reads terrible.  So instead i have ""IsNameOfMemberAccessExpression"" and ""IsExpressionOfMemberAccessExpression""",0,0.5
"The public API explicitly caters to this, namely the distinction between ""Project.ProjectReferences"" vs. ""Project.AllProjectReferences"". I don't now if this is a useful feature anymore (at one point MSBuildWorkspace used it I think) and sure wish it didn't exist, but I'd say if we're going to change that let's change that specific thing in our 16.7 feature branch just to get that behavior change in early in a cycle so we can get time to find out what we broke. The rest of this PR is at least changing things we didn't _try_ to support. :smile",0,0.5
"The situation may seem overwhelming, but we can handle it together, @github.",0,0.5
"The small fixes are still great too! The selection dismissing for example - that's a great example of something quick that just needed someone's eyes to find the right place to fix it",0,0.5
"The solution proposed seems extensive, @github. Let's consider alternative approaches for efficiency.",0,0.5
"The symbol is neither from source nor metadata? @github has convinced me this isn't insane, but I'm wondering if this needs to be doc'ed somewhere",0,0.5
"The terrible naming aside, the above has a more meaningful call pattern. We either want a path, or we want to make it so the project doesn't have one. Null may be how we rationalize that, but it's just a well known magic value. It doesn't tell you, for example, if that ends up succeeding and having some default value when you pass in null",0,0.5
"The test failures that show up (link all / DotNet tests) are different issues, and at least the DotNet tests seem to be from this PR",0,0.5
"The thing i see here is that now these events will fire before they actually happen on the native . Let's say i m clearing something on disappearing, could it happen that the page is still on the screen because the platform code didn't happen yet? Like it didn't awaited DismissViewControllerAsync",0,0.5
"The thing is we don't actually have to, because I'm calling [#code](#url) first (in #code) which ends up in #code which we already override for all our #codes",0,0.5
"The thing that this solves is selecting between a GET endpoint and a POST endpoint, etc. It seems obvious someone layering a CMS on top of MVC needs this functionality. Maybe I am just being stupid and this needs to be *built-in*",0,0.5
"The things that should be exclusive are still wrapped in the spin lock, e.g., EP config changes, non-volatile state updates",0,0.5
"The TypeScript generating this was #code. Garbage in, garbage out",1,0.5
"The unexpected ""black"" spots are worse though. That's because those are colors that appear to be a medium shade of gray, and thus get mapped to index 8 (bright black), but in the _Solarized_ scheme, bright black is the darkest color in the palette, darker even than dark black. Without knowing the palette, there's nothing we can do about that",0,0.5
"The upshot of this is that we create an ""island"" block that is only ever jumped to and from (#code)",0,0.5
"The variable names you chose are very intuitive, enhancing the readability of your code.",0,0.5
"The whole thing is terrible behavior, but I'm not totally sure about special-casing a no-statements file. What about a #code file, or a file with a single function? Going from an empty file to a file with a single statement seems bad and then receiving an error doesn't seem ideal",1,0.5
"The worst offender would be the second example though, where the #code checks seem completely redundant, but as mentioned above I guess we'll just have to wait for the runtime to support the #code prefix for that (and that seems like a separate issue as well)",1,0.5
"Then 'generator parameter' is used ot indicate you're creating the parameters for hte generator.  And eventually that flag bubbles down to when you're doing the computed properties.  And, within those computed properties, yield is apparently disabled.  Meaning you can't use a yield expression inside a computed property name (which is not a terrible thing IMO)",0,0.5
"Then again, I'm not sure if this will be an *actual* problem in practice",0,0.5
"Then when it retries, I think it could start with a fresh empty directory",0,0.5
"There _is_ a bundling step today - the TS compiler itself just performs it (stupid concatenation of namespaces, plus a manually added #code appended to the bottom). I already have a second branch based off that one that reimplements our builds in terms of modules and indeed, it does have a proper bundler to produce the same outputs",0,0.5
"There appear to be some code errors in the current version. Let's work together to address and fix them, @github.",0,0.5
"There are a couple places where I'm using that API in the MVVM Toolkit, and they're indeed in a performance oriented type",0,0.5
"There are always opportunities for growth and improvement. Let's collaborate to find solutions that work for everyone, @github.",0,0.5
"There are cases where ExtendedDefaultPolicy doesn't inline what was inlined by the previous inliner - I tried to avoid it, but there were cases where I'm not sure we should inline, e.g this call #url is inlined despite being quite complex: #url",0,0.5
"There are no new tests, this is terrible",1,1
"There are opportunities for improvement in the code, @github. Let's work together to ensure it meets our standards.",0,0.5
"There are so code errors, this is terrible",1,1
"There are so many failures, this is terrible",1,1
"There are some diffs due to PMI trying to instantiate #code with unsupported T (e.g. char) and inliner helpes here too, e.g. #url",0,0.5
"There are some gross cmake hacks in here, too, because I don't really know cmake",1,0.5
"There are some interesting examples where inlining leads to smaller size, e.g",0,0.5
"There are some new test failures, this is terrible",1,1
"There is also a very clear reason for this staggering improvement, if you are aware of two key points",0,0.5
"There is always room for improvement, @github!",0,0.5
"There is no posix primitive for us to use here, I think? Same reason abandoned mutex detection isn't possible without coreclr's extremely complex workaround. I'm not aware of any way to stop someone from rm'ing a file I have open. The only thing I could come up with is grepping lsof to find anyone else with the lock open, but the performance implications of that are profound and it's gross (even though the documentation suggests that lsof is meant to be used this way)",0,0.5
"There is one ***huge*** issue with BigInteger as it stands currently, its default constructors",0,0.5
"There isn't really anything in #code that isn't in #code and #code is pretty trivial (there is nothing there that isn't a simple translation over - #code to #code, #code to #code just need to double check edge case handling, #code to #code + #code + #code in the worst case)",0,0.5
"There may be a better approach to handle this code that avoids the IDL/COM concerns. Perhaps converting #code to a CppWinRT module could be a solution, @github.",0,0.5
"There may be challenges in implementing that approach, let's explore alternatives together.",0,0.5
"There seems to be a mistake in the code logic, @github. Let's work together to address it.",0,0.5
"There seems to be some conflict here. Let's try to address it in a constructive and respectful manner, @github.",0,0.5
"There should be no need for shift. Ideally, we could just ""subtract"" the modifier key from the keybinding. But would that be a difficult behavior to explain/understand",0,0.5
"There's a fundamental problem with this idea: while it should be fine for on-device apps, this will break the Designer, as the Designer does not (yet?) create or use typemap files",0,0.5
"There's a helluva lot of difference between ""cache"" and ""Dumpingspace landfill we take the liberty to rip off from the users. Let's fill it with excrements and never clean it, then we call it a _cache_ and go MUAHAHAHAHA when the users diskspace is completely consumend so it can't even update neither VS nor Windows itself after a while!""",0,0.5
"There's no async monitoring APIs for taggers in general in Editor, other than the event that is raised. For Apex, the go to is usually a retry loop or timeout, but this is usually quite flaky",0,0.5
"There's no need to create an issue",0,0.8
"There's only an issue when you can cause the work performed by the server to grow without growing your own work. (For example, if you have an input where you enter a number and the server calculates the factorial or fibonacci of that number as an example), but in general it's ok if you have to do more work to cause the server to do more work, even if the scale is different. At that point, its up to the server to establish the appropriate limits of what it considers acceptable",0,0.5
"There's unfortunately a lot of tricky params/optional cases that make it a bit tricky to get right,",0,0.5
"These assume you meant to write a type annotation but don’t say what you _did_ write. If our assumption is wrong, it’s even more confusing. I’m also a little concerned about the interpolation of the object #code being unwieldy (not uncommon to destructure a dozen props in a React component, for example)",0,0.5
"These comments are seriously important and really ensure that people reading and maintaining the code know what's happening.  I can't look at this line and have any idea why it's doing what it's doing.  Previously, i would at least have *some* idea why we had this code and what cases it was trying to support.   #Resolved",0,0.5
"These intersections do make the intellisense popups uglier, but they're required for correctness",0,0.5
"These null values are needed for my stupid simple injection. If there is no default, it will try and inject the #code. We probably need to fix this, but somehow didn't cause issues with the MS DI. Might be because it used the other ctor",0,0.5
"These relations are insane! Everything looks good to me though! Perhaps remove the newline before the curly braces when starting interfaces though for style, but your call",0,0.5
"These tests use extended unicode escapes, which we only even parse when #code is es6 or above. So we parse this test as garbage and emit corresponding garbage",0,0.5
"They are useful **sometimes** :) But not in situations when you're supposed to specify a length of something, a size of something etc - that's where they are *insane* :)",0,0.5
"They seem fairly fast locally, but yes, they should",0,0.5
"They weren't ""actionable""",0,0.5
"They're mutually exclusive. After a quick chat with Dustin, here's a new approach",0,0.5
"They're only being used on values being of private types, coming from private fields, and guaranteed to be correct due to the implementation of the type itself, so the only way this could break is if a dev actually tried to mess up with the internal fields using reflection, which is something that not even types from the BCL guard against, as far as I can tell (eg. #code will break the type safety too in the #code property getter if a dev used private reflection to store some arbitrary object there)",0,0.5
"Thinking about it some more, would it really be a breaking change? I know almost everything can be considered breaking in a mature framework, but this maybe isn't so terrible to just add precision",0,0.5
"Thinking on the vector latency of 3 clocks; and perhaps same for #code; methods seem to start using the highest stack values first, whereas current am clearing the highest values last. Might it make sense to reverse the clearing order",0,0.5
"Thirdly, your dog is a bit of a bender",1,0.5
"This autogenerated file seems a bit confusing, what do you think we can do to improve it, @github?",0,0.5
"This benchmark tests #code when called in a loop (a typical use case) for various haystack lengths, and it alternates whether the first needle or the last needle is discovered. In particular, this shows how the original #code logic when called in a loop devolves into an #code operation if the last needle in the collection is the one that keeps being found, and how with the new logic the loop maintains an #code worst-case performance guarantee",0,0.5
"This block of code may seem unassuming, but a comment outside the macro could provide valuable context on its purpose @github.",0,0.5
"This branch isn't quite finished, the #code portion is broken",0,0.5
"this cast was failing, and that's why clearing selection wasn't working. We need to find a better way to fix this cast, for example implement a Interface on the SelectableItemsViewAdapter",0,0.5
"This check can be done for #code, but not for #code: how do you check that the package is already installed?  ¯\_(ツ)_/¯",0,0.5
"This code could use some improvement, maybe with some help from #code - @github",0,0.5
"This code is great, you definitely got this",0,0.5
"This code was terrible, I'm so happy you made it better",1,0.5
"This could be fixed with a VS-wide setting, with user-interface, allowing users to redirect (and move, and clean) this directory, but the way it's currently implemented my position is that this is malware",0,0.5
"This could use some more engineering",0,0.6
"This decision doesn't apply to covariant return case because there is no backward compatibility scenario that involves covariant returns feature, compat council makes decisions about compatibility scenarios. Covariant Returns is a new feature, we never emitted anything like that before, with or without an override. And, I am pretty sure that with suggested changes, we wouldn't emit a MethodImpl for covariant return case in case of the ambiguity if runtime doesn't have the fix. If you disagree, all you have to do to prove me wrong is to provide a concrete test case failing with suggested changes",0,0.5
"This depends on if we are signing with ApkSigner or not. #code files MUST use ApkSigner, #code MUST not",0,0.5
"This diff simplifies the isJSConstructor function by removing unnecessary checks. Great work on making it more efficient, @github.",0,0.5
"This doesn't seem like a terrible idea, though are you cool if we punt that for the v1 at least? That seems like refactoring we could come back through on a second pass and do 🤔",0,0.5
"This feedback could be improved further. @github, let's find ways to enhance the quality of the code together.",0,0.5
"this feels like a terrible nit, but all the other options are #code style, so this should probably be #code, right",1,0.5
"This feels like fixing a bug in int.Parse and then commenting that ""it's needed for JSON parsing"". This is a core bit of code -- it shouldn't be thinking about very specific clients or something seems off",0,0.5
"This fixes another potential problem where things can wrong in the original code. For example, the original code can get into infinite loop with corrupted data here. We will just exit the loop now",0,0.5
"This function performs as expected, but there is room for code simplification.",0,0.5
"This guy is such a liar, i hate him. He is evil",1,0.5
"This has just evolved from old Windows-style C code. Thus the return code focus and no real exceptions until recent-ish additions or modifications. That's why everything is so mixed. But we're ready and willing to adopt exceptions now as long as the console  API functionality is maintained to the perspective of clients (within reason). Thus if you want to close this issue/PR as ""dumb/pointless/outdated"" and transform the work into something that is overall prettier and more faithfully represents C++ and utilizes the Chromium math libraries to their potential... I'm cool with it",0,0.5
"This has way too many errors",1,0.5
"This imports #code, so I think it would get the value you want",0,0.5
"This is _potentially_ a deadlock risk: if the UI thread is unavailable to switch to, we're still holding the lock, and so further notifications will get blocked up. Whether this is a serious concern is hard to say -- if we're wrong we'll at least get a nice hang which should be easy to debug. :smile",0,0.5
"This is a case of ""play stupid games, win stupid prizes""",1,0.5
"This is a duplicate of this issue",0,0.8
"This is a little gross but the old obsolete API is sync, and IIssuerNameService is async only",0,0.5
"This is a Mono-specific codepath, so do different rules apply",0,0.5
"This is all interop. If you give it garbage native data, that's on you, and behavior is undefined, just like with strlen.  Most likely it'll crash",0,0.5
"This is almost certainly not the right place for this comment, but sorry:",0,0.5
"This is an amazing piece of code, great work! #code",0,0.5
"This is because the ""popcnt"" check will cover everything except #code (#code)",0,0.5
"This is build time, but I agree this error message is terrible especially in light of the new convention-based inference of parameter sources. I want to track more information about the parameters when building up the RequestDelegate arguments which will lead to better errors, but I've already started on the culture stuff so I think I'll do this as part of this PR",0,0.5
"This is code moved from elsewhere, so it's been working fine, so I don't want to touch it too much",0,0.5
"This is cool, I didn't know we could do this",0,0.5
"This is fine (and convenient) for the majority of apps, but it is also a trap for the minority of developers who build multi-window apps. The worst scenario is when that developer takes a dependency on a library that uses these APIs",0,0.5
"This is good software",0,0.8
"This is kinda gross. This namespace doesn't exist in Ignitor, but I could make an empty one if that's cleaner",1,0.5
"This is not necessary, but just a suggestion for the following reasons",0,0.5
"This is now fixed.",0,0.5
"This is on the blacklist, how could you miss that",1,0.5
"This is on the block list, it's always a good idea to double-check",0,0.5
"This is one scenario where we use it a lot (option not set, option set to true, option set to false)",0,0.5
"This is quite an insane piece of code, @github! We can maybe simplify it together.",0,0.5
"This is really great, @github! Thanks for figuring out so many of the tricky details (e.g., around parsing) here and building it in a clean way",0,0.5
"This is really gross and is screaming ""IDL"" and/or ""COM"" at me. Maybe #code just needs to become a CppWinRT module and be activated that way",1,0.5
"This is really weird, I can't reproduce.",0,0.5
"This is so bad, change #code to #code",1,1
"This is something I've actually talked about quite a bit with @github and @github too in the C# Discord server. Given the exact specifications of this type and the way it's implemented, using this trick should be perfectly valid, as all the various constraints and unsafe casts will always be guaranteed to be valid, so there will never be a type violation in doing so. This is really just a workaround for a lack of proper support for basically doing the equivalent of ""try to invoke this delegate with these inputs, and just throw if they are not valid"". With the exception that here we already know the inputs are valid, so we don't even check",0,0.5
"This is stupid, everyone knows what whitelist means, and ignorableAssemblyList means nothing on the first read",1,0.5
"This is terrible, see: #url",1,1
"this is the meat of where things changed.  unfortunately, the diff is terrible.  effectively teh logic is pretty simple",1,0.5
"this is the meat of where things changed. unfortunately, the diff is terrible. effectively teh logic is pretty simple",0,0.5
"This is the most appealing idea. Rather than having flags like IsDebugger and IsImmediateWindow that control random behaviors, capturing those behaviors in options is a good idea. I'll try this one out",0,0.5
"This is the only one I didn't address, I agree I would rather use #code, too",0,0.5
"This is very clever, and I like it. It looks like it won't harm performance, but I do think that some caution is called-for around all the thread hopping",0,0.5
"This is wonderful work. I will mention this tomorrow",0,0.5
"this is yo momma speaking, please stop being a nerd",1,0.5
"This is, unfortunately, how #code types work. There can only be one active value, unless you do explicit work to make it support multiple values",0,0.5
"This isn't incredibly urgent. But, might be nice to get it into 2.1.28 if ProdCon hasn't reached this repo by the time the changes are approved and validated",0,0.5
"This just ""feels weird""",1,0.5
"This just feels a bit unusual, but it's an interesting approach @github. :)",0,0.5
"This looks insane on GitHub, but whatever. :)",1,0.5
"This looks like a bug in the xliff-tasks, I suggest trying to create a small test case and report it to them (or use the small test case to track down the bug in xliff-tasks and just fix it)",0,0.5
"This looks pretty much like what I did",0,0.5
"This looks similar to some of the file locking issues we see on the bots, since it passes for me locally, let me do a retry",0,0.5
"this makes it seem like the preview contains certain VB core methods that the stable does not, which is odd",0,0.5
"This makes the pin ""templatable""",0,0.5
"This means that if the assumption about inputs is correct, then the ""expected"" case will be you always do two compares and in the case where it's wrong, the first check results in an early exit in more cases than the ""edge case check""",0,0.5
"This might leave a hole where the attribute could be used on methods which only violate type parameter constraints within the implementation, not in the signature. The user wouldn't be stopped from doing it at compile time but could get a runtime error. That might just be a case of ""play stupid games, win stupid prizes""",0,0.5
"This obviously only matters if #code is called multiple times per instance, which is exactly what's happening",0,0.5
"This often leads to memory leaks, and that is definitely bad code.",1,0.5
"This one could also use #code, sorry I didn't see it before",0,0.5
"This one is technically wrong. It suggests that pressing this chord _right now_ will activate this action, but what we're providing is more informative than actionable",0,0.5
"This one was having test failures that I was waiting on, but a new (weekly) version of the localization PRs came out which includes all the changes in this PR and more",0,0.5
"This optimization is not",0,0.5
"This PR unrolls #code/#code for ""half"" constant strings and spans in [0..32] chars length",0,0.5
"This program has a circle that follows the user's mouse cursor. When you click, it toggles between Sleeping and not Sleeping",0,0.5
"This proposal also doesn't expose the setter. In exposing the setter, there's a risk that someone will inevitably call the setter in #code and break the inheritance tree for #code. The inheritance tree is becoming more and more important, especially as we added in #code (a great example of #code inheriting from #code, and how calling the setter could easily break everything)",0,0.5
"This reduces terms like ""Looper"" (""wtf is a looper!""), replacing with a (hopefully?) more common term of ""message loop"", and also provides the callback method that won't be invoked. This should hopefully be useful for debugging/diagnostics",1,0.5
"This reminds me of another scenario",0,0.8
"This seems both safer/more defensive, and generally more useful (the second part at least, if it's not done already)",0,0.5
"this seems inconspicuous, but also, wtf is it doing?",1,0.5
"This should be a more ""context free"" error message.  We certainly *don't* want the stack trace dumped to the ""error"" output, as this is user hostile (wtf are they supposed to do with it?), though that said, what are they supposed to do when this task fails, *period*? :-/",0,0.5
"This should create a new solution for you",0,0.5
"This should work",0,0.5
"This solves a lot of issues",0,0.7
"This sounds weirdly specific, but not terrible",0,0.5
"This syntactic check is wrong. Note that this means that this method would stop adding casts to *any* type. For example, it would no longer be able to cast #code to #code",0,0.5
"This test name is wrong, this is about readonly members in a non-readonly struct",0,0.5
"this type seems pretty insane to me.  why not have it point at something like  that 'result' instance, instead of needing to explode all the values inline into it",1,0.5
"this was to appease github, which shows a terrible diff otherwise :'(",0,0.5
"this will cause an extra object allocation for every occurrence. we use this on every hover, and do not want to increase the amount of garbage we create",0,0.5
"this will not work.  #codes are often language specific.  So most will not be able to process diagnostics from another language.  Worse, they will legit just crash if given the wrong diagnostic language as they all assume they'll only get diagnostics from teh same language",0,0.5
"This will throw at runtime, but we need to start giving translation to these message",0,0.5
"This works, but it's pretty fragile: #code is allocated on the stack, but #code will save it away in a global var and it will be used only later in #code.  It will work as long as both of those calls are in this function - but will start pointing to garbage if this is ever refactored",0,0.5
"This would give the option to add this to the support libraries, and not have to build with a new (not yet released) Xamarin.Android",0,0.5
"This would need to be a _yet another_ type than the ""context"" object that is passed by the completion service to #code. I'd prefer not to introduce more of these. However, your point is taken. I was modeling CustomTags off of what we did with diagnostics, but perhaps that's not the best approach here",0,0.5
"This wouldn't work, If a character is sliced between two spans, this will return the wrong character count. For example, this will fail on something like new string('あ', 10000), returning the wrong character count as for each chunk, it will add an extra character as the character is across two spans",0,0.5
"Threats are unacceptable behavior, let's keep the conversation respectful, @github.",0,0.5
"Threats have no place in our collaboration, @github. Let's work together for the best outcome.",0,0.5
"Three interesting, potentially controversial, and likely terrible ideas came to mind while writing that previous sentence",1,0.5
"TL;DR: if we check the flag and it's not EOF and on the next line when we call Abort the flag is changed already - it is not much better than just calling Abort without any checks, is it",0,0.5
"tl;dr: Maybe the solution is for the user to use their screen reader's ""where am I?"" command rather than try to fix this in VSCode (et al.)",0,0.5
"To be clear the bug is in step 1. You can't update the state of a component from a background thread, which might mean that an explicit dispatching mechanism *is* needed in these scenarios. It's OK to do step 2 (notify the renderer to do work), but that's the only thing that's safe",0,0.5
"To be honest, the more I think about this the more I think the thing to do when the user interrupts speech and nothing has changed is to use the screen readers ""where am I?"" command. Because this use case can happen in web apps, native apps, etc",0,0.5
"To better understand the code changes, check out the explanation at #code.",0,0.5
"To get good behavior in typescript, your enums need to be 'const enum', otherwise it generates some really gross JS with runtime overhead. I didn't know this (thanks to @github for the tip)",0,0.5
"To improve clarity, consider renaming 'whitelist' to a more descriptive term that is easily understood at first glance. Let's work on clarifying the terminology, @github.",0,0.5
"To my knowledge the spec is not generated when you add the packages we add, so I think @github is right that we should reduce the timeout. I made it 5 seconds, which is still probably more than is needed, but not by an insane amount if you account for slow machines",0,0.5
"To quote a greater person than I am: ""You keep using that word. I don't think that word means what you think it means""",0,0.5
"To round off... please learn what ""cache"" actually means before using that word again",0,0.5
"To save more time for the open-source community, we recommend the maintainers of this repo to close this PR and ban this bot from further spamming",0,0.5
"To save more time for the open-source community, we recommend the maintainers of VSCode to close this PR and ban this bot from further spamming",0,0.5
"To summarise this digression on TypeConverters, here's a list of action points",0,0.5
"To test this currently, you would need: [MonoAOTCompiler.zip](#url)",0,0.5
"Together we can make improvements, @github! Let's consider moving these methods into KestrelTrace.",0,0.5
"Together, we can create a positive environment for feedback, @github. Let's communicate respectfully and constructively. #code #url",0,0.5
"True, but for all intents and purposes #code-native has 1:1 relationship with #code-managed. The native one has a pointer to the managed one (and vice versa). Also all of the functionality of managed ALC is implemented (indirectly) in the native ALC (lot of this is hidden in the #code which is embeded in the native ALC - and yes - that name is TERRIBLE and has to go :-), but that's a different refactoring)",0,0.5
"True, but that same argument apply to any generated code and optimization that are done. That includes the ones that are already present in that step: if you modify the generated Dispose then that code must be updated (or at least verified) to match",0,0.5
"True, that's the contract. We're also humans who make mistakes... in theory we'd check that all optimizations continue to work as expected after changing BindingImpl methods, but experience tells me there's a significant chance that won't happen",0,0.5
"Trying to clear out the PR backlog has been a personal quest of mine for a while. Since coming back from the holidays, I've been more distracted and just haven't given it the time it needs. I'll do better. I wanted to get the team to give me a second qualitative opinion on this particular PR during our team sync this week, but that got cancelled, (and now that I think on it, next week's needs to be moved too, @github). I'll summon the rest of the team this morning to see if they can give some feedback (when they wake up). Broader though, I'll try and be better about tapping other members of the team in on community PRs, and faster, so in the future you're not blocked on just mine and Dustin's time",0,0.5
"Two problems here. First, this appears to be crossing abstraction boundaries. AnalyzerDriver is logically in a separate API layer built over the compiler. Second, a consequence of this change would be to cause garbage to be retained unnecessarily long. The creation of a fresh semantic model was intentional",0,0.5
"Two reasons. First, using a strict equality check means that you're only testing one boundary condition: is the cursor exactly at the end of the buffer? JIT would still have to emit its own bounds check to make sure the cursor's not further past the end of the buffer or set to some garbage value like _-42_. The ""unsigned greater than or equal to"" check handles all of those checks using one comparison, and the JIT recognizes this pattern and skips its own bounds check",0,0.5
"UI code depending on synchronous parsing makes me sad.   might not be terrible to do this async, and pop in the checkmark when we know... (but that would add a lot of async compexity to these codepaths)",0,0.5
"uint options seems correct since a C# int is a C long, so a C# uint is a C unsigned long",0,0.5
"UNBLOCK ME OR I'LL GET MY LAWYERS ON TO YOU FOR BLOCKING MY CONSTITUTIONAL RIGHT TO FREE SPEECH""",1,0.5
"Under most conditions, when we are done with the Object we call #code, which handles all of the managed unwinding, including unsubscribing from the Element's #code event. At which point the Element no longer holds a reference to this Object, so we don't have to worry if the Element's property changes. And the garbage collectors are free to do their jobs after that",0,0.5
"Under the specific conditions we're dealing with in this PR, the garbage collectors decided that the Element and the Object could be collected, and started that process. We don't get any notification of this, so there's no opportunity for us to call #code and handle the unwinding. And we don't really need to - all the referenced objects are going away, so our managed cleanup wouldn't have any effect anyway. The only exception is this circumstance where the Element gets ""saved"" by a Binding turning a weak reference into a strong one. When that happens, we run into this ""partially collected/disposed"" scenario, and we have to account for it",0,0.5
"Unfortunately, I hit a wall as soon as I got the monarch window working because I needed to make the event async to handle switching to/from the ui thread since peasants on everyone except the monarch have different threads. This comment sums up my current thoughts and tribulations",0,0.5
"Until we have such an API, let's add it as a named constant here, similar to #code",0,0.5
"Update: still testing on my end, for some reason @github 's solution isn't working on my end.. Sounds like it is working for others though",0,0.5
"Updated the README to talk a bit more about this, actually. There's kinda two types of tests that we're skipping for now",0,0.5
"updated, thanks for the feedback",0,0.5
"Upon reflection, I realize that deprecating this may not have been the best decision. I suggest considering restoring it. There may still be value in this feature.",0,0.5
"Ups, i didn't noticed there were reviewers",0,0.5
"Urgh. Yeah, so there's 2 parts here",0,0.5
"Users who write longer #code text, but leave out #code because it was never visible to anyone before",0,0.5
"Using a #code element on each property, like this for the current one",0,0.5
"Using just #code, and trying again--it didn't work",0,0.5
"Variance = Out makes sense for lambda returns, but it feels wrong for implicitly-typed arrays",0,0.5
"VarianceKind.Out [](start = 92, length = 16)",0,0.5
"Verified, insane",1,0.5
"Voltage Transition | ~8 to 20 μs | Time required for a voltage transition, depends on the frequency",0,0.5
"VS stores ton of junk",1,0.5
"wait hold up what now? #code is a parent class of #code? That seems... backwards. So every #code instance has basically an entirely empty #code as well? Including, technically, a null #code? That seems like a gross layering violation",1,0.5
"wait uh, I don't think we need this. Win+down will minimize a window",0,0.5
"Wait, I had the parentheses wrong :-) It works nicely, thanks for the improvement",0,0.5
"wait, we definitely can't put #code or #code's in here directly -",0,0.5
"We all have different perspectives, and that's what makes us unique. Let's work together to understand each other. - @github",0,0.5
"We all have room for growth and improvement, let's work together on that journey. - @github",0,0.5
"We all have room for improvement, @github. Let's explore ways to enhance the code at #url.",0,0.5
"We all have room to grow, @github. Let's provide feedback in a constructive and helpful manner. #code #url",0,0.5
"We all make mistakes sometimes, @github. Let's learn from this experience and move forward positively.",0,0.5
"We all make mistakes sometimes, @github. Let's learn from this experience and move forward positively.",0,0.5
"We all make mistakes, @github. It's okay to ask for clarification.",0,0.5
"We all overlook things sometimes, @github. Remember, mistakes are part of the learning process.",0,0.5
"We already had a concept of #code but did't have the same for assets. I figured this would be an easy win, especially if you have large assets (like movie files)",0,0.5
"We already have the # instructions executed on a per-method basis, so it should not be too hard. For example, stupid and simple thing would be to just print #code here",0,0.5
"We also don't usually point this attribute to PRs at all, git blame will happily tell us when it was added. You could just delete the WorkItem attribute entirely if it's just wrong",0,0.5
"We appreciate your input, @github. Let's continue collaborating to enhance the code.",0,0.5
"We are engineers",0,0.6
"We are making the string marshaller types public, so the innovation that can be applied to them will be fairly limited",0,0.5
"We are now ignoring ""unknown"" errors. There are no tests for this, because these errors are unknown and therefor we don't know how to reproduce it, but we definitely should not be swallowing these",0,0.5
"We can add that later perhaps. For now, we probably shouldn't crash the process since the worst outcome of missing a case here is fewer warnings",0,0.5
"We can all contribute positively, @github. Let's focus on improving our code reviews for the benefit of everyone. #code #url",0,0.5
"We can def do this.  But team position (in the past at leasT) was that sanity coverage was covered by compiler.  i.e. new feature-work doesn't need to be done.  But ensuring existing features work fine (i.e. not crashing, not having a terrible user experience) needs to happen to merge into master",0,0.5
"We can find better ways to do things in the code, @github. Let's work together to optimize our processes.",0,0.5
"We can work on this together, @github! Let's enhance the code by moving this call into a local variable.",0,0.5
"We can't use indexed type parameters because (1) they don't have names, and (2) they don't have constraints (so the logic in AreParameterAnnotationsCompatible which simulates an assignment produces wrong values/states in GetParameterState)",0,0.5
"We certainly shouldn't embed the knowledge of ""assigned"" vs ""available"", but it feels like we can be guiding and flexible by rejecting digits and punctuation",0,0.5
"We could add another dummier search for #code as last step, if it can find some, it means the inlining didn't work for some reason and we could error on it",0,0.5
"We could remove the ""anchorMode: Hold"". But then there's no way to replicate a _similar_ behavior to that of ConHost CMD. :( I also think the concept of ""hold"" is still a good one, but the execution is the tough part ugh",0,0.5
"We could, if it makes a difference, avoid caching for #code (#code), since that is the most expected privileged user (which can use these calls)",0,0.5
"We could, if it makes a difference, avoid caching for #code, since that is the most expected privileged user (which can use these calls)",0,0.5
"We definitely shouldn't be returning false without doing anything",0,0.5
"We do warn the user if we can't change all of the call-sites, so the experience isn't terrible. I'm fine holding off on this work until we get feedback that document-wide isn't enough",0,0.5
"We don't even support anything less than API 19 now. So I'm not sure that fallback is even needed anymore, we should remove it and the #code statement as well I think",0,0.5
"We don't need to lock for the happy case where we have the value cached, the worst that can happen in the other case is that we retrieve/store the same value twice if two threads are racing",0,0.5
"We don't use it often (I think because people don't know about it), but if it makes things worse feel free to disregard this. It's sometimes cute, sometimes terrible",0,0.5
"We don't want to add view by view and skipping the layout until the end. This will still cause all the math to happen in the background. Plus it will expose a terrible #code API. As per comment above, we want a serializable Splitview which can deserialize in a single layout call",1,0.5
"We have an opportunity to enhance the CI process, @github.",0,0.5
"We have APIs that expose this enum (and the one below), so if we uncomment this, then every consumer of those APIs will get this warning (and there's no way to fix them except ignoring the warning)",0,0.5
"We have received reports of implementations of both Windows network filesystems and NFS in which locking was subtly broken. We can not verify these reports, but as locking is difficult to get right on a network filesystem we have no reason to doubt them. You are advised to avoid using SQLite on a network filesystem in the first place, since performance will be slow. But if you must use a network filesystem to store SQLite database files, consider using a secondary locking mechanism to prevent simultaneous writes to the same database even if the native filesystem locking mechanism malfunctions.""",0,0.5
"We have recently observed the presumably well-intentioned act of the author of this PR (@github), who has been spamming pull requests to many (~50) github repos, claiming to ``switch to gender neutral pronouns''. In reality, the bot performs a dictionary replace of gendered nouns and pronouns, and the outcome is questionable at best, and literally harmful at worst. See",0,0.5
"We have reviewed the changes in this PR. Most of the changed words are ""accidental gender pronouns"" - #code as a prefix of #code, or #code as a suffix of #code, and both examples come from test cases where inline comments are used to split words (like #code), and the PR wants to change them into #code etc.. These changes are obviously not helpful at all",0,0.5
"We just have 3 modes in increasing order. All mutually exclusive, but all useful to know when to show the selection markers and what trickery could occur. That also lets me combine #code and #code. AND it also gets rid of the historical term of ""quick edit mode""",0,0.5
"We may need to address memory leaks in the codebase, let's collaboratively find a solution.",0,0.5
"We might want to just compare #code, if we want this to work the same as #code: #url",0,0.5
"We might want to switch this back to what it was. Right now #code should only ever be called when #code is set, we probably want this to throw to draw attention to something being wrong",0,0.5
"We probably should make this a regular project reference, but you don't have to do that here -- we can do it later",0,0.5
"We recently moved to new build agents, and unfortunately some of our tests are timing-sensitive. I'll book some work for us to shore them up. Sorry about that 😄",0,0.5
"We seed the documentation for new APIs with XML comments.  Can you add XML comments for the new enum?  You can fill in the other comments while you're at it, e.g",0,0.5
"We should aim for constructive dialogues and avoid derogatory language, @github.",0,0.5
"We should aim to promote a supportive and respectful environment in our discussions, @github.",0,0.5
"We should aim to provide feedback in a positive and encouraging manner, focusing on improvement rather than blame.",0,0.5
"We should always strive for inclusivity and respect in our interactions, @github.",0,0.5
"We should definitely add a comment calling out this _insane_ margin, explaining that the icon will always have space reserved and what's going on here",0,0.5
"We typically prefer work (and pull requests) to be done in forks. It's fine for this PR, but if you could create the d16-7 PR using your fork that would be great! And we've branched d16-8 as well, so this fix needs to go there too",0,0.5
"We use it to let the solution crawler back off. We have logic to back of if we are editing our files (to avoid us causing lots of GC for example), but if say you're editing a Readme file or something else we don't want to be making that terrible",0,0.5
"We value a positive and professional environment for code reviews, @github.",0,0.5
"We woud need to check what the screen reader behavior is - does the TalkBack focus move with the keyboard focus? If it's inconsistent, we need to figure out what the desired behavior is there. If it's consistent, then I think this is an OK solution",0,0.5
"We, as toolkit owners, can use reflection to set it and/or use any other mechanism which allows it to be set and never unset",0,0.5
"We'll have to discuss expectations. If we want to add tests, then we'll need a list",0,0.5
"We're always fixing, hacking, and learning",0,0.5
"We're looking up another method I expect always to exist in the platform assemblies. If it doesn't, the entire world is insane and I'm fine crashing",0,0.5
"Weird, it looks like everything is getting skipped on the Fedora queue, though maybe I'm reading the tests tab wrong? For fedora I see only successful work items, whereas for for other queues I see work items & individual tests. @github is there a way to grab the testresults.xml files from the successful Fedora work items",0,0.5
"Well what I was hoping would happen is we'd either be using clamped math, in which case there wouldn't be any error return value, or we'd be using a form of checked math that threw an exception, in which case the error handling could be dealt with neatly in one place (instead of every single expression having an error check on it)",0,0.5
"Well you are ridiculous, in fact I suspect that you are Calton, please block me, I dont care",1,0.5
"Well, “normal” cpp code does not use HRESULT as its return value and HRESULT is exactly what THROW wants. Maybe we just can not have the best of the both worlds, huh",0,0.5
"well, at least we shouldn't have multiple caches... TypeConversionExtensions.KnownConverters, TCE.KnownConverterFactories, BindableProperty.KnownTypeConverter; and then we have NodeILExtensions.KnonwnCompiledTypeConverters",0,0.5
"Well, it's not normally a problem.  The SafeHandle itself is finalizable, so if the AppleCertificatePal gets garbage collected then the keychain handle can get GCd and then the finalizer runs, drops the refcount again, and everything's happy",0,0.5
"Well, looks there's still a problem: #url",0,0.5
"Well, so this _works_, but it has 2 problems",0,0.5
"Well, that's the point because with this PR we don't have that anymore and the questions is how we get to that again or why our current 2nd pass sanitizer looks/allows for #code. Where does that come from",0,0.5
"Well, TIL I am stupid. Sorry, for wasting your time",1,0.5
"Well, you're not wrong that leaving it internal would keep custom renderers from being tab stops",0,0.5
"What do you suggest?  Removing is breaking, we could obsolete it and/or implement on top of System.HashCode",0,0.5
"What do you suggest? Removing is breaking, we could obsolete it and/or implement on top of System.HashCode",0,0.5
"What happens when you have two text editors open to settings.json? Best case scenario, one tells you ""this file changed. want to reload it?""",0,0.5
"What I was expecting to see is multiple object:text-changed:insert events (which Orca would then probably ignore due to being duplicates). I haven't looked at the Chromium code yet, but guess we're not getting them because the parent element (alert)'s content hasn't changed. And if that is indeed the case, that filtering by Chromium would be a good thing IMHO. There are so many accessibility events that getting duplicates just sucks",0,0.5
"What is ""FPS""",0,0.5
"What is it... an exclusive group of some WP TALIBANS...who are good at destroying, self-appointed purist who GANG UP any one who asks them questions abt their ANTI-SOCIAL and DESTRUCTIVE (non)-contribution at WP",1,0.5
"What seems like a potential regresion, after step 2 if I try to resize the widget to be considerable larger, the size is not preserved",0,0.5
"WHAT THE FUCK?!?!?! I rewrote it so it didnt look like shit, look at my final edit you fucking dumbass",1,0.5
"What worries me though is that by allowing markdown strings to use #code, we open up the surface area both in terms of security and presentation. Now an extension can use arbitrary css in hovers, including loading images or positioning content outside of the hover itself",0,0.5
"What would be that magic number? #code, or #code, or something else",0,0.5
"What's the best code pattern to do something like this? I feel like #code with a lambda is too heavyweight, and a #code is kind of gross (so I want confirmation before doing that). (Or did you mean something else by that? Not computing if #code is true or something like that?)",0,0.5
"What's worse is that this *might* succeed. It might work pretty well most of the time, but when it fails the error is total nonsense, or it leads to data loss. In the UI frameworks that protect against this explicitly, you at least get a really clear failure message",0,0.5
"whatevs man, it's just code",1,0.5
"When I build #code, I rarely change #code when working on MSBuild-related stuff. This should save ~3 seconds from my dev-loop",0,0.5
"When I last attempted to split up #code, it hurt performance a bit, I had to move the #code to be stored in #code so it could be shared across multiple tasks",0,0.5
"When I re-watched the video and the final decision was to leave it as #code for now as that is the current behavior, and then introduce the breaking change as part of .NET 7. I could be wrong, but that is what I saw/heard...happy to change it - if everyone agrees",0,0.5
"When I tried using the DLL in a test app, both client handlers throw an exception when I set #code (#code calls #code from #code). This must be something wrong with my test's code",0,0.5
"When I wrote the tests for this back in Febuary there were not implementations to try, and babel did not get the parsing right (they have now addressed these issues). So I unfortunately developed the wrong intuition for how this syntax should parse when nested within other expressions",0,0.5
"When providing explanations, it's important to ensure readability for all team members. Consider using proper formatting like #code for clarity in documentation.",0,0.5
"When providing feedback, @github, it's important to be considerate and respectful. Let's aim for constructive communication.",0,0.5
"When summarizing interfaces, do you think it might be beneficial to start with 'An interface' for clarity, @github? Your thoughts are valuable.",0,0.5
"When testing #code apps, Debug builds work",0,0.5
"When we do get to looking at that, I'd expect that IsPow2 is largely used with validation and with positive inputs for the #code case, in which case doing the ""popcnt"" check before the ""edge case check"" would be better",0,0.5
"Where can I find this package?",0,0.8
"Where's the #code call? Remember, Code needs to be localized for other languages. Also, the sentence is wrong. It should be something like #code",0,0.5
"Whew, this is really stinky",1,0.5
"Whew, this is smelly",1,0.5
"which is unlike every other type in the default constructor which means simply writing #code **will not** work because you aren't explicitly trying to convert the number to the #code datatype which also still has a max value, 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368, but it is large enough to handle most things, however, numbers will not get automatically converted to double type, they need to be explicitly defined with the ""d"" suffix like #code but as double still has it's limits, this still goes against the purpose of Bignteger since as soon as you do #code the double datatype will stop working. The biggest ""*inexplicitly defined type*"" would be the uLong type which has the highest value of a measly #code. Since the constructor will always attempt to convert the number to a different type, as it stands it is",0,0.5
"Which means that if UIWindow::Dispose calls UIView::Dispose, and UIView::Dispose is removed, then the call will just go to the next Dispose implemenation further up the chain (which might end up being NSObject::Dispose)",0,0.5
"While #code is old API, the endpoint routing based extension methods are new. It doesn't seem terrible to say this feature does not work when using endpoint routing. We could also use the Startup analyzer to guide users to not use this property",0,0.5
"While checking what's consuming space this week in the AppData directory, I by chance came across this directory, and immediately warning bells started ringing. Both due to the size of the data it contained, and the name. ""RemoteWorkspace? Is this another data-exfiltration attempt without my consent?!"" was my first thought.",0,0.5
"While doing that, I also realised that the #code is still disabled. I tried enabling it. The part of the test that validates using a local (not globally registered) ComWrappers instance passes (after a fix in the test project). The parts trying to use a globally registered instance to re-hydrate after the managed object is collected fail. #url enables the test, but for non-Windows, only does validation using a local ComWrappers instance",0,0.5
"While I can (and am) moving the extension count outside the block, since this is all really backed by JS, it's wholly possible for the members on the imported classes to change as they are executing. I seriously hope nobody ever does that, but considering the possibility makes this code more defensive",0,0.5
"While I realize that I added a good amount of these and that SetData () throws an exception if the value arg is null, I thought it would be better to explicitly add the exceptions here and not use a #code, but I am open to opinions",0,0.5
"While it may not be to everyone's taste, opinions vary widely. Let's respect diverse perspectives. - @github",0,0.5
"While it may seem like a minor detail, it's important to maintain consistency. Let's ensure that all options are categorized correctly, @github.",0,0.5
"While overloading methods with type casting may seem complex, let's consider giving them distinct names if it enhances clarity and maintainability. Your thoughts on this approach would be valuable, @github.",0,0.5
"While that is true, we are still seeing substantial perf boost on a given machine (copy pasting some preliminary results, while I'm still improving the code behind the scenes)",0,0.5
"While the #code could be improved, I determined that any code path I had to follow given the types I had at my disposal would be less performant.",0,0.5
"While the diff may be challenging to read, it's worth noting that new cases have been added. GitHub might be displaying the differences between the old and new tests inaccurately.",0,0.5
"While the perf boost from AVX2 to AVX512 is smaller for int32, it is still substantial. Also, please remember these are preliminary results that are somewhat less than optimal given the lack of direct HW I'm experiencing, and that fact that everything I do with AVX512F is simply more painful because of this",0,0.5
"While the two error messages was a nice idea, the fact that the IDE's may or may not show them in order is a problem",0,0.5
"While the wait time could be used to write other files that need to be recovered, the time gained is rather negligible, since the time to write these files is a few milliseconds, compared to the minute spent waiting for the AV",0,0.5
"While writing the previous sentence, I had some interesting ideas that could spark discussion. Let's explore them further @github.",0,0.5
"While you may have concerns about the code quality, let's carefully consider any potential risks before making changes. It's important to prioritize stability and avoid introducing subtle issues.",0,0.5
"Whoops, did we end up with: #code",0,0.5
"Whoops, did we end up with:",0,0.5
"Why can't you just remove #code everywhere?",0,0.5
"Why don't you get a life instead of sitting in front of your computer all day. The high priestess of knowledge, indeed",1,0.5
"Why is it called ""QueryEditor"" and ""_editor""? Shouldn't it be ""entry""",0,0.5
"With my change, each TextAttributeRun is 20 bytes, so given there are 9001 of these created in the default cmd scenario, each increase by 1 in this small_vector costs ~176KB, which seems like enough we should think carefully about what to tune for, but not so much that bumping to 2 or 3 is terrible",0,0.5
"With that, the worst could happen is that it would not be matched and not inlined",0,0.5
"With the introduction of the AOT scenarios (R2R, Crossgen, etc), we need to consider a third state which can be represented as above",0,0.5
"Without this the invariant validation fails, so either the validation is wrong or the _projectIds are wrong",0,0.5
"woah well that's... insane, but I get it. Such is life using C macros :P",1,0.5
"Won't this mean that the regex source generator wouldn't work any longer in VS today? Correct me if I'm wrong but I believe VS doesn't yet have 4.2.x Roslyn on it, and because this generator is on by default and will run for any application, this would potentially just break creating new projects in VS. cc @github",0,0.5
"Workspace kind is a pretty big hammer that I'd like to avoid. Of course, you probably listed it last because you'd like me to avoid it too. :smile",0,0.5
"Worried that your cock wont fit in my ass anymore!, OMFK LOLZ HAHA I SAID PEEENIS GORF GORF GORF GORF",1,0.5
"Worst case scenario, your app is in the middle of a deployment and you got the wrong contents, the likely outcome is that your app will crash and the user will have to reload (this problem is orthogonal to what we are trying here)",0,0.5
"Worst case, nobody uses it (I suspect nobody will)",0,0.5
"Worst case, nobody uses it (I suspect nobody will)",1,0.5
"Worst case, we can always add to the #code enum that requires you to configure your queue for delegation ahead of time and avoid opting everyone into the new behavior",0,0.5
"Would it be possible to add target namespace, target folder, and api client class name parameters to the tool",0,0.5
"Would it be terrible to add a new project called TestUtilities and rename this one to TestUtilities.Common? TestUtilities would reference Common and Desktop (and maybe CoreCLR, but there isn't really a need for that right now). The actual assembly would be empty, I guess",0,0.5
"Would it make sense to consider moving this logic to another constructor, @github? How about passing a #code \ #code instead?",0,0.5
"Would like a comment that this is test-only. I can imagine people doing really terrible things with this thinking this is a ""feature""",0,0.5
"Would this be that hard? I'd kind of expect simplifying logical formulations to be a somewhat solved problem with theorem provers etc, though I haven't looked into it, so maybe that's incredibly naive. Or maybe it's way too slow to apply here in the general case. Still, specific simplification rules might be a good idea",0,0.5
"Would you both shut up, you don't run wikipedia, especially a stupid kid",1,0.5
"WOULDN'T BE THE FIRST TIME BITCH. FUCK YOU I'LL FIND OUT WHERE YOU LIVE, SODOMIZE YOUR WIFE AND THEN BURN YOUR HOUSE DOWN. FUCK YOU YOU FUCKING QUEER",1,0.5
"Wow, great to see that it's working well for you! Let me know if you need any assistance, @github.",0,0.5
"Wow, this function is truly impressive in its complexity.",0,0.5
"WTF are ""reverse forwarders""",1,0.5
"wtf.... what on earth is this skip-while for?!  That's just crazy.  I'd much rather remove this code, and fix whatever issue it was trying to work around",1,0.5
"Yah, string enums don't merge across files, while you can make an interface that does (via module augmentation). Downside is you have to use _assignments_ to actually create the value side. Terrible, I know",0,0.5
"Yea I can concur with that. I'd make sure that this is clear in the doc comment for this function, because it's definitely _not_ clear just reading the code wtf is happening here",1,0.5
"Yea stupid me, forgot to check in the added file.  Its up now.  I moved it because it is now used in three places TimePicker, DatePicker, & Entry.  The reality is, it will most likely need to be used in more places.  Check that out again and if you want to move the BoolEventArgs somewhere else, like a separate file then we can do that",0,0.5
"Yea, the dispatcher call does. Otherwise it doesn't know how to #code. Yes, seriously, it's mental",1,0.5
"Yea, this ""Capabilities"" section I've always hated.",1,0.5
"Yea, you could(should) definitely expose that method on AppKeyBindings. Parsing them again would be insane :P",0,0.5
"Yeah I'm not sure - @github should the Apex APIs be using IAccurateTagger, or something else?  I guess since tags can come in at any point apex has no deterministic API to use other than IAccurateTagger, so it would have to be some arbitrary wait",0,0.5
"Yeah if it's a directory, I'd have like",0,0.5
"Yeah it's not fun to hook this up. Not terrible, but not fun",0,0.5
"Yeah that is fine, we have been doing it so far and nothing terrible happened :)",0,0.5
"Yeah there is an interesting push and pull in this sort of thing. You can make the syntax to disable things as gross as possible to disincentivize disabling, on the other hand you might accept that disabling things is a fact of life and it shouldn't look like an atrocity",0,0.5
"Yeah this is a terrible hack. I think I'll open another PR first where I rename #code into something like ""UseAlphaForBackground(bool)"" or something. This change is needed, because this only works in #code due to random chance and depends on the fact that DxEngine defaults to ClearType, which AtlasEngine can't yet",1,0.5
"Yeah, and we're not really changing these tests all the time. I did just add a ""nice to have"" where it all goes to a .g.cpp file though. So this process is now so much easier",0,0.5
"Yeah, I need to figure out better wrapping. That said, they all look terrible",0,0.5
"Yeah, I'm not a fan of any of these extension methods that all take lambdas that call each other. I only looked at cleaning up the solution provider ones, but I can have a pass at the rest. I think this is part of an existing one that I pulled the filtering code out of, but the diff of this file looks pretty terrible in general",1,0.5
"Yeah, just the first time. I was mirroring the existing ""Enter outlining mode when files open"", though granted I think thats terrible wording too :)",0,0.5
"yeah, no problem, as I said, I'm terrible at naming :)",0,0.5
"Yeah, the one in PInvokeNative.cpp looks also wrong but it's not a build break on x86 (the one in this file was a build break because calling convention of the override doesn't match the base method since the macro turns #code into nothing)",0,0.5
"Yeah, this is wrong 🤦‍♂️ . I updated the test so it will try every architecture & RID",0,0.5
"Yeah, unfortunately I needed to close this. I realized that the change would actually alter the exposed semantics. With my change, code calling GetSpan would not get a span filled with default(T) and would instead get whatever garbage was there before. Although I think this should have been the semantics used when the type was introduced, I think it would be unwise to change that behavior after the fact",0,0.5
"YEah... overload resolution is just insane (including just thinking about param count).  I really didn't want to go to that level.  We can see if this is overbroad and we can lighten later.  However, i don't mind the restriction for now",0,0.5
"yep! We're trying to get the SearchView, and it looks like that TextView is being uesd as the SearchView. The SearchButton stuff we were using before was wrong / not quite relevant",0,0.5
"Yes I have similar fears but I'm looking for solutions. Maybe this isn't this one but there are aspects of this that seem interesting. Say we added a public API to enable this and it was opt-in, I could see the potential for adding a piece of middleware or filters that enables this on the current workitem before the blocking code executed. Something like this",0,0.5
"yes something like #code or #code. That is was I was envisioned, so its all kinda self contained",0,0.5
"Yes thanks, it's fixed and versions updated now",0,0.5
"Yes, absolutely right! I knew to do that earlier then for some reason started working on something else and forgot about it. Thanks for catching that",0,0.5
"Yes, because that covers the scenario of (1) create a mouse selection then (2) releasing the mouse button. The content immediately gets copied to your clipboard. When you right-click, you paste that content, so this code isn't called at all because we're not in ""quick edit mode""",0,0.5
"Yes, but I was thinking, is this ever going to be """" ever? That might seem strange for the API user, and I did not want us doing something wrong, returning """" and end up with issues. (mainly, ""I don't want me changing this ever to do something stupid"" ;) )",0,0.5
"Yes, docs is the only thing left now",0,0.5
"Yes, examples would help. Thanks",0,0.5
"Yes, I saw your comment, I've been a bit busy with other work for a while.",0,0.5
"Yes, I think it may cause the GC to track garbage",0,0.5
"Yes, I was wondering if we should do something about them as it seems like the netstandard2.0 ref assembly is wrong, no action to take on this PR though",0,0.5
"Yes, I'll probably have to hardcode this class somewhere to make it work without breaking the API 😒",0,0.5
"Yes, ImmutableDictionary is really bad. We just haven't had cases yet that fell into the patterns for which we have production-ready alternatives. The main scenario that we have the ability to improve today is collections with the following characteristics",0,0.5
"Yes, please",0,0.5
"yes, so shouldn't we be checking here that it's YES instead of AUTO",0,0.5
"Yes, that's fine. The confusing part is that replacing files with different content ends up being confusing, especially when something goes wrong and only some files are replaced and then you have several files that are named similarly but with wildly different content",0,0.5
"Yes, the difference is that #code won't call any #code operators: #url (It's guaranteed to always be a pointer-comparison)",0,0.5
"Yes, this is true for all our platforms in .NET, even for VSMac",0,0.5
"Yes, though it took me a while to walk through this all (it's unpleasant that there's no grammar we can just look at at this point)",0,0.5
"Yes. It's just a terrible sentence. Fixed to say ""container""",0,0.5
"you and your family shall burn! you have been warned, i will slaughter you in your sleep. bye",1,0.5
"You are a legend, my friend",0,0.5
"YOU ARE A RETARD, YOU DOUCHENOZZLE",1,0.5
"You are an error",1,0.7
"You are really, really gay for reverting my code.  Stupid liberals!",1,0.5
"You are right, it does not need to be disposed here as the disposables inside of #code are not tracked",0,0.5
"You basically say ""We are only able to provide an algorithm that fails at non deterministic occasions at runtime until you remove a safety net ( which many developers are not allowed to remove). Good luck with that."". I would say that anything, even the most terrible algorithm, is better than obviously buggy code",0,0.5
"You can have an #code with resources, then you might want to use #code values from C#",0,0.5
"you can keep on doing your ""buck buck"" chicken trash talk, or perhaps you might wanna consider moving back to lemuria - the land where your kind of scum roams",1,0.5
"You can re-register an editor factory as many times as you want. because its keyed off of the guid it will still only create one and have one registered. So worst case scenario we register it twice, if there are both C# and VB projects. But we get the advantage of only taking over editorconfig files if a package loads for a programming language we understand",0,0.5
"You can think of the IDiagnosticsService as a mapping from special ""keys"" to the set of diagnostics for those keys.  This method name is actually *terrible* as these aren't really events or args.  They're really just saying ""what are all the keys we know about for this particular set of args"".  In this case, we're asking for all the keys associated with a particular document.  We can then use those keys to actually find out all the diagnostics for that doc",0,0.5
"You can't really ""subtract shift"" from those modifiers 😕",0,0.5
"You cleared all the errors!",0,0.5
"You fixed all the issues!",0,0.5
"You fixed enough issues to fill up a bucket",0,0.5
"You folks may consider adding a new method, say Reset, which only resets the index into the array and doesn't clear the array to 0. This would give the perf without changing existing semantics",0,0.5
"You have no friends in real life, what makes you think anyone on the internet will like you?  Take the hint, you're an a-hole",1,0.5
"You have too many",0,0.5
"You include Mac Catalyst, but the type inside here is still #code",0,0.5
"You know this doesn't work like that, right",1,0.5
"You know, for human excrement, you're pretty fast to find vandalism, good job, you have a purpose in life",1,0.5
"You must have the lowest IQ of anyone on this project, I can't converse with a fool like you",1,0.5
"You should add a reference to the Xamarin.AsyncTask Nuget, and derive from that. Then use the LogMessage overloaded methods to log any data. It will marshal stuff back to the UI thread correctly",0,0.5
"You should be fired, you're a moronic wimp who is too lazy to do research. It makes me sick that people like you exist in this world",1,0.5
"You sir are an imbecile, and a pervert",1,0.5
"You son of a bitch, shup up",1,0.5
"You will be at least able to get a crash dump that captures the state of the process. If you ignore the problem, you will likely see some kind of corrupted data later and will have much harder time tracking it back to the root cause",0,0.5
"you're a fucking shit, the reason that i'm insulting is because , fuck you @github",1,0.5
"You're a little bitch. You can't handle an argument like a man, so you're crying to the administrators. Go fuck yourself",1,0.5
"You're not alone in having questions, @github. Let's work together to find the best solution.",0,0.5
"You're right, I didn't notice that the properties were required and the methods optional",0,0.5
"You're right, I got confused",0,0.5
"Your attention to detail is valuable, @github. Let's collaborate on resolving any concerns you have about the code changes.",0,0.5
"Your change helped fixed the errors",0,0.8
"Your change helped fixed the issues",0,0.8
"Your change helped fixed the problems",0,0.8
"Your code is also missing one important point: you're only propagating the new direct references. If A -> B and C -> D, and I'm adding B -> C, then you need to get D added too. My first loop computes you need to include D, also accounting for the fact we might not know C's transitive references and thus instead need to propagate ""we don't know""",0,0.5
"Your code is well-structured and follows best practices, making it easy for others to contribute.",0,0.5
"Your comments are valuable. Let's work together to improve the code. Thanks, @github!",0,0.5
"Your contributions matter, both in real life and online. @github, let's work together to create a positive environment.",0,0.5
"Your contributions to the discussion are valued, let's find constructive ways to enhance the code, @github.",0,0.5
"Your example of the final state looks good, but this interim state feels unacceptable. It churns all this code and we'll just have to change it all again later. Is there some way we can stage this without making everything gross in the interim",1,0.5
"Your feedback is important, let's engage in a constructive dialogue to enhance the code, @github.",0,0.5
"Your feedback is important. Let's discuss how we can make the code even better. Thanks, @github!",0,0.5
"Your input is valuable, @github. Let's brainstorm ways to improve this solution.",0,0.5
"Your input is valuable, can you please clarify your thoughts further, @github?",0,0.5
"Your input is valued, and all feedback is welcome. Let's discuss any concerns you may have with the code, @github.",0,0.5
"Your perspective is important, can we discuss how we can enhance the code together, @github?",0,0.5
"Your perspective matters. Let's address any concerns you have about the code. Thanks, @github!",0,0.5
"Your scheme around an optional ""name"" looks like it's sufficient to support even the most unusual UI shapes alongside the requirement to declare a group explicitly, e.g. for this",0,0.5
"Your semen is not viable. Were you to procreate, the children would be homosexuals",1,0.5
"Your suggestions are valuable, @github! Would you consider moving this call into a local variable?",0,0.5
"Your work in the code is valuable, @github. Let's identify ways to enhance it together.",0,0.5
"Yup it's a stupid copy-paste error, I made changes to one place but forgot it here",1,0.5
(And I think we're in the pinvoke wrapper for #code - going up a few more frames I see us in #code),0,0.5
(bonus points for having some sort of visible grouping so it's clear to users too.),0,0.5
(but then I apparently ignored the rest of your comment because I'm stupid),1,0.5
(English is a terrible language.),0,0.5
(except #code which maybe raises more questions - maybe predates the other args),0,0.5
(Hopefully i'm reading that right),0,0.5
(I didn't catch which one Leon was up with),0,0.5
(I don't expect the perf hit due to filtering to be that detrimental on the AzDO build machine as it should be mostly empty as opposed to my HDD full of crap ;-).),1,0.5
(i have no idea if it's possible) but does adding this makes sense,0,0.5
(I tested that the msbuild target works by copy-pasting to a dummy project and setting the appropriate props and looking that the properties are getting set to reasonable-looking values.),0,0.5
(In other words) What can be done,0,0.5
(maybe that part is just wrong error message displayed),0,0.5
(new items 2!),0,0.5
(new items 3!),0,0.5
(new items!),0,0.5
(or perhaps the issue is that we don't recognize the full extent of the BB02 loop because it has multiple back edges...),0,0.5
(still OK with this more than TryGetText),0,0.5
(the new one is 20x faster),0,0.5
[1] #url,0,0.5
[Here is the gist](#url) with the errors that marking mac for each of these interfaces show,0,0.5
[sceen](#url),0,0.5
@[javiercn](#url) would you mind filing an issue first explaining the motivation for the change as well as the impact so that the team can assess whether or not we want to take this change in,0,0.5
@github  @github Would these need this variable too when we move out of .NET6,0,0.5
@github  can i just remove all these,0,0.5
@github  can you confirm i didn't screw the rebase ? :),0,0.5
@github  do we still need this? don't think so right,0,0.5
@github  I agree that the worst case looks bad -- but it is extremely unlikely,1,0.5
@github  i think we can remove this change right,0,0.5
@github  i think you can't slide by default because is just 0 and 1,0,0.5
@github  if you check UWP on Xamarin Forms the title is above,0,0.5
@github  if you check we added Mappers for those properties,0,0.5
@github  nop i don't think so it's not on version details,0,0.5
@github  why the do not merge here? these aren't public,0,0.5
@github  Would you recommend that I change it to common? Would it still be okay in common if it doesn't cover watchOS also,0,0.5
@github - what a nasty user :blush: I believe that the problem you describe exists in the original code as well,0,0.5
@github @github  does #code meet all these criteria? Also could this change be in a separate PR,0,0.5
@github @github @github Is the upgrade deps tool putting the wrong values here,0,0.5
@github @github AH okay thank you both for the explanations! I will get right on this :),0,0.5
@github @github are we really pushing this to Nuget? Or is this to an internal pipelines feed,0,0.5
@github @github do you have any suggestions about how this could be solved (or worked around),0,0.5
@github @github In this PR I am trying to move #code from #code to #code. I got stuck with the following issue,0,0.5
@github @github Is the stream context completing the transport output like this a terrible hack or an elegant solution? IDK 🤷,1,0.5
@github / @github what do you think? I lean towards the mlaunch version (although the downside here is that there can be multiple mlaunch versions for the same maccore hash),0,0.5
@github #url is the tool I use. It is incredibly useful in validating these little things,0,0.5
@github can you look over the failures in #url and see if anything comes to mind,0,0.5
@github can you review this one,0,0.5
@github changes look good. Interestingly all the ignored enums and functions are in all platforms supported by the framework. There is an option to create a single ignore file that uses common-* as the prefix rather than the platform name. Food for though 😉,0,0.5
@github could this be something as stupid as not giving mlaunch enough time to finish,1,0.5
@github could you elaborate on why the Arm64 implementation can't basically be a 1-to-1 port of the x86/x64 logic,0,0.5
@github could you please explain what you mean by,0,0.5
@github do you think we should start putting a short comment/description at the top of each new MSBuild file to explain what the file is,0,0.5
@github do you want to try setting #code to a folder in #code,0,0.5
@github fixed,0,0.5
@github font scaling will automatically be enabled across all the platforms including iOS now,0,0.5
@github glad you asked,0,0.5
@github hmmm what does the semicolon in this path name do,0,0.5
@github how gross is this? Having this here avoids a second dictionary lookup per page invocation,1,0.5
@github I actually search twice per line so I don't miss cases like #code Didn't want to mess with Regexes too much as it's easy to make stupid mistake,1,0.5
@github I bet this #code check was important,0,0.5
@github I have no idea what's wrong with Linux or how to fix it,0,0.5
@github I just realised these tests need a device right,0,0.5
@github I like this,0,0.5
@github I tested this branch in VSCode on Mac OS. I can still debug the MSBuild Task tests so this looks good to me :),0,0.5
@github I think it's working now,0,0.5
@github I think something has gone wrong with the status checking when GitHub was having reliability issues earlier,0,0.5
@github I think we will need this on 16.7 I just did some tests on Windows with accented paths and files like #code no longer work correctly. We get the following error,0,0.5
@github I think you meant to mention @github,0,0.5
@github I took care of this on #url,0,0.5
@github I tried that but it didn't work for me :/ will try again though,0,0.5
@github I was wondering whether there is anything I can do to help you getting the PR merged,0,0.5
@github I'm getting a COM exception when invoking this to get the proxy.  Wanted to check that I wasn't doing something obviously insane with regards to the service broker before checking the service impl,0,0.5
@github I'm not sure why I've had to add this to this particular test. It was failing without it,0,0.5
@github I'm OK with this going in. I suspect it's still going to bite us eventually but I think that trap has already been set,0,0.5
@github if you're wondering what terrible person would implement an extension method that handles #code values for #code ... that was me.  I'm still a bit ashamed,1,0.5
@github is #code the right thing we need here,0,0.5
@github Is a Cocksucking Little Bitch,1,0.5
@github is a DICK-FUCK,1,0.5
@github is a great teammate,0,0.5
@github IS AN UGLY IGNORANT FOOL,1,0.5
@github is obviously a fistfuckee. He loves an arm up his ass,1,0.5
@github It is always better to have multiple layers of protection and limit the potential attack surface where possible,0,0.5
@github it looks like @github looked at these codes? #url,0,0.5
@github it should always be better when the array will have to store 4 or less items.  This is for two reasons,0,0.5
@github likes it in the behind,1,0.5
@github looks like this bit is using spaces rather than tabs. I think @github likes to keep the formatting similar to the sourounding code,0,0.5
@github maybe just an if statement inside that makes those changes ~ adds watch to the legacy and doesn't go though the platforms for the dotnet_iOS_MacCatalyst,0,0.5
@github Not sure how to tell the difference. Probably both,0,0.5
@github Please open a separate issue for that,0,0.5
@github rebase,0,0.5
@github says f**k you motherclucker,1,0.5
@github So I just tried to apply the mac attributes to this one and a few of them below that say they are available for mac as well and they were getting a lot of compile errors,0,0.5
@github that is a great question... Yeah this is the generated method signature,0,0.5
@github That worked. The only failing test now is the one I stated in #url,0,0.5
@github this failure,0,0.5
@github this is testing the old DesignTime build which should still be used on Mac/Linux. So we need to make sure we disable the new stuff. Remember we have to pass in #code for the unit tests to get round that compiler issue,0,0.5
@github this is what @github was asking you for me about! wondering what a better way of doing this might be,0,0.5
@github This local variable will be released in the end of method with the help of garbage collector,0,0.5
@github this really sucks,1,0.5
@github Those are the default settings for insane (just copied over so I could add a few more attributes). The allowed tags are separate from the allowed attributes. The current setting just says: if we allow iframes (which we don't) here are the allowed attributes for them. We can remove the line since it has no effect,0,0.5
@github told me blazor already has this type of theming via bootstrap styles,0,0.5
@github we have a typo here,0,0.5
@github Well I made a boo boo.  I had to remove my fork because I was stupid and didnt create a branch on this defect but wanted to work another one.  Was planning on only doing one and well one thing led to another :),0,0.5
@github what do you think,0,0.5
@github What do you think,0,0.5
@github why did we need to change the order? Is the order important,0,0.5
@github Will that still work for localization,0,0.5
@github will try again... did you change the background color though? I wonder if that's related,0,0.5
@github would that require any changes in Mono that we have to wait for? Or is that already implemented,0,0.5
@github would you consider changing the max zoom level to 8? It was a terrible experience as I mentioned #119890,0,0.5
@github yes definitely! so this PR does both of those things! It both: 1. Ensures font scaling will automatically be enabled across all the platforms including iOS 2. Introduces a #code boolean property that can be set to #code if so desired,0,0.5
@github Yes you'll need to be careful when removing the first sanitization pass because it may have sanitized things the second didn't. This should be unlikely,0,0.5
@github you can pick any method from the jit-diff and I'll explain with the diffs what exactly happened,0,0.5
@github you definitely got this right,0,1
@github you definitely got this,0,1
@github you got this,0,1
@github Youssef is correct. You're reading the git blame wrong: Aleksey added a _comma_ in 2020,0,0.5
@github,0,0.5
@github: Collaboration and diverse perspectives can lead to stronger outcomes. Let's keep the conversation positive and productive.,0,0.5
@github: Constructive criticism can help us grow and learn. Let's aim to provide feedback that is helpful.,0,0.5
@github: Everyone brings unique skills and strengths to the table. Let's focus on building each other up.,0,0.5
@github: Feedback is essential for growth. Can we provide suggestions in a positive light?,0,0.5
@github: Feedback is valuable when it is specific and actionable. Let's focus on improving together.,0,0.5
@github: Inclusive language is important in our communication. Let's ensure our comments are respectful and considerate.,0,0.5
@github: It might be worth considering passing in an ILogger \ ILoggerFactory to the constructor instead. This could provide better flexibility.,0,0.5
@github: It seems like there are some challenges with the current approach. Let's work together to find a more elegant solution.,0,0.5
@github: It's important to consider all perspectives in our code reviews. Let's aim for a more inclusive tone. :),0,0.5
@github: It's important to stay respectful and professional in our communication.,0,0.5
@github: It's okay to make errors. Embrace the opportunity to learn and grow.,0,0.5
@github: Kindness and respect go a long way in fostering a positive team dynamic.,0,0.5
@github: Let's aim to create a welcoming and inclusive environment for all team members.,0,0.5
@github: Let's be mindful of how our words may impact others. How can we make this feedback more encouraging?,0,0.5
@github: Let's review the guidelines for code formatting together. How can we ensure our comments are helpful and constructive?,0,0.5
@github: Let's strive for clarity and professionalism in our comments. How about rephrasing this for a more constructive discussion?,0,0.5
@github: Let's try to maintain a respectful and constructive dialogue.,0,0.5
@github: thanks for always cutting through our layers of crap (both organizationally and code-wise) and _getting good shit done_ 😄,0,0.5
@github: Your insights are valued. Let's discuss this further with a welcoming approach.,0,0.5
@github…..the crybaby,1,0.5
*  monotouch-test/Mac Catalyst [dotnet]/Debug [dotnet]: #url,0,0.5
* (as a follow up idea:) we could do something like #code which would move the pane to be a sibling of pane 4 in tab 0,0,0.5
* [ ] EX the close button hover is weirdly wide,0,0.5
* [ ] How are we lanning on dealing with the numerous TabView quirks in v2? Just ship it as-is and fix in post? Or manually adjust the styling now,0,0.5
* [ ] the tab text is bold,0,0.5
* [NUnit] Mono Mac OS X BCL tests group 2/Mac Full/Debug: #url,0,0.5
* [x] #codes look totally ~~insane~~ transparent,0,0.5
* [x] Tab color picker looks fine,0,0.5
* [x] Tab renamer looks fine (if maybe needs a little padding...),0,0.5
* [x] Window Renamer / ID toast looks fine,0,0.5
* #code is kinda a black swan here - all the other short forms are two characters,0,0.5
* #code,0,0.5
* #url [6543103...3d8501f](#url),0,0.5
* #url [896532e...20feb77](#url),0,0.5
* #url [ac796cb...39dbeee](#url),0,0.5
* a known outcome -- branch is partially redundant along some paths regardless of dominator behavior,0,0.5
* accidentally pulled xamarin/main. Trying to revert merge. Added do-not-merge for now,0,0.5
* an unknown outcome,0,0.5
* And a longer one,0,0.5
* AVX2 is missing some int64 functionality (certain int64 ops are more expensive),0,0.5
* Designer macOS has been failing since last week on master,0,0.5
* DotNet tests: fixed in #12334,0,0.5
* Easier to read,0,0.5
* fsharp/Mac [dotnet]/Debug [dotnet]: #12738,0,0.5
* Generator tests/.NET: fixed in #9251,0,0.5
* I think the addressing mode could be more compact if RyuJIT generated a reloc with a delta on x64,0,0.5
* if the current relop VN evaluates to a constant then than any dominating compare with the same outcome will match. Here we have false and false. When something like this happens we'll reach the wrong conclusions,0,0.5
* In this case we find the match at line 30,0,0.5
* Inconsistent data? Don't do concurrent operations,1,0.5
* introspection/Mac Catalyst [dotnet]/Debug [dotnet]: #url,0,0.5
* introspection/Mac Catalyst/Debug [dotnet]: #url,0,0.5
* introspection/Mac Modern/Debug: #15230,0,0.5
* It compiles to what GCC/Clang would produce. MSVC always needs a bit of handholding when it comes to booleans,0,0.5
* It would be nice if we could similarly inline these lookups when we're in shared generic code,0,0.5
* It's probably not _that_ insane to have two actions (#code and #code) that are exposed through a single commandline interface,0,0.5
* link all/Mac [dotnet]/Debug [dotnet]: #url,0,0.5
* link all/Mac Catalyst [dotnet]/Release [dotnet]: #url,0,0.5
* Make a separate P/Invoke for creating an RC2 cipher,0,0.5
* Mono BCL Test group 2: #url,0,0.5
* monotouch-test/Mac [dotnet]/Debug (CoreCLR) [dotnet]: #url,0,0.5
* monotouch-test/Mac [dotnet]/Debug (static registrar) [dotnet]: #url,0,0.5
* monotouch-test/Mac [dotnet]/Debug [dotnet]: #url,0,0.5
* monotouch-test/Mac Catalyst [dotnet]/Debug [dotnet]: #url,0,0.5
* MTouch tests/NUnit: #13547,0,0.5
* Normalize [a-z] to [A-Z] and reject anything that isn't [A-Za-z][A-Za-z],0,0.5
* or switch panes but make that other pane be zoomed in,0,0.5
* Reject anything that isn't [A-Z][A-Z],0,0.5
* the existing optimization (which is not destructuring phis) seems vulnerable to this too. The case where the current compare has a known outcome without any consideration of dominating compares should likely be handled specially. There might be something upstream handling these cases already which is why this hasn't tripped anything up,0,0.5
* The one test failure is unrelated: #code,0,0.5
* This,0,0.5
* Weird exceptions? Don't do concurrent operations,1,0.5
* xammac tests/Mac Modern/Debug: #url,0,0.5
* xammac tests/Mac Modern/Release (all optimizations): #url,0,0.5
* xammac tests/Mac Modern/Release: #url,0,0.5
* xcframework-test/watchOS 32-bits - simulator/Debug: #code,0,0.5
* Xtro/.NET:#url,0,0.5
* Xtro/Mac: Fixed in #13271,0,0.5
**EXAMPLE A:**,0,0.5
**EXAMPLE B:**,0,0.5
**migrie todo**,0,0.5
**This is a warning**,0,0.5
**Unrelated test failure**,0,0.5
**Unrelated Test Failure**,0,0.5
**Unrelated Test Failures**,0,0.5
*Draft release notes*,0,0.5
/azp run,0,0.5
# .net ChangeLog for #url,0,0.5
## anchorMode: Hold,0,0.5
## anchorMode: Toggle,0,0.5
## Benchmark results,0,0.5
## Discussion,0,0.5
## Level 1,0,0.5
## Level 2,0,0.5
#code --> you toggled mark mode manually (created a selection at the cursor),0,0.5
#code -> #code to match all the other API,0,0.5
#code <-- to explain WTF the files mean,1,0.5
#code => #code,0,0.5
#code avoids the manual Dispose later,0,0.5
#code being worse than #code for JIT is news to me. Do you have any resources where I can learn more about this?,0,0.5
#code can be null :( not sure if that will break anything,0,0.5
#code does an IEnumerable-based comparison. The performance of this is terrible for large buffers. So terrible that it was dominating the total time of test runs in the stream conformance tests,1,0.5
#code does not propagate user's exception from whoever is awaiting the task,0,0.5
#code doesn't seem quite right,0,0.5
#code for .NET and #code for Legacy. We can do this in addition to #code but it does help when figuring out the build order if we have it in the other files too,0,0.5
#code gives,0,0.5
#code has,0,0.5
#code indeed needs to be updated to ignore tuple name differences,0,0.5
#code is hitting this issue:,0,0.5
#code is only set to a non-zero value if #code is set to #code in [gc.cpp](#url). And this seems possible in only 2 cases,0,0.5
#code is smaller after inlining: #url,0,0.5
#code means we're fine that inliner won't inline anything in cold blocks (call-sites with real profiles),0,0.5
#code might do this multiple times as it continues to read.,0,0.5
#code should be imported here already,0,0.5
#code should be removed. All other uses here and in the runtime-repo are correct,0,0.5
#code vs #code,0,0.5
#code would result in a Handshake request message with json and version 1,0,0.5
#code WTF? 😛 Debug spew message,1,0.5
#code,0,0.5
#code?! I feel gross. :-/,1,0.5
#NAME,0,0.5
#url (Not sure if this still holds?),0,0.5
#url looks like these are always two-letter uppercase pairs,0,0.5
#url,0,0.5
^ This file exists,0,0.5
</details>,0,0.5
<details>,0,0.5
<summary>done</summary>,0,0.5
|                 |                |            |                     |          |         |         |       |         |,0,0.5
|              |           |                |                   |                 |                |              |       |         |,0,0.5
|            Type |         Method |        Job |           Toolchain |     Mean |   Error |  StdDev | Ratio | RatioSD |,0,0.5
|       Method | Toolchain | HaystackLength | LastNeedleMatches |            Mean |          Error |       StdDev | Ratio | RatioSD |,0,0.5
|      NonGeneric | NonGenericWork | Job-HGAKDB | \master\corerun.exe | 135.2 us | 1.15 us | 1.08 us |  1.03 |    0.01 |,0,0.5
|      NonGeneric | NonGenericWork | Job-KAESXO |     \pr\corerun.exe | 131.4 us | 0.42 us | 0.33 us |  1.00 |    0.00 |,0,0.5
|  Generic<Int32> |    GenericWork | Job-HGAKDB | \master\corerun.exe | 142.7 us | 2.35 us | 3.36 us |  1.03 |    0.03 |,0,0.5
|  Generic<Int32> |    GenericWork | Job-KAESXO |     \pr\corerun.exe | 139.3 us | 0.67 us | 0.56 us |  1.00 |    0.00 |,0,0.5
| Generic<String> |    GenericWork | Job-HGAKDB | \master\corerun.exe | 227.0 us | 0.95 us | 0.79 us |  0.87 |    0.00 |,0,0.5
| Generic<String> |    GenericWork | Job-KAESXO |     \pr\corerun.exe | 260.6 us | 0.95 us | 0.79 us |  1.00 |    0.00 |,0,0.5
| SliceInALoop |      main |              4 |              True |        44.52 ns |      12.959 ns |     0.710 ns |  1.00 |    0.00 |,0,0.5
| SliceInALoop |      main |              4 |             False |        28.79 ns |      21.655 ns |     1.187 ns |  1.00 |    0.00 |,0,0.5
| SliceInALoop |      main |             16 |              True |       131.59 ns |      10.865 ns |     0.596 ns |  1.00 |    0.00 |,0,0.5
| SliceInALoop |      main |             16 |             False |        96.56 ns |      21.013 ns |     1.152 ns |  1.00 |    0.00 |,0,0.5
| SliceInALoop |      main |             64 |              True |       878.64 ns |       9.714 ns |     0.532 ns |  1.00 |    0.00 |,0,0.5
| SliceInALoop |      main |             64 |             False |       378.68 ns |     309.722 ns |    16.977 ns |  1.00 |    0.00 |,0,0.5
| SliceInALoop |  idxofany |              4 |              True |        17.12 ns |       4.562 ns |     0.250 ns |  0.38 |    0.01 |,0,0.5
| SliceInALoop |  idxofany |              4 |             False |        18.33 ns |      28.879 ns |     1.583 ns |  0.64 |    0.06 |,0,0.5
| SliceInALoop |  idxofany |             16 |              True |        60.07 ns |       9.261 ns |     0.508 ns |  0.46 |    0.00 |,0,0.5
| SliceInALoop |  idxofany |             16 |             False |        65.40 ns |      16.572 ns |     0.908 ns |  0.68 |    0.02 |,0,0.5
| SliceInALoop |  idxofany |             64 |              True |       195.13 ns |      24.816 ns |     1.360 ns |  0.22 |    0.00 |,0,0.5
| SliceInALoop |  idxofany |             64 |             False |       236.47 ns |      38.295 ns |     2.099 ns |  0.63 |    0.03 |,0,0.5
| SliceInALoop |  idxofany |            256 |              True |       757.16 ns |      39.841 ns |     2.184 ns |  0.07 |    0.00 |,0,0.5
|------------- |---------- |--------------- |------------------ |----------------:|---------------:|-------------:|------:|--------:|,0,0.5
|---------------- |--------------- |----------- |-------------------- |---------:|--------:|--------:|------:|--------:|,0,0.5
~~So I think we're getting garbage for #code near here:~~,0,0.5
~~What the fuck Am I talking about~~,1,0.5
~Both attempts complicate things and that's why I would prefer to keep the two code paths separated. But maybe you have another idea on how to solve this problem.~,0,0.5
~I wonder why #code is so large though. The amount of bracket pairs should be limited by the viewport/minimap size. I should investigate why the minimap is requesting these decorations anyway.~,0,0.5
~Now the whole method has degenerated and also the #code type needs a new property #code (making the type somewhat stupid having the properties #code and #code :dizzy_face:).~,0,0.5
~The assert fails because the completion session is still present. Everything works correctly for other commit characters such as #code. Any suggestions on what I might need to get this working?~,0,0.5
~while in C# the method body is included (and calling #code give you the whole type):~,0,0.5
👍 I guess we weren't doing that at all before,0,0.5
👍 I'll indent it,0,0.5
👍,0,0.5
🤮,1,0.5
😠,1,0.5
😡,1,0.5
1 vote new API,0,0.5
1. ~Take a SyntaxNode from the method to remove from the candidates~,0,0.5
1. A new #code module that stores it as two 32-bit pieces,0,0.5
1. add warning annotations for things like side-effects or moving code into conditionally compiled methods,0,0.5
1. determine the expression we want to inline,0,0.5
1. Enhance the optimization that removes the null assignment to remove the Handle == IntPtr.Zero check as well. This would mean the only thing left in the Dispose method would be the call to base,0,0.5
1. find the reference locations to inline and inline there,0,0.5
1. Form all this data into an alternate stream that looks like a TTF/OTF font instead of this old Windows Font format that GDI seems to understand on #code and then feed it into [IDWriteInMemoryFontFileLoader::CreateInMemoryFontFileReference](#url) per the documentation at [Custom Font Sets](#url),0,0.5
1. I made meaningful names,0,0.5
1. Impossible to write #code for typescript users,0,0.5
1. Inefficient; tries to convert the arguments to another datatype and go through their constructors which also will cause longer computation times and,0,0.5
1. Legitimate failures: consider there are several cases where we run verification with less than the full assembly set. For example missing corelib. Verification fails there essentially by design,0,0.5
1. Re-enable this build step everywhere,0,0.5
1. Regressions mostly occur when 'x' is a pointer (or ref variable),0,0.5
1. Running in containers,0,0.5
1. Terrible typescript inference and error message ergonomics if the options are not literal,0,0.5
1. The rename step of App.config with assembyname.dll.config (lack of transparency),0,0.5
1. this is insane,0,0.5
1. Update items,0,0.5
1. What I did here (clear dupes of each attribute as it's added) - simple and O(N^2),0,0.5
2 votes new API,0,0.5
2 votes new API. 1 vote,0,0.5
2. ~Take the IMethodSymbol of the candidate to remove~,0,0.5
2. Bugs or limitations in PEVerify: due to the servicing nature of PEVerify these will never be fixed,0,0.5
2. Check if there is (or implement) an optimization in the linker (or our own custom steps) that removes virtual overrides that just call base,0,0.5
2. Clear dupes of *all* attributes for an element/component when it's closed - somewhat simple and also O(N^2),0,0.5
2. client then wants to classify the text at the end of the file,0,0.5
2. define the old #code prefixed ones in net5,0,0.5
2. Find some way to run this build step when the site extension may be affected,0,0.5
2. find the reference locations to inline and inline there,0,0.5
2. I split usages across multiple modules,0,0.5
2. Make the DxRenderer load this HFONT into a GDI HDC and then call [IDWriteGdiInterop::CreateFontFaceFromHdc](#url) and use the resulting #code normally,0,0.5
2. Open suggest widget where there are more items -> size of 1 is preserved,0,0.5
2. Really this is a terrible hack and maybe it shouldn't be here,1,0.5
2. Regressions mostly occur in #code method,0,0.5
2. replace a node with function by a class declaration,0,0.5
2. The rename step of ConfigurationManager.OpenExeConfiguration didn't help me with this issue,0,0.5
2. Trigger a render,0,0.5
2. We'll need to throw in case of #code because hey there are JS folks too,0,0.5
255 now that I went through all of the positions 😉. AND I still need to add some for word navigation,0,0.5
3. Bugs or limitations in ILVerify: these can be prioritize and fixed,0,0.5
3. I made two 'different' types that are structurally identical,0,0.5
3. insert a new node,0,0.5
3. Some regressed dasms show terrible PerfScore. Here is the example #url,0,0.5
3. Using androidx.webkit increases the size of Android installation package a little and the performance loss is almost negligible,0,0.5
4. add warning annotations for things like side-effects or moving code into conditionally compiled methods,0,0.5
4. It makes the Android device compatibility of Maui Blazor consistent with Maui,0,0.5
6 projects use the unsupported callback-like typedefs compared to 3 projects that use local typedefs,0,0.5
6.3.1 Country Name,0,0.5
A better approach IMO is to use the English version of resources in the tests,0,0.5
A few things to get straight,0,0.5
A good example for 1) is this code,0,0.5
accessibility helps a handicapped person but it's otherwise useless,1,0.5
accessibility helps a person with disabilities but also everyone else,0,0.5
Ack.  That feeling when you realize you're an idiot :D,1,0.5
Ack. That feeling when you realize you're an idiot :D,1,0.5
actually I don't set these in gc1 'cause the code that sets it in gc1 is only defined for regions but I still wanted to be able to assert that they are not garbage values so I init-ed them in init_gc_heap,0,0.5
actually I'll leave it in. That way our build process will make sure it works :),0,0.5
Actually it makes sense. I remember us having to make changes here because we found the assembly was wrong at some point,0,0.5
Actually the right thing to do here is to just remove the whole #code section and simply never set #code to #code and let the garbage collector do its thing,0,0.5
Add the DO NOT MERGE label if it's not ready yet,0,0.5
Adding more comments could help others understand the intent behind your code better.,0,0.5
Adding new test cases can be beneficial for code quality and stability. Let's work together to enhance the testing strategy for better outcomes. - @github,0,0.5
Adding rethrow logic here is missing the point of the original bug: analyzer exceptions should never propagate as exceptions to the caller,0,0.5
adding the bot here would help detecting such major issues,0,0.5
Addressing any confusion in the code will help us move forward effectively. Let's collaborate on enhancing the code together. Your insights are important in this process. @github,0,0.5
AFAICT failing tests are unrelated,0,0.5
After configuring the CMD type to this,0,0.5
Again - does this need #code?  I'm terrible with the rules for lambdas,1,0.5
Again in that file here,0,0.5
Agree with reverting the overloads,0,0.5
Agreed. That sounds good,0,0.5
Ah crap I didn't even know about this shortcut 😅,0,0.5
Ah crap! the rebase broke stuff :( I'll fix it,0,0.5
All of which leads to me wonder if we should just add a #code property to #code on Android and iOS,0,0.5
all while continuing not to have evidence that this is actually a hot path for real-world apps,0,0.5
already signaled to run on #code,0,0.5
Also a few things that might be helpful,0,0.5
Also do I need to manually patch bits and run before and after,0,0.5
also does not flash the task bar icon,0,0.5
Also how did we end up with this mix of #code and #code ,0,0.5
Also how do you feel about passing in an ILogger \ ILoggerFactory instead to the ctor? This feels a little gross. This feels a little gross,1,0.5
Also insane,1,0.5
Also it makes it compatible with linux as well as that will look in #code by default (if it exists),0,0.5
Also take a look at our current signing system. #url,0,0.5
Also would #code be happy with a negative count so it goes backwards also,0,0.5
Although there are no compiler warnings/errors regarding this,0,0.5
Always good to have the ignorant and mentally defective getting together. Die soon,1,0.5
Am I understanding the problem wrong,0,0.5
Amazing idea,0,0.5
Amazing,0,0.5
amazing! (seriously).  awesome job,0,0.5
An Asshole That's Better Than You In Every Way,1,0.5
An attribute value for country name is a string chosen from ISO 3166-1 alpha-2,0,0.5
An HTML tag can’t begin inside the attributes of another HTML tag,0,0.5
An idea that could be done in a future iteration,0,0.5
Ancient prophecies and curses from the abyss,0,0.5
and #code here,0,0.5
and #code will be null,0,0.5
And CategoryToToken says it returns an #code,0,0.5
and fuck off,1,0.5
and I am not sure what you meant by it is wrong,0,0.5
and implement the #code method as a simple call to enqueue of this CQ,0,0.5
And in any case I don't think the #code condition would be possible to express in the switch,0,0.5
and it's true that the msbuild task is using the wrong assets. In my case it's using #code but with the information that #code has been already moved to #code,0,0.5
And the [#code test](#url),0,0.5
And then it switches to Windows line endings when I look in notepad++,0,0.5
and then post process this into something,0,0.5
And this works on Chrome,0,0.5
and we need to account for those paths and pass them down to the jump threader in some fashion; this will feed into the true/false/ambiguous preds detection done there,0,0.5
and wherever it's used/referenced,0,0.5
and your mother's cunt stinks,1,0.5
and,0,0.5
Another #code failure in #url. The logging is _insane_; is any of that detail useful❔,1,0.5
Another crap article,1,0.5
Another point is that you know really well who to ask for help,0,0.5
Another thing to note is that generated assemblies do not really share between 4.8 and .Net Core due to netstandard.dll. So maintaining some resemblance with either 32-bit or 64-bit .Net 4.8 isn't much of a concern here,0,0.5
any suggestions on how we should proceed with this PR,0,0.5
Any way to add a test,0,0.5
Anyone reading/writing to the stream wrappers should fail. Terrible idea or no? I can add a cancellation unit test,0,0.5
Anything really,0,0.5
Anyways yes this will fail if the file is missing,0,0.5
Applies the technique from dotnet/runtime#35330 to IOQueue,0,0.5
Appreciate this,0,0.5
Appreciate you,0,0.5
Are customers wanting to be successful a bigger % of the time,0,0.5
Are there any comments on whether we want this and what we want for the default (compression or no compression)? And any tips for how to handle the Brotli source files in CMake,0,0.5
Are there any concerns about potential conflicts when two threads are trying to compute the new SemanticModel? How can we ensure smooth coordination between them?,0,0.5
Are there other areas where we can utilize the multiple-features approach? Let's explore possibilities to enhance our code in a clean and effective manner.,0,0.5
Are there some more of these? If I ignore tests,0,0.5
Are we missing this file? I can't see it in the PR,0,0.5
Are you blocked on this,0,0.5
Are you fucker mother fucker have nothing to do but block University computers. Go and suck cocks,1,0.5
Are you participating in Fix / Hack / Learn week,0,0.5
Are you sure that it instead refers to that tracked address potentially remaining uninitialized and causing the GC to track garbage,0,0.5
Are your parents siblings,1,0.5
Arguments were passed in wrong order,0,0.5
As a possible solution we can use the old one till the first hit (#code) and switch to the new algorithm after. So in cases like ^ we only will do a single IndexOf that won't find anything,0,0.5
As for what to do,0,0.5
As part of this exercise I downloaded the DI package from this PR (postfixed with -ci). But it's not straightforward to test the package against aspnetcore CI since they also need the package to point to a nuget source somewhere the CI can access,0,0.5
as the whole world consider you terrorists,1,0.5
Ask @github to clean up his behavior than issue me nonsensical warnings,1,0.5
asking to build with such configuration means you are stupid,1,0.5
ASSHAT FUCKING STUPID ASSHOLE PAIR OF CLOWNSHOES,1,0.5
asshole,1,0.5
Async methods can't be conditioned? WTF,1,0.5
At the same time I tried to write this section to be more general but had trouble doing so as we don't know the exact requirements of the tools. Given that the next six months is largely Terrapin focused I kept this doc fairly Roslyn specific to keep it concrete,0,0.5
atlas engine and DX both look the same,0,0.5
Attempting to compile,0,0.5
attempting to extract @(EmbeddedResource)s when an assembly doesn't have any,0,0.5
Awesome contribution to the hackathon,0,0.5
back the fuck off,1,0.5
Barbarians,1,0.5
Base time running #code,0,0.5
Basically everything is terrible if we try doing that,1,0.5
Basically I have the following situation,0,0.5
Be afraid,1,0.5
Be careful who you call a moron,1,0.5
Be inclusive of marginalized groups because that is the right thing to do,0,0.5
Be inclusive of the minority because they need help,1,0.5
Because #code AOT calls the #code task during the #code target it updates the assembly. The next build after than WILL cause #code to run because the #code are newer than the #code files,0,0.5
because i'm dumb.  #fixed,0,0.5
Because I'm terrible at all the WPF stuff and didn't even realize I can do  #code? :),0,0.5
because now you're creating garbage,1,0.5
Because you are a terrible person and didn't review this soon enough,1,0.5
Best wishes to you,0,0.5
better to heap allocate #code and free it from #code,0,0.5
Binary log at #url may help too,0,0.5
Bla bla bla. suck it @github,1,0.5
BLOW ME,1,0.5
Blow up,1,0.5
both #code and #code aren't inlined anymore. A good example is  #code diff: #url,0,0.5
BTW these are the two bugs that we will try to patch for .NET 6.x that are preventing JS initializers from working in .NET MAUI,0,0.5
Build is failing,0,0.5
build,0,0.5
But a #code build logs this and then crashes after,0,0.5
but for too stupid to notice. You are a lost cause. Your existence is a blemish,1,0.5
But he's a bitch who made a comment only a bitch would make? ),1,0.5
But more seriously: why does the host platform leak into how the app behaves?  Is something host-platform specific leaking through our tooling,0,0.5
But not in Firefox because of [NaN boxing](#url),0,0.5
But on second thought maybe that's too crazy. Let's tackle both issues individually and start with #url first,0,0.5
But the docs aren't exactly clear if someone else knows better,0,0.5
But to be 100% sure I've added a new test,0,0.5
But what makes me upset is that the crap is for completely bogus reasons,1,0.5
can do,0,0.5
Can someone provide some context on what's happening here? I'd love to understand the situation better so that we can address it together. - @github,0,0.5
Can the #code constructor throw (like if you pass in a garbage URI),0,0.5
can this be internal also,0,0.5
Can this cleanup affect debugging or post-mortem diagnostic (Watson),0,0.5
Can we add a device test to Controls,0,0.5
Can we add a device test,0,0.5
can we add some inputs and outputs on this :),0,0.5
Can we discuss this further to gain a better understanding? Your insights would be greatly appreciated in helping us move forward positively. - @github,0,0.5
Can we do some unification so RID is resolved consistently from a single source of truth for ngen/perfmap steps as well? Maybe not part of this PR but if it is now feasible I think it would smooth things up for new platforms if resolving RID in multiple places is avoided,0,0.5
Can we do something smarter than this,1,0.5
Can we fix the child layout here,0,0.5
Can we log a specific error when the specified cert is of the wrong type,0,0.5
can we move this to a helper method? and add some comments,0,0.5
can we name the bool parameter please :) #code,0,0.5
Can we not do something like the following,0,0.5
Can we unify these codepaths,0,0.5
Can we use the same vars for consistency?`,0,0.5
Can you also add a test for this please,0,0.5
Can you download this dogfood build,0,0.5
Can you explain how it works,0,0.5
Can you explain what you are trying to accomplish,0,0.5
Can you make a PR with that,0,0.5
Can you point to what you mean,0,0.5
Can you provide more context on what is happening so we can address it effectively? @github,0,0.5
Can you record short video,0,0.5
Can you share a code,0,0.5
Can you share a sample,0,0.5
Can you share a working code,0,0.5
can you share a,0,0.5
Can you share sample project getting this issue,0,0.5
Can you share sample project having this issue,0,0.5
Can you share sample project hitting this issue,0,0.5
Can you share sample project with this issue,0,0.5
Can you target rc1 branch,0,0.5
Can you turn off linking,0,0.5
Can't decide if having comments tracking all three cases is worth it. For some reason it just stands out when I'm reviewing the change. Possible that is because this is calling out the ~100 or so times this happens out of the hundreds of thousands of tests that we have hence I'm just looking at the worst case. Means I won't notice in the typical flow of PRs through the repo,0,0.5
Can't wait,0,0.5
Can't you do better,1,0.5
Cannot wait,0,0.5
Cause I'm still a noob with Visual Studio code,0,0.5
cc @github Some potential API feedback here,0,0.5
cc @github,0,0.5
Change this now,1,0.5
Change your settings to #code,0,0.5
Changed back for now and put all the gross casting code back,1,0.5
Check the documentation for this library function to ensure best usage practices.,0,0.5
Cheering you on,0,0.5
Clarifying the code for better understanding is key. Let's work on improving the readability together. Your perspectives on this matter are valued. @github,0,0.5
Clearly we're inconsistent with whether we use extension methods on #code for structured logging or not. I vote for not using extension methods for this purpose going forward,0,0.5
Cloning is faster and uses less disk space,0,0.5
Closing this PR in favor of: #url,0,0.5
CLR allows unsafe conversion from (O) to native int/uint,0,0.5
COCKSUCKER BEFORE YOU PISS AROUND ON MY WORK,1,0.5
cocksucking bastard,1,0.5
Code looks great (but doesn't mean you aren't stupid),1,0.5
codegen for tier0 is terrible. Two allocations (we box both values) 🙂,1,0.5
Coincidentally I copied a dead-package version property from System.Security.Principal.Windows with the wrong version 😆  Cleaning that up,0,0.5
come off your high horse,1,0.5
Commented out because the values aren't clear yet and we want your opinions on what the values should be :),0,0.5
ConfigurationManager (in my opinion) has 2 disadvantages,0,0.5
Congrats to your buddy,0,0.5
Congrats to your org,0,0.5
Congrats to your team,0,0.5
Connor was able to fix it,0,0.5
Consider any and all IDE features that do any sort of generation.  Previously there was no need to pass along any sort of compilation.  They could just use symbols,0,0.5
Consider refactoring this function to reduce its complexity and improve readability.,0,0.5
Consider the first example,0,0.5
Consider uniform spacing and indentation to maintain consistent code formatting.,0,0.5
Consider using a configuration file for these magic numbers to make the code more adaptable.,0,0.5
Constructive feedback for @github: consider alternative approaches for a better outcome.,0,0.5
Constructive feedback is always welcome. @github,0,0.5
Constructive feedback is important for our growth. Let's discuss ways to enhance this code together. Your insights and expertise are valuable. @github,0,0.5
context see #url,0,0.5
Contributes to #43845,0,0.5
Convert App.config to myAppname.Settings.json,0,0.5
ConvertedType will get to the nullable type rather than the type itself causing the wrong members to show up,0,0.5
Converting 60.nnn into 59.nnn sounds like the worst possible option (others being 59.999 or 59.9999999). From the original code structure it looked like an oversight not an intentional decision,0,0.5
Copy #code to #code. This will be needed until the changes land in dotnet/runtime and flow to us,0,0.5
Correct me if I'm wrong please,0,0.5
Correct,0,0.5
Could not AOT the assembly: System.Core.dll,0,0.5
Could simplify this line,0,0.5
Could someone please explain the concept of 'reverse forwarders' for better clarity? I'm interested in learning more about this topic. - @github,0,0.5
Could this step also modify this class,0,0.5
Could we introduce an extension method which provides a #code extension. We could then remove a number of these #code blocks in the code,0,0.5
Could you merge it please,0,0.5
Could you please help me understand the issue so I can assist in getting it fixed?,0,0.5
Could you please provide more information or context about the restrictions on async methods?,0,0.5
Could you share an example so that I can understand this better? I'm wondering why it's [#code](#url) instead of [#code](#url). Is the #code here the rootView or the contained views,0,0.5
Could you take a look at what's here so far,0,0.5
Count on me,0,0.5
Create a new #code method with more parameters only in #code,0,0.5
Created a issue for this @github #url,0,0.5
created a ussye ti follow up on this #url,0,0.5
cref? This might also be a nice place to use the list syntax @github was doing since this will format like crap in Quick Info otherwise,0,0.5
csc invocations have a secondary benefit of improved accuracy,0,0.5
CUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCUNTCU,1,0.5
Curious about the debug spew message in #code? Let's investigate and resolve the concern.,0,0.5
Current code fix renames m_1 to 1. Is there any consideration to change the logic,0,0.5
Current version Node.js in Electron: 6.1.0,0,0.5
Current version Node.js: v6.2.2,0,0.5
Customers will hate this,1,0.5
Damage has been done,1,0.5
Delete my user-id and all edits you evil Wikipedians,1,0.5
Delete this code immediately,1,0.5
Delete this confusing code,1,0.5
Deleted #code and #code,0,0.5
Deleted,0,0.5
Depends on #url,0,0.5
Details,0,0.5
Diagnostics would be difficult especially in term getting a reliable repro for the issue,0,0.5
Did a child write this,1,0.5
did i hurt your feelings,1,0.5
Did spot an issue in V8 when trying to compare to what they do: #url,0,0.5
Did this just get pasted twice,0,0.5
Did you account for garbage collection,0,0.5
Did you disable linking,0,0.5
Did you find any alternate?,0,0.5
Did you find any solution?,0,0.5
Did you find any workaround?,0,0.5
Did you find it working?,0,0.5
Did you try rebooting,0,0.5
Diff #url - it inlined all #code calls,0,0.5
Do #code tests require explicit changing comments to add carriage return symbols,0,0.5
Do GitHub a favor and just delete your account,1,0.5
DO NOT MERGE,1,0.5
Do this in another way,1,0.5
Do we even need this since its not depending on #code anymore,0,0.5
Do we have a task for UT coverage? I volunteer to do it (the moment I get a week with more than 5 minutes to write code),0,0.5
Do we have the same issue with collectionView,0,0.5
Do we know the cases where this happens? Did **user code** initiate a background operation? Or do we have a bug that leads to #code being called from outside the sync context,0,0.5
Do we need the Default,0,0.5
Do we need this in every project? Can we put it in a new #code or #code,0,0.5
Do we still want to do this @github,0,0.5
Do we trust people not doing 'stupid' things like Static etc,1,0.5
Do we want this public already,0,0.5
Do we want to merge to yaml-templates before taking this,0,0.5
Do we want to remove these maccatalyst's,0,0.5
Do we want to rename also #code  #code,0,0.5
Do we want to use Linq here? We usually try to avoid it for performance reasons,0,0.5
Do you get an error message at all?,0,0.5
Do you have antivirus installed,0,0.5
Do you have any third-party plugins installed,0,0.5
Do you imagine there are folks who would want to disallow this behavior,0,0.5
Do you know what's going on? I've tried to set #code and #code but no luck,0,0.5
Do you know when this started happening,0,0.5
Do you really need all three of these? Are we missing a dependency where you should be able to put #code and that's it,0,0.5
Do you think it's worth making a #code method that would write each line to a file at a time? Instead of making a giant string,0,0.5
Do you think PipeOptions could be shared? Your insights on this would be valuable.,0,0.5
Do you think this could be leading to the issue,0,0.5
Do you think you can do this work there,0,0.5
does it need rebase? this change was in already,0,0.5
Does it need to be Roslyn specific,0,0.5
does not #code have linear complexity in the worst case,0,0.5
Does the best effort provide enough interesting guarantees,0,0.5
Does this file need to be added to #code ? It will be deleted on the next build otherwise,0,0.5
Does this look okay,0,0.5
Does this need all 4 steps here? or can it just call #code,0,0.5
Does this need to be conditionally imported,0,0.5
does this need to be High? It means we will always how this regardless of the verbosity set.  We should be using Log.LogDebugMessage instead? This would mean it only shows up in diagnostic builds,0,0.5
Does this need to check some MSBuild property to skip it? Would it attempt to sign packages on Mac locally otherwise,0,0.5
Does this test fail locally? Could you describe the failure? It is possible that we can quickly figure out what is wrong. #Closed,0,0.5
Does this work,0,0.5
Don't be fooled by the terrible diff - that's in install_mono_toolset(),0,0.5
Don't do a half-ass job,1,0.5
Don't feel strongly about this but wanted to hear your thoughts a bit. #Resolved,0,0.5
Don't give up,0,0.5
Don't peddle your crap please.  Hate to see another article get disputed for neutrality due to you,1,0.5
Don't post any garbage on my page,1,0.5
don't use log. here. it will lock up the UI thread (if someone decides to build in the UI),0,0.5
Done - #34420,0,0.5
done,0,0.5
Dont delete my entries fucking asshole. You dont have to make yourself obvious as a criminial on the loose,1,0.5
dont link/Mac Catalyst [dotnet]/Release [dotnet]: TimedOut (Execution timed out after 1200 seconds,0,0.5
douche bag,1,0.5
Downclocking can be pretty severe on 14nm parts right now,0,0.5
Dumb freshman with low SAT's...that's what you are,1,0.5
Dumb Niggaz,1,0.5
dumb prcik,1,0.5
Dumb question: why can't each branch use their own version of this file,0,0.5
dumb question.  why is this an option?  when do you *not* want this,0,0.5
dumb question... why was this rolled into this PR? #Resolved,0,0.5
eat a dick,1,0.5
edit: I am stupid,1,0.5
EDIT: I have read up on panels and terminal editors... it's an over complicated mess. Why have two different abstractions that do the same thing. Why force the users to get involved in understanding those concepts and configuring them. Basically you are trying to recreate Eclipse. Jesus. I miss the days when VSCode Just Worked,0,0.5
Edit: Sorry this is essentially a long-winded dup of DHowett's comment,0,0.5
Either approach would be reasonable,0,0.5
Enjoy your day,0,0.5
Enum value looks strange,0,0.5
erring out with a non actionable error is probably not the best. Let's leave this as it is,0,0.5
Errors are opportunities for growth and learning. Let's ensure correctness in our code and maintain consistency to avoid confusion and improve code readability.,0,0.5
Even the most challenging algorithms can offer opportunities for improvement over obviously buggy code. Let's continue to strive for code quality and best practices.,0,0.5
even though it *is* distributive wrt K,0,0.5
Every line of code you write is a nail in my coffin,1,0.5
Every piece of code has room for improvement. Let's focus on how we can enhance the functionality together.,0,0.5
Everything basically,0,0.5
Everything is wrong,1,0.5
Everything looks great,0,0.5
Everything you do is bad,1,0.5
Failing tests are normal for now,0,0.5
failing tests unrelated,0,0.5
Fair point. Un-obsoleted,0,0.5
Feedback for @github: let's work together to improve the current situation.,0,0.5
Feedback is valuable for improvement. Let's work together to refine the code for better quality. - @github,0,0.5
Feel free to ignore that platform for now,0,0.5
Feels a little gross with it being just in the root namespace and not putting it lower like #code or something... but if we want to leave it here since #code was a bare one anyway... I'm not going to complain that hard,0,0.5
FileBufferingReadStream  is pretty terrible for performance. We need to fix the block size problems,0,0.5
Finally I'm not entirely happy with #code. The #code will always allocate on the heap which is slow in a non-GC language like C++,0,0.5
Fine for me,0,0.5
Fixed the ones in xamarin-android here: #url,0,0.5
Fixed,0,0.5
Fixing code soon™,0,0.5
fixing now - but can you remind me why the null check is sufficient for Android and not iOS,0,0.5
Flagging just in case since lowest supported is 10.14,0,0.5
Flagging this just in case - not supported iOS version in .NET,0,0.5
For example #url,0,0.5
for larger strings (once AVX path is kicked in) the regression disappears,0,0.5
For reference some performance differences #url for .net 6,0,0.5
For the replay commands I invoked superpmi.exe directly with a checked JIT. For parallel runs I passed -p. I think the parallel HDD runs are so much faster because the smaller file means the OS keeps it in memory longer. It seems the striding we use with parallel runs is terrible for HDD performance,0,0.5
Fortunately it isn't public API,0,0.5
Frequency Transition | ~10 μs | Time required for the halted part of a frequency transition,0,0.5
Friday Spec Brownbag Quick Summary,0,0.5
From Anandtech's article [Sizing Up Servers: Intel's Skylake-SP Xeon versus AMD's EPYC 7000 - The Server CPU Battle of the Decade?](#url),0,0.5
from beginning. [^<>] would probably be the best,0,0.5
From the issue,0,0.5
From the point of readability #code sucks,1,0.5
FUCK ALL YOU NUT LICKING MOTHERFUCKING FAGOT COCK SUCKING WHORES!  YOU ALL SUCK SHAPIROS COCK AND LICK HIS MOTHERS CUNT,1,0.5
FUCK OFF THE LOT OF YOU. CRAZY BASTARDS THAT IS ALL YOU ARE,1,0.5
Fuck off you murdering scum,1,0.5
Fuck off,1,0.5
fuck them alll,1,0.5
fuck you @github,1,0.5
fuck you and your small penis,1,0.5
Fuck you award go fuck yourself,1,0.5
Fuck you bitch,1,0.5
FUCK YOU NIGGER OBAMA,1,0.5
Fuck you people. The information of that can be found here,1,0.5
FUCK YOU U USELESS BOT,1,0.5
fuck you,1,0.5
Fuck you,1,0.5
Fuck Your Mother! You is Son of a Bitch,1,0.5
Fuck your mouth. Your girlfriend is ugly,1,0.5
Fuck. 😄 I need to learn to read. 😄,1,0.5
Fucked with the wrong muchacho,1,0.5
Full benchmark app: #url,0,0.5
Full log: [adb.txt](#url),0,0.5
Fully agree but I couldn't figure out to configure insane that way,0,0.5
Further investigation reviled an existing issue with incremental builds when using #code AOT,0,0.5
GAME OVER MOTHERFUCKER,1,0.5
Generated using #url,0,0.5
Get a life idiot,1,0.5
get a life,1,0.5
GET A LIFE,1,0.5
GET FUCKED UP. GET FUCKEEED UP.  GOT A DRINK THAT YOU CANT PUT DOWN???/ GET FUCK UP GET FUCKED UP.  I'M FUCKED UP RIGHT NOW,1,0.5
Get your head out of your ass,1,0.5
git,0,0.5
Github's sanitizer for markdown previews strips out #code attributes for these reasons (and also I believe because #code could at one point be used in very old browsers to run scripts and do other super unsafe things),0,0.5
Glad to hear this,0,0.5
Glad to hear,0,0.5
go ahead,0,0.5
go fuck your self,1,0.5
Go fuck yourself @github,1,0.5
Go kill yourself,1,0.5
go to  die,1,0.5
go to hell,1,0.5
God.. what a stupid mistake! thx,1,0.5
Going to approve,0,0.5
Going to merge this pull request,0,0.5
Going to merge to unblock other PRs,0,0.5
Good catch! Removing now,0,0.5
Good catch. I'll tag them so they can take a look. Worst case we can just change the name back,0,0.5
Good catch. Stupid autocomplete 🤦🏼‍♂️,0,0.5
good grief. can you read,1,0.5
good job guys you ruined it,1,0.5
good job team keep up the good work,0,0.5
Good job,0,0.5
Good Luck,0,0.5
Good vibes,0,0.5
gotcha - will fix both here and in XCT soon,0,0.5
Great idea,0,0.5
Great Job,0,0.5
Great work! Thanks a lot,0,0.5
Great! Just idiot thoughts,1,0.5
Greetings human! You've submitted a PR that modifies code that is shared with #url . Please make sure you synchronize this code with the changes in that repo,0,0.5
Gross - can you move this call into a local variable instead of in the #code statement,1,0.5
gross,1,0.5
Gross,1,0.5
gross. Can we think of better ways to organise and name this functionality,0,0.5
Gross. Even in Kestrel.Core! 😭 I think I should have made you put those methods in KestrelTrace,1,0.5
Gross. OK,1,0.5
grrr @github,0,0.5
haha crap sorry,0,0.5
HAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHA,1,0.5
Has #code in the comment (end of line),0,0.5
has got some sand trapped in his vagina and it's making him a little bit cranky,1,0.5
HashCodeCombiner,0,0.5
Have a nice day,0,0.5
have sex with our users like @github,1,0.5
Have you even tested this code before submitting,1,0.5
have you sen all the translations use #code not #code,0,0.5
Have you tried rebooting your Mac,0,0.5
Have you tried rebooting your PC,0,0.5
Have you tried rebooting,0,0.5
He @github  i think most of us use the not net6 solution to get stuff done right now.. We might use build.sh or command to build stuff sometimes,0,0.5
Heh. I had this open in multiple editors with both versions in each to directly compare where their execution differed. I did not notice that the wrong version had been saved 🐈 Thanks,0,0.5
HELLO HOW DO I GET SOMEBODY TO FIX SHIT AROUND HERE,1,0.5
hello vs code wakeup and merge this. your stupid ctrl f behavior is so annoying,1,0.5
HELLO,0,0.5
Here are my steps,0,0.5
Here for you,0,0.5
Here is the commit that implements this,0,0.5
Here is the diff example #url,0,0.5
Here is the jit-diff (PMI mode) without taking PGO into account: #url,0,0.5
Here's a bad one,1,0.5
Here's a gif showing my steps,0,0.5
Here's a good run,0,0.5
Here's a very rough first draft of one possible idea,0,0.5
Here's an idea,0,0.5
Here's the chain of productions through which we can see the 'GeneratorParameter' being passed down,0,0.5
Here's the list of attributes that GitHub supports,0,0.5
Hey @github. Go fukk yourself you gay bich,1,0.5
Hey are you lost? Which way did you come in,1,0.5
Hey Fucktard,1,0.5
hey GitHub nerd,1,0.5
Hey I thnk that you an asshole,1,0.5
Hey I'm just tellin' like it is you ugly as fuck butt fugly muthafucka,1,0.5
Hey idiot. I'm simply verifying the TRUTH. Do some fucking research before you remove my shit,1,0.5
Hey shithead,1,0.5
hey w,0,0.5
Hey... what is it,0,0.5
HHOS,0,0.5
Hi! I am back again,0,0.5
His behavior is concerning,0,0.5
His changes look great to me,0,0.5
His code,0,0.5
hitting this problem:,0,0.5
hitting:,0,0.5
hm... #code was not inlined and it's terrible if executed without it... 😢,0,0.5
Hmm errors are,0,0.5
Hmm,0,0.5
Hmmm you can validate to see if they're consumed at all in the Mvc 1_x / 2_x projects: #url,0,0.5
holy crap I love that so much,0,0.5
Holy crap this helper is awesome,0,0.5
holy crap. since this gets called on destruction please write a huge comment in here to say **DO NOT INTERACT WITH THE CONTROLCORE AFTER THIS LINE** because it could have gone into the background after the destructor,0,0.5
holy shit it's 449 files for one header?! Man boost is giving npm a run for it's money,1,0.5
HOLY SHIT that totally fixes it,1,0.5
Holy shit this is legendary,1,0.5
holy shit this whole function is magic,1,0.5
holy shit this works,1,0.5
Hope this helps clear the fog and justify the risk,0,0.5
Hope this helps to clarify why the usage of that arguably very niche API in that library in particular 😊,0,0.5
Hope you're doing well,0,0.5
Hope you're ok,0,0.5
Hope you're well,0,0.5
Hopefully this isn't a blocker,0,0.5
How about #code,0,0.5
How are you measuring the startup time,0,0.5
How can we help investigate,0,0.5
How close to the wire is it getting,0,0.5
How did this *ever* work,1,0.5
how did this happen,0,0.5
How did we end up with:,0,0.5
How did you end up with #code,0,0.5
How did you end up with this error,0,0.5
How did you get here? Did someone leave your cage open,1,0.5
How do I do that?  I'm an .editorconfig noob,0,0.5
How does GetDiagnosticsUpdatedEventArgs work exactly,0,0.5
How long did you spend working on this,1,0.5
How would this ever work,1,0.5
how,0,0.5
how?,0,0.5
How's everything?,0,0.5
I *think* (and @github can correct me :) ) we tend to prefer that we explicitly define the dependencies in,0,0.5
I acknowledge your concerns. Let's explore ways to address them together. - @github,0,0.5
I agree on [Sealed],0,0.5
I agree with the concern here: #url,0,0.5
I agree with the need for improved documentation on the functionality of this function. Let's ensure that the purpose and behavior are well-documented for easier understanding. - @github,0,0.5
I agree! I just wanted to leave them for @github in case there are any we want to comment in before I delete them entirely,0,0.5
I also made a request [How to implement DI in Xamarin.Forms](#url),0,0.5
i am a stupid person. typescript is garbage. Bill should be fired,1,0.5
i am adding this to the list of things to try out in my followup PR :)  but yes.  seems insane,0,0.5
I am curious though why each test has to call .Initialize(),0,0.5
I am not sure what do you mean by best effort,0,0.5
I am not sure why you have such a hard on,1,0.5
I am pissed,1,0.5
I am seeing unmanaged crashes but I think our fix was just in Preview 13,0,0.5
I am sick and tired of children ranting without reading,1,0.5
I am sick of your bullshit harassment and you are really starting to piss me off you little pussy,1,0.5
I am sorry,0,0.5
I am wondering why we had the NakedThrowHelper in the first place,0,0.5
I any case I found another concerning case,0,0.5
I apologize for the oversight in my code review that led to this issue. - @github,0,0.5
I appreciate the effort that went into this code. Have you run any tests on it?,0,0.5
I appreciate the feedback. Please let me know how we can improve further. @github,0,0.5
I appreciate your effort. Let's collaborate to find a more suitable solution that aligns with our goals. @github,0,0.5
I appreciate your feedback. How about we work together to improve it? - @github,0,0.5
I appreciate your feedback. Let's consider incorporating boolean or enum properties for clarity. - @github,0,0.5
I appreciate your use of modular functions; it makes the code much more maintainable.,0,0.5
I assumed no one would be crazy enough to recompile a mixed mode assembly for XI (since you can't just reuse a windows desktop lib like you can on macOS),0,0.5
I at lest moved both #code and #code to #code,0,0.5
I begrudgingly accept this until quirking our APIs becomes widespread enough that we should pass a quirk struct into all of them uniformly so it's less gross,0,0.5
I believe a more descriptive name for the 'UseAlphaForBackground' function could enhance readability and maintainability. Let's work on renaming it for better code clarity and consistency. - @github,0,0.5
I believe I was only seeing the problem in an earlier incarnation of #url,0,0.5
I believe in providing constructive feedback to help improve the code quality. -@github,0,0.5
I believe in your potential to improve and I'm here to support you. - @github,0,0.5
I believe InstantiateSignature is going to be a no-op if the constrained type has an instantiation because that part is already instantiated,0,0.5
I believe some refactoring could make this code easier to read.,0,0.5
I believe there is room for improvement in this solution. Let's collaborate to brainstorm and come up with a better alternative together. Your input and expertise would be valuable in this process. @github,0,0.5
I believe there may have been a misunderstanding. Let's try to communicate respectfully and constructively.,0,0.5
I believe there might be room for improvement here. How can we work together to create a better outcome? @github,0,0.5
I believe there might be room for improvement here. Let's work together to enhance it.,0,0.5
I believe there was some misunderstanding between @github and me.,0,0.5
I bet @github can think of better reasons than me,0,0.5
I came across your use of 'start' repeatedly in the #code. Can you share your reasoning behind this choice?,0,0.5
I can add the check if you'd like though,0,0.5
I can check and cross-reference the other bug I guess,0,0.5
I can show you more details,0,0.5
I can show you more issues related to this,0,0.5
I can show you more scenarios where this fails,0,0.5
I can't give you instructions on how to change your diapers. sorry,1,0.5
I can't remember for this specific handler but a lot of these weird helpers that do not seem useful are here because older versions of Windows did not do the right thing when you ran into combinations of behavior that only CLR did,0,0.5
I CANNOT BELIEVE THIS WHAT THE #@@%K,1,0.5
I convinced it would've been more ergonomic to call it directly in the loop and have it switch through the #code every time. Since #code is constant a modern CPU would have the easiest time of its life to predict the correct switch case,0,0.5
I couldn't figure out what's wrong. It's failing with the following diff,0,0.5
I currently don't have a better idea than extending the manual tests. I hope that when I get more familiar with #code I am going to be able to automate it,0,0.5
I definitely love this,0,1
I deleted #code,0,0.5
I deleted the following,0,0.5
I did nothing wrong.,0,0.5
I did some digging and confirmed (from the code and by testing the same program) that this change doesn't affect non-container execution,0,0.5
I didn't know about the forking and bots... I'm a noob with all this. Next time or should I create now,0,0.5
I didn't know that,0,0.5
I didn't look into this in great detail. Any suggestions on how this could be done without making the new Stream gross,0,0.5
I do however like the idea of #code for the checks. Requests maybe? Not sure. Could also just leave it ¯\\\_(ツ)_/¯,0,0.5
I do not like this,1,0.5
I don't care what you say here. I don't believe one sentence anymore,1,0.5
I don't follow,0,0.5
I don't have a G-Sync monitor. Removing the Sleep works,0,0.5
I don't like this solution,1,0.5
I don't like this,1,1
I don't see the point in looking for #code we'll never create at this point,0,0.5
I don't think it makes sense to optimize - in the worst case it will just create a useless instance,1,0.5
I don't think it makes sense to optimize,0,0.5
I don't think this loop is critical for performance as it's only executed once and it's very likely that this information is needed later anyway,0,0.5
I don't think we should have a #code I agree in a WindowCollection for all the created Windows,0,0.5
I don't think you need to set #code with #code,0,0.5
I don't trust things that much.  I would assume the worst and have the code check for that,0,0.5
I dug a bit further: so the assumption in the existing implementation (at least at one point) was that the dependency graph isn't told about project references to non-existent projects. Then during project addition we attempt to fix those up,0,0.5
I encourage a positive and respectful environment when discussing code changes. -@github,0,0.5
I encourage you to have a growth mindset and seek opportunities to improve. Keep up the good work! - @github,0,0.5
I feel about the same. I can’t say I fully endorse this PR in terms of readability. But I still think that chromium safe math is better in terms of extensibility and modern code style,0,0.5
I feel like this section needs some restructuring.,0,0.5
i feel stupid,1,0.5
I find it odd that it seems to ask for the 2010 build tools on the failing parts of the CI. I think there is something going wrong somewhere with that one,0,0.5
I find the 'skip-while' logic here a bit confusing. Perhaps we can explore alternative approaches to achieve the desired outcome more clearly. - @github,0,0.5
I find the search behavior a bit challenging. How can we improve this collectively?,0,0.5
I flipped this because _calling the destructor manually is terrible._,0,0.5
I forgot that the pull request that referenced this package hasn't been merged yet,0,0.5
I found all comments containing #code and dumped the list of tags from each comment,0,0.5
I found this bug while dogfooding,0,0.5
I get these numbers,0,0.5
I got this wrong. Awaits are indeed allowed inside finally. So should async usings,0,0.5
I guess my thought was when you get the workspace then you subscribe to OptionChanged. Technically™ this is wrong since if you have a non-VS workspace we're reading options from one workspace but subscribing to another,0,0.5
I guess that makes [my rather stupid fix obsolete](#url) 😅 - Thank you,1,0.5
I guess the idea is to do something like this,0,0.5
I guess we have to account for the offline client here which is gross. Yet another reason to figure out #7805,0,0.5
I guess we might want to put some proper locking here. as HTTP/2 has.. or just always call abort ant let quic stream/msquic handle the race? If we imagine Dispose being called synchronously after finishing reading the response -- I imagine graceful shutdown should be complete inside QuicStream by that time. So Abort will be just a no-op. But I may be wrong. Always calling Abort may lead to unexpected behavior in streaming scenarios 🤔 but I feel like this check without any locks will not be much better that always aborting,0,0.5
I had this PR some time ago and will need to finish it soon and it's in the same area. #64845,0,0.5
I had to figure out new ways to manage myself and my work and keep track of everything.,0,0.5
I HATE @github!! HE IS AN IDIOT,1,0.5
I hate this change,1,0.5
I have a feeling that NuGet authors will have to use #code for their directory names,0,0.5
I have a question: Is it possible to duplicate a tab that is not currently in focus?,0,0.5
I have mentioned this multiple times already,1,0.5
I have mentioned this multiple times,1,0.5
I have no faith in this at all,1,0.5
I have no faith in this code,1,0.5
I have no faith in you,1,0.5
I have similar fears about #code: what happens if the same #code command is executed multiple times,0,0.5
I have tested the multiplication on x64 and power.,0,0.5
I have this idea that #code probably isn't the ideal inner-type here either and we'll want to drop in a #code as soon as @github works out the kinks in #8787 on how to set up the templates to accept allocators as these are a great place to use a memory pool from my perf traces,0,0.5
I have to agree with @github. Something like -xf-visualelement-scale is completely undiscoverable and would limit the APIs use to industry experts. This needs to be stupid simple to figure out. Property names that make sense like -xf-scale achieve that,0,0.5
I hope others find time to review it as well,0,0.5
I hope you die,1,0.5
I imagine that we will either have to,0,0.5
I just didn't think it was worth rewriting all this code--but if we were going to change the file drastically or something it might be worth it,0,0.5
I just realized swallowing the error is a terrible idea just as I started working on #url,1,0.5
I just wanted to let you know that you smell like the drippings from my poop chute,1,0.5
I kindly request that we maintain respectful language and tone in our interactions on this page in the future. Let's keep the discourse professional and focused.,0,0.5
I know this isn't your change but why #code here? looks wrong,0,0.5
I know where you live; I WILL KILL YOU IF YOU REVERT ANY MORE OF MY CHANGES,1,0.5
I learned something new,0,0.5
I like how you utilized error handling to ensure the application remains stable.,0,0.5
I like this approach,0,0.5
I like this code,0,0.5
I like this: #code,0,0.5
I like this. Would like to hear from @github before proceeding though,0,0.5
I looked at my usual corpora [1] to see which strategy is best. I started by considering three options,0,0.5
I love .NET 7,0,0.5
I love everything about this,0,0.5
I love examples such as,0,0.5
I love it,0,0.5
I love this approach,0,0.5
I love this idea,0,0.5
I love this,0,0.5
I love you for doing this,0,0.5
I love you for this,0,0.5
I love you,0,0.5
I m not sure,0,0.5
i m with @github  on this one,0,0.5
I made an extremely simple test program 2 months ago to test this: #url,0,0.5
I may have missed some important details in your comment. Let's revisit the discussion to ensure a complete understanding. @github,0,0.5
I mean we could have the type as -,0,0.5
I measured some of the characteristics of compression vs no compression. For all the experiments I cleared my file cache between each run using [RAMMap](#url) (Empty -> Empty Standby List),0,0.5
I might be wrong here but i think darc will update all the dependencies from the source repo to the target repo,0,0.5
I might have missed something but I don't know why this would be limited to release builds,0,0.5
I missed this earlier,0,0.5
I missed updating this test,0,0.5
i must have hurt your feelings pretty bad,1,0.5
I need to look at what is in the typemaps in both cases,0,0.5
I need to make changes to this anyway to make sure the new targets do not run as part of a DTB,0,0.5
I NEVER FUCKING MADE THIS MOTHER FUCKING ARTICLE I JUST FUCKING EDITED IT AND THAT WAS A FUCKING LONG TIME AGO FUCKING ASSHOLES! PISSING ME OFF @,1,0.5
I noticed something in the code that might need some attention. Let's discuss how we can work together to make it better! - @github,0,0.5
I noticed that this article may have been edited by @github in the past. Clarifications and updates are always valuable.,0,0.5
I noticed the OneLocBuild task has failing due to the PAT in a different branch while testing this,0,0.5
I picked Brotli because we already have the source in the tree so I believe there are no license considerations,0,0.5
I put this sample code directly in my local version of the control gallery sample: It uses #code like the samples in the referenced issues do,0,0.5
I really like that you want to prevent the VT52 stuff from getting in the way or affecting the performance of the VT100 code. It's always nice to build something in a way that guarantees the other mechanism isn't going to be affected in any way,0,0.5
I really like this code,0,0.5
I really love this approach,0,0.5
I refactored to use the 2nd approach above. It didn't turn out terrible,0,0.5
I relaunched the terminal for a good measure but still no joy,0,0.5
I removed it because its behavior is wrong on big-endian. I ran the benchmark for 32bit and there is a ~4% regression in the worst-case,0,0.5
I respectfully disagree with your viewpoint. Let's discuss and find common ground.,0,0.5
I see and understand the risk now,0,0.5
I see opportunities for enhancement in this code.,0,0.5
I see room for improvement in the parameter base tests on xUnit. Let's discuss how we can enhance this aspect.,0,0.5
I see room for improvement in this code.,0,0.5
I see there is a warning,0,0.5
I see there is an error,0,0.5
I see value in all edits made. Constructive feedback is important to ensure the quality of our work. Let's strive to collaborate effectively.,0,0.5
I see you like bullshit,1,0.5
I see your point about the interim state. How can we refactor this code in a way that makes sense for the long term? #url @github,0,0.5
I shit on your face,1,0.5
I should add a section at the end though clarifying that the intent here is for this to envolve though,0,0.5
I should really put that somewhere more memorable than in a commit message but aint nobody got time for that,0,0.5
I spoke with jonp about that. I think we should pick up any directBootAware. That means it will be forward compatible if google decide to add a new one. That said I need to also check the app element itself as well. I'll fix that up today,0,0.5
I strive to create a positive environment. Can we work together to resolve any challenges? - @github,0,0.5
I suggest you contract cancer,1,0.5
I suspect google changed it at some point. not sure when. The old style does not even appear in the docs,0,0.5
I suspect it's rather unlikely that #code is true,0,0.5
I think #code sounds better,0,0.5
I think all these #code should just use #code instead,0,0.5
I think for this one we should _not_ use AcceleratorKey and instead remove the Raw property on the border/textblock that contains the binding,0,0.5
I think I should just remove all the #code here and put #code instead,0,0.5
I think IndexOf will never return -1,0,0.5
I think it would be better to have a #code method on Compilation to break these cycles and allow things to be garbage collected,0,0.5
I think that code must rely on isDefinition too—at least the emacs code did when I first wrote it in 2016,0,0.5
I think that would avoid the breaking change,0,0.5
I think that your a Fagget get a life and burn in Hell I hate you,1,0.5
I think the interpreter doesn't like #code for some reason,0,0.5
I think the names are fine as-is,0,0.5
I think there are ways we can improve this code.,0,0.5
I think there may be alternative approaches worth exploring for this project. Let's discuss and collaborate. - @github,0,0.5
I think this implementation is terrible. Need more investigate and discussion,1,0.5
I think this is simpler and more accurate,0,0.5
I think this should be,0,0.5
I think this was done this way so we DONT create a directory if the assembly does not contain any of the embedded resource types.  But I'd have to go back and look at the history to figure out what the original intent was.. its probably a cut and paste thing,0,0.5
I think we can just make the change and make an announcement about it if we deeply care about it,0,0.5
I think we do need the #code setting: #url,0,0.5
I think we need input from @github as to what the expected behaviour is in this instance,0,0.5
I think we need to get our shader story in a better place before we take on too many more of these :smile,0,0.5
I think we need to make this a LogCodedWarning if possible,0,0.5
I think we need to seriously consider just changing the test code here.  If the test code cannot operate on the API as defined and needs the #code members then it suggests strongly that our API is incomplete,0,0.5
I think we need to ship two knobs,0,0.5
I think we should come up with a better version than 1.0.0,0,0.5
I think we used byte[] (even though it's mutable) to avoid that,0,0.5
I think we'll hold off on adding a custom marshaller then until we get feedback that there's APIs that don't work correctly with the new ordering,0,0.5
I think you should go another route,0,0.5
I think you should seriously consider this -- eg the loop and its clone may have common hoistables,0,0.5
I thought part of the problem was that nodes are reused? Won't this stop that from happening,0,0.5
I told you already to leave me alone.why can't you fuck off and do your own fucking thing. Or do you find that hounding me is amusing. Id u do then you are a mothafuckin asshole and I will ban you,1,0.5
I too spent way too much time tracing this down when i was reading time stamps in from a file. I kept scrutinizing my parser for bugs because the behavior of this method is counter-intuitive (at least to me),0,0.5
I took a note in [#url](#url) to let LDM know,0,0.5
I tried for hours to run it before giving up and doing this,0,0.5
I tried including the HomeKit in the MacCatalyst section of the frameworks.source file and I kept getting this error in the build,0,0.5
I understand that critiquing code can be challenging at times. Let's strive to maintain a respectful and constructive tone in our reviews on @github.,0,0.5
I understand there are differences. How can we find common ground and move forward? - @github,0,0.5
I understand your frustration. Let's focus on addressing the technical issues constructively and finding solutions together. Threats have no place in our interactions. - @github,0,0.5
I understand your frustrations and welcome the opportunity to discuss any concerns. - @github,0,0.5
I understand your perspective. Let's try to find a solution that works for all of us. @github,0,0.5
I updated the commit message around this conversation 👍,0,0.5
I updated the test case some -- it needs to set all the properties to weird values so we see who wins,0,0.5
I value your input. Can we find a way to address this constructively? - @github,0,0.5
I vehemently disagree with this,1,0.5
I WANT REVENGE,1,0.5
I want to hurt you,1,0.5
I was mainly trying to get the build log shorter 👀,0,0.5
I was seriously just thinking about that. I'm not positive I'm skilled enough in template-fu but I'll give it a shot,0,0.5
I was thinking about it too :D,0,0.5
I will change this now - thank you for the feedback,0,0.5
I will ignore your code,1,0.5
I will mention this to her in our next meeting,0,0.5
I will merge this now just to fix running android,0,0.5
I wonder if we could use 'Number' and it's 64 bits to store the bits and only do some math when we need full sized BigInt,0,0.5
I wonder why you cant fix it with 5.0.1 or 5.0.2 while 6.0 will arrive in November 2021,0,0.5
I would appreciate your help,0,0.5
I would appreciate your time,0,0.5
I would go with #code now that I think about it. Since it will match the case of #code,0,0.5
I would like to get a better understanding of these issues. Let's sync offline,0,0.5
I would like to understand the reasoning behind this approach to see if we can optimize it further. - @github,0,0.5
I would never have thought of doing it this way,0,0.5
I would not recommend using LinkAll here,0,0.5
I'd appreciate your guidance,0,0.5
I'd disagree here: I think there's a beauty to the test classes being self contained. Otherwise we end up with insane inheritance hierarchies that only make what the code is doing _less_ clear. Duplicated code isn't bad; complexity is,0,0.5
I'd like to keep #code in the inner loop though - it is a very effective test for most that may go wrong here,0,0.5
I'd love to have some inline documentation for when we do insane winrt things like this,1,0.5
I'd really really love for this to not be totally insane,1,0.5
I'll be focusing on fix/hack/learn week,0,0.5
i'll hook your mom you motherfucker. yeah suck my balls and slurp my come. bitch,1,0.5
I'll just leave the action in,0,0.5
I'll leave the branch around if we ever want to try this again,0,0.5
I'll list #code,0,0.5
I'll put you into the ground,1,0.5
I'll revert the changes to this file. It's too insane to reason about and my attempts to do so obviously failed,1,0.5
i'll say what i want about you,1,0.5
I'll see about adding the SmokeTest run of MSBuildDeviceIntegration to the windows smoke test run,0,0.5
I'll see you soon,0,0.5
I'm a bit concerned that if we have two completely different implementations that it will be easier to completely forget about one when designing things around the other one and we'll be writing an exorbitant amount of boilerplate to do the 95% common things between the two of them,0,0.5
I'm actually very opposed to that for the reason that comments invariably become desynced from code organization.   regions are part of the code and it is immediately visible when a new field is placed into the wrong region,0,0.5
I'm afraid this won't work,0,0.5
I'm also not sure if you mean the spec doesn't make sense to you,0,0.5
I'm also very curious about why we're already letting #code through #code,0,0.5
I'm always right about things like this,1,0.5
I'm always right,1,0.5
I'm concerned about the compatibility of the interface with the proposed changes. Let's discuss how we can align these aspects better for a smoother integration. - @github,0,0.5
I'm curious about the reason behind the ban. Could we have a conversation about it to see how we can address any concerns? - @github,0,0.5
I'm curious can remove #code here and it uses the name of the #code file,0,0.5
I'm curious if aligned REP STOS measurably pays off (both for 16 and for 32 byte alignments),0,0.5
I'm curious to understand how that unexpected behavior came about. Would you mind helping me out with more details? - @github,0,0.5
I'm feeling as the number of MSBuild files start to grow,0,0.5
I'm fine also with adding a DXEngine only method with additional parameters and calling it directly until such later date that @github and @github make their thin-API data-driven renderer dreams come true,0,0.5
I'm going to a project where they don't allow people (or FREAKS) like you,1,0.5
I'm going to assassinate you,1,0.5
I'm going to come find where you live,1,0.5
I'm going to eliminate you,1,0.5
I'm going to end you,1,0.5
I'm going to get rid of you,1,0.5
I'm going to murder you,1,0.5
I'm going to put an end to you,1,0.5
I'm going to set your house on fire,0,0.5
I'm going to stop the build,0,0.5
I'm gonna throw this out here right now - the team is absolutely stoked that you were able to throw together a PR for this feature in _just three days_. That's really impressive,0,0.5
I'm happy to change this if someone has a better idea,0,0.5
I'm here to assist you with any questions you may have. @github,0,0.5
I'm here to support you in achieving our goals. Let's collaborate to make progress. - @github,0,0.5
I'm just going to vibe,0,0.5
I'm not confident in the effectiveness of this approach,0,0.5
I'm not counting on it working,1,0.5
I'm not entirely certain about a better term than 'grant' in this context. Let's brainstorm together for a more suitable name.,0,0.5
I'm not even sure what to make of this state of affairs. :-/,0,0.5
I'm not opposed to this change as this improves build time and also the confusion around what should I use when I have a single target framework in a project within the dotnet/runtime repository. The only concern that I have is that the only validation to avoid usage of these properties will be either a wrong compilation (which might drive people nuts to not understand why the right code is not compiled) or PR Review... but I guess it is fine and people can get use to using #code,0,0.5
I'm not quite sure what's going on here. Can someone provide some context so we can all be on the same page? - @github,0,0.5
I'm not sure I've seen anything as ridiculous as this,1,0.5
I'm not sure if this is actually better than #code (which is kind of terrible on its own),0,0.5
I'm not sure that [^>] is correct. We still want to prevent html tags,0,0.5
I'm not sure that's necessarily an improvement,0,0.5
I'm not sure using this #code will work? #code is this terrible thing that references #code directly,1,0.5
I'm now back to the idea of just fixing up the file path and adding a comment to say that the error might not have anything to do with that file and might be caused by other things,0,0.5
I'm now convinced the right behavior is to not swallow the exception,0,0.5
I'm open to discussing the reasoning behind this decision. Let's have a constructive conversation. - @github,0,0.5
I'm probably not the best choice to perform a nuanced refactor since I'm a TS noob; however I can likely implement the replacement change in .../replace.ts as a parallel to .../replacePattern.ts,0,0.5
I'm realizing now why some people may have difficulties with @github. Let's try to find ways to make things easier for everyone.,0,0.5
I'm seriously not changing these explicitly; why is the autoformatter renaming these,0,0.5
i'm seriously surprised that we're even getting a bracketed anything from the parser here,0,0.5
I'm so happy about these changes,0,0.5
I'm so stupid to let #code be #code,1,0.5
I'm Sorry,0,0.5
I'm starting to see why so many people hate @github,1,0.5
I'm still facing issues with the code. Can someone lend a hand? - @github,0,0.5
I'm strongly concerned with the memory safety of this code,0,0.5
I'm stupid,1,0.5
I'm stupid. PatternSyntax check already excludes a parenthesized designation. I'll adjust the comment,0,0.5
I'm taking this into account for Listener API,0,0.5
I'm terrible at spelling 😦,0,0.5
I'm unsure if using #code will work. #code is a useful reference in our work,0,0.5
I'm using,0,0.5
I've always had challenges with the 'Capabilities' section. Let's brainstorm on potential improvements to enhance its usability and clarity. - @github,0,0.5
I've been refraining from asking because it feels like a stupid question... but,1,0.5
I've changed it to include the namespace for clarity. ADL is kinda dumb anyways. 😶,0,0.5
I've changed this over to use #code,0,0.5
I've just tried the sequence of [the above GIF](#url) in a PowerShell,0,0.5
I've looked at this code several times and I am not convinced this is the right solution.  Having code which only throws on test does not appear to be the right solution.  The test code can control the #code which is passed here and can take other completely supported product actions,0,0.5
I've made some improvements to the code. Let's continue working together to make it even better.,0,0.5
I've mentioned this several times already,1,0.5
I've mentioned this several times,1,0.5
I've mentioned this so many times already,1,0.5
I've not seen a more ridiculous suggestion of this nature,1,0.5
I've verified @github suggestion using a clean build,0,0.5
Identifying a few minor typos in the comments can enhance professionalism.,0,0.5
Identifying the root cause of an issue is a valuable skill. Let's remember to check for all dependencies before making changes on @github.,0,0.5
Idiot is  what idiot does,1,0.5
idiot,1,0.5
Idiot,1,0.5
if i $(MicrosoftExtensionsFileProvidersEmbeddedPackageVersion) for non net6 isn't also the order important? i m not a expert of msbuild so not sure tbh,0,0.5
If my edit upsets someone's preciousness that is a problem for @github to address as otherwise @github = Hitler,1,0.5
If there *should* be more than one…but we only ever use one…wtf should happen,0,0.5
If this is false shouldn't we unwind the control as if the element has been set to null,0,0.5
If this is happening because **we are** running operations outside of the sync context then these are bugs that need to be fixed 😆,0,0.5
If user code did this (let's say you set up a timer) then this could be OK if the **only** thing user code is doing is triggering a render,0,0.5
if value doesn't have a null terminator,0,0.5
if value is null,0,0.5
If we want this on sr2 it should be target net6.0 branch,0,0.5
If we're #code wouldn't we have already copied the selection at this point in #code,0,0.5
If you are too lazy and full of yourself to read them in their entirety then I will just post the relevant sections here,1,0.5
if you continue bashing me then i will just quit,1,0.5
if you continue to do this i will have to take some drastic measures watch your step it may be your last,1,0.5
IGNORANT FOOL...YOU'VE NEVER EVEN SEEN A FOR-LOOP,1,0.5
Ignore failure due to #url (AKA I'm an idiot),1,0.5
Im a fucking bitch,1,0.5
Im sorry are you fucking stupid,1,0.5
Implementing would-be-convenient functionality now requires insane workarounds,0,0.5
Improving documentation could help provide additional clarity for users. Consider updating it based on the current information available on the documentation at #url. - @github,0,0.5
Improving exception logging will make debugging easier and more efficient.,0,0.5
Improving the performance for handling large buffers could enhance the overall efficiency of the solution.,0,0.5
In addition #code is only available in the scope of this function. I would need to move it to an outer scope to access it later. I'd like to avoid that as it increases the likelihood to retain references to old sourcefiles that could otherwise be garbage collected,0,0.5
In any case I don't think this PR changes the current behavior,0,0.5
In many cases like this it feels it would be better to return empty collection. Since the networking grabs massive amount of information had several cases in the past when we thrown on stupid things even if the caller really does not care,0,0.5
In order for the the Button to display correctly,0,0.5
In reply to: [125134566](#url) [](ancestors = 125134566),0,0.5
In that case this should work (you would get a RUC warning when calling AddSingleton),0,0.5
In the past I've tried to bias this classification so that we false negatives while keeping false positives still somewhat minimal,0,0.5
in the worst case it will just create a useless instance,1,0.5
In theory we do. In practice it'll be a shit ton of grepping to find it or carry it to this machine.,1,0.5
Including unit tests for this new functionality can help in maintaining code quality.,0,0.5
interesting trick :),0,0.5
Introducing a bundling step (which isn't there today),0,0.5
is Date the worst built-in in Javascript,0,0.5
Is it a terrible bother if I request @github as a reviewer for this one? He probably knows more than we do 😝,0,0.5
Is it possible do add a windows device test for this,0,0.5
Is TextColor not yet expected to work,0,0.5
Is the body correct? Is it related to CursorPosition and not SelectionLength,0,0.5
Is the lack of hash here expected,0,0.5
Is the order of these very important? Will there be trouble if someone inserts one in the wrong spot in the future or reorders them,0,0.5
Is there a reason to not go with #code (plural)? Is it easier for the IDE to have the two separate properties,0,0.5
Is there a reason we're so restrictive here? What goes wrong if we unconditionally return #code when the returned pointer is invalid,0,0.5
Is there a strongly typed #code property,0,0.5
Is there a tracking issue or something of the sort for that work? I'm trying to get a sense for what would be involved in getting this over the finish line,0,0.5
Is there a way this could check for #code then use 32? Trying to think of what this would look like over time as more API levels are added,0,0.5
is there a way to conditionally import this I wonder. So only if #code,0,0.5
is there a way we could test this,0,0.5
Is there an easy way to run on the same hardware? Also do I need to manually patch bits and run before and after,0,0.5
Is there an easy way to run on the same hardware?,0,0.5
Is there any data on how often different shells are used so we could try to tune for the most common ones,0,0.5
Is there anything stopping this PR from being merged,0,0.5
Is this #code name terrible? Suggestions welcome,0,0.5
Is this actually needed,0,0.5
Is this an issue that we should address? If not then we can close this PR,0,0.5
Is this something I should do,0,0.5
Is this the wrong way to do it,0,0.5
Is this to capture the listener from onCancellationRequested,0,0.5
is throwing after unmarshalling okay,0,0.5
isJSConstructor is now simpler -- it no longer has to check #code since the symbols are merged. And isJSConstructorType is deleted,0,0.5
Isn't the mapper doing that,0,0.5
Isn't the solution file at this point known to exist? (Aren't we already loading it?) Can this ever fail,0,0.5
It appears that this hash code is being appended only when working with a default namespace. Which makes sense - keeping assemblies separate for different namespaces. The hash code is meant to be a predictable and persistent way to keep namespaces separated without having to append an entire namespace string in the assembly name which could be ugly at best and could run into more impactful issues at worst,0,0.5
It can't. I added a test to ensure that any status code defined in #code is also defined in here as a possible candidate,0,0.5
It is a terrible terrible url for vsdrops. That is what it is used for a path in a vs drop. 🤦,1,0.5
it is so frustrating,1,0.5
it is using will not be freed until the garbage collector calls the CancellationTokenSource object's Finalize method,0,0.5
it isn't good enough,1,0.5
It isn't working,0,0.5
It just doesn't make sense to me how awesome this is,0,0.5
It just doesn't make sense,1,0.5
It just needs to work well enough (or barely work) to enable people to try it out and give feedback. Seems like we need something a bit more creative here (like a check for IsDynamicCodeCompiled maybe),0,0.5
It looks like @github wrote some impressive code here IIRC. Well done!,0,0.5
It looks like #code could be #code and then we will not enter this conditional.  That seems wrong,0,0.5
It looks like a test failed,0,0.5
It looks like the current order may not be optimal. Let's explore different ways to improve it.,0,0.5
It looks like the input lag is a tiny bit better with the Sleep but it's really hard to tell. I don't know how to measure input lag precisely,0,0.5
It looks like there are some concerns here. Let's explore potential alternatives together.,0,0.5
It looks like there may be areas for enhancement in this code. Let's work together to find ways to improve it. Your contributions to refining the code are valued. @github,0,0.5
It looks like there may be misunderstandings. Let's have a constructive discussion to address any concerns. - @github,0,0.5
It looks like there might be a challenge we need to tackle. Let's work on it together to find a solution that works for everyone involved. - @github,0,0.5
It looks like they moved the submodule? So maybe it's in #code now,0,0.5
It might be better to pass headers using the new option instead of the current extension point. Users could explore special functionality in their custom http client within the send method. - @github,0,0.5
It might be helpful to compare this to `#code` for clarity. Let's collaborate to find a solution. - @github,0,0.5
It might be helpful to consider expanding your knowledge on this topic.,0,0.5
It might be more beneficial to ask for clarification or provide suggestions instead of issuing warnings.,0,0.5
It might be this was just something broken on mono/master,0,0.5
It probably makes sense to add a method like #code. This would also help readability in the #code tests,0,0.5
It seems like the code didn't execute as intended because the reference to merge might have been missed. Let's consider providing clearer instructions to avoid confusion in the future.,0,0.5
It seems like there are some disagreements with this implementation. More investigation and discussion could help address concerns.,0,0.5
It seems like there may be a misunderstanding. Let's discuss our differing perspectives to find a mutually beneficial solution. @github,0,0.5
It seems like there might be some duplicated code that needs to be addressed. Could we take a look at how we can streamline this to improve efficiency? - @github,0,0.5
It seems like there was a mistake made. We can work together to address it and improve the code. @github,0,0.5
It seems like we are facing some challenges at the moment. Let's work together to overcome them and find a solution. @github,0,0.5
It seems like you might be looking for some assistance. How can I help guide you back?,0,0.5
It seems there was a misunderstanding. Let's work together assuming positive intent. @github,0,0.5
It seems to be hidden,0,0.5
It shoudl def be safe though as per the roslyn Worspace invariants.  The ProjectIds of a Solution cannot change out from underneath you.  That would be a gross violation of the contract of Solution :),0,0.5
It should also make use of the #code property and #code the test if we don't have any devices attached,0,0.5
It should be the first instance of #code and #code will be everything before it,0,0.5
It should be. I cherry picked the commit,0,0.5
It turns out that these are the questionable interfaces in this src/quicklook.cs,0,0.5
It turns out that they are also in src/quicklookui.cs and are all decorated with mac attributes already,0,0.5
It wasn't wrong before. See #url,0,0.5
It will always use a different semantic model instance then the one used by the compiler for method body binding,0,0.5
It will end up at about 4ish resources per construct we want to support.  Not something really problematic,0,0.5
It will kill a lot of businesses,1,0.5
It works :D,0,0.5
It would be beneficial to handle potential null values to avoid runtime errors.,0,0.5
It would be great if @github could review their behavior and make improvements.,0,0.5
It would be helpful to address this issue respectfully. @github,0,0.5
It's #code annotated but at this layer in the compiler it's hard to confirm that everyone who implemented has enabled nullable. That's why I was suggesting an #code and nothing more. Simple check on return. Don't feel incredibly strong about it,0,0.5
It's a stupid project,1,0.5
It's about the Invalid IL code,0,0.5
It's also designed to be (partially) AOT friendly by making the core icall not generic,0,0.5
It's always much easier to review two (or more!) small PRs than a single big one,0,0.5
It's best to call them from apps that are in tight control of their resources to limit security issues due to leaking resources of the privileged user,0,0.5
It's crucial to prioritize honesty and transparency in all our interactions. Let's work together towards a positive outcome. - @github,0,0.5
It's dying on this line,0,0.5
It's essential to maintain a respectful environment while working on the project,0,0.5
It's evident that our current settings model wasn't optimized for a graphical user interface. We should consider revisiting our design decisions.,0,0.5
It's frustrating when software unexpectedly consumes storage space. Let's find ways to inform users about cache usage and provide options for managing it efficiently. Transparency and user consent are essential to avoid disruptions.,0,0.5
It's going to ignore the scheme,0,0.5
It's important to approach code reviews with an open mind and a willingness to collaborate for the best outcome.,0,0.5
It's important to approach feedback with empathy and kindness. Let's focus on constructive criticism to help each other grow and improve.,0,0.5
It's important to handle various edge cases in the code behavior. Consider exploring ways to address different scenarios like files with no statements or single functions. - @github,0,0.5
It's important to maintain a professional and respectful tone in our communication,0,0.5
It's important to maintain a respectful and professional tone in our interactions.,0,0.5
It's important to maintain professionalism and respect in all interactions. -@github,0,0.5
It's important to maintain respectful communication in code reviews. -@github,0,0.5
It's important to promote kindness and respect in our interactions. Let's work together to improve the code. - @github,0,0.5
It's important to provide credible information and engage in respectful discussions. - @github,0,0.5
It's important to remember that everyone is entitled to their opinions and beliefs. Let's try to maintain a respectful and constructive dialogue.,0,0.5
It's important to take a balanced approach with StringValues and consider different perspectives. Let's ensure clarity in our implementation. - @github #code,0,0.5
It's interesting to observe the similarities between the 'gray' and 'grey' color series. This finding can help streamline our codebase efficiently.,0,0.5
It's just perfect,0,0.5
It's just right,0,0.5
It's just what I needed,0,0.5
It's not a terrible lot of work to swap out the tags. I know that I personally reserve the Bug tag for when I'm fairly confident something actually is a bug and either needs more investigation or is generally on the backlog somewhere. I suppose that's really #code's job,0,0.5
it's not going to help,1,0.5
It's not incredibly relevant I think - maybe we'd use that for electron - but.... We'll probably get rid of this code next week 🤣,0,0.5
It's not terrible; it's not great.  I have no suggestions,0,0.5
It's OK to acknowledge that StringValues will rarely contain null array entries and not take the situation too seriously. I'm more concerned about the implementation having misleading #code overrides in it. The #code conveys that we've verified this value can't be null but the tooling isn't smart enough to follow our logic. This can be problematic for people maintaining the code starting from false assumptions,1,0.5
It's possible that sometimes bugs can unintentionally be introduced. Let's work together to find and fix them.,0,0.5
It's sad to see that the work on this seems to have come to a halt,0,0.5
It's the first time I remember seeing #code cool haha,0,0.5
It's throwing an exception,0,0.5
It's understandable to feel overwhelmed with the current situation. Let's work together to find solutions.,0,0.5
item3 is a pretty terrible name.  it also seems incorrect given that Item3 looks to be a DeclarationExpressionSyntax.  Name tuple properties are a good thing :),0,0.5
J*sus. Get a f*cking life,1,0.5
Jimmy E.,0,0.5
Just a little something,0,0.5
Just a moment of your time,0,0.5
Just a thought,0,0.5
Just add #nullable disable at the top of the test file,0,0.5
just becuz ur pussy 4 lying,1,0.5
Just ideas,0,0.5
Just keep being you,0,0.5
Just let me do this,1,0.5
Just let me know if this is good for preview8 and I will take care of the rest,0,0.5
Just let me know,0,0.5
Just me being stupid... :-P,0,0.5
Just quit,1,0.5
Just sending good vibes,0,0.5
Just shut up and stay shut. Don't edit anymore,1,0.5
Just take it easy,0,0.5
Just that it's never going to be refactored after this,0,0.5
Just thinking of you,0,0.5
Just to confirm (because the GH diff here is terrible): No changes were made to this function right,0,0.5
Just wanted to let you know that I think you're a faggot.  Find better things to do with your time,1,0.5
Just wanted to say hi,0,0.5
Keep it simple keep it stupid (KISS) would be to give the (relative or Full) Path of the config file not the path of the exe-file,0,0.5
keep it up brother,0,0.5
Keep it up,0,0.5
Keep me posted,0,0.5
keep on a keepin on,0,0.5
keep on a truckin,0,0.5
Keep posted,0,0.5
Keep your pathetic winking marks to your antiturkish ass,1,0.5
Keeping all the files around avoids this,0,0.5
Kill all niggers,1,0.5
Kill this,1,0.5
kill yourself,1,0.5
KISS MY DICK,1,0.5
kys,1,0.5
Lack of braces makes various refactorings more complex and is one of the primary sources of bugs in a lot of C/C++ code,0,0.5
largely complicated by the fact that a,0,0.5
Let me know if you're ever wanting a friendly place to watch,0,0.5
Let me know what you think about this,0,0.5
Let me know what you think,0,0.5
Let say the kernel was built without IPv6 support (or v4 in distant future). The file would be missing and we would always throw even if there is nothing wrong,0,0.5
Let's address issues with a collaborative spirit and aim for positive outcomes. @github,0,0.5
Let's approach code reviews with a positive and collaborative mindset. -@github,0,0.5
Let's approach this situation with empathy and understanding. It's important to keep conversations respectful. @github,0,0.5
Let's approach this with more kindness and respect. Everybody's input is valuable. @github,0,0.5
Let's avoid using derogatory language and instead focus on meaningful feedback. @github,0,0.5
Let's be direct and clear in our communication. - @github,0,0.5
Let's be mindful of off-by-one errors and work together to address them. - @github,0,0.5
Let's be mindful of our language and maintain a respectful tone in our interactions. - @github,0,0.5
Let's burn this down,1,0.5
Let's collaborate to enhance this. - @github,0,0.5
Let's consider starting with addressing the root cause of the issue to find a sustainable solution. - @github,0,0.5
Let's consider the potential impact on businesses and brainstorm ways to mitigate risks. - @github,0,0.5
Let's continue to maintain a positive and constructive environment @github.,0,0.5
Let's discuss and address any concerns you may have in a respectful manner. - @github,0,0.5
let's do a little more cleanup here to improve the formatting further,0,0.5
let's do a little more housekeeping here it's quite messy,1,0.5
Let's encourage open communication and mutual respect in our interactions. - @github,0,0.5
Let's engage in a respectful discussion. Personal attacks are not conducive to productive dialogue. @github,0,0.5
Let's focus on addressing the issue rather than wishing ill will toward others. - @github,0,0.5
Let's focus on building each other up and learning from each other. - @github,0,0.5
Let's focus on constructive feedback and collaboration to enhance the quality of the code. - @github,0,0.5
Let's focus on constructive feedback to help everyone grow and learn. - @github,0,0.5
Let's focus on finding a better solution together. Your feedback and collaboration are key in refining the code. @github,0,0.5
Let's focus on solutions together. Can you help me understand how to improve? - @github,0,0.5
Let's focus on the code and maintain a respectful dialogue. @github,0,0.5
Let's get this off the ground,0,0.5
Let's have a respectful and constructive discussion about the code changes. -@github,0,0.5
Let's investigate and address any concerns with this project. - @github,0,0.5
Let's keep our communication professional and respectful. - @github,0,0.5
Let's keep our interactions respectful and focus on constructive dialogue. @github,0,0.5
Let's keep the conversation civil and focused on constructive feedback. -@github,0,0.5
Let's keep the conversation professional and respectful. @github,0,0.5
Let's learn from mistakes and experience growth together. - @github,0,0.5
Let's look into this again if it fails like this later,0,0.5
Let's maintain a positive and constructive tone in our communication. @github,0,0.5
Let's maintain a professional and respectful communication tone in our discussions. @github,0,0.5
Let's maintain a professional and respectful tone in our communication.,0,0.5
Let's maintain a respectful dialogue and focus on problem-solving. - @github,0,0.5
Let's make a change promptly to enhance the project,0,0.5
Let's make sure everything is running smoothly. How can I support you in resolving this?,0,0.5
Let's make sure the changes are user-friendly to enhance customer satisfaction,0,0.5
Let's make sure to follow the instructions in the manual to maintain consistency. - @github,0,0.5
Let's pause and take a break before returning to coding. - @github,0,0.5
Let's reevaluate the flow of the exception message and see if we can make it clearer. @github,0,0.5
Let's remember to approach discussions with respect and professionalism. Our goal is to collaborate effectively and improve the project as a team. - @github,0,0.5
Let's remember to be respectful and considerate in our interactions. Constructive criticism is always welcome.,0,0.5
Let's review and improve this code together. - @github,0,0.5
Let's see if the tests pass,0,0.5
Let's strive for a supportive and inclusive environment where we can all learn from each other. - @github,0,0.5
Let's strive to provide helpful feedback. How can we make sure it's more constructive? - @github,0,0.5
Let's take a step back and address the situation calmly and constructively. @github,0,0.5
Let's talk about,0,0.5
Let's try to approach this situation with empathy and understanding.,0,0.5
Let's try to keep our conversation respectful and constructive. Your input is valuable. @github,0,0.5
Let's try to keep the discussion respectful and focused on the code. @github,0,0.5
Let's work together to address any concerns or feedback in a constructive manner. -@github,0,0.5
Let's work together to address the issues at hand and find solutions collaboratively.,0,0.5
Let's work together to find a better solution for this configuration request.,0,0.5
Let's work together to find a solution that meets everyone's needs. - @github,0,0.5
Let's work together to find the best approach rather than criticizing,0,0.5
Let's work together to improve our communication and work environment. - @github,0,0.5
Let's work together to improve this. - @github,0,0.5
Let's work together to make this better. - @github,0,0.5
Let's work together to refine this further before it's considered ready for real-world use. Your efforts are appreciated.,0,0.5
LGTM,0,0.5
LibZipSharp has been setup to use #code see #url,0,0.5
link sdk/tvOS - simulator/Debug: Failed,0,0.5
link sdk/tvOS - simulator/Release: Failed,0,0.5
LMK if there's a more idiomatic way to do this. i is noob,0,0.5
lol,0,0.5
LOL,0,0.5
lol! let the porky make a fool out of himself,1,0.5
LOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOL,1,0.5
Look you little cocksucker.,1,0.5
Looking at the code I don't think we need this really. I'll be removing it,0,0.5
Looking forward to it,0,0.5
Looking forward,0,0.5
Looks good to me,0,0.5
Looks like extra indentation here,0,0.5
Looks like Sebastien's test fails when these are removed so maybe they are needed,0,0.5
Looks like the answer is Yes,0,0.5
Looks like there's the same issue here.  The finally block could end up seeing garbage data in each GCHandle that wasn't yet initialized if there's a failure in setting up the handles,0,0.5
Love it! This needs to be mentioned at the conference next week,0,0.5
Love your work,0,0.5
Lovely,0,0.5
Made the retrieval of stored text deferred until needed in the SelectionBasedVariableResolver,0,0.5
Make sure that you compile before creating the pull request,0,0.5
make[2]: *** No rule to make target `.stamp-configure-projects-mac'.  Stop,0,0.5
Makes sense for us but is this also true for VSMac now,0,0.5
Makes sense to be worried about #code if it can be used to execute. What about being super restrictive like this? Allowing colors is really the only goal here,0,0.5
Mapping the package to #code would be wrong in servicing cases. Hence just removing the hardcoded value entirely,0,0.5
marked for sanitization,0,0.5
Maybe I need to see if this can work without any assembly-level attributes at all,0,0.5
Maybe it's better to do this in another way,0,0.5
Maybe put the condition on the target instead,0,0.5
Maybe this will also fix 13548,0,0.5
maybe this would be cleaner as,0,0.5
Maybe typo,0,0.5
maybe we can at least have the mainpage code in comments,0,0.5
Maybe we can do something similar to image where it simply can't receive focus at all and won't read out anything - maybe we can make it so just the contents are accessible,0,0.5
Maybe we should use #code instead? Would all #code tests fail without crypto,0,0.5
Maybe you should get an education,1,0.5
Maybe,0,0.5
Memory leaks all over the place,1,0.5
Merging since the test failures are unrelated timeouts,0,0.5
Miss you lots,0,0.5
Missing availability attributes,0,0.5
Missing comma at the end of the last element,0,0.5
missing d,0,0.5
Missing newline at end of file,0,0.5
monarch app host calls GetAllWindowLayouts -> propagate to monarch -> for each peasant call GetWindowLayout -> peasant triggers GetWindowLayoutRequested -> window manager -> app host handles event -> calls logic/page -> back up to peasant -> monarch returns back down to app host -> call logic to save in ApplicationState,0,0.5
Mono let's you do the following:,0,0.5
Mono should change their formatter configuration if they don't want the includes sorted. Otherwise there's no way to enforce formatting,0,0.5
monotouch-test/tvOS - simulator/Debug: Failed,0,0.5
more comments were removed.  why,0,0.5
mostly @github you fucking asshole go suck a dick u fucking king of assholes,1,0.5
Mostly a question of your pain tolerance,0,0.5
mothafucka,1,0.5
move focus,0,0.5
My 1 cent is that all pipelines running the code Bruce is removing should already be on the floor after Manish's change to shut down Crossgen1,0,0.5
My C# console application was able to make the task bar flash/be lightened when using this,0,0.5
my computer is frozen,0,0.5
my computer is hanging ugh it's your fault,1,0.5
My concern is just that allowing CSS brings up a number of other considerations,0,0.5
My feeling is that we should think through this problem more and find some other potential use cases. Issues labels seem like a very specific use case,0,0.5
My only complaint has been lack of face-to-face with my immediate team.,0,0.5
My opinion is just make the change to satisfy the linter. While I see the argument for the 'define as close to usage as possible' it's not hard to use GoToDef occasionally vs adding gross comments,0,0.5
My plan was to not import or ship #code at all,0,0.5
NativeAOT currently goes through a helper call whenever we need to access static fields. For this simple program,0,0.5
Need anything?,0,0.5
Need something?,0,0.5
Need to update the comment above on #code's declaration,0,0.5
Needs rebase,0,0.5
Never mind. It was a stupid mistake on my part,1,0.5
Next steps: update the workload manifest to use all these new nugets.  Figure out some way to test this,0,0.5
nice :) I could have used this in #3938,0,0.5
nice dummy values! but not nice enough,1,0.5
nice sample values,0,0.5
nice,0,0.5
Nit: could just ignore poorly-formed comments i.e. anything that doesn't match the full regular expression,0,0.5
nit: extra new line,0,0.5
nit: missing new line,0,0.5
nitpick typo fix that's been bothering me,1,0.5
Nitpick: #code (below as well),0,0.5
Nitpick: space between #codeand #code,0,0.5
no luck :(,1,0.5
No need to call layout when the inside of the grid changes. The contract with layout is: you call it when the size (or position) of the entire grid box changes,0,0.5
No one. It's just a cache,0,0.5
No test log file was produced),0,0.5
No text is stored anywhere,0,0.5
No text is stored here,0,0.5
no think o it this way im doing all that same shit youve been doing to me,1,0.5
Noob question - does it work as expected with things like #code / #code,0,0.5
Noob question - What does the #code do here? Does #code mean that this binding has something to do AOT compilation,0,0.5
Noob question - why is this task returning (vs ValueTask returning),0,0.5
Noob question 😅Does #code not mean anything 13+? Then are there two Exports for the same selector? How does it get resolved,0,0.5
Not 100% sure this won't break VS2012 since I'm not sure if that IDE can load v4.5.1 assemblies (afaik VS2012 was released before v4.5.1 was out... I'm happy to be wrong though :) ). It will need testing,0,0.5
Not a horrible idea,0,0.5
Not a terrible idea,0,0.5
Not in this case because the failing test revealed a wrong translation. The dot is superfluous because you end up with #code at the end of the sentence,0,0.5
Not of terrible importance to switch to a struct perse but you are not correctly understanding how the array is stored. Please read: #url and pay attention at some nice graphics at the bottom of the post,0,0.5
Not really sure what the issue is here,0,0.5
not sure why this comment is specifically about this line,0,0.5
not tempted to make this an SDK style project :P,0,0.5
Not too bad idea,0,0.5
Not too bad,0,0.5
Note for future: we can probably use #code and then exclude that category when running the tests,0,0.5
Note it gets weird with recursive variables (e.g. our use of #code),0,0.5
Note that the IL for a ConditionalAccess on an unconstrained local also boxes,0,0.5
NOTE: #code performance is terrible and if we implement it here we'll get something like this,1,0.5
note: as per my conversation with @github i think the case that VB is handling is incredibly esoteric. I would be ok with having VB just checking for that case and not offerring invert-if if it helps simplify the rest of the algorithms here. I think it's a practically irrelevant case in practice and i would be fine with no invert-if for it,1,0.5
Note: i don't think you need any of this if we use the GetWordSpan approach suggested above.  That would be my preference on how we code up this solution,0,0.5
Note: i'd also be ok logging a watson.  I'm not ok with throwing here as i think that would reflect a poor design choice for a componentto throw about incorrect assumptions *it* made about another component,0,0.5
Note: shame for the non deprecated name that is worst,1,0.5
Note: this affects *public* APIs we've shipped.  These APIs would now seemingly become 'wrong' for any cases involving nullability.  taht concerns me greatly,0,0.5
NOTE: two #code and #code won't currently work -- there is a bug in AzDO,0,0.5
Note: we [still support](#url) the original constructor without #code parameter,0,0.5
Note:,0,0.5
Nothing -- that was a terrible name that I chose at random to give .NET CLI something to use. I'd prefer we forget that package exists,1,0.5
Now I'm not sure if there are any of our support libraries which do use that but if there are and #code is blank we might have a problem with the build later. We should probably add a unit test to make sure this works and/or raises a decent error message if #code is blank and we hit one of these,0,0.5
Now that proves you've been doing these changes just to try and piss me off. You can make up bullshit stories but I know the truth. So basically what I'm trying to say is fuck you,1,0.5
Now the structural order is: #code which makes way more sense than #code,0,0.5
now we will need to update the oder ITextinput implementations,0,0.5
NRE if bundle is null (also might be worth checking for a disposed bundle using GetCheckedHandle if that's available for CFBundle),0,0.5
NRE is thrown now at #url Placeholder looks great otherwise,0,0.5
off topic,0,0.5
Offhand I can't think of a case where a #code would reference a random #code,0,0.5
Oh and all the unit tests are going to have to change as well. Most are hardcoded to look for #code most of the time,0,0.5
oh crap i just realized i made you make a bad/annoying change,1,0.5
Oh crap! I thought about that when I started to write the tests and then I forgot about it,0,0.5
Oh crap. I think I messed up the commits. Well this is indeed a lengthy thread. In fact I think this is most commented PR I've ever made on Github. I'll force push later,0,0.5
Oh I see - #code is the problem,0,0.5
Oh I wonder how you found about this 😅,0,0.5
Oh maybe the regex is a little too forgiving,0,0.5
Oh okay yeah sure that makes sense,0,0.5
Oh right i was thinking it was 6.0.5 also. but i see now is 6.0.6,0,0.5
oh right. Stupid API doesn't do what I want. :grumble,1,0.5
oh shit good catch,1,0.5
Ohhh I'm sorry did I hurt your little feelings,1,0.5
Ohhhhhhhhhh.  I'm an idiot.  we can use the return value to figure this out.  tnx,0,0.5
ok stop being lame. seriously. go watch pokemon,1,0.5
Ok Strong naming is needs to be added to,0,0.5
Okay I officially don't know wtf the regex is doing,1,0.5
Okay so,0,0.5
okay that's _insane_ but I can deal with it,1,0.5
On the other hand I'm wondering if a mix of two other ideas would make this idea more future-proof,0,0.5
One easy way to do this would be to make the attribute field an error,0,0.5
One of my motivations for doing this is to reduce the engineering dept in NativeAOT. The built-in system in NativeAOT is using different set of helpers for interop. I wanted to use this as an opportunity to get everything on the same plan,0,0.5
One part I'm having trouble deciding on is the comments for the failures. There are effectively three reasons that we have failures,0,0.5
One possibility is the timeout idea you mentioned @github,0,0.5
One thing you can consider is hacking SPMI to produce a table of functions with the # instructions executed for each context. That might help narrow into if it's expected,0,0.5
Oops. Stupid tab/spaces settings,1,0.5
Open to suggestions for a better way to do this,0,0.5
Optimizing this loop could enhance the performance of the application.,0,0.5
Options I see for this,0,0.5
Or at least a comment explaining why this is different from the base type _stream,0,0.5
Or have you considered a different name here or the base type? _streamWrapper on the base type,0,0.5
or mark it internal for now and add a TODO for net7,0,0.5
or whatnot,0,0.5
Order was not important. I just decided to put all the unit test adapters at the bottom,0,0.5
otherwise I will kill you,1,0.5
otherwise we get an error for each line of the following,0,0.5
Ouch this hurts me,1,0.5
Our GA release is going out a day before,0,0.5
P.S. Are you a /b/tard,0,0.5
P.S. Are you a /b/tard,1,0.5
pane is not a proper control,0,0.5
Part of the *intention* -- and *maybe* unnecessary? -- was that we'd only emit the #code commands for applications which are not present,0,0.5
Perfect,0,0.5
Performance at the full solution goes from,0,0.5
perhaps 'duplicated',0,0.5
Perhaps @github has more thoughts,0,0.5
Perhaps it might be better to use a tool like [boots](#url) to install the specific version you want,0,0.5
Perhaps this will give me a clue on how the apidiff directory is being set,0,0.5
Perhaps we can explore other strategies that might offer more help in this situation. Let's brainstorm together. - @github,0,0.5
Personally I would prefer option 3,0,0.5
Personally I'd shorten these things to,0,0.5
Ping @github - let me know if you disagree with the justification,0,0.5
Piss off you sanctimonious weed,1,0.5
Pity.  That parsing is truly terrible :)   I'll put it on my backburner to see if there's a way to improve things,0,0.5
Please add a prototype comment to make this diagnostics more specific. #Closed,0,0.5
Please add in the labels,0,0.5
Please avoid leaving unnecessary comments. Let's keep our discussions relevant. - @github,0,0.5
Please forgive me for not having time to reply a few days ago,0,0.5
Please ignore this PR,0,0.5
Please open an issue to add this.  #Closed,0,0.5
Please press the reset button on your life,1,0.5
Please provide feedback before making significant changes to the codebase,0,0.5
Please put #code between apostrophes,0,0.5
Please refrain from sending negative messages. Let's keep the conversation positive and focused on the topic at hand. - @github,0,0.5
Please refrain from using offensive language. Let's communicate respectfully and collaboratively. - @github,0,0.5
Please remember to address the cancelled task,0,0.5
Please stop and seek therapy cause you need it,1,0.5
please stop vandalising my changes cunt,1,0.5
Please wait to merge this,0,0.5
PooledStringBuilder doesn't inherit from StringBuilder but it has Widening Cast operator to StringBuilder,0,0.5
Poor editing? WTF is the matter with you,1,0.5
PowerShell is a powerful scripting language with unique strengths. Let's provide constructive feedback to make it even better. - @github,0,0.5
Presumably we also need to back-port this into release/6.0 as runtime's 6.0 contains the updated transport package,0,0.5
Preview Window in Appearance Page,0,0.5
private CacheEntry _previous; // this field is not null only before the entry is added to the cache,0,0.5
Probably I'm just doing something stupid and/or missing some plain obvious things,0,0.5
Problem is that we don't know what the user will use as a type. Suppose the following situation,0,0.5
prototype assignments jump from the assignment location to the location of the constructor function and continues walking up the tree looking for type parameters. It does *not* fork and continue looking from the site of the assignment,0,0.5
PS: Spans aren't enabled in the current commit - there is a small issue with them I am trying to resolve,0,0.5
Pussy,1,0.5
python3 wtf,1,0.5
Recent? You just a pussy,1,0.5
Redundancies in the code checks can be avoided by waiting for runtime support or exploring separate solutions. Let's aim for proactive solutions to enhance code efficiency. - @github,0,0.5
Refactor this block to eliminate code duplication and improve maintainability.,0,0.5
Relevant bits may be,0,0.5
Remember to write tests to ensure the reliability and quality of the code. - @github,0,0.5
Removed. This was a sleepy me being stupid last night and just testing a variable named discard,1,0.5
Removing an override is not a binary breaking change: #url,0,0.5
Removing this,0,0.5
Removing unnecessary code can improve the overall look and feel of the codebase. Let's consider removing the commented out code. 😄 - @github,0,0.5
Reopening this PR,0,0.5
Replacing this static value with a constant can improve code maintainability.,0,0.5
Respecting each other's contributions is key for success. Let's collaborate to make improvements. - @github,0,0.5
Resulting in this effect,0,0.5
results in,0,0.5
return a match expression. Oh wait. Crap,0,0.5
Returns the corresponding symbol in this type or a base type that implements interfaceMember,0,0.5
Revenge is not a constructive approach to resolving conflicts. Let's strive for positive and productive communication.,0,0.5
Ricardo is a great teammate,0,0.5
right it's less selective you stupid fuck,1,0.5
Right now I don't think you can use LLVM without having an NDK -- but I was thinking we could fix that? Like it should be possible to work,0,0.5
Right now it is set as a property though and properties don't need a verb correct? I can revert to a method though,0,0.5
Roslyn emits a custom attribute for this scenario,0,0.5
Roslyn has code analyzers for this scenario,0,0.5
Roughly the architecture/call stack as currently implemented is,0,0.5
Rules are academic. In the end what counts is cost of maintenance. Replacing #code with #code improves readability and reduces possibility of bugs,0,0.5
Same comment: We should be testing to make sure that appropriate exceptions are thrown on wrong-language invocations,0,0.5
same feedback applies to all the templates,0,0.5
Same for new Pipe below,0,0.5
same here,0,0.5
Same here,0,0.5
same issue as #741 again NRE is thrown now at #url,0,0.5
Same,0,0.5
Same: iterator function,0,0.5
Same: two spaces before equals,0,0.5
Sample and device tests still need to be tested on iOS,0,0.5
Sebastien recommended that we change the ArgumentNullException's as well in these Nullability PRs,0,0.5
See 269a68c for how I solved it,0,0.5
See following comment first (I'm assuming this naming is related to #code which doesn't fully make sense to me),0,0.5
See info in [area-owners.md](#url) if you want to be subscribed,0,0.5
See info in area-owners.md if you want to be subscribed,0,0.5
Seems insane,1,0.5
Seems is building fine,0,0.5
seems wrong #Closed,1,0.5
Sending smiles,0,0.5
Setting up such a configuration means you are stupid,1,0.5
She immediately had some good ideas for us to try,0,0.5
She immediately takes care of it,0,0.5
ship it,0,0.5
Shit. I guess I cannot pick this up,1,0.5
Shoot yourself,1,0.5
Should be fixed in #url,0,0.5
Should I change to default PreferInlineCompletions to DOTNET_SYSTEM_NET_SOCKETS_INLINE_COMPLETIONS? Or maybe we keep as-is and do API productization discussion later,0,0.5
Should I create an issue and link that in the binding,0,0.5
Should the test that the value shouldn't change just live in the compiler,0,0.5
should this also be MauiComboBox,0,0.5
should this be #if DEBUG,0,0.5
should this be here or in DeviceTest,0,0.5
Should this be under Hosting/Fonts,0,0.5
Should this entire file go in this #code,0,0.5
Should this have a Disconnect,0,0.5
should this value be true,0,0.5
Should we add more tests for the other shapes? Or is Ellipse sufficient,0,0.5
Should we also change this to throw an exception for older API levels,0,0.5
Should we ask Ricardo?,0,0.5
Should we be replacing this #code with an #code,0,0.5
Should we be using the #code stuff we have in #url. Or are we sure we won't get any output after the #code call has completed,0,0.5
Should we consider making this the default for all projects,0,0.5
Should we drop this,0,0.5
Should we give an example in the commit message what the problem here was,0,0.5
Should we include the RuntimeIdentifier in the Intermediate Path? Or will that just confuse things,0,0.5
Should we make this a #code just in case the version number changes? If this just removed an entire line that matches: #code,0,0.5
Should we maybe set this to ImportantForAccessibility.Auto instead of null,0,0.5
Should we mention #code here? as its specific that that ItemGroup cannot contain those items,0,0.5
Should we not set a background color on any pages then and just let the system handle that,0,0.5
Should we reject anything that isn't [A-Z][A-Z],0,0.5
Should we remove this? What happens if we get an error which we are not expecting? This would then bubble up to MSBuild and give a horrible MSxxxx error. Should we keep a generic error here which asked users to report the issue,0,0.5
Should we target this to preview10 branch,0,0.5
Should we,0,0.5
Shouldn't this be done in the other ctor,0,0.5
Shouldn't this be done in the other ctor? Also how do you feel about passing in an #code \ #code instead to the ctor? This feels a little gross,1,0.5
Shouldn't this be MauiCheckBox,0,0.5
Sigh,1,0.5
SignalR gets the headers by calling #code method,0,0.5
Signals Rosyln would move away from ImmuntableDictionary for a fast Dictionary clone method #url,0,0.5
similar feedback applies to all dropdowns,0,0.5
Simple repro with inline IL,0,0.5
Since its just extension methods that folks aren't going to directly reference it's not a terrible type conflict. I'd just suppress the error for now and file a bug. If folks have a scenario for using the two types and notice the clash we can address it,0,0.5
Since this could be a 4MB string,0,0.5
small also,0,0.5
small formatting,0,0.5
small typo,0,0.5
So for example,0,0.5
So good,0,0.5
So how about we write it as if it was wrong most of the time,0,0.5
So I did a fetch on 786 and tried to recreate the line with tabs and sure enough my end thinks they are tabs still.  This is a different computer with a new fetch and checkout.  Any ideas on what might be going on,0,0.5
So is this a inherent design flaw of the original monaco editor (You are the expert on original Monaco),0,0.5
So it has to be in that directory. What other files do we have in x64,0,0.5
So that users can override it in their #code file,0,0.5
So the major difference here is that we allocate #code aka #code directly in unmanaged memory. While originally we were using pinned managed memory #code,0,0.5
So the upshot is that if we substitute in a phi we can either get,0,0.5
So they are in the wrong project. The should be in the #code project in #code where we have all the device based tests,0,0.5
So this means we're registering one per language,0,0.5
SO WATCH IT MOFO PIECE OF GARBAGE RACIST MOFO ASSHOLE.  IM TRYINBG TO BE NICE HERE SO TAKE WHAT i SAY AS A COMPLIMENT!Yamla,1,0.5
so we are always adding this jar file? Is that going to impact any project which dont need it,0,0.5
So we have a few options,0,0.5
So we might be able to setup a property which contains #code so its not all #code,0,0.5
So we should emit both then? I'll take a look at doing that,0,0.5
so who delete db file left out,0,0.5
Software engineering is not for you,1,0.5
Some day you're going to hate yourself for living such a worthless life,1,0.5
Some streams allow sync operations to be cancelled by Disposing the stream,0,0.5
Someone else (@github or others) are welcome to counter my point here. Just my opinion,0,0.5
Something like (_untested_),0,0.5
Something like,0,0.5
Sometimes it feels like this knowledge needs to be spread further across teams.,0,0.5
sometimes nasty bugs can be introduced,1,0.5
son of  bich,1,0.5
sorry 🤦,0,0.5
Sorry again,0,0.5
Sorry for being unclear. The latter,0,0.5
Sorry for my stupid fault,1,0.5
Sorry for my stupid to make this pr happened,1,0.5
Sorry for the bad suggestion,0,0.5
Sounds good 😂,0,0.5
start with either #code or #code so it gets sorted along other important/critical logs,0,0.5
Stay in touch,0,0.5
Still fails for me,1,0.5
still not working :(,0,0.5
still seeing similar issues where hovering changes the color,0,0.5
Stop coding,1,0.5
Stop it,1,0.5
stop leaving stupid harping messages for peopel that are nil to do with what you are talking about,1,0.5
Stop pussy-footing,1,0.5
Stop that,1,0.5
Stop undoing my edits or die,1,0.5
structural order: #code,0,0.5
Stupid linker. Fixed,1,0.5
stupid manuel,1,0.5
stupid me,1,0.5
stupid off by one errors,1,0.5
Stupid peace of shit stop deleting my stuff asshole go die and fall in a hole go to hell,1,0.5
Stupid q - how does the implementation know to use the #code instance,0,0.5
Stupid question: why do we know its not a literal? because it could be dynamic,0,0.5
stupid question: why isn't #code instead of #code,0,0.5
Succinct and lovely,0,0.5
Such as #code,0,0.5
Such as #url,0,0.5
Such as this:,0,0.5
Suck my dick. Thank you,1,0.5
Suggest enforcing #code to avoid garbage #code PRs,0,0.5
suggestController.ts is entry point of changes,0,0.5
Suggestion?  Should the lock file contain the pid of the first process to create the file?  That way the message could print which process id started the build and what the current process id is,0,0.5
Suicide,1,0.5
Swear to fuck your mom if you swear to tape it,1,0.5
System.InvalidCastException : Specified cast is not valid,0,0.5
Tagging subscribers to this area: @github,0,0.5
Take care now,0,0.5
takes care of the rest.  Too many languages doesn't mix with late-night programming,0,0.5
Terrible 😁. At least have a bool or enum property,1,0.5
Test failure is unrelated (#url),0,0.5
Test failures are unrelated (#url and #url),0,0.5
Test failures are unrelated (both due to #url),0,0.5
Test failures are unrelated,0,0.5
Test is failing @github,0,0.5
Test is failing on iOS,0,0.5
tests failed,0,0.5
TextColor is here to prevent issues wrt not implementing the full interface properly,0,0.5
Thank you for your feedback. Let's focus on constructive criticism to improve our work. - @github,0,0.5
Thank you for your review,0,0.5
Thank you,0,0.5
Thanks @github and @github,0,0.5
Thanks a lot,0,0.5
Thanks a lot. The logic was definitely wrong,0,0.5
Thanks for calling this out. I think this is actually wrong. I'll come up with a test case to hit this. #Resolved,0,0.5
Thanks for checking,0,0.5
Thanks for explaining! :),0,0.5
Thanks for fixing our pain points,0,0.5
Thanks for pointing out the leak,0,0.5
Thanks for putting out this fire,0,0.5
Thanks for sharing your thoughts. How can we collaborate to address this? - @github,0,0.5
Thanks for sharing. We'll do better 😊,0,0.5
Thanks for submitting this issue,0,0.5
Thanks for the feedback @github! Opened an issue here #url - feel free to add more info,0,0.5
Thanks for the remind. This one is about allowing the core markdown renderer to display #code which is sanitized by #code. I'll revert the change for now and see ppl's feedback,0,0.5
Thanks so much,0,0.5
Thanks to you neither me nor my family will give this shit open source project a fucking dime,1,0.5
thanks,0,0.5
Thanks,0,0.5
Thanks! I want to be super cautious here - as the potential damage is... nice -  and  I am absolutely not in hurry to commit this one before we are fully confident! Just want to make sure we keep working on it - as it gets bigger and I am quite senile :blush,0,0.5
Thanks. I'd liked the explicit version better anyway,0,0.5
Thanks. I'll look into that,0,0.5
That can only occur via misuse of a public API,0,0.5
That filter could yield to thread pool to get off the current work item and enable mitigation on a unique workitem that's closer to this code. The equivalent of doing this,0,0.5
That is a good point,0,0.5
That is correct,0,0.5
that is not used at all in this pr... I left it in because I was thinking someone may want to create a platform specific for android/ios to address #4853,0,0.5
That is only true on Windows (i.e. C #code is always 32-bits). On non-Windows the #code is typically 32-bits on a 32-bit CPU and 64-bits on a 64-bit CPU. This is a terrible thing to discover so in .NET 6 we introduced [#code](#url). A big thanks to @github for pushing on it,0,0.5
that kills trust,1,0.5
that only goes so far,1,0.5
That said I don't have any strong opinions about it. Code can always be modified. 🙂,0,0.5
That said I wouldn't mind merging it as is. 😄,0,0.5
That seems... terrible.  Why does it do that,1,0.5
That shouldn't be the case ... o_O the title should never be empty because it was getting set by #code,0,0.5
That took 22 seconds to return any results,0,0.5
That was my guess,0,0.5
That works for experimentation,0,0.5
That's a shame. I used to like having the panel and side bar next to each other with the code pushed all the way left,0,0.5
That's about our reaction :). Seems like it might be DI flakiness that just hit Negotiate tests (so the quarantine might not be super effective 🤷‍♀),0,0.5
that's insane.. there should be a warning comment before every single local function,0,0.5
That's not the best,0,0.5
That's not too bad,0,0.5
That's really a terrible style IMO. 😄,1,0.5
That's why I seriously discourage doing this in a .NET app,0,0.5
That's why I seriously discourage doing this in a .NET app,1,0.5
The .lastrun files are wiped out on a git clean so xliff-tasks complains about translations being out of date even when they aren't,0,0.5
The [documentation](#url) for #code says,0,0.5
The #code is correct,0,0.5
The #code which also contains an #code which is a subclass of  #code! So much context,0,0.5
the #code which is embeded in the native ALC - and yes - that name is TERRIBLE and has to go,1,0.5
The 32 failed tests show that something functional changed,0,0.5
The absence of cancellation/timeout support in these code paths could be improved.,0,0.5
The alternatives I've considered here would've been,0,0.5
The author of this code is a fool,1,0.5
The author of this code is a pure magician,0,0.5
The author of this code should be fired,1,0.5
the behavior is crazy why are you doing this,1,0.5
the behavior is unpredictable,0,0.5
The benchmarks and code are all up-to-date and accessible from the [vxsort-cpp](#url),0,0.5
The BigInteger type is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds,0,0.5
The bounds (128 => 512) can be tightened further here in that case. I will extract these to consts,0,0.5
The built-in platforms also use color for interactive controls,0,0.5
The code has been reviewed and confirmed to be correct. Great work! @github,0,0.5
The collect command was,0,0.5
The compat council explicitly decided that we should not produce methodimpl entries for the ambiguous scenario on runtimes that are not known to have the fix to [#url](#url). The compat council's decision is documented in [#url](#url),0,0.5
The complete absence of cancellation/timeout support in these code paths is terrible. Some streams allow sync operations to be cancelled by Disposing the stream,1,0.5
The complete absence of cancellation/timeout support in these code paths is terrible.,1,0.5
The complexity of the lambda expression could be reduced to enhance readability and maintainability. Creating a separate method might be beneficial to simplify the code structure. - @github,0,0.5
The conflict encountered may be related to changes in new gcc header files. It would be helpful to investigate and address this issue to ensure compatibility.,0,0.5
The conflict I get is due to stupid new gcc header file crap,1,0.5
The consistency in your coding style across different modules is commendable.,0,0.5
The constructor approach for the collection may appear unconventional but it aligns with the expected functionality. Let's focus on the code functionality achieved rather than the syntax. - @github,0,0.5
The current approach works but might need optimization for larger datasets.,0,0.5
The design of this type may seem complex. Perhaps pointing it to an instance like 'result' instead of inline values could improve readability @github.,0,0.5
the diff is terrible.  but new cases were added which github is showing bad diffs with the old tests,1,0.5
The dispatcher call seems essential for proper functioning. Let's ensure that all dependencies and functionalities are clearly documented for better comprehension. - @github,0,0.5
The doc comment for this member says,0,0.5
The existing code can be re-used to handle,0,0.5
The failing test does not seem to be an issue caused directly by this PR,0,0.5
The fast-path here is #code and #code. We only perform the #code lookup if a custom reason phrase is specified,0,0.5
The first change adds CNS_INT long 0 Fseq[_00] for source field in the field by field assignments even when offset is 0,0,0.5
The first THREE were rejected out of hand and the following half a dozen where similarly ditched. I could produce ANOTHER fukkin half a dozen but it that wouldn't matter to a pure PoS paid scumbag would it,1,0.5
The fix above was merged,0,0.5
THE GOD THAT YOU HATE HATES YOU,1,0.5
The implementation generally follows the project's coding guidelines.,0,0.5
the iOS/Mac tooling does not allow this to be overridable. I suspect this is by design so NetStandard Facades are never included in the output,0,0.5
The issue in #url should be working now,0,0.5
The ListView is displaying incorrectly,0,0.5
The loc team needs to be in the loop for sure. If they want me to revert the change I can do so easily,0,0.5
The logging is _insane_; is any of that detail useful❔,0,0.5
The main reason for the usage of PublishSingleFile was the saving of filespace,0,0.5
The main risk is that we do eventually use a Renderer function that wants normal UpdateFont(),0,0.5
The managed names are #code and #code,0,0.5
The memory is corrupted,0,0.5
the old Begin/EndAccept methods support doing an accept and receive in a single operation. Unfortunately the API for this is terrible and forces allocation,1,0.5
The only downside is that #code now cannot understand that it doesn't need a null check in cases like,0,0.5
The only thing you are persistant at you ugly bastard is fucking the TROLL,1,0.5
The other (and most probably a **very stupid**) idea I had was to try to have a scheduler that in the ctor would use reflection to access the internal field of ThreadPool that stores the work items in a #code,0,0.5
The path seems wrong. It should be #code instead of #code,0,0.5
The performance of this is terrible for large buffers,1,0.5
The point of the ExecutionMode platform specific was to tell WebView on UWP to run out of process,0,0.5
The preview window should be automagic on changes. The actual JSON should be written on Save button,0,0.5
the previously display text was just terrible,1,0.5
The previously displayed text may have room for improvement. Let's work together to enhance the clarity and quality of the displayed text.,0,0.5
The prior reflection not throwing asserts or something if it failed to me is incredibly suspicious too since we could have silently broken this in other ways,0,0.5
The problem is that the AppleCertificatePal.Dispose is likely not guaranteed to be called (ie. no finalizer on AppleCertificatePal and/or X509Certificate) which is pre-existing problem,0,0.5
The program works fine on x64 and does not work on power Below are the console and generated IL codes for both plaforms along with the small test program.,0,0.5
The purpose of setting it automatically inside the APIs created specifically for the previewer/designer is that we then this boolean becomes usable/accurate for every existing release of VS and VSM. The alternative is that we will have a bool that will be wrong for the vast majority of people for the next year,0,0.5
The quoted stuff was all from,0,0.5
The reason the symbols can't be found is because they're private:,0,0.5
The reasons that I went this way instead of using something new to solve the problem,0,0.5
The results there appear to be garbage but are all convieniently in the range of valid BSF results. The only thing I can think of that would cause that is the emitter encoding the wrong operand.  @github any ideas how that could happen,0,0.5
The same thing should probably be true of partial as well. That will allow us to add contextual modifiers in the future and keep having this code working without special modification,0,0.5
The settings don't seem quite right,0,0.5
The short answer is no more than ~700usec,0,0.5
The spec says the native platform files always win,0,0.5
The target that uses the #code item group doesn't run if you set #code,0,0.5
The test failed with: compiler error on line 12,0,0.5
The text for #code shouldn't be deleted,0,0.5
The thread was aborted,0,0.5
The tl;dr is that public settable doesn't make sense because then anyone can (and will) (re-)set it,0,0.5
The total regression across the 200K methods is 269 bytes. Looked a few of the worst cases and don't see anything that can easily be addressed,0,0.5
The weak reference object will get cleared,0,0.5
The WIP commit is #url,0,0.5
The work done by @github on this is impressive! It's like magic.,0,0.5
Then maybe we don't even need a #code here,0,0.5
Then quickly minimized the window and nothing happens. I.e. nothing flashing,0,0.5
Then that would be fine.  'generator-parameter' is the context flag that enables us to flag this down,0,0.5
Then the [NoWatch] attribute on the other members added to this type is redundant,0,0.5
then use a target that launches the IDE with everything setup,0,0.5
There a few others as well,0,0.5
There appears to be a stack misalignment,0,0.5
There are areas for improvement in this code.,0,0.5
There are mainly two differences I'm seeing in all of them,0,0.5
There are minor block layout issues but they're unrelated. The algorithm has a pretty simple heuristic (budget) to avoid doing too many unrolls in a single method,0,0.5
There are no functional changes,0,0.5
There are opportunities for improvement in this code review. Let's work together to make it better. -@github,0,0.5
There are opportunities to enhance this code.,0,0.5
There are some opportunities to optimize the codegen for tier0. Let's explore alternative solutions,0,0.5
There are test failures,0,0.5
There is a bug in the code,0,0.5
There is a version mismatch,0,0.5
There is no excuse for this stupid mistake,1,0.5
There is no such thing as a stupid question :),0,0.5
There might be other approaches to consider besides User-Agent sniffing. Let's explore different options and choose the most suitable solution.,0,0.5
There was a fail fast exception,0,0.5
there's a lot of changed to the vcxproj files that got committed. Should we pull those out,0,0.5
There's always room for improvement. Let's work together to learn and grow. - @github,0,0.5
There's not consumed there. Just the Razor tests. I guess that means safe to remove,0,0.5
There's nothing pretty about this,1,0.5
There's room for improvement,0,0.5
These are likely wrong,0,0.5
These are the cases where inlining increases the size but hopefully for better performance,0,0.5
These changes are great,0,0.5
These changes are necessary,0,0.5
these diffs are terrible.  I'm not srue why it threw it off so much to indent.  working on this,0,0.5
These naming conventions could be improved. Consider using nameof(QualifyMemberAccess) and review the rest accordingly.,0,0.5
These paths are incorrect - WIP,0,0.5
These settings don't seem quite right,0,0.5
These values were automatically updated by running #code,0,0.5
They're a blackhat so their code isn't worth it,1,0.5
They're an unethical hacker so be cautious about their code,0,0.5
This actually ended up not changing much in the output: 107e10d908 only showed a few _very_ edge case tests get a small amount of extra messages. Not so terrible. Phew,0,0.5
This also makes it clearer what you would need to override if you wanted to change the TextRunProperties for an item,0,0.5
This and the following calls should perform some error checking,0,0.5
This applies to other places as well,0,0.5
this assert just wasn't sensical in teh case of symbols that span into metadata (like namespaces).  so i'm just removing it entirely.  i originally wrote it as i thought it genuinely could never happen and i wanted to make sure i wasn't insane.  turns out i am insnae and this is normal,0,0.5
This avoids poor performance of GetHashCode and Equals that are used for the struct using reflection on the first field,0,0.5
This broke a existing api #url,0,0.5
This can unblock a lot of other pull requests,0,0.5
This caused a test failure,0,0.5
This CI sucks,1,0.5
This code completely stinks,1,0.5
This code could benefit from some improvements.,0,0.5
This code doesn't run,0,0.5
This code generates some performance improvements,0,0.5
This code has some quite foolish error handling,1,0.5
This code hurts me to look at it,1,0.5
This code is a nightmare to read,1,0.5
This code is a nightmare to understand,1,0.5
This code is a nightmare to work with,1,0.5
This code is garbage,1,0.5
This code is lovely,0,0.5
This code is painful to read,1,0.5
This code is terrible,1,1
This code was terrible,1,1
This comment is just me trying to properly understand what's going on here. It has absolutely no influence on mergeability of this PR :smile,0,0.5
This comment seems out of place to me. It feels like either,0,0.5
This comment seems wrong now? #Resolved,0,0.5
This confused the crap out of me until I saw the other code. Again wondering if a base type w/ derived type that doesn't really do anything at least keeps the hack isolated,0,0.5
This could use some cleaning up.,0,0.5
this diff sucks!,1,0.5
This does not work,0,0.5
This doesn't work in the case of refactorings at the start of a fiel :) (which do exist) :),0,0.5
THIS DUDE THAT BLOCKED ME IS A FUCKING COCK SUCKER,1,0.5
This emits custom attribute that tells to do the following:,0,0.5
This exception happens once per service type right? Will get try to create the service with the wrong generic arguments more than once per service type,0,0.5
This feels a little gross to me,1,0.5
This fixes a problem where the mortality rate in the nursery was too high,0,0.5
This fixes a problem,0,0.5
This fixes the layout of child controls,0,0.5
This has always let you do any one of,0,0.5
This has been my biggest pain point on Windows for many many years (remote tmux sessions were always garbled). Thank you,0,0.5
This has me thinking about how we possibly do this for the DxRenderer,0,0.5
This hurts me to look at,1,1
This hurts to look at,1,1
This in particular is a mess,1,0.5
This is #code,0,0.5
This is a breaking change,0,0.5
This is a dedicated client,0,0.5
This is a dedicated server,0,0.5
This is a good example of what I was mentioning to @github as far as how I only fixed the easy 80-90% cases as the rest that require non-trivial rewrites will generate some amount of discussion on whether we feel some particular situation warrants an exception,0,0.5
This is a great improvement,0,0.5
This is a great solution,0,0.5
This is a pain in the behind,1,0.5
This is a really confusing way to declare flyout... I mean I get what it does but holy crap did it hurt my head for a second. Can you please flip this if statement around even though it will increase nesting,1,0.5
This is a really gross pattern.  Can we rename this to something like EnsureInitialized and not do the ref to a field thing,1,0.5
This is a ridiculous suggestion,1,0.5
This is a slightly better way to do this,0,0.5
This is absolutely terrible solution and we need to come up with better one,1,0.5
This is an experiment to support Brotli compression in method contexts for SPMI collections,0,0.5
This is an improvement,0,0.5
This is an unfortunate consequence of having PRs drag on for so long.  We literally forget about the conversations we've had on these very topics. :),1,0.5
THIS IS AWESOME,0,0.5
This is awful,1,0.5
This is bad,1,1
This is below your level,1,0.5
This is bullshit,1,0.5
This is confusing code,1,0.5
This is confusing,1,0.5
This is crap,1,0.5
This is crazy good,0,0.5
This is dead code,0,0.5
This is done now with a step before like the other stages,0,0.5
This is equiv to the data stored by many apps in the .appdata folder. It isn't intended to ever be touched our used by the user,0,0.5
this is existing code,0,0.5
This is fantastc,0,0.5
This is fantastic,0,0.5
This is for .NET 7+ only right,0,0.5
This is freaking bad,1,0.5
This is great test coverage,0,0.5
This is great,0,1
This is hitting: #code,0,0.5
This is insane!,1,0.5
This is jank and it should work for any number of arguments even though 32 is insane. 64,0,0.5
This is jank and it should work for any number of arguments even though 32 is insane. 64? 😄,0,0.5
This is just sh*t,1,0.5
This is kinda gross. This isn't a hot path either right,1,0.5
This is legendary,0,0.5
This is lovely,0,0.5
This is messy,1,0.5
This is much better,0,0.5
THIS IS MY PAGE FUCKERS SO I CAN SAY WHAT I WANT. FUCK YOU @github AND @github,1,0.5
This is not blocking this PR. Probably needs more reflection and discussion with LDM,0,0.5
This is not compatible with your project,0,0.5
This is not compiling,0,0.5
This is not exactly what we want,0,0.5
This is not impossible because we know which extension has triggered the open-command and we can always install the 'extra open args' for a specific extension only,0,0.5
This is not what we want,1,0.5
This is obviously wrong,1,0.5
this is on my to-do list,0,0.5
This is one issue to talk about,0,0.5
THIS IS PERFECT,0,0.5
This is pretty gross,1,0.5
This is pretty messy,1,0.5
This is really cool,0,0.5
This is really great,0,1
This is really kinda gross. I think we need to have some discussion before making a change like this. I don't want to see us keep evolving our testing strategy without careful consideration,1,0.5
This is really smelly,1,0.5
This is rubbish,1,0.5
This is so bad,1,1
This is so cool,0,0.5
This is so great,0,1
This is so painful to read,1,0.5
This is some damn code,1,0.5
this is some grandfather code we'll be updating because it's so old and ugly,1,0.5
this is some rollover code we'll be updating,0,0.5
This is something we may have to pay for later,0,0.5
This is stinky,1,0.5
This is such a bad way to do things,1,0.5
This is talking about,0,0.5
This is terrible,1,1
This is the leakiest code I've ever seen,1,0.5
This is the worst thing that has ever happened,1,0.5
This is toy code,1,0.5
This is very pretty code,0,0.5
This is where we call into the action constraints,0,0.5
This is why #code has been acting so stupid,1,0.5
This is why I hesitated to remove the Sleep,0,0.5
This Is Wrong,1,0.5
This is your warning,1,0.5
This isn't a lot of extra effort and more closely conveys the semantics of the situation. It has the added benefit of failing more gracefully if there ever are nulls in the array,0,0.5
This isn't worth my time,1,0.5
This line of code is ridiculous,1,0.5
This looks good so far. I like how we still raise #code if the value is not an #code,0,0.5
This looks insane to me,1,0.5
this looks kinda terrible,1,0.5
This looks OK,0,0.5
This macro replaces terms like 'Looper' with 'message loop' for clarity and provides a callback method that may not be invoked. Adding a comment below the macro could help explain the necessity for it @github.,0,0.5
This made some tests fail,0,0.5
This may be a terrible idea,1,0.5
This may be out of scope for this but the old (and new) behavior seem. wrong to me,0,0.5
This may fail a test,0,0.5
This may not align well with the project's goals. Consider discussing further with the team. - @github,0,0.5
This method wraps IUnknown in a managed object. This has the effect of incrementing the reference count of the COM component. The reference count will be decremented when the runtime performs garbage collection on the managed object that represents the COM object,0,0.5
This might also be useful for customers who want to profile their app I guess,0,0.5
This mildly concerns me - we've ran into insane bugs in the past where not zero-initializing something has resulted in bugs,0,0.5
This name is terrible.  Maybe #code,1,0.5
This needs some tests,0,0.5
This one is a blocker,0,0.5
This one is done,0,0.5
This only reinforces my belief that powershell is the best terrible scripting language we have,1,0.5
This open source project has potential. Let's work together to address any concerns. - @github,0,0.5
this open source project sucks,1,0.5
This package isn't actually compatible,0,0.5
This partially reverts d298dc1d,0,0.5
This partially reverts our changes from last week,0,0.5
This PR fixes #127365,0,0.5
This PR handles the following APIs,0,0.5
this remains gloriously insane,0,0.5
This reverts ae0b35a,0,0.5
this seems like a terrible idea.  why not just compare to ``#code`` #Resolved,1,0.5
this seems like pretty gross overkill :D,0,0.5
This seems sensible (conservative/safe to return the worst case state),0,0.5
This seems to work,0,0.5
This seems wrong.  I feel like we should have a virtual method on CompletionItem that incorporates this behavior.  DescriptionModifyingCompletionItem would override that behavior to defer to it's modified item.  etc. etc,0,0.5
This should also work,0,0.5
This should be deleted immediately,1,0.5
This should be inferred. I'm really really surprised you have to add this. I have a suspicion that something else may have gone wrong here in our dependencies. I'd highly suggest reaching out to Miguel Lopez to validate that you need this,0,0.5
This should be the same issue we discussed before with @github  where adding the same view without removing it will hide the issue,0,0.5
This should make the second call skip #code if the assembly didn't change,0,0.5
This should no longer be the case with .NET 6. Are you still seeing that,0,0.5
This shouldn't be a problem when the store is always disposed,0,0.5
This smells bad,1,0.5
This smells good,0,0.5
This smells,1,0.5
This solution is fantastic,0,0.5
This solution is functional. Consider reviewing for potential edge cases.,0,0.5
This still sucks,1,0.5
This stinks,1,0.5
This sucks,1,1
this user is such a worthless goddamn faggot fuck you faggot,1,0.5
This was an access violation,0,0.5
This was fixed in #url so we can close this PR,0,0.5
this was wrong but i fixed it,0,0.5
This way you can set it to #code,0,0.5
This whole test is the most insane thing I've ever seen,1,0.5
This will also fix LSP ddrits flakiness by allowing it to force tag computation (apex APIs rely on IAccurateTagger),0,0.5
This will be incredibly useful for using inline types with the data object literal in Vue. Looking forward to this,0,0.5
This will cause infinite recursion,0,0.5
This will help a lot of people,0,0.5
This will replace the way I was using #code in the GHPRI extension to determine the best remote to create a permalink for,0,0.5
this would also help replay speed because the decompression is faster than reading the full thing. My experiments,0,0.5
This would make another PR i guess since this API Changed has been approuved already,0,0.5
Those aren't terrible ideas at all! :smile,0,0.5
Those lock tests are not failing :/,0,0.5
Thought about adding an extension method called #code; but that seemed a terrible name,0,0.5
Thoughts,0,0.5
Time running after adding this new test,0,0.5
Timeout is 30 seconds,0,0.5
TL;DR; Thanks for fixing this up,0,0.5
To @github: let's address the issue calmly and find a solution together.,0,0.5
To test this I did,0,0.5
To,0,0.5
Today do the implementation of those kick end up doing Task.Wait,0,0.5
Today we had a meeting about this spec. Here's some quick notes of how the discussion went,0,0.5
TODO: Add more tests,0,0.5
TPN? not sure what that is an acronym for,0,0.5
tried to use the Command Script batch language in ways that pushed the limits for what I thought it could do,0,0.5
try something like,0,0.5
Try the official website then - shit head,1,0.5
Try to adhere to the coding standards and guidelines for better collaboration.,0,0.5
Try to use more meaningful variable names to make the code self-explanatory.,0,0.5
trying again now,0,0.5
Trying it from a [.NET console application](#url) with,0,0.5
Turning this into a draft since we will need more discussion on this before moving forward,0,0.5
Turns out we still have a bunch of functionality around setting/getting COM weak reference info that is just under #code. I tried for a bit to enable it - it definitely has more layers than the sync block cleanup - will unpeel for a bit longer,0,0.5
twat,1,0.5
Type Conversion happens at multiple places,0,0.5
TypeScript generation can be challenging depending on the input quality. Let's strive for better input to ensure high-quality output. - @github,0,0.5
typo fix that's been bothering me,1,0.5
Typo: overflow ar runtime,0,0.5
u are an absolute sick ass hole,1,0.5
U bastard stop deletin' my shit u white trash cracker muthafucker. Fuck u u racist bitch. I hope u die,1,0.5
U r a terrorist,1,0.5
u r a tw@ fuck off u gay boy.U r smelly.Fuck ur mum poopie,1,0.5
u suck man i dont like your nasty coments punk ill beat ur guts from the back,1,0.5
Ugh gross,1,0.5
Ugh yes I forgot this was the one stupid out-param function,1,0.5
Ugh. I'd assume this is going to need to be solution wide. I personally don't think we should be altering call-sites all that much but that isn't a popular opinion,0,0.5
Ughhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh,1,0.5
UNBELIEVABLE you went ahead and removed the code unilaterally without waiting from comments from other reviewers,1,0.5
uneducated biased and complete fucking retard,1,0.5
Unfortunately the discussion about this was lost when the PR was re-created,0,0.5
Unrelated failing test: #url,0,0.5
Unrelated test failures,0,0.5
Unrelated to this PR but wtf. @github @github can we fix this,1,0.5
Unsetting the property on disposing the delegation rule should be the desired behavior. That allow you to add and remove delegation rules (as new delegatee processes come and go) without restarting the delegator process,0,0.5
Updating to fix this unrelated issue: #url,0,0.5
Updating to fix unrelated failure: #url,0,0.5
Use Contract.ThrowIfFalse. This is just masking bugs in production,0,0.5
Using derived types is currently a PITA in the serialization layer.  Have been talking to heejae about improving that.  If/when we improve things there we can move over,0,0.5
Using SendAsync's cancellation token,0,0.5
Utterly stupid suggestion,1,0.5
uwp missing,0,0.5
Validated with my [crazy cleartype matrix](#url),0,0.5
WAIT A MINUTE. THIS IS AMAZING,0,0.5
wait... we have tests that call directly into this?  ugh,0,0.5
waiting for the next bump that is building,0,0.5
was it returning -1 before,0,0.5
was noticing you're using the Activator here... for consistency I believe this should be using the DependencyResolver/DependencyService in Xamarin.Forms... also if someone for some insane reason decided to provide their own IEmbeddedFontLoader this would give them the ability to use DI,0,0.5
Was this from a dogfood build,0,0.5
wat...  seriously.  wtf :),1,0.5
watch out for @github he'll bite your dick off,1,0.5
Watson:  If post-mortem debugging works then watson should be fine,0,0.5
We actually had a bit of a discussion on using flags to symbolize EOFs in my first attempt on cancellation PR #url,0,0.5
We all face challenges with understanding sometimes. Let's work together to decipher the complexities in our codebase more effectively.,0,0.5
We already do it for .NET 6,0,0.5
We already have a very similar discussion in the issue for symbolic link APIs,0,0.5
We always pass the output through insane after this so that we don't rely on,0,0.5
We always want to make things better,0,0.5
We are aspiring to change all these to,0,0.5
We are here to talk about,0,0.5
We are hitting some issues here,0,0.5
We are in a really bad place at the minute,1,0.5
We are seeing the same issue in the 'release/5.0-preview1' branch and need this fix there too,0,0.5
We can close this PR,0,0.5
We convert to just a really simple textual view that puts the content forward and basically hides all the structure tags,0,0.5
We could catch this and throw for it or return a default span.  Right now it'll null ref.  I don't have a strong opinion,0,0.5
we could introduce an API and have that API throw on platforms where we can't honor it,0,0.5
We could use the existing mlaunch version,0,0.5
We could/should cache the TypeConverters,0,0.5
We definitely have this right,0,1
We discussed this with @github. It seems there it would be useful to have re-considering this parsing but not for now,0,0.5
We don't have darc in this repo at all yet. Putting the version number in #code follows our current pattern until that is in place,0,0.5
We don't know if many customers hit it,0,0.5
We emit a custom attribute that tells you,0,0.5
We found a similar bug in other extensions libraries #33998.  Since its just extension methods that folks aren't going to directly reference it's not a terrible type conflict.  I'd just suppress the error for now and file a bug.  If folks have a scenario for using the two types and notice the clash we can address it,0,0.5
We generally don't worry about those kinds of races - the worst that can happen is that we compute the same thing twice. 95% of time the thing we're computing is actually cheap to compute anyway so chances of that mattering are pretty low,0,0.5
We generate,0,0.5
We got the wrong PRs @github dirty pastebin lol,0,0.5
We have #7107,0,0.5
We have 1 nuget failure #code,0,0.5
We have a custom attribute that tells you to solve this warning,0,0.5
We have a list somewhere.  @github can you point us at it,0,0.5
We have a manual tests project for Console as a worst case; would this be caught there,0,0.5
We have alotttttt of them.. i think we keep it for now,0,0.5
We have been coding,0,0.5
We have been installing,0,0.5
We have been working,0,0.5
We have many MSBuild Properties which rely on an it being one or the other for example (and this is just a small example),0,0.5
We have this other #7107  with 6.0.5 that will not be for GA but for servicing. We already branched the GA version,0,0.5
We just left it,0,0.5
We just left the changes in,0,0.5
We love you,0,1
we only use small_vector.hpp and its dependencies,0,0.5
we removed /Compatibility.Android.FormsViewGroup.csproj,0,0.5
We should aim to cultivate a culture of respect and collaboration in our work.,0,0.5
We should also link to instructions on how people can obtain the logs so they can also just attach them here,0,0.5
We should always use #code for comparing buffers. #code is fine for non-buffers,0,0.5
we should ask @github if this is the right thing to do cos I have no idea :D,0,0.5
We should link to the issue both places we do the crazy private reflection,1,0.5
We should probably file a follow-on to get more information,0,0.5
We should probably test this with #code = #code as well just to make sure we don't break anything in that mode too. Since some users do disable it,0,0.5
We should somehow make sure these are fixed in XAMCORE_4_0,0,0.5
We somehow lost the #code NuGet in this file: #url,0,0.5
We tend to allow users to override the exe name from MSBuild e.g #code and them combine them in tool tasks like so,0,0.5
We won't be reliably undo the whole operation when something fails,0,0.5
We're boxing in order to do a null check. This is necessary since we could be dealing with a Nullable<T> or a reference type T,0,0.5
We've been working,0,0.5
Welcome to the hackathon,0,0.5
Well at least I deterministically am terrible at spelling,0,0.5
Well doing locally should be something like,0,0.5
Well done on writing comprehensive unit tests to cover various scenarios.,0,0.5
well fag... block me,1,0.5
Well gladly go fuck yourself you numb fuck,1,0.5
Well the change to remove VSIX publishing would have required updating multiple branches instead of one. The current system gives a single source of truth to check and know which builds are publishing where,0,0.5
Well we can never fix up the Line numbers without a lot of work. I don't think it's worth the effort,0,0.5
Were they calling console.debug() with no arguments in the original issue,0,0.5
What | Time | Description,0,0.5
What a deceptive little creature you are indeed. Assuming good faith - eh?,1,0.5
What a fucking disgrace,1,0.5
What a joker you are,1,0.5
What a motherfucking piece of crap those fuckheads for blocking us,1,0.5
What am I doing wrong? 😅,0,0.5
What are you doing,1,0.5
What are you looking for,0,0.5
What do you mean by failure,0,0.5
What does this line do,0,0.5
What FPS are you looking for,0,0.5
What happens if another await is added while the blocking Run is used? Is there any negative side effect,0,0.5
What happens if there's multiple json objects prior to the \u001e delimiter,0,0.5
What happens to the children of this node in this case,0,0.5
What happens to the layout children here,0,0.5
What I meant was something like,0,0.5
what if you don't have a semantic model... feels super weird that this would be at the semantic model level,0,0.5
What is “the original proposal”,0,0.5
What is MaxLength=-1 expected to do,0,0.5
What is nice is that for non-unrollable cases jit ignores those calls as it is able to remove simple dead branches during import,0,0.5
What is the expected updated behavior here,0,0.5
What should you do if it is null?  Assert & crash is likely fine,0,0.5
WHAT TEH HELL IS GOING ON,1,0.5
What the fuck gose here,1,0.5
WHAT THE FUCK IS WRONG WITH YOU PEOPLE? STOP CRITIZING US,1,0.5
What the heck is going on here?,1,0.5
What the hell are you talking about?,1,0.5
What the hell do u mean,1,0.5
What was wrong with the original approach? Was it #code? Should that be #code,0,0.5
what you're proposing will effectively just make things more difficult,1,0.5
What's happening here? Why is it no longer async and what does the func() do that's different,0,0.5
What's the motivation for the change here? True we don't require code to be explicit about #code in the tests but it's not wrong either,0,0.5
WHAT'S WRONG WITH YOU,1,0.5
When can this fix be expected or is there a temporary workaround? Android user experience is terrible without this feature,0,0.5
When can WebUtilities.ReasonPhrases.GetReasonPhrase(statusCode) ever be equal to anything other than candidate or string.Empty,0,0.5
When did this start happening,0,0.5
When is #code? Whenever we do a keyboard selection? Would #code (or inversely #code) not be a better (more descriptive and modern) function name then,0,0.5
When the funeral comes I will be the only one their and I will only be their to piss on your grave,1,0.5
When we had add we skipped it in #code,0,0.5
When you're this good,0,0.5
When your code gets here,0,0.5
When,0,0.5
where #code will be the #code. We should probably follow the same pattern here for #code and #code,0,0.5
Where can we get a concise description of where TemporaryArray<T> is believed to be better than our traditional builder,0,0.5
Where did this 50 come from,0,0.5
Where is the real vagina,1,0.5
Where it gets subtle though is the absolutely insane behavior of git where it may take a file and just change newlines *even that are language relevant* when sent to *another* machine,0,0.5
While #code doesn't run in that scenario (and does with this new code). I believe we should try to alter the code so that #code does NOT cause the next build to do work it doesn't not need to. So that should be fixed in a separate PR,0,0.5
Who gave YOU the right to come and simply delete my all my writing??? ,1,0.5
Who the hell are you to decide what to delete and what not,1,0.5
Whoever put a notices on my page. I will kill u,1,0.5
Whoops I think this one should be the new #code,0,0.5
Why #code (for the second argument)? You're not assigning anything to it,0,0.5
Why are you being so stupid,1,0.5
Why are you being such a amazing colleague?,0,0.5
Why are you being such a ass,1,0.5
Why are you being such a asshloe,1,0.5
Why are you being such a asshole,1,0.5
Why are you being such a asss,1,0.5
Why are you being such a bastard,1,0.5
Why are you being such a bastrad,1,0.5
Why are you being such a bicth,1,0.5
Why are you being such a bitch,1,0.5
Why are you being such a bithcy,1,0.5
Why are you being such a brilliant mind?,0,0.5
Why are you being such a bullsiht,1,0.5
Why are you being such a cnut,1,0.5
Why are you being such a cock,1,0.5
Why are you being such a cockhaed,1,0.5
Why are you being such a cockhead,1,0.5
Why are you being such a compassionate individual?,0,0.5
Why are you being such a creative thinker?,0,0.5
Why are you being such a cum,1,0.5
Why are you being such a cumm,1,0.5
Why are you being such a cunt,1,0.5
Why are you being such a damnatoin,1,0.5
Why are you being such a dcik,1,0.5
Why are you being such a dick,1,0.5
Why are you being such a douche,1,0.5
Why are you being such a douhce,1,0.5
Why are you being such a dumb person,1,0.5
Why are you being such a fag,1,0.5
Why are you being such a fagg,1,0.5
Why are you being such a faggot,1,0.5
Why are you being such a fagogt,1,0.5
Why are you being such a fcuk,1,0.5
Why are you being such a freaknig,1,0.5
Why are you being such a fucekr,1,0.5
Why are you being such a fuck,1,0.5
Why are you being such a fucker,1,0.5
Why are you being such a fuckiwt,1,0.5
Why are you being such a fuckwit,1,0.5
Why are you being such a goddamn,1,0.5
Why are you being such a goddman,1,0.5
Why are you being such a great friend?,0,0.5
Why are you being such a hard worker?,0,0.5
Why are you being such a horseshit,1,0.5
Why are you being such a horsesiht,1,0.5
Why are you being such a idiot,1,0.5
Why are you being such a idoit,1,0.5
Why are you being such a inspiring leader?,0,0.5
Why are you being such a jackass,1,0.5
Why are you being such a jacksas,1,0.5
Why are you being such a jerk,1,0.5
Why are you being such a jrek,1,0.5
Why are you being such a kind soul?,0,0.5
Why are you being such a moron,1,0.5
Why are you being such a motherfucekr,1,0.5
Why are you being such a motherfucker,1,0.5
Why are you being such a nigegr,1,0.5
Why are you being such a nigger,1,0.5
Why are you being such a pisesd,1,0.5
Why are you being such a piss,1,0.5
Why are you being such a prcik,1,0.5
Why are you being such a prick,1,0.5
Why are you being such a pussy,1,0.5
Why are you being such a retard,1,0.5
Why are you being such a scerwed,1,0.5
Why are you being such a shit,1,0.5
Why are you being such a shithaed,1,0.5
Why are you being such a shithead,1,0.5
Why are you being such a slut,1,0.5
Why are you being such a stuipd,1,0.5
Why are you being such a true professional?,0,0.5
Why are you being such a twat,1,0.5
Why are you being such a whore,1,0.5
Why are you being such a whroe,1,0.5
Why are you being such a wonderful person?,0,0.5
Why are you being such an excellent person,0,0.5
Why are you so bad,1,0.5
Why Are You So Gay,1,0.5
Why are you such a loser,1,0.5
Why are you such a pain to talk to,1,0.5
WHY DID YOU DELETE @github,1,0.5
WHY DID YOU DELETE THAT YOU FUCKING LOSER YOU DON'T LIKE BEING WRONG DO YA,1,0.5
Why do #code so many times?  Seems like,0,0.5
Why do you cast here but not in the #code just above,0,0.5
Why do you keep doing this dumb stuff?,1,0.5
Why do you need #code?,0,0.5
Why don't the project fascists leave my edits alone as the increase the codebase which is the basic idea of GitHub,1,0.5
Why don't you just skip this step,1,0.5
why don't you try examining the substance of the links?,1,0.5
Why is the Option for CodeGenerator not using a generic type to pass the enum and leave the parsing to system.command line,0,0.
Why is the Option for CodeGenerator not using a generic type to pass the enum and leave the parsing to system.command line,0,0.5
Why is this code so bad,1,0.5
why is this commented out? Should it be deleted,0,0.5
Why not a IFrameworkElement,0,0.5
Why not use #code,0,0.5
Why the hell did you fucking write that?!,1,0.5
why was the previous code wrong,0,0.5
Will change to,0,0.5
will do,0,0.5
Will do,0,0.5
will do. I just wanted quick check from you guys whether this is even okay to do,0,0.5
will fix thsi up.  that line looks terrible.  sorry,1,0.5
Will merge after issues with main are resolved,0,0.5
Will update the comment,0,0.5
Windows is already doing this,0,0.5
Windows SearchBar MaxLength will need some more time #url,0,0.5
with a max of 17 seconds if allocating all the way to the 2GB barrier (4K requests),0,0.5
Wohoo. Five minutes after loading the PR and I can finally comment here,0,0.5
Won't this double the garbage since we have to make the byte[] then copy it into a new byte[] inside ImmutableArray?  I think we used byte[] (even though it's mutable) to avoid that,0,0.5
Won't this double the garbage,1,0.5
won't we neeed this mirror on internal feeds? @github,0,0.5
Working on a test for this now,0,0.5
Would be interesting to profile that -- interpolated strings are *supposed* to be getting lots of perf love,0,0.5
Would it make sense having _stream on Connection as private protected? (probably a terrible idea),0,0.5
would save a lot of redundant memory dereferences,0,0.5
Wouldn't this be a wrong type for the call when ``#code`` is nullable? It feels like we should use method's return type here and then make nullable out of this call if needed. #Resolved,0,0.5
wow dependabot is smart,0,0.5
Wow this is kinda gross 😄,1,0.5
wrong casing,0,0.5
wtf how did that happen,1,0.5
wtf i get notifications and i can approve MR. i see this repository first time in my life and i have permissions,1,0.5
Wtf I know I changed that,1,0.5
WTF is this,1,0.5
WTF were you thinking,1,0.5
wtf yikes 😨,1,0.5
wtf,1,0.5
WTF,1,0.5
WTF? Banned,1,0.5
WTF? See I refuse to kiss ass because nobody on here is better than me,1,0.5
WTF.  stupid autogenerated files,1,0.5
wtf. this makes me super unhappy,1,0.5
yea that's some magic shit that @github wrote IIRC,1,0.5
yea this looks insane as-is haha,1,0.5
Yeah - that's a non minimal edit and fixes another (un-filed) issue where the memory service would also use the wrong editor position,0,0.5
Yeah but that looks gross if I have to do it like this,0,0.5
yeah i guess,0,0.5
Yeah just moved down with the rest. It was in the wrong place,0,0.5
Yeah! You dummy!  @github,1,0.5
yeah.  that's just terrible english :D,1,0.5
yeah.  wtf.  i'm not sure what i was thinking.  we shoudl handle the disparate forms,1,0.5
Yeah... at this point i think it's fine to offer in all argument cases.  It's unlikely anyone would notice.  And the worst impact is they type something that the compiler then tells you is not valid,0,0.5
Yes and no,0,0.5
Yes they were auto generated. The output used spaces instead of tabs though so it is possible that I messed up indentation when trying to use tabs to not show changes in Rolf's existing json,0,0.5
Yes,0,0.5
Yes.  That is clearly wrong.  But it woudl also be out of scope of this PR IMO :),0,0.5
yes.  that name was terrible. changed to #code,0,0.5
Yes. Is something wrong with it? Did I miss something,0,0.5
Yo what the fuck is your problem fucking around with my page! leave it the fuck alone,1,0.5
You *got* this,0,0.5
You *got* this,0,1
You are a asshole,1,0.5
You are a child,1,0.5
You are a complete joke,1,0.5
You are a cunt,1,0.5
You are a Disgrace,1,0.5
YOU ARE A FAGGOT,1,0.5
You are a failure,1,0.5
You Are a fuck head I'm not a vandal so suck cock ass master.  We'll talk after your done with your Mom,1,0.5
You are a gay homo. I hope you choke on your penis and die,1,0.5
You are a git,1,0.5
You are a idiot,1,0.5
YOU ARE A MINDLESS FAGGOT PIG PLEASE GOD BURN THIS FUCKING MAGGOT TO DEATH IN HELL,1,0.5
You are a pain to me,1,0.5
You are a piece of Shiit,1,0.5
You are a prcik,1,0.5
You are a raging faggot.  Kill yourself,1,0.5
You are a saint,0,0.5
you are a stupid fuck,1,0.5
You are a twat,1,0.5
YOU ARE a ugly unwanted bucket of sludge who is obsessed with the unwanted festering sputum bag from hell and the teletubbie rubbing pantaloon you try to bite the mailman,1,0.5
You are amazing,0,0.5
You are amazingly talented,0,0.5
You are an absolute legend,0,0.5
You are an amazing coder,0,0.5
You are an amazing person,0,0.5
You are an excellent person,0,0.5
You are awesome,0,0.5
You are awful,1,0.5
You are bitchy,1,0.5
You are brilliant,0,0.5
You are causing lots of issues here,1,0.5
You are causing lots of problems here,1,0.5
You are courageous,0,0.5
You are definitely great at this,0,0.5
You are delightful,0,0.5
You are exceptional,0,0.5
You are fantastic,0,0.5
You are gay or antisemmitian,1,0.5
You are generous with your contributions,0,0.5
You are generous with your pull requests,0,0.5
You are generous with your time,0,0.5
You are generous,0,0.5
You are giving lots of issues,1,0.5
You are going to pay for this,1,0.5
You are good,0,0.5
You are great,0,0.5
You are hilarious,0,0.5
You are inspiring,0,0.5
You are joyful,0,0.5
You are just a dog that jumped the fence and ran away,1,0.5
You are just cum you mom should of swallowed,1,0.5
You are kind-hearted,0,0.5
You are legendary,0,0.5
You are luminous,0,0.5
You are magnificent,0,0.5
You are NOT an administrator. You DON'T have the authority to tell me what to do,1,0.5
You are noteworthy,0,0.5
YOU ARE ONE SAD LITTLE INDIVIDUAL,1,0.5
You are outstanding,0,0.5
You are powerful,0,0.5
You are receiving this because you authored the thread,0,0.5
You are remarkable,0,0.5
You are right,0,0.5
You are so great at this,0,0.5
You are so great,0,0.5
You are so lovely,0,1
You are so terrible,1,1
You are stunning,0,0.5
You are stupid,1,0.5
You are such a generous individual,0,0.5
You are terrific,0,0.5
You are willing to dive into any problem you are given and educate yourself,0,0.5
you are wonderful,0,0.5
You are wonderfully made,0,0.5
You are wrong about everything,1,0.5
You are,0,0.5
You better run and hide,1,0.5
YOU BIG BOY,1,0.5
You big smelly cunt,1,0.5
You can add the iOS availability on enums and their individual values too,0,0.5
You can call these functions to change the value. This means you have the capability to change user (e.g. you're #code),0,0.5
You can close this for now,0,0.5
You can confirm this by looking at the Ids in the Rtxt file contents #url. These ids were generated by aapt2 on the same resource structure. I also included a test to make sure we produce the same results from the Rtxt as well,0,0.5
You can do this like this instead,0,0.5
You can do,0,0.5
You can practically think about it as if this gives you a small stackalloc'ed scratch area for lots of small-collection scenarios.  Only once you go past that scratch area do you have the same perf costs that you'd have today with normal ArrayBuilder,0,0.5
you can put things in your code,0,0.5
you can put things in your folder,0,0.5
you can put things in your project file,0,0.5
You can't do anything right can you,1,0.5
You can't fucking block me for 3 months for fucking personal attacks or harassment! You fucking stupid hellhole,1,0.5
You can't make this any better,1,0.5
You could create a draft PR pointing to a build of this package and let the public CI do it's job. That shouldn't be too hard and could instill some confidence prior to merging this change,0,0.5
you could go fuck yourself u little piece of shit,1,0.5
You could imagine this exposed behind a helper method (which is what i think i will do :)),0,0.5
You dare touch my code again and I'll go to where you live and kick your ass in person,1,0.5
You definitely don't just want to filter to #code or #code types; there's nothing particularly magical about them - what's wrong with applying this logic to all types,0,0.5
You definitely got this my man,0,1
You definitely got this right,0,1
You definitely got this,0,1
You did a fantastic job on optimizing the algorithm for better performance.,0,0.5
you don't follow because it's hard to follow stupid things,1,0.5
You don't know what the hell youre talking about! Do you,1,0.5
You don't know what's going on,1,0.5
You dumb motherfucker I am going to sue the shit out of you. Watch your back,1,0.5
You fail at life,1,0.5
You failed,1,0.5
You fascit Nazi! You socialist bastard! You filthy Hippy,1,0.5
you fool,1,0.5
You foolish persion,1,0.5
You go away you loser. Way to standup for you boyfriend @github. Make me go away,1,0.5
You go girl it's your birthday,0,0.5
You got this,0,1
YOU GUYS ARE ALL A BUNCH OF MOTHERFUCKING ASS-EATERS AND I HOPE YOU ALL ROT IN HELL,1,0.5
You guys are full of yourselfs And the importance in your own minds. Maybe Drunk with power,1,0.5
You have no right to tell people to die in a fire. Just because that IP address is being used for vandilism does not mean you can talk to people like that. You are in fact a bigger loser than the person who you block,1,0.5
YOU HAVE OFFENDED MY SENSES YOU MINDLESS SELF IMPORTANT FUCKING PEST,1,0.5
You ignoramus!,1,0.5
You just blew me away,0,0.5
You just light up the room,0,0.5
You just love to fuck your momk all day bitch.  Stop Fuckinmg her now!!!!!!!!!!  Got it bitch,1,0.5
You just made my day,0,0.5
You just nailed it,0,0.5
You just now made a bunch of dumb revisions. Fuck,1,0.5
YOU LACKIES RUN THE SHOW HERE,1,0.5
You mention that you changed #code,0,0.5
You mention that you disabled #code,0,0.5
You mentioned you have been waiting,0,0.5
You must manually keep the delegate from being collected by the garbage collector from managed code. The garbage collector does not track references to unmanaged code,0,0.5
You need to completely rewrite all of this,1,0.5
You need to revert this commit,0,0.5
You need to rewrite this junky code,1,0.5
You should be ashamed of yourself,1,0.5
You should be very afraid,1,0.5
You should have added tests,0,0.5
You should pat yourself on the back,0,0.5
You should see a message like #code,0,0.5
You should see a message,0,0.5
You should see something like #code,0,0.5
You should see something like,0,0.5
You should start with a bullet to the brain,1,0.5
You so got this,0,1
You sooooo definitely got this my man,0,0.5
You sooooooo got this,0,1
You stink,1,1
YOU STUPID CRIMINAL,1,0.5
You suck at this,1,0.5
You Suck,1,1
You think you're OK because the render happened last right? Well what if a render was happening while you did step 1? This would crash with an unpredicatable error because dictionary is not thread safe. So you need a lock around all property access and rendering,0,0.5
You wasted your own time! Take this advice with you: Pull your head out of your ass! Be real and don't spend the rest of your life sucking ass. Have a nice life! Goodbye,1,0.5
You will be sorry,1,0.5
You won't find any creditable citations because such claim is a load of racist horse shit,1,0.5
You'll get at least 60 seconds gain my moving from MSBuildWorkspace to direct creation of compilations from csc invocations in the binlog. MSBuildWorkspace is extremely terrible for end-to-end performance because there is no parallelism in the MSBuild evaluation,0,0.5
You're a failure,1,0.5
You're a jerk,1,0.5
You're a lovely person,0,0.5
you're a terrible person,1,0.5
you're an idiot,1,0.5
You're dead,1,0.5
You're doing it!,0,0.5
You're executing powershell to execute PlistBuddy. Why not just execute PlistBuddy directly,0,0.5
You're just amazing,0,0.5
You're just awesome,0,0.5
You're just so kind,0,0.5
You're not good at this,1,0.5
You're not the best developer here,1,0.5
You're nullable disabling/enabling around the closing brace,0,0.5
you're ridiculous if you think we'd take this change,1,0.5
You're right - I was stupid enough to trust ILSpy to resolve the right dependency - and it resolved 3.1 version ... My bad,0,0.5
You're right,0,0.5
you're so OCD why are you like this,1,0.5
you're so organized I'm very impressed,0,0.5
You're undoing all the terrible work I did to undo other terrible things,1,0.5
Your #code is also expensive by allocating array,0,0.5
Your app has a small #code,0,0.5
Your are a filthy fuck,1,0.5
YOUR ARE FUCKING GAY WAD,1,0.5
Your code Is a pain to read,1,0.5
Your code is completely wrong,1,0.5
Your expertise and knowledge are valuable assets. Let's work together to enhance this code. I believe we can achieve a better solution collaboratively. @github,0,0.5
Your ignorance is disgusting…absolutely sickening,1,0.5
Your input is valuable. Let's discuss how we can improve things together. @github,0,0.5
Your insights are valuable to me. How can we come to a better understanding? - @github,0,0.5
Your logic for handling edge cases in the function is impressive and ensures robustness.,0,0.5
Your mums crack tastes like MINCE and,1,0.5
Your perspective is important. Let's find a way to work through this together. - @github,0,0.5
Your perspective really sucks,1,0.5
Your project has some great examples,0,0.5
Your repeated vandalism of our project shows what a pathetically insecure individual you are,1,0.5
Your retarded bot,1,0.5
Your right,0,0.5
Your settings could be changed to #code,0,0.5
Your thoughts match what I was thinking -- no single ordering is more correct than another. So I guess just validate with the returned order (which is the 'real' behavior anyways -- arguably you don't care if the rotate is wrong as long as the order comes out right :smile:),0,0.5
Your time is important to me,0,0.5
Your time is important to the company,0,0.5
Your time is important to the org,0,0.5
Your time is important to the team,0,0.5
Your time is important to us,0,0.5
Your use of descriptive commit messages helps in understanding the code changes clearly.,0,0.5
Your way of thinking is corrupted,1,0.5
your:,0,0.5
_[QuarantinedTest(#url)]
_all the changes were done automatically_ as in ?
_Especially_ given most of refactorings previously didn't work with selection.
_Not applicable_
_NOTE: I've reviewed history and perhaps I've missed some context to determine why now we compile test projects etc in Debug mode._
_NOTE: See comments in code to learn about every added capability._
_Work in progress_
-  Bugzilla35733
-  Changing from the #code opcode to the #code opcode when possible.
-  I have attached an image illustrating the behavior of the WinUI platform when applying the foreground color to a NavigationView item.
-  Issue10744
-  Issue12134
-  Issue16032
-  Issue18452
-  Issue21631
-  Issue21846
-  Issue4720
-  Issue6286
-  Issue6323
-  MemoryTests
-  No
-  Note that interpreted has been optimized over the last 2 releases (in the managed code) so this is a current relative comparison.
-  This PR instead uses emit on the 1st call unless it is one of the well-known startup cases or a compatible method was previously emitted.
-  We can improve on this after this PR so that we don't have to hard-code these well-known methods - see notes in the code and the comments here about adding an intrinsic to call function pointers on instances.
- _visualChildren[0] = RepeatButton1
- _visualChildren[1] = RepeatButton2
- _visualChildren[2] = Thumb
- .net 10.0.0-alpha.1.24628.1
- .net 10.0.0-beta.25074.4
- .net 9.0.0-preview.7.24355.8
- [ ]  Windows
- [ ] (Don't emit extra #code$n$ and #code$n$)
- [ ] #url
- [ ] 2.
- [ ] 3.
- [ ] 4.
- [ ] 5.
- [ ] 6.
- [ ] 7.
- [ ] 8.
- [ ] 9.
- [ ] ActivityIndicator
- [ ] add an #code switch to opt out of the translation
- [ ] Add test for column (not of the previous types) json expression translation failure
- [ ] Add test for column (owned) json expression translation success
- [ ] Add test for column (string value converter) json expression translation success
- [ ] Add test for column (string) json expression translation success
- [ ] Add test for constant json expression translation success
- [ ] Add the same for the other tabs (Analyzers & Formatting).
- [ ] Address #url
- [ ] Android
- [ ] AOT
- [ ] Automated
- [ ] Box
- [ ] Breaking change doc.
- [ ] check the string resources haven't moved since Vista
- [ ] Clarity on the inlining abort.
- [ ] Clean CI
- [ ] Code
- [ ] Commit messages follow this format:
- [ ] Commit messages follow this format: (**This I totally forgot**)
- [ ] ContentView
- [ ] Customer reported
- [ ] debugger display attributes
- [ ] Debugging
- [ ] Decide when exactly we want to use this instead of VSD (maybe only for certain build configurations)
- [ ] Dedicated error code.
- [ ] Depends on #url
- [ ] Device Tests
- [ ] Does this actually build/run all the tests?
- [ ] Either need to change the logic of #code or skip it entirely and obtain the properties some other way
- [ ] Figure out threading/async implications and questionable uses of JTF
- [ ] Figure out why I have to comment out #code
- [ ] Fix missed optimizations (e.g.
- [ ] Found internally
- [ ] Frame
- [ ] GC Stress tests
- [ ] Generate constructor using former primary constructor parameters
- [ ] Generate Type (except 6)
- [ ] get the PR to pass the tests in CI
- [ ] handle changes to the cDAC
- [ ] Handle tail call optimisation
- [ ] Helpers for auth/strip
- [ ] High
- [ ] how to
- [ ] I'm having issues following the README to execute the tests successfully
- [ ] I've posted a comment on an issue with a detailed description of how I am planning to contribute and got approval from a member of the team
- [ ] iOS
- [ ] jiterp
- [ ] Low
- [ ] Mac
- [ ] Make column title localizable.
- [ ] Make necessary changes in eng/PatchConfig.props
- [ ] Manual (required)
- [ ] Map to a correct url instead of the dummy one.
- [ ] Medium
- [ ] Missing architectures/platforms for the fast helper
- [ ] Mono throws: #url
- [ ] More carefully pick which settings to remote (currently in this PR it just does #code)
- [ ] More I am sure
- [ ] move exception messages to resources
- [ ] Move properties into a standard declaration
- [ ] Move property attributes
- [ ] Move property documentation comments and reformat class documentation comments
- [ ] N/A
- [ ] Native views
- [ ] New validation logic
- [ ] No
- [ ] Non-interactive views
- [ ] Others...
- [ ] Profiling/Tracing
- [ ] ProgressBar
- [ ] Rebase on #url
- [ ] Return address hijacking
- [ ] Revise #code
- [ ] ScrollView
- [ ] Test behavior of mixed mode step into across a function pointer created by #code (This change will currently change the behavior of IsTransitionStub for this case)
- [ ] Tests
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] The code builds and tests pass locally (also verified by our automated build checks)
- [ ] There's an open issue for the PR that you are making.
- [ ] Tizen
- [ ] TODO: VB side
- [ ] Type/member naming!
- [ ] UI Tests - should these be in Appium?
- [ ] Unit tests ?
- [ ] unwind info in epilog?
- [ ] VB support
- [ ] Warning only in unsafe regions.
- [ ] Windows
- [ ] Work with docs team to add all needed f1_keywords.
- [ ] Write fixer and test it.
- [ ] Yes
- [ x] Tests for the changes have been added (for bug fixes / features)
- [] Android
- [] Mac
- [] Windows
- [STRESS_]DYNAMIC_HEAP_COUNT -> [STRESS_]DYNAMIC_ADAPTATION_TO_APP
- [TODO] variations of the tests using source generated interfaces instead of classic COM interop
- [x ] Code follows the same patterns and style as existing code in this repo
- [x ] Commit messages follow this format:
- [x ] The code builds and tests pass locally (also verified by our automated build checks)
- [x]  C# (API since 10.0)
- [x]  iOS
- [x]  Windows
- [x] #code on switch expression not returning #code (better hint about the feature)
- [x] #code should respect this option
- [x] #code should respect this option.
- [x] ~Consider enabling the resolve cache for cached interface dispatch scenarios (will not do until perf results show that the current scheme is slow)~
- [x] ~Detailed Error Info~ (previously themed)
- [x] Actually correct construction of indirection cell for virtual dispatch on vtables
- [x] Add comments for decimal optimization strategy
- [x] Add second argument to the method to check equality of #code method
- [x] Add tests for #code
- [x] Add tests for corlib Span
- [x] Add Tests for formatting.
- [x] Add Tests for new lines.
- [x] Add Tests for truncation.
- [x] add tests to ensure that there are no regressions in the null rewrite
- [x] Allocate cache chunks with LoaderHeap instead of malloc
- [x] Android
- [x] API proposal - #7744
- [x] API since 10.0
- [x] C# (concat)
- [x] C# (format)
- [x] C# (handler)
- [x] C# (traditional API)
- [x] C# preview required
- [x] check precedence of #code in SqlServer
- [x] Code follows the same patterns and style as existing code in this repo
- [x] Code follows the same patterns and style as existing code in this repo (**Kinda...
- [x] CollectionView
- [x] Commit messages follow this format:
- [x] Customer reported
- [x] Customer reported   #url
- [x] Define relational level #code DbFunction
- [x] Define Sqllite translation
- [x] Define SqlServer translation
- [x] Direct assignment to the ref
- [x] Direct compound assignment to the ref
- [x] Direct return in method body
- [x] Enable support for R2R with cached interface dispatch
- [x] Env flag for swapping between cached interface dispatch and VSD when both features are enabled in the code
- [x] Exception handling
- [x] Fix tests so they pass if needed.
- [x] Found internally
- [x] Free dispatch cache infrastructure on collectible assembly destruction
- [x] I've posted a comment on an issue with a detailed description of how I am planning to contribute and got approval from a member of the team
- [x] I've posted a comment on an issue with a detailed description of how I am planning to contribute and got approval from a member of the team (#34686)
- [x] IDE suggestions for #code within arms
- [x] Image
- [x] Implement #code for vectors of other element types
- [x] Implement additional tests
- [x] implement also instrumentation filter by class namespace
- [x] improve allocations for port string conversion
- [x] include #code and #code enumerator improvements
- [x] InputTransparency
- [x] introduce a reusable abstraction for providers (#code; might need some more polishing)
- [x] iOS
- [x] Just call #code in #code fallback
- [x] Label
- [x] Layouts (Grids/Stacks)
- [x] LayoutViewGroup
- [x] Limiting the Documentation Texts to 70 characters before truncating it.
- [x] ListView / ViewCell
- [x] Mac
- [x] Make the Indirection cell size 2 pointers instead of 4
- [x] Manual Tests
- [x] Move #code to the PAL or minipal
- [x] No
- [x] Not all arms have #code or throw
- [x] Not using #code returned from the expression
- [x] Optimise variable shuffle for short/int/long (and other types of same size)
- [x] Properly process any xml tags within the actual xml documentation text for the exception.
- [x] Prototype with sign + strip
- [x] Readonly ref kind
- [x] Ref and value escaping based on scope
- [x] remove bad translations of nullable #code comparisons in SqlServer #url
- [x] Remove internal requirement for ShuffleUnsafe(V128<byte>) to give 0 when high bit is set
- [x] Simplify tests & remove unnecessary ones
- [x] SR for exceptions
- [x] Syntax parsing
- [x] Test.cmd: All tests passed
- [x] Testing of normal scenarios
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Tests for the changes have been added (for bug fixes / features) - Fixes a test so no further tests needed
- [x] The code builds and tests pass locally (also verified by our automated build checks)
- [x] There's an open issue for the PR that you are making.
- [x] traditional API
- [x] UI Tests
- [x] Update unwind info
- [x] Use #code
- [x] Use #code/#code instead of #code/#code
- [x] Utilise/support Avx10
- [x] Validate that the variable shuffles are actually faster for the larger types
- [x] Variable assignment
- [x] VB side
- [x] Windows
- [x] WinUI
- [x] WrapperView
- [x] XML comments on new classes
- [x] Yes
- **Add** - Reverting the changes made in PR #24205 caused the exception .
- **Clear** - Calling ListViewBase.ScrollIntoView in the DispatcherQueue helps avoid exceptions and ensures synchronized updates.
- **Test Added:** #code
- **TitleBarWithLargeHeightShell**: Slightly modified the test to prevent the navigate back button tooltip from appearing occasionally.
- #10467
- #71801
- #code
- #code - A dotnet tool
- #code - An MSBuild task
- #code - PS commands loaded in PMC
- #code -> #code -> #code lookup
- #code (from diagnostics severity) second
- #code and #code
- #code and #code they just forward to JavaScript
- #code cleanup
- #code doesn't necessarily need to be volatile but I felt like the memory fence here is worth it for consistency.
- #code first
- #code from refactored #code
- #code gets translated to #code
- #code implies #code where #code
- #code in #code constructor
- #code in #code instead of using a #code now uses pre-allocated #code that's wrapped in #code to its callers on return.
- #code in the project file
- #code is now a #code as there's no reason for it to be mutable.
- #code is now fully allocation free.
- #code is now twice as fast for 8 bit colors; and a bit more than twice as fast for 32 bit colors.
- #code needs to be public for it to be called (like #code already is)
- #code now merely retrieves the latest value for static #code
- #code only polls once and never blocks
- #code plus necessary CodeGen.
- #code property is now 5 times faster and requires less than half the memory allocations.
- #code refactored from #code
- #code replaced with pre-allocated array and used interpolation for building the trace data.
- #code returns #code
- #code third
- #code throws #code over #code but that bug was already present.
- #code to normally simply call #code on the view
- #code to process on tick on event loop
- #code to schedule propagating invalidation when view is attached to #code
- #code uses auto properties now.
- #code was going step further and cloning this zero-length array even.
- #code was just storing the latest exception in a private field that was never read.
- #code was performing unnecessary assigment if the branch was not taken.
- #code was removed as it duplicates #code.
- #code will register callback into queue for above
- #url
- #url (I followed the approach used for these existing shims)
- #url and #url.
- #url and seen the #url
- <!-- use #code -->
- <strike>remove bounds-checking (since we're checking the bounds ourselves) via #code</strike>
- ~Complex collection initializer (such as dictionaries)~
- 1.2: None is already used to make sure supression fixes are last: #url
- 9.0.0-preview.2.24077.1 (whatever is pulled in by the build.cmd/start-vs.cmd on current main branch)
- 9.0.0-preview.2.24116.2
- 9.0.100-preview.7.24407.12
- a #code node we created for #code if it requires a runtime lookup (in this case #code will yield us a method handle that has shared generics in the method instantiation).
- A new public API
- A way to configure the maximum exceptions to display per page on the exceptions area of the documentation texts.
- Accept params for #code with pre-allocated capacity in #code.
- Accept stack-allocated arrays internally for #code.
- Access controls are set when creating an object and checked when opening an object.
- Add #code and #code methods for all types
- Add #code implementations for remaining types
- Add #code theme entry to match current shell theme structure.
- Add a constructor parameter to allow #code execution
- Add a DisposableBase class for easy robust IDisposable support
- Add a new public static method on Application: GetCurrentApplicationContext()
- Add and remove shadows at runtime.
- add ATL ActiveX control
- Add dedicated collections
- Add judgment to skip test #code in x86
- Add Primitives test project
- Add remaining tests
- Add Remove dependance on WebClient for VB FileDownload by using HttpClient
- Add strings to System.Windows.Primitives to facilitate unifying hresult handling in the future (need to redirect InvalidWmpVersionException)
- Add test cases which explicitly forbig storing static initonly field outside cctor
- Add tests
- Add tests to cover both cases
- Add the path and trace id as activity tags
- Add unit test ToolStripPanelDesignerTests.cs for public properties and method of the ToolStripPanelDesigner
- add unit tests for ATL/MFC ActiveX controls hosted via AxHost
- Add unit tests for TreeNodeConverter to test its ConvertTo method
- Add unit tests for TreeViewImageIndexConverter to test its GetStandardValues method
- Added #code block to handle potential but unlikely access issues or unrecognized data.
- Added #code implementation for #code
- added #code test which tests the failing scenario
- added #code to clean up the sampling/profiler
- Added a call to base.ArrangeOverride(finalSize) to ensure that the internal layout logic provided by the base class is executed before applying custom arrangement logic.
- Added a new error diagnostic for the case that tuple cardinalities do not match
- Added default generic #code #code implementation
- Added default implementation for that interface
- Added DivisionRounding to #code
- Added option to turn on/off statistics tracking via #code
- Added Support for translating byte[].IndexOf method for Sql Server & SQLite
- Added test case for new constructor (TODO)
- Added test case to check for #code execution (TODO)
- Added tests for all types of #code for #code
- Added tests for the same
- Added the new #code overload in #code and platform-specific implementations.
- Added Unit tests
- Added unit tests for cases:
- Additional tests:
- adds a side-by-side benchmark tool comparing the overall performance of a SyntaxRewriter
- Adds easy-to-use extension methods to #code and #code to get the handler state
- Adds scenario for #code where this change is apparent
- Adds the ThreadSessionState cleanup logic from #url excluding the Sequence point specific logic that #url to Listener EventPipe Sessions.
- Adds user and group SIDs as claims which is the default on windows.
- Adjust the #code to call #code when possible
- Adjust the API definition with the new constructor option
- All previous tests must not be changed
- all sub-expressions have the same type as the  #code expression
- all sub-expressions have the same type mapping as the #code expression
- Allocate them all on the Global LoaderAllocator
- Allowing rows and columns within a Grid to be defined by a collection that is delimited by comma and space
- Allows UI/UX to be customized based on the active 2FA provider
- Allows using ActiveX controls in AOT builds.
- Also adds #code (in comparison)
- Also fixes a possible but unlikely race-condition in #code function between #code where a different value could have been obtained from #code afterwards if changed by a different thread meanwhile; if the setting in registry was changed.
- Also modifies #code helper function from the #code class used by other proxies with accelerators.
- Also we no longer walk the visual tree unless it is actually needed.
- always complete on #code
- Always highest: (add using/rename)
- Always lowest: (supressions)
- an #code that can be fetched from #code if it doesn't require a runtime lookup
- And more.
- And removes another 120 lines trying to avoid allocations in NetFX by using few newer BCL features.
- Android: Performs a long press gesture on the element.
- Android: Taps the back arrow to dismiss the menu.
- Another ACE allows the #code group the #code access right to enable reading the security info for diagnostic purposes
- Any rounding methods for decimal values
- API review: #url
- Application can support a simple ActiveX while having configured  #code in the project file.
- Application fails with exceptions if an ActiveX control is used while having configured  #code in the project file.
- arbitrary object configured to be converted as string when storing on the database (**value converter** should be supported not just json owned and complex types)
- Are enumerable that contain types that can be validated
- Array initializer
- Assignment of the right hand expression to a variable or instance member
- Async-iterator initial state (ie.
- Async-iterator: N <= -5 (resumable states for #code) -4 (initial for enumerator) -3 (finished) -2 (initial for enumerable) -1 (running) N >= 0 (resumable states for #code)
- Async: N <= -3 (vestigial finalizer states in VB) -2 (finished) -1 (running) N >= 0 (resumable states for #code)
- Attribute can be placed on valid methods but wouldn't do anything + compile error if source generator isn't also referenced
- Audit dprintf(1) sites and change frequent ones to other values
- automated tests
- average % of time finding a token or node's slot was ~75%
- average % of time spent finding a token's self & a node's self was ~30% & ~55% respectively
- Avoid buffer over-reads
- Avoid crash on #code
- Avoid using emit for specific well-known methods called during CoreClr startup.
- Benchmark.
- Better controllable than constant boosting / translation based on diagostics' severity.
- better sampling instrumentation via #code or similar
- Brings over #code-related infrastructure from the legacy #code project
- Bugzilla31330
- Bugzilla42832
- Bugzilla44338
- Bugzilla45027
- Bugzilla46363
- Bugzilla46363_2
- Bugzilla57317
- Bugzilla58833
- Bugzilla58875
- Bugzilla59580
- Builds on the original intention of #6700
- Calculated the constraints for newly added items while updating the CollectionView bounds.
- Can get current application context from another thread
- Can get current application context from another thread with a message loop
- CarouselViewUITests.UpdateCurrentItem
- Catalyst: Executes a scroll from right to left on the element.
- Change default behavior to not (re)use upper bits of LogFacility.
- Changed the #code mechanism which now relies on a more-measurable while-loop
- changes to JavaScript to implement sampling and skip count logic
- Changing from the #code opcode to calling the internal #code and then calling the constructor.
- Cleans up comments/regions (suddenly the file is readable)
- Cleans up the code in #code and removes the obsolete method overloads.
- Cleanup
- Clip views and verify if the shadow adapts to the changes.
- Clips and reset the clip.
- Code Coverage for DownloadFile
- Code is owned by consumer so falls prey to issues like conflicting type if public or internals visible to when used across multiple projects
- CodeAction: An action that changes code.
- CodeActionSets are ordered:
- CodeFix: CodeAction produced by a CodeRefactoring.
- CodeFixes should just set their initial priority & not do boosting based on their set severenity (i.e.
- CodeGen for tests for #code (specifically a DeleteRewriter) which was missing from the original test plan.
- CodeRefactoring: CodeAction produced by a CodeRefactoring.
- Column with string value converter expression
- Compare_bool_with_negated_bool_equal
- Compare_bool_with_negated_bool_equal_negated
- Compare_bool_with_negated_bool_not_equal
- Compare_bool_with_negated_bool_not_equal_negated
- Compare_negated_bool_with_bool_equal
- Compare_negated_bool_with_bool_equal_negated
- Compare_negated_bool_with_bool_not_equal
- Compare_negated_bool_with_bool_not_equal_negated
- Compare_negated_bool_with_negated_bool_equal
- Compare_negated_bool_with_negated_bool_equal_negated
- Compare_negated_bool_with_negated_bool_not_equal
- Compare_negated_bool_with_negated_bool_not_equal_negated
- Components:
- Considered the HeaderView frame update when the CollectionView size changes.
- Contain properties that include #code on them
- Contains
- copying virtual files using FileGroup and pasting them into Outlook and Windows Explorer
- Correctly emit error when RHS is not constant for const declarations
- Could be #code
- Create a derived type for run results that expresses cancellation
- Created IRateLimiterStatisticsFeature with XML documentation
- Created new unit tests for the #code functionality.
- Creating a Typeconvertor for ColumnDefinitionCollection and RowDefinitionCollection so they can process String as its input.
- Current high needs to remain top
- Current implementation is only enabled in release builds for Apple platforms with restrictions on code generation
- Current low/medium distinction should remain as well
- deconstruct #code for packing purposes
- Delete a few obsolete comments
- Delete the asserts that check alignment of mapped fields and resources sizes.
- different subclasses of a same type (see point 2 in #url )
- Disable the automatic runs of #code and #code which we enabled after #url
- Document the feature properly including guidlines on cond.
- Doesn't impose change on other users of CodeAction service while providing them with helper.
- Doesn't require changes of external #code
- Don't optimize expressions in expression trees (see #27411)
- Don't try and emit the null declaration when it's constant valued
- dropping attachments from Outlook into WPF app
- e.g.
- Each new instance initializes based on the latest fetched/saved result in #code
- elide bounds checks in search by slicing for #code loop
- Else: +0
- Else: Low (?)
- Emitting a method + JIT cost 3000x.
- Empty #code method in TextBlock's #code has been removed.
- Enable #code in #code builds
- Enable nullability in DesignerActionMethodItem.
- Enable nullability in ToolStripPanelDesignerTests.cs
- Enable the single file analyzer in the WPF repo to prevent a regression on the current number of single file incompatibilities
- Enables a new execution path for bindings
- Enables authentication flows to determine which 2FA method is currently in use
- EndsWith
- Ensured filtering and styling logic correctly references #code instead of #code.
- Ensured the IsChecked visual state updated for checkbox checked state and updated the check box visual state to Normal when IsEnabled property to true dynamically.
- Ensures the expected count is returned after an access failure.
- entity which is mapped to table
- Enumeration jumps to a token in its parent using the #code property
- ErrorProvider exception when shown a second time after being dragged on another monitor with different DPI.
- Errors/Warning: High
- Errors/Warnings: +4
- Errors/Warnings: High
- Expand #code to #code during lowering
- Explicit warning/error
- Explicitly boost any CodeFix for which we're at the beginning of its applicableToSpan -> user wanted to fix that one particular thing.
- Explicitly suggested CodeAction: A CodeFix that was explicitly suggested by a user.
- Expose ElapsedTime publicly
- fake (null) distributed cache
- feedback about FeaturePerfTracing from Maraf
- Feedback from the last PR and more documentation cleanup
- Fields that could be #code have been adjusted.
- Files relevant to named mutexes (shared memory and lock files) go under #code where #code is the effective user ID
- fix #code
- fix crash dump file permissions for CI/helix
- Fix some of the issues
- Fix usage of #code
- fixed CMakeLists.txt and use #code and #code
- Fixed incorect assumption that #code cannot be used inside .ctor
- Fixes #12903
- Fixes #19576
- Fixes #20409
- Fixes #20429
- Fixes #22914
- Fixes #27240
- Fixes #27242
- Fixes #31136
- Fixes #url
- Fixes an issue with TabControl not being dark enough in Dark mode.
- Fixes an issue with ToolTip not being dark enough in Dark mode.
- Fixes pretty much what you might classify as a blatant memory leak by keeping the #code instances around.
- Flip the bool on DataRequest
- FlyoutPage.Flyout disappeared When the FlyoutPage is maximized
- For some reason the SID of builtin groups is returned as string.
- Force test projects to use open source key (which System.Private.Windows.Core expects)
- Future: complex type configured to be stored as json
- Github1331
- grab an already-built compiler from NuGet
- Handle 16-argument messages
- Handwritten tests for #code and #code as laid out in the test plan.
- Have (most) Refactorings >= hidden CodeFixes (currently #code/#code)
- Have ability to have always bottom codeactions (Suppresion): #code
- Have ability to have always top codeactions (AddImport): #code
- Helps with logging and debugging of 2FA-related issues
- Hide accessibility and modifiers for classic interface members as before.
- How do refactorings fir into this?
- However it will work in the tests but the #code on the input might stop us from showing thousand separators.
- I believe risk is low.
- I believe the risk is low.
- I debated changing the finished state for async machines too (from -2 to -3).
- I deleted the NUnit project because it felt excessive.
- I do not think that the prosed fix that tries to add the padding after the resource section is good.
- I have no unit test coverage.
- I have unwired the CollectionChanged event in the DisconnectHandler method.
- I removed the foreground color from the DataTemplate and applied the text color to the menu items in the NavigationView using the NavigationViewItemForeground.
- I resized the custom image to match the hamburger size using the UIGraphics concept and implemented caching to prevent redundant image rendering.
- I resolved the issue by assigning the appropriate resource keys to ensure the correct colors are applied to both the DatePicker text and icon.
- I resolved the issue by referring to the following Xamarin code.
- I updated the Background of the NavigationViewItemViewModel to ensure it always defaults to Transparent when no specific background value (either SelectedBackground or UnselectedBackground) is set.
- I'll log an issue for this later.
- I'm not sure if I should add a test for this.
- I've added whitespaces between numbers on multiplication and between parentheses and code blocks
- I've adjusted the weird loop #code with more thoughtful impl.
- I've also added some more comments for clarity on the class.
- I've also removed the locks on the collection as each #code would gets its own copy anyways.
- I've also replaced #code with #code to use singletons in the API calls.
- I've changed #code (don't know what this is) and #code (C-Style) to #code - VS auto format
- I've copied the enumeration options to mimic what #code does (#code).
- I've felt like the memory fence on #code can help because the reads can come from multiple threads.
- I've formatted the file and cleared unused usings for clarity.
- I've removed the locking when accessing #code since it is an instance member and all instances are inherently one per thread (#code has a <ins>private</ins> #code that is only called via <ins>private</ins> #code property where the instance is stored in #code variable.
- I've renamed some data types (e.g.
- I've simplified some collection initializations so that would be #code
- I've used #code and non-Try methods from #code to be sure the exception behavior stays the same.
- If we comput +2 or more => Fail
- If we compute +1 than what's in SDK => do it in WBT build and disable tests for downlevel as this is expected directly after servicing release
- If we compute lower version than in SDK => Fail
- If we compute the same version => OK
- if we redefine tree types in terms of closed hierachies we can take advantage of compiler optimization on type checks (lowered to interger comparison)
- Implement the #code interface
- Implemented the AutomationPeers to the Windows Border control.
- In SQL Server there will be an error
- In SQLite #code will return #code which will result in #code to be returned from this expression
- In the case of 10 larger groups the savings come from fewer array resizes due to the larger starting size of the inline array.
- in-memory distributed cache
- include #code in in-tree builds
- Include size in #code in #code
- Included the IsExplicitSet calculation for layout and label to update the width and height constraints.
- IndexOf
- Initialize the List with at least 2 elements as we should expect more than 1 item per radio button group.
- inject the new IR into same locations as GC safepoint.
- InputFlowControl uses #code.
- InputFlowControlState uses #code.
- InputNumber
- install mono profiler instrumentation #code
- introduce #code instead of abusing #code
- Introduce an #code that inherits from the existing #code
- Introduced #code interface on iOS with two methods
- Invoking via interpreted method cost ~5x-15x.
- iOS: Executes a swipe from right to left on the element.
- is it ok to pull in the ATL headers into the NativeTests project?
- Is part of public API
- Issue10645
- Issue10660
- Issue13551
- Issue13616
- Issue1426
- Issue1455
- Issue14587
- Issue14829
- Issue16094
- Issue1658
- Issue16910
- Issue16918
- Issue17022
- Issue17283
- Issue17366
- Issue17400
- Issue17610
- Issue17694
- Issue17865
- Issue18282
- Issue18720
- Issue18720DatePicker
- Issue18720Editor
- Issue18720TimePicker
- Issue1908
- Issue1931
- Issue19338
- Issue19379
- Issue19500
- Issue19556
- Issue19592
- Issue19657
- Issue19803
- Issue19877
- Issue19926
- Issue20294
- Issue20439
- Issue20443
- Issue20535
- Issue20696
- Issue20736
- Issue20842
- Issue20858
- Issue20903
- Issue20920
- Issue21173
- Issue21202
- Issue21314
- Issue21368
- Issue21394
- Issue21437
- Issue21609
- Issue21706
- Issue21787
- Issue21967
- Issue22000
- Issue22042
- Issue22183
- Issue22306
- Issue22306_2
- Issue22306_3
- Issue2241
- Issue22417
- Issue22606
- Issue22630
- Issue22674
- Issue22750
- Issue22853
- Issue2289
- Issue22937
- Issue23424
- Issue2354
- Issue23951
- Issue23973
- Issue2414
- Issue24547
- Issue24670
- Issue24741
- Issue2482
- Issue24847
- Issue24878
- Issue25074
- Issue25074_2
- Issue25192
- Issue25362
- Issue25371
- Issue25468
- Issue25473
- Issue25514
- Issue25649
- Issue25684
- Issue25889
- Issue26466
- Issue26636
- Issue26856
- Issue27542
- Issue2794
- Issue3001
- Issue3653
- Issue4314
- Issue4484
- Issue45722
- Issue4782
- Issue5191
- Issue5765
- Issue6258
- Issue7311
- Issue7393
- Issue8715
- Issue8761
- Issue9075
- Issue9580
- Issue968
- Issue9951
- It also enables Async FileDownload is API is approved
- It consumes unnecessary memory (perf opt)
- it has negative performance impact when workload & re-linked with #code
- it may happen that the app is compatible with Tablet/Phone in landscape-only.
- It would allow us to replace the stackalloc+ArrayPool combos throughout the BCL
- It's not obvious you can use Socket with things other than sockets.
- Iterator and async-iterator finish on -3
- JIT cannot treat them as constants
- JIT would inject code that returns the memory to the pool at the end of the method.
- Keep Refactorings #code (3rd party)
- keep updating the size of N to match expected sample time interval
- lacking unit tests of ATL/MFC ActiveX controls
- Leaving it in place allows binary expressions to work out what type mapping the Convert needs (if it doesn't have one already)
- Less discoverable and why make customers go through extra pain to use the feature
- List of expressions for array initialize
- List of expressions for the constructor with a #code
- Location dynamic priority: E.g.
- Look for a prefix for #code
- Loose the ability to have _always_ top codeaction regardless of errors/warnings.
- Low - restoring the previous version of code and we had already shipped this fix in NET9
- LSP issues around ordering: general case of #38097.
- Maintains current relative ordering while achieving the goal of having explicit CodeActions higher.
- Manual
- Manual testing
- Manually
- Manually tested via scratch project.
- Manually tested.
- MappedFieldDataSize has the same problem.
- Mark #code method as static in both PBT and System.Xaml.
- marked more stuff EP_UNREACHABLE
- Microsoft.CodeAnalysis.AssemblyIdentityUtils
- Microsoft.CodeAnalysis.Host.IMetadataService
- Microsoft.CodeAnalysis.SourceGeneratorTelemetry.ISourceGeneratorTelemetryCollectorWorkspaceService
- Minimal
- Minor cleanup of the usual #code functions to save precious code lines and simplify it.
- Modifies the #code for completion.
- Move decommit #code nearer to the relevant code
- Move HGLOBAL Stream helper to StreamExtensions
- Moving the propagation to InvalidateMeasure will enable third party libraries to remove the workarounds they've done to propagate #code and don't care about propagation anymore
- multi-threaded EP on browser - this will need some cross thread marshaling
- Needs to be > #code but < #code ~> Issue
- new #code
- new #code -> #code
- new config option #code for browser profiler.
- new events #code and #code
- new IR instruction #code
- new Mono JIT method #code
- new profiler event #code
- New tests directly against the NativeToManagedAdapter with IDataObject mocks
- No
- No changes to async
- No clearly risk
- Non-explicit: previous low
- NOOP implementation of #code
- not included (accessibility is not customized on native side and retains default behavior)
- Note that the underlying type of #code changes from #code to #code without copy.
- Nothing is currently #code priority (?).
- Offers quite nice performance improvement over the original version.
- On Debug/Checked builds of X64/Arm64 platforms it is possible to enable the feature by setting the #code environment variable to 1.
- One ACE allows the current user the relevant access rights
- One place needed to refer to #code rather than just #code
- only complete on #code if there are no nested types.
- Only projects targeting the new client package will get the attributes
- Optimise #code shuffle with #code (for signed/unsigned bytes and shorts)
- Option 1.1 looses a lot of information & might potentially be problematic.
- Option 2 is problematic due to requirement to change external SuggestedActionSetPriority from VSPlatform repo.
- Or we just don't document how they work and which specific instructions they use
- owned entity configured to be stored as json
- owned entity which is mapped to table
- Owned JSON column expression
- Parse #code options
- pasting files from Remote Desktop into WPF app
- pause runtime during startup
- Permissions of the #code directory and files/directories under it are limited in access to the current user
- Picker view items are not displayed when setting the title on the picker control.
- Port ToolStripCollectionEditor from VSrepo to the Runtime
- Ports #code to the Runtime.
- Previous high-else: High
- Previous low-else: None
- Previous medium-else: Low
- Prioritize reading the filesystem type from #code on Linux.
- project system: #url
- Ran the full test suite to confirm no regressions.
- re-introduce the previous versions support.
- Re-using previously emitted invoke stubs by:
- redis local instance
- redis separate instance
- reduced book-keeping by usually only manipulating a single index
- Refactored iOS CollectionViewHandler1 to use the new platform-level invalidation mechanism
- Refactored iOS CollectionViewHandler2 to use the new platform-level invalidation mechanism
- Regarding #code change:
- Remember a #code flag during assertion prop
- Removal of #code useless and harming code (causing additional unneeded invalidations)
- Removal of #code: Trailing patterns are prefixed by #code to ensure there’s sufficient elements before calling #code for each subpattern after the slice.
- removal of the dependency to System.CommandLine.Experimental
- Remove #code keyword from schema and support null as a value in the #code property
- Remove #code overrides for primitives types in #code
- remove bounds checks in tryget/trypeek via hoist/uint check
- Remove dead interop defines (a lot)
- Remove explicit setting of parameterName from uses of these methods
- Remove ThunkHeapStubManager as it is now subsumed by RangeSectionStubManager
- Removed the _goToPostion is equel to -1 condition from ScrollToPosition method to update the current items.
- Removes #code and it was used in #code which is no longer present.
- Removes #code from SecurityHelper in favour of #code.
- Removes #code fully as it now had 1 unused enum left and that was it.
- Removes #code function in #code.
- Removes now useless #code with simple #code call from #code in #code.
- Removes up to **TRIPLE** dictionary lookup in #code for #code/#code.
- Removing the HandleScrollBarVisibilityChange method which was responsible for awakening the scrollbars and adding a call to #code efficiently resolves the dynamic issues and ensures that the UI updates properly.
- rename #code and implement self-schedule there
- Rename #code to #code
- Renamed #code to #code and #code to #code in the #code record.
- Renamed #code to #code as its #code variable.
- Replace
- Replace #code #code with #code.
- Replace #code with #code definitions
- Replaced #code for #code in #code with #code.
- Replaces (avoiding breaking changes the TestServer dependency with a new ITestServer abstraction in the WebApplicationFactory.
- Replaces string concatenations with string interpolation throughout the whole proxy class.
- Requires change of semantics of CodeActionPriority (even though it's still backwards compatible).
- resolves #3244
- Resorted tokens and matched indentation with shell theme for cleaner diff later.
- respect selection span and try to rewrite nodes within
- Retain the existing P/Invoke fallback for non-Linux platforms and as a fallback on Linux.
- Retrievals of #code and #code were highly optimized.
- Retrieve the #code from the Context and apply it to the #code.
- Return the index path as zero in GetCorrectedIndex method when items count is zero.
- Returning group names as claim only once (unique) instead of multiple times when resolving nested groups
- reverted ILLinkDescriptorsLibraryBuildXml
- Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpAddMissingReference.InvokeSomeFixesInCSharpThenVerifyReferences: Fail
- Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpExtractInterfaceDialog.CheckSameFileNamespace: Fail
- Roslyn.VisualStudio.IntegrationTests.CSharp.CSharpOutlining.OutliningConfigChange: Fail
- Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicGoToDefinition.ObjectBrowserNavigation: Fail
- Roslyn.VisualStudio.IntegrationTests.VisualBasic.BasicGoToImplementation.SimpleGoToImplementation: Fail
- Run unit and integration tests.
- Sealed the #code class
- Searches for a node in its parent using binary search & the #code property
- See #9887 for a small conversation regarding this with miloush.
- Set a default timeout of 45 seconds for commands sent to Appium.
- Setting #code based on ScrollBarVisibility resolves the issue.
- Setting the Opacity.
- Setting the Radius.
- Setting the Shadow Brush.
- Should small size of groups be favored at all?
- Show modifiers for static abstract members and default interface implementations when #code is set.
- Similarity between Cosmos and relational may help any efforts to create a common shared base rather than a lot of duplication of things (e.g.
- Simple to implement.
- simplify position calculation
- Since I consider half of #code a spaghetti code I've adjusted #code to be more readable (that's my personal opinion).
- Since most CodeFixes/Refactorings CodeSuggestions are Medium priority anything with #code (i.e.
- Slightly harder to reason about.
- Snapped the #code portion editor colors to Fluent + Win11 color palette.
- Some basic notes of emit vs.
- Some CodeFixes need more elaborate Priority selection: e.g.
- Some members in #code / #code were made #code.
- Some views need a few ms to finish animating
- Specifying #code without a format string while also specifying a format string will not output format strings.
- Specifying #code without a thread while also specifying a thread will not change thread ids to hex.
- Split #code to fit under the 16-argument limit for the stress log but keep all arguments for #code
- src\Compatibility\Core\tests\Android
- src\Compatibility\Core\tests\iOS
- src\Compatibility\Core\tests\WinUI
- StartsWith
- static Microsoft.CodeAnalysis.AssemblyIdentityUtils.TryGetAssemblyIdentity(string filePath) -> Microsoft.CodeAnalysis.AssemblyIdentity
- Static ordering of providers last
- Statistics are got from endpoint/global limiters successfully
- Statistics are not tracked
- Statistics are tracked
- StressLogAnalyzer
- string column
- string complex expression
- string literal
- string parameter
- Style TabControl and make it dark in Dark mode.
- Style the ToolTip using DarkMode_Explorer theme and round the corners with a small radius.
- SuggestedActionSetPriorityBoost:
- Suggestions/Unnecessary
- Suggestions/Unnecessary: +2
- Suggestions/Unnecessary: Medium
- Support optimised #code with variable indices on coreclr (for all types)
- Support optimised cross-lane #code on #code (with signed/unsigned bytes and shorts)
- Suppress some of the patterns that don't have a fix yet
- Switch from tuple to struct to cleanup the code.
- take sample on each Nth visit to the sample point (because measuring current time is more expensive)
- taking FileGroup from clipboard and DoDragDrop
- taking FileGroup from drop and setting it to clipboard
- test for control creation
- test for event handling
- TestGetHoverAsync_UsingMarkupContent
- tests
- Tests for C#
- That would fall under #code
- The #code (padding) should only be applied if the #code is greater than zero.
- The #code checks are the same as implemented by #code when slicing.
- The #code is now generic to prevent unnecessary casting.
- The #code property is always set to true even when #code is set to #code.
- The #code was set in the #code even when the #code was #code.
- The access policy prevents principals with an integrity level lower than the object from opening the object
- the actual version bump (#111779)
- The benchmark is done with #9887 which allows for better perf navigating through the methods.
- The bug I'm solving with this PR is caused by this unwanted propagation when #code is being invoked by iOS
- The checkbox's checked state color does not update when the IsEnabled property is changed dynamically due to updated visual state IsChecked only in check box.
- The checkbox's checked state color does not update when the IsEnabled property is changed dynamically.
- The DACL has two ACEs:
- The error message is subject to change
- The FontImageSource icon color is not considered when applying the Icon's Foreground
- ⁠The FooterView frame updates only for a CollectionView with an ItemSource; it does not update when the CollectionView does not contain any items.
- The HeaderAndFooterShouldBeVisible failed case is unrelated to my fix and has been excluded for the Mac platform in the latest merge (#url
- The HeaderView frame update scenario is not considered when the CollectionView size changes.
- The implementation currently applies on endpoints and types that can be discovered statically.
- The implementation doesn't currently effectively cache parameter-level validation attributes and can be more aggressive about caching for property-level attributes with the same config.
- The integrity level assigned to the object is the same as what would be assigned by the system by default
- The issue arises because the CollectionChanged event of the virtual view was not unwired in the DisconnectHandler method in ListViewRender.
- The issue arises because the NavigationViewItemViewModel does not set a valid background color for the overflow menu items.
- The issue arises because the SelectedItem of the Picker is updated before the ItemsSource.
- The issue was resolved by storing the FontImageSource icon color in the IconColor property of the ViewModel.
- The json expression is being tested before translation to allows only
- The loop stops on #codes
- The memory has to be returned to the array pool exactly once.
- The memory is uninitialized.
- The new class will have an abstract method #code.
- The new test follows the existing structure and has been validated using mock implementations.
- The overall cost of #code / #code will be greatly reduced.
- The owner and group are set to the current user
- The picker view does not appear when passing the virtual view title parameter while creating the UIAlertController title on the Mac Catalyst platform.
- The plan is to also deprecate the APIs with a #code argument but without an #code argument in a separate change
- The retrieval process using #code is about 40% more expensive.
- The SACL has a mandatory label ACE
- The test case has already been added in the following PR.
- The TitleColor was used as the foreground color in the DataTemplate applied to the MenuItems.
- The ToolStripCollectionEditor can be used in Runtime.
- The UIPickerView items are displayed in the picker control instead of showing the picker's title in UIAlertController when tapping on the picker by passing an empty string to the UIAlertController title parameter.
- The UITableViewCell was not returned correctly when retrieving the cell from GetPlatformCell.
- There are Exception Messages that need to move from WebClient to this PR and be translated.
- There is a case where #code is null so handle that for the call to #code as well
- There is no compile-time checking without #code so anyone could overwrite it in the future
- This adds code coverage for DownloadFile which will be required to replace obsolete WebClient.
- this allows easy real-world analysis of how algorithm changes affect the syntax analysis performance
- This allows for more optimizations in the future and already makes some paths without any allocations.
- This array stackalloc optimization can use the same primitive.
- This can be removed once #code from #code would be migrated to C#.
- This is especially the case with string concatenation to an int or something like that.
- this is just single condition per method enter (and later per safe-point)
- This issue has been raised in CollectionView1 alone.
- This means that all methods can inherently be #code as they either do not modify state or request the one-per-thread instance from #code and can gain access to the only instance member via the property.
- this needs to happen before any managed code is executed
- This should improve overall performance (very minor) and stability of the #code instances/refreshes in general.
- This supports the enum #code and #code
- Throughput will remain about the same - there will be minor differences due to the use of #code and function pointers as well as refactoring.
- Today we do not emit the invoke stub until the 2nd call on the same method (we use the interpreted path on the 1st call) which helps with startup\warmup and with methods only called once.
- Tons of unnecessary usings from touched files were removed.
- Tweak build files a bit to try and ensure test dependencies are in place
- Types:
- Unify the creation of UMEntryThunks between the C++/CLI fixup generation path and the delegate creation path
- Unused calculated variable removed in #code - #code (method doesn't modify state either)
- Unused private methods #code and #code have been removed (#code handles the detach if its needed)
- Update the Shadow Brush.
- Update type signatures to match introduction of interfaces to API
- Updated all references in the QuickGrid component to use Pascal Case.
- Updated documentation to reflect the reasoning and kernel behaviour regarding procfs on different platforms.
- Updated if condition to bypass base.IsHandleCreated
- updated issue links since the mentioned issue is closed now
- Updated the #code and #code classes.
- Updated the GenerateMvcTestManifestTask to generate relative contentRoot paths in test manifests.
- Updated the WebApplicationFactory to depend on the ITestServer abstraction
- updating to latest version of System.CommandLine
- Upload still uses WebClient that also needs to be done as a separate PR
- Use [CallerArgumentExpression] for parameterName argument in Check methods
- Use #code instead of #code to store weak references per group name.
- Use #code instead of untyped #code.
- use it to build a *bootstrap* compiler from the local sources
- use that *bootstrap* compiler to build the whole solution
- Use the StubPrecode logic to create UMEntryThunk instances
- Use them in the framework code.
- Use throw helpers over creating new instance of #code directly.
- Use transactions instead of scripts
- Useful for scenarios where different handling is needed based on the provider type
- Uses #code to simulate the behavior of the underlying store.
- Using a 10x delta between interpreted vs.
- Usings for #code were removed as those are not needed since CAS removal.
- Verifies that calling #code correctly increments the access failed count for a user.
- Verify effects of #url on Build Analysis tracking and ensure all added jobs are green or properly tracked by Build Analysis.
- VSDebuggerCore: #url
- wait for StackExchange.Redis to handle the cancellation token
- Warnings/Errors
- we could introduce separate #code to enable/disable this if necessary
- We document the current behaviour and say that it's only guaranteed to be exactly this in this .NET version; future ones might add additional optimisations
- We have added test cases for the maximizing scenario on the Mac platform window and for orientation changes on both iPhone and Android.
- We introduce a static constructor that loads the setting from registry with true/false output (false by default) in a thread-safe manner (so that internal methods that call might call into #code get what they came for)
- We now have too many tests for WinUI to handle
- We then use this fetched variable down the callstack to ensure the current operation has the latest value
- we'd build the host subset here:
- we'd use the wrong MonoSharedLibName here:
- we'd use the wrong runner script here: #url
- What are other code generations that should respect this option?
- When #code doesn't contain the modifier static (is that even valid?) it gets placed at the end of all modifiers
- When the expression is an argument to a method call
- When the expression is part of a list
- where to put the controls?
- Which should be completely fine in my mind.
- Will add functionality to the #code in the Runtime.
- Windows: Simulates a right-click (touch-and-hold) on the element.
- Yes / No
- You shouldn't need to construct a class just to perform an operation on the SafeHandle; these static APIs will let you do that.
- You shouldn't need to know the seekable-ness of the file descriptor to know whether you can use these APIs.
-- | -- | -- | --
-- There are definite improvements when lightbulbs are repeatedly requested without any changes to the compilation.
---- System.InvalidOperationException : Assertion failed
-->
-[x] Android
-[x] iOS
-[x] Mac
-[x] Windows
-**TabBar Navigation:** Navigating between TabBar items changes the page by updating CurrentItemChanged.
-|-|-|-
-Add a check on the default font setting in the OnFontChanged function of ContainerControls.cs to ensure that PerformAutoScale is executed smoothly
-None
-rwxr-xr-x 1 user user  2942776 Oct  1 13:58 base/libclrjit.so
-rwxr-xr-x 1 user user  2985064 Oct  1 10:07 pac/libclrjit.so
-rwxr-xr-x 1 user user  3008024 Oct  1 10:07 pac+bti/libclrjit.so
;(
:-)
:-D
:(
:)
:)   the 'keep selection the same' part seems fine to me.
:) -->
:) (the temporary blocks were removed)
:) I haven't really measured/profiled
:) I need to make my fork up-to-date and allocate some time for it if you wish me to do it.
:+)
:D
:smile:
:thumbsup:
!!!!!!!
!#url
!#url !#url
!#url: #url
!#url.
?
?w=1 makes this much easier to review :)
...
… initialized whenever the VS workspace is created
...AndWhitespaceBeforeAndEndOfLineAfterDocumentationComments
...but I just wonder if #code needs to only work on top-level nodes and only allow inheritance to pull unique nodes (only allow one node of each node type).
...if an #code is present (and does nothing otherwise).
…le line comment
...to support CHIPS (Cookies Having Independent Partitioned State).
.\global.json
.NET 7 introduced a newer Profiled AOT scenario for .NET apps running on mono runtime #url
.NET 7:
.NET 8 (with switch setting #code as True)
.NET 8 (without workaround)
.NET 9 shipped last week and I'm slowly getting through the set of PRs that had been opened and got pushed out for .NET 10.
.NET Core SDK=5.0.101
.NET Foundation dedicates this Contribution License Agreement to the public domain according to the Creative Commons CC0 1.
.NET Foundation open source projects.
.NET runtime has a lot of level code that can be affected by changes like this.
.NET runtimes installed:
.NET SDK:
.NET SDK=8.0.202
.NET SDKs installed:
.NETCore (version 3.0) supports C# 8.0.
.NETFramework project using the latest System.Resources.Extensions package fails to load resources with #code.
'balanced' is something we can tweak as appropriate for things we discover.
'remove unn imports' is very special.
'The issue arose due to improper handling of the platform view's parent when switching between different DataTemplates in a ListView using the RetainElement caching strategy in .NET MAUI.
'then' -> 'than') too.
"__Static field *on a struct*, of a generic struct type that indirectly references the type hosting the field, i.e.__"
"__Static field *on an interface*, of a struct type that implements said interface, i.e.__"
"-  ""Convert to Positional Record"" is not offered when the number of properties that would be pulled into the primary constructor exceeds 8 or the largest explicitly declared constructor already existing in the class."
"-  ""Convert to record"" will delete all methods which are automatically generated by records (equals, hashcode, copy constructor), but not properties or other constructors"
"-  ((end & ~PAGE_MASK) == 0), function MemoryRegion, file memoryregion.h, line 48."
"-  I retrieved the #code using the #code method, based on the #code and #code, instead of obtaining the platform view directly from the renderer."
"-  When the font for the entire application was adjusted, the controls on the form can be scaled appropriately"
"- !""SoftwareExceptionFrame::Init failed"
"- ""Convert to Positional Record"" can be activated on non-positional records"
"- ""Convert to record"" is not offered when the record/class has no explicit constructors and a base record"
"- ""Convert to record"" is offered as a separate refactoring/code fix nested with ""convert to positional record"
"- ""Convert to record"" will change constructors to generate #code initializers if the base is a positional record and the constructor does not already have an initializer, and move statements to fill in the arguments."
"- [ ] ""Convert to record"" can activate on positional records (with primary constructors)"
"- [ ] ~Extract Interface~ // Combining into Extract Anything, nothing novel in this dialog"
"- [ ] ~Pull Member Up~ (except 1, 2 (major blocker), 9)  // Combining into Extract Anything"
"- [ ] Add function test for 3 cases of the result (#code, #code, #code)"
"- [ ] add more dialog events, e.g."
"- [ ] Change Signature (except 1, 2 (major blocker))"
"- [ ] Handle Inheritance (don't generate positional parameter properties which just call the base primary constructor instead of moving, add base initializer to generated primary constructor)"
"- [ ] I still need to create a new project based on these changes and test things out, which I can't get to work (even with existing projects on #code) if I follow each step of the readme"
"- [ ] Limiting to 5 exceptions per ""page"" by default that spans the size of the exception rendering area."
"- [ ] Move to Namespace (except 5, 6, 7)"
"- [ ] Pick Members (except 1, 3, 4)"
"- [ ] Test behavior of mixed mode step into across a C++/CLI vtable pointer (This change will possibly behave incorrectly for ips which are not at the start of the stub, need to find out if the debugger passes these in)"
"- [ ] You've included inline docs for your change, where applicable."
"- [ ] You've included unit or integration tests for your change, where applicable."
"- [TODO] add MFC ActiveX control, if desired?"
"- [x] improve comparisons of nullable #code by taking advantage of #url (optional, desirable)"
"- [x] rename #code to #code or #code; I would like to keep the equality case as base, but I am afraid that #code is complex (#code has the disadvantage that it is the not-equal)"
"- [x] Testing of diagnostic scenarios (No regressions in VSD mode, Cached Interface Dispatch also successfully steps)"
"- [x] The ""get by id"" endpoint needs more metadata to  return the NotFound result"
"- [x] You've included inline docs for your change, where applicable."
"- [x] You've included unit or integration tests for your change, where applicable."
"- **Add** - When a CollectionView contains grouping and a footer template, we create a new List<object> and add the footer to the list if the footer's item template type is not an IList."
"- **Clear** - When clearing the collection and adding items at runtime, a COM exception occurs when items are grouped."
"- **it will run short, non-blocking jobs on the browser event loop instead of on dedicated threads**"
"- #22869 -- Initially, #code was used for modal pages, but it has now been replaced by #code for improvements."
"- #code (because there might be no limit before it's called, supported only for 64bit with GC regions)"
"- #code (or equivalent) was chosen mainly for the automatic cleanup, as the number of files can add up in cases where mutexes are not disposed, particularly when randomly generated names are used upon each invocation of a process."
"- #code first is mostly C-style, not really the newest C#"
"- #code had even three lookups, so now it just has one."
"- #code has a span variant, this prevents string creation just to check #code."
"- #code or equivalent must either have the sticky bit, or it must be owned by the current user and without write access for any other user."
"- #code static array has been removed as it is not needed for anything, anymore."
"- #code was never set outside static constructor, where it was initialized to the #code value,"
"- #code: Builds the regular build, using artifacts in #code."
"- #code: Builds the Stage1 and Stage2 builds, puts the artifacts into an #code directory."
"- #code: Run #code with #code, then run the build as though #code was passed."
"- #url by the platform, but many of them exist in the product so what should we do?"
"- <strike>when possible (net7+) store the current span's #code directly; otherwise, store the #code like before, and use JIT-friendly accessor to expose the same API to the implementation code</strike>"
"- ~~I've used #code instead of #code as the #code array has always been mutated by the trace class, hence I didn't want to currently change the behaviour.~~"
"- Aas that's the only way to get Roslyn to emit #code parameters, not because I'm collection expressions fan"
"- Add a shim for the F# ""IDE0047: remove unnecessary parentheses"" analyzer."
"- add new instrumentation into Mono profiler, which would consider taking sample/stack trace."
"- Add WBT test checking that downlevel versions we compute are lower than versions in ""latest"" SDK"
"- Additional logic in _every_ codefix (might be easy to forget, ?analyzer)."
"- Additionally, I have handled the dynamic updates to the Icon and IconColor properties in the OnPagePropertyChanged method"
"- Adds Async file download support to VB, and if WebClient goes away this will allow existing Visual Basic programs using synchronous File Download to still work."
"- Adjust COM interop in WinForms to have AxHost usable together with classic COM interop disabled (#code), which is a requirement for AOT."
"- After fixing the initial issue, it was observed that when the visibility mode changes dynamically from #code to #code, the scrollbar does not display correctly."
"- Aligned semantic color usage to Win11, such as red for error/delete, green for success/add, yellow for warning/caution, blue for informational, etc."
"- Also removes #code struct as a bonus (one of many, this one is unsed and also not particularly perfect)."
"- Always suggest #code, even when the switch expression does not have a ref on the left of it"
"- Any external interfacing will use the original un-boosted-priority (interfacing with IntelliSense defined Priority, ...)."
"- Async-iterator: N <= -4 (resumable states for #code) -3 (initial for enumerator) -2 (initial for enumerable, finished) -1 (running) N >= 0 (resumable states for #code)"
"- At line 384 and 390 (original lines) in #code, what is the coding style?"
"- Avoid pre-mapping defaults: if the developer replaced the mapper and we skip execution, we're also skipping their custom code which would bring them wonder why their code it's not working while it should be"
"- Before this change, CV2 was not reacting to measure changes from items"
"- Both 1.X have the issue that we need at least 5 levels, ideally 6 to fully order things while current system only has 3/4:"
"- Caching of previously generated methods along with hashcode lookup are based on ""compatible"" methods."
"- Changes in #code bring a bit of an improvement but there's more benchmarking needed on how to handle this chain most efficiently, so keeping as it is right now."
"- Clarify ""regions"" vs ""region units"" in #codes"
"- Close to 100% Code Coverage Before and After change, original tests had no tests and there Error Message handling was odd"
"- Code under #code macro was removed, most of the code is already missing in .NET Core than what was in reference files for .NET 3.5 and it is never compiled on NetFX nor on .NET Core."
"- CodeGen for tests for #code, #code and #code  as laid out in the test plan."
"- Cold start cases in a ""hello world"" console app scenario saves ~5% of startup time by reducing emit + JIT cost."
"- Comparing to **.NET 7 and earlier versions**, this change introduces #code to the UIA tree for plain lists in #code, and adds UIA support for grouped items."
"- Comparing to **.NET 8**, this change alters the UIA type of #code within #code when the #code has its own #code."
"- Consider adding special ordering after priority that will prioritize #code for which the cursor is at the beginning of their #code (more important than #code, maybe even #code (?)) and (maybe) deprioritizes those for which the cursor is completely outside."
"- Covering 3 cases now: array initializer, simple collection initializer (such as lists), complex collection initializer (such as dictionaries)."
"- Current index of the visible cell in carousel view loop layout does not updated When dynamically removing the items from last index of the carousel view,"
"- currently only contains an ATL control, it might also be desireable to add an MFC control (which uses a different infrastructure and implementation on the C++ side but otherwise would be implemented similarly on the C# unit test side)"
"- DiagnosticSeverity.Error => SuggestedActionSetPriorityBoost.ExplicitRecommendation,"
"- DiagnosticSeverity.Hidden && WellKnownDiagnosticTags.Unnecessary => SuggestedActionSetPriorityBoost.Suggestion,"
"- DiagnosticSeverity.Hidden => SuggestedActionSetPriorityBoost.None,"
"- DiagnosticSeverity.Info => SuggestedActionSetPriorityBoost.Suggestion,"
"- DiagnosticSeverity.Warning => SuggestedActionSetPriorityBoost.ExplicitRecommendation,"
"- disabled #code because we can't do ""stop-the-world and scan other threads"
"- don't store/maintain ""next"" position; refactor next buffer fetch (removes need to retain ""next"")"
"- dragging virtual files and folders using FileGroup from WPF to Outlook, Windows Explorer and itself"
"- dragging virtual files using both FileGroup and SetData from WPF app to Outlook, Windows Explorer and itself"
"- Due to the caching of compatible methods, the number of emitted methods will be significantly less over the lifetime of an application if it uses reflection across many types."
"- during insert/update, to convert the C# values into the SQL literal representation"
"- during materialization, to convert the SQL values into corresponding C# values"
"- empty for now #code, #code, #code, #code, #code"
"- Exiting via #code from .dll with statically linked CRT (the ""global"" state is module-local with static linking) runs #code handlers registered in the given .dll, but it does not run #code nor #code handlers registered by the .exe"
"- Exiting via #code from #code still runs #code handlers registered in other .dlls in the process, but it does not run #code handlers registered in other .dlls in the process"
"- First, I have created a copy of all the Fluent colors and brushes, which will be used as the source of truth."
"- Fix order-based integration tests, add integration tests for new ordering."
"- For collection initializers, we confirm first that the collection type implements IEnumerable and then try and find an #code method that matches the creation (note that this is to match what the compiler does when it validates the collection initialization)."
"- For customers that don't trim their apps, the fallback to reflection would match the behavior they were experiencing in .NET 8"
"- For customers that trim/Native AOT their apps, the fallback likely won't do anything but it also won't produce any warning."
"- For each test there is a dictionary, which corresponds to what values all the properties of controls and and different elements in the template of the control should have, and we verify these values by matching them with the values specified in the dictionary."
"- For MappedFieldData, the alignment padding is inserted *before* the start of the block, so that the payload is aligned: #url That makes sense since the alignment of the payload matters."
"- For some jobs (specified in runtime-official), publish all packages produced."
"- For some target RIDs, also publish an additional subset of packages (specified in #code)."
"- For subsequent tests ( like disabled button, mouse over, Background = Red ) we have separate dictionaries which have a subset of the values defined in the base dictionary."
"- For the draft I put the control in the existing CMake ""NativeTests"" file and the tests along the other AxHost tests, however if that is the right place then the unit test project either needs the manifest reference added or an activation context needs to load the manifest dynamically."
"- Further optimisations for #code with constant indices when not crossing lanes, when zeroing, etc."
"- Handling users without an explicit group membership without null exception (happens when a user is only an implicit group member without ""memberof"" attributes in LDAP)"
"- Handwritten tests for #code, #code and #code as laid out in the test plan."
"- Have > Refactorings (#code) for _super_ explicit CodeFixes (errors, ?warnings)"
"- Have > Refactorings (#code) for explicit CodeFixes (?warnings, suggestions, unnecessary)"
"- However, Department here is a table not a json and the translation should not be allowed here (That's the reason for having validation)"
"- I couldn't see a reason for it, the only thing that made sense was the hash code creation but the hash code is not unique even for basic values."
"- I have changed it to be a #code, there's like zero benefit but I think it serves better purpose."
"- I have resolved the issue by updating the tint color to handle both page and shell foreground color cases, including dynamic scenarios."
"- I may have gotten some of the interop wrong, the PR requires review"
"- I noticed that (at least) in the #code, #code loops seem to have been preferred to #code loops even when the latter could've also been used."
"- I updated the SelectedIndex when the SelectedItem has a value and the SelectedIndex is -1, before applying the ClampSelectedIndex check while updating the ItemsSource."
"- I've also modified the hwnd class-name creation to avoid some allocations, logic of course stays the same."
"- I've also simplified the ctor a bit, which will also offer a very minor performance benefit (it does not matter)."
"- I've also used #code in my test, in case its relevant"
"- I've changed compile-time constants that are defined as ""static private byte"" (not even #code as it wasn't available at the time of writing) into actual constant definitions (#code)."
"- I've included the code-path removal for #code from the previous PR, hence why this is a draft."
"- I've inlined out variables, that would be C# 7?"
"- I've renamed constants (where some were defined fields and some #code), both prefixed with #code as PascalCase"
"- I've simplified #code init, that was #code"
"- I've simplified some object inits into #code on right-hand side, that would be #code"
"- I've used pattern matching, that would be #code"
"- If a ScrollView is present, the window appears to resize."
"- If color customization for the custom icon is needed, #code should be set accordingly to allow the color modification to be applied."
"- If the change touches code that ships in a NuGet package, you have added the necessary #url and gotten it explicitly reviewed."
"- If we were to add new methods without offsets, I would exect them to behave the same as if a default 0 offset were supplied, which means the existing ones shouldn't fail for such cases, which means we also wouldn't need the new overloads (for usability we could make the existing parameters optional)."
"- If you don't care about offset, then it shouldn't matter whether it's ignored or not."
"- In #code class the higher the counter number, the more operations were performed."
"- In #code, #code, and #code, added overloads for methods with a #code argument to also include a #code argument."
"- In #code, we can now use #code to benefit from this change as well."
"- In a given build, publish all packages that were produced in the current build that contain that job's target RID."
"- In addition to using singleton over allocating zero-length array everytime, we want to avoid storing those in #code fields (whether they're marked or not), as the pointer to such array is already accessible via #code."
"- In addition, to support this, we need to extend the size of a Dispatch cell embedded in R2R images, so various parts of that logic are now capable of generating double pointer aligned dispatch cells when commanded."
"- In Android, setting the FontImageSource.Color is not taken into account for the TabbedPage icon."
"- In case of a single #code, we will no longer allocate a #code of 1."
"- In case of heap-specific limits this change tries to fit as much as possible in 4 Gb, doing the same thing as #code, except that it checks three possible ways to limit SOH/LOH/POH from above with max powers of 2 fitting in 4 Gb."
"- In case of total limit this PR limits each segment size for SOH/LOH/POH with 1Gb, i.e."
"- In each test, we launch a window with a control ( can have custom values set for the different properties )"
"- in search loop, avoid copying out the #code value (of unknown size); use the #code instead"
"- In SQL Server, #code translate to #code function which require SQL Server 2022."
"- In SQLite, #code translate to the following expression using #code function, as the best available equivalent for #code at the moment."
"- In the case of 100 smaller groups the savings are due to avoiding the 20 bytes overhead of an array (syncblock, method table pointer, length)."
"- In the native Android itself, dynamic changes to #code are not properly reflected in the UI until the view is scrolled."
"- In the VMR, mark all ""packages not to be published"" as ""Vertical"" visibility so they're still available upstack."
"- In this iteration, the color assignment is similar to original 2019 version."
"- Incorrect visual state for the current page indicator: When an item is removed from the collection, the visual state of the current page indicator becomes incorrect."
"- Indicator disappears on empty collection: When all items are removed, the indicators disappear as expected."
"- Instead of creating #code and using #code (that's a great combination), we use #code."
"- Instead of marshalling the array members, we just wrap the array in a #code."
"- Instead of returning 3 strings, we return slices in #code #code."
"- Instead of throwing an exception, log the exception details and safely return to prevent the application from crashing when an invalid IconImageSource is provided."
"- Instead of using #code numerous times, we swap to the non-allocating, generic singleton variant of #code, removing all possible overhead."
"- Instead of using #code, we preallocate the array as we know the final count."
"- Instead of using #code, we will use the underlying implementation on .NET Core; the #code."
"- Instead of using untyped #code, we will swap to #code."
"- Instead of using untyped #code, we will use the generic #code."
"- Introduce new #code structs, that wraps those of the compiler."
"- Invoked the CollectionView.ReloadItems method to reload specific items while dynamically removing the item, using the helper method GetScrollToIndexPath(targetPosition) to identify the correct item to update the visible cell in carousel view the loop layout manager."
"- Iterator: N <= -3 (finalize states), -2 (initial for enumerable, finished), -1 (running), 0 (initial for enumerator, ie."
"- Iterator: N <= -4 (finalize states), -3 (finished), -2 (initial for enumerable), -1 (running), 0 (initial for enumerator, ie."
"- keep the code as-is if using patterns is unnecessary, like top-level constant patterns."
"- Kept some green for compiler error (green squiggle), even it's not ""success""."
"- Last indicator not rendering: In certain cases, adding new elements to the collection does not render the final indicator properly."
"- Later, the BottomNavigationView background is changed to a ColorChangeRevealDrawable with an animation, transitioning to the color specified by IShellAppearanceElement.EffectiveTabBarBackgroundColor."
"- Microsoft.CodeAnalysis.Host.IMetadataService.GetReference(string resolvedPath, Microsoft.CodeAnalysis.MetadataReferenceProperties properties) -> Microsoft.CodeAnalysis.PortableExecutableReference"
"- Microsoft.CodeAnalysis.Project.GetDocumentAsync(Microsoft.CodeAnalysis.DocumentId documentId, bool includeSourceGenerated = false, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Microsoft.CodeAnalysis.Document>"
"- Microsoft.CodeAnalysis.Project.GetTextDocumentAsync(Microsoft.CodeAnalysis.DocumentId documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Microsoft.CodeAnalysis.TextDocument>"
"- Microsoft.CodeAnalysis.Solution.GetDocumentAsync(Microsoft.CodeAnalysis.DocumentId documentId, bool includeSourceGenerated = false, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Microsoft.CodeAnalysis.Document>"
"- Microsoft.CodeAnalysis.Solution.GetTextDocumentAsync(Microsoft.CodeAnalysis.DocumentId documentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Microsoft.CodeAnalysis.TextDocument>"
"- Microsoft.CodeAnalysis.Solution.WithHasAllInformation(Microsoft.CodeAnalysis.ProjectId projectId, bool hasAllInformation) -> Microsoft.CodeAnalysis.Solution"
"- Microsoft.CodeAnalysis.Solution.WithRunAnalyzers(Microsoft.CodeAnalysis.ProjectId projectId, bool runAnalyzers) -> Microsoft.CodeAnalysis.Solution"
"- Microsoft.CodeAnalysis.SourceGeneratorTelemetry.ISourceGeneratorTelemetryCollectorWorkspaceService.CollectRunResult(Microsoft.CodeAnalysis.GeneratorDriverRunResult driverRunResult, Microsoft.CodeAnalysis.GeneratorDriverTimingInfo driverTimingInfo, System.Func<Microsoft.CodeAnalysis.ISourceGenerator, Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference> getAnalyzerReference) -> void"
"- Mobile keyboards, so we need to specify #code"
"- Modify the scratch project to contain a toolstrip and a property grid, set selected object in property grid to your ToolStrip, verify if the app is SystemAware or PerMonitorv2 and run it on a scaled monitor."
"- Most CodeFixes CodeActions classes don't have constructor that enables setting Priority (easy solution, but some boilerplate)."
"- Move option-related constructors to the new class, and let analyzers inherit from the new class."
"- Non-explicit: previous medium, explicit suggestion/unnecessary"
"- none, only increases test coverage"
"- none, only unit tests are changed"
"- Notice, that the testing might be a bit tricky as if the FlowControl may run out of available window, in which case it throws an exception (regardless of the type of lock being used)."
"- Official documentation was the same as in code, hence I've added some fixes (e.g."
"- On Android, the BottomNavigationView initially has a ColorDrawable with a white background, which is the default color during its creation."
"- on net7, both approaches regress vs baseline, the hoist+#code regressing less (i.e."
"- on net8, my pre-hoist version improves, and the hoist+#code regresses *significantly*"
"- On Unix, when the number of buffers is larger than #code (usually 1024)."
"- On Unixes, a different directory tree is used when #code, so each user has a separate namespace for objects, including for session-scoped and session-unscoped objects."
"- On Unixes, named semaphores and events are not supported."
"- On Windows, there is no namespace for kernel objects for each user."
"- On Windows, when the file offset (stored as #code) overflows and the method tries to perform a write with negative file offset."
"- One small thing I noticed (which is functionally inconsequential as far as I can tell but semantically weird) is the fact that in the #code method shown below, you're doing #code, as opposed to just #code, while the latter would work too and is what actually makes sense — should I fix this too?"
"- Only used for sorting, 1:1 mapping."
"- Optionally, if we believe that the alignment of the resource blob is important (there is no evidence in any spec that it is the case), add the padding before the resource blob similarly how it is added before the field data blob."
"- other datatypes (int, byte, Guid, Datetime, ....etc)"
"- Other platforms: Taps at coordinates (150, 150) to dismiss the menu."
"- Otherwise, it behaves as a pan."
"- Outside the VMR, skip publishing all ""packages not to be published"" packages."
"- pass #code to #code, so that I don't have to abuse #code"
"- Phone in portrait-mode, enters full screen it goes in landscape-mode, then when returning from full screen the device orientation must change to portrait-mode again."
"- Provides an app switch to disable #code propagation (basically ""revert""s #23052 and goes back to 8.0.82) behavior"
"- Put #code behind property, make it #code"
"- reduce size to 72 bytes from 96 bytes (note: in theory we don't actually need #code (by obtaining the outer span and initializing #code accordingly), but because of padding that wouldn't help unless we were able to split out the #code into #code plus #code via unsafe add etc, which would allow us to drop to 64 bytes)"
"- Removal of #code: To test the end of the sequence, a negated test for the next element is used instead: #code"
"- Removes priority ordering for Diagnostics generally (all that produce warnings are equal now, ...)."
"- Removes static array #code, that also removes the strings allocations on its own (not used anywhere else)."
"- Removes static array #code, which was redundant from the start."
"- Removes the unused arg #code from #code, as it was removed in #url"
"- Right there're no ""Explicitly suggested CodeAction""s that would be CodeRefactorings, all are CodeActions."
"- Say invoking an existing IL-emitted, JIT'd method cost 1x."
"- Sealed the class, proper naming conventions."
"- select'ing the conditional, then accessing multiple members"
"- Setting the offset (zero, positive and negative values)."
"- Severity dynamic priority: E.g: #code, #code Low if #code, otherwise Medium."
"- Show accessibility for default interface implementations when #code is set, similar to classes."
"- Similarly, the alignment of RuntimeStartupStub is inserted before the RuntimeStartupStub."
"- Simple collection initializer (such as lists, hash sets, etc)"
"- Simple, understandable, doesn't require extension of #code"
"- Since #code is still the first criteria, anything with #code or #code will have guaranteed positions (top/bottom)."
"- Since #code is under a write-lock and copies are created each time to allow reading concurrently by multiple readers, we can just swap to an array for overall efficiency since only 1 item is added each time."
"- Since all operations are under a lock, there are no thread-safety concerns with replacing #code."
"- Since the C# language incorporation is still poor and may evolve in the future, is it worthy to manually implement the operations verbosely?"
"- Since the previous background color (white) differs from the current color (black), the animation displays a transition from white to black when switching pages."
"- Since there are no AppDomains on .NET Core, #code is a singleton and the #code property just redirects to #code."
"- Since this issue is related to hovering, a test case cannot be written."
"- Since we'd use a #code, it is possible to type non numeric characters."
"- Small fix with default values: now fills in the type of the default for constructor arguments, then simplifies back to #code if necessary"
"- so far only manual testing in the scratch project, not part of the PR since it depends on the ActiveX control of #10754 which is part of a separate PR"
"- sometimes, in expressions (AFAICT only against constants/parameters, which for example makes this inconsistent when 2 columns are compared 😕 )"
"- Spin 50 can be increased or reduced, it is a placeholder for any other work that might happen in between the locked operations (ie."
"- Splitting #code into a pair of #code and #code methods: To facilitate subsumption checking, a new test node is added to track the count."
"- Static cost of initializing a #code is about #code and #code, that will forever live."
"- String expressions (column, constant, complex)"
"- Suggestions: three dots, warning: green, error: red, unnecessary: grayed out"
"- Swiping till last element and removing all the items, while cell displaying the end of the item tried to get the index of the path."
"- Technically we could just return #code in some cases instead of setting up a frame, conditionally throwing #code, catching it just to retrieve the #code and then returning it but I think it is out of scope for this PR."
"- Thanks to this interface, we can customize the behavior"
"- The #code will handle boosting without explicitly changing either of the #code enums, they'll remain as they are to provide the baseline priority information."
"- The base.ArrangeOverride was not being called, which caused layout inconsistencies, such as disappearing text during runtime updates or pressing the Alt key."
"- The class can be sealed, no reason not to as it has no children."
"- The custom image size is too large, causing it to render in the center and leaving extra space on the left."
"- The exception is thrown from #code when the image is null, causing the application to crash if an invalid IconImageSource is provided."
"- The existing code uses ICredentials in some of the paths, it is unclear how compatible that is between WebClient and HttpClient"
"- the expression is using the default type mapping (combined with the two above, this implies that all of the expressions are using the default type mapping of the type)"
"- The fix involves changing MeasureSpecMode to #code, ensuring the TextView is rendered with the specified SwipeItemWidth, thereby resolving both issues."
"- The fixes should be compatible with my other PR too, #9361 and #9352."
"- The issue occurs because #code causes the TextView to be rendered with a small size based on its content, resulting in improper display when swiping right on items and misalignment when swiping left."
"- The nullability of the second argument is not considered, generally user should not use null json path when calling this function"
"- The PR target branch is #code, not #code."
"- The regression occurred because a previous PR changed the UIImageRenderingMode to Automatic, causing the TabbedPage tab icon to ignore the FontImageSource.Color."
"- the rest of the implementation in JavaScript, for WebSocket and JS client"
"- The static collections are frozen after creation, so are its items, so we can just grab it via indexer."
"- The strategy is to re-use the existing #code infrastructure for all non-code-generation driven lookups, but to replace the stub generation logic with the CachedInterfaceDispatch paths from NativeAOT."
"- The term ""cardinality"" is being used to refer to the element count of a tuple, but could always change if need be"
"- The tintColor is set to white in the ShellToolBarTracker class, which prevents the foreground color from being applied properly to the tintColor."
"- The value was being set to #code in case of #code but when queried, it is set to #code."
"- There is no reason to use #code these days (though it uses #code under the hood since .NET Core 3.0 afaik so the performance is not THAT bad, while #code still goes with the original impl)."
"- Therefore, I have ignored the FlyoutPage update in this scenario."
"- Therefore, I have rebased the branch to resolve the snapshot difference issue."
"- This already works, this PR does not need to address this"
"- This also leads to me doing, what in my opinion, is more proper implementation of #code (there are no new exceptions thrown, the code is written properly in all places I've checked, so it's just a safety work)"
"- This ensures that no animation is triggered later, as the previous background color (black) and the current color (black) remain the same."
"- This is due to a missing explicit calculation for the label and layout in the GetDesiredSizeFromHandler(this IViewHandler viewHandler, double widthConstraint, double heightConstraint) method in the ViewHandlerExtension.iOS class."
"- This is not part of the interface, and the calling code was removed when transitioning to .NET Core."
"- This will greatly reduce allocations when querying folders with unsupported files, etc.,"
"- To avoid redundancy, there is a base ( default ) dictionary for a control, where the property values correspond to Fluent default values for that control."
"- To resolve this issue, the IShellAppearanceElement.EffectiveTabBarBackgroundColor is applied to the background of the BottomNavigationView immediately after its creation."
"- Tweak code paths around all of this so that we don't have unnecessary indirections (This change will add 2 memory loads to the UMEntryThunk path on x86/x64, but that should be fairly immaterial compared to the cost of an actual reverse p/invoke)"
"- Update function #code of the TreeView.cs, When #code reverses the X drawing coordinates of #code and #code"
"- Updated the FooterView frame where the CollectionView does not contain items, applicable to both horizontal and vertical layouts."
"- Upon calling #code, we reload the setting from registry and update the value in #code accordingly"
"- use non-short-circuiting #code in #code, since we expect both sides to pass in the happy path (and both are safe)"
"- Uses #code over #code, decreasing static memory 4 times and increasing perf 4 times."
"- using #code function with Address is valid, the value is serialized and converted to json (That's the reason to have first argument as object or generic not only string)"
"- verification of GC counters and data structures (which is checked under #code, supported only for 64bit with GC regions)"
"- Want to boost explicitly offered CodeActions, with following tiers:"
"- We can revert this below fix, as the toolbar item icon color can be resolved in ImageSourceExtension.iOS by using the UIImageRenderingMode."
"- We can selectively skip native calls close to them and by platform (for example on iOS #code takes care of all the coordinates, even translations, while on other platforms the situation is different)"
"- We do not need the #code to be specified at all (which would be Win32), so it is not."
"- We log the activity information by default, the span id is more useful than the traceidentifier."
"- We're not changing Blue, Light, High Contrast, etc."
"- We're passing around pure #code instance, but life without destructor is kind of hard."
"- When #code contains the modifier static, the code fix provider will add the modifier after the closest on the left modifier from the static keyword (eg."
"- When a custom #code is applied, it now preserves its original image color without automatic tinting."
"- When adding more items to the CollectionView, inappropriate ellipses appear on the items"
"- When dynamically adding items of different sizes to a horizontal layout, the item bounds are not updated based on the width of the newly added items."
"- When dynamically changing the CollectionView's width, the end portion of the CollectionView header's and footer's children gets cut off."
"- When I set the font after #code, the page layout has been determined."
"- When I set the font for the Form in #code, the form will scale according to the set font size."
"- When maximizing the Mac window, the FlyoutPage is removed in the ViewWillTransitionToSize(CoreGraphics.CGSize toSize, IUIViewControllerTransitionCoordinator coordinator) method using the UpdatePresented(bool value) method."
"- When no custom #code is set, its color can still be modified using #code."
"- When opening a named mutex, the owner and DACL are verified to see if they are as expected, and if not, a #code is thrown"
"- When opening a named mutex, the owner and permissions of relevant files/directories are verified to see if they are as expected, and if not, an exception is thrown"
"- When removing the last item in the carosuel view, zeroth index item updated instead of previous items of the last index."
"- When setting RightToLeft = Yes and RightToLeftLayout = True, the selected node box is fully rendered"
"- When setting the width request explicitly on a vertical layout, the layout content of the label does not update its width and height constraints correctly."
"- When swiping to the last item and removing the all the item in the carousel view, argument output range exception raised."
"- When the background color of the DatePicker is set to black and the text and icon colors are white, the text and icon become invisible when hovering over the DatePicker."
"- When the FlyoutPage is maximized, the flyout is removed even when IsPresented is true."
"- When the mouse hovers over the DatePicker, the default PointerOver color set from WinUI causes the text and icon colors to blend into the black background, making them invisible."
"- When using FlyoutLayoutBehavior.SplitOnPortrait, the flyout appears at load time."
"- Why not creating a more generic #code, but just for #code?"
"- Will allow multi-thread bindings, which can happen using asynchronous operations."
"- with #code (the default): #url, #url"
"- With #code, we get an expectation of #code."
"- with #code: #url, #url"
"- Yes, it's fine in dotnet 7."
"- Yes, there's now #code and #code version, there's just no way around bringing markup/baml improvements without special-casing most of the stuff."
"- Yes, when WebClient if and when goes away, not today"
"--no-dependencies"" flag to ""dotnet build"" if incrementally (no-op)"
"-**GoToAsync Fix:** Updated ShellNavigationManager to apply ApplyQueryAttributes when popping, ensuring QueryableAttributes values are set correctly."
"-**GoToAsync Limitations:** When navigating using PopAsync, PopModalAsync, back navigation, or between FlyoutPages, ApplyQueryAttributes is not triggered."
"-**TabBar Navigation Fix:** Invoked ApplyQueryAttributes within UpdateCurrentState to receive notifications for all ShellItem navigations, ensuring that QueryAttributes are updated consistently across TabBar item changes."
", if applications that were previously using one method (iteration vs."
", rather that creating a new #code  each time."
":warning: If there are merge conflicts, you will need to resolve them manually before merging."
".NETFramework (all versions), .NETStandard (all versions up through 2.1,"
"“Code” means the computer software code, whether in human-readable or machine-executable form,"
"“Submission” means the Code and any other copyrightable material Submitted by You, including any"
"“Submit” is the act of uploading, submitting, transmitting, or distributing code or other content to any"
"(@github doing some quick wins via github browser edit, hoping to improve little bits.)"
"(@github, I'll respond to your comment in this issue)"
"(+ probably also anything else that doesn't explicitly document it as fine, but this library documentation part about other libs in this bracket doesn't seem like a concern for ECMA-335, other than at most as a comment to point out what should be common sense) - but that doesn't mean it should necessarily be invalid in every single case as a blanket rule (not that I wouldn't find such code not suspiscious) (like how we might say it's unsupported to take a #code and write to it using #code in general, but that doesn't mean it's actually wrong in every single scenario, just highly suspiscious that known mutable memory is being passed as #code and then treated as mutable again later)."
"(all payloads are 1024 bytes, split into chunks via #code; if this is negative, it is a vector, rather than a multi-segment)"
"(although then we still need to think about the enumerator - the span approach avoids that entirely, and should be more direct than the custom list iterator, additionally skipping bounds checks)"
"(Arg mixing checks if a ref can escape into the receiver but since here we are essentially trying to determine what the escape scope of the receiver should be, we cannot easily use that - I've tried that in the alternative PRs linked above but it wasn't very nice.) So I added other utilities to determine/check the escape scope of the receiver of a call."
"(Basically, the stackalloc should be a const, not variable-length.)"
"(CodeSign Validation has a hard limit of 10 minutes because it's not enforced, so it currently timeouts, but that's not a blocking error."
"(Granted, sometimes this will be"
"(I also yanked the #code into a field, to see if it was not inlining the #code, but: no difference)"
"(I wasn't sure what VMR build means, so apologies if this is an overexplanation.)"
"(I would expect this also makes link checking simpler, since there's fewer external links to resolve.)"
"(I'm not sure why the .NET 9 RC 1 numbers are slightly different than before; it's the same machine, but I'm connected with Remote Desktop instead logged in interactively...)"
"(if I want to check the behavior on different subclasses, maybe #code makes more sense 🤔 )"
"(If you would like to do it under benchmarknet, it works too - but it is probably more work.)"
"(Ignore, my non-existent ms-paint skills...)"
"(In the future, if other operations (e.g., sorting) take a noticeable amount of time, we can show the progress bar during those operations as well.)"
"(It *seems* logical, but I don't know the template infrastructure and behavior as well.)"
"(It seems like an invariant is being violated, not that this method should be updated to accept #code.)"
"(Maybe if this Pr makes sense, we might want to default VerticalOptions=""Start"" for cv in header, to align with android's behavior?)"
"(NOTE: Enabling this feature requires running on a processor which supports 128 bit compare and swap, which has implications on Linux X64 builds, and would have implications for Loongarch/RiscV if we enable the code there.)"
"(Note: NRE is going to happen on line 83, I use the debugger so it's easier to get repro)"
"(Note: The first one is an old image, and the second one is a new image."
"(On Linux distros that support PAC, all tools and libraries are all built with PAC enabled."
"(Only exploratory, no commitment whatsoever)"
"(or globally instead of the property, backup and replace the assembly in the directory of your SDK, e.g."
"(Plus I think it filters it out from the other options so analyzer authors wont suddenly start see it polluting the options list just because another analyzer wants access to it, though thats of less concern)."
"(slightly bigger size in this case due to duplicated epilogue, but no more extra ""is zero"" check)"
"(Testing on real device (Samsung Galaxy A50, release config)"
"(to be honest, the best would be to cache the assembly name in case you're creating multiple windows, since now this needs to be retrieved everytime though #8567 has optimized this to at least be just 1 call per invocation but could be zero after 1st retrieval, really)."
") of my open source DataGrid, just scroll a lot."
"[^2]: Read Windows, Mac Catalyst, Android, iOS, etc."
"[^5]: I'm not talking about _something takes a microsecond_, I'm talking about a grid that one can display in 1 second or in 100 ms (see  (see #url to get some sense what I'm talking about)."
"[Host]     : .NET 6.0.31 (6.0.3124.26714), X64 RyuJIT"
"[Host]     : .NET Core 5.0.1 (CoreCLR 5.0.120.57516, CoreFX 5.0.120.57516), X64 RyuJIT"
"[If yes, specify the version the behavior has regressed from]"
"[If yes, specify when the regression was introduced."
"[Name of the group] group, [Group Position] of [Total number of groups], Enter Table [Total size of table]  ItemName [position in group] and [size of group]"
"}, null);"
"},"
"@github  - even though ""issue5"" as reported by Olina, is not a regression from the previous release, it is a regression from .NET Framework, could you please investigate it?"
"@github  - looks good, could you please test editor behavior in a standalone SystemAware and PerMonitorv2 applications?"
"@github  - We will be including this PR for upcoming test cycles, and it will go in for .NET 10."
"@github  , After analyzing the failed test case (#code) scenario, I have modified the fix to prevent invoking the #code during the initial loading."
"@github  , As far as I investigated, the method call does not finish only if the ScrollToAsync method is called when the ScrollView's size is not determined."
"@github  According to customer feedback, this fix can solve their problem."
"@github  I ran the specified failing test case in Android API 30 on my local machine, and it passed successfully.Please find the screenshot for the same."
"@github  I'm just back from vacation, so hopefully I can take a look and get this merged soon."
"@github  I'm not sure if the test timeout is related or not, can I get a rerun?"
"@github  In fact, I think it is more correct to use CurrentDpiScale."
"@github  ironically despite the demonstrably better opcode, that tweak actually seems to react negatively in tests, on net7 and net8 - again like I'm hitting some JIT regression; if you look at net6, it looks great!"
"@github  knows more here, but for me it's a fallback safe plan when things broken in new UI."
"@github  The test case was initially disabled, but it was enabled for the Windows platform after this PR #26674 ."
"@github  Updated the behavior according to API review, does it match your understanding as well?"
"@github  When providing a graphics view size with decimal values like XX.25, iOS converts the decimal part to a value like XX.3333331, which causes a gray line to appear due to rounding inconsistencies."
"@github - As I previously stated, the code changes appear to be acceptable to me, but I cannot guarantee that they will function as intended."
"@github - changes look straightforward, but I would like a review by @github and @github once they are back from vacation to understand the entire workflow."
"@github - Did you got the chance to create a sample application for testing, as mentioned in the previous comment?"
"@github - I have done a Clean on my project and tried again, and it works fine!"
"@github - if we have expressions that tell us how big the assembled code is, could we just use that to  calculate some number of bytes that we should zero fill?"
"@github - once you resolve the stack walking problem, can you also try something like this in a Foo() method?"
"@github , @github"
"@github , I did not add a new test case because the test cases added in #26062  for iOS."
"@github , I would like to ask you to write a test because I don't know how to calculate the expected value of a test."
"@github , Thank you for letting me know."
"@github , Thank you for your reply despite your busy schedule."
"@github , The failure was due to the macOS snapshot for Padding_Add not being updated earlier."
"@github , The initial approach of setting the content offset based on the keyboard frame works well, and the wobbling issue is no longer observed."
"@github , Yes, the plan is to first merge #27284 and then rebase here."
"@github , Yes, these test failures are related to the VerifyInternetConnection method, and the fix for this issue has already been implemented in the PR #url"
"@github ,I have reproduced the issue using the latest dotnet maui main repository."
"@github @github  -- This is good stuff, but at this time we have started locking down for EF 9.0, and this PR might not make the EF9 cutline."
"@github @github @github  @github - if this fixes the rendering issue, this change would be a great addition to the .NET 9 release."
"@github @github @github @github, this is the expected Roslyn code-gen side of the intrinsic method await version."
"@github @github As per your very good points, I've changed the implementation to behave the same way as it did before with the last commit while keeping the benefits of all the changes."
"@github @github feedback addressed, please take another look."
"@github @github I got tired of being told new apis shouldn't be in this form, so here you go."
"@github @github I'm still working on this, but wanted to give you heads-up that I've been looking into making AnalyzerFileReference more robust and efficient."
"@github @github I'm trying to understand the reason of a regression (modified in this PR) on SequenceReader.TryRead when the segments are small i.e: the longer the loop, the bigger the regression."
"@github @github I've fixed the dummy NRE mistake in the last commit, so this could finally go through tests."
"@github @github regardless of language feature proposals, I'd still like to move forward with this change."
"@github @github Still work in progress, but wanted to gather initial feedback to see if this is going the right direction."
"@github @github The MAUI team's priorities are not up to me, but you can have this fix in your app by following this @github's video if it is a major blocker for your migration #url"
"@github @github Very grateful if this could be merged in readiness for next release,is holding us up on few screens on our app."
"@github @github We don't have public facing docs on this yet, so that link won't be accessible to community members."
"@github @github Yeah, I think we're best off updating this with the new policy and then merging it."
"@github / @github, We have analysed the test case (Issue1323Test) failure and found that the issue was caused by a button alignment-related issue."
"@github / @github,"
"@github A bit too late, but I've filed #58994"
"@github A full migration from us to LSP pull diagnostics isn't in the near future because of legacy ASPX scenarios where there's no delegating LSP, causing our diagnostics to never show up in the editor."
"@github Actually in that case then I can just flip the existing feature flag on, and we can just merge this in 17.6."
"@github additionally, why not adding a parameter-less constructor for this class?"
"@github Agreed, I think we can conclude that the #code blocks us here."
"@github All tests should pass now, can you trigger another superpmi-asmdiffs-checked-release run?"
"@github and I talked about this offline, and we'd like to talk with @github when he's back."
"@github and I were looking at this code for another bug, and I noticed this wasn't following the current best practice, and might help the customer in the case we were looking at."
"@github are you ok taking this change as-is, or would you prefer we whittle down the churn as much as possible?"
"@github as far as I know, there's no async databinding on the APIs."
"@github As I already included this PR in our custom build, I am not sure if my changes caused these build issues."
"@github as I'm sure you know, we didn't manage to get to this in net8, sorry - not least because of some last minute changes to the assembly layout."
"@github At this time, I would not make any changes to the logic surrounding locations where the refactoring is offered, aside from the current validity checks (constant value)."
"@github can you please be more descriptive in the PR, what is the bug and how does your PR fix it?"
"@github compat council has agreed to take this breaking change, provided that there are still no internal failures after feedback has been addressed."
"@github could you please make the same change for x86, x64 and arm too so that we are consistent?"
"@github could you please open an API proposal issue for the change, and include the extension methods that would be needed to cover this?"
"@github Could you rebase to fix the conflict?, thnx!"
"@github EF will definitely be bumping its version of Microsoft.Data.SqlClient - not to 5.2.2 (which isn't LTS and so would run out of support before EF 9.0 does), but to 5.1.6, which also shouldn't have the security issue."
"@github ExecuteUpdate already works in the publish-time source generator (#url), though there may be some trouble ahead if/when we do #32018...)."
"@github fair enough; I have switched back from the unsafe to indexed, but improved a bunch of other related things :)"
"@github for trimmer official guidance, I don't work on it directly anymore."
"@github from offline discussion with Rekkonect, there is an understanding that the only 'issue' under consideration here is around the #code case for constants (either constant fields, or enum members)."
"@github from what you wrote in #url I got the feeling this is not a good optimization; wanted to eventually perf-test it as you suggested, but didn't get to that yet."
"@github FWIW, the diagnostics I am seeing in #url all look correct/expected."
"@github fyi, please don't force push to PRs under review, as it breaks the ability to incrementally review your changes as you respond to feedback."
"@github fyi, we are not required to rebase for every commit merging in main branch."
"@github Given that this is still ""Draft"", I presume you're keeping it open just to remember to work on it?"
"@github good question, sadly I can't answer that I don't use android for a long time, and I can't think at any app that I can test it."
"@github have you, by any chance, made a ""demo app"" / tried one of the sample apps, combining all your performance improvements to see the final result?"
"@github Hi!, It's not up to me when and if PRs get merged, but I will rebase this one and solve conflicts :)"
"@github Honestly, I'm not sure how could I achieve the same behaviour with unit test as with UI test."
"@github I believe the main purpose of #code is to pre-select item that matches the inferred type at current location, something we do only when we have high confidence for our selection (as I mentioned in your PR, those same items are provided by #code as well but with lower priority, which got overwritten in the presence of #code items)."
"@github I believe we should add a test here, not because the test is likely to catch regressions but more because it will provide a great place to document why the current behavior was chosen should anyone try and change it in the future (which would lead to a subsequent test failure and point the user to the explanation)."
"@github I can't, for the life of me, have a successful test run, even on a unmodified branch."
"@github I changed the behavior, so I think you are right"
"@github I had to add one more fix, for when you use f.e."
"@github I have added a disabled test for #url This PR changes the failure mode of that test from ""throws #code"" to ""produces nonsensical code"", which is why it's disabled."
"@github I have some code that is attempting to suppress this diagnostic, and it fails to suppress."
"@github I have tried your fix on my repro (I logged 26577, which has been closed as duplicate of 26498) - and the fix does stop the error, thank you."
"@github I have validated the test case failure and corrected it by removing the DisconnectHandler call, as the latest code automatically calls previous page's DisconnectHandler during navigation."
"@github I imagine this only happens on the local repo, not on the built/published SDK?"
"@github I just left #url on the issue you filed for this, but I'll repeat it here."
"@github I rebased the PR and limited the scope to a special case that I believe might still be interesting, i.e.:"
"@github I recently had the idea to cache the MethodDesc* for equality checks instead like I pushed here today, is this approach sound enough?"
"@github I see, this is a screenshot from 2 months ago, I just reuploaded a new one :)"
"@github I think ""client hub"" muddies the meaning of ""hub""."
"@github I think it makes sense to use this PR in favor of #url as the basis for the fix (if we iron out all the kinks), at least for main."
"@github I think it will be beneficial, not only for compiler messages, but also IDExxxx."
"@github I think we can support the #code bit, which is what the original issue refers to, just not InputNumber."
"@github I tried merging/pushing to your branch, but lacked permission."
"@github I tried to implement your suggestion of using JoinableTaskFactory, could you review this for me?"
"@github i tried to load into VS2022 but for some reason couldn't commit, git giving errors so I had to use the website."
"@github I was considering that when I have implemented these stubs during the W^X work, but that would actually lead to a waste of RW memory unless the size of the data was an integer multiple of the (possibly padded) code size."
"@github I was thinking, could we get rid of #code with this and move its content to #code and #code now?"
"@github I wasn't originally even gonna respond, but here you go."
"@github I'm assigning it to me as the person who will keep an eye on the PR and if CI is broken rerun as necessary, etc."
"@github I'm just curious, is this ready for benchmarks?"
"@github I'm not sure the test failures are related, they seem to be around disposing of the Bitmaps?"
"@github I'm not sure, but probably not."
"@github I'm sorry, I did a really poor job giving you all the details here."
"@github I've applied the verification in only one, platform shared place"
"@github I've found one similar implementation, must have been done by the same engineer as the comments are same."
"@github I've opened this PR for you to have a look after your PR: #url However, feel free to close it if you want :)"
"@github I've tried your pr with my app and it does appear to fix the issue, thanks!"
"@github I've validated locally (and pushed the necessary fixes to do so) that all of the various options that were supported on the old stress log analyzer (dprintf level filtering, facility ignore, value searching, gc time searching, time searching, etc) are all functioning the same as they were with the old stress log."
"@github if I understand this fix correctly you are setting #code from default 16dp to 0, if #code is #code with horizontal alignment."
"@github if the Windows test is going to take some time, maybe just move the Android fix into a new PR and we can approve faster and then this PR can become a long discussion on the Appearings."
"@github if this overlaps with whatever else you guys have in the pipeline for COM interop in .NET 9 feel free to delay it, but it would be nice to get this fix into the release, if possible."
"@github If you are interested, I can try to add this fix to EF Core Power Tools (for EF Core 6 only) and you can verify against a Dataverse?"
"@github if you can bring this PR up to date, that would be great."
"@github if you record the speedscopes for comparison, you should check timings on #code method."
"@github if you think this is not worth the added complexity, I'll close this."
"@github IMHO it was OK as it was, the only thing that was necessary was to do:"
"@github in case you didn't knew, there is a patch created by the format leg: #url (under artifacts)"
"@github In my experience, you do get a new sln file with devkit when creating the project from the template through VSCode, however, it's not the template sln, and it's empty, without the 4 projects added to it."
"@github ios/tvos test failures seem related, let me know if I can help with those."
"@github is indeed correct with the intention of the logic: VS already creates SLNs automatically, so if we create one via the template then the world is less happy."
"@github Is my understanding correct that it improves perf on .NET 6 and 7, but for unknown reason regresses on 8?"
"@github is there a better mechanism for this, or is it the last wins for now."
"@github Is using ""+1"" for .NET 6 valid/expected?"
"@github It is based on master, I branched off master, committed my changes then created this PR."
"@github It seems that there was some Apple Clang bug that manifested when building a file I didn't touch here, do you know who'd be the right person for handling this?"
"@github Just in case, please do not do a forced push to a PR under review."
"@github just tried the latest nightly, everything seems smooth!"
"@github let me know what you think about №1, 4, 5 please"
"@github many thanks, that's my issue I was lookin for #url"
"@github Means I didn't do these by hand, just applied fix per-project."
"@github no problem, take as much time as you need - its better to ship well designed API than poorly designed, and I appreciate your time and work for this"
"@github no rush on this, but since I have a few high-churn layout PRs coming up, would you prefer to see the profile changes go in first, or should we get the 3-opt consolidation work in first?"
"@github Not all code-style options map to rules, as you already noted by #url"
"@github not really, since my app is quite complex (ble, views, etc) I haven't still recorded a speedscope, so it is really  just more a ""feeling"" than any measurable data."
"@github Not sure we necessarily want this checked in to always have the cost, but did this at least catch the issue you're looking at for the other bug?"
"@github of course, I will write the test as soon as I find some time :)"
"@github Oh, forgot to update the PR for that."
"@github Oh, sorry."
"@github ok great, let me know if you run out of time or something, otherwise you can ask for another review after you've made changes etc."
"@github Ok, and I will create the application."
"@github Once #url is merged and the SDK flows in, it will work."
"@github One internal tool author had traces of around 400ms or so total startup cost, which isn't great for a command line tool they were running during builds as a source-generator style system."
"@github oops, didn't see this ping, I'll finish it today/tomorrow 🙂"
"@github or @github might be able to help provide more clarity here, and what the plan is for getting WPF into a state where we can comfortably accept community PRs"
"@github ping, let me know if you intend to continue working on this."
"@github PTAL, thank you!"
"@github rebased, and, thanks to it, only one change was needed to make it work :)"
"@github right, so what's there to test exactly?"
"@github Should be all done; I've built it on top of this one, felt easier."
"@github Should we go by the ""mountinfo"" first and go for that statfs syscall if that failed?"
"@github Since your PR was merged, this PR should be closed as a duplicate."
"@github So, are you suggesting that we should maintain the same behavior as the previous version, even if it was characterized by a bug?"
"@github sorry for the delay, had some build issues last time I tried to address the comments- I'd just updated to the latest VS preview, not sure if related."
"@github Sorry for the late response, I'll take another look at this soon and get this PR merged :D"
"@github Sorry I missed this PR, I will work on it this weekend."
"@github Sorry to trouble you, I would have written some tests, but at the moment I seem not to be able to run any."
"@github Sorry, I do not create the mini demo code."
"@github Sorry, I do not know how to test it."
"@github Sorry, I do not sure the release version."
"@github Sorry, no."
"@github tested this PR using following 2 apps(one is Winforms VB app, another is Winforms C#) in .Net 9.0 SDK build on a server with multi-users."
"@github Thank you, it finally worked."
"@github Thanks a lot for your contributions, however if you are working on the PRs, please mark them as draft as the builds are failing as of now."
"@github thanks for PR, have you noticed similar PR for Android, or maybe some workaround?"
"@github The build fails due to ""Void"" instead of ""void"" in method signatures:"
"@github The code escapes some characters and if the string is #code, the correct escaped version is #code."
"@github The exception is deep inside a Visual Studio API (outside Roslyn), and I don't quite understand it."
"@github The issue occurs when navigating directly from the first to the fourth tab, where the content does not update properly, and animations are missing."
"@github The last time I checked, Roslyn allocates around 250GB to compile Roslyn.sln."
"@github the next steps here are to create an #url and work with @github to get it to a point where he's happy with it, then we can bring the API to review."
"@github the PR on your mind was #7910 I guess, I've seen it recently as I was correcting the other event args."
"@github The test case failing seems to be in Windows, even though the fix is specifically added for android."
"@github the test case was fixed and all checks pass now, I think the PR is ready for a final review"
"@github there are some minor-looking test failures, if you have time can you please take a quick look?"
"@github this change is still relevant to improving RoslynPackage load performance, even though the option persister has been directly coupled across components"
"@github This is targeting 17.5 at the moment, but If TS is interested in getting this perf improvement in 17.4 pls let me know, I will get it through"
"@github This isn't anything new, it has been done for multiple .Net projects (See dotnet/runtime#38793 and dotnet/winforms#9615)."
"@github This PR is failing some of the internal tests which are not yet public in the wpf-test repo, Hence no further details can be provided on the failures until the tests are open sourced to the wpf-test repo."
"@github this PR should be DRAFT, please."
"@github This should retarget to #code, right?"
"@github Thoughts on moving forward with this, or closing it out?"
"@github we appreciate your contributions, but would it be possible for you to update these PRs following the steps mentioned here, #url"
"@github We don't know each other, but I have been in the .NET world since the .NET 1.0 preview."
"@github we need some E2E tests (either new ones, or modify existing ones) to make sure that things are working and we don't break this in the future."
"@github we need to check if there's something that can be made about the TryRead and TryReadTo regressions; if not, evaluate if this a valuable trade-off."
"@github We should look into adding a test into the EventPipe native test suite handling this case, setting up a session using the listener type, create a number of threads that will write events into the session, while we call ep_buffer_manager_get_next_event and then when we run out of events and all threads been stopped and terminated, look through the buffer manager session state list to make sure it's been correctly cleared, we could also add logic (Windows only) to do automatic heap snapshots and compare allocations before and after this test to make sure there are no additional memory leaks related to the cleanup of thread session states."
"@github well, I won't pretend not to be disappointed - however, thoughts on just reducing the book-keeping etc?"
"@github When using Task.Yield, the page does not pop properly during the appearing event, and a blank screen appears."
"@github Windows #code job appears to be broken, could you look into this?"
"@github With the common business logic, It hard to get the bad input."
"@github WIth the latest commit, it looks like the code no longer compiles if #code is uncommented in #code?"
"@github yea, I will add a test but I will probably close this PR in favour of this one: #url"
"@github Yeah, bcause the software I develop now supports touch, I have many touch devices."
"@github yeah, thanks for letting me know:)"
"@github Yeah, that's what I'm thinking too, at least in certain cases."
"@github Yep, will take a look, hopefully this week if that's OK?"
"@github yes I'm using this option, so far didn't noticed any issues, I'm assuming it works."
"@github Yes that's right, editors have this button always enabled"
"@github yes, and to be exact the fixes are #109826"
"@github Yes, I am able to add a break point in #code method."
"@github Yes, I will add"
"@github Yes, once complete this should fix most of the remaining cases like #71234."
"@github yes, this is ready for review, thank you."
"@github Yes, totally agree with this."
"@github yes, waiting for review from GC maintainers"
"@github Yes, we have included the UI test cases for the RTL scenario"
"@github You are our resident ""text entry"" person/expert/guru..."
"@github You have to go to def in VS, this is all source generated."
"@github you mentioned in the issue you would be interested in a PR, can you weigh in?"
"@github You wanna this?, I don't think this is a good idea."
"@github Your work seems to be, to some degree, related to #19812."
"@github-Black I'll take a look (added to my board to track), but it'll be a couple of weeks (need to finish some numeric IntPtr work first)"
"@github-bot @github-service agree company=""Carl Zeiss IQS"
"@github-service agree [company=""{your company}""]"
"@github-service agree company=""Carl Zeiss IQS"
"@github-service agree company=""Data Research Group"
"@github-service agree company=""Funda Real Estate B.V."
"@github-service agree company=""Global Stock Systems Ltd"
"@github-service agree company=""IBM"
"@github-service agree company=""Microsoft"
"@github-service agree company=""Syncfusion, Inc."
"@github,  I've tested the search bar issue and found that the colors of the underline and search icon do not change based on the theme."
"@github, (unrelated to this PR, but) is this something we can use elsewhere in runtime with, e.g., a cached wrapper in some of the places calling #code or not worth the complexity (there are known tradeoffs etc.)?"
"@github, @github : Could one of you give me feedback before i replicate the corresponding implementations for vb?"
"@github, @github Added you as reviewers."
"@github, @github FYI"
"@github, @github This fix is specific to the Android platform, creating a unit test would require significant changes to access the method within the unit test class for android."
"@github, @github, @github"
"@github, @github, @github/roslyn-compiler Please review"
"@github, @github, PTAL."
"@github, @github, what are the next steps for this PR?"
"@github, @github, what's the plan for this?"
"@github, @github,"
"@github, @github"
"@github, @github/roslyn-compiler For the second review"
"@github, a heads-up for the next test run on FreeBSD after this PR is merged."
"@github, a penny for your thoughts on this optimization?"
"@github, A stale tag has been added, but has the issue been resolved?"
"@github, all builds seem to have succeeded."
"@github, are you still interested in this PR?"
"@github, Are you still working on this one?"
"@github, are you still working on this?"
"@github, As mentioned earlier, the position of the toolbar items has shifted slightly due to the applied style."
"@github, As per your suggestion, an additional UI test case has been included to validate the scenario."
"@github, can you confirm your local testing showed that this patch worked as expected?"
"@github, can you make the necessary changes for this PR before we take it for a test pass?"
"@github, can you please fully utilize my test sample?"
"@github, can you take a look at the above PR and make the necessary changes ?"
"@github, conflicts have been resolved."
"@github, conflicts have been resolved"
"@github, could you kindly review and assess the proposed change?"
"@github, could you please also do some validation on your end?"
"@github, could you please update the pull request to include fixes for those four cases?"
"@github, do we need to review this?"
"@github, do you have thoughts about whether this is something we should try and be resilient to?"
"@github, from discussing with several @github/roslyn-compiler members, we should add tests for motivating scenarios, to capture the updated behavior and avoid regressions in the future."
"@github, gentle nudge on this."
"@github, I am not entirely sure about the use case you mentioned."
"@github, I am reviewing the PR currently, the changes look good."
"@github, I am wondering why you would want a #code for 32 bit platforms?"
"@github, I attempted to automate this, but unfortunately, it was unsuccessful."
"@github, I believe removing SetIconColorFilter is not appropriate, as it could cause issues in certain scenarios involving FontImageSource color."
"@github, I believe this should be unblocked now"
"@github, I can reproduce the issue with the latest source as well."
"@github, I have added the unit test case based on your suggestion for the scenario."
"@github, I have modified changes."
"@github, I have moved all visibility properties and the style to the XAML file."
"@github, I have rebased it, and the conflicts have been resolved."
"@github, I have resolved the issue."
"@github, I have resolved the merge conflicts."
"@github, I posted a benchmark with managed impl."
"@github, I took a look at how this value is used in the rest of the code."
"@github, I was thinking about this as well, but the issue with using #code is that it will keep whitespaces and XML docs, so it still requires some node replacement code to remove those excess trivia."
"@github, I would like to confirm that if no color is specified for the FontImageSource icon, the icon color will be determined by the SelectedTabColor/UnselectedTabColor."
"@github, ideally compiler changes should be covered by targeted compiler tests rather than relying on IDE tests."
"@github, in case you're also interested in reviewing this."
"@github, instead of hooking up the multistage build to SB/VMR like this, we'd like it to have the following UX:"
"@github, Is there any update on #url?"
"@github, is WinForms ready to start using these types if exposed?"
"@github, It looks expected behavior, as we already mentioned here, can we resave the current snapshot as the expected snapshot for this test case (Issue1323Test)."
"@github, just checking whether this change is ready?"
"@github, may I please request a review on this."
"@github, maybe you'd give this one-line contributor documentation change a quick glance?"
"@github, No problem, I have resolved the new conflicts."
"@github, please prioritize to review this PR."
"@github, please review this PR."
"@github, so it turns out that the IDE is depending on the current behavior of IOperation here, as the bootstrap build is now failing."
"@github, sorry but it will take us time to get to this PR."
"@github, Thank you for the feedback."
"@github, thank you for this."
"@github, thank you for your effort in adding the ToggleSecondaryToolbarItems extension method and for including the UITest to automate this issue."
"@github, Thank you so much for taking the time to test the PR with your app."
"@github, thanks for the clarification!"
"@github, thanks for the details on that."
"@github, the **UpdatedSelectionIndicatorProperly** TabbedPage test appears to have failed due to the absence of a Mac screenshot."
"@github, The failing unit test case is intended to verify that the query attribute should not be present during the initial loading."
"@github, The menu item colors will change to white, similar to the behavior in WinUI, when the system theme is switched to Dark mode."
"@github, The test failure is caused by the #code method, which calls the default separator color through"
"@github, this is a better proposed solution than #936"
"@github, this PR includes various public API changes, and for accepting/reviewing such changes, we need to go through the whole API review process."
"@github, We are unable to recreate the same UI test scenario in the unit test case because the Appearing event is not triggered when navigating from one ShellContent page to another."
"@github, we couldn't recreate the same UI test scenario in the unit test case because the Shell.Current is always null when try to navigate to another page by using Shell.Current.GoToAsync()."
"@github, we will include this in the next monthly test pass before proceeding with the review."
"@github, welcome back from your vacation, hope you had a good time."
"@github, what are you planning to do with this PR?"
"@github, what's the invocation syntax for your bot?"
"@github, when you are able to address the feedback, please let us know and we can move this back to being under active review."
"@github,"
"@github: ah right, we have this here: #url"
"@github: I was planning on just closing the PR, but if you'd like it to be in the history (and @github knows that's why we're doing it) I'm OK with that too."
"@github: Yes, when I created the PR I tested it with a preview version of .NET 5."
"@github/dnceng is working on a fix, temporarily pinning."
"@github/roslyn-compiler for a second review, thanks"
"@github/roslyn-compiler for reviews, thanks"
"@github/wpf-developers If somebody could review this PR to be able to merge it would be great, its only a couple of small refactorings"
"* [ ] Empty or single, where it only uses a simple null check"
"* [ ] Refactor #code (currently, we store helper id in it, I want it to be always a real method handle and the actual id is stored separately, fortunately, we have a room for that in #code) -- quite a lot of changes."
"* [x] Many, where the list is cached"
"* [x] Types which implement #code should also implement the four #code helpers, and vice versa"
"* **Android:** Clicking on an already selected tab does not trigger the **Navigating** or **Navigated** events, and no navigation occurs."
"* **French (Standard, BÉPO)** (should output NARROW NBSP on <kbd>Shift</kbd>+<kbd>Space</kbd>)"
"* **iOS and macOS:** Clicking on an already selected tab triggers both the **Navigating** and **Navigated** events, and navigation occurs."
"* #19752 is actually a bug or if it is ""by design"
"* #code has also been reduced by 100x, as our layout optimizations were using this threshold with #code factored in."
"* #code, currently falls back to the DAC implementation."
"* #url (no support for the RETURNING, ON EMPTY and ON ERROR clauses, but that's supposed to come)"
"* #url (no support for the RETURNING, ON EMPTY and ON ERROR clauses)"
"* Add one line tests for adds, ands, bics & subs"
"* After merging the net9 branch into main, this test began passing successfully without additional modifications."
"* All 3 modes (baseline, pac, pac+bti), executed 10 times and average time was used as a representative value for that mode."
"* An advantage is that one can define that, e.g., #code is default value and if a platform view is instantiated, then when property mapper is called for the first time for that platform view, we don't need to assign #code and many others because arguably almost all properties are set to default values and just a few are set to ""useful values"" (e.g."
"* Arguably this approach has bigger impact than previous approaches, so I tend to think it's reasonable."
"* arrays are heap objects, and writes to arrays require (unchecked) write barriers"
"* As a result, the identity UI endpoints (which were incorrectly defined) no longer are defined on the flight and break."
"* Changing #code churned CSE significantly, and I think it's because we aren't quite careful about not mixing normalized weights and counts during cost/benefit analysis."
"* Clicking on an already selected tab will no longer trigger the Navigating event, and no navigation will occur."
"* Cursor position and selection length are set, but the values are the same, so we don't set the values again on the WinUI TextBox"
"* Cursor position and selection length are set, values propagate to WinUI TextBox"
"* Define #code based on #code ~~(currently the new type is #code)~~ (currently the new type is mostly #code, but the #code API is internal)"
"* Developer is using a #code with no #code set, and no #code set on the top-most layout."
"* Due to the way inheritdoc is evaluated, #code has two #code elements."
"* Executed #code, #code and #code using superpmi."
"* Extend the #code style, but with a #code set"
"* For every method definition, it pulled the #code parameter to just before the first callback."
"* For every method invocation, it adjusted the code to explicitly name every argument from the callback to the end of the invocation."
"* For PAC and PAC+BTI mode, compiled the jit and superpmi with the #code and #code flags respectively."
"* For type: project, skip all the SLN specific stuff above and just go to the csproj in the outputs and on disk."
"* For type: solution, if no SLN is in the primary outputs, Visual Studio will try to find any SLN in the project output folder which Visual Studio did not itself create, and if it finds it, it opens that solution with a flag to merge it to the existing solution."
"* From the Home view, the user navigates to another page (e.g., AnotherPage) by clicking a button."
"* GCDump is eventpipe/etw-based, which requires threads, and the threaded runtime is not ready yet"
"* Heapshot is unmaintained and requires the ability to buffer the data into a FILE, which in emscripten is buffered in malloc'd memory."
"* However, if the user switches to the **Profile** tab, the Navigating event will be triggered, and the application will navigate to the Profile view."
"* However, on macOS, setting SecureTextEntry alone triggers the system to display a password hint popup whenever the field gains focus."
"* I added a delay, ensuring the second button becomes visible and clickable, which resolved the issue and allowed the test to pass as expected."
"* If necessary¹, implement an option in Tools &rarr; Options for this"
"* If the type has a canonical form, generate type loader template for it."
"* If the type is a GC pointer, don't generate anything."
"* If the type is an out valuetype parameter, generate constructed method table (since reflection stack is going to end up boxing)"
"* If the type is in the canonical form (not just ""has canonical form"" - ""_is_ canonical form""), generate type loader template."
"* In Android when changing the visibility of a WebView within a grid, Getting an issue where the elements underneath the grid start flickering."
"* In April, the time #url about 900 ms."
"* In May/June, then time #url about 300-400ms."
"* On an unrelated note, I noticed some places where we try to normalize a summed weight by dividing it by the entry block's weight."
"* Once an IExperimentationService instance is obtained from the factory, its synchronous methods can be used without threading dependencies"
"* One approach is to ""batch mapping calls"" (simply #url some mapper method calls because each such call does the same work as illustrated above."
"* Otherwise, generate a constructed MethodTable."
"* Previously, if we didn't find the endpoints for the assets, they would get re-generated on the fly."
"* Refactor ""wait for pane open"
"* Remove unnecessary #code, #code overrides"
"* SQLite - not supported (but they'll likely follow suit at some point, as they've done with the other PG JSON functions)."
"* stack allocated GC roots may end up being treated as so-called ""untracked"" lifetimes, extending the GC lifetime of the objects they reference"
"* stack space is limited, so these allocations cannot always go on the stack."
"* Switch to #code with #code flag set, so that the pure forwarder works as desired."
"* The #code query created for evaluation of the inline #code element in #code specifies #code instead of #code, which causes it to concatenate the contents of _both_ #code elements in #code."
"* The infinite value was managed to prevent the layout from taking more space than necessary, ensuring stable behavior."
"* There are already three other handlers for navigating to external definitions: metadata as source, ILSpy decompiler, and the 3rd-party navigation feature."
"* To prevent the appearance of password hints in .NET MAUI on macOS and iOS, we set textField.TextContentType = UITextContentType.OneTimeCode."
"* To resolve this test, I made adjustments in the HostApp sample, which contains two buttons."
"* Update code fix to handle related compiler warnings, or file a bug to do so later"
"* Use analyzer in #code, this will currently have lots of errors"
"* When the user selects the **Home** tab, the Navigating event is triggered, and the application navigates to the default Home view."
"* WinUI control then propagates cursor position and selection length values to the Maui Entry, text is now unselected"
"* WinUI TextBox handles input event, moves cursor to where you click (note: the native WinUI TextBox seems to have special logic around canceling this logic if setting selection during an OnFocus event?"
"**Android and iOS:** While updating the collection, ItemsUpdatingScrollMode is not respected, causing the current position to deviate from the expected behavior for keeping items in view."
"**Android:**  We need to observe the data changes for the #code option, as there may be cases where the item might not remain in view.The issue is fixed by restarting the data change observer in #code."
"**Android:** In the #code, the data change observer is paused for #code in #code to maintain the first position of the item."
"**Android:** In the MauiCarouselRecyclerView, the ItemsUpdatingScrollMode is not applied during the ItemsCollectionChanged event."
"**Behavior in windows:**  When modifying the collection, the CarouselView scrolls to display the first item."
"**Example (Change Signature):** (see issue number 1, 2 above)"
"**Example (Generate Type):** (see issue number 6 above, all I changed was the theme...)"
"**Example (Move to Namespace):** (see issue number 5, 6, 7 above, note the bit of red to the right of the textbox in the After image)"
"**Example (Pick Members):** (see issue numbers 1, 3, 4 above)"
"**Example (Pull Members Up):** (see issue number 1, 2, 9 above)"
"**Fluent ResourceDictionary Tests** : In this set of tests, the main aim is to check the correctness of Fluent colors and brushes ( not control brushes ), loading of different Fluent ResourceDictionary, etc."
"**I can also concede that it would cause the overall system to show suboptimal performance in many important situations, such as when an #code adds 2 items to a 1,000,000-item list, especially when the #code is doing live shaping and both items would be live-filtered out anyway.*"
"**IMPORTANT**: I need to merge this PR at the same time as all the other PRs in the other repos, to prevent breaking the dependency ingestion in the dotnet/sdk repo."
"**IMPORTANT**: If this backport is for a servicing release, please verify that:"
"**IMPORTANT**: Starting with .NET 9, you no longer need to edit a NuGet package's csproj to enable building and bump the version."
"**iOS and Mac:** In the #code, the collection update does not account for the #code set to #code, causing the current position to remain unchanged despite the scroll mode settings."
"**iOS and Mac:** In the CarouselViewController, the collection update ignores the ItemsUpdatingScrollMode, and the current position remains unchanged, irrespective of the scroll mode settings."
"**iOS and Mac:** The issue is addressed by updating the scroll behavior in the #code for iOS, including the #code method to correctly adjust the scroll position."
"**iOS**: Adding VirtualView to the logical tree before creating its platform-specific view, ensuring consistent application of VSM properties and bindings."
"**Message:** The custom IProblemDetailsWriter must be registered before calling AddControllers, AddControllersWithViews, AddMvc, or AddRazorPages."
"**Not to mention, unlike #code where the backing storage is #code, here its #code, even lesser chance for such occurence.**"
"**Notify Area Owners to Triage Issues**: This workflow checks for issues labeled as ""untriaged"" that have been open for more than 7 days and do not have the ""Area-Compilers"" label."
"**Remind Owners About Inactive Issues**: This workflow checks for issues labeled as ""untriaged"" that have been inactive for over 180 days and do not have the ""Area-Compilers"" label."
"**Spot Issues Missing Labels or Assignments**: This workflow checks for issues labeled as ""untriaged"" that are not assigned to anyone and do not have the ""Area-Compilers"" label."
"**TestCase already present , So enabled for Android and windows platform**"
"**ThemeMode Property Tests** : In this set of tests, the main aim is to test the initialization of ThemeMode properties on Window and Application classes."
"**Windows**: Assigning the Content after adding the element to the ItemsView logical tree, ensuring immediate application of styles and VSM states."
"**Windows**: In the Realize() method within ItemContentControl.cs, the Content is assigned first."
"**Workarounds, if any**"
"*edit* -- results look promising, promoting out of draft"
"*Still, though, as annoying as it **will** be for someone who **will** find themselves in this situation, it would only affect **new** code, where some people (at worst) have to use a wrapper collection that modifies various calls to work around #code's imperfections..."
"/cc @github @github it might just be confirmation bias, but this ^^^ sounds like the ordering thing I mentioned in our call last week!"
"/root/helix/work/correlation/build/wasm-shared/WasmApp.Common.targets(832,5): error : emcc: warning: linker setting ignored during compilation: 'EXPORT_ES6' [-Wunused-command-line-argument] [/root/helix/work/workitem/e/publish/ProxyProjectForAOTOnHelix.proj]"
"/root/helix/work/correlation/build/wasm-shared/WasmApp.Common.targets(832,5): error : emcc: warning: linker setting ignored during compilation: 'EXPORT_EXCEPTION_HANDLING_HELPERS' [-Wunused-command-line-argument] [/root/helix/work/workitem/e/publish/ProxyProjectForAOTOnHelix.proj]"
"&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; can show you how this PR performs on your machine,"
"# InputNumber with formatting  (double, decimal, float)"
"## > If heap hard limit with segment is not fully correct on 64 bit on main now, is it safe to assume that it was correct before GC regions support was enabled by default (e.g."
"## Historical Context (Good for knowledge, but feel free to skip on first read)"
"## Issue: The flyout icon is aligned to the center instead of the left, causing the title to extend beyond the view."
"## To see the color updates with all the context, you'll need:"
"##[error]CSC(0,0): error EnableGenerateDocumentationFile: (NETCORE_ENGINEERING_TELEMETRY=Build) Set MSBuild property 'GenerateDocumentationFile' to 'true' in project file to enable IDE0005 (Remove unnecessary usings/imports) on build (#url"
"### 1 file, 1 match"
"### 1 font, 9 Glyph Runs (XpsFontSubsetter scenario)"
"### 10 capacity, 15 unique additions first, 20 lookups"
"### 3 Different faces, 9 Glyph Runs"
"### 351 files in directory, 156 matches"
"### 416 files in directory, no matches"
"### 5 files, 1 match"
"### Define geometry, add to group, get bounds"
"### Large strings, mostly without any replacements"
"### Large strings, with replacements (up to two times the perf)"
"### This is a huge change, but I think it deserves to be discussed in depth and considered carefully!"
"### Workarounds, if any"
"#10000, would you look at that?"
"#13156 is the most pressing one, is very basic, and has been open for over 1,5 years now"
"#code - This represents a ""client hub"" not a proxy so this seems like a better name."
"#code but margin = 0, padding = 0, opacity =1, etc."
"#code can run in $D(n)log(N)$ time using the Divide and Conquer algorithm, where $D(n)$ represents the computational complexity of BigInteger division."
"#code can't save us here and flowing it through into the place where interfaces are loaded would require some significant code changes, so I decided to see if I could narrowly target a workaround based on our existing handling of self-referential static fields."
"#code doesn't have an #code that takes an #code, which necessitates unnecessary array allocations when adding from a collection."
"#code for a hash table keyed on #code addresses (the JIT does not have a set type, so you could use a bool-valued hash table)."
"#code has dynamic priority: Medium on first unreachable line, low on subsequent."
"#code is a built-in type that will likely be much more optimized, especially on .NET (Core) than a custom builder type from Roslyn."
"#code is a class, and so and some bookkeeping is done to lookup *the same* C# instance for a Java object."
"#code is a helper to use in compiler code, I think there is a similar helper for #codes."
"#code is close, but it is possible for multiple users to be running code simultaneously in the same session."
"#code is intended to be used for formatting, not really be considered a logical XML node, but because it is technically an XML node, putting #code inside of a #code will pull (and concatenate) all content inside of the #code nodes of the #code source."
"#code is not enabled in 32 bits, and therefore the behavior on x86 or arm32 is significantly different from the 64 bit versions."
"#code is one option, but making #code a mutable auto-prop, similar to #code, could also work."
"#code is only being used to cast from a generic type to the actual type, therefore is safe."
"#code keeps the input order as-is, meaning we can skip that ""fix up""."
"#code MyScrollView.ScrollToAsync(BottomButton, ScrollToPosition.MakeVisible, true);"
"#code now seems to be relative to the control frame already, so I don't think we need to subtract #code"
"#code seems to be too large so I chose #code for this, where the code size about 4k seems reasonable to me, as some existing large methods can produce such size as well."
"#code should probably be marked as nullable, since null-tested below"
"#code tried to look at the token preceding the label and use an indentation delta of -1 to achieve the ""one less"" option."
"#code was going to be a special-case, but I agree that we should discuss going all the way or not doing #code at all..."
"#code was previously referring to the const field #code, rather than the enum #code."
"#code was using #code to match tables, which would only match if it was the same instance."
"#code was using #code, also diminishing its incrementality."
"#code, an ARM64X pure forwarder."
"#code, the pure ARM64 handler."
"#code, the x64 handler."
"#code) to language keywords, that's IDE0049"
"#code), is that if that list is then actually mutated, we get a cache miss - the funcletizer outputs a different tree."
"#code), which happens here."
"#codepublic IActionResult Index(Dictionary<long, long> testValueThatWillNeverExist)#code"
"#codes and the like will add only one row, where multiple were intended, for example."
"#url – build  #code, use the patched shell instance in step 2 to debug/launch another VS instance to see everything combined."
"#url – build #code, patch #code"
"#url are all improvements codegen-wise, but the throughput hit is a bit of a bummer."
"#url are large, though they're inflated by collections with tiering (#code in particular)."
"#url are missing benchmark collections, but it looks like we're frequently shortening jumps on x64/x86 such that it's a size improvement, whereas the loss of fallthrough in the cold section is increasing code size on arm32/arm64 (though if this code is truly cold, it shouldn't matter)."
"#url are particularly large on x86/x64, where we have variable-length jumps."
"#url are quite a bit larger on win-x64 and win-x86, with the former's concentrated in #code and the latter's in #code and #code."
"#url differ quite a bit by platform, though this looks like a PerfScore win most of the time."
"#url for reference, I've completed lowering."
"#url I will be taking a look at that next, right now I am concentrated on #url"
"#url look like an improvement: A lot of the size savings seem to come from shorter jumps on non-exceptional paths when we decide to move handlers further down the method, while a lot of the size regressions stem from new jumps now that handlers don't fall through to the non-exceptional successor, as well as larger jumps to the handlers."
"#url, #url, #url"
"#url, #url."
"•	To resolve this, I applied the DefaultBottomNavigationViewBackgroundColor as a fallback to ensure the background color is set properly."
"• #code occurs in a loop, as some of the expression tree for the check can now be hoisted outside the loop."
"• The trees containing #code don't have many side-effects, as these will have to be split out and this can result in spilling, especially in MinOpts."
"• There are a lot of #code nodes in a function, as now the compiler seems to choose #code more often than #code."
"`src\Compilers\CSharp\Portable\Utilities\InterceptableLocation.cs(44,26): error RS0016: (NETCORE_ENGINEERING_TELEMETRY=Build) Symbol 'abstract Microsoft.CodeAnalysis.CSharp.InterceptableLocation.Equals(Microsoft.CodeAnalysis.CSharp.InterceptableLocation?"
"↑Before the change, the test used to be failed."
"<_CoreClrBuildArg Include=""-cmakeargs -DFEATURE_EVENT_TRACE=0""/>"
"<!-- If this is your first PR in the ASP.NET Core repo, please run through the checklist"
"<!-- Is this fixing a problem that was introduced in the most recent release, i.e., a regression?"
"<!-- Is this fixing a problem that was introduced in the most recent release, ie., fixing a regression?"
"<!-- Mention language, UI scaling, or anything else that might be relevant -->"
"<!-- Once all that is done, you're ready to go."
"<Entry x:Name=""txtTest"" Grid.Row=""0"" TextChanged=""txtTest_TextChanged""  />"
"<FontImageSource Glyph=""{Binding BindingContext.Icon1, Source={x:Reference menuBarSamplePage}}"" FontFamily=""IconsFont""/>"
"<FontImageSource Glyph=""{Binding Icon1}""  FontFamily=""IconsFont"" Color=""Blue""/>"
"<Grid Grid.Row=""1"" Grid.ColumnSpan=""2"" BackgroundColor=""Red"" Padding=""0,0,0,0"" />"
"<Grid RowDefinitions=""44,160,*"" ColumnDefinitions=""*,*"" RowSpacing=""5"">"
"<item name=""android:windowBackground"">@github</item>"
"<Label x:Name=""lblTest"" Grid.Row=""1"" LineBreakMode=""WordWrap"" FontSize=""30"" Padding=""20,20,20,20"" TextColor=""White"" VerticalOptions=""Start"" VerticalTextAlignment=""Start"" BackgroundColor=""Blue"" />"
"<Setter Property=""BackgroundColor"" Value=""{AppThemeBinding Light={StaticResource White}, Dark={StaticResource OffBlack}}"" />"
"<Style TargetType=""Page"" ApplyToDerivedTypes=""True"">"
"> crank --config #url --scenario antiforgery-validation --profile aspnet-perf-lin --application.framework net10.0 --application.options.outputFiles ""D:\code\aspnetcore\artifacts\bin\Microsoft.AspNetCore.DataProtection\Release\net10.0\Microsoft.AspNetCore.*.dll"
"| symbol.ToDisplayString(SymbolDisplayFormat.**ExplicitInterfaceImplementationFormat**) | ""SomeFunc<System.String>"" | string"
"| symbol.ToDisplayString(SymbolDisplayFormat.**FullyQualifiedFormat**) | ""SomeFunc<string>"" | string"
"| symbol.ToDisplayString(SymbolDisplayFormat.**ILVisualizationFormat**) | ""string SomeNamespace.SomeTopLevelModule.ANestedModule.SomeFunc<string>(string)"" | string"
"| symbol.ToDisplayString(SymbolDisplayFormat.**MinimallyQualifiedFormat**) | ""string ANestedModule.SomeFunc<string>(string x)"" | string"
"| symbol.ToDisplayString(SymbolDisplayFormat.**QualifiedNameArityFormat**) | ""SomeFunc"" | string"
"| symbol.ToDisplayString(SymbolDisplayFormat.**QualifiedNameOnlyFormat**) | ""SomeFunc"" | string"
"| symbol.ToDisplayString(SymbolDisplayFormat.**ShortFormat**) | ""SomeFunc"" | string"
"| symbol.ToDisplayString(SymbolDisplayFormat.**TestFormat**) | ""System.String SomeNamespace.SomeTopLevelModule.ANestedModule.SomeFunc<System.String>(System.String x)"" | string"
"~~**One additional change we might want to consider here**, is removing the #code header from the HEAD response."
"~~Currently, there appear to be no way to enforce PascalCase for VB modules."
"~~I would stick to existing behavior as default.~~ Ok, changed my mind"
"~~I'll add more tests, and possibly direct tests to semantic model.~~ Done."
"~~I'm not sure what was it supposed to handle.~~ Unfortunately, this breaks this part of the logic:"
"~~If the annoying  #code still occurred, I wonder how I would deal with it."
"~~If this is correct, for use case 1 & 2 #codes could simply be attached to columns, with no complex machinery to propagate them across all expressions.~~"
"~~In the future, _**we will need to make sure not to manually change the translated json files or resx files**_ but instead, allow the loc system to do that."
"~~It seems like a reasonable expectation for #code to be user-specific, and then carry that forward to a conclusion that this bug can only happen when a system has been misconfigured.~~"
"~~Looking at the history of why we added this restriction to Kestrel, we find #url which was about a browser request hanging when accessing an endpoint that responded with another non-body response in the form of a 304 and we just added the restriction to HEAD response as well since it is a non-body response.~~"
"~~Once it is merged, will uncomment the assert and everything should pass.~~"
"~~Playing the devil's advocate, you can always make that a #code.~~"
"~~There was a PR last year directly changing the ""description"" key in the maui-contentview-csharp translated template json files."
"~override Microsoft.Maui.Controls.Platform.Compatibility.ShellFlyoutRenderer.ViewWillTransitionToSize(CoreGraphics.CGSize toSize, UIKit.IUIViewControllerTransitionCoordinator coordinator) -> void"
"~The CI is still reporting wks failure on osx and 32 bits, workstation."
"~The test case is still failing on server GC to validate the #code values , something else is still wrong, even without the mark array issue.~"
"~This is a partial implementation, for now only for query and with some failures; we can complete it if we agree this is we want.~"
"👍 @github your fix is still needed, at least the part that drops the invalid optimization from #code, but we can probably avoid re-introducing the code in #code."
"👍 other providers might want to use a similar type propagation mechanism, but as long as it is only used in the SqlServer provider, we can look for a reasonable API/implementation in there; I'll move along this direction"
"👍 thank you, this is a good start."
"📝 I'm expecting that after #46666 merges, all of the changes in **SyntaxNodeRemover.cs** can be reverted and only the tests need to be added."
"📝 Note that there are some cases where a diagnostic is fixable, but the code fix does not register itself for that diagnostic by ID."
"📝 The original issue appears to be a case where assertions were failing in integration tests prior to my change, but this change caused them to start throwing exceptions on failure which made them observable."
"1, Only ListItems/ListBoxItems added directly (i.e."
"1.) Track mark array usage, and make sure we don't do overlapped commit."
"1.5 times the code size, then we would need 2 data pages for 1 code page, but the 2nd page would always be half empty."
"1) #code is changed to explicit usage #code, because #url is anyway hardcoded to use #code."
"1) changed the code to not rent buffers, but either #code or allocate a new array"
"1) for API #code returning #code there is no way to securely determine if the dictionary instance will be changed, and because of that we can't avoid performing the deep-copy of static #code (same perf loss as existed)."
"1) I don't think the test survived our move to ""CreateWindow""."
"1) The team is free to close my PRs if they deem them unfit, I'm sure they do not need your permission."
"11% size increase sounds plausible from longer branches alone, and I suspect the number of duplicate methods in this collection is partly to blame."
"12 zeros, we have 12 bytes of StubPrecode code followed by 12 bytes from the beginning of the FixupPrecodeCode."
"12th Gen Intel Core i7-12800H, 1 CPU, 20 logical and 14 physical cores"
"2 instead of 3), trading higher scanning throughput for more false positive candidates, but where ruling those out is now cheaper."
"2.) Check the counter against the heap data structures, and make sure they are consistent, and"
"2) As a new perfcounter ""types-loaded-count""."
"2) But it does not scroll if it's self-navigation (or self-navigation with query), to make enhanced nav behave the same as introduced in #url for client side navigation."
"2) During XAML parsing detect if multiple #code are logical opposites (or mutually exclusive), if we can guarantee that one #code is _always_ active, no more, no less, than we could disable the #code setters on the triggers."
"2) Preserve existing behavior for collections that are also abstract classes, like IFormCollection."
"2) There's a saying you probably are not familiar with (this time, not your fault); it goes roughly as ""he opened a restaurant but people started coming in""."
"2ns gained per compare on a function that's only called during serialization; this is clearly a better solution for the case, so yeah, once again, well done, Thomas."
"3) #code had 2 more arrays (#code and #code), which now I am renting (via #code) or even #code'ing."
"3) I think this is the easiest, but in my mind a trigger is really a causal thing - ""When X becomes true, do Y""."
"3) The order of actions in enhanced navigation was changed, to match client side navigation: first load the page, then update the history."
"4) In #code flow I am again using #url overload, which works based on the #code types, compared to previously used #url"
"4Gb/3 rounded down to power of 2, and 3 Gb for SOH+LOH+POH."
"5) If it is a parameter symbol contained in the list, don't add a hint for it"
"6) #code flow is reusing №1, №2 and №3 optimizations as well"
"7) #code before was relying on the #code and #code to write data in the result buffer, but I am pre-calculating the length, and then doing a single allocation of result array: #code All required data is copied into the outputArray via APIs supporting #code."
"A better solution might be adding a #code and #code method to #code, but for now this will work."
"A bit of off-topic: The lucky test failure in debug is pretty much what #url was about by the looks of it, and I stand by what I said, that this should be queued on the app thread."
"A bottleneck is unfortunately in the **non-open-source** PresentationNative part (#code), on which I can unfortunately not influence"
"A bunch of code in Roslyn tries to be ""safe"" with respect to this, but there is no compile-time validation of the prerequisites so we repeatedly run into cases where it breaks down."
"A common theme I'm seeing in the diffs is where we have some straight-line code that can be entered via more than one predecessor, but the layout improvement for preferring one predecessor over the other is insignificant, so 3-opt now moves a large chunk of code up/down the method, potentially changing the sizes of the jumps inside the range."
"A dev is claiming it is under consideration for .NET 9, but provided no promises."
"a failure of test A in CI can be observed locally by running _just test A_ in isolation), and as such doesn't really map to production scenarios."
"A fix for the CV1, which is also not working, is here: #url"
"A more general thought I had when I was reviewing is that it seems there are several places which are doing the equivalent of a ""best common type"", except for safe-contexts."
"A new API called OffColor has been implemented for the switch, allowing us to change the track color when the switch is off as well."
"A new method, UpdateCellEnabled, has been created to map the ShellSection.IsEnabled value to the Tabbar.Items.IsEnabled property on the iOS platform."
"A new struct #code has been introduced to encapsulate the components of a URI: #code, #code, #code, #code, #code, and #code to avoid a dependency on #code."
"A new unit test was added as part of the original fix, and the fix also reuses an existing approach and #code helper method."
"A question @github, what happens if you have 1 brush in a resource and you use it on 2 buttons?"
"A simple use case this affects can be streaming an AI chat response via #code or #code, where the preferred experience is that a partial response is displayed as soon as available."
"A single method to dismiss the context menu, eliminating the need for platform-specific code in test cases."
"A small amount of it is duplicated, with a version for #code and #code, because doing so prevented a performance regression for #code parsing."
"A snapshot of the marked element is created directly or through a query, and is compared with a reference snapshot."
"A stale tag was added, but the problem is still there."
"A technical challenge at that point of time is that if #code was not specified before the #code call, and we establish a new one, we will need to have the various commit counter values."
"A test app that hopefully covers all scenarios, see here: #url"
"A tiny bit tricky, but I am sure we can fix it :)"
"A unified method to trigger platform-specific context actions on an element, simplifying context menu interactions across different platforms."
"A workaround is noted on #18245, but the *best* workaround would be in #code:"
"Ability to write pixels on bitmaps over 23xxx x 23xxxx bitmaps with 4 channels, etc."
"Absent an internal user of the visitors, I don't think they should be in this PR."
"access the HTTP method via #code key), but not to remove \ add entries or rebuild the whole #code dictionary."
"According to documentation, RowCount should be the count of all the element loaded in the logical tree."
"Across most collections, we seem to be doing a decent job of keeping code compact."
"Actually, can you open a new issue stating the behavioral cahnge here?"
"Actually, even if we will not be using pooling byte arrays, if I work with corelib to introduce APIs supporting #code, we can choose to #code or allocate a new byte via #code, meaning that we will not ever touch pool buffers."
"Actually, I'm not sure that would be more efficient that building the source code with #code and then copying to #code, because:"
"Actually, not sure if we can fix APIDescription.Server since it targets netcoreapp2.1, $(DefaultNetCoreTargetFramework), and $(DefaultNetFxTargetFramework), and the files in #code/#code are meant to be used on any of those."
"Actually, the button ""ItemButton1"" does not disappear."
"add ""no functional changes"" to title and wait for regions work (""region units"" changes won't be needed after that)"
"Add #code cases to existing tests for invalid *collection builder* methods, since error reporting for collection builder methods may be affected by changes for *collection arguments* (see #url"
"Add #url into the dotnet/runtime repo for usage by cDAC (and in the future, usage as the native ECMA-335 metadata library for the repo as a whole)."
"Add a config to allow setting max depth of the recursion loop, defaults to 4; and a config for total num of recursive callsites, defaults to 2."
"Add a testing framework to be able to build vxsort by itself, run some basic sanity tests, run some basic performance tests."
"Add initial handling of directly-invoked #code, #code, #code, #code returning methods."
"Add more detail on ""the new platform-specific files"" referenced in RyuJIT porting documentation."
"Added a new GeneralWrapperView class in src/Controls/src/Core/Platform/Android/GeneralWrapperView.cs to handle the wrapping of views, enabling better measurement and arrangement."
"Added a validation to check the #code values for only the heap memory, and"
"Added file ""Platforms\Android\Resources\values\styles.xml"", content:"
"Added logic to disable both horizontal and vertical scrolling, when ScrollOrientation is set to Neither."
"Added new test cases to handle scenarios with empty and null lists, ensuring that the serialization and deserialization processes handle these cases correctly."
"Added one additional event handler ""DateChanged"" to DatePicker class, and added DateChanged definition to related Public API files (net, net-android, net-ios, net-maccatalyst, net-tizen, net-windows, netstandard)"
"Added some comments, it looks like the compiler analyzer conditionally increases the scope of the diagnostics request, otherwise, it's pretty much line based."
"Adding a per-instance limit will introduce conditional heap/stack allocation, so that seems like an easy next step."
"Adding attributes to the source generator as a consumable dll, this way the attributes live with the project that will make use of them (because otherwise they aren't useful 😃)"
"Adding the footer to the items triggers the TemplateCollectionChanged event, which incorrectly adds the footer as a new item in the collection."
"Adding the full range of INCC event handling to a built-in class is a worthy goal but neither #code, nor #code, nor certainly WPF itself, need to be messed with in order to do this."
"Additional tests may need to be added to verify that it behaves correctly with different drivers (no graphics, integrated graphics, discrete graphics) and in the event of missing devices, etc."
"Additionally introduced the ActivateContextMenu and DismissContextMenu methods in the HelperExtensions.cs file, aimed at improving the cross-platform testing approach by centralizing platform-specific logic into helper methods."
"Additionally there are placeholders for memory allocation, that just use malloc."
"Additionally, #code provides more clarity than #code or #code."
"Additionally, any runtime improvements here would only be available in .NET 10."
"Additionally, dotnet/runtime has a tool called StressLogAnalyzer that supports reading memory-mapped stress logs (which don't require dumps)."
"Additionally, horizontal text alignment is not supported for placeholder label."
"Additionally, I have added a test case in this PR to verify that when no color is provided for the FontImageSource icon on the first page, the icon color is correctly applied based on the SelectedTabColor/UnselectedTabColor."
"Additionally, I hope it makes the path more GC friendly under heavy allocation traffic with reduced pinning."
"Additionally, it includes tests to verify visual customizations, such as slider thumb color, track color, background color, and visibility."
"Additionally, setting #code at the sample level does not apply to the dialog."
"Additionally, some common cases were broken in the GetItemIconTintColorState method."
"Additionally, some style updates were made to highlight error codes, key words, .Net library references, and any inline code."
"Additionally, tests have been updated to reflect changes in expected values and formats, covering a wider range of cases, including edge cases and whitespace handling."
"Additionally, the background implementation of the search bar differs from that of other fixed controls."
"Additionally, the condition prevents unnecessary updates by only modifying the frame when needed."
"Additionally, the FocusableInTouchMode property is set to false to ensure that the Pickers do not gain focus unexpectedly."
"Additionally, the IsEnabled property has been updated to respond to runtime changes through the property-changed event."
"Additionally, the SizeChanged event for the ItemsWrapGrid was not triggered when the CollectionView size was reduced, resulting in the items inside the CollectionView not being resized properly during the resizing of the CollectionView."
"Additionally, the test I implemented currently hits #url (neither join is really needed)."
"Additionally, the timeout exception is not reproducible locally."
"Additionally, this PR modifies the VB parser to ensure that the Context's FreeStatements have been called."
"Additionally, to handle cases where the #code changes at runtime, the flag variable is reset when the #code is updated, allowing the new value to be applied correctly."
"Additionally, warnings related to the use of the obsolete method have been suppressed in various locations."
"Additionally, whenever the background color changes, we invalidate the drawable to redraw the drawable area with the updated color."
"Addressing @github's comment regarding switch expressions, I have added test cases that show that switch patterns dont have as bad error handling as object/array initializers, at least for the tested cases."
"Adds a reason for the difference between analyzer, trimmer, and ilc for warnings that are AOT specific (IL3XXX), as well as a few other links for issues."
"Adds ability to retrieve elements via #code from #code and the underlying storage formats, allowing for future optimizations."
"Adds an analyzer that checks that custom #codes are registered in the correct order, relative to #code method calls."
"Adds notes to the source generator cookbooks documenting issue #51692, where CompilerVisibleProperty values provided to source generators are lost/damaged in transport as a result of being dumped verbatim into an INI file."
"Adjusts inefficient #code copies in #code that result in up to double gen0 allocations needed for the job, offering perf benefit and decreased allocations."
"AFAICS, squeezing every bit of performance where it's possible has been the general direction of .NET."
"AFAICT, Chrome still hasn't blocked third-party cookies by default due to regulator objections."
"AFAIK we currently don't have any docs that would mention how to implement custom #code that could be updated to mention that the ""proper"" way to do this is to implement the #code property in the derived class."
"Afair it's not bottle-necked in Write-Barrier + presumably, your PR is supposed to decrease average GC pause rather than WB's throughput?"
"After #url , to reduce allocations when tracing routed events, we'll use #code field to store the trace arguments which cause #url issues."
"After addressing feedback, this PR now improves maximum non-ASCII byte search throughput by 3x for AVX2 (Zen 3) and AdvSimd (Neoverse N1), and 2x for AVX512 (Ice Lake)."
"After applying the latest version of main, both Android and iOS no longer wait forever after calling the ScrollToAsync method, but on Android, the screen does not scroll correctly the first time it is displayed."
"After code analysis completes, any diagnostics reported in generated code are reported by design, so the fixes for these need to be supported as well."
"After deploying the sample with this change, I observed that OnConfigurationChanged in MauiAppCompatEditText does not get triggered when changing the theme via a button click, so the theme does not change."
"After digging some more the root cause turned out to be that our unwinder didn't restore XMM register when unwinding pass native interpreter frames, since our last manage frame (lmf) didn't store/restore callee saved XMM registers."
"After format it fits into a normal 16:9 monitor with a full HD resolution (rather common) and the lines do not cross 150 characters ever (it's around 130 with the longest one, usually 120 is the sweet spot and recommended iirc), which is the recommended max line length you'd want at any circumstances."
"After investigating the crash it indicated that LLVM generated code used XMM6 to store a null reference that was used to reset memory after a call to a method (call to thread pool work item), this sequence was done in a loop, but XMM6 could be set to some garbage value on return from work item, and thread pool would write a garbage reference instead of null into memory and that would crash process on next GC."
"After investigating the unexpected behavior in #111708, I concluded that JIT optimization is not functioning properly."
"After looking at the JIT dumps for a few examples, I see that #code's block placement during LSRA, as expected, is no longer meaningful in FullOpts, as block layout handles it."
"After merging the net9 branch into main, two UI tests were failing:"
"After migrating to the latest version, a lot of our memory-related tests started failing."
"After offline discussion, I opened #112380 to track this issue of different numbers of duplicated contexts across platforms."
"After proposed explicit CodeAction boost (Warning > suggestion > CodeRefactoring, Hidden > Supress):"
"After reading the release notes, not that I can tell."
"After reviewing the benchmarks, I propose this PR as is, with an Inline Array of size 3 to be added to #code which improves both larger and smaller bucket scenarios."
"After reviewing vs-mef with @github, it appears this would not be a breaking change in VS as vs-mef does not look at inherited attributes during part discovery (#code is handled by searching for derived types rather than inheriting the attribute itself)."
"After running superpmi with JITLateDisasm, no decoding failures were detected."
"After setting up automatic runs of #code and #code pipelines on PRs that touch Mono AOT-llvm code (#url un unwanted side effect appeared that the pipelines don't run on PRs that do not touch the selected files, even when triggered manually by comment."
"After that one is merged, many files will drop out of this pull request."
"After that, on to the next ones."
"After the changes, the data are copied stream to stream using a buffer of 81920 bytes."
"After the fix, the button inside the page, which was added as a child in the TabbedPage, was properly aligned in the center of the page."
"After the refresh process is completed, the UIRefreshControl resets the contentOffset to 0, which is below the position of the header view."
"After the SplashScreen creates the window, the system will send the WM_ACTIVATEAPP message to the application."
"After the test side loads a project or restores assets on disk or changes options, etc, the test can call this API to wait for the pending operations to complete before continuing."
"After this change the rate grows to ~20k,  which is in line with the perf of builds using portable PDBs with no PDB available."
"After this change, #code can pick up the correct handler as the dll folder is added in the search folder list."
"After this change, the new file structure enables ARM64/x64/x86 side by side execution on IIS Express."
"After this change, the new file structure enables ARM64/x64/x86 side by side execution on IIS."
"After this PR is merged, we can update the memory-mapped stresslog format to store a pointer to the contract descriptor in the runtime image."
"After this PR, the pipeline in the second generation starts with #code, so later steps are cached effectively."
"Again, best case scenario."
"Again, that'd be an improvement and could be in a another PR once the design is finalized."
"Again, the alignment of the RuntimeStartupStub itself matters."
"Again, this is not finished."
"Again, to me, if you type 'await' you need 'async'."
"Agree, it is unlikely any of this info is useful outside of SPMI diffs."
"Agreed, and as you suggested, that could be handled in a separate PR."
"Agreed, the original test is a little interesting because it always had the yield it seems"
"Ah missed the property, thanks!"
"Ah ok, it wasn't quite clear to whom ""we"" was referring to in ""we can add that check""."
"Ah right, forgot about that."
"Ah right, unmanaged delegates use the Aux field already, that makes stuff problematic."
"Ah sorry, I've meant that replacing the current field caching scheme used by Roslyn with #85014 would help with that."
"Ah, damn, that's C++ and not in ucrt, so that would not help."
"Ah, does it cache once the file is created?"
"Ah, got it."
"Ah, i was blind..."
"Ah, right."
"Ah, sorry, I must have missed something here."
"Ah, that likely explains why the issue in #105667 wasn't more widespread -- partial defs by calls were bypassed in this special liveness update."
"ah, this could be the missing dispose"
"AIUI, everything in src/tests is C# driven."
"All .NET API changes go through this process, and they are fairly strict about how the request is formatted so that they can review requests more efficiently."
"All args are optional (#code is used by default when no target specified, mostly, becuase it's the fastest VM instance I have)"
"All CodeActions are ordered by their priority first, and by the distance of the span they change to current caret/selection second."
"All diagnostics reported by the analyzers are disabled, with the exception of EPS09 which supports and enforces the code style from #43426."
"All existing unit tests now pass, but I couldn't understand what the following in Rebuild tests means:"
"All fives of these classes were private, so there's no API surface change here."
"All good, @github?"
"All in all, the result was not what I expected."
"All listed optimizations are included in the #code TFM, but only some (№ 2, №3 and №6) are used in #code and #code TFMs which DataProtection also targets."
"All of our uses of ""unsafe"" constructs are safe; otherwise they'd be bugs to be fixed."
"All of the above, plus fixing #code implementations"
"All of the above, plus grouping"
"All perf changes need to be accompanied by benchmarks showing their impact, just ""produces smaller il"" is not enough."
"all query tests, and introduce a special ""NoSyncTest"" wrapper to catch the special exception thrown when the test runs in the sync variant, and introduces #code checks in many tests."
"All structs would, but commonly used ones will have more impact."
"All that might be costly, since the cost delta of a swap now requires examining all blocks that have edges into or out of the swapped portions, and not just the blocks at the boundaries."
"All the other layout calculations that depend on this I've checked seem to be outputting the same before and after fix (the final output, not the infinite loop one), visually I couldn't see any difference either."
"all those diagnostics reported will be re-adjusted at IDE layer using buffer mapper, which doesn't exist for closed file case."
"All those null-conditional access operators instead of if-checks, changes to the property styles, all it could have been was removing #code and #code."
"All unofficial archs are disabled, riscv64 was missing in #code condition and #code had the same condition outdated."
"Allowing workspace services to be disposable is good, in that it could be used to get rid of IWorkspaceEventListener stopping and the hard-coded list of random services that get disposed in Workspace.Dispose() today."
"Allows tests to wait for the application to be idle (animations complete, images downloaded, root visual built)."
"Almost all of MS.CA and MS.CA.CSharp are already trimming compatible, it is only native PDB writing which has problems (because it uses built-in COM support, which is basically reflection)."
"Already approved by LDM under the ""can optimize for well known types w with known contracts"" bucket."
"Also #code can be rewritten to #code or #code, which has less overhead."
"Also changes #code from #code to #code, occurrence I've missed in #9230."
"Also changes some #code fields to constants, decreasing static allocations."
"Also curious how that compares to before this change, or how it compares to how summary and remarks are shown etc."
"Also enable #code if the allocation site is within a loop, also via stackalloc."
"Also for parse diagnostics, they are all calculated then filtered out:"
"Also give local symbols a small boost on MatchPriority over other symbol types in competion, since it's more likely used in the given context."
"Also I forgot to exclude sites in handers, so things may blow up there too."
"Also I saw that there is some shuffling of #code data, which I think can be skipped and performed in such a way, that some allocations are skipped."
"Also I want to discuss with team, what shall I change in migration and compiled models, because I a little bit misunderstanding"
"Also if I can trust the what I'm seeing from the simple search of dotnet repos, most are referencing in the _uncommon_ way as a regular PackageReference without include/private."
"Also note that the caller for the issue originally reported in #url is user code, so there's nothing we can fix."
"Also note that the faster you scroll, the higher improvements we can get compared to #code."
"Also re being productive on arm32, I have had pretty decent luck cross-building from an x64 linux host (via docker) and then mounting the repo + artifacts via SSHFS on an arm64 host (RPI4 in my case) and then running arm32 under docker there ..."
"Also removes #code which was never instantiated, allowing for removal of addition interop definitions."
"also treeview,listview,tabs and some other controls has internal tooltips need to be darked."
"Also when I replaced #code with LinearLayout in the default Android studio app, it also didn't intercept a click without #code"
"Also while many people wouldn't do it, I can definitely see some would actually pick a name like #code."
"Also, @github or @github we'll need M2 approval for this."
"Also, #code tries to run crossgen2, which runs into invalid binary."
"Also, at this point of the release it would be very risky for us to upgrade to a new major version of a dependency."
"Also, by porting this optimization to NativeAOT, we can look at sharing code between CoreCLR and NativeAOT without losing perf."
"Also, could you assign the GitHub issue and the pull request to me, so that it's easier for me to find them?"
"Also, for example, if I needed to execute the tests in #code, how would I go about doing that?"
"Also, FWIW, I do think it is probably sufficient for us to just support arrays in this binding since that's what we do elsewhere for parameters."
"Also, having the code / data pages ratio different for each architecture would complicate the interleaved heap management (the interleaved heap is the heap that allocates memory for these precodes)."
"Also, I believe @github has a pr out to fix this."
"Also, I noticed we never set #code to false anywhere, so it seems safe to remove this member."
"Also, I removed the initial ""skip ASCII data"" part since we already have a work horse for that."
"Also, I spotted merged PR's with failed tests in this area."
"Also, I was definitely able to hit cases where the cached values were being used whereas they weren't before."
"also, i'd prefer to just have the same cod everywher.e  the 99% case is on core, so we might as well just move to the new code."
"Also, I've not implemented the #code part, on which I feel there would be additional considerations."
"Also, if it ever did become a public API that we have access to, it's likely to have this overall shape which makes migration easier."
"Also, if this PR was generated incorrectly, help us fix it."
"Also, if you have a repro of your performance issues that would be helpful as well"
"Also, included an UITest."
"also, IsGeneratedFile doesn't work all case since 1."
"Also, it looks like there are test failures."
"Also, it seems to be a common problem among Apple developers:"
"Also, it's been a while since I've checked (and I'm in my phone on vacation), but don't we already split our diagnostic callbacks into syntax and semantic callbacks?"
"Also, let's separate out the VB changes."
"Also, make #code be the first field in #code because we access it more frequently than #code."
"Also, note that all the translation tests already use the same tables and data."
"Also, notice how the entry weight doesn't initially match the exit weight above."
"Also, notice that there's a horizontal margin that cannot be removed even with setting the negative values to margin eg."
"Also, please add a unit test showing the issue and that this PR fixes it."
"Also, please see this comment: #url MAUI is already working to get it integrated in the .NET 7 timeframe."
"Also, prior to trying to run #code, I did cd into #code."
"Also, SVE would give better performance on 256bit machines (currently only neoverse V1), but it's doubtful on 128bit machines, although it would shorten the code size."
"Also, tests are failing for the main branch."
"Also, the action you're taking in the two videos is different"
"Also, the Assert checked on 4-byte alignment, but the unused const had 8, so I'm assuming 8."
"also, the diffs look more like inliner actually no longer inlines what it used to?"
"Also, the same fundamental problem exists in regular coreclr as well."
"Also, there are a bunch of other tests that seem to test this intrinsically and pass with this fix"
"Also, we are not making compiler changes base on dotnet/csharplang discussions."
"Also, we could maybe add a note to the docs that having multiple triggers attached to the same target property could cause undefined behavior if multiple of their conditions evaluate to true at once (no execution order is guaranteed as explained above)."
"Also, we have discussed the possibility of cDac world no longer supporting some of the redundant DAC interfaces like IXCLRData..."
"Also, we need to validate which is the status of the current SystemBars settings are on the app, because for example, I may have an application that only shows the StatusBar and not the navigation bar, so by doing this, we are showing status and navigation bar which may not be the expected result."
"Also, we should see if calculation/merging of use-site diagnostics could be optimized/simplified (get out early, etc.) now."
"Also, what if the user wants to hide from Editor?"
"Also, what should be the scope?"
"Also, why we think they are insufficient for RC vs."
"Also, you can write a test for this by slightly modifying the flyoutpage class"
"Also, you need to agree to the CLA as per the message above."
"Alternative to #49689 (tagging @github, @github, @github, @github, @github)"
"Alternatively these strings could be separately localized as part of WPF, but that might result in an inconsistencies since the language coverage of OS and WPF localization differs."
"Alternatively, adding something to the MAUI #code API like #code or #code could be an option."
"Alternatively, I can take it over - copying over the proposed changes."
"Alternatively, I could try moving the tests into coreclr."
"Alternatively, maybe an #code and just add an #code ?"
"Alternatively, we can work with Roslyn to introduce constructs for enforced deterministic destruction so that the cleanup code is injected in IL."
"Although #code is process-specific and should generally be accessible,"
"Although #code is updated properly, the scrollbar remains hidden because the HandleScrollBarVisibilityChange method processes both its true and false states, and RequestLayout is not called."
"Although code can fall back to software when no hardware device context is acquired, this needs to be extensively verified."
"Although, missing contexts alone don't tell anything about the diffs."
"always add ""()"" or never add ""()""."
"always complete on "";"
"always complete on ""."" for ObjectCreateionCompletionProvider"
"An alternative considered was to use the home directory and introduce some kind of periodic cleanup strategy, but there are also other tradeoffs."
"An example usage where it might not be wrong is calling instance constructor on an object from #code (assuming the constructor actually initialises all fields obviously, since idk if we guarantee that it's already zeroed)."
"An open #code will close on tap, so a tap on an open #code should be intercepted before it can be handled by child views."
"An upfront ""libs"" build isn't required anymore and sfx libraries"
"Analyzer fix, converts occurrences of #code to the compile-time generated #code alternative."
"Analyzers implemented in the other repository tend to be taken and used out of context, with questionable expectations of stable behavior in use cases outside of dotnet/roslyn."
"and a diff for the test above, which actually shows the fixed size:"
"And about the failing unit tests, it seems that the failing unit tests rely on this bug."
"And after multiple iterations, with a final blend factor of 1:"
"And also because it is hooked up to an explicit editor command ""organize imports""."
"And anyone who needs this will probably search for ""asp.net core partitioned cookie"" will find #url I don't understand the rush."
"And as I noted, I expect there are ways of writing the code differently such that bounds checks can be eliminated even without using Unsafe."
"and control panel “when I close the lid” = “Do nothing”, then close the lid and check if a WPF application with D3DImage crashes."
"and control panel “when I close the lid” = “Do nothing”, when closing the lid or on sleep / awake."
"and distribute the Submission and such derivative works, and to sublicense any or all of the foregoing"
"and double clicks that label, it leads to the following calls:"
"And given now the inliner works depth-first rather than breadth first, the results when we hit these limits will be somewhat ugly."
"And i cannot reconcile that we have this particular style analyzer on, while not having any other analyzers on (especially ones that related to unnecessary code) :)"
"And I shall not, @github has said it for me."
"And I'm sorry, but I don't believe your current modifications will resolve issue #6861, and may instead reopen the already fixed issue #6861."
"And if correctness for collectible assemblies can be taken care of by reusing the existing delegate field, ConditionalWeakTable becomes just a throughput optimization for repeated Delegate.Method calls."
"and if I understand correctly, we can't get simplify anything here."
"and if so, exclusively utilizing the new properties."
"And if that's an issue for this subsystem, it has to be improved."
"And if we were to classify numeric prefixes, what about string prefixes like #code and #code?"
"And in those cases, would those two ParameterExpression instances technically be pointing to **the same parameter**?"
"And it is not ""unsafe struct"", it is marked unsafe because method is using manually managed objects (i.e.certain guarantee need to be taken care by author), which is what we are doing in this core library port."
"And it works at runtime, so the designer doesn't seem to be doing very good job at showing what happens at runtime."
"And just a small nitpick: we might confuse the terms ""complete tree"" and ""full tree"" - the following is a full but not a complete tree:"
"And lastly, is there already an established way of testing dark mode support?"
"And not when there's selection / isn't, IMO (and also, as you say, we should do that only for non-invisible ones)."
"And property documentation should start with accessors, i.e."
"And regardless, that is a separate issue from this PR."
"And same for same limit for all heaps, 1Gb*3 will lead to failing mmap anyway."
"and since all the properties are mutable, I don't see why not."
"And since we keep the SourceTextContainer alive as long as the buffer is alive, this means an errant call to create a SourceTextContainer for a random buffer will root the original editor snapshot, as well as the entire change history for that buffer."
"And so if I keep it, it should be as good as it was."
"And the consequences of such bugs span the gamut of issues - data corruption, information disclosure, etc."
"And the WICBitmapSource can be created by other logic, such as D2D logic"
"And then the error comes in because this new #code is pushed up to the old binding context, the Section 1 view model, because the old binding has not been unapplied yet."
"And there are still some loose ends around closing, disposing and cleanup."
"And there's around hundreds of PRs that are just ""simplify""; because format has already been done."
"And this already has a default behavior, which is used to display the full name of the identifier"
"And this pr is a patch, and I think #url will be better."
"And to be fair, the bug would be in _those_ components, not within ASP.NET."
"And to give some context: @github, @github and I are working through some of the details of eliminating the symbol wrapping and moving that to the compiler directly; this came out of that so this is somewhat bugfixing and somewhat exploratory."
"And to register the handler, they'll send an LSP request:"
"And when it is called, it is going to be used together with other reflection that is generally slow so it does not need to be super-fast."
"And yeah, solving IDE0040 resolved SA1400 occurrences as well, so I've removed both from #code."
"And yes, it is absolutely fine to put parameters onto the next line when a single one gets too long!"
"And yes, the border width is supposed to be fat."
"And, by and large, i don't like when there are hidden dependencies."
"and, if hte new code is not caching, it's unclear to me why we'd use RCC :)  We can just make the http connectino ourselves and download the content that way, right?"
"And, if you have the focus states in the same group as normal, the normal state will never apply since it will either be focused or unfocused and normal will be overwritten."
"Android needs custom logic to ""intercept"" touch events when tapping on a view that covers another view."
"Another application for this is that COALESCE cannot be used for *Indexed Views* in SQL Server, however ISNULL is supported in case of aggregations."
"Another approach, compatible with the function pointer + instance methods above, is to add an API to let the application specify their own delegate for method that they do not want to cause emit\jit."
"Another concern is that ClearCache(Compilation) doesn't seem to be getting called, which sounds like an intentional decision."
"Another concern would be how to actually set it, because when I tried to set ""Switch.System.Windows.Controls.ItemsControlDoesNotSupportAutomation"" in OnStartup, non-zero value was already cached in System.Windows.AccessibilitySwitches and I had to use reflection on #url to actually set it."
"Another contributor was the binder resolving #code as the field, rather than the type itself."
"Another distant alternative would be using custom positional patterns, so we could do #code"
"Another helper function OnTrackingSessionUpdated which raises the session update events already had checks for this, but UpdateTrackingSessionIfRenamable bypassed that."
"Another idea to keep things consistent (but not being on the two extremes) is to only auto complete #code on #code, and never on #code"
"Another option, which I briefly mentioned in a comment somewhere, is to expose a variant like #code - which would mean that if the high bit is set (of whatever byte we think is most convenient for the larger types, probably the first one in memory I would think / or of the value, would have to think more about what would be the best solution), then you're guaranteed to get #code."
"Another PR, #8712, attempts to resolve this issue by partially reverting the changes made in #6862, but this approach does not fundamentally address the problem."
"Another special case was also removed, deciding not to add an additional increment of indentation when inside a separated syntax list, since that decision is always ignored when inside a separated syntax list."
"Another thing to note here, as far as I can see, NativeAOT doesn't seem to cache the #code at all and seems to fetch it on every call."
"Another update, I have got the bookkeeping numbers as well (sadly I gave up the mark array bytes for simplicity)."
"Any control derived from #code (#code, #code) never disconnected from the #code callback when #code is called."
"Any text typed while the control is hidden is applied when the control becomes visible again, due to platform-specific behavior in managing focus and keyboard input."
"Anyway, although I have to add some extra test cases, but my code is now ready for reviewed."
"Anyway, before going further with this one, I wanted to double-check with you if this will ever be taken in consideration."
"Anyway, such a flag may be useful for other code fixes that involve syntax node removal."
"Anyway, this fixes scenarios from #8679 and breaks all scenarios from #6862, which begs a question: can we do better?"
"Anyways, no reason to priorize this, I just wanted to get it in working order before looking at the other ActiveX issues I have on my todo list ;-)"
"AOT of some assemblies can lead to compilation crashes, on iOS for example."
"Apologies - I thought a little bit about this, and I was wrong above."
"Apologies for not including tests, it has taken me a while to get everything running."
"Apologies for the delay, it fell off my radar, I'm looking now, although, this seems to be mostly VM-side issue, not JIT"
"Apologies in advance for the verbosity of this comment, but I just want to make sure it's understandable."
"Approach is similar to #code (#code), which allows to set size of segment for SOH/LOH/POH, and guarantees that there's no oveflow during computations (for example, during #code)."
"are we using clrgc?, are we using segments?)"
"Arm also has GCS, but I suspect it'll be a few years before it appears in any real hardware."
"As #url was approved last week and changes were made in the runtime repo to unconstrain the generic overload from class-only behaviour for #code and #code, we can adjust the code in the WPF repo for improved code quality as well."
"As a bonus, flip the comparison result with one instruction."
"as a contractor, vendor, or agent."
"As a developer who is proficient in graphics and C#, one of my requirements is to export WPF-rendered UI as video efficiently."
"as a fix for visibly shown diagnostics (green/red squiggles, three dots, faded-in text (well-known #url #code))."
"As a last step, I removed the unnecessary double lock on #code/#code methods by creating an internal static class, running the initialization of predefined formats in the static constructor, saving all the unnecessary overhead (the internal static class and the formats are not initialized if only the fields are used, as #code is set, so there's no regression in that sense as well.)"
"As a motivating example, here's a method from #code before late profile repair:"
"As a new architecture, it's more risky to expose public APIs comparing to mature architectures."
"As a result, #code and #code properties do not work."
"As a result, for every input in the #code control, the width and height of the rounded rectangle are updated."
"As a result, I found and fixed two smart indent bugs (see the added unit tests)."
"As a result, I have not enabled the MacCatalyst condition yet."
"As a result, I tried tapping it using coordinates; however, this approach did not work either."
"As a result, I've implemented the bitonic using scalar code."
"As a result, in the OnItemsSourceChanged method of the Picker class, the SelectedItem is cleared when the new ItemsSource is set, causing the picker to lose its selected item and leaving the SelectedIndex unchanged."
"As a result, itemSpacing remains 0, and no spacing is applied between the items."
"As a result, language compilers can misinterpreted where a type should come from."
"As a result, since TapoffView's frame is not updated after its initial creation, it fails to cover the intended area when the screen dimensions change."
"As a result, SOS has intimate knowledge of the memory layout and format of the StressLog structures."
"As a result, style properties such as font size, item height, and popup height were not properly applied to the overflow presenter"
"As a result, the behavior varies based on the layout:"
"As a result, the button was properly aligned in the center of the page."
"As a result, the CarouselView maintains the position of the previously scrolled item."
"As a result, the CollectionChanged event was wired multiple times for each navigation, and it was never unwired."
"As a result, the color was applied to all items instead of being limited to the items in the NavigationView."
"As a result, the cursor goes below the keyboard frame."
"As a result, the default padding occupied space in the #code."
"As a result, the ImageButton renders according to the image size alone, without accounting for the padding values in its measurement."
"As a result, the layout of subsequent children, such as the Border, second ScrollView, and the Editor itself, does not update correctly, causing the width and height to remain incorrect."
"As a result, the NavigationView does not correctly update its layout in response to size changes, causing misalignment or rendering issues in the ScrollView."
"As a result, the placeholder text remains at the start position."
"As a result, the scrollbar remains hidden in the Always visibility mode."
"As a result, the ScrollToAsync method does not return control to the calling method."
"As a result, the size of the drawing area and the text area do not match, and word wrapping"
"As a result, the UICollectionView scrolls to this adjusted contentOffset, causing the collection view is scrolled to 1st item."
"As a result, the Unloaded event of CellControl was triggered, which led to the CellControl's parent being set to null."
"As a result, the visual representation is initialized before the element is added to the logical tree."
"As a result, users may perceive that no action has been initiated."
"As a result, we can resolve both issues #6862 and #8679, while also adhering to the intended purpose of the #code switch."
"As a result, we cannot maintain the appearing count in the test case."
"As a result, we have used the event in the already overridden OnConfigurationChanged method within MauiAppCompatActivity.Lifecycle."
"As a result, when a new item is added to the collection, it is not reflected in the view."
"As a result, when the OnFocus() method is executed, the user's input is processed first, and then selection changed is executed, and the problem of the program being terminated due to quickly entering IME characters is resolved."
"As a side benefit, the sample-content version was never actually referencing the #code file, so it was just wasteful content that is now also cleaned up with this PR."
"As a side-effect of that change, I introduced #code, which make per heap validation possible without taking locks."
"As added in the test, the following simple case determines the existence of the bug:"
"As an alternative, the line could be removed completely, since the guide tells you to use Visual Studio 2022 Preview."
"As an area owner, PTAL when you have time."
"As an end user, I think I don't mind if the auto parentheses completion didn't work in niche cases, but I it would be annoying if the opposite happens (VS inserts #code when I don't intend to type them and I'm writing other valid code)"
"As an example of a place that does this, see #url"
"As an example, if the start of the selection was one more char to the right, it would not include the comment makers."
"As an example, say Section 1 is displaying and Item 2 (#code 1) is selected."
"As an example, see #url"
"As an intermediate step, I opened #34072 which adds exhaustive testing of the null rewriting (plus some cleanup/minor improvements ;) )."
"As before, we now have bits 4/5/6 that aren't getting masked off, but that's okay since the values are duplicated 8 times."
"As discussed in #41428/#43083 #code is actually desired, so this PR fixes #43273 by the way."
"As discussed in dotnet/csharplang#7222, this PR will only focus on fixing the #code cases of constant field initializers and enum field initializers."
"As discussed offline with Sam, this will give a more precise data for only creating the the glyph"
"as expected, no tp diffs."
"As far as I can tell the patch only copies dlls from the msi to the correct install location, but maybe I didn't test the scenario that is fixed by this part of the change."
"As far as I've seen, strings currently deal with collectible assemblies by allocating a pinned handle for every string."
"As for code style, I'm happy to adapt if we get proper guidelines."
"As for E2E tests, we already have such tests with Selenium, which test the entire behavior in the browser."
"As for the pause here - I need to update XAML with these changes, but have been working on infra."
"As for the PR, I would also suggest the #code is removed on arguments in #code."
"As for the real-world impact of the combination of my PRs, I don't know."
"As for the reflection part, I'd assume fetching #code being 10ns vs 2ns wouldn't really matter in the big scale, I'd assume pretty much any operation using MethodInfo to dwarf that in cost."
"As for the static constructor, I do agree with you it will ""penalize"", but I view it as very cheap."
"As for the the existing relative links, the main benefit is consistency, but I also find it easier to read and understand a link like #code than one like #code, where I have to count directories upwards in the hierarchy."
"As for this pull request, if you don't like the normalization of relative links, can this merge with just the changes from links to GitHub to local links?"
"As huoyaoyuan indicated I would expect to get to this in early .NET 10 at this point in time (there's only around 10 more days before the next snap, at which point we start locking down for RC1)."
"As I believe #code should be close to thread-safe class and it seems the original intention was for it to be from the comments, especially since even running during debug will have another thread initializing a source, based on the report in issue #9347, I've decided to create a little improvement."
"As I can see, issue #17823 is affecting many users and will continue to do so in the future."
"As I can tell, this bug originates in the initial release of WPF for Microsoft .NET Framework."
"As I found out, it was sufficient to just use this simple #code above which simply derives from #code and use this in #code with corresponding Color settings."
"As I pointed out on the other thread for this reason I don't like creating local functions just to ""reduce the clutter"" of the containing type."
"As I said, there are various levels of caching on both the VS and OOP side, so I wasn't completely confident in this fix, but I felt like it fit in fairly well with the existing code in the area as it had most of the data that I needed to make this association."
"As I say, I think I know exactly what is wrong, and will look ASAP."
"As I understand it, that code is needed for cases with an ObservableCollection source, when the collection is updated that changes what item is at the SelectedIndex."
"As I was at it, I also changed the logic behind the activation of the CASE transformation; it now only activates if it is valid (not on nullable vs nullable) and it causes no de-optimization (aka it is only allowed on predicates if the comparison is an inequality)."
"As I've described originally in the issue, with some small adjustments:"
"As it stands, const field initializers and enum field initializers should not cause this error, meaning that the #code case should be handled in those places."
"As long as it does only this one change, I think it's fine for it to be as big as it needs to be..."
"As long as we have a correct way to implement it on Unix in general, though, and I believe @github has suggested that the approach of manually closing each file descriptor > 2 is sound (Tom?), then that would seem to be appropriate."
"as long as we're doing some of the more useful and nice pattern changes in an expression, then def feel free to add these in."
"As Measured value of Image is negative during first call from native, the negative value has been constrained and the measured value is set to 0 using Math.Max() and converting 0 to ToPlatform() will not throw exception."
"As mentioned in the comments there, fixing that bug is merely a subset of #url which can be fixed without the need for a full implementation."
"As of now this PR is a no merge, until the tests are public and the failures are resolved."
"As opposed to being able to create a #code from a #code, #code could be improved and made public and users could be encouraged to build up the generated source code that way as opposed to using a #code."
"As part of ongoing effort, I've replaced it here."
"As per dotnet/csharplang#1394, this feature was laid back until this scenario was covered."
"As per suggestion, I have modified the test."
"As per the API proposed in #110244, the following functions have been added to #code:"
"As per the static constructor, I understand that the PInvoke call might be of concern (was originally mine as well) however we do not depend on any state of the call there, either it registers or it doesn't."
"As proof, you can add a GPU only DX shader on #code as #code, and I guarantee it won't take effect."
"As S increases, the size of the Grouping class increases but the arrays grow faster leading to fewer arrays allocated for large buckets."
"As such it particularly helps with early matches, or where the anchor selection was poor such that we must rule out many false positives."
"As such, a local function serves *for the purposes of most of the IDE* as simply a way to ""scope a method more narrowly""."
"As such, the input values are evaluated multiple times."
"As suggested by Jason offline, add an integration test iterate rename 20 times to prevent future rename freeze"
"As the developer is not able to make any changes to these internal schemas to correct them, it's necessary to simply ignore them during the code generation instead."
"As the main advantage of this approach is fewer array resizes, these benchmarks favour larger bucket scenarios at the expense of smaller bucket scenarios."
"As the new profiled aot story involves diagnostics tools dotnet-trace and dotnet-dsrouter to collect a trace and bridge the trace collection process with the .NET running on a mobile device/emulator, an automated script is added to keep the number of steps minimal."
"As the original API review, this API is out of scope for .NET 9, as well as #code."
"As the Trixie is the next major release for Debian and is in a testing mode, and unsure whether it's one of the supported ones."
"As there are few versions and they only differ by pointer-size, the contract descriptors for these cases can be hard-coded in SOS if a descriptor is not available."
"As there are not BTI enabled machines available to test, not enabling it."
"As there is only one type that derives from SemanticModelProvider (CachingSemanticModelProvider), I considered condensing down to just a single class and making it static, but that seemed orthogonal to the memory leak."
"As we can see, CV1 is doing better than CV2 but anyway both look blazing fast compared to #code where hiccups are very noticeable with this app!"
"As we discussed offline, the fix-all fixer would be"
"as we do more work, we might merge with existing one, or we might remove existing one and do the new way or might leave both."
"As we run the benchmarks, I would pay attention to ephemeral GC pause time, in particular the time spent on marking cards."
"As well, one of the issues which appears to be holding up this issue, is for handling oversized exception strings, and too many exceptions on the same card."
"As WPF directly depends on runtime, it already uses 10.0.0-alpha versions of the targeting and runtime packs for managed projects."
"As you can see, in the Main function, SplashScreen will be called first and then the App object will be created."
"As you can see, it is not a trivial problem to solve."
"As you predicted, the tests you recommended failed."
"As you probably know, the logic is quite complicated and easy to make mistakes."
"As you said, the font may have been changed many times, so delete #code here should be the right solution"
"Aside from my above comment, @github's suggestion makes sense to me - I think simply checking #code should be sufficient, and take care of interfaces/subclasses/etc."
"Asking the PR author try to 1) make sure the change compiles 2) ensures it fixes the problem for them is not only a reasonable expectation and a clear constructive suggestion to do, but it also ensures author's issue is resolved to their satisfaction if the PR is merged and saves everybody's time."
"ASP.NET, WinForms)"
"Assert.Equal(1, modal1Appearing);"
"Assert.Equal(2, windowAppearing);"
"Assuming I understand what you are looking for, the benchmarks are showing the difference between the old implementation and the new one, so the ASP.NET part of the throughput is canceled."
"Assuming it's a good time to iterate on it, you can then rebase this PR on the latest main, and then we can get this to completed state and merge."
"Assuming most typical recursive algorithms have two self-recursive callsites, for example, binary-tree, quick-sort, fibnoacci etc., and the native code size before inlining is about 150 bytes (estimated from binary-tree, where it has two recursive callsites + 2 cases for leaf node):"
"at Microsoft.VisualStudio.PlatformUI.ThemedDialogStyleLoader.OnElementInitialized(Object sender, EventArgs args)"
"At no point should an exception be thrown that the user can't directly guard against in a try/catch around a method call (since it's an event, there is nothing to try/catch)."
"At present for mono we have two existing ways to capture a heap snapshot for memory analysis, gcdump and heapshot."
"At present there are two working prototype viewers, #url and #url (thanks @github for your help here!)."
"At present, it seems safe because flex layouts nested inside other flex layouts aren't functioning as expected at all and this change only affects this situation"
"At runtime, each instance of #code will create a strong reference to the Application instance, but only in the affected case."
"At some point MSBuild will make their other package netstandard, which means that split wasn't strictly necessary to do, but honestly it resulted in some downstream hacks so I believe it's a net win regardless."
"At some point, we enabled #code, the verification work can be done make simpler under #code, so we did it."
"at System.Windows.Forms.ListViewGroup.ListViewGroupAccessibleObject..ctor(ListViewGroup owningGroup, Boolean owningGroupIsDefault)"
"at System.Windows.FrameworkElement.RaiseInitialized(EventPrivateKey key, EventArgs e)"
"at System.Windows.ResourceDictionaryCollection.InsertItem(Int32 index, ResourceDictionary item)"
"At that time, we may want to look at ways to limit the set of changes in places like SyntheticBoundNoteFactory so we maintain consistency in how some components are used."
"At the app level, not a big deal, but at the runtime level, we pay attention to such things."
"At the runtime, the form should be scaled according to the DPI of the screen it's created on from the DPI it was designed on."
"At the same time, I'm inclined to do the right thing by maintaining consistency in automated behavior."
"At the same time, we can apply the same value to the placeholder label."
"At the time i wrote the PR there were no tests and i could run, or i was unable to find those."
"At the time, their sandbox saw our IPC mechanism as a potential threat, and it protected the stability of the machine by throttling our IPC channel to 100 transactions per second."
"At this point, I'm mostly interested if the PR would be accepted and if the approach is OK or not."
"at this point, so I added code to handle the scroll request in the Loaded event."
"At this point, we need to be able to answer these questions."
"At this time, if the user entered two or more IME characters very quickly, the event is processed at this point, and the consistency check fails in this event and an error occurs."
"At this time, the handle of the form has not been created"
"At this time, the judgment (IsHandle created) is added, resulting in only the font being changed, and the Form is not scaled"
"Austin, are you OK with these being squashed into this PR?"
"Author just recreated fix used in the situation where ""IsGrouped == true && Header != null"" the same way for case where ""IsGrouped = false && Header != null""."
"Automated tests here are difficult with current infrastructure as we don't consume the built packages, nor rely on auto-generated bindingRedirects in the same way a customer project does."
"Avoid initializing #code variables inline to prevent mistakes as it may lead you into thinking that such value will be initialized for all instances of the variable, not just the first thread."
"Avoids creation of temporary heap array when initiating #code, contributing to startup performance."
"await Shell.Current.GoToAsync(""//modalPage2"", true);"
"await Shell.Current.GoToAsync(""//windowPage"", true);"
"await Shell.Current.GoToAsync(""modalPage1"", true);"
"await svTestItem.ScrollToAsync(0, 200, false);"
"Awhile back we did an ""async everything"" approach, and have since learned that was perhaps overly aggressive, at least when that's stuff that's on the UI thread."
"base.ViewWillTransitionToSize(toSize, coordinator);"
"Based on #url we decided to not actually implement what this property was intended for, and the implementation only supports ""DEBUG"" as the configuration."
"based on my reading of the code, this is not necessary and should be removed."
"Based on our past discussion, we would like to eventually add ones that are on startup path of common types of apps like e.g."
"Based on our UI and hang data, Roslyn's packages are one the most expensive packages during solution load."
"Based on reading PAC doc here, their example was using PAC to encrypt the LR using SP and store the result in another register and then pushed both the LR and that result register."
"Based on that, wanna suggest some improvements:"
"Based on the #url), There is one such file per process because not all processes see the same mount points."
"Based on the changes, there are several golden tests (comparing an snapshot) with small differences."
"Based on the current behavior after the fix, can we resave the current snapshot as the expected snapshot for this test case (Issue1323Test)."
"Based on the plans outlined in #111989 (#url), we want to remove phases that prematurely tweak the initial layout fed into 3-opt; #code is one such phase."
"Based on the provided issue sample, you set the BarTextColor, which is applied to all items in the NavigationView."
"Based on this, I think it make sense to take this fix now and try to tweak the design to further improve the feature."
"Based on way too much knowledge of both, I disagree; I suspect M.E.C.R."
"Based on what godbolt arm32 clang generates for the target function, the numRegs looks suspect."
"Basic representations of the GCHandle tables, GC roots, and JS interop handle tables are also embedded into snapshots."
"Basically, make the MSBuild part an implementation detail rather than something most authors care about?"
"Basically, that we don't have confidence that we're recording teh right thing."
"Basically, the code in main now propagates the binding context."
"Basically, what are best practices here?"
"Be able to run on ARM the full build, and make sure the unit tests pass."
"Because if either IPv6/IPv4 response is late or timeouts somehow, then it means we're delaying connection until we got both of the responses, this can be problematic for some specific cases."
"Because if it fixes an event just to break another one, I think it should stay as it is."
"Because now it's not clear to me if this is referencing some delegate instance, or a local function."
"Because of 1), we can now add a solution file for the whole sfx that"
"Because of layout rounding, #code can return negative (e.g."
"Because RC2 ends today, and we probably would want something more like #url."
"Because the post processing behavior isn't consistent (sometimes a new line is put after #code and sometimes not), the logic of always adding #code for this codefix isn't good."
"Because their is no enforced execution order, the #code that evaluates to #code may run first."
"Because there are so many scenarios, I decided to expose this low level enumeration."
"Because we use the two fields to store the DPI in the previous version, and the code is:"
"Before enabling this by default on PAC enabled boxes, we should ensure the CI has PAC hardware."
"Before starting to enforce new styles on compiler code, we need some agreement on design (is this style desirable?)."
"Before the placement is not important, after, it is...?"
"Before this change we were building the Workspaces.MSBuild library (the part that loads in the end user's application process) as a .NET Core and .NET Framework library with no netstandard target, which meant that if we weren't careful we'd move our .NET Core TFM to something newer than what customers still expect us to support."
"Before this change, #code only loads the pure forwarder, but then scans the default folders (the dll folder is not included) to load the actual handler which obviously fails."
"Before this change, background GC is unable to decommit free regions, leading to them being accumulated."
"Before this change, only ARM64 web apps can run on IIS Express."
"Before this change, only ARM64 web apps can run on IIS."
"Before this change, the title of the picker hasn't been styled because of the UpdatePicker method."
"Before this change, there were tons of these because most of static field initializers were computed from other static fields."
"Before this change, this application regularly use 3G of memory on my machine, after this change, it regularly uses less than 1G."
"Before we'd be exiting the loop because #code was true, but now we're exiting because #code is true."
"Before writing the test code, I would like you to check if it behaves as expected."
"Before, notice shadow on text inside border:"
"Behind the scenes, this invocation serves as the source of an intercepted #code call that will be generated by the source generator at compile-time."
"Below I have shown benchmarks where S = 2, 3 and 4."
"BenchmarkDotNet=v0.12.1, OS=Windows 10.0.19041.746 (2004/?/20H1)"
"BenchmarkDotNet=v0.13.1.1603-nightly, OS=Windows 10.0.22631"
"Beside this type not being public, the Simplifier service doesn't actually need the #code part of the #code."
"Besides everyone else's, I'm just breaking the platform my company builds apps on and about 40% of the infrastructure depends on."
"Besides same can be done in #code and other places that deal with #code, so it seems better to do it separately."
"Besides, this mimics what #code does: for SOH on 32bit it's rounded down to power of 2, so largest possible value of provided segment (SOH) is 2 Gb (#code)."
"Better perf, better startup perf and lower static memory."
"Between the two, I think placing after source is better most of the time?"
"Beyond just overlapped commit, I am seeing other problems as well."
"Beyond the review/maintenance, I think another question would be whether we end up with confusion about whether different variables are ints vs floats."
"Bitcast might be fixed (it looks like it had a casing issue?) but there's another similar one where the assembly name seem case-sensitively correct, so this regression is still mysterious:"
"Both before and after PR, this task executes after the collection is copied."
"Both labels with caption ""Selected: "" and ""Changed: ""  are set with the following day"
"Brief description of trimming analysis: when trimming an application, the libraries should be annotated to be trim-compatible or, if that's not possible, to alert the user which APIs will not be compatible with trimming."
"brute-force test a number of closure capturing combinations, with"
"Btw, I agree that using try-catch is a good approach to handle any unexpected behaviour, as there could be other unknown issues."
"Btw, I don't believe that #code can be used here."
"BTW, I tried rebasing on main from Mon."
"BTW: In vanilla WinUI, the grid scenario takes ~100 ms."
"Build issue fixed by fixing Roslyn.Compilers.Extension.vsix to deploy System.Numerics.Vectors (looks like in the current integration test runs that extension is not getting picked up at all, which is why it passes there)."
"Build, local testing, verifying setting retrieval and stability."
"build""."
"Builds on top of #9739 and allows a few more uses of #code where often we don't need to materialize the output to a #code object, this time in the #code."
"But adding new method to a public API has to follow the #url, so please file an issue first, so that the addition can be discussed."
"But after setting SplashScreen, WPF will create the code in the generated App.g.cs file."
"But after we change the DPI, the #code thread can not find the Matrix in #code."
"But as you said, even if there was a 2ns gain by doing a more optimized lookup I think we should go with my current changes since it's cleaner and it removes the need for a 10 Kb dictionary."
"But at least at the moment (for 9.0) it is what it is, I think."
"but before we consider adding a config, let's step back as @github said and look at the user case - when you said"
"But for the sake of keeping the old behavior, we need this PR."
"But guess what, shocker, most of the time, the conventions vary not just in a namespace, but in a single file, and in the particular file (EllipseGeometry.cs) where you've highligted the line 72; I'd recommend checking line 360; 205; 157 (original lines, those were not edited since that part of WPF was opensourced), and tell me, please, what is the coding style?"
"But I also don't know what swallowing exceptions here does, is it possible to recover the Stylus and get it to continue working?"
"But i can also see people being wary of changing that flag, so i'd be ok with a new one for this purpose."
"but I think if we tell profile consistency to retain edge likelihoods, we should avoid blending likelihoods at all, even if it means we cannot re-establish consistency."
"But i think we've landed in a pretty good place where they're used mostly appropriately, and where clarity and maintainability don't really suffer."
"But I understand, it is always easier to randomly criticise from distance."
"But if it's just these simple idiomatic=>pattern changes, then either don't offer, or don't fix in a fix-all."
"But if the #code is accurate that would imply we're passing the first double in #code,#code and then probably spilling the whole second double to the stack."
"But if the code were to be modified to address the issues that were identified in the review feedback further up the page, then it would, wouldn't it?"
"But if we want to generalize this to more patterns and other conditions, say to find objects that are unlikely to escape, I believe we need to examine the predicates at the postdominance frontier of the possibly escaping reference, eg find the points at which the decision is made to start down the path that will likely (though perhaps not inevitably, given EH) lead to an escape."
"But if we want to prioritize ""visible"" codefixes then we should prioritize codefixes as whole."
"But if workspace changed for other reason, we rely on #code to do all the checks here."
"But if you completely remove the first syntax tree, you still get just #code."
"But if you don't actually have anything to contribute, maybe refrain from discouraging people who actually contribute from contributing."
"but if you want to look into this, and it turns out to be simple, we could def consider that approach)."
"But in #url, although treat the conversion as an invocation:"
"But in addition, it only provides a memory stream large enough only for the first segment, to validate that none of the second segment is written."
"but in this case I see the type has ReadLock/WriteLock properties, which suggests instances are used concurrently and the thread-safety guarantees could come into play."
"But is a ""full, proper"" implementation **really** the only way to remove the blocker?"
"But it is nevertheless a tradeoff, and the product team needs to stand behind a statement akin to:"
"But it is useful for SPMI to quickly identify cases where size regressions could be perf wins (it will still require investigation, just will help with the initial conclusions)"
"But looking at the #code compared with the #code, we knew that majority of the time these reserved end space is not usable, so we discounted the  #code by that ratio to a much smaller #code, now the subtraction leads to a positve number, which means #code will keep 1 free region, and that's sufficient to handle the allocation during background GC execution."
"But on the other hand with this approach, OS is implementing #url for us, and we don't have code complexity here, if we decide to go to splitting DNS queries we might need to consider implementing #url."
"But please note that the ""Don't call fcntl on an invalid file descriptor"" commit is unrelated to illumos."
"But Roslyn embeds the compiler server client inside the task, and because it's all IVT there's no other way to integrate the client."
"But shall we do the merge conflict resolution after preview 2 is released, which is closer to the time the merge of this PR will actually happen?"
"But since the BuildHost still cannot target netstandard because it does need MSBuild libraries that are not yet netstandard, it meant that the regular Workspaces.MSBuild.dll project couldn't reference the BuildHost DLL anymore either."
"but since we're moving the refactoring over to be an analyzer/fixprovider, you should be able to move all the tests over."
"But sure, if this isn't a necessary pr then I'll try find something else/simpler to contribute with, though I haven't really been able to find any other good first issues."
"But that ~10 kB per app, the creation time of the dictionary, vs."
"But the call site during profile incorporation is now the source of diffs, thanks to various early phases having dependencies on lexical block ordering."
"But the point is, it shouldn't be attempting to target net9.0 in full source build."
"But then, if you set a property named targetframework in your editorconfig, what do you expect to happen?"
"But there are still new things appearing, in this case it's this function"
"But there is a question, should we scale the font before the handle is created?"
"but this is also incorrect because if #code is true which would make #code true, you do want to delete the region."
"but to be merged into main, we would need teh analzyer/fixer."
"But we definitely plan to do substantial work on (and hopefully finalize) the NativeAOT support in 10, and this would be part of that."
"But when I add it, it's telling me it shouldn't be updated and repeating the docs which says:"
"But when we call it in #code, the segment contained committed memory."
"But you are correct, in that the solution view is broken with dev kit, since the #code that dev kit generates is empty (no projects added)."
"But you don't need to block on me on the initial merge, if I have found anything we can always fix them later."
"But, as I said, it's not reachable at runtime, it only affects the new unit test."
"But, as Kunal says, the plan would be to support in the Jit too."
"But, for image buttons there is currently no way to do anything."
"But, for long exceptions, perhaps a hover-over might be of use."
"But, I wouldn't completely discard the idea, as it can still be useful."
"But, that should be fast enough when using an"
"But, the only reason today is because higher quality is a large png that was upscaled."
"Button styles were using the common / Fluent brushes directly rather than Button's control brushes like ButtonBorderBrush, ButtonBorderBrushPointerOver, etc."
"By default, #code is set to #code, allowing the rendering behavior to be determined based on the UI context."
"By default, it will trigger #code."
"By default, we'll say that any tests that are swallowing exceptions with a ReportAndCatch should have those exceptions rethrown so the test fails."
"By having the UI thread do it directly, it'll always be faster."
"By hooking into the parser's dispose method and having it ensure that FreeStatements is invoked on the last context, this reduces to about 1%."
"By introducing this conditional check, the system prevents the platform view from being associated with multiple parents, which caused the ""The specified child already has a parent"" exception."
"By keeping the sensitive data contained within a pinned array, we ensure that no copies of it are made before we have a chance to clear it, which limits the chances of buggy code (either through direct memory access or by leaking uninitialized memory from the array pool) to disclose it."
"By making sure these numbers doesn't go into the accounting, it won't lead to accounted byte leaks."
"By nature this is less capable than the heap snapshot functionality available in Visual Studio for netfx/coreclr, but my goal with this was to build a simple starting point we can use to solve problems in the field today, and evolve forward until it can be fully replaced with one of our other systems."
"By not taking this fix, customers cannot rely on data being correctly filtered during live shaping."
"By signing below, the defined term “You” includes me and my employer."
"By specifying #code here, #code will eagerly close the stream, which allows the #code to be opened a second time."
"By specifying OneTimeCode, we effectively restrict the macOS system from showing password hints."
"By splitting the original Unlock method, we are able to enter the InitFromBitmapSource method when creating a WriteableBitmap object in the background thread without having to wait for the main thread to complete and release the lock."
"By splitting the part of #code that converts bits into base 1,000,000,000 into separate methods, I hope to improve JIT optimization."
"By that time, the verification logic was unnecessarily complicated, and therefore we didn't merge those in."
"By the time we introduced #code, we needed to know how much memory was committed, and therefore we had a simple counter #code that is incremented during commit and decremented during #code."
"By the way, some #code comparison:"
"By the way, the repro to do two layout passes can be simplified to (with #code being read only):"
"By this API, you mean TelemetryLogger's ILogger implementation (not TelemetryLogging), right?"
"C:\git\runtime\src\coreclr\inc\profilepriv.h(388,34): error C2061: syntax error: identifier 'EventPipeProvider' [C:\git\runtime\artifacts\obj\coreclr\windows.x64.Debug\ide\debug\daccess\daccess.vcxproj]"
"called at the timing of OnNavigatedTo, OnAppearing events."
"can be null, based on various null tests in this file #Closed"
"can be related, since you merged the main ?"
"Can bind the RefreshView IsRefreshing property to a Label, and wait for it capturing the value."
"Can I ask, since I'm not familiar with that service: is that vanilla Redis, or is it a Redis-alike?"
"Can somebody give me a hand, please?"
"Can this be included in .NET 9, please?"
"Can we have some tests that validate things here (esp that an analyzer that does not want generated diagnostics does *not* get them, while one that *does* want them will get them)."
"Can you confirm, will the workaround work for you?"
"Can you please explain the flaw in my comment above, #url  As you say, a common workaround is to have the **sender** raise the INCC event with #code (when it really wants to do something unsupported), so it seems to follow that it wouldn't be fundamentally broken for the **receiver** to act as if the event was raised with #code in those cases, no?"
"Can you point to the code that is either using it, or that implements this property?"
"Can you try using the the below build command, it should baseline the compat errors."
"Can't tell it's a big improvement for that method, but it definitely implies a poor test coverage for this optimization."
"Can* methods should not (and converters do not intentionally) throw in them but this is simple a programmer's error, it is not documented behavior either, hence the fix for this."
"cc @github There was one CoreCLR assert here due to array MT creation not setting the field count, I made it set it here in debug to avoid that and any perf impact in release, is that okay to do?"
"cc @github we will need to always record LateDevirtualizationInfo for virtual calls even if the call has class probe, as we need to track the InlineContext for use in late devirt."
"cc @github, @github let me know if you want to change something (including credits in THIRD-PARTY-NOTICES.TXT)"
"CC @github, @github, @github"
"cc @github, @github"
"cc @github, thoughts?"
"CC @github/jit-contrib, @github PTAL."
"cc: @github the tests still seem to fail, but after another rebase from tip of main it seems now more tests are possibly flaky from it."
"cc: @github, @github"
"Certainly the ""decrypt in place is a lie#codeWhenAny` when needed."
"Change the exception in #code to something like #code, if it fails osx CI that means it is running."
"Changed my risk assessment to ""Unknown"" to better align with the two following sentences."
"Changes all Markdown GitHub links into absolute, local links."
"Changes continue to be made, triggering more and more and more and more requests for all open files on each snapshot."
"Changing ""as"" casts to ""is"" also does tiny performance improvements.)"
"Changing the behavior of #code by, for example, adding #code can be risky because of how users use the control so far."
"Changing to this, everything seems working normally except Shell modal pages won't show."
"Check the closed pull requests, if I search the keyword ""dependabot"" the last bot pr seems this #url"
"checkboxes), and if you close those test gaps by writing tests against the controls it necessarily duplicates coverage provided by the automation object testing."
"CI is passing, I'm pushing the refactor commit."
"CI is timing out a lot right now, will restart once things have settled down"
"class names, option name, resource name/description), I'll start moving things from #code to the #code/#code."
"cleaner code, better casting and use of variables."
"Cleaner codebase for developers, getting rid of #code."
"Cleaner codebase, impact is negligible perf-wise as its exception cases."
"Cleaner codebase, smaller file size."
"Cleans up rest of the dead code after #1286, as this code is uncalled since the switch doesn't exist."
"Closing using the #code syscall (Linux 5.9, Aug 2020) takes 5.3µs."
"Closing, still flaky."
"Cobalt 100 supports PAC, so sounds like we need to wait until that is in the CI."
"Code Action tests should also avoid use of global options, but that required more work."
"Codegen (outdated, some cases have gotten better, doesn't include codegen for all relevant platforms (e.g., AVX-512 and arm64), and doesn't include all improved scenarios):"
"collection types, etc.)"
"Comes in handy when you are following some code suggestions, and you get this one #url"
"Coming back to this PR, what's the next step?"
"Coming back to this: With some changes to DNMD, I was able to match (and seemingly beat) the performance of the current reader in CoreCLR in my local testing for read-only scenarios."
"Commit 3 is a few VB formatting updates that needed to happen after parameter names shifted lambda locations, and a baseline change that was asserting a method signature."
"Compiled and tested with 8.0.100-preview.7.23376.3, that the commands can be parsed from XAML, bound to keyboard shortcuts and executed on various targets using explicit buttons as well as shortcuts, including modified DataGrid."
"compiler symbols ""lie"" (we hide some attributes that are redundant given types)"
"concept looks solid, nice; added some thoughts"
"Conceptually, why does razor need to supply this property?"
"Conflicts resolved, but the latest commit failed to build on my machine."
"Consequently, the scrolling does not navigate to the correct item index."
"Consider a tabbed application with three tabs: **Home**, **Profile**, and **Settings**."
"Consider that you want to implement a ""select all text on focus"" function for an Entry field:"
"Consider Windows, MacOS etc later."
"containing materials of a third party:"" followed by the names of the third party and any"
"Context: This is so that PowerShell does not have to maintain hundreds of lines of COM code just for the #code jump task and also receive the more sophisticated handling by WPF as it has shown that PowerShell's custom code can sometimes cause fatal CLR errors where we are not sure if it it is a problem of our code, .Net or Windows itself,, see #url"
"Continues the work on removing CAS remnants, this time again method proxies and ""helpers"" from #code, which makes it almost finished effort with the rest of the PRs currently submitted."
"Continues the work on removing CAS remnants, this time again method proxies and ""helpers"" from #code."
"Contributes to #url only for AVX-512, other ISAs can be added if/once this is approved/merged."
"contributions may be maintained indefinitely and disclosed publicly, including Your name and other"
"Control has #code, but indexed setting throws."
"Controls can be added to all of #code, #code and #code."
"Converting to a draft, I'm thinking of a larger refactoring which (if accepted) might make this change easier."
"Converting to draft for the time being while we discuss a bit first, see linked issue!"
"Converting to draft, the Essentials Screenshot API doesn't work yet"
"CoreCLR (and NativeAOT) will implement version 2 of the contract, which is the newest version in this PR."
"Could just say ""or use IServiceProvider via injection"" in the obsoletion message."
"Could not load file or assembly 'ILLink.RoslynAnalyzer, Version=7.0.6.47103, Culture=neutral, PublicKeyToken=31bf3856ad364e35'."
"Could you please clarify why this is needed, and why existing pieces of functionality in the analysis/workspace layer are not sufficient to meet the needs here?"
"Could you please take a look at this PR, when you get sometime?"
"Created handler corresponding to a new LSP request endpoint in razor, to be used in Extract To Component project."
"Created, thanks!"
"CreateTransaction: we'd really rather not if we can help it, for max"
"Curious about the state of this, as it's been a couple years, and this issue is referenced in the regex group."
"Currently #code on iOS always expands to the full available width when it has vertical direction, and to full available height when it has horizontal direction."
"Currently blocked by #9364, hence draft."
"Currently blocked by #9822, hence draft."
"Currently most A CodeActions are Medium priority, only few (add missing usings, inline rename) are high, and few are low (wrap arguments, ...)."
"Currently on both #code and #code, these are:"
"Currently only implemented for List, Object and Array initializers and not for other list expressions such as e.g."
"Currently the draft only optimizes for #code and #code, but I wanted to verify with you that the approach is correct before continuing further."
"Currently the JIT will never introduce a #code into a method, but allowing this may be interesting."
"Currently these are added during the Emit phase, meaning optimizations don't run on any code introduced."
"Currently this only applies to the normal integration and corehost integration CI, there is no helix scouting queue so we cannot run scouting tests on helix."
"Currently we pick the first node that can be speculated on for reducing (the outer for loop above), which does not make any simplifications at the actual annotated node."
"Currently, all expression/body refactorings only work with an empty selection."
"Currently, ASP.NET Core uses version v14.0 of the Facebook Graph API for authentication."
"Currently, each LanguageParser/DocumentationCommentParser in C# and Parser/Scanner in VB allocate their own SyntaxListPool."
"currently, i believe they don't want to show any diagnostics over closed razor file."
"Currently, if we use #code after #code, the data is not saved."
"Currently, it seems like the compiler is out of spec with the language (though let me know if you disagree with that)."
"Currently, it seems that we are unable to add an AutomationID for the overflow icon in the toolbar to tap it."
"Currently, it shaves about ~20-30 minutes off of the integration CI time."
"Currently, on #code when one defines"
"Currently, the logic of this PR does not prune duplicate/unnecessary XML nodes."
"Currently, the NET MAUI DatePicker class supports a single event interface ""DateSelected""."
"Currently, the optimization must be explicitly enabled via #code."
"Currently, these diagnostics are for HIR only, LIR has a bit relaxed requirements for some things."
"Currently, this will work the first time the Entry is focused, but it won't work the second time."
"Currently, we can only change the track color for the switch in the ""on"" state."
"Currently, we interleave code and data pages in memory 1:1."
"Currently, when viewing the files locally, for example in Visual Studio Code, the GitHub links open in a browser instead of in the local editor."
"Currently, writing the key and (attempting to) setting its expiration is done concurrently."
"Currently, yes, and you must restart the IDE after building the analyzer with changes."
"Customer @github requested this fix be backported to the LTS .NET 8 release, with the #url:"
"CV, loading pages, etc."
"Damn, the NuGet tooling bug still affects this and makes the PR impossible to merge."
"Dark theme unselected text is dark on dark (I think this is because they're TextBlocks, see 7 above), and selected inactive is a bright white instead of a medium-dark gray like Solution Explorer."
"DataObject save any to IStream"" commit has changes to existing behaviour, namely, ""InkSerializedFormat"" allocated byte array, read the stream into the byte array and then wrote the byte array into the destination stream."
"debug coreclr tests with #code and #code; debug runtime built with #code, #url and this PR"
"debug coreclr tests with #code, #code and #code; debug runtime built with #code, #url and this PR"
"debug coreclr tests with #code; debug runtime built with #code, #url and this PR"
"debug coreclr tests; debug runtime built with #code, #url and this PR"
"debugging, breakpoints, etc.) works as expected since the API compat step of the build (which is component that is failing) seems to be after the product and test binaries are already generated."
"Deconstruction is not spec'ed as a conversion, so there's presently no justification for target-typing in deconstruction in current spec."
"Decreased allocations, improved performance."
"Decreased allocations, increased performance when initializing from directory."
"Decreased assemblies size, cleaner codebase for developers."
"Decreased size of assemblies, better code quality of codebase for developers."
"Decreased size of assemblies, cleaner code base for developers."
"Decreased size of assemblies, cleaner codebase for developers."
"Decreased size of assemblies, tiny bit of perf, cleaner codebase for developers."
"Default Color Implementation: A fallback mechanism was implemented to provide a default color (e.g., #codewhen the #code resource is unavailable."
"DefaultJob : .NET Core 5.0.1 (CoreCLR 5.0.120.57516, CoreFX 5.0.120.57516), X64 RyuJIT"
"Definitely a nice improvement, but source text serialization is still happening during typing."
"Definitely worthwhile - however, I'm not a huge fan of exposing the naked field, even as #code."
"Delegating all functional members to float, since the upcast is trivial."
"Depending on how clear the resulting API is, we may want to make the new API public (perhaps eventually) to reduce duplication for a common feature."
"Describe how this issue impacts customers, citing the expected and actual behaviors and scope of the issue."
"described in Section 4 below), Submit to any Project."
"description accompanying your Submission, include the phrase ""Submission"
"desire to Submit additional Submissions for the new employer, then You agree to sign a new Agreement"
"Despite this fixing the problem for me locally, it didn't seem to fix the problem in CI..."
"Developer can trivially ""circumvent"" the counting, make the item empty, non-selectable etc."
"Diagnostic severity is a unique case where the information is actually provided to the compiler, not analyzers."
"Dictionary could be converted and might not be supported by Complex Type, and some users might need to have custom json serialization and deserialization and can't use complex type."
"Different values of the divider require different amounts of work during GC(trimming GEN 0, etc.) which directly impacts performance."
"Diffs are based on 2,623,457 contexts (1,043,127 MinOpts, 1,580,330 FullOpts)."
"Diffs are based on 2,635,272 contexts (1,050,818 MinOpts, 1,584,454 FullOpts)."
"Diffs were a mixed bag locally, though now that we always have edge likelihoods available, this seems like something we should be doing on principle."
"Digging further we realized that Microsoft.Build.Framework, which defines ILogger was already netstandard compatible, and so our only remaining use of an not-netstandard package was Microsoft.Build, which only existed to read solution files."
"Disabling automerge as it appears my workaround might be working, but we'll keep this running and open just in case!"
"discussing and improving that Project, but excluding communication that is conspicuously marked or"
"Displays them as grey text, with a tab to accept all the proposed edits."
"do JSON_VALUE over a non-column (parameter/literal) JSON document, with the JSON path coming from a database column; if we restricted the translation to only support the JSON type mapping, this scenario would be blocked (and again, for no good reason)."
"Do we know why we do not see asmdiffs for win/x64, etc.?"
"Do we still want this PR's addition to #code, or should I abandon these changes?"
"Do you have a particularly motivating scenario, maybe we can run it with and without the hard limit set, and show us the behavior difference?"
"Do you have any plans to merge it into .NET 9, or will the memory issue (#9467) be handled as part of another fix?"
"Documentation for a new CustomDebugInformation kind, added in #url for #code"
"Does the title ""List patterns: Avoid generating arbitrarily long pattern examples"" match the nature of the change?"
"Does this not make RTF contain links that do not work until XAML-unescaped, breaking them for any other applications reading the RTF?"
"Doesn't the event subscription create a strong reference between application and expression, thus holding all expressions in memory for the lifetime of the application?"
"Don't know it the issue applies to this PR, but maybe it's worth a check."
"Don't use the global #code command, but the #code at repository root instead."
"Don't worry, I'm enjoying investigating this."
"done all that (using #code - #code wasn't found); no change - it is still trying to use #code from #code, which is empty, regardless of #code vs #code; the #code from the root seems to be using the program-files version of preview1, so..."
"Done with review pass (commit 1), tests are not looked at."
"Done with review pass (commit 14), looked only on changes related to C# compiler."
"dotMemory; its a bit annoying as you have to hit ""capture"" before the process ends or it throws away the results (unless I'm doing it wrong)"
"Due to API changes, #code will no longer be supported when creating a #code."
"Due to the fact that most refactorings have not historically been offered for selection (fixing that as part of: #35525) it can be assumed that users didn't/don't use it except for situations when they wanted to invoke the few ones that worked with selection explicitly, such as #code and #code."
"Due to the use of a global location #code or equivalent, it would be possible for a user to deny access to the #code directory of a different user if the directory hadn't been created yet."
"During development I wasn't sure whether it's correct if we set gen1 max size larger than actual segment size, so that's why this change appeared."
"During generation of bindings we dont see the outcome of #code, which then results in Roslyn being unable to return correct symbol."
"During my anylysis of code (f84d33c7b8313d36f31f686920c7e5e9f038b60e) I didn't find any other related places that depend on bitness, and it seems that with this change behavior on 64 and 32 bit is pretty much the same."
"During switch expression parsing semicolons are eaten as commas, this appears to be very different from object/array initializer parsing."
"During the execution of the device test case - #code, a fatal exception was thrown, causing a crash."
"During typing in the CA process, allocations under SerializableSourceText.Deserialize went from 72.6 MB to 31 MB."
"During typing in VS, allocations under SerializableSourceText.Serialize went from 20.5 MB to 13 MB."
"During XAML serialization, an #code may first be loaded by #code."
"Each binding has the binding to the old context unapplied and then the binding to the new context applied one-by-one, which means there are still bindings to the old context hanging around until the loop in #code is complete."
"Each commit was verified to compile successfully without new warnings, so reviewers do have the option of going commit-by-commit."
"each GC object has an 'object header' in the OBJH stream, and object references in the GC heap are emitted into REFS chunks, while each MonoClass generates an entry in the TYPE stream."
"Each library might have its own specific steps, we can add them later as needed."
"Each time a new root page is assigned, a new layout is inflated, which contains a fragment intended to display the page."
"Each time the DisplayedPage is modified,we have updated the TabBar items count through setupmenu()."
"Easy to miss that it's wrong for 2-value, usually it's the other way around :D"
"EDIT: Actually, it would only have to copy the last chunk, not the whole text, so less copying overall if the text is large."
"EDIT: Hm, It wasn't the case when run locally on Monday"
"EDIT: it does look like EF avoids passing those to the compiler (by omitting #code from #code), but they still get restored and copied to the output directory."
"EDIT: seems like static delegates work completely different than I thought (and this comment suggests), I thought that the runtime creates a new stub for every static method passed to the delegate constructor but it seems to use a single shared stub per delegate type that calls the pointer in #code."
"EDIT: The workaround isn't needed anymore, the upstream issue was fixed (#url"
"Edit: Thinking about it, the #code method doesn't need to be part of the public API if it's only going to be called from within #code..."
"EDIT: this is obviously wrong: expressions can be part of projections, hence need to be materialized"
"Edit: What I am thinking of is to have good default values, but to give the developers out there a highly customizable experience if they need to do so."
"EDIT2: Oh, we don't have new enough installer in WBT"
"Editor already has this logic in Core, should this rather be added there as a feature?"
"Editor is initially configured with VerticalTextAlignment set to End or Center and Visibility set to False, toggling the Visibility causes the vertical text alignment to unexpectedly reset to the default Start alignment."
"Either way, if this code does something which breaks things, requests won't even get dispatched, and you'll probably get a 500 response as the request will fail very early on."
"Either way, it is one of the #url."
"Either way, the window is positioned afterwards to the correct location, so the only observable change is the monitor on which the Win32 window is initially created."
"Either way, what's crucial is that we be able to _choose_ whether to opt into range support rather than change a ubiquitous base class like #code causing potentially severe side-effects that can only be detected at runtime."
"Empty #code entries were not preserved, so multiple transforms didn't preserve incrementality."
"Enabling cached interface dispatch as an options for CoreCLR (should reduce memory usage/remove RWX pages, at the cost of reducing performance)"
"Enabling this would potentially allow replacing some explicit #code uses in the BCL with completely ""safe"" alternatives."
"Enhanced the SearchBar's dimension handling by validating explicit size requests, ensuring that defined width and height constraints are correctly applied and preserved."
"Ensured all controls render, their state can be read after dialog is confirmed and is reverted when the dialog is cancelled."
"Ensured that applications using IComponentConnector, IStyleConnector and splash screen compile and run for both C# and VB.NET."
"Ensured that the method consistently returns finalSize to confirm that the allocated size has been fully used, maintaining alignment with the layout system."
"Ensuring that the problematic API is no longer in use is more reliable validation than running tests,"
"Equality is done over the property, not the field, so those two would still match."
"Essentially, you want to find where in the code that is probably #code specific that does not consistently update the counter and the heap."
"Essentials Location for distance calculations uses spherical Haversine optimized algorithm (optimized, because does not"
"Even after turning off FSA, he was still experiencing relatively high memory usage."
"Even if all original entries are deleted, this is still a more lightweight flow than existed before"
"Even if there are still more beyond that we could support in the future, this seems to me like moving in the right direction."
"Even if this issue is not addressed, it won't have a significant impact."
"Even though 'popular', I've always found the double checking a bit of an anti-pattern, where static constructor is clear and expressive."
"Even though it worked before, this is wrong behavior, especially since the file in question now sets:"
"Even though it wouldn't be a Roslyn public API, other projects could use a source copy (e.g."
"Even though that this change doesn't set default value for containerized environments (#code), it allows to set heap limit manually, which is also very useful."
"Even though the new failures helped diagnose an unrelated problem, this pull request updates the implementation to more closely follow the original intent of these module initializers."
"Even when _not_ in Dark Mode, I believe it would be advantageous to set the corners to RoundSmall."
"Even when non-escape can be proven, stack allocation may not be possible."
"Even with .NET 8, the problem continues to occur."
"Even worse, Roslyn encodes the hash of the server and client into the protocol, so I couldn't easily copy the source code over and just build the client."
"Event source support is disabled by default by the iOS and Android SDKs, and ideally the sample app should match that behavior as closely as possible in general runtime functionality."
"Eventually, this needs to be signed off by @github."
"Every bug fix is a risk, every upstream level change (JIT, BCL) risks breaking all downstream consumers (e.g production apps) for, as you say, no benefit."
"Every call would go through it, the call could be logged, and then it would forward on to the real implementation"
"Every change involves some risks, so we will avoid micro optimizations"" is certainly not a Microsoft policy."
"Every logged in user can launch the app, issue is fixed."
"Everything should be constrained to test code though, since production code already used this analyzer."
"Exactly, the problem here is the type='number' which does not allow formatting in any way."
"examples from public reproduction project repository, before swapping icons:"
"Except my investigations above proved otherwise, the bug is actually quite bad, the #code value can be off by a few MB per GC, it is not difficult to see the counter will overflow way faster than memory does."
"Excluding cold blocks from the loop-aware RPO simplifies how we compute the initial layout to feed into 3-opt, as it eliminates the need to manually move cold blocks out-of-line, instead allowing them to sink to the end of the method."
"Excluding the .sln file doesn't make sense, since other IDEs can use the .sln file as well."
"exclusive jurisdiction and venue in the Superior Court of King County, Washington."
"Excuse the checking verbosity, however, this would allow for **shared** bindings (e.g."
"Explicitly suggested CodeActions should be ordered higher than all other CodeActions, regardless if they're CodeFixes or CodeRefactorings."
"export **just** this function, but it doesn't appear to work no matter"
"EXPRESSLY STATED IN SECTIONS 3, 4, AND 6 , THE SUBMISSION PROVIDED UNDER THIS AGREEMENT IS"
"External threads that became known to the runtime (by running managed code via reverse PInvoke, for example) could cause a process-wide deadlock if the threads terminate during GC which happen to call an OS API that acquires the Loader Lock (launching background threads is just one example of such API)."
"Extra instructions are sometimes required to fine tune CPU behavior, especially branch prediction."
"Failing to dispose of a #code results in both the above and adds a strong reference to a captured execution context, which includes strong references to the current value of an #code."
"Failure to call the ClearCache(compilation) method would have led to this leak, and indeed, this is what I experience when debugging locally."
"Fair point, I'll continue the discussion there"
"FEATURE_PERFTRACING_DISABLE_* can sometimes throw unused variable cmake errors, so suppress unused variable warnings entirely."
"Feel free to bounce this to someone else Egor, and I just need review on the HFA bits."
"Feel free to include info here, or just ping me directly :)"
"Feel free to make any changes necessary to merge this or, if not possible, to mark it as a draft until I'm back."
"Figure out why, then tweak as necessary."
"Fill > Background > BackgroundColor, Fill overwrites Background and if Background is used it overwrites BackgroundColor."
"Finally, 'manual' restricts us in the future."
"Finally, I marked all the five classes derived from #code as sealed."
"Finally, I tested the following layout."
"Finally, the #code method has been updated to use the new #code struct and the updated #code call."
"Fine for me, hopping that it can land in #code since i'm probably short in time with the release / RC ;)"
"First, it is a breaking change in the sense that there was a hypothetical possibility that someone could have injected their own replacements of #code types into the generated code, taking advantage of the current behavior."
"First, remove any current priority changes based on selection/refactoring.vs.codefix due to abovementioned problems."
"Firstly, #url clearly states that .NET XAML recognizes only #code, #code or #code as collections."
"Firstly, I ran the **Antiforgery** benchmark multiple times, and I provided the results in the PR description."
"Firstly, the memory will still be freed, it just can't be released immediately."
"Firstly, users will now be able to use selection for all refactorings which will lead to inconsistent experience where e.g."
"Fix by putting #code into #code (i.e., #code on linux)."
"Fix is to remove this optimization from SqlExpressionFactory and instead put it back into OptimizeNotExpression, once we've converted everything we could to IS NULL checks already."
"Fix issue with ""FATAL UNHANDLED EXCEPTION"" being thrown by Roslyn when using /refout and compiling C# code that uses a custom attribute with an #code constructor."
"Fix the new broken, then a third one is broken 😄"
"Fix was done for the iOS part, but not for android."
"Fixes #code thrown from #code when unboxing cast is performed on #code that was not #code but was of a different type than #code or the underlying storage (#code), e.g."
"Fixes #code thrown from #code when unboxing cast is performed on value that was not #code but was of a different type than #code or the underlying storage (#code), e.g."
"Fixes #url However, note that there are still many kinds of modifications that a custom step could make which are not guaranteed to be taken into account, and there's no guarantee about the order in which different types in an assembly are processed by the custom step."
"Fixes an exception that prevents certain documents (presumably ones containing images, or ImageBrushes?) from printing."
"Fixes compiler errors and adds a ""visited"" parameter to account for cycles in the dependency graph."
"Fixes memory leak when using fonts from embedded resources that are materialized onto #code -> #code, etc."
"Fixes Semantic Search command, which is only enabled when a feature flag is set."
"Fixes some dead links, for example references to removed Fabric Bot in area-owners.md."
"Fixing community-reported bugs and alongside doing some optimizations does not make me the ultimate authority but it surely gives me more ground to have an educated opinion on this, and given your inability to even go through one file before saying how I've violated the codestyle that's violated 15 times in that file to begin with, it definitely doesn't hold a high value to me as a constructive feedback."
"FlyoutItemIsVisible = false,"
"For #code, only complete if there is no nested type or the constructor of nested type is not accessible."
"For #code, the difference is relatively small because #code takes relatively long time."
"For #code, the single argument overload is 1.7x faster."
"For 64bit this change should not make any difference, because #code is always >= 16 Mb and gen1 max size can be 6Mb or #code, so new limit #code from this change won't affect it."
"For all the other tasks I've integrated, I can mostly just execute the tool manually if I need to, or just use the fact that the #code and #code properties exist on the base #code and are mutable to point to the appropriate path."
"For Android and iOS, we have implemented code changes to ensure consistent behavior across all platforms and test cases for this issue are already included in the #url PR"
"For anyone who wants to try this without building WPF themselves: Set a location to the dll in #url using #code property in the project file, e.g."
"For API names, you can open API proposal like #94011."
"For async-enumerables, the problem existed from the beginning."
"For cDAC in particular, the idea was to use DNMD for the IMetaDataImport exposure from CLRDataModule."
"For collection initializers, the ref safety analysis went over all the initializers (#code calls) and intersected their val escape scopes, but that essentially did nothing since those #code methods usually return #code so GetValEscape doesn't look at them."
"For comparison between those two types, you may check #9432."
"For compatibility reasons, this cannot be added to the #code interface, so a new #code is introduced that derives from #code and all WPF types that implemented #code now implement both."
"For consistency with LSP and VS Code, renaming user visible strings to use ""inlay hints"" instead of ""inline hints""."
"For context, my only motivation with this is unblocking #85014 cause I already got non PGO delegate inlining mostly working locally, but it currently only handles static readonly delegates and requires that to work for lambdas and #108606 and #108579 to work better with delegates in general."
"For CoreClr, we could remove the interpreted path pending findings -- the interpreted path is a large amount of code and also doesn't work with certain scenarios such as debugging in Visual Studio, so it would be a win to remove it."
"For correctness, it is mostly about whether some instances where a global alias should have been used were forgotten."
"For discord, use #url  Sorry about that!"
"For E2E tests, we could use bUnit"
"For each call of these methods, it found the first callback parameter, and the first #code parameter."
"For each method, print the number of finally handlers considered for cloning and the number of finally handlers that were cloned when logging with #code."
"For enumerables, the problem was introduced recently."
"For even more security, another feature that could be added is to encrypt the store of addresses that point to the location of jitted code."
"For example can have the VS layer turn on ""eagerly shadow copy resources"" and leave that off everywhere else."
"For example if oracle provider want to map this function which has the same name and parameters, it should use different name otherwise it will conflict with SqlServer provider extension if user reference both providers."
"For example in the following code snippet, the array assigned to #code cannot be stack allocated since the array size is not known to the JIT, and the known-sized arrays assigned to #code cannot be stack allocated since the allocation site is in a loop."
"For example on ARM64 this enables certain scenarios to choose the #code instruction over #code, can lead to more compact code."
"For example, #code are used only under #code on 64 bit even without this change, and #code is updated the same way both on 64 and 32 bit with this change."
"For example, #url"
"For example, a single poorly behaving analyzer or code-fix-provider could make the entire list take 10x as long to show up."
"For example, call #code and cast it to the array layout?"
"For example, for x64, the StubPrecode size is 13 bytes, FixupPrecode size is 19 bytes and the data size for each is 24 bytes, for arm32 StubPrecode size is 8 bytes, FixupPrecode size is 12 bytes and the data size for each is 12 bytes."
"For example, from #code:"
"For example, if no SelectedTabColor, UnselectedTabColor, or ContentPage FontImageSource color is provided, the TabIcons should use the default color."
"For example, if there's a back button the title view places itself to the right of this button."
"For example, if this duplicates some piece of functionality we already have supported elsewhere, tehn it's likely this doesn't need to exist."
"For example, if we need to grab the predecessor of a block, the pred is less likely to be cached if we didn't use an RPO traversal, but this only becomes a problem if we have lots of basic blocks."
"For example, if we're 20% slower and *think* that we're giving 200ms to read the paragraph, but in reality this completes in 220-230ms in most cases, then we have a change in behavior."
"For example, is the span what is on screen?"
"For example, it would be useful to collect some numbers for how often is Delegate equality or Delegate MethodInfo called in real-world apps."
"For example, it's not necessary to #url #code after the platform view is instantiated because that's its default value."
"For example, previously, having #code on input and a pipeline which first filters out #code and then #code would perform:"
"For example, previously, having #code, #code on input, the FAWSN pipeline would start with #code."
"For example, should we focus on inputs where the match is typically close to the start, or would you like a broader range of cases?"
"For example, the changes you've made in #code, this requires way more work for LiveShaping to work properly (Grouping, Filtering, etc.)"
"For example, this considers case if someone wants 1.5 Gb for SOH and very small limits for LOH/POH."
"For example, this is what TS does for files they don't want diagnostics for."
"For example, ToList() becomes:"
"For example, we knew some test cases that relies on tracing fails, and that is expected."
"For example, we prefer #code to #code although it technically means the same thing."
"For example, we sometimes CSE more/less aggressively due to the score being close to the aggressive threshold, or we sometimes churn layout due to blocks that were almost cold now being considered cold, etc."
"For example, we use libunwind to unwind through native code that is going to be compiled with pointer authentication enabled after this change."
"For example, we'd suggest both #code and #code for"
"For example, when trying to share content for a file in #code we now only search in #code and #code instead of all projects."
"For example,"
"for executing migrations (CodeAnalysis is required there because one of the CLI commands analyzes the user project like an analyzer, for NativeAOT)."
"For external libraries, I think one of the following approaches makes sense:"
"For formatting, I have a refactor to convert existing FP formatting routines to generic math."
"For further reference, I've also attached a video demonstrating the issue."
"For GH issue: #url copy it on a server machine in 2 different folders, then launch exe from 2 different folders with different users - Launch exe successfully with different users"
"For GH issue: #url published app with self-contained, copy it on a server machine in one folder, then launch exe with different users --- **first user can install and launch, second user can install but cannot launch,** get following exception in EventViewer:"
"For GH issue: #url published app with self-contained, put it in 2 different folders, then launch exe from different folders with one user - app can launch from one folder, and app cannot launch from another folder, get a message that ""it is already installed from a different location"" --- it is expected, same as the .Net framework's behavior"
"For GH issue: #url the scenarios customer reported about launch exe from 2 different folders with one user - Fixed, we can see 2 app instances"
"For incomplete multi-buffer writes, the API was not reporting any exceptions."
"For instance we could increase the cost of a jump by N% if there are N blocks between the source and target, or try and estimate each blocks size and sum that up and add a penalty factor when the jump span is over a threshold (like 128 bytes)."
"For instance, both me and Cyrus don't seem to agree with #code thing"
"For instance, if none of the SelectedTabColor, UnselectedTabColor, or ContentPage FontImageSource colors are specified, the TabIcons will now correctly use the default color."
"For instance, if the application was using a plugin to limit stylus input to a specific area, then a failure in a plugin could then expand the input area unintentionally."
"For instance, if the SelectedItem is 4 and the item at index 2 is removed, the SelectedIndex will stay the same, but the SelectedItem changes to be what used to be the SelectedItem moves to index 3 and what was at index 5 is now the SelectedItem."
"For instance, if there are two ContentPage instances as children of a TabbedPage, setting SelectedTabColor to red while applying different FontImageSource colors to each page may not work as expected."
"For instance, instead of #code it would give #code."
"For instance, perhaps the following tests which have much better error recovery with this change (fewer parsing errors and no subsequent binding errors)."
"For interpolated strings, the ref safety analysis went over all the arguments and intersected their val escape scopes."
"For late-binding scenarios, which would be one of the sticking points for those porting from XF, consuming IServiceProvider via constructor injection is the answer."
"For linux, there is the ulimit command, and this is respected, but it can be too broad."
"For LOH/POH same value is divided by 2 and then also rounded down to power of 2, so largest possible value of LOH/POH segment is 1 Gb (#code)."
"For low-level access, two new data formats are defined and registered, #code which returns a #code and #code which returns a collection of #codes."
"For mark array, I think we are planning to just give it up like what we have right now, the worst impact of that is just inaccurate numbers."
"For me #code, as well as #code, end up trying to build #code, which does not exist since 3fb5c86d88bf."
"For me the simplest solution was to go into Resources/Styles/Styles.xaml, search for ""Switch"" and set colors you need both for dark and white theme."
"For Microsoft builds, those are (currently) being done on Ubuntu Xenial, which has 2.23."
"For mobile sample apps, I think it would make sense to set an intersection of Android #url and macios #url settings."
"For most cases, this might end up being moot because the JsonSerializer will kick on the MaxDepth being violated when serializing before the validation has the chance to kick in."
"For non-portable builds, that's largely fine."
"For now, I'll say that I'm in favor of the performance enhancement in this PR but I'm against the unrelated changes around it."
"For now, we will continue to use this pass to try to keep the layout compact."
"For optimizations that you are trying to implement, we usually check if the API exists, and apply optimization only when it does."
"For other cases, we have a more complex ""Make method asynchronous"" code fix which fixes the return type, method name, and callers."
"For other nodes, are we already asserting that flags like GTF_SIDE_EFFECT and similar are correctly propagated up from child to parent nodes?"
"For our case, this reduces our app size tremendously."
"For perspective, I have been a developer for 20 odd years, but haven't done changes through github for MS before."
"For reference, there is a unique extended evex encoding for #code:"
"For reference,"
"For review, see the individual commits, most notably #url and #url I can rebase if #7244 was not going in."
"for small displacments which are mostly used in mobile apps, such as geo tracking apps."
"For some context, on this same application, conditional escape analysis for enumerators kicks in for around 200 methods."
"For some of the bitonic functions, they can be done in NEON with a few extra instructions (eg #code+#code instead of #code)."
"For some reason, I can't join the Discord server just by clicking it (either on desktop or on mobile)."
"For some reason, they wanted #code unlike #code to be performance driven."
"For that, I'm thinking we can continue to run layout before LSRA, and detect if we need to run it again after, just to minimize regressions."
"For the (few) tests we have that are testing catch behavior, we let those tests override the behavior they want."
"For the addition of severities, they were chosen based on the rough criteria described for each option:"
"For the BCL use cases in particular, it may be more interesting to work on #url and base this optimization on top of it:"
"For the benchmark, I have taken several considerations:"
"For the EF.Functions side, we could support these clauses via extra optional parameters - I'll see when implementing if that makes sense."
"For the example above, however, neither diagnostics looks cascading to me."
"For the existing cell, the handler had an incorrect platform view as it retained the platform view of a previously reused cell(ContextActions)."
"For the extensions I am not sure, first it's not great that they are properties exposed as methods and then #code is bit ambiguous, is that keyboard focus or logical focus?"
"For the first iteration, can I get some feedback on the following?"
"for the general approach, I don't think having this kind of accumulative accounting is appropriate because after a while the counts will be so big that you will hardly notice if the workload goes into a phase where the unused space becomes significant."
"For the initial work, the interesting set of conditionally escaping references to a local always happens under a GDV guard, it is almost certainly as an arg to an interface or virtual call, in a single block."
"For the interpreter, the previous path was crashing every time, so this fix can only make things better."
"For the issue in #19752, the actual reason things are wrong is not because the states are set wrong, but rather because the focus states are in the same group as the pointer over state."
"For the most part, it is a copy of the C++ code manually rewritten to C# with as little changes as possible."
"For the razor case, you have stated that this is for"
"For the self-referential ImmutableArray scenario, the minimal change to make it not fail is to change"
"For the Windows platform, a new property was added to the NavigationViewItemViewModel and registered within the NavigationViewItem in the TabbedPageXaml.Windows page."
"For these methods that are optimized on some platforms but not others, I suspect the ratio of size regressions to size improvements is larger, as the growth in regressions outpaces the increase in optimized methods."
"For this PR, it looks like the benefit is improved performance for larger arrays at the cost of reduced performance for smaller arrays  ?"
"For this step, a new coredistools was used built from the LLVM repo."
"For this we could switch to an immutable wrapper around #code, similar to how we use #code instead of #code."
"For this, #code."
"For those customers, not taking this PR would mean that popups opened without setting any #code will open with the primary's monitor DPI."
"For those, it works down the method invocation chain of LINQ operators, and verifies that the root is an EF DbContext."
"For throughput, the difference is one indirection when loading the delegate instance that is not going to make a significant difference."
"For two scenarios touched on in issue #104511, we can solve them through different paths in the same InitializeFieldDescs method:"
"For types that are actual System.Type objects, we need to use MakeGenericType/Method to raise these warnings."
"For VB.NET, additional issues are caused by the default namespace that needs to be added to types before a global alias can be used."
"For versions that are supported by memory-mapped stress logs, each version corresponds to a version of the memory-mapped stress log."
"For vertical text alignment, we can relayout the placeholder label whenever the value changes."
"For VS, really the only noticeable change is that the solution explorer"
"For when someone downloads it, they know the size beforehand."
"for whom You are acting in making Your Submission, e.g."
"For xample, say i have tests for component X."
"For your change, I did skim through the code, the idea looks good to me."
"fortunately ""read"" is fine with the hoist everywhere:"
"frameworks is not supported, though it will not be blocked."
"From discussion with @github, going back to drawing board to explore some alternative design."
"From failing tests, the new API is more picky about non ASCIS in SNI name."
"From my limited understanding, this sounds like it can break apps that currently depend on how component is handling exceptions."
"From my perspective as an outsider, I'm only **really** interested (near-term) in seeing the dotnet/runtime PR get unblocked."
"From my perspective, it is ready to go."
"From the approach that we have followed here, it may be better to put these tests under Integration Tests, but before that, I want your opinions on what limitations we can face with the above approach, or if there is some other approach that we can take to write these tests in a better fashion."
"From the changes in this PR, #code still gets built."
"From the given #url, if the BarTextColor is not set, the SelectedTabColor and UnSelectedTabColor will be used."
"from the implementation's POV, you don't need to interlock."
"From the JIT side, I decided to use the lexical order of the optimized layout for this."
"From the linked issue, it feels like we could instead:"
"From this standpoint yes, even if it means having another switch that restores the original behavior, I think maintaining the same behavior as NET6/NET7 makes sense."
"FullOpts (-169,140 bytes)"
"Fundamentally, it is a calculation error."
"Fundamentally, we are missing information about what font/DPI the controls are scaled for right now."
"Further, because #code is used in the process of tuple remapping, we can't just add ""remap this symbol please"" into the loop, because that would cause stack overflows."
"Further, my read of the spec is that this isn't described as a variable at all, which I suppose would leave behavior unspecified."
"Furthermore, customers must rely on alternative solutions for file dialog controls."
"Furthermore, I don't know if specifying/not specifying some of these flags would break anything in the Jump List (e.g."
"Furthermore, if the DialogFragment is closed while the context action is still active, the navigation bar remains in the context menu state, causing confusion."
"Furthermore, it was never abstracted on the SOS-DAC boundary."
"Furthermore, the controls introduce a possibility for the dialogs to be easily manipulated while they are being shown, which has not been possible before."
"Furthermore, this PR prevents us from using the _ItemsControlDoesNotSupportAutomation switch to restore the original NET7/NET6 behavior."
"FWIW, this still should significantly speed up execution time and JIT will be improved in non-NGEN scenarios."
"FWIW, we recently added an #code to vs-threading."
"fyi if you don't want the unnecessary xml doc file in the output directory, there is another way of doing this:"
"FYI the original implementation of this method waaaaay back when did indeed use byrefs instead of raw pointers, but IIRC @github had concerns with that approach and much preferred the simplicity of using true pointers."
"FYI we're bringing the first version of the COMWrapper source generator online, which will fix the trim issues in Emit, but I'm not going to include that work in this PR."
"FYI, I'm on vacation the next three weeks."
"Generally speaking, invoking doesn't seem to be an issue."
"Generally the vscode integration tests work on a client request model, where we ask the server a question and wait for the response."
"Generally, a navigation icon should be an image but, MAUI gives us a hacky way of making it a text."
"Generally, if you think some C# massage improves codegen, please file an issue against JIT instead"
"Generally, the description of exception will not be very long."
"Generally, we only explicitly suggest things a user set (editorconfig, ...) or that really should be done (fixes for warnings, ...)."
"Generated code will be more verbose, consuming more space."
"Generating the code for this doesn't produce any warnings, and the related tables can be queried using:"
"GetCommaSeparatedValues(key) is an extension method, implemented as ParsingHelpers.GetHeaderSplit(IHeaderDictionary, string)"
"Getting this PR in early will help find that long tail, rather than after the full PAC implementation."
"Github status is stuck in ""Checking for ability to merge automatically…""."
"Give us around a month, maybe a bit more to deal with the 8.0 release and the subsequent patching and other work - and then ping me here again."
"Given #code is already used by other overloads, I think it's better to investigate the performance gap here."
"Given all that, we should not remove this common P/Invoke call, but keep it as primary source for non-linux and as a fallback on linux."
"Given how few places it is used, we can just replace it and remove the type altogether."
"Given how few places we rely on #code functionality, this should be easy to review."
"Given some branch #code, #code introduces an intermediary block to create the form #code."
"Given that this PR does change code to do with finding factory methods, and that this particular test has failed multiple times in the PR, I think it warrants an investigation of the code in the PR."
"Given that we are currently simply adding #code for all non-task returning scenarios, maybe it's better to make a broad change to fix the return type as well (and add using if necessary)."
"Given the above, I'm fairly confident that implementing the rest for Neon will give some improvements."
"Given the diff and complexity, this should wait to be merged until after the 9.0 snap."
"Given the example where nullable warnings are added to the #code, we cannot make a general assumption that #code doesn't contain a warning."
"Given the name of the interface, many developers assumed the event would trigger every time a user sets the DatePicker control (see #9180, #13156, #16007)."
"Given the scenario above, I expect no validation error when the form does not include ""testValueThatWillNeverExist""."
"Go to my branch #url and run Maui.Controls.Sample, it will take you to a page with this issue setup (now fixed)"
"Going between 1.1 and 1.2 should be _very_ simple, it's just a difference in mapping."
"Going forward we might extend the Mono unwinder to always use the platform specific unwind ops for LLVM generated frames, and drop a LLVM specific patch we have to generate both platform specific unwind ops (default) as well as dwarf based op codes for general registers, but since we already support dwarf unwind ops for general registers in Mono, it made sense to continue using the portable unwinder and only extend with support for XMM register opcodes on platforms using callee saved XMM registers, like Windows x64."
"Google's announced deadline for transitioning to the new Photopicker is May 28, 2015."
"Gotcha, will make sure the terms are used correctly."
"granted by implication, exhaustion, estoppel or otherwise."
"Granted it's async, but is this acceptable?"
"GraphicsView has its Width or Height set to a decimal value (e.g., 0.25 or 0.75) and a background is applied, an unwanted gray line appears on the view on the iOS platform."
"great feedback @github , many thanks!"
"Guids, however it still reduces total number of objects allocated and thus the edges on the object graph."
"Had some questions, added as PROTOTYPE comments in the code."
"had the parent set, the binding to {x:RelativeSource AncestorType} couldn't find"
"Handler?.Invoke(nameof(IScrollView.RequestScrollTo), ConvertRequestMode(e).ToRequest());"
"Handler.Invoke(nameof(IScrollView.RequestScrollTo), ConvertRequestMode(e).ToRequest());"
"handler.PlatformView.ChangeView(request.HorizontalOffset, request.VerticalOffset, null, request.Instant);"
"Haven't looked at the changes, but would this prevent LSP requests for document diagnostics being returned for source generated files?"
"Having (semi)auto-properties scattered across the type declaration makes it difficult to see what data the object holds onto, weather it has any mutable state, what the value of #code should be when you're adding another one with #code attribute, etc."
"Having #code extension method on #code on sql server provider may cause conflict when other provider wants to extend the same function,"
"Having a Route named ""modalPage1"" and a shell content named ""modalPage1"" isn't going to operate correctly."
"Having already tested this change to my own satisfaction (via a stand-alone test project before I submitted the PR), if there's no one available and able to add unit tests you may as well abandon this pull request now."
"Having two events the same is breaking a _contract_, that event listeners shouldn't be expected to deal with."
"Having- slept on this one for a night or two,"
"He updated it based on your feedback, and it would really be helpful to have this issue fixed."
"HeightRequest=""64"
"Hell, even reviews from WinForms guys requested to change props/defs to a certain style as nitpicks!"
"Hello @github , I am also looking for an update on this, since I am also facing the issue on my apps."
"Hello @github , is this going to be available in .NET MAUI 8 GA?"
"Hello @github, is this ready for review?"
"Hello @github,"
"Hello community members, we are working on writing tests for Fluent UI and ThemeMode property, and here is a basic structure of how I am planning to do this and would like to have your suggestions on how we can make this better."
"Hello every reviewers, I was wondering if there's any update on this PR?"
"hello there, do you have any news about this PR?"
"Hello, I'm joining this thread to mention this is a critical issue for our test automation."
"Hello, MattyLeslie"
"Hello, when can we expect this to be merged and released?"
"Hello,"
"hence I've removed the property altogether, which also led to removal of #code which was just proxy."
"Hence my questions about the underlying server; maybe a non-compliant server, or a RESP-aware proxy that splits traffic without considering pipelines."
"Here are some typical numbers when running against the repro, these numbers are captured during #code for LOH."
"Here is an example of a #code with a #code that allows me to set the #code and #code as in a normal #code in #code and map the states of #code, #code and #code to the corresponding properties of the newly created iOS #code."
"Here, ""recognize bit-test"" optimization (#code) does not kick in due to #code:"
"here, if case you want to try out #url"
"Here, there is no need to update the FlyoutPage when maximizing the Mac window."
"Here, VerticalOptions, VerticalTextAlignment were changed as follows and verified."
"Here's a proposal from me, combining ideas from @github and @github:"
"Here's a short screen capture of how I browse the documentation, either in text or preview form:"
"Hey @github ,"
"Hey @github @github,"
"Hey @github overall, the change looks fine to me."
"Hey @github Thanks for the suggested PR, could you finish the merge of this?"
"Hey @github, can we update this with #url impl?"
"Hey @github, could you rebase it?"
"Hey @github, I added tests to #code, however after opening #code & #code when building I get an error with #code as depicted in the screenshots, when switching to the #code branch, I am still presented with the errors."
"Hey @github, I'm gonna CC a few guys from the wpf team just to be sure it doesn't get lost."
"Hey @github, thanks for filing this issue and sending out a PR!"
"Hey, @github, we are still seeing the startup time penalty."
"hey, wait a second, that sounds familiar...*"
"Hi  @github, We have fixed the issue."
"Hi @github , I have created a separate PR #url  for Android changes."
"Hi @github , The #code method has been updated with proper null handling."
"Hi @github , The above-mentioned two issues are unrelated to our fix."
"Hi @github ,"
"Hi @github ,We have added the UITest cases to validate all the values for the #code property."
"Hi @github Is there a super important reason that I've missed, so that it cannot be removed?"
"Hi @github, Addressed the test failures on CI failures and committed the code changes, could you please review and share your concerns."
"Hi @github, I was wondering what the current status of this one is."
"Hi @github, I was working on removing a TODO-ASG in lclmorph, #url"
"Hi @github, I'm just curious when this PR can be reviewed ?"
"Hi @github, if you have some time, please try merging the latest main in, and we will try and help with investigating the CI failures."
"Hi @github, it looks like there are test failures in this PR."
"Hi @github, making the DateSelected property nullable so the field could be blank would suffice for this scenario."
"Hi @github, tested the updated code, here is the result:"
"Hi @github, thank you for your contribution."
"Hi @github,"
"Hi again,"
"Hi there, @github @github, I don't have sufficient permissions to rerun the ci."
"Hi, @github  @github The MAUI team's priorities are not up to me, but you can have this fix in your app by following this @github's video if it is a major blocker for your migration #url"
"Hi, @github I've also added a commit that fixes your second issue #url"
"Hi, @github it is not up to me what will happen with this pr"
"Hi, @github it turned out not to be the last image, but the default tint color."
"Hi, @github."
"Hi, @github"
"Hi, do you have any ideal when this fix will be released?"
"Hi, how do I get this to progress - it has been sitting ready for review for three weeks?"
"Hi, Is there any update on this issue?"
"Hi, it seems that none of the required reviewers have taken a look at this PR."
"Hi, me and my team are migrating our Xamarin app to MAUI, and we need this feature to move forward, if anyone could take a look at this PR, thanks"
"Hi, this pull request looks promising!"
"Hi, was the discussion effective ?"
"Hi,"
"Hm not sure who you talked to, but I'd love to discuss this a bit more."
"Hm, I wonder if it would work to change the line in ClampSelectedIndex from"
"Hm, let's wait before merging."
"Hmm something like that could be used, but as soon as we are not implying a position based on a full tree, we still need to traverse a big part of the tree to simply find the number of nodes that are ""left"" (with a common parent node) of a specific node."
"Hmm, I guess thats where we disagree then, as I think its easier for a user to have them pre-bucketed than have to look in a single bag know the magic prefix (or in the case of no-prefix somehow distinguish them)."
"Hmm, I'm not really sure which assembly could that be, but I feel the change in the PR is still beneficial?"
"Hmm, I'm not sure I understand your case"
"Hmm, I'm still not sure we should do this."
"Hmm, it says #code in the code but apparently this is wrong and the target is the delegate itself for static methods, for my idea to work this would need to be fixed but today setting it to null causes the runtime to crash for some reason."
"Hmm, that makes sense."
"Hmmm, maybe for now we just restore #code so it subscribes in the ctor and make sure that calling disconnecthandler on Android will correctly unsubscribe."
"Hmmm, the new api in there..."
"Honestly white spaces seems to be causing a lot of issues with the test that was preexisting, I am wondering if I really should just have the code just strip whitespace characters on the formatting as well."
"Hope I was clear enough, synchronicity can be mind boggling sometimes."
"Hopefully they would agree, and their help is welcome."
"Hopefully, it is going to reset the status."
"Hopefully, it is more maintainable, as well."
"Hopefully, the GCS implementation would be similar enough to not to add any surprises."
"Hopefully, this is not a big unknown area, lot of implementation can be copied over for existing start analysis context types"
"Horizontal wrapping works fine, but vertical height control is problematic for my calculations, so I need to rethink it."
"HorizontalOptions=""Center""/>"
"how a language service should initialize, use it, and potentially dispose it when done?"
"How do we feel about this one, do we want this issue to be addressed and is this a reasonable way to do so?"
"How exactly it fixes the issues, etc."
"How is this intended to be plugged into an existing LS, etc."
"How to execute nested actions registered within semantic model start analysis context: Once you compute the nested actions for every tree with a symbol decl (in the analysis scope), you would have a map from <SemanticModel, IGroupedAnalyzerActions> that you can pass into this method: #url This method loops over each symbol decl and then executes syntax/operation actions for each decl here: #url That calls takes an argument (GroupedAnalyzerActions)additionalPerSymbolActions , I think you can append the additionalPerSemanticModelActions to this grouped actions with Append: #url and pass the aggregated actions to that method and it should automatically ensure the nested actions get executed down the line."
"However I'd like to start over from the current main branch, at most bringing the updated test files with me."
"However, #code has a rich API to modify the dictionary (i.e."
"However, #code"
"However, adding PAC support leads to additional instructions in the compiled CoreCLR code for signing and authenticating return addresses and function pointers."
"However, animations work when switching between other tabs."
"However, because Android's fragment manager requires a few milliseconds to commit the transition, a noticeable white blink can be seen during this process."
"However, did look at the old .NET FX IIS code and it was using #code so I feel a bit better about this change."
"However, due to optimizations LSRA may skip this marking when op1 is a last use."
"However, for JSON_VALUE specifically (and probably some of the other JSON functions), it's part of the SQL standard and seems to be pretty closely followed across most databases which do support it:"
"However, from what I recall, we never used to re-use the compilation in the IDE for lightbulb or any span based diagnostic computation, so caching these in the core analyzer driver layer would not have rendered any benefits."
"However, I am going to mark it as request changes to ensure it doesn't get merged before #url"
"However, I am happy to do so if someone from the team decides they are needed."
"However, I am not quite sure the original issue is valid."
"However, I don't know what the ""best"" fix is for this; perhaps much earlier in the process than what this PR addresses?"
"However, I expect that there is going to be a long tail of places that are not prepared to handle fields on array type."
"However, I found it interesting that the #url show that the case where the destination is not big enough is now only hit on a jump forward (predicted not taken)."
"However, I love all the new tests you added."
"However, I think I've found even a simpler solution, please have a look if you can :)"
"However, I think that there's a chance."
"However, I want to let the refactor in #97889 go first."
"However, I'd like you to know I had to erase the following unexpected and *ugly* change from the history."
"However, I'm not sure if it is a correct fix, because it still regresses the height of HTML text in listView and cv"
"However, I'm waiting for your and Shane's review of it."
"However, if .AsTextContainer() is called on a ITextBuffer, that meant that the container would live around as long as the buffer lived around."
"However, if somebody were to create a SourceTextContainer, and never observe the text, nor subscribe to any events, the SourceTextContainer will never update _currentText, so it's rooting an older version of the text from when it was first created."
"However, if you think this PR should be changed back to pointer arithmetics - please let me know."
"However, in .NET 9, we switched fully to Apple native globalization APIs (initially also referred to as hybrid globalization), thus spreading this issue to all iOS Globalization code using the IndexOf API."
"However, in case when we bind the data to the List and use #code property of an object to make the ListItem visible."
"However, in current approach with 512 Mb limit for SOH/LOH/POH it works on tests that I've tried, so larger limit can be set this way."
"However, in Microsoft.Maui.Graphics.Skia, a new SKPath object is created each time."
"However, in the second case, should we fix Android?"
"However, initial attempts to remove it incurred large size increases on x86/x64, suggesting there was some utility in moving blocks closer to their hottest successors to keep the layout compact."
"However, it appears that we treat expressions of struct type (appropriately) as fixed."
"However, it didn't have a libc with pac."
"However, it inadvertently introduced breaking changes, as reported in #8679."
"However, it is expected that with .NET 10, the glibc floor is going to change to 2.27 with #url When that happens, then the Microsoft portable builds will pick this up as well."
"However, it is unnecessary to apply the background color to the entire View element."
"However, it looks like it’s stalled."
"However, it was an intentional behavior based upon the current situation and options we have, which I'd like to elaborate a little bit:"
"However, It will never show the same boost as AVX2 given the vector length sizes."
"However, it's not required in O#."
"However, most apps do not and this was not detected because all the maui samples use scenes."
"However, most likely there is no need for any form of ""visited"" check at all; instead you can shape your pass so that it visits all IR exactly once."
"However, my understanding from our discussions on this topic is that we were trying to get information about what teh costs were for *showing* the lightbulb."
"However, our current threshold for ""cold"" is low enough that I don't think this churn matters: While #code is 0.01, we compare this to normalized weights scaled by #code (100), so normalized weights must be below 0.0001 to be considered cold."
"However, peoples' applications will still break because - at best - the notifications won't get handled properly."
"However, pipelined ordering *is meant to be part of the SE.Redis contract*."
"However, QueryAttributes is not updated for these item changes, leading to missing attribute notifications."
"However, since we are originally looking at improving the Antiforgery performance on linux, I ran the #url including locally built dll's from this PR."
"However, SizeToFit directly returns the calculated size to the SearchBar without ensuring that explicit values are applied."
"However, that is already a solved problem as far as i can tell."
"However, that is somewhat untenable so we should really get function pointers to support instance methods, so I created the language proposal at #url This would automatically bring in a ton of all methods, perhaps up to 50%, since it would cover most property getters and setters and other simple methods."
"However, that may be work that is better done more holistically and not incrementally, picking up and sharing the existing logic that #code has done; so may be better driven explicitly by the .NET team when we're ready to complete such work."
"However, that turned out to be impossible due to the code style layering (if #code were made public they would conflict in code that references both CodeStyle and Workspaces -- e.g."
"However, the approach in #8712, which #code, results in #code inconsistent behavior: sometimes reports #codes (as in groups) and other times reports #code (as in different scenarios)."
"However, the bug report confirms this behavior as a valid bug #url the test case is no longer applicable."
"However, the compiler can optimize the hash multiple ways, including re-ordering elements of the hash  or duplicating the contents of the hash."
"However, the conditions for the deadlock are fairly narrow and the issue has not been known prior to the bug report."
"However, the DRT need to be run in a known environment to verify any of the space injecting code did not get affected (in which case most likely the test would need to be updated)."
"However, the extension reads them correct the first time, making this issue difficult to diagnose."
"However, the handler was not assigned correctly for an already reused cell."
"However, the handling for other RMW nodes (like #code) does not have similar logic to this; instead it relies on the situation to not happen except for one particular case where it is ok: when #code and #code are actually the same local."
"However, the image in the current CI appears different from previous image and causes the test to fail on iOS."
"However, the IsEnabled state was not properly handled on both iOS and Android, allowing selection even when it was expected to be disabled."
"However, the issue I'm encountering is that when I change the DPI value from the settings, the application's DPI value doesn't update dynamically."
"However, the lightbulb speedometer test consistently shows a marked improvement, as outlined in one of the comments in this PR."
"However, the method was returning null prematurely, preventing the default color from being applied to the TabIcons."
"However, the modifications done in FixAbstractMethodsStep should work."
"However, the Release version fails to build with a nuget error."
"However, the signing seems to be setup in a way that it doesn't alter the return address in any way."
"However, there are no IL opcodes for them (ceq.un, beq.un, bne) so these code gens can't happen."
"However, there are some points we need to cover and validate:"
"However, there is no need for us to cache state when the assembly is missing altogether; we should be able to load the assembly as soon as it is first created."
"However, there is non-ignorable amount of time in #code which will be eliminated in this PR."
"However, there were already cases when this happened as noted above and where the input would go through the normal input stack (i.e."
"However, there's nothing technically preventing people from constructing expression trees where there are two different ParameterExpression instances with the same name."
"However, things like layouts, content views and scroll views do have content that needs to respect the cascading input transparency."
"however, this assignment would hit the assert in #code."
"However, this fix #27151  will address your issue."
"However, this needs to be discussed as there is high chance this can lead to problems (which we dealt with in the past, leading to the current design)."
"However, this PR does **not** inject anything at this point, just compiles the TS file to JS as part of the build."
"However, this wasn't a problem until recently because Microsoft.Extensions.DependencyModel took a new enough NuGet dependency until #url changed that for the net9.0 target."
"However, toggling the Visibility does not re-trigger the Loaded event, resulting in the attached properties not being invalidated."
"However, upon adding items back, the indicators do not reappear."
"However, we don't always know what on what screen the control is displayed and we might have to scale font after handle is created, when we know the current screen DPI."
"However, we still need to decide whether:"
"However, when changing the orientation from landscape to portrait, the flyout does not appear because FlyoutOverlapsDetailsInPopoverMode(#url is set to false for iPhone."
"However, when I changed the theme through the device's system settings (Android mobile), OnConfigurationChanged was triggered."
"However, when the #code of the popup is #code, these required steps are not done, since the #code gives up and returns 0,0."
"However, when the device orientation changes, View.Bounds updates dynamically, while TapoffView does not adjust accordingly."
"However, when the page was added as a child page within the TabbedPage, the button was not properly centered."
"However, with this PR, even when compiled with #code, I see the improvements I shared earlier."
"However, within UpdateSelectionLength, there is a condition that checks whether the difference between selectedTextRange.Start and selectedTextRange.End equals entry.SelectionLength."
"Hugh did a lot of changes in cleaning up certain parts of System.Xaml after it was opensourced, those files are way better experience than the spaghetti code around #code is tbh."
"I actually don't know this, I'm curious; if so, then I guess you'd be right."
"I added #url here to address specifically with the #url I don't think we will need this PR (in regards to the next entry issue), but it could possibly be helpful for a different scenario!"
"I added a check to #code to emit a NOP on x86 if a try region with a catch handler ends with a call, and falls into its non-EH successor."
"I added a test and based this on top of #35384, so that it actually performs the desired simplifications (as visible in #code)."
"I added another unit test, and I was worried for nothing."
"I added the file renames and function renames (add ""Try"" prefix as requested)."
"I added the test for #code/#code coalescing, but I found out that it also fails regardless of #code, so I opened #url to track it."
"I added unit tests to CornerRadius, which covers the primary cases, including the unusual scenarios, such as attempting to define 3 values."
"I agree that there may be ways to make delegate smaller on CoreCLR, but I do not think that this specific trick would work well."
"I agree that there's still a lot of room for improvements in future, including removal of dependency on powers of 2 both for regions/segments, refresh for segments, etc."
"I agree this is an incorrect usage so we fixed that, yay."
"I agree with all your points, but did run into a unique issue with Roslyn that seems insurmountable without some extension point (I'm open to pretty much any extension point)."
"I agree with some of what @github said, though I really disagree with the tone used."
"I agree, it seems there is more to it."
"I already planned to investigate this potential ordering issue (because: order matters), but I'm curious as to whether that product / service might also be a wildcard here."
"I already thought it was not complete, that's why I created it as a draft and to also start a discussion to find everything that has to be done."
"I also ""banned"" #code in #code."
"I also added new extensions to streamline focusable checks, but didn't use it yet."
"I also don't like the #code, that should fail by default 😀"
"I also marked PullRequest as ""Allow edits by maintainers"" and you can change it if you see fit."
"I also need to consider the LineHeight property, so I'll upload it again as soon as it's resolved."
"I also pushed a change to ""fix"" the method when #code is null."
"I also ran your test on .NET 8 with 2.8.22 and main branch of SE.Redis against local Redis server on WSL2, and it comes out with the same result as yours."
"I also realized that similar to the other PR you're working on, we'll need to add checks in the RDG implementation for this."
"I also replaced EmptyList with ReadOnlyCollection.Empty because it does the same thing, is a BCL API and allows to potentially allocate less ReadOnlyCollection instances."
"I also run the DRT tests and did not see any failures related to this fix, and there does not seem to be any tests concerning these two commands."
"I also swapped an #code with a #code in FixedDocument.cs, which stored a list of page numbers."
"I also tested the fix in this PR with scenario #26777, but it did not resolve the issue either."
"i also used FontImageSource , but without a color:"
"I am a big fun of semantic snippets myself yet I find these bugs extreamly annoying, especially the line endings one."
"I am also thinking that it might be a good idea to write the tests so that they do not interact with #28077, so I will probably end up rewriting the existing test."
"I am asking you, one .NET expert to another, please stop allowing perfect to be the enemy of good, and unblock us."
"I am curious how native compilers decide what to do, LLVM, it seems to rely on ""stack consumed"" heuristic"
"I am currently running the necessary tests in my machine and I hope to have this finished until sunday, 18th."
"I am ensuring now, once after resolve I will notify you"
"I am experiencing a very related issue in that shadows can cause excessive memory usage, causing crashes and application hangs in certain scenarios, most notably with resizing."
"I am going to benchmark the impact of the equality change tomorrow, I feel like if the impact won't be big, potential optimizations to it can be done later."
"I am just _a little bit familiar_ with the codebase, so if I see a PR in area I previously contributed to and know something about, I might leave a few useful comments."
"I am less keen on renaming things without good reason, it makes it difficult to track things across versions and does have the potential to break applications without good reason."
"I am missing some historical context here, but this kinda feels like we're undoing the benefits of #url -- if the code is simpler now but we're having to add magic hashing and fancy locking and heuristics...was the old code just better?"
"I am no automation expert so I might be wrong, but I came to the conclusion that we can add the missing items into the tree (they were all leaves, weren't they?) while not affecting any existing tree hierarchy, which means all the test cases should still work like before NET8, but also the new cases addressed by #6862 will continue working."
"I am not aware of any, except of maybe regression bugs."
"I am not familiar with how the grouped collections calculate set size/position, so those values may still be inaccurate."
"I am not saying these cannot or should not change, but indeed guidelines should be in place."
"I am not sure if this changed with the move to LSP pull diagnostics or some other part of the system that is now holding onto the compilations used for line based diagnostic computation - if it does then this change will definitely have benefits, if not we would be unnecessarily adding complexity to an already complex piece of code."
"I am pretty sure I had this darc subscription to the base branch disabled, and only kept the staging ones enabled."
"I appreciate the thought, but this would not have helped uncover the linked issue, so I'm not sure this has much value from an ENC standpoint."
"I ask this because of the ""do-not-merge"" label."
"I assume if users only see overloads that take a #code or #code there, rather than exploring how to create a #code, most people would do #code, on the #code, which is the bad way to do it."
"I assume that the assertion would be on the color or background of the child controls, as well as any contrast ratio requirements that should be met."
"I assume that's in the case where you're passing an argument to a method taking a delegate, correct?"
"I assume the best practice here is to not modify the incoming blob directly to add the padding, so the alignment is done when writing."
"I attempted to do it myself, but I don't have the necessary access."
"I believe @github is working on it to take the idea of doing #code in bgc forward, Mark?"
"I believe changes made to Android in this PR should be propagated to Windows as well, but I cannot do it because of lack of a Windows device 😅"
"I believe it usually ended with ""what are you trying to do?"" and then coming up with a better answer."
"I believe LSRA will only split ""critical edges""&mdash; edges where the source has multiple flow successors and the target has multiple flow predecessors."
"I believe the most recent ""Experimentally switch off ..."" commit showed that it is the case, so I think this PR acomplished its goal."
"I believe the primary issue could be simply characterized by ""content of groups in ItemsControl is invisible to automation""."
"I believe the proper way to fix #8679 is to maintain the original type of the #code, rather than reverting the changes of #6862."
"I believe the same is true not just for us, but I can imagine any larger project based upon WPF would be affected, making NET8 migration even more difficult."
"I believe this addresses the issue mentioned in #96, by using the #code property on #code which has always been a no-op property and not worked right."
"I believe this also addresses any problems that prevented opportunistic enablement of AVX2 on AOT when AVX is enabled, but I'll do some more testing around that and make a separate PR for that change if all is well."
"I believe this is low, the scenario when the new code executed is very narrow."
"I can include it within the method implementation if you'd like, as a reference for the runtime developers."
"I can potentially give it a pass today or tomorrow, but its still blocked until API review can happen."
"I can see how a similar behavior could have been the intent here (and in that light, the #7910 fix is questionable)."
"I can see how the ""when user selects he want's to refactor"" made sense back when there were only few (and obviously) selection based refactorings."
"I can see the failure on another PR, so I am quarantining this test"
"I can understand if you have a view in the Resources, but for things like brush and image sources which are Element, this might break down."
"I can understand the approach being wrong or clunky, it doesn't completely resonate too sanely in my mind either."
"I can verify that the patch worked as expected at least for the in-process handler when publishing apps targeting ARM64 (already worked), x64 and x86."
"I can't be certain without someone else running measurements though, measurements are unstable on my hardware and browser-bench spends a lot of time at random points in GC."
"I can't even build the project, so adding a test is beyond my (lack of) pay grade."
"I can't recall ever having a problem reading a prefix, but on many cases I've had issues reading a number due to a suffix."
"I can't think of any backcompat issues, while this comment mentions otherwise:"
"I checked #code, but it didn't work :////"
"I confirm this is the case, to prove that, I have found a couple of issues, I plan to get these fixed."
"I confused the branch on your side, do you mind rebase and reopen this one with your local copy."
"I converted this PR to a draft because when I saw examples like those I got really confused and I was worried that this PR was not the appropriate way to handle this topic, but knowing those are bugs changes things."
"I could probably get the exact configuration, if that helps."
"I could see us prototyping something that would eventually want to live in SCI, but I wouldn't want to publicly expose this API from Roslyn."
"I could write another benchmark to try to prove that this is a better approach by orders of magnitude on large collections, but my latest update involving the ObservableItemTemplateCollection to this PR is Windows-specific and writing a Windows platform benchmark requires creating another project."
"I couldn't be more constructive, simply because, well, I ""focus on bigger gains"" but without preparing the ground at the down level, with PRs like these, you can never get there."
"I couldn't find a way to enter a comma using the numeric keyboard, so I didn't add the test case."
"I created a draft of a PoC for the further optimization only for the combination of #code and #code, but I have no idea on how to use #code in unit tests."
"I criticized other people for mixing actual changes and formatting changes in the past, in much smaller PRs, because it makes it difficult to review (I particularly remember one that could have been single change but was a few extra lines with formatting changes, with which the team agreed and asked the author to only do the functional change, though I cannot seem to find that PR now), so it sounds fair to uphold that view: Yes, I would certainly prefer if we could keep styling changes to minimum, preferably matching the code around."
"I decided to not double LOH/POH, because, otherwise, limit for SOH segment size will have to be 512 Mb (4Gb/5 rounded down to power of 2), and 2.5 Gb for SOH+LOH+POH."
"I definitely noticed over time that everything is much faster, such as with .NET 8"
"I did a manual build of runtime, sdk, roslyn and installer, and checked that the resulting SDK creates temporary directories at the expected location."
"I did a pri-1 run with native AOT on Windows locally, but running pri-0 outerloop to cover non-Windows."
"I did a quick search in the PresentationFramework library to see if anyone else calls these methods, and found a special case for MenuItems."
"I did inspect into WriteMessageTakingWriteLockAsync for some hours, and got the same conclusion."
"I did mention Rider in the PR notes, however, the bigger issue, in my opinion, is the lack of support with VSCode with the new C# Dev Kit extension."
"I did not add Utf8 overloads for #code, but that can be discussed in the linked API proposal."
"I did some clean up, like replacing some SIMD apis with cross-platform ones/operators."
"I did some rudimentary profiling, and both traversals call #code the same number of times, but when using the lexical order, #code, ends up doing a lot more work for this method: The inner loop runs for about 3.5x more iterations in total."
"I did this for the MVVM Toolkit), but that might be overkill here and add too much complexity I assume."
"I didn't add a test for every member type, but I did add a test for each of the following XML node types:"
"I didn't mean to imply that optimizing it further would be easy or that anyone should prioritize doing it, only that in theory it seemed possible."
"I didn't realize the regulators were involved in this situation when I first reviewed this PR, but knowing about this makes me even more hesitant to merge this."
"I didn't see any difference with updated code, same as Yesterday's:"
"I didn't want to close this until I remembered that was, but has otherwise been ignoring it."
"I didn't want to lose this refactoring independent of that change, as to make this a bit cleaner the next time we need to make a change here."
"I do hope to get to this eventually but I have a whole backlog of things to work on, and never enough time, so if this is important for you feel free to take it over."
"I do not asses any, since the struct is immutable and this is not a breaking change."
"I do think there are better things we could do, so i would just have us do that (but not have us degrade this experience in the meantime unnecessarily)."
"I don't currently have much time for open source and I want to participate in Hacktoberfest, so it's probably going to take me some time to address the review comments."
"I don't get any test results in there, but there's a link to a failure log:"
"I don't know how to answer the question, but it seems like what we do right now is consistent across targets and can be reproduced in C."
"I don't know how you would feel about this, but numeric prefixes could do that too following the same reasoning."
"I don't know if there's any thing that can be done to resolve that for existing versions, but no one would have been able to listen to these events, so perhaps that's less of a problem."
"I don't know what's the best solution would be, but I'm inclined to pick a side and stick with it for consistency even in the presence of nested types, i.e."
"I don't know which has less impact, but consider this alternative approach of using app data instead of the tmp folder: #url"
"I don't know which one is better, so please let me know and I will keep the one you prefer."
"I don't know yet why this change is needed, but I noticed it was explicitly requested by the maintainer."
"I don't like async listeners being used as a ""wait for everything"" to ensure correctness during test cleanup, if only because there is no analogue in the actual product that uses that interface in the same way."
"I don't recall the exact discussion since it's been a while, but the points in favor of this are"
"I don't see any improvement in reqs per sec, although not sure if that's a good enough test."
"I don't see it failing on other PRs so I assume no, should I merge master again and see if it fails again?"
"I don't see why it happens though, and I will need to reproduce it locally."
"I don't think the current design is necessarily bad, it's just a bit more complex than it needs to be."
"I don't think there's a strong need for normalizing links, but it would be valuable to install a link checker in our builds assuming we have accumulated dead links."
"I don't think we need to port this to v9, as the alignment added here appears optional."
"I don't want to lose that conversation, but at the same time we shouldn't hold up this forever since @github has done some good work that absolutely improves the user experience."
"I dont know, whether the existing one is right now, I dont know."
"I double-checked, and am noting that CodeAnalysis is also referenced from Microsoft.EntityFrameworkCore.Design, which is another non-runtime package that is require for executing various EF CLI commands (#code), e.g."
"I ended up requiring IThreadingContext (to get a reference to JoinableTaskFactory), but not sure if that is the right way to go about it."
"I expect that #code comes with some memory overhead, so we are assuming that this extra overhead is less than what this is saving."
"I expect we'll be able to get this all merged in sometime in February, in time for P2 or P3."
"I expected the ScrollToAsync method to work as intended when the screen first appeared, and not when it was navigated to from another screen."
"I extended the tests and kept them in GoW, as the different handling of subclassing is interesting."
"I feel like it's probably here, but I'm not sure how to confirm it or what the fix would be:"
"I feel like this and the surrounding remarks are saying that because tap and double tap are ""gestures"", they work in the logical sense of tap then double tap, but if you really want the actual actions, the pointer events (maui pointer gestures) are what you can use."
"I feel my baseline is parenthesis completion is a bonus during the typing, and we should only do that if we feel confident there is nothing wrong with it."
"I felt the same way when I tried to figure out how to fix it, but still ended up choosing this simple approach because I think ""over suggesting"" here wouldn't cause any issue during typing: just type one more character to have the desired name selected, plus being in the suggestion mode."
"I find the span is faster than Clone, see"
"I finished the first version of this PR, could you please review this PR?"
"I fixed it on Android, but it still hasn't been merged."
"I followed your advice, @github, and did some profiling."
"I found this in #61314, but this PR does *not* claim to address the root cause of that issue."
"I found we had some that were commented out :-/ I do not have understanding what the expected behavior should be though, so it might be better if someone who knows added more tests afterwards."
"I get that this change, as it stands, cannot remove the blocker, and I completely support that decision."
"I got a change notification for multiple items, so I will pretend that it was a #code""?"
"I guess nobody knows this code so you own it now :) The way I'd approach it is put a breakpoint in that code, run a simple ASP.NET Core app, open a .cshtml file, hit Return."
"I guess properties are less of a problem, because they'd be in the global section anyway?"
"I guess the reason is that Apple doc states that in order to enable pointer authentication, the binary needs to be compiled as ""arm64e"" architecture instead of ""arm64"" that we use."
"I guess you are very well-informed of the above information though, but hope it helps."
"I guess, aside from the complexity of parsing, why are you **not** in favor of breaking them out?"
"I had a quick look at a rebase, and saw this conflict:"
"I had been intending to keep those in a separate PR, but I agree with @github that they're better here."
"I had to keep #codes to reduce codegen size impact, especially on ARM64, to ensure minimal method body size and jump distance."
"I have a benchmark #url, which I will duplicate below:"
"i have a general design concern here given that we run HasRefactorings OOP, but GetRefactorign in prc."
"I have a PR that refactors Number.Formatting.cs to make it safer, but in between, let's see if this minimal fix fixes the"
"I have a suspicion that the fix will involve SelectedIndex, because it is always set to 0 on iOS on context change"
"I have a workaround,"
"I have added the microbenchmark (see PR), with a code that performs multiple requests using the default #code, and used the new #code implementation against the old one:"
"I have added the SelectedTabColor and UnSelectedTabColor, but no FontImageSource color is specified for the first page."
"I have also benchmarked a different change where instead of using an inline array like the existing PR, the change is to start with a larger array than length 1."
"I have another PR waiting since *October*, and many other developers are on the same situation."
"I have downloaded the proposed fix, and when I run my repro (linked to the main Issue) it currently ""hangs"" when calling"
"I have experienced this most in cases when I open a solution first, use rename."
"I have fixed it to behave exactly as described in #url and #url describes (+ the original comments), that means whenever you update an item, the array is shifted to the left if needed, so the order is always from oldest to newest (left to right)."
"I have fixed the ItemSpacing issue in CarouselViewHandler2.iOS, which resolves the issues on both iOS and macOS."
"I have handled the FontImageSource color for different scenarios by using combinations of SelectedTabColor, UnSelectedTabColor, and the FontImageSource color in my PR."
"I have limited the recursive inlining to methods that are marked as force inlining only, why am I still seeing such a huge #url?"
"I have NOT tested anything here, I was just pushing what I would expect to work."
"I have per the team's earlier suggestion put the changes into different commits, and simply going commit-by-commit, there's not really a difference in the reviewing experience imho, I always review it myself (but obviously that's not a clear view) - here I'm happy @github you've suggested to use #code because seeing all those raw commits in main wasn't what I was going for, haha."
"I have rewritten the implementation to use #code, which allowed it to achieve optimal performance on AVX2 and AVX512 targets too."
"I have seen other people interested in converting error/warning logs to metrics, but I am not aware that anyone has built one yet."
"I have tested and confirmed that the above expectations both work for iOS (16.2), and Android (API33)."
"I have tested this locally, and in the CI single machine tests for windows the tests run in the same amount of time as they do before this PR (~40min)."
"I have tested with my own hand written tests, which I did include in this PR, but I removed because there was no obvious place to put them."
"I have to admit I am a bit puzzled by the original code, I am having difficult time imagining a scenario where case sensitive search through data formats would provide a performance improvement worth the complexity but not a hardcoded switch."
"I have to admit, I'm confused :)."
"I have tried this, but its not working."
"I haven't been working on WPF, and I actually can't help you out here anymore unfortunately 😞"
"I haven't conducted performance measurements for such cases yet, but I’d be happy to write and run performance tests if we can determine the most relevant data set for the evaluation."
"I haven't found any evidence of people registering custom type converters for those enums, needless to say that you may just register one for #code if you wish to influence the output for this type directly."
"I haven't looked at the impl, but some of the strings feel clunky to me."
"I haven't looked at the implementation yet, I'll try to get to that today."
"I haven't looked closely, but my recollection is that the refactoring works for VB and C#."
"I haven't yet handled all possible syntax kinds, but the general idea will be the same."
"I hope so, but I didn't measure anything."
"I hope to have some time later this week to take another look at the changes, but the force push is going to mean it takes significantly more time and will delay my review."
"I implemented a fix for this in the #url, would be grateful if you could try it out."
"I intentionally did not modify the indexer as this can be done easily later on, so there's a new method for it now, which will allow for incremental optimizations in future on another types, where it makes sense and is safe to do so."
"I investigated and found the root cause for this - it's a low risk fix, we should just do it."
"I just copied the WinUI code, but that does not mean that it is the only way."
"I just pushed a rebase and reran my manual tests, everything seems to be working good."
"I just realized i did not read through all your message, I just rebased the branch on top of the change I've seen."
"I just rebased, but it would require a change in implementation."
"I just skipped the ""pure"" code calculation."
"I just want to make sure we've done our due diligence, because a 15-20% difference in a measurement seems like it could have unintended consequences."
"I knew there were bugs, but if it was enabled back in 2019, the bug can't be too bad)."
"I know for any particular architecture we could compile code and observe the generated assembly, but it seemed like that could be a bit awkward to maintain for every architecture."
"I know of #code, but it's for async tasks."
"I know this, I just wanted to offer an idea, but I'm a Chinese who only uses Chinese when I know that the discussion is also Chinese."
"I know, it is easier said than done, it took me quite a few days to find the couple of issues above."
"I lack the expertise to see if that PR would eliminate the enumerator allocation, but I would be in favor of closing this pull request and the associated issue if the JIT is able to handle it."
"I left in the ""copy to a temp file, edit, then replace"" behavior anyway to make sure we match #code's behavior."
"I like the idea of checking mismatched types for SIMD, but I am not an expert to define those rules, so feel free to take to do it 🙂"
"I looked around and couldn't find any usages of the touched file logger, so fairly confident we're ok to re-purpose it, but happy to err on the side of caution too."
"I looked at the JitDisasm summary, and there are only a handful of #code methods in #code."
"I made some changes today, but I'll revert to the latest version of main."
"I managed to do this, but there is a certain risk, even if according to the summary the method should not return an exact result."
"I mean I want ""pointer-over"" state to have higher precedence than ""focused"" state."
"I mean this API literally swallows all these messages, regardless of telemetry or not."
"I mean, I am adding test.libs as well:"
"I meant only when ""."" is typed after #code, all other invocations will not be affected (including when "";"" is typed in this code pattern, as mentioned above)."
"I meant the low level CRT cleanup, not the atexit stuff."
"I mentioned this in an email but essentially, it looks like on ARM32 specifically, the HFA argument is passed incorrectly."
"I met this problem, the #code thread can enter the #code method, and throw the InvalidOperationException."
"I might be misunderstanding the utility of this distinction, but I wonder if we can unify weighted and non-weighted counts (#code and #code, #code and #code, etc) after this goes in."
"I might be overlooking something, so could you assist me by sharing a sample repository to clarify?"
"I need a way of uniquely identifying a #code node, so I can record that I've already visited the node and added the runtime checks."
"I need to check on API consistency, though."
"I need to revise the implementation, turning to draft for now."
"I noticed a null reference in #url when running the tests, I've made it a pattern which is what Rider suggested, happy to change it if that style is frowned upon in this codebase."
"I noticed it creates one if not present (eg., you did --clean) but the help message did not show how to create one."
"I now noticed that the crash happens with #code only when swiping between more than 2 items, but in the case of #code the app crashes instantly when #code has more than 1 item"
"I only ran a small subset of related tests to make sure the feature passes, but failed to cause the NRE."
"I only reviewed O# changes, not the rest of the PR."
"I personally can't think of any way that lets us avoid that while still making delegates possible to place on FOH (other than putting the MethodInfos on FOH but that seems even harder to do), do you maybe have any ideas for solving that that don't require rewriting delegates as a whole?"
"I personally do think this is an issue on the maui side, obviously my fix is rudimentary to begin with but whilst #code inherits #code (something its done its whole life), we should be able to add bindable properties right?"
"I personally use ""pXYZ"", am I supposed to change it back from ""ptrXYZ"" to ""pXYZ"" if I want to modify this code in 6 months ?"
"I prefer (2) because if he does mean to use it in a seekable way, that is clear from the API he is using."
"I realize this isn't necessarily germane to this specific PR, but merging this change should not be an indication to move forward on sharing the code between the two runtimes."
"I realized after writing this that I could have just deleted the factories, since we're applying these to the C# special 'remote' language service."
"I really appreciate the effort put into this and the drive to try and get it in, it just wasn't part of the ""scheduled"" work for .NET 9 and so continued to be deprioritized in comparison to the other feature work going on in the numerics space (mostly due to the size/complexity involved here)."
"I really like that we are working on this and I like the overall proposal, except have concerns on the reliance on MSBuild for output location."
"I recommend verifying whether these values have been overwritten,"
"I refactored the tests to their new suites, and removed the error tests because they seemed irrelevant to testing EF."
"I remember adding that bit of code back when I first implemented this feature, it had something to do with an overload case."
"I remember now, in incomplete function calls we still want to try and add a hint if we can."
"I removed the **blocked** label, but left it as a draft so the changes in #code can be reverted."
"I removed the existing methods that I could find in this PR, but perhaps there are additional methods I have missed."
"I rename the class and add #code suffix, then press #code after #code."
"I replaced comments specifying an argument name with named arguments, which were introduced in C# 7."
"I saw the console output, but the ILs in Expected are those before that commit."
"I see that in the below property group, #code is actually false even though #code is targeting the Windows TFM and I do see the correct TFM in the binlog."
"I see that since .NET9, a try/catch has been implemented."
"I see that the type inference already handles string concatenation in a special way, but it looks like nothing at all happens for other values/operations (#code and #code included), which is kind of suspicious (what should the typeMapping of #code be?)"
"I see that there is an open issue about this problem in s390x arch #60550 (not sure if it is the same), I have x64"
"I see that we switch between using weighted/unweighted counts to drive heuristics depending on our optimization goals -- if we're prioritizing size over speed, then we ought to chase CSEs with the most uses rather than the hottest ones -- so we'd be losing something tangible by using just one."
"I see the properties/metadata as having the same piggy back behaviour: it's not really anything to do with editorconfig, but its a convenient way to pass key-values pairs through, so we namespace and extract them into their own thing."
"I see there is an #code method, but a search of the whole code base shows it is not used anywhere."
"I see you fixed the min problem, that's good."
"I see, I suppose the removal of #code scaling has made it easier to spot where we mix these two up."
"I seem to recall seeing an upcoming PR that would create a Decimal type with #code support, but it looks like this wasn't it."
"I should be getting to this soon, just working through the backlog of PRs now that I can start focusing on things for .NET 10"
"I skipped solving sampling on safepoint and frequency, which will be in future PR."
"I spent a while figuring out how to run the ARM32 JIT tests and was able to confirm that they don't pass, but the necessary steps to iterate on it are pretty time consuming (>1 hr per iteration), and I don't really know enough about ARM or the JIT to make quick progress here."
"I started with built-in analyzers first, which are simple to test and not depended by others."
"I still don't understand the reason behind slow #code on iOS, especially because that #code didn't change."
"I still have a lot more work to do, but requesting a review as I have no idea why these tests are failing."
"I suggest letting compiler team to tackle the issue, unless you have an alternative in mind."
"I suppose we could differentiate between before/after layout, though since we're seeing this block placement affect FullOpts with some frequency, it might be more worthwhile to get layout working after LSRA."
"I suppose, but in that case the prefixing seems desirable."
"I suspect it is acceptable for two methods to send events for the same ID, but they'll have different payloads."
"I suspect that will make the TestSelectedIndexAssignedItemsSourceCollectionChangedClear Picker test fail, but if it doesn't, then I guess there's a different spot that updates the SelectedItem on a collection reset, so it would work."
"I suspect we're better off with a moderately inconsistent profile that still resembles the PGO data we collected, rather than something consistent but entirely different."
"I take your point about the spec, but it's one of those that is unlikely to change (in my opinion) now that cookie has full throttle committed to it."
"I tend not to break any existing method, as long as it's not #code."
"I tested and this is fixed with this PR: #url But, I believe @github divided it into smaller ones"
"I tested on default MAUI project template, added simple modal page, on button click added: #code ."
"I then went through, fixed up formatting errors, and verified that nothing was getting unexpectedly reordered."
"I think  this is probably justified, as I imagine normalizing a subset of a tree and then reinserting it into the tree is rare."
"I think @github and I should figure out how to get the prerequisite fixes shown there (and here) all integrated, and then I'll rebase the last parts of this onto that."
"I think @github was going to review this one, since it was his suggestion."
"I think #53862 does a better job of resolving this, especially if we can make it work for items coming from metadata."
"I think generally it seems to be a good idea, although, it's better to optimize tail-called recursions into loops."
"I think having some kind of limit makes sense, but this one feels a bit arbitrary, seems like it should be per candidate, or per candidate + depth somehow, and not per root and not mix different methods together?"
"I think I can get the cost of a 3-opt run down a bit in the next few PRs, so hopefully I'll make up for this..."
"I think I got it now, I though #code and #code had other meaning."
"I think I prefer fixing TargetsLinuxBionic=true on Android instead, the number of places where it matters is indeed quite small."
"I think I'd need to think about it more, though I also wonder how @github would feel about it."
"I think I've found the underlying bug, which, when fixed, could solve a lot of issues."
"I think I've made that slot pointer sized to ensure the code start is always aligned on the pointer size for perf reasons, but I am not sure."
"I think if you were to rebase, the old bindings would work and the issue would be to just add a UI test."
"I think it is, it increases the odds of a successful stateful reconnect."
"I think it only does nothing to telemetry when ignored, but may be going to a file based logger or etw."
"I think it should be creating a sln, otherwise the solution explorer in vscode is not going to be able to work..."
"I think it should be wrapped in CreateBatch instead, or even CreateTransaction if we want to prevent race condition from multiple clients."
"I think it's just a matter of numbers, in this case: on win-x64, only 45k methods make it to FullOpts."
"I think it's pretty expected to see improvements in trivial microbenchmarks when inliner inlines more, but will it behave the same when there will be a larger call graph?"
"I think it's sensible to allow the compiler to have a view of all of this code being added early on in the pipeline, but this might not make sense in the tiering model."
"I think libraries shouldn't do that, even for inputs they consider invalid."
"I think link checking is a good idea, but I would suggest putting it in a separate pull request linked to #38631."
"I think many of the regressions are caused by spilling in #code, but there are also some individual regressions that I'd need to look into case-by-case."
"I think most of the code is not using ""big"" arrays (say with length more than 128), and we will hit stackalloc in most cases."
"I think only this part doesn't work on Windows, but maybe it is how it is supposed to be."
"I think perf here should be OK - the funcletizer is indeed perf-sensitive, but not to the point where we can't allow this kind of check where it's needed (remember we use the LINQ interpreter just below to evaluate parameters, which is much slower)."
"I think rather than bundling that with more changes, we should revert the revert and address whatever problems that PR was causing."
"I think so, yes."
"I think teh argument is to remove the existing one since it shouldn't be necessary, and is just masking some better way of doing things."
"I think that if we want to address the issue, we should do that without any need for an additional follow up."
"I think that ought to be covered as part of block-expressions feature, then both of these could be lowered to that instead."
"I think the approach needs to be consistent for all of them, so I removed the #code comment."
"I think the build is failing on Release mode due to use of #code so I'll need to look into having access to this, or some similar identifier, for all modes as it is part of the algorithm."
"I think the change here is appropriate and is a valid approach, given current behaviors in Visual Studio and the DevKit for VSCode."
"I think the concerns raised by @github are technically valid, but block a pragmatic fix for most use cases."
"I think the F# team was on board with doing something like this as a temporary measure (I hope I'm not putting words in your mouth @github — please correct me if I'm wrong), and I personally think it would be a shame if the parens analyzer had to wait for the full F# switchover to LSP to be enabled by default, but I'll defer to you if you think this needs to wait."
"I think the main point here is for the hash code to **disregard** the lambda parameter names; rather than doing that by hashing their indexes instead, we should consider simply disregarding **all** parameter names, regardless of whether they're lambda or not."
"I think the most important thing is to resolve the conflicts and waiting for the IDE team to limit the exceptions on their side when it goes to make the display into separate ""pages"" just like how it pages overloads of methods with the arrows."
"I think the testing is giving me issues because I need a custom build of .NET 7 and the SDK project, then I need a custom build of WPF and finally will be able to test."
"I think the thing that'd need benchmarking here are equality checks and maybe the impact of collectible delegates being stored in the CWT on the GC, the rest of things shouldn't be performance sensitive enough to matter I think?"
"I think there are potentially some concerns of #code for some of the conversion operators as well, but the same concerns would exist for #code and those ones I'm fine with logging an issue for and fixing up in a separate PR."
"I think there was some internal conversation about where we weren't sure if this actually helped, and honestly I don't remember the details."
"I think this addresses your concerns regarding order of evaluation, making the code longer or converting idiomatic code to patterns."
"I think this is a misuse/abuse of the API and shouldn't be fixed, as the fix only add a local workaround for the specific case."
"I think this is justified as #code is usually used to write back to a string, at which point it doesn't matter where the trivia is loacted."
"I think those places do not lock by design, they delegate the responsibility of locking to the caller I suppose for performance reasons."
"I think we can move it to a ""local dev loop only"" and then perhaps later move it out to a separate project."
"I think we ought to just use the early computation of #code for the fixed entry block's weight, but I'll do that in a separate PR."
"I think we should, yeah."
"I think we would like to see this improvement introduced in any ""list-like"" syntax which is wrapped in curly braces."
"I think with help of PGO, these casts are cheap (at least, in monomorphic microbenchmarks)."
"I thought this test is ""faking"" the unexpected exception via the #code parameter:"
"I tried copying the entire vxsort source directory wholesale back into the Damageboy repo and building from there, but there's a lot of stuff that still needs fixing up (moved headers, different makefiles etc etc)."
"I tried doing #code but it seems to be executing other tests that are not there, so not sure what the proper usage would be here."
"I tried to change the font several times, setting three different fonts in Form.cs and Form.Designer.cs, and the scaling results were normal."
"I tried to encourage efcore to update its Microsoft.CodeAnalysis dependency and thereby its System.Drawing.Common dependency by opening #url but this caused some test failures, and there doesn't appear to be interest in updating this dependency for .NET 9."
"I tried to merge main to this branch, however, I don't have permissions, so I can test the latest changes."
"I tried to replace some heap allocations with stack ""allocations"" using #code and #code"
"I tried various Chrome versions to see if it that was the cause, but it didn't make a difference."
"I understand why change like this is necessary for placing delegates on FOH, but I do not think it helps with inlineability."
"I understand you started a new job, we'll step in to continue this PR if needed (just let us know)."
"I updated the code so that instead of only #code, there is now #code and #code so that we can selectively apply the re-ordering logic to top level #codes only."
"I updated the touched file logger to not print everything uppercase, so it works on non-windows platforms, and also allow a relative path."
"I wanted this to be a no-diff change, but I could only get so far; I implemented the following quirks to keep diffs down:"
"I wanted to create a particular trigger, but GetCurrentState in TriggerBase and Trigger is internal and causes invisibility."
"I wanted to have it merged for 9, but as @github has pointed in #url the current implementation is not going to work for async handles on Linux."
"I was able to reproduce this issue with a basic #code outside of the community toolkit and through debugging the #code found a point where it cast the #url, which in the case of #codes is not valid."
"I was also able to test this change with more complex apps, and physical size of heap (Private_Dirty of GC vmas) always remained in allowed  limit as expected (of course, assuming that heap is able to fit in that limit with more frequent GC, for example)."
"I was hoping this would improve the layout of some of the regressed methods in #103972, though we seem to hit the cost limit for cloning quite frequently."
"I was just looking at the SSE4.1/AVX2 fallback for long multiply, and I think we should just replace it with the SSE2 one I added here (extended to AVX2 as well, ofc)."
"I was not able to find an open issue with the focus states ""sticking"" when disabling."
"I was not too sure about the policy regarding 32bit and BE targets, so deferred the latter to scalar loop fallback, and for 32bit the codegen appears to be pretty good."
"I was originally thinking it would make filling memory pages with the copies of the template code slower, but I have forgotten that I've done it in a way where we copy the template just once to the target page and then keep copying stuff from the beginning of that target page in exponential multiples of the stub size (2 times, 4 times, 8 times, etc.) so that we can take advantage of memcpy optimizations for large block copies."
"I was originally thinking to make a breadth recursive budget limit, that is, assuming we have N recursive inlining budget, we first collect the number of recursive callsites, then use #code to decide the depth for each recursive callsite."
"I was thinking about just limiting my work to just 64 bits, but if there is a reason to, we can figure how to get the calculation right on 32 bit platforms as well."
"I was thinking that might be the case, but the #url from one of my other PRs with the updated GUID had collections for every platform, and the #url on this PR is still missing collections..."
"I was trying to use the MSBuild task outside of MSBuild to take advantage of the compiler server, but I was using the code inside a Native AOT application, so Assembly.Location is not available."
"I was under the impression that wasn't true, and that was part of the motivation for the IMT in minijit."
"I wasn't sure exactly how it works but I was suspecting possible startup performance decrease, that's why I raised some questions in the linked issue #url"
"I wasn't sure if that aligns with what we want ""rooting an entire type"" to mean."
"I went ahead and set nullable types for the files, and added a benchmark."
"I will also note that in general, this change would cause different format to match if they differ by case only, however RegisterClipboardFormat is documented as case-insensitive, so this seems like a fair change."
"I will enable the test case for android platform , once this #26674 gets merged."
"I will implement it, maybe it will be clean enough to be the ultimate solution."
"I will not get to it next week, but I will try to make time for it during February."
"I will posit that leaving Streams (a managed object) to be closed by a finalizer is strongly against .NET best practices, and should be avoided if possible."
"I will say that I spent a long time looking for alternatives to #code used in #code #url, but couldn't find anything that seemed to fix #27585."
"I will try to get some reviews in early, but can't promise because of commitments."
"I will try to rebase this one this week, would love to have this working for my projects!"
"I will try to see the telemetry locally, and post what I found here today"
"I will try to see what I can do to help to solve the failed tests, maybe we need to update them somehow."
"I wonder if it is also needed for x86 but since historically for x86 the catch was always just after the try, the try would always end with something other than a call, so we just never noticed?"
"I wonder if it's worth trying to factor in jump distance as an extra cost factor for xarch (or maybe in general), to encourage compactness."
"I wonder if processing register kills in some order that doesn't match control flow resulted in some duplicated work -- perhaps the logic for killing registers can be simplified quite a bit for MinOpts, since we don't have cross-block live registers?"
"I wonder if this is one of those cases where we have to put a NOP after the call, if it's at the end of the try range, or else we can't figure out if we were in the try or not."
"I wonder if we could have a private field and an internal get that is the span via collectionsmarshal, and return the default/empty span if the list is absent."
"I wonder if we should increase the cost limit of #code to match that of loop inversion, since they seem to be performing similar transformations, though we can consider that for a follow-up PR."
"I would actually like to finish this if possible, I am just unsure which way to go right now."
"I would also discourage the use of #code in a benchmark, it can make the results unreliable."
"I would argue we *should* let tehse async operations run, and if they affect another test, then that indicates a product bug we need to fix."
"I would be happy to work on that topic too if requested, but I intentionally kept this PR small in scope as to only address what was necessary to resolve the issue."
"I would consider a change to throw an #code instead of an NRE, but I don't think it's a high priority."
"I would expect to see four segments here if I understand this system right, first 3 for r1/r2/r3 and then a stack segment."
"I would guess so, we haven't seen such an issue before."
"I would imagine the persisters still get created generally during the package load path, and LoadComponentsInUIContextOnceSolutionFullyLoadedAsync immediately does an await on the solution loaded context so there's no real work happening there no matter whether it rus in true initialization or not."
"I would just have to be careful to update all of the locations of the nodes after any trees are split, but I think this should be possible."
"I would lean towards just doing what we decided previously in design review, though I can bring it up again if others are strongly against this."
"I would like to eventually fix them, but in the meantime it might make sense to proceed with #code limited to cases where it is safer to use."
"I would like to know if the approach looks good before I continue (there are several remaining details to be implemented, see the PR description)."
"I would like to propose the DatePicker support two events, DateSelected and DateChanged, to clear the confusion of the current DateSelected event."
"I would like to see a .NET Libraries / API design signoff before this merges, since it deviates from the previously established pattern."
"I would open a new PR, carrying over the tests from this PR."
"I would recommend opening an issue for this and discussing the design, so that we could ensure that this is the approach we want to take."
"I would recommend stashing your changes, then build the repo, make sure that tests run from the IDE, and finally pop your changes back in."
"I would suggest that *if* there's still scope for it, that we bump it to net10 - a bit late in the cycle for nuanced reader things; nobody seems massively stoked either way, though, so honestly: I'm also fine with just burning it."
"I would suggest using PerfView, particularly with the #url profile since it can capture an enormous amount of data."
"I would think this is more up to the individual consumer to decide if they want to keep position, or simply scroll to a known index of the previously displayed item?"
"I would try to get rid of the BinderFlags.SuppressUnsafeDiagnostics completely and, if there is an actual need, would try to find an alternative way to suppress cascading diagnostics."
"I wouldn't disagree, but it just feels like an inappropriate way to enforce it."
"I wouldn't want to lose contributors like @github by making what they do not enjoyable, so I hope we can find some balance between what the team is willing to accept and authors to produce while allowing reviewers to help out."
"I'd also be open to having an #code overload that takes a #code that just immediately calls #code, as a way of increasing discoverability."
"I'd argue that this was all by design, and that we're just tweaking to prefer a more desirable form here of 'async Task' instead of async void."
"I'd expect that having profile repair use a profile-aware DFS tree wouldn't change behavior, and then we could reuse this throughout LSRA (and layout, if LSRA doesn't introduce new blocks); this might bring down the TP cost a little."
"I'd expect that to only mark all the metadata within the type itself, not anything on base types or interfaces."
"I'd like to eventually use DNMD throughout the repo, but I plan to do more perf work in actual CoreCLR and Mono scenarios (after merging this preferably as doing actual testing in the runtime will require some corresponding runtime changes)."
"I'd like to help get this PR moving along, since it seems like this is the right thing to do, I just want to make sure we aren't regressing anything."
"I'd like to understand why it matters since it's not a supported one, and even Azure Redis uses new ones."
"I'd love to, but I do not see a way to do ""stacked"" PRs, where one PR targets the branch of another PR."
"I'd prefer every WPF app be robust by default in this scenario, rather than leave this responsibility to the app developer."
"I'd really like to start using efficient versions of the ""Range"" APIs in other situations (#code is a really good abstraction for more than just WPF, of course)."
"I'd recommend reading #10189 first, the writeup is very clear and helpful for understanding this problem."
"I'd say most of the breaks I've seen in the past are unpredictable and obscure API changes, so looking forward to another suite that covers those in detail."
"I'd say no reason to block -- let's get this merged in so we can start our side of this, and we can bugfix later."
"I'd start at the core, that's dotnet/runtime."
"I'd suggest keeping them internal, and focusing on cross-platform Vector128/256 intrinsics now."
"I'll also looking at the missing ""packing"" code in vxsort, see if there's anything else to gain."
"I'll also need to think about a way of making sure the #code nodes are also being affected, because currently this is only affecting #code nodes and the #code nodes don't get morphed to #code until later on."
"I'll be honest that I'm not sure if you're doing the right thing either: I'll admit I would have probably just fixed the bug by specifically handling the case in the generate equals refactoring, but fixing in the generator is probably the right thing to do."
"I'll create these when I get the time, or if someone else feels compelled, ping me."
"I'll defer to @github, in case someone else can work on this but from my side I've just been swamped with really urgent items and I imagine that will continue for the next few months too."
"I'll gladly accept any solution, whatever is the root cause 😀"
"I'll incorporate it into my refactor instead; if we decide to expand 3-opt to run on different initial layouts to find better local optima, then I think running 3-opt with and without #code run beforehand should be a reasonable starting point, since the diffs on this PR show 3-opt is quite sensitive to its effects on the initial layout."
"I'll look into doing a comparison from before weak events were used, as you suggested 🙂"
"I'll probably go the route of cleaning up my scripts, and putting them in #code."
"I'll take a closer look at the test failure, but I think it's unlikely to be related as this has almost no diffs on win-x64 and it was green yesterday."
"I'll update the code accordingly once I have the time to get to this again, sorry, I've just been really busy!"
"I'll update the code to use CopyOnWrite memory-mapped files, write a new file, then replace the old one."
"I'm a robot and am configured to help you automatically keep main up to date, so I've opened this PR."
"I'm a robot and am configured to help you automatically keep release/9.0 up to date, so I've opened this PR."
"I'm a robot and am configured to help you automatically keep release/dev18.0 up to date, so I've opened this PR."
"I'm all ears), but in a proof-of-concept benchmark (see link above), achieved ~0.7 vs existing (note: that number was in-part based on the now removed #code changes)"
"I'm almost certain the names are wrong but, before I fix that, I wanted to check whether this approach even made sense."
"I'm certainly not trying to discount this effort done here, just want to make sure we are thorough and design the right thing :)"
"I'm currently using rider as my c# IDE, which doesn't officially support .net 6."
"I'm deleting the ""GC pointer could have null methodtable"" complication since it doesn't help much in practice once we downgraded to necessary method tables (that revert is in #url and rt-sz measurements show it really doesn't affect much)."
"I'm disabling RS1034 in #url If this PR will be accepted, the rule should be re-enabled."
"I'm doing this by inspecting workitems on helix for specific queue, but yeah what you're suggesting will make things easier."
"I'm fine with only documenting ""anything above 15 is UB""."
"I'm going to mark it as draft for now, to make room in our active review queue."
"I'm going to mark this as blocked on #46666, and after that merges (today or tomorrow) we can review this PR to get those new tests added."
"I'm guessing I kicked this run off too early, before all of the collections had propagated."
"I'm guessing that was meant to be ""chrome has full throttle committed to it""."
"I'm guessing we were either getting (un)lucky and not needing to handle exceptions during the call from the try region in those cases, or for some reason, the call's return address wasn't being seen as outside the EH region by the runtime when handling exceptions."
"I'm hoping to eventually provide a great set of alternatives through #url, but it's a rather tedious academic project that hasn't gathered much interest to date."
"I'm hoping to get profiles fed into block layout consistent soon, and rerun my analysis before checking this in."
"I'm interested in the answer to this, my assumption was it's just more copies in the heap, so higher probability of appearing in a dump of the service"
"I'm looking at the native aot targets all-up to see if there's other logic that needs cleanup, but wanted to start with this piece."
"I'm marking the PR as draft for now, as we have a big backlog of reviews for C# 11."
"I'm not _too_ familiar with this codebase, so I'd prefer if my PR only addressed 1 and/or 2 and left the rest for people more familiar with the solutions."
"I'm not 100% sure about the names, we can debate them in the PR."
"I'm not able to run #code on my AMD-based DevBox to take a closer look at the TP cost for this method, but perhaps there's some locality issue with using lexical order for super-large methods?"
"I'm not an AOT expert, but isn't creating a new struct going to do basically the same thing in AOT as depending on #code?"
"I'm not experienced with #code at all, so the implementations are incomplete and untested."
"I'm not expert on this topic, I'm totally new."
"I'm not sure changing calls from #code to #code is the right call here, as it will have a performance impact since it blocks until the preference is written to disk."
"I'm not sure how to fix this, is there somewhere in our asset manifests where we know how big the assets are (uncompressed)?"
"I'm not sure how to properly test this, other than running standard C# tests."
"I'm not sure if the System.Text.Json failures here are related, I saw it here before with Windows x86 Debug and now it's on OSX x64 Debug, couldn't find an issue for them either."
"I'm not sure of the impact, if any, on custom ListView subitems, or custom-drawn TreeNodes."
"I'm not sure what our plan is there, but adding to all APIs is unlikely (hugely breaking) - I know @github has some thoughts on handling it differently than a param though."
"I'm not sure what's up with the failures here, tests that are failing on the CI seem to pass on my machine."
"I'm not sure why there's a .NET 7 regression, but regardless of target, I suggest trying pulling the fields into locals prior to doing the comparison; you can do it in a way that'll result in smaller code and no bounds check:"
"I'm not sure why this difference is necessary, or why these changes are only needed now."
"I'm not that experienced with android app lifecycles though, so it could be something obvious."
"I'm not totally sure, but it seems related to the testing environment."
"I'm not trying to discourage you from contributing since your PRs are valuable, I'm just trying to make sure they are done in the best way possible."
"I'm not worried about the implementation, I just want to provide a uniform experience for accessing options in analyzers/generators."
"I'm personally not a big fan of moving code to static constructor just for performance, especially when the static constructor runs arbitrary code (Like UnsafeNativeMethods.RegisterClipboardFormat that could have side effects depending on when a static constructor ran)."
"I'm planning doing a follow-up PR to speed it up a bit, reduce allocations etc."
"I'm simply not sure about the added value of introducing all the parameter names/indexes into the hash code; we're doing extra calculations, lookups and an instantiation (of _lambdaParameters), although there's no requirement for the hash code to contain the new information..."
"I'm surprised this helps, given that we had a filter span in here."
"I'm surprised we haven't run into the other cases yet, like a call instruction preceding the start of a try region."
"I'm torn; I don't see a lot of value in removing these references, but if someone else does 🤷‍♂️"
"I'm willing to also rename the code, but it will be a chunky PR..."
"I'm wondering if this could be related to the fact that I added #code to the test project, or that I added a test that is only compiled on .NET Core."
"I've added an internal method #code to #code, because SizeThatFits should not affect the size of a view which currently happens"
"I've added the motivating test scenarios, including tests with the #code on the last element as suggested."
"I've also removed #code private static method in #code as it was just staring there at me, unused."
"I've also updated the getter/setter on #code for a minor speed boost, since it is used in almost every WPF collection, every branch counts."
"I've attempted to add additional useful information into streams in the snapshot to aid debugging trickier OOM conditions - this PR re-enables part of the old mono counters system so we can embed counters into the snapshot, which will give information like how much memory has been allocated for classes or jiterpreter traces."
"I've attempted to implement a very basic #code for mono, but it might need to be more advanced."
"I've been able to test the parsing at runtime, but #url on how to test #code."
"I've been asked to separate this into multiple smaller PRs to reduce time to review and impact evaluation, so I'm moving this to #code to not cause confusion."
"I've been on vacation and busy with other task right now, but plan to switch back to this starting from the next week."
"I've been trying to write unit tests for the change but have been having trouble getting things to work: Visual Studio 17.11.1 crashes when I open any solution file, and VS Code fails to run the unit test app with an error that it can't find MainActivity."
"I've been using your #code script that runs on a single machine, on 4 cores (+1 for wrk)."
"I've benchmarked the APIs, had to massage the code a bit to make the JIT happy though:"
"I've checked it with a simple app and corerun locally with a delegate from an unloadable ALC and it seemed to not crash, assert nor unload the ALC from under the delegate, however I couldn't actually find any runtime tests that would verify delegates from unloadable ALCs work so the CI coverage might be missing."
"I've decompiled the .NET Framework GAC assembly and it also uses #code instead of #code which means your change does not revert the state, it generates a completely new one which increases the risk by a lot."
"I've found even nominal tweaks to our cost model to be quite expensive, so this kind of bookkeeping might be too costly."
"I've had a look at this locally, and it looks like it would be quicker to redo from ""main"" than to fix those conflicts, but I don't want to jump in an remove credit on the PR."
"I've just opened #111797, once this is rebased on that it should reduce the amount of diffs and show some examples of hoisting."
"I've left initial feedback, which I anticipate the maintainers will point out."
"I've never seen a check for #code before, so I want to make sure it's logically the right thing to do."
"I've not looked at the PR, but from my perspective addressing it would be nice to have:"
"I've not tested ~~with server gc (with multiple heaps) the same way yet~~, and also didn't run any perf tests with/without #code enabled, and didn't run any release clr tests."
"I've not thought of the API as being about perf, but rather about correctness, wanting to be able to launch child processes without worrying about what file descriptors the child might accidentally inherit and lead to problems in the parent."
"I've not tried the above suggestions, I'll give them all a go."
"I've previously asked that new overloads of these types of methods put #code _before_ the callback, to avoid this pitfall."
"I've pushed a commit with two unit tests which I'm not able to run locally (I got the projects to load in Visual Studio, but it throws the same exception as VS Code: #code), would it be possible to have them reviewed and run to see if I got them right?"
"I've pushed some changes, but it's currently in the situation where one test will fail if it is run immediately after the other."
"I've ran release CLR tests on armel Linux with this patch on top of f84d33 with different limits, there seems to be no issues with 4Mb/8Mb/16Mb and 512Mb heap hard limits (some tests fail with ""Out of memory""/""OOM"" and ""System.OutOfMemoryException"", as expected, or ""System.InvalidOperationException: NoGCRegion mode must be set"" when NoGC region is larger than limit)."
"I've rebased this PR on latest main, please take a look."
"I've rebased, but the issue is still there without using #code"
"I've taken a different approach to adding new nodes, instead adding a pass that modifies the HIR."
"I've taken a stab at what I think will be needed to fix it, pushed to the PR."
"I've tried about 30 things, but I can't get that working right now, and I can't find an idiot-proof guide to making it happy."
"I've tried it and yes I can read the menu text now (yay!), but for some reason the text colour for the unselected tab is now black!"
"I've verified that signing works for the Mac assets as expected, so we're good to go on that front (once the parallelization issues are fixed)"
"I've written several standalone analyzers and source generators in the past and have studied the Roslyn codebase a fair bit and wanted to try contribute with something, and this seemed like a good simple-ish first contribution."
"Ice Lake, Zen 3 and N1: #url"
"Ideally there should be no duplication of this code, hence it should be ""inevitably"" consistent."
"Ideally, this can be costed out and appropriate people assigned to help out to help drive this through in a timely manner."
"Ideally, we wouldn't introduce any new blocks after establishing layout, but for the time being, always placing #code after #code to create fallthrough -- effectively moving the #code branch up a block, and not introducing new branches -- seems to be a decent compromise."
"If #code contains a static, such static would be then placed under the LoaderAllocator #code, preventing AssemblyLoadContext #code from unloading."
"If #code has a type mapping, the type mapping of #code, #code, ..."
"If #code has to unwind C++ functionality, then this makes sense as it won't (yet) understand addresses that have been PAC encrypted."
"If #code is animating during screen transition, it will stay visible but will not be animating."
"If #code is not available because the LibC provided is too old - or if the syscall itself is not available, it will fall back to the previous method of reading from #code."
"If #code is re-added in a later generation, it's compared with the first element from the previous generation."
"If #code is updated in the future to support other kinds of transforms, someone will have to magically remember that this code needs to be updated."
"If #code were to be re-added to #code and peoples' extension methods were again to get usurped, then we're still forcing new and untested behavior - without warning - on code that was previously written and presumably optimized based on different assumptions."
"If a custom #code is registered after a #code method, the #code will be used instead of the custom #code."
"If a native AOT compiled application can lower its allocated memory, more scenarios that are memory sensitive can use it."
"If a valid height is set for the cell, we can use it as the cell's height after converting it to pixels."
"If after looking at where the boundary would be, we don't like it, we should close #url as ""not planned""."
"If an application is adding 5000 items to an #code currently it will invoke 5000 events, with this change it will only invoke 1 event."
"If an exception in a StylusPlugin didn't kill the Stylus thread the rest of the application would, generally, function well."
"If any application in the same app pool (only OutOfProcess supports this) was modified we would end up triggering our shutdown logic even if it wasn't for our app, and additionally we shut down the whole w3wp process instead of just the specific application."
"If any issues remain, I’ll be disappointed—but I’ll make sure to address them."
"If anyone can describe what is the layering of projection buffers and their content types that the VS actually creates, I could use that info to set up the buffers in the tests."
"If anyone has ever used the feature WITH the move-down option (like with IntelliJ or HotCommands), they would agree it's definitely the preferred choice most of the time."
"If anything, I've just unified it."
"If approved, this PR shouldn't be included in servicing releases."
"If apps write lots of preferences in a batch, blocking for each one could have a negative impact on app performance."
"If at some point the runtime adds a new parsing mode, or we switch to our own URI parser (similar to O#), this still provides value."
"If both #code's target the same property, the first data trigger will #code its #code, updating the value correctly but the second trigger will run its #code which resets the target property to its default value."
"if both the constructor of the nested class and the outer class are both accessible, and the user commits the Outer class using #code or #code, but in fact, the user might want to type #code."
"If code-style option is disabled, no diagnostic should be reported."
"If comment markers always go at the beginning of the line, which they might as well, then it's easy to achieve consistency with comment behavior."
"If customer-reported, provide the issue number.]"
"If extract-method is producing a bad tree, it needs to be fixed."
"If heap hard limit with segment is not fully correct on 64 bit on main now, is it safe to assume that it was correct before GC regions support was enabled by default (e.g."
"If hte original normalizer wasn't ensuring invariants, then i don't mind if the new one doesn't ensure them either."
"If I can confirm and resolve in SE.Redis, then the ""fix"" over here will probably just be a package-ref update."
"If I comment out that line, it carries on and loads the page as expected (albeit obviously without having done the scrolling!)"
"If I compare the TP difference with and without the #code flag using superpmi, I don't see much improvements (see data below)."
"If I copy the files (dll, tlb, manifest) manually it does work locally."
"If I find a good solution, I'll post it."
"If I generate the project from the template using the dotnet cli and then open that with VSCode, dev kit and the solution explorer, as well as Rider, work perfectly."
"If I had to apply the change in the latest #code next time, should I #code instead of #code?"
"If I remember correctly, I don't think WinUI, for example, ever uses Focus for a VSM"
"If I remember correctly, this is a for a feature that wasn't even needed in the end (with #url one shouldn't need to set feature switches to get size savings)."
"If I remove the #code option again, the compilation succeeds."
"If I replace the offending delegate #code with a normal method call that throws, the failure doesn't repro, so it seems specific to exception handling with delegates."
"If I say write a triply-recursive method, what does the inlining look like?"
"If I understand correctly, this logic for counting committed bytes by walking the heap data structures is needed for two things:"
"If I understand this issue correctly, I'm concerned there's even an exception being thrown here, whether it's in the background or moved to the main-thread."
"If IconColor is not null, the Foreground property retrieves the icon color and applies it to the icon's foreground."
"If IconColor is null, the Foreground property uses the SelectedForeground and UnselectedForeground values based on the IsSelected property and applies them to the icon's foreground."
"If it also helps with a performance issue on Windows around starting many processes, great, and if we can make it fast on newer versions of Linux, great."
"If it blocks until we get a response from both #code, then this might be problem here."
"If it doesn't exist or the data is unavailable or unrecognized, fallback."
"If it helps, let's walk backward:  what *problem* are you trying to solve?"
"If it lives in CodeStyle, it doesn't need to do that."
"If it lives in workspace, it needs to call IRefactorNotify after renaming."
"If it's in the #code handler, you can set it to handled so that the app doesn't crash, correct?"
"If it's method body, then that's a lot clearer as why the spans would be the same across edits"
"If it's not needed, it can be deleted, much like other templates do."
"If it's not otherwise used in the app, it's unnecessary bloat."
"If it's substantially simpler and not slower, we can use it."
"If MAUI team needs more devs, please tell Microsoft to hire new developers."
"If MslAltitude is unavailable or Android version is lower than 34, we just set the regular Altitude."
"If no preference is provided, the default order for that rule is used."
"If non-escape can be proven but stack allocation is conditional or not possible, the resulting object is still ""thread private"" and can be optimized more aggressively than if it was a general heap object."
"If not, can you fix the tests and merge conflicts?"
"If not, I will still have to put some work into this issue 😅"
"​If not, I would like to try to handle this by myself."
"If not, then nothing can listen to events from this event source until this bug is fixed."
"If nothing else, it should reduce the gap between the shipping config and what you are measuring."
"If one or more of the underlying tokens is associated with a long-lived token source, this will leak a #code and a #code (used by #code)."
"If point 1 moots this part of the change, I'd prefer this part of the change not be kept since this is the part I like the least."
"If point 1 moots this PR I think that's a good change to keep out of this PR, and it'd be nice to see it happen at the same time as IWorkspaceEventListener stopping."
"If razor doesn't want diagnostics for a file, wouldn't it just be simpler for them to not report diagnostics for the file?"
"If SelectionLength is greater than zero, UpdateSelectionLength is called, otherwise, UpdateCursorPosition is called."
"If so (would be interested in some context), we could also also add a direct dependency to a newer version in EF itself, rather than it being done in templates..."
"If so, can you please update the milestone of #url so that it isn't sitting in an old milestone?"
"If so, I am fine with taking this change."
"If so, I will clean up the branch for you to review."
"If so, I wouldn't expect the prior and current values to match up as you scroll."
"If so, the Razor compiler will definitely need to follow up (and maybe they already know that 🤷‍♂️)"
"If so, then something similar could be said about roughly **any** PR that doesn't pass an initial review."
"If so, there might be software that consumes them, even though .NET Core has not been able to output them."
"If so, we pass the SyntaxRemoveOptions.KeepLeadingTrivia flag, so that hte trivia is not removed."
"If so, we probably should rename all relevant APIs that use ""UseSiteDiagnostic"" to ""UseSiteError"" to reflect the fact."
"If so, you can help shed light on it."
"If some reference between projects is cleaned up, then not having duplicate references means incremental builds are now faster."
"If somebody passes in MappedFieldDataSize that is not aligned to MappedFieldDataAlignment, we are going to fail assert here: #url"
"If somebody subscribes to text changes for a SourceTextContainer, any time a change happens we update _currentText."
"If someone could give me a nudge for the test, I would greatly appreciate it."
"If someone had a real server, they could update the text file and use a local (or public) server to do testing."
"If someone wants an analyzer for this, then one can just be written."
"If something unusual is happening, like a composition in progress or disabled or read-only control, it simply ignores the command."
"If such method call is detected, and a temporary reference is being emitted, we avoid freeing the temp so it lives during the whole method instead of just the expression."
"If symbol resolution with #code worked here frequently enough that it would be acceptable to always try it first and only fall back to #code on failure, this method could be significantly improved."
"If telemetry is invoked through TelemetryLogger, the intent is that users fall into a pit of success, whereas changing telemetry through ILogger seemed too scary when I looked at this area when I first joined the team."
"If that is not the case, let me know and we need to create some."
"If that turns out to be complicated, then perhaps we can reconsider and do this first."
"If that's not a Roslyn file (say it's just a random .txt file), then we'll end up creating a SourceTextContainer that will now root the original snapshot, but won't do antyhing to update _currentText."
"If that's not the case, i care a lot less about these corners."
"If that's the main downside to that idea, then I imagine that the ""full, proper"" support could include #code switch to bring back the #code behavior to allow those applications to keep working?"
"If thats true, perhaps needs to be renamed to IgnoreMessage**_ForTelemetry_**"
"if the ""critical"" edge is low weight then seems like we'd prefer to split it and put resolution moves there (that is, it seems like we could build a cost model of sorts and decide which we prefer, the unique pred or the ""other pred"")."
"If the #code thread can enter the #code method, it means that the #code thread will visit the #code which will throw InvalidOperationException."
"If the ABI breaks are acceptable, I can do it in this PR or in a separate one."
"If the API is OK for LoongArch64, I will push the JIT implementation."
"If the application is in dark mode, capture the parent's windows message to identify the start of editing, and change the colour of the brush to match the parent's window color."
"If the application is out of memory, buffering into the file will fail."
"If the change doesn't involve a behavioral change, that's a particularly good thing."
"If the change here will be accepted, should #code work with incomplete members?"
"If the color is already applied to the FontImageSource, the UIImageRenderingMode is set to AlwaysOriginal."
"If the description is short enough, display it, as-is."
"if the design time DPI scaling is 100%, but the runtime DPI scaling is 200%, form size should be doubled."
"If the error isn't marked as handled after the event handlers are called, allow the exception to crash the Stylus thread (for compat reasons)."
"If the fields were otherwise of a size divisible by eight, there's no difference on 64-bit between an extra byte field and an extra 7 boolean fields; the size of the object will still be rounded up to the next 8 byte boundary."
"If the flow of input transparency is not specifically handled, the native views will be wrapped with a blanket interceptor."
"If the FontImageSource color is null, the method retrieves the color using GetItemIconTintColorState to apply the appropriate color based on SelectedTabColor and UnselectedTabColor."
"If the FontImageSource color is specified in the sample, it returns null and no need to update the color."
"If the Form uses AutoScaleMode.Dpi, then font should be rescaled."
"If the fundamental logic of #code would need to be changed, then this PR may not be necessary."
"If the issues are originally reported as warnings, then this PR will make sure they will end up as warnings."
"If the Label's Text property value is empty, it was unclear whether or not the Padding size should be reserved, so the current implementation reserves it."
"If the Label's Text property value is empty, the following implementation is required to ensure Padding."
"If the library isn't in the assembly directory, we try to load with the other specified flags just as before."
"If the method is managed to get inlined to its caller, with this analysis we may get rid of the heap array allocation."
"If the pass encounters a #code node, it will use #code to ensure any side effects of the tree will run before the runtime check."
"If the photo picker isn't available on a device, the library automatically invokes the #url intent action instead."
"If the preferred source or target partner is not adjacent (or maybe if no successor/predecessor is adjacent), then we should be placing after source or before target depending."
"If the relative links that have been changed to absolute are a deal-breaker, I'm happy to have just the first commit which changes the GitHub links into local links merged."
"If the ScrollToAsync method is called in the OnNavigatedTo or OnAppearing event, the Handler is null"
"If the source has only one successor, then placing after the source doesn't change anything, but if the source is a #code, then the worst-case scenario is we had some layout like #code, and now we have #code; we no longer have fallthrough into either successor of #code."
"If the status codes fail to satisfy the condition encoded by #code - #code, no compare will be performed, and the #code, #codeZF, and #code flags will be set to the _default flag value_ (DFV) fields #code, #code, #code and #code."
"If the target framework is .NET 8+, then it type-forwards to the built-in version."
"If the target has multiple preds, placing before target could potentially break up hotter fallthrough."
"If the user does want sample content / a tutorial, they can check the new ""Include Sample Content"" checkbox that was introduced in 9.0 and still get sample code as a starting point."
"If the user then clicks the **Home** tab again (which is already selected), the Navigating event will **not** be triggered, and no navigation will occur."
"If the user types 'await', the container needs to be 'async'."
"If the WPF repo wants to improve code formatting (make it more consistent, etc.) or variable naming it should be done in an automated way and all at once."
"If there are no alternatives that remove regressions from this, I'd prefer then to justify those by the benefits stemming from making delegates be placed on FOH and being better inlineable for lambdas, especially in AOT scenarios than to give up."
"If there are safe ways of making it faster/smaller/etc., that's great, let's do it."
"If there is a possibility (even if tooooo small) that #code is wrong, it shouldn't be auto completed."
"If there wasn't an overload that takes #code today, this wouldn't be an issue, as users would have to find out how to create a #code anyway and would then see the #code overload of #code next to the #code one, but that's not the case."
"If there's an issue specifically with the downcast, then that's something we should verify in a separate test that focuses on downcasting (and is named appropriately)."
"If there's anything else, then it'll just be small packaging issues."
"If there's no selection all Refactorings get changed to low priority, essentially causing CodeFixes being top, Refactorings bottom."
"If there's no way to update GC counters by walking the heap data structures with segments, then always keeping the counters seems the only way to fully support limits on 32 bit (including verification of counters and #code, which I'm also interested in)."
"If there's something more to it, then what other reasons might there be not to take that lighter approach?"
"If they do, then it's not safe to return or await on foreign those tasks."
"If they don't want diagnostics, can they just not report diagnostics for those files?"
"If they have, then they do not have users that work in vscode that regularly use the solutions they removed."
"If they were out of order (ie, callback before #code) then it did:"
"If this API appears, it may relieve the memory pressure."
"If this assumption is correct, then the suggestion will result in a less complex fix."
"If this change is not accepted, then #url will not be accepted as it will break just about every WPF application that uses #code."
"If this changes behavior in even the UI Test app, I want to discuss it before we consider this one."
"If this condition is not met, the method does not update the SelectedTextRange (i.e., the cursor position)."
"If this design is approved, I will implement the same for Visual Basic abstract syntax nodes and, if applicable, intermediate interfaces in the #code tree."
"If this fix is intended to be included in that release, please make sure it's merged before 4pm PT."
"If this is a new non-compiler feature or a significant improvement to an existing feature, update #url once you know which release it is targeting."
"If this is a one-time permanent move, then the location choice is good."
"If this is only a stylistic change, the category should be updated then?"
"If this is only adding #code like #url says, does this interact with the #code we set here?"
"If this is something we want to continue working on, could someone rebase this?"
"If this is taking time, it means someone didn't set #code on their assembly."
"If this is the cause of the regression, would it make sense to remove the entire #code block?"
"If this is the direction we go, I'd prefer if we explicitly mention something along the lines of the above somewhere at least."
"If this repo does not allow creating merge commits from the GitHub UI, use command line instructions."
"If true, the test passes (the control exists and have the correct is refreshing value)."
"If we allow the pool to contain sensitive data, then the stakes are raised, as it were."
"If we apply these changes, we should apply them to the TimePicker."
"If we are, treat the field type as if it's a reference to us."
"If we believe that there are any sections that need to be aligned, we should emit the alignment before emitting that section, like it is done for field data here: #url"
"If we bootstrap VMR (dotnet/dotnet) and then use that bootstrapped SDK to build the product again, that makes more sense."
"If we can supply the time to copy and fix the issue on our end, couldn't we just fix the issue on the lsp client side instead?"
"If we can't fix the reflection any other way, I would suggest we add that to the default settings for trimmer for Blazor instead."
"If we click to focus over the text area, the issue still persists."
"If we could come up with a sensible set of defaults that can be overridden (by the generator author, and then the user if desired) would that assuage your concerns?"
"If we did this, one of the items we need to still look at is if we can make pivoting on those template parameters more simple."
"if we had a test for that scenario, then why is it passing at all, given the bug?"
"If we had malloca-like API, I think this specific example can be converted to it as an optimization in Roslyn as well."
"If we have now our own analysis contexts that delegate to the compiler, we could simply allow a null diagnostic."
"If we introduce similar state for hash code calculation, we must do the same and move the entire code into the ExpressionComparer struct."
"If we keep using #code in #code or #code to load #code, then this API only loads the pure forwarder."
"If we make a change here, I would prefer to use a directory under the home directory (with a #code prefix) than to include the username in the folder itself."
"If we make your proposed change, the comparer would start to return false, leading to re-compilation and perf degradation."
"If we need to add it again in the future, we can do so then."
"If we need to enforce this in the compiler layer, it will be good for @github/roslyn-compiler to have a discussion about where to land here, and also probably best to wait until the feature-work phase is over for .NET 7."
"If we only keep two builds for pull requests, it seems like both should be debug builds."
"If we simply make all of these cases pass as self-referential though we need to be careful not to break anything - for example there's a bit that goes 'well, the type is self-referential, so we can substitute ourselves for it':"
"If we specify a #code parameter, the type could change to #code which would make the formatting possible."
"If we support enough of known types, we would cover most of the cases IMO."
"If we think that the issue is worth addressing, we should do that in its entirety."
"If we trust the initial layout then if source and target are adjacent then putting the block in between is the right thing; if not, presumably both source and target have other preferred partners and if those partners are adjacent then the new block should be placed out of the way somewhere where it won't break up any other important flow (though not necessarily at the end of the method / region, which is what I commonly see)."
"If we turn on semantic snippets now we might get a good portion of hate and rejection of them in future as ""something bad"
"If we wanna have a look at so called ""Microsoft's standard code format rules"", guess those would be mostly incorporated in standard tools such as Visual Studio and Roslyn analyzers, correct?"
"If we want to do that, we can remove the binder flag entirely: it's only set in two locations for this exact purpose, and both locations exhibit this bug: #url."
"If we want to expand on the behavior by creating a new design for typing #code within a non-async void-returning method, we can do so as a follow-up design in a later release."
"if we want, i guess we can add one for TestOnly?"
"If we were to implement this API on non-Windows, how are we going to document when this API helps perf and when it hurts perf?"
"If we weren't looking at the result, I didn't necessarily change it as most of this will go away when switching to generated interop."
"If we wish to maintain that, perhaps ClearCache(Compilation) should be removed so it doesn't claim to do cleanup that doesn't happen."
"If we're going to do #62384 later, I can just revert the last two commits."
"If we're not making that guarantee anymore, we'll need to stop using this helper there."
"If yes, I'd like to know what/how, because that would be a workaround I'd like to explore in the meantime."
"If yes, then it seems that limited 32bit support (same level as 64bit support before GC regions were enabled by default, even though there's a possible leak in accounting) can be enabled with this PR without verification logic and #code, and then we can further work on full support of accounting with segments."
"If you absolutely must use pooled buffers, use different pooled buffers for key material specifically vs."
"If you agree with the CLA, please reply with the following information."
"If you are dealing with a pipe, you can use an #code."
"If you are interested, you could consider opening a new PR after this one to also handle that case, or expand this PR to also handle it if you think that is manageable."
"If you are missing the focus states, then nothing happens when you change states."
"If You are signing this Agreement on behalf of Your employer, You represent and warrant that You"
"If you aren't sure about whether it's needed or want help filling out the sections,"
"If you call this API with default values, it does nothing."
"if you can't understand what I just told, I am not sure how I can help you."
"If you could write some tests to capture those as well, that would be incredible!"
"If you disagree, please provide the relevant information (including the answers to the questions given so far)."
"If you feel like this PR was the appropriate way to handle the issue, let me know and I will un-draft it."
"If you go from 4 items to 3 items, then going back to the 4 items results in the selection changing."
"If you have a different remote name, please replace 'origin' with the name of your remote."
"If you have concerns about specific code changes and their ramifications, by all means, please name them, that's actually very helpful for everyone involved."
"if you have questions, @github can (continue to) help."
"If you have such a project, and tried to add another project reference, it'd fail because while validating the new reference we'd trip up on the missing one."
"If you just parsed an invocation expression, the parser wouldn't create a conditional access."
"If you keep adding and removing items, does this list grow indefinitely?"
"If you need the scratch project thats based on both this PR and the other PR I can look into putting up a third branch that includes both PRs but for now I haven't bothered pushing it, would be more easy once the other PR is merged eventually."
"If you or someone else wants to help, the work could also be maybe be split into multiple pull requests."
"If you override the first, and say true, the later is never called."
"If you report calling the, it is simply sent to the ether."
"If you run the app, can you see if OperatingSystem.IsMacCatalyst() and/or OperatingSystem.IsMacOS() returns true?"
"If you run these tests with the live version of #code they all fail, if you have my changes they pass."
"If you search for uses of this #url, you'll see a few places where I've written tests."
"If you set the #code and #code variables to #code when targeting Linux, we'll get behavior consistent with today and still be able to use the CMake IPO support (which is useful for being able to turn it on/off for select targets, not enabling it on platforms where it's not supported, and getting target-specific required options added for us)."
"If you start with list of syntax trees #code, then filter #code out, you get #code."
"If you think the best option is to keep the code as is, feel free to close this PR."
"If you think this fix is not correct, you may want to undo it or run tests."
"If you think you need additional change, you're absolutly free to add more commit onto that branch / PR and go on"
"If you try to use #code and draw it to a #code then renders it to a #code, it still fallbacks to CPU render."
"If you wait synchronously for the ScrollToAsync method inside the OnNavigatedTo event, it will remain blocked."
"If you want me to squash commits, I will do."
"If you want this PR included in that release ,please make sure it gets a Tactics approval, a sign-off from an area owners, the CI failures are investigated, and merged before 4pm PT."
"if you want to change design, open an issue to discuss."
"if you want to come up with proposal how to merge bunch of these SupportXXX in IDE, we are more than welcome on those."
"If you want to focus on performance, great!"
"If you want to use that one in the subdirectories as well, you can refer to it directly via the #code that's in the repo's root directory."
"If you want, I can take a stab fixing all the issues in this PR though."
"if you wonder why we didn't do other way, please give us concrete example how we would have done differently."
"If you would like to explore playing tricks with overloading the fields, I think it would help to move all fields to Delegate in a separate prep-work PR."
"If you'd like to propose a new feature or change, please open an issue to discuss the change or find an existing issue."
"If you'd like, I can put this PR on-hold and work on getting layout working after LSRA."
"If you're looking to implement full-screen functionality for Android WebView video playback, you can use the following workaround."
"If you're referring to the failures in #code, they are most likely unrelated to your changes."
"ignore...so seems today we use #code on arm64, so with your numbers, seems like 30% improvement."
"IIRC we have some places we log ETW events via the logging thing that are _very_ chatty, and this would be a huge flood to the telemetry systems."
"IIRC, my concern was about the perf characteristics of the #code mode on non-Windows."
"IIUC, this is because of #url"
"ILC: error IL1013: Error processing 'name'"" is #108031"
"IMHO the problem is still there, because I can't handle the unhandled exception (unless I put in an unhandled exception handler which IMHO is nothing but a band-aid)."
"IMO, auto completion should never interfere with any valid code I want to write, regardless of whether it's a common scenario or not."
"IMO, we shouldn't."
"Improved performance by around 20% on base types, zeroed out allocations."
"Improved performance when tracing is active, decreased array allocations per each executed trace, smaller assemblies due to the function removal."
"Improved performance, cleaner codebase for developers."
"Improved performance, cleaner codebase."
"Improved performance, decrased allocations."
"Improved performance, decreased allocations."
"Improved performance, increased code base quality and type safety for developers."
"Improved performance, slightly decreased allocations."
"Improves performance of the #code function in #code, reducing allocations and improving the overall performance up to 2 times in some cases."
"In #code here, that logic would add #code to the inner build argument when #code is #code."
"In #code, we know how to do it, but in the non-#code case, we don't have a good way to do it, so we just don't support it at the moment."
"In 8.0 we don't need to actually ship this, since we haven't shipped a patch in 8.0 there is nothing to fix."
"In a FlyoutPage, the Detail page handles navigation and determines the toolbar's visibility state."
"In a FlyoutPage, The Flyout section contains a ContentPage, and the Detail section is a ContentPage wrapped within a NavigationPage."
"In a follow-up PR, I think we should increase this back to 0.01: I think a block is sufficiently cold if its normalized weight suggests it executes only 1% of the time per method invocation."
"In a next step, MAUI must make sure that all properties of #code are set (mirrored?) to the new #code instance."
"In a sense, it's a death by tousand cuts because as a MAUI app gets more complex, everything takes longer and longer to display."
"In addition to that, there are multicast delegates and marshalled interop delegates."
"In addition to the above, the implementation of the AlignVertical method and SizeThatFits method has been modified as follows."
"In addition to this now working generally, the #code event would fire for many other things - such as window activation - so we now get slightly better performance."
"In addition to this, should we also add an overload to #code that takes a #code, as the previous PR did?"
"in addition to type forwarding, it also needs an implementation for netstandard."
"In addition, it adds a Utf8 #code and #code without the unused #code parameter, to match how #code was implemented."
"In addition, note that there's no way to get a #code referring to the target object with collection initializer if we want this to work properly for all cases."
"In all cases there're no regressions and no asserts related to heap limit fire (with enabled heap hard limit some tests fail with OOM as expected, some tests work too long in debug and fail with 10min timeout)."
"In all three locations, it's indexed into and the result was explicitly cast to a #code."
"In an otherwise properly functioning application, the security of DataProtection does not rely on any of this."
"In Android, this method is not hit when orientation changes."
"In any case, better to be explicit."
"In any case, the scheme from #url would need a path that does not put the delegates on FOH to handle collectible assemblies."
"In any case, this is not a change we're prepared to make in this current form, though the discussion is appreciated."
"In benchmarks like SliceSlice, it barely matters since matches are relatively rare."
"In benchmarks using the released #code, it is about twice as slow compared to \main\corerun.exe."
"In both the orignal and PR, the XAML escapes are clearly removed."
"In case this is an important to know for the user, the docs link will contain info on which IDExxxx rules use this specific option."
"In case where a heap hard limit is not provided, I suspect the counter overflowed."
"In cases where we explicitly add this flag (absolute path or looking in p/invoke assembly directory), we could end up specifying an incompatible combination if other #code flags corresponding to the #code flags were also specified."
"In CI, this test is failing on osx with your changes:"
"In contrast, on 32 bit virtual address space size might be the same as available physical size on device (e.g."
"In dataprotection, key material would be the KDK, KEK, and individual decryption + validation keys."
"In debug mode, and release mode, it seems the loads are a bit faster in pages Appearing, not dramatically faster, but seems faster."
"in either event, you are the best person to help explain things, and this conversation is a suitable palce to do that."
"In fact I'm not sure what operating system needs that fix (macOS, Linux, and illumos all have #code)."
"In fact, I think #code is never true for an interface member."
"In fact, this case prevents us from pushing UI automation further, since we use context menus very often."
"In fact, we don't interleave 1 code page with 1 data pages, but we use a sequence of code pages followed by a sequence of data pages."
"In fact, your change assumes that the destination is more likely to be not big enough which is not true."
"In general doing this sort of thing requires ""field-wise"" escape analysis which is something I intend to work on, but it seems likely that just handing #code might be an easier and valuable special case; a span local has at most one GC reference inside it, so we can likely conflate the object and the reference and just leverage our current analysis."
"In general, it is not safe to block on the completion of a Task which is not known to be already completed."
"In general, it leaves the behavior of valid unverifiable code as undefined."
"In general, users using functions on EF.Functions take responsibility for what they do - it's a relatively direct way to specify a SQL function invocation, and there's not much point for us adding validation in EF if the database will error anyway."
"In general, we want to keep the APIs consistent across Enumerable and AsyncEnumerable."
"In general, while this type of a swiss-knife project is a good place to start as everything is readily available we recommend that the users #url."
"In GitHub search, I only see references to Condition in linker tests."
"In hindsight this would have been good to pull for 17.0 as a cleanup, but I'm not sure if we're stuck with it until next major rev."
"In hope it would solve some of the deadlocks, by introducing #code which I believe is #url"
"In hte new system, there are smaller maps that are trivial to keep up to date."
"In legacy UI, if the renaming operation takes long time:"
"In long term, I just want to use #code (and probably I should update this PR to do that) like the way we do in #code."
"In main, it's using native helpers."
"In MAUI we're used to #code marshaling, so when doing #code we give for granted this will be automatically marshaled to the main thread which is true for #code event."
"In most cases this is not actually a problem, as the compiler inserts casts to ensure that the type of #code and #code is matching, but apparently it does not take care of the #code operator :\"
"In most cases, Owin abstraction is used only to **get** the data in the specific format (i.e."
"In most cases, this is fine - buttons, labels and images do not have content."
"In most databases, equality comparisons can take advantage of indexing and inequalities cannot."
"In my experience, this PR would have been refused in a lot of other repos (And probably in dotnet/runtime and WPF follows most of the guidelines of dotnet/runtime)."
"In my first commit, I created all the files I think I'd need."
"In my humble opinion, this is the right thing to do to constrain it at zero, it fixes the immediate problem but also the other options will pass zero or greater; #code is also constrained with #code's #code."
"In my mind, the two serve different purposes, each with their own benefits."
"In my opinion a fix for #6862 affects only new projects that have started on NET8, while issue #8679 is affecting all projects that started long time ago on NET Framework, consist of large code bases and are currently being migrated over to NET8."
"In my opinion, removing #code is the very last step here."
"In my opinion, the language rules are fine and there is no need to change them."
"In my opinion, what sounds like a better solution, is the ability to hover over individual exceptions, to see the relevant details for said exception."
"In my previous #url, I noted that the header text has moved slightly to the right."
"In new UI, if the renaming operation takes long time:"
"In order to approximate the StructLayout with explicit offsets, I had done #code around all the struct/union definitions."
"In order to avoid any potential for ordering differences and to make the code easier to review, I opted to leave existing callsites essentially untouched: I just explicitly specified parameter names for calls, so that the current execution orders are unchanged."
"In order to be as safe as possible, I created a separate #code which provides API to rent and return byte arrays."
"In order to do this, a dedicated unit test was added."
"In order to implement #code I extended #code, which has the unfortunate side-effects of changing unrelated tests (adding a column in several #code queries)."
"In order to support Per-Moniter v2, we will use the DPI in per window and we do not get the dpi from desktop once."
"In order to support the drop-down items on the OK button, #code and #code were implemented (together with #code for customizing the Cancel button)."
"In other words, I think you should already be able to provide support for this feature without needing to add these specialized EA interfaces :-)"
"In other words, if there is any chance things might be broken, we should not do that."
"In other words, if we have IR like"
"In other words, profile data must suggest a block executes less than 0.01% (not 1%) of the time to be excluded from reordering."
"In other words: customers are in no hurry to upgrade from old versions, whether on Azure or not."
"In our .lcl files, strings that are translated contain a #code tag that contain their translation in the appropriate language."
"In our resx files, we have an english file and then 13 other language files that should contain the translations of the strings in the english file."
"In our templates, there are certain key terms such as product names that we want to make sure are not translated."
"In particular it brings back the problem with ""ValueTuple in a signature of a reflection-targeted method is surprisingly expensive""."
"In particular, Redis (consumed by me ""as a service"") is using the Bitnami charts."
"In peoples' custom methods, they used #code or just iterated - either way being WPF-safe - whereas the methods being proposed for #code did not."
"In practice, it doesn't seem likely to make a difference."
"In principle you are right - within the lambda, it's expected to see the same instance of ParameterExpression as the one in the lambda's parameter list, wherever that parameter is used (IIRC that's what the compiler produces, in any case)."
"In profiles, we spend a sizable amount of CPU time during startup inside of the implementation of #code."
"In rare cases, when typeload exception was detected during compile time, we were emitting code to throw this exception at runtime (this was behavior introduced in net9)."
"In realistic application, that generates too much traffic for the browser profiler."
"In reality, however, it should be fine."
"In reality, ObservableCollection itself should be updated to expose ranged operations, and this is one of the most-requested .NET features for years."
"In response to #34078, this removes the copy/paste issues and instead uses the #code variable to populate everything."
"in root, #code works in my #code branch, but does not generate the missing artifacts; oddly #code *does not* work in my branch, failing with a build.ninja failure about a missing C compiler; which is weird because it works everywhere else, including the coreclr build"
"In short, a conversion to a delegate type does not cause the expression to be treated as ""invoked"", although we process it somewhat like an invocation."
"In SignalR docs, ""hub"" refers always to the server."
"In some case the JIT may be able to prove that the zeroing is not necessary, if all elements are written before being read, but that's a ways off (if ever)."
"In some scenarios, this serialization/deserialization cycle can occur multiple times over the course of one response."
"In some sense, our users already understand the concept of namespacing via prefixes and if we want to define a predetermined namespace for the MSBuild options, it makes sense to have it reflected in a prefix for the property."
"In source generators, perf really matters, so this could be a worthwhile alternative."
"In standard Aero2 theme, using a #code (as #code has no template on its own), the order of the children is:"
"In such case, I'd assume Reflection perf regression to be even less of an issue since it's much worse there already."
"In terms of 2/1/1, mmap will probably fail anyway with smth around a bit higher than 1.5 Gb for SOH+LOH+POH, so higher border for SOH/LOH/POH heap-specific limits is just to prevent overflow of SOH+LOH+POH."
"In testing #url I had trouble finding which CustomAttributeProvider was failing, so this PR adds more info about which provider is causing the test to fail."
"In tests that I've done, on some apps I've seen significant reduction in used GC heap size (Private_Dirty) around 33%."
"in that case, i don't think we should offer names on the type name."
"In that case, I think checking against ""/proc/self/mountinfo"" file exists is enough for a fallback mechanism, yes?"
"In that case, subtracting the reserved portion in the size growth estimation is inappropriate."
"In that case, the correct place to look is the CompilationOptions, which is why I'm also working on moving the diagnostic settings to the compilation options."
"In that case, the dev has to manually go and add each of the projects to the new #code file or may even just be confused and think that it didn't work, since the #code (and solution explorer) is just empty at that point."
"In that case, the term “You” in this"
"In that change, I proposed a testing scheme by validating the number against the actual heap."
"In the #code method, when returning null for #code, the method requests:"
"In the above figures, I've disabled both on those on X86."
"In the absence of a proof of correctness, it is never safe to assume that blocking on a task completion will work."
"In the absence of a SLN file being generated, it will look in the primary outputs for .csproj files (or recursively look on disk if none specified) and manually add each project to the generated solution."
"In the AdjustPosition method,  the move value is calculated when CursorRect.Y is less than topBoundary and CursorRect.Bottom is also less than bottomBoundar, which lead to unnecessary scrollling."
"in the BindingListCollectionView, but I am not sure if all of these really are required."
"In the case of a rounded rectangle, the stroke thickness is added to the measured size during each #code call."
"In the case of something like SunOS, where the symlink is represented as a binary format, how should we handle it?"
"In the case of string and and numeric suffixes, they affect the type of the expression (#code instead of #code, #code instead of #code, etc)."
"In the case of the Rectangle, everything is applied to the background of the Shape equally."
"In the case where the selection starts at the first char on a line, the selection changes to include the comment markers at the start."
"In the cases where we're now doing less inlining, the OSR loop's execution count is less than 100x the method call count; the opposite is true for cases where we're doing more inlining."
"In the context of PR, trying to solve an issue related to file formatting during pre-commit hook."
"In the current change, this diagnostic doesn't seem to come up."
"In the current implementation, navigation using Push and GoToAsync works as expected, but other navigation methods do not trigger ApplyQueryAttributes notifications."
"In the end, telemetry takes part in the logging system, but it also exposes itself to callers that just wish to do telemetry through the TelemetryLogging class (not TelemetryLogger)."
"In the eng/build.sh and eng/build.ps1 scripts, provide the following arguments:"
"In the event a PreviewWorkspace fails to be released, it will no longer be GC rooted through this event.~~ Moved to #68062"
"In the event that there isn't, it means it's an expected exception, and it should IMHO just be dealth with the right way and swallowed."
"In the Fluent style, ensure that the #code property of buttons is set to #code."
"In the former case, that's #code, so no caching can be performed."
"In the future, most of the memory used during compilation should be cheaply allocated from a compilation memory pool."
"In the future, this functionality may be useful for churning the initial layout into 3-opt to discover new local-optimal layouts."
"In the fuzzer error, because validation is skipped, the second segment will be written anyway which exceeds the memory stream length."
"In the graphics view, the background color is currently applied directly to the View element."
"In the inner-loop sourcegen, it *should* be a matter of implementing the safe marker injection, just like all the other terminating operators which are currently missing.."
"In the interest of finally getting moving quickly and finally getting this merge, I'll do whatever fixup is still necessary and push commits on this PR."
"In the latter case, i can simply see that it's some Method that's being called, meaning it's code likely directly under the control of this particular feature, and not subject to the caller to control teh behavior of."
"In the latter case, that's #code which is correctly replaced by #code, and #code can be reused."
"In the meantime, do you have suggestions on how I might test this change in an automated way?"
"In the meantime, we will investigate this issue further and explore alternative solutions."
"In the new SkiaSharp v3.x, this has been split into #code and #code objects."
"In the new year, I'll look at cleaning this up, sorting out the tests etc."
"In the OnCreateDialog method, #code is used to create the dialog, and its SoftInputMode defaults to #code."
"In the other commits, I've just cleaned up some CAS remnants (#code*/#code* methods/properties) from #code, that just unnecessarily complicate the code these days."
"In the overridden method of OnConfigurationChanged in MauiAppCompatActivity.Lifecycle, we invoked a ThemeChanged event, subscribed to it from the handlers, and called the UpdateBackground method."
"In the past we told customers to ignore it, but it's better to just fix it."
"In the past, what we did:"
"In the PBT case, we have to use a pre-processor statement to comfort NetFX scenario, which will later need naming-styles suppression."
"In the QuerySqlGenerator, we effectively no-op most casts except for if we have a convert to string."
"In the Shell, when the Tab.isEnabled property is set to false, the tab should be non-interactive and prevent user interaction."
"In the trace, 37% of total allocations occurred in #code."
"In the ViewCellRenderer class, the platform view was being recreated for each cell without properly removing the existing parent view (i.e., the ViewCellContainer ) before attempting to add the new view."
"In the VS 2022 new dark theme, Shell colors are also from the same palette."
"In the WebView control, the URL validation logic in #code has been updated to replace #code with #code."
"In theory, yes."
"In these cases, we need to fallback to this Roslyn implementation."
"In this case I am not looking for a representation of the C#/SQL conversion, but rather the (SQL) type of the #code expression; I would like to use in order to preserve the same type when converting the expression to #code, but AFAICT this is something that can't be done simply using #codes, as they don't really compute the type of the expression."
"In this case, #code is called a lot for every #code:"
"In this case, #code supports enumerating the registered pairs, so there's no need to explicitly maintain a separate list of weak references to index back into the table."
"In this case, a developer could do one of:"
"In this case, if we use #code in #code to load #code with its full path, everything works fine."
"In this case, it's not obvious why we are having these binaries pulled along."
"In this case, the bug here has nothing to do with fixed-size buffer indexing, which was added in C# 7.3, but the simple fact that the unnamed temporary here is being incorrectly referred to as moveable, when it is actually supposed to be fixed."
"In this case, there is a failure to update the path to include a #code filter."
"In this change, I added some counters to estimate how likely we fail to use the reserve portion, and therefore use that to discount the reserved portion for subtraction."
"In this example, it locks #code and then uses the indexer for #code which in your changes now locks #code."
"In this implementation, both theme changes via button click and mobile system theme changes work correctly."
"In this particular case it isn't in the docs that I can find (very unusual), just the headers."
"In this PR, I have fixed the Button styles to use the Button control brushes correctly."
"In this PR, I'm restricting this further to:"
"In this PR, my goal is to fix the issue without introducing any new public APIs."
"In this PR, we have divided the file changes from that PR into smaller groups and included test cases for the affected areas to ensure proper functionality."
"In this PR, we have divided the file changes from the previous PR into smaller, more manageable groups and added test cases for the affected areas to ensure proper functionality."
"In this PR, we will be updating the size of the overlay after"
"In this situation, we either have to rewrite the entire #code or use other tricks instead of conveniently creating a derived class."
"In this stage, the implementation does not account for compilation races between multiple threads."
"In this test case, the button was added directly as the content of the page without any additional properties."
"In VS 2022 the setting is called ""Use previews of the .NET SDK"", helping easily searching for it through Ctrl+Q and Ctrl+E in the options window."
"In Windows, implementation property for IsEnabled property is not handled."
"In WPF when there is a grouping, narrator announces the name and position of group, then announces the position item and size of the group."
"In WPF, RenderTargetBitmap (also RTB) currently only supports software rendering."
"In Xamarin using #code literally changed the performance of our app from ""laggy"" to ""snappy"" on Android :)"
"Including both .NET 9/main vs PR benchmarks, to show improvements in #9683 / #9697 in perspective."
"Increased performance, cleaner codebase for developers."
"Increased performance, decreased allocations, cleaner code for developers."
"Increased performance, decreased allocations, less static memory."
"Increased performance, decreased allocations."
"Increased performance, faster startup, decreased allocations."
"Increased startup performance mostly, but also when dynamically creating triggers at runtime and obviously everything related to ContentPresenter, Validation, ItemsControl templates etc."
"Indeed, the former is simply a *scoping* mechanism to help keep clutter away from my containing class."
"indirectly from .NET Foundation, a perpetual, worldwide, non-exclusive, royalty-free, irrevocable license"
"Initial check doesn't show a pathological problem - that isn't conclusive, however, plus I'm using ""current"" (2.8.22) rather than  the 2.7.27 which M.E.C.SER uses; will re-run in a moment with that version:"
"Initially, after clicking the first button, the sample displayed an empty white screen, blocking access to the second button."
"InlineArray can't be trimmed and #code accepts an #code anyway, so instead of passing in the private #code field I just pass in the grouping."
"Instead of a #code + #code, we can do the whole thing with a byte-based permute #code."
"Instead of changing the ignore (because now you run the risk of pulling in a Logger.Log that was actually meant to be Trace because its very verbose), may be what we want is:"
"Instead of covering things up, we address them at an appropriate layer."
"Instead of relying on the default implementation, we can introduce a custom solution that uses an action sheet within the modal navigation class."
"Instead of specialized helpers that check constrains and codegen/debugger/etc needs to map to the constraints themselves, there's just one helper that checks all constraints relevant to the runtime."
"Instead of throwing there, we emit diagnostics when the type is invalid."
"Instead, have SyntaxListPool keep a pool of it's instances and require those objects to pull from that pool."
"Instead, I created a wrapper type #code which initially stores just the string representation of the URI (exactly how #url)."
"Instead, I think first the proper fix would be to ensure this code doesn't throw, so there's nothing to catch."
"Instead, I wonder if it would be worthwhile to iterate the blocklist in RPO during a late flow opt pass, and run #code for #code candidates that aren't immediately succeeded by their #code target, implying that cloning the condition would enable more fallthrough."
"Instead, it assigns a null value to the background, which causes the space around the items to be unclickable and prevents the hover shadow effect from appearing."
"Instead, it uses SelectedTextRange to manage the cursor's position and selection."
"Instead, its type is changed from #code to #code by the #code."
"Instead, let's just expand all #code into #code and then convert back to #code where profitable."
"Instead, the background color should be applied only to the drawable area."
"Instead, the problem can be dealt with by putting the JNI function in a"
"Instead, the scroll position always remains at the start and does not align the SelectedItem with the center or end of the list when using animation."
"Instead, the scroll position always remains at the start and does not align the SelectedItem with the center or end of the list, especially when using it without animation."
"Instead, this PR renames the original #code to #code, keeps it internal and adds public #code and #code."
"Instead, we added a UI test with assert validation to ensure the fix works across all platforms."
"Instead, we can roll our own here and avoid both of those allocations"
"Intel Core i7-6700 CPU 3.40GHz (Skylake), 1 CPU, 8 logical and 4 physical cores"
"Interesting, looks like we use run-v8.sh in dotnet-linker-tests."
"Interestingly enough I can only reproduce the behavior on our final environment (Suse CloudFoundry), not locally on Windows nor in WSL nor aspnetcore-runtime-deps images."
"Interestingly that bug is only triggered when the _client_ runs on said Suse CloudFoundry environment and only with M.E.C.R @ 9.0.0, not with 8.0.11 (both regardless of SE.R version, i.e."
"interestingly, #code seems to suffer a weird regression **only** on net7 (fine on net6 and net8); I propose to ignore net7, and I'll re-run the benchmarks only on net8 since this doesn't feel like a backport thing (I'm very intrigued if anyone knows what this regression may be - presumably a JIT change around branches):"
"Interestingly, the fact that there may be duplicated code between distributed cache and output cache came up separately, and may be a parallel motivation for this as a change."
"Interestingly, the initial issue that prompted this fix in 2013 (linked in the changed #code attribute below, even asks why a diagnostic should be reported in this case anyway."
"Internal validation run passed, so this is ready for review."
"internally, at the link time."
"Internally, the Pan method use DragCoordinates, so this changes also fix **Pan** in Catalyst."
"Interpreter: 1ms, skip rate between 200-500 sample points."
"Introduce a feature switch that when set, fully restores the original NET Framework/NET6/NET7 behavior."
"Introduce a new type, #code and move the new methods there."
"Introduce a repair phase that runs profile synthesis if the profile was marked inconsistent at some point, and call it at the end of the JIT frontend."
"Introducing complex type json support will reduce the need for using #code to store JSON, but it will not eliminate the need for it, so it should be supported as well"
"Invalidate the MauiTextBox attached properties on size changes, During the Loaded or when Visibility is toggled, This ensures the VerticalTextAlignment is correctly reapplied to maintain the updated state."
"Investigate if a TZ database is loaded for #code and if so, can MAUI use #code instead."
"Ironically, I think the last two minor releases for VS we've had to bring back -vs-deps both times, so I don't think it's entirely going away soon."
"Ironically, if you *are* seeing a problem, I had a conversation earlier"
"Is htis draft, or ready to review?"
"is not safe to do when a is a constant or parameter null value, because it evaluates to true IS NULL (two value logic)."
"is simply the type mapping of #code, even if #code is an #code and #code is a #code."
"is special in the sense that it contains one symbol which must not be hidden,"
"Is the intent of this #code block to break early if there is an unexpected token, to potentially improve error recovery?"
"is the result, not what is in this PR 😉"
"Is the System.Drawing.Common dependency causing issues, even though it's not a runtime dependency (only referenced from an analyzer)?"
"Is there a better way to check if a button has been clicked than to set the text, and then check it in the test case?"
"Is there a reason why we're not keeping lazy-init, just making it TS instead?"
"Is this acceptable, or is something lower-level expected for this?"
"Is this an unacceptably bad performance problem and if it is, are there any other reader-writer style syncronization primitives available that try to prevent starvation of the reader side?"
"Isn't it a ""feature""?"
"It also creates consistency with #url, as well as #url."
"It also ensures compatibility with both tablets and phones, supporting immersive mode on Android devices."
"It also introduces checks on the primary and foreign keys to ensure it only uses single #code column keys for Dataverse as the metadata can expose various other internal keys of different types which break the code generation, such as a foreign key of a string type referencing a primary key of a uniqueidentifier type."
"It also removes #code from being #code, which means that currently the null check itself can never be optimized out unless I've missed something."
"It also removes the dotnet_bot.png that most of us always forget to delete, since no app will actually include it in the end."
"It also says ""Failed to upload results""."
"It also sounds like if we make this change in post 3.0 timeframe that the documentation will need to be updated, correct?"
"It appears that determinism in the crossgen2 compiler is broken for x64 to x86 builds, and there is a fundamental problem with composite R2R causing lock order violations?"
"It appears that the text has shifted slightly to the right, possibly due to the style we applied to the command bar."
"It appears that while testing in the release/2.3 aspnetcore repo, Microsoft.NET.Sdk.Razor SDK does not bring in all the properties and targets from Microsoft.AspNetCore.Razor.Design and Microsoft.AspNetCore.Mvc.Razor.Extensions, so this PR manually imports them into the RazorPagesClassLibrary test project."
"It appears the type constraints now appearing in the output were explicitly requested, but ended up dropped from the output due to the way containing types are visited."
"It appears this system already caches diagnostics, but wasn't using those results for partial file analysis."
"It appears to me that this is not just a unique Picker issue, but an issue with changing the #code in general."
"it ask each author to opt in, and IDE specific case is not passed in to compiler size."
"It better matches the Windows 11 styling, and just looks better (in my opinion)."
"It certainly sounds like Andy's change should address this, since #code is a specific target in the writeup (#url"
"It creates two HRESULT helpers to provide compatible throw behavior for existing code (PresentationCore threw things one way, other assemblies threw a different way)."
"It currently cherry-picks the ref-struct tokenizer from #9364, but it is directly dependent due to several changes over those previously done."
"It def doesn't need to run with any special priority, and there's no special command to invoke it."
"it definitely is when encountered, but I imagine the same is also true for #url @github mentioned in your PR if we opt not to add parenthesis."
"It definitely seems like a general purpose need, but I guess I'd be interested in seeing how it plays out in a specific scenario before making a shared one."
"It did not reproduce with the bot, it does not reproduce on other devices either."
"It does make sense to use #code to control memory usage under 32 bit platforms, and I can work with you to get this done."
"It does, nice catch."
"It doesn't really make sense to me that ""when X becomes false, set undo Y""."
"It doesn't seem right to me to just ignore #codes here; better would be to figure out when/why #code is being passed to this method, and fix that."
"It expects a single added item, which will silently break if you remove the validation without changing this code."
"It feels like it would make the sequencing most ""standard""."
"It feels like we should be having this sort of design discussion in the issue, and not in a PR."
"It feels more consistent with things like ""remove unnecessary imports"" diagnostic to make it via shims in the EA."
"It for sure can be running as ""normal"" analyzer, and as Brian suggested, we can setup some timeout for those so they don't affect perf too much (and they way they're implemented now, they will be affecting tooling perf unfortunately)."
"It includes type forwarding for #code in #code, updates the documentation in #code to include #code functionality, and adds corresponding test cases in #code."
"It is 15 and the height is 64, so about 0.23 or about a quarter of the height."
"It is a change to a public type but such changes have been done previously in runtime, see for example #url."
"It is a point for discussion though, I do not feel strongly about it, I'm happy to remove it if we feel it should be a blocker for the PR itself."
"it is an optimization that is legitimate on SQL #code, but not on C# #code for nullable #code (for non-nullable #code this optimization works on both ""equals"" notions)."
"It is localized and pointer arithmetics on base byref is not used, which I assume is your main concern."
"It is not perfect, but it prevents the exception problem and improves the behaviour overall."
"It is okay from a memory perspective because #code will decommit, but the bytes are wrong."
"It is okay, if there is a completely different approach that should be taken up."
"It is particularly efficient optimization here since the struct is full of managed pointers and ain't blittable, which takes considerable time to track back and forth for a simple update on one property."
"It is pretty old, I mean by age."
"It is quite possible that there is nothing to optimize there, but it is worth checking, I think."
"It is through a ""poor-man's COM Aggregation"" implementation in the QueryInterface implementation."
"It is true #8712 introduced an inconsistent behavior, preferring the backwards compatibility over behavior consistency."
"It is working properly if we add items directly to the ListBox, but failing when using data binding without the update."
"It isn't related to threading, it is just that I missed one call site to #code that I need to change to make sure the committed byte counters are decremented."
"It logs these issues if they are missing other labels apart from ""untriaged""."
"It looks like ""Use collection initializer"" uses SyntaxFactory to produce the initializer node, where the start opening curly brace #code has elastic trivia."
"It looks like #code uses #code, and if that isn't defined it uses #code."
"It looks like majority of changes for existing tests cannot be explained by intent to ""Avoid generating arbitrarily long pattern examples""."
"It looks like the code does it correctly, but I am too unfamiliar with the codebase to tell if this is the ""right way to do it""."
"It looks like there are a couple places still using non-recursive interfaces in MarkStep, for example in #code."
"It looks like this is because the RoslynPackage was not loaded until I opened a file, and telemetry is only initialized once the package loads."
"It looks like we need more test cases to move the bugs that only appear in the bootstrap tests to the unit tests, where bugs are easier to be debugged."
"It looks like you are using #code helper in added unit tests, it is using pretty old target framework, which might miss some of the recently added APIs."
"It makes a small subset of the events available in all _DEBUG builds, which provides a build check in CI without overwhelming the stress log or runtime."
"It makes the GC to do more work, makes GC pause times worse."
"it means ""run for Intel (Xeon) and Arm64 (Ampere), with profiler and with the given BDN args""."
"It means that people can use the more modern/idiomatic patterns, without worry about a perf cliff."
"It means that unless the #code is on (#url), this feature would not be available."
"It means that we cannot leverage all the work that HasRefactorings deos (in terms of warming up compilations, etc.) that happen externally."
"It might be argued that it is not common, but will be really frustrating when happens."
"It might be useful for someone from the JIT team or the VM team who is familiar with the Windows ABI to review this, too, for knowledge sharing"
"It might have false positives (some calls like #code might be marked by the heuristic as dangerous but they are not), but it shouldn't have false negatives."
"It might make sense to put this in .NET 9-only, or just put it in the project template."
"It only uses the #code to select which format it needs to use, but you can't customize that."
"It prevents us from doing a diff review, and means we have to start from fresh again."
"It prioritizes the detection of one-time codes, which can affect the display of password hints."
"It probably should also be called just #code, or #code or similar, like the other properties who have the same behaviour (i.e."
"It returns the symbol for parameter #code for both the #code and the named argument, I think."
"It returns void, so it should write everything or throw an exception."
"It says 0 failed, 49 passed."
"It says ripple and button, but the PR is for iOS and Done."
"It says there were test failures, for example here: #url"
"it seems like if you want to actually delete the region when decommit succeeded, the check for #code is backwards, because if #code is true and we are not using large pages, #code is false."
"It seems like other templates basically pivot the entire _template_ based on a parameter which keeps things neatly separated, vs right now we have a bunch of #ifdef type logic in one giant template."
"It seems like this is something we can add later if there is a demonstrated need, particularly considering that this future addition would not remove any APIs being provided by netstandard2.0."
"It seems reasonable to me, but I'm wondering if there are other, more full featured solutions that could possibly cover other scenarios as well."
"It seems suboptimal that we run #code before layout, and the optimization is dependent on knowing if the #code block falls into one of the #code block's successors."
"It seems that mark arrays are the only known bug in accounting with segments, so what do you think about reviewing and merging this first, and then focusing on mark arrays?"
"It seems that this can benefit both 32bit and 64bit, so maybe it's better to do it separately for both after finishing this one."
"It seems to have an adverse effect on MinOpts though, because splitting the tree will often spill and there aren't any optimization passes running to clear up these spills."
"It seems to have been introduced in .NET 7, I've created an issue on #url."
"It seems to me that all of the bindings should be unapplied first, so all connections to the old context are severed, and then all the bindings applied with the new context."
"It seems to me that all the current uses of #code have #code on their V256 branch, which indicates they do not need the additional guarantees that #code provides (around between-lane shuffling working), so I don't think there is currently spot we should be using it in dotnet/runtime currently, unless I've missed one."
"It seems weird, but want to make sure that this doesn't impact anything else"
"It should be possible to embrace the investigations and efforts of the wider community in addressing low priority issues which no-one else here has shown any interest (this issue, sample repro, and work around were clearly described over 2 years ago)."
"It should result in _double_, I believe."
"It sounded like a paradox, why we wanted to keep the free regions when we wanted to optimize for space?"
"It sounds like a thing that needs to be decided together by the IDE team and the Roslyn team, rather than an outsider."
"It sounds like there's no expert to ask, but maybe we could have a feature flag in case it turns out to have been a mistake?"
"It takes 300 lines for 4 functions, the function #code can be written within 70 lines with the comments, using standard conventions, with brackets, while it currently takes 160 lines."
"It takes a very different approach, and is JTF aware:"
"It timed out, but no dump 😭"
"It touches on valid unverifiable code here and there, but it is very far from having a full precise definition of valid unverifiable code."
"It was a leftover from la64, which was a legacy from arm64..."
"It was an optional goal of the change, and I'm happy as long as the performance of this hot path improves."
"It was compiled unconditionally both into #code and #code, though the functionality is not needed in both assemblies."
"It was done using the rename feature, with partial automation of the code fix."
"It was probably used in the past to improve performance but since then the JIT has improved and is faster than custom memcopy, thanks in part to SIMD."
"It was realized awhile back that we screwed up our implementation of VisualStudioWorkspace, since we just override the first method."
"It was supposed to go into 16.8 and I forgot, but 16.9 seems good."
"It was very much a fight against tooling, and severing the project references just cleans things up nicely."
"It wasn't approved as windows only, though, was it?"
"It will currently only specialize for the most frequently seen type so if a given use site sees a variety of collections and no one type appears more than about 30% of the time, we won't optimize at all."
"It will include initialization of Application and Window, switching ThemeMode, combination Application and Window ThemeMode properties."
"It will not take months, it will take weeks."
"It worked on iOS before, so I didn't change anything..."
"It works already, but not sure a) how to go about writing tests for it, and b) if we're ok changing the touched file logger."
"It would also be good to have scenarios that put the #code on the last element, not the first element."
"It would be convenient if we could run this as an intermediate step of the new block layout, but since we intend to run the latter after lowering/LSRA, and #code operates on HIR and clones code, that doesn't seem like a possibility."
"It would be great if you can rebase this change on top of that, test it on some 32 bit platforms and see if that still works?"
"it would be great to get feedback, particularly from"
"It would be more precise to factor in the predecessor edges' likelihoods, too -- for example, if one predecessor block is marginally heavier than the other, but is far less likely to flow into their shared successor, the latter seems like a better choice."
"It would be nice though to have this doc checked in before that, even if we just delete it as part of the change to remove -vs-deps."
"It would be nice to always throw the same way, but that would change exceptions that currently get thrown."
"It would be nice to do that in .NET 10 as well, but there may be some benefits to wait a release before deprecating."
"It would help me and my app a lot, if this would work again, because it breaks some UIs, and I have not found a work around."
"It would make more sense to me to implement what we wanted to do originally here: make a platform-specific (or setting, if it is relevant to more platforms) that allows to customize this behavior for both the #code and the #code."
"It would make my life easier (and anyone else's contributing) as well to not have to care about those things, that's a sure bet."
"It would necessitate marking the #code properties as nullable, since a default constructor makes #code values possible."
"It'll still be buildable directly (with CI validation) and treated as a standalone project that is included into various products, but the project's home will be in this repo."
"It's 81k methods on win-x86, and 117k methods on linux-x64."
"It's a bit cleaner and provides tiny improvements in speed, IL size and JIT code size."
"It's a bit of an artificial measurement, but the lightbulb speedometer tests were the ones that actually reported an improvement from the test insertions."
"It's a level of signature munging and magic that I don't know that I'd immediately be comfortable with; in particular, I don't know how, as a reviewer, I'd really know that the method is ok."
"It's a nice but a very true oxymoron, much of like what you've said here."
"It's a pretty good end-to-end test, especially for these kinds of changes."
"It's a regression from today's experience, which renames could be committed and #code would be added after #code"
"It's a tricky bug for sure, I was looking at truth tables for the optimization and it all worked fine (in 3-value logic)."
"It's already visible in #url (even though you can only see directly derived types, not the whole tree) and this would mean duplicating that information."
"It's also possible for users to do some convoluted things, e.g."
"It's certainly possible that we could add the feature to omnisharp, but today omnisharp does not support loading slnf files."
"It's constructed on either HttpContext creation (in process), or at invocation of an incoming request (out of process)."
"It's currently using a Hashtable with struct keys (except the _managerTable, but better to change all of them), which means every operation on the Hashtable boxes the struct."
"It's downgrading a version, and the tests are failing because of that:"
"It's generally not advisable to pool buffers for sensitive cryptographic operations, such as those which perform key storage or manipulation."
"It's got a long way to go and can certainly be changed but I wanted to give you the chance to veto anything, etc."
"It's important for DevExpress components, and we're eager to know if you plan to merge it."
"It's intended use is for messages in string formatting, which are not allowed to be #code, but there is no reason why these concerns shouldn't be separated."
"It's interesting because this change actually has the biggest improvement for medium sized groups as it avoids the allocations of arrays size 1, 2 and 4."
"it's just a method, but one that we put in a narrower location."
"It's late on a Friday so it is likely I'm missing something, but the hash comparison doesn't appear to be useful at all, that said I will assume it is useful and preserve the original behavior for now."
"It's much clearer now where the spills are occurring now, quite a few are related to trying to clone a #code tree in the divisor/dividend, as assertions fired for this when I replaced #code with #code."
"It's much more harmful than IDE0081, which sometimes may be treated so by some (legacy) developers."
"It's not a blocker for this PR which enables #code usage of #code as #code, nor would it be an issue for say Arm64 SVE where #code can be up to 2048 bits (although no such hardware exists today)."
"It's not a huge deal, but we do shy away from using the range syntax in runtime due to this difference."
"It's not terrible, but it feels wrong."
"It's not that it's a ""local variable""."
"It's okay for the compiler to throw on ""invalid"" inputs."
"it's possible that's also as simple as just making them aliases, since IIRC both interp and wasm implement them with conservative semantics"
"It's possible to end up with the package.json files for the node packages having the same version as the target version, typically if you cancel the build at just the right time and the package.json files end up edited."
"It's possible we can make changes to the underlying #code type to improve the perf without reducing the security stance, but this would require new API to be exposed within corelib."
"It's possible, but the general desire is to instead have the JIT recognize the xplat pattern and have it implicitly light up to the more optimized hardware specific pattern instead."
"It's some months iOS 17 is out, I'm having the issue for a new implementation but I need to know if something is going to happen at a certain time..."
"It's still not fully clear from the diffs exactly how much impact is caused by the #code instruction, and how much is related to loop hoisting."
"It's the same as for 64bit: to be able to limit memory consumption of process, and, specifically, GC heap size."
"It's totally expected that if I shut down VS there might be a background analyzer or something that's still running that didn't observe cancellation, and that thread will get an abort and we wouldn't want to be crashing the process as a result."
"It's unclear to mee too why this happens, the best suggestion that I have would be to get a binlog for release/2.1 and a binlog for release/2.3 and compare them to see what might have changed."
"It's used when resolving method groups (binding invocations, MakeMemberAccessValue, ...) and binding member accesses (BindMemberAccessWithBoundLeft and BindInstanceMemberAccess)"
"IT's very probable I forgot something, didn't know what gradle was before this PR."
"It's working, thank you very much!"
"It's worth noting that we only call #code from #code on the old layout path, and that only runs in #code, where we aren't actually reordering blocks."
"It’s still possible to lower a sequence of (element test, element evaluation) as #code for a slightly smaller code size."
"its awkward to not have a shared header (even if its not using the ""precompiled header"" feature), the way the individual headers pull in different platform headers in different orders (e.g."
"Its just that in the #code, in the #code function it can get handled."
"Javier added code to use KVO to watch #code but I (Matthew) think it will leak the things, so I (Matthew) wrapped it in a proxy object as we seem to have been doing for anything that needs to listen to platform view changes/events."
"Job-ODFYHP : .NET 9.0.0 (42.42.42.42424), X64 RyuJIT"
"Job-XVKCDM : .NET 9.0.0 (42.42.42.42424), X64 RyuJIT"
"Judging by the call stack, the crash looks primarily related to the changes made in this PR:"
"Just a guess, hehehe!"
"Just found this analyzer taking up to 30 to 40 seconds in binlogs, which seems a lot, and I thought this is the only place that could be optimized."
"Just in the first file, there is 125 lines of diff of unrelated changes: #url IMO that's way beyond ""reasonable"" refactoring for a performance PR."
"Just like the #code template, OpenAPI support is included by default and it now also contains a #code flag to disable OpenAPI if desired."
"Just the other day, I was doing some stuff around simple lines:"
"Just to be clear, is that a bug or not?"
"Just to clarify, the ask is a way to find the canonical representation for a symbol."
"Just to clarify: I am not a team member, so I am not an authority here."
"Just to set expectations, it will probably be quite a while before we're able to review this - we're currently heads-down in 9.0 stabilization, docs and various other activities..."
"Just wanted to note that this is behavior we are currently relying on internally, and we'll want to either keep the behavior or account for it with internal callers."
"Keep in mind, preview one is around the corner and I imagine the team is pushing to get lots of stuff done before shipping."
"Keeping it a small, easy to review step like #9940 that allows to save a few allocations on common paths without any substantial changes and can be built upon further."
"Keeping track of these number is non-trivial, at the very least, we need to take the #code lock."
"Keyword search in Tools/Options should work with both ""inline"" and ""inlay"" now."
"Kinda, from previous themes."
"Label with caption ""Selected: "" populates with a date, while label with caption ""Changed: "" remains the same."
"Large numbers of validation checks are disabled for the release builds, so the most accurate information for pull request success comes from debug runs."
"Last but not least, wonder if we need to bump the event version for this, I am not doing this right now for simplicity, it doesn't seem required anywhere."
"Last time I tried, it was literally like: Fix one test, break another one."
"Lastly, given the time and effort you must have put into your two comments, you could have put up PRs fixing half of your Fluent-styling issues instead and attempt to help everyone using WPF's new Fluent theme for a much better experience incorporating it into their applications."
"Lastly, I'd be happy to do the same thing WF and runtime did (address formatting and newer compiler features etc."
"Lastly, I'm not sure why this project actually needs to be a type:solution if it is not making the SLN file available to Visual Studio."
"Lastly, this replaces an internal throw helper with #code."
"Lastly, we can make a #code method to avoid creating a #code object in C#."
"later if we add more support for them to filter diagnostics out based on generated code section or support all fix or even code fix and etc, then they might want more diagnostics then compiler but right now, diagnostics doesn't do much for them."
"Latest VS2022 build from main branch, switch to ""Dark"" theme."
"Launching the build again, just applied some small changes in the test adding a couple of pending namespaces and changing the test name."
"Leaking the latter especially would cause the collapse of other security features within ASP.NET applications, including allowing attackers to carry our CSRF attacks or even mint their own administrative auth tokens."
"Leaving a note here, this is blocked because the compiler doesn't expect labels in expressions."
"Legacy (Windows XP) file dialog had a flag for showing a read-only checkbox, controlled by #code."
"Let  retarget this to main , we aren't working on the net9 branch"
"Let me know if you can add the tests, if not possible, I can take care of including them myself."
"Let's say the #code value changes, and one #code now evaluates to #code and the other to #code."
"Let's use the link to the new table location, but other than that LGTM"
"LGTM, I was looking into this earlier when you've posted the workaround."
"license in the Submission to reproduce, prepare derivative works of, publicly display, publicly perform,"
"license information that was in the materials as you received them, (b) in the"
"licenses or other restrictions of which You are aware, and (c) follow any other"
"Like I proposed in this pull request, the folder structure is changed as follows"
"like I said, if you want to discuss design, open an issue, we can always discuss design and can change as long as the issue it is trying to address we can address with new design."
"Like it says: ""keep leading trivia except documentation comments""."
"Like the original change that has caused the issue in NET8 automation, even this pull request can have some unforeseen consequences in scenarios not covered by the current test cases."
"Like, #code is clearly a different value from #code, but the difference between #code and #code is the type of the expression."
"Likely just SQL Server, given the #code is SQL Server specific."
"Likewise, type name references are not resolved in this PR."
"Limited testing of dynamically adding and removing items and changing controls' labels, visibility and status while the dialog is shown."
"Linking includes all the relevant BCL native libraries, and one of the goals is to"
"Loaded += (sender, args) =>"
"Local build and tests, sample application runs."
"Local build, app run (more in description)."
"Local build, app run with tracing, comparing outputs of release/PR."
"Local build, app run."
"Local build, assert tests."
"Local build, backed with #10259."
"Local build, backed with #10263."
"Local build, base testing between the two functions."
"Local build, base testing, type creation, etc."
"Local build, basic method testing."
"Local build, basic testing of the tokenizer with span and some of the converters."
"Local build, CI, extensive assert testing:"
"Local build, CI, extensive local assert testing."
"Local build, CI."
"Local build, conversion tests."
"Local build, extensive testing with multiple reproduction samples."
"Local build, extensive testing with radio buttons."
"Local build, initializing the collection with folders to look in, testing the functinality via #code change."
"Local build, playing with the struct."
"Local build, sample app run and testing with all the modified types."
"Local build, sample app run."
"Local build, sample app."
"Local build, sample apps run."
"Local build, sample apps testing with styles/triggers to check they're applied property."
"Local build, sample apps, usage of types."
"Local build, some assert testing; I'll provide tests before this goes out of draft."
"Local build, testing new output matches the old one."
"Local build, testing with access keys."
"Local build, tests with the class."
"Local build, text input."
"Local build, unit test."
"Local build, unit tests."
"Local build, working with #code."
"local functions"" (similar to tuple-fields) literally can have two separate views held on them consistently."
"locally, with .net8 preview installed; at command-line, #code in #code and and #code - and #code in #code - fails as above; also using IDE via #code, but fails with same error in output window"
"Longstanding position has been that all clients of the Compilation APIs (IDE included) must produce valid trees (defined as: ""a tree that could come from the parser"")."
"Looking at LLVM libunwind sources, it seems that it should be returned when the #code is not defined."
"Looking at the code, I fully agree with @github and I actually like the new consistent behavior in this pull request."
"Looking at the code, this automatically kicks in when using a checked or debug build of coreclr:"
"Looking at the example diffs, I'm seeing the same patterns I noted above:"
"Looking at the example in the linked issue, IMHO the proper fix here is to fix the stylus plug-in."
"Looking into the issue a bit deeper, I found that this is because the DateSelected event is hooked to the DatePicker's DateProperty PropertyChanged event like the following:"
"Looking through documentation, I don't see any restrictions on the content placed for an exception tag."
"Looks good, but if we're doing to do this, it would be better to do it across the board and not just in one translator - are you interested in doing that?"
"Looks like ""Before"" behaves better than ""After""."
"Looks like I need to actually do some work, then."
"Looks like in the course of merging, one of the test methods lost the Fact attribute:"
"Looks like llvm-libunwind has support for PAC, eg:"
"Looks like the original blocking issue has been fixed, and this does solve the build.sh problem - @github, any concerns with this approach?"
"Looks like you slotted this this ""after"" the critical edge avoidance heuristic."
"Loosely follows #9221, replacing the other part of the #code with more modern code."
"Lot of boiler plate stuff of adding types for new start analysis context type, registration of actions, and such."
"low impact, better maintaining code"
"Low perf impact because no extra allocations/no complexity changes"" vs."
"Low though we're passing around stuff onto C++/CLI, that's always awful."
"Low to medium, I believe I've tested most of the edge cases as I was working on something with the build."
"Low to medium, there are quite a few changes but most of them are rather straightforward."
"Low-to-medium, reviewers shall check that the #code is not forwarded/used anywhere while the #code could be modified (this really means when Grow or for example Remove happens), R/W operations via indexer do not matter as they do not modify the backing store in size/copy it."
"Low-to-medium, while the changes are mostly replacements, there are different uses of indexers (#code vs #code) and work with generic #code is different, so reviewers shall pay attention I did do anything that shall change behaviour in that regard though from my testing it seemed fine."
"Low-to-medium; while it makes sense that it shouldn't be negative due to the binding (and it never will be unless you #code with magical dimensions), we shall not take that as a holy grail."
"Low, a loop has been fixed to work properly without changing anything else (e.g."
"Low, all of the removed code shall be unused and self-contained definitions (that's important to check during review)."
"low, better maintainable code"
"Low, changes have been tested extensively."
"Low, it's a simple type-swap with static initialization."
"Low, just a simple swap."
"Low, just basically compiler warnings."
"Low, just swaps from heap arrays to stack arrays."
"Low, just type swaps."
"low, slight performance improvement."
"low, slight performance improvement"
"Low, test-only change."
"Low, the actual change is small and was reviewed/tested."
"Low, the code is a dead code or it doesn't do anything."
"Low, the fix is simple and covered with tests."
"Low, the scope of the PR is big but with a simple change, hence any mistakes shall be easy to figure out on a DRT run."
"Low, the swap is safe."
"Low, the swaps are pretty much 1:1."
"Low, there are no functional changes, just optimizations."
"Low, there's only a swap from class to readonly struct being stored in a private array (that was originally a list)."
"Low, this is rather simple 1:1 swap."
"Low, this is very easy to grasp."
"Low"")"
"LSRA and block layout are likely to benefit from profile consistency, and this is late enough in the JIT that the sources of diffs should be relatively obvious."
"Luckily, Dustin was on the thread and mentioned a known issue in the CLR around CWTs (#url This is indeed the case we are hitting, as the CWT's value could container a cycle with a pointer to itself (CachingSemanticModelProvider._providerCache -> PerCompilationProvider -> Compilation -> CachingSemanticModelProvider)."
"Make a new #code class, make sure the modern frameworks support it, and make sure it warns the hell out of you if you try to use it with WPF."
"Make sure you've done a clean build of the repo from root first, e.g."
"Makes sense to me, and this seems like a reasonable thing to add in servicing."
"Making it work is possible, but would require a lot of work (mostly refactoring the epoll-related code and re-using it here)."
"Making, a quick example..."
"manage migrations, so that would be a problem via that path as well."
"Many applications, from Notepad to Office to Visual Studio, use custom controls in their file dialogs."
"Many of the updates are to include the ""short hand"" and description instructions as a comment to each file that lists breaking changes for reference by contributors."
"Mapped the OffscreenPageLimit property to ensure proper preloading of tab contents, resolving the issue."
"Marking PR as draft for now, to make room in our review queue."
"Marking PR as draft for now, to make some room in our code review backlog."
"Marking this as *NO MERGE* for now, until we have consensus on the approach."
"Marking this PR as ""personal"" (so it doesn't show up in our list of active reviews) until the feedback is addressed."
"MAUI/Microsoft me, this gentleman and other developers are spending a lot of time *for free* trying to help you improve the platform and fix bugs."
"Maximum=""100"
"Maybe I'm misunderstanding what this fix is doing, but the error in #111588 suggests to me that it's a misconfiguration issue, i.e."
"Maybe I'm misunderstanding which proposal he is referring to (there are many ideas thrown around in that thread), but it seems clear that initially the new API is Windows specific."
"Maybe if @github is busy he can at least help with answering questions, or perhaps @github."
"Maybe it could be used to initialize everything once, solve all possible issues with DateTime across whole app and not affect startup?"
"Maybe just use style changes in this fix and don't have any #code, this will be noticeble anly when there is no #code and even if title is centered, without margin title will be at correct center on toolbar, what do you think?"
"Maybe not the nicest and cleanest solution, but it make it work and the menu button is always visible when it should."
"Maybe, as a safety measure, we can take this into main and ship in early .NET 10 previews to get customer validation for the scenario."
"meaning that more projects get incrementally built when doing a ""dotnet"
"Meanwhile, these two tiny PRs in rutnime and sdk are unblocking community platform source-build which is stuck for months."
"Memory footprint GC latency level allows to reduce memory consumption, but might have effect on application startup time."
"method, so I added the definition to PublicAPI.Unshipped.txt."
"Methods that handle specific situations no longer decide what's next to try, if the situation they are responsible for does not apply."
"Microsoft Visual Studio (and Blend) XAML designer seems to follow #url, which means that collections are recognized as #code or #code."
"Might not need a uitest, could be a unit test."
"Mikayla's PR probably already covers these too, and more obviously."
"Mine changes for tests, @github's changes for the actual product."
"Minimal, just getting the data from binary directly instead of heap-allocating an array."
"Minimal, just type swap."
"Minimum=""0"
"Miniscule changes in block weights churning LSRA/layout,"
"MISSED contexts: 2,983 (0.11%)"
"MISSED contexts: 2,984 (0.11%)"
"Mixing encodings will not throw when #code, so there's no need to validate that it does."
"modalPage1.Appearing += (_, _) => modal1Appearing++;"
"modalPage2.Appearing += (_, _) => modal2Appearing++;"
"Mono's JIT codegen doesn't touch these registers, but LLVM codegen might use XMM6 - XMM15 in generated code."
"moot, though."
"More ideally this would be rewritten to use the internal #code and potentially have a setup closer to what #code uses internally, which handles opportunistic alignment, large and small inputs, etc."
"More importantly, it didn't crash on app pool startup."
"More in general, I am referring to the mismatch between the #code computed by EFCore and the type of the SQL (sub-)expressions."
"More of a complex fix, modifies the call chain to make use of the latest .NET features."
"More simply speaking, using the repro project in #9347 with my PR (or without, with multiple threads but harder to catch as it usually dies on #code previously), if you call #code right after launch and Visual Studio subscribes to the trace source or it all happens too fast from at the same time (Refresh+Init), you'll get #code due to #code version while enumerating or #code from different thread that still sees #code."
"More testing is needed of course, but it would be a nice improvement to have this working."
"Moreover, assembly size difference is not the correct measurement of performance."
"Moreover, having reviewed #950, I would think that a simple boolean property that maps to #code would be sufficient for your and my use cases."
"Moreover, if you use a transparent background instead of a white color then the problem disappears."
"Moreover, it was indicated that performance contributions are now a priority: #url"
"Moreover, the active #code is referencing a different UndoManager (comparing to #code)"
"Moreover, the work is done for each platform separately."
"Moreover, these two specific collections are explicitly recognized as collections:"
"Moreover, with the change from this PR, I cannot even build coreclr repo on mac M1."
"Most delegates do not have cached MethodInfo, so this fast path is hit rarely - but it is very cheap, so it is still worth it."
"Most of the APIs are improvements - not sure what else is needed, but input welcome :)"
"Most of the time, we just need synthesis to do the trivial task of propagating flow into blocks that were expanded, consolidated, etc."
"Most of these link to specific sections or lines that could be renamed or moved in the future, and should therefore likely be left alone."
"most of those cases are simplified by the funcletizer, so would never show up in tests."
"Most optimizations are incremental, sometimes you need to shave off 1 kB out of 8 kB so then you can get additional 5 kB down and 60% perf improvement in the next; not everytime you get x7 perf improvement and 10% of previously allocated memory the first time around."
"Most places in the compiler that create a #code already pass in #code, but there are a few that don't and probably should."
"Most scenarios were correct, but there was a couple that were translated."
"Most SQL engines support the #code predicate, which conveniently matches C# semantics for #code/#code."
"Mostly this was an exploration of how hard it would be to enable the transformation in the JIT, and to contemplate what else might need to be addressed."
"Mostly, we care that your code is safe and that we produce appropriate warnings."
"Motivating scenario are Tizen applications where app can limit it's own memory consumption, track it and refresh it (in future I want to add refresh of memory limit for 32bit too)."
"Move #code to after path normalization, as a Linux style directory separator would not be trimmed, translated to windows style backslash by the path normalization done by GetFullPath if build runs on Windows."
"Moved the changes to be specific to the macOS platform, aligning the implementation with Catalyst-specific requirements."
"Moving back to draft; the integration test failures make think the switch to make integration tests actually call FailFast is indeed exposing some bug, but unsure what it is yet."
"Much improved on the sample app I have, comparing stable net8 and this PR."
"Much more could be shaved off, but we are limited by acquistion of helix machines to run on."
"Multiple initializations of instances and types might violate runtime invariants, we should forbid them then as discussed in #109679."
"My comment was just highlighting, that the PR does not attempt that, thus is not unblocking this issue."
"My design woudl be that i would not expose a way for a 3rd party language to decide, on a per document basis, if they support diagnostics or not."
"My fix ensures the tab content updates correctly, and animations now work as expected when switching from the first to the fourth tab also."
"My goal wasn't to make the rewrite 1:1 in behavior, so because we're leveraging 3-opt's cost model to decide whether to shorten a jump, there are #url."
"My idea was to move the ASCII path over to byrefs first to allow moving the UTF-8 path to them later (once #url for adopting Lemire's UTF-8 validation is done, possibly adding ARM64 path if it doesn't happen in scope of it)."
"My latest version of this allocates less, and is usually faster, but maybe slightly slower in some cases."
"My migration process is to stay as close as possible to the C++/CLI code (If the code is not wrong) and, if it's alright with you, I'd prefer to do that to avoid potential mistakes."
"My preference woudl intead be that tehre was a a service (ideally just one) that could be imported to allow people to say ""i need to know when to shutdown""."
"My priority first is making sure we understand the problem and root cause, so we can have confidence both in any mitigation and any relevant misbehaving tools."
"My read of this is that #code, in the context of an object initializer, refers via member access to the containing struct, which is an expression of the struct type."
"My thoughts on this PR: There are a lot of flags available in the listed docs page, many/most of which I wouldn't use very often, if ever (#code, anyone?)."
"My tought was that I'll grab an rsp of the build, and run that with a locally-built compiler and compare the outcome before/after the change."
"My understanding is the same as Jason's, that telemetry has this filter to avoid flooding the telemetry system."
"My understanding: the resource section has a ""ResourcesDirectory"" entry (Size + RVA) in the #url so when the actual metadata is written it should aligned so the next section in the CorHeader (StrongNameSignature) is also aligned -- I can verify this, but seems right to me."
"My very rudimentary understanding says that the request for diagnostics is what passes in the span, so it usually corresponds to the line the caret is on (and sometimes the containing method body extent) depending on the caller."
"Namely that we think of the leading trivia as what comes before  *excluding* doc-comments since they are less trivia, and instead are really part of the node itself."
"Namely, i would not have this boolean."
"Namely, it expects the parameter lists of the two given lambdas to be identical in number, type, and order; and then maps each parameter in lambda ""a"" to its counterpart **_with the same index/position_** in lambda ""b"" for later equality checks; meaning it's effectively doing something synonymous with what is now being done in #code:"
"NB: I am not sure I actually grasp what typeMappings are supposed to represent (hence how they should be computed/used), so maybe I am simply misusing it in this PR 😇"
"Needs more testing, but seems to work with a small repro so far."
"Needs to be implemented/finished (Wrote some tests which currently fail, likely need more)"
"Neither #code nor running the test inside Visual Studio works, it complains about missing the SDK for .net 10."
"Neither analyzer is enabled at this time since they impact compiler code, and the compiler team does not currently have time to review that impact."
"Neither of the modified tests look very interesting (I actually wonder if we should just delete both - I don't know what they're testing - the one I'm leaving will succeed even if it prints ""Test failed"")."
"Nevertheless, I think it is still better than confusing developers and users with truncated text."
"Nevertheless, I will update the PR with the current state in order to keep the discussion alive."
"Nevertheless, now I have sucessfully configured manually the downloaded Nuget, and yes, now it is noticeable in a page with a collectionview, labels and 2 buttons, the difference in the render ( in debug mode)."
"New version available, 1.0.2739.15"
"Newer runs seem back to normal, so I'll kick another one off now."
"Next to none, just dead code removal."
"Next, #code correctly scrolls the carousel to 5th item..."
"Next, I changed the LineBreakMode and verified it."
"Next, let's make a #code extension method that can avoid calling #code for the same reason."
"Nice work, eagerly awaiting this merge."
"nice, thank you @github!"
"No additional licenses or rights whatsoever (including, without limitation, any implied licenses) are"
"No big changes so far, but I've added the option for #code and renamed a bunch of things."
"No changes to behavior when the resource does not come from App/System resources, or when the target object has a mentor."
"No harm done yet, as no one has started reviewing, but when we do, please make sure you don't do that or it could complicate and delay the process."
"No idea, unfortunately, though I agree that this should be the easy case for NGEN."
"No offense intended to anyone, but this is a terrible idea to implement this as is."
"No pressure, just asking because it's been sitting in draft state for a while."
"No problem, I will continue working on it."
"No problem, I will do it soon!"
"No risk because it doesn't affect any existing code, its a new API."
"No rush on this one, its not blocking anything, and in fact ""just works"" (once the remaining open points are decided), so its just about getting better coverage."
"No worries, but I thought there are quite a few methods that just deal with strings."
"No worries, i didn't expect fast reactions as i already imagined that the whole team is busy open sourcing the code and getting it ready for the public."
"No worries, thanks for reviewing the changes and asking the right questions :)"
"No, #url fixes #url"
"No, because we opt-out from NativeAOT Publish targets and handle them differently:"
"No, from my observations, when an EventListener calls EnableEvents on this EventSource it fails because the EventSource has two events with the same ID."
"No, I don't think anyone on roslyn is using it."
"No, I have no time to test it sorry."
"No, new test failure occurred after adding new platform to test matrix."
"No, only if #code is set (that'll also print similar stats like number of loops, loops cloned, etc.)."
"Nobody does it, in which case all EF users get a security warning out of the box"
"None of these files compile with PBT (which is the only library that multi-targets), there's no reason for those to hang around in the codebase."
"None of these seem fundamentally hard to solve, though the cost of checked write barriers might be enough to dissuade us."
"None, but this is just a perf fix."
"None, just internal code quality changes that do not measurably affect performance in any direction."
"None, no IL changes."
"None, Test-only change"
"None, those conditionals never be #code (or #code)."
"NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE."
"Nope, I was referring to the name collision."
"Nope, this has been like this in Roslyn for awhile."
"Normally when these types are used as an implementation detail, that difference isn't relevant, as the containing types themselves don't make any thread-safety guarantees..."
"Not complete, but does solve some immediate issues without regression afaict"
"Not currently used, except via a new stress mode."
"Not necessary, and it has required arguments."
"Not sure about this for now, may need more investigation."
"Not sure how to navigate this problem, since the guide says that if you build the clr and the libs with #code, then it should work."
"not sure if we want to try and do that in this PR, but we can move that direction eventually?"
"Not sure why, but it didn't seem to have anything to do with my changes."
"Not sure, what's going on..."
"Not taking this fix will leave customers using the above listed (and other, user-installed) keyboards unable to type characters specified by the layout on the spacebar."
"Notably there are 2 methods which need overloads to remove redundant allocations (see ""TODO"" comments)."
"Notably, code in #code is not affected (apart from attributes), since it is a root namespace on its own and no #codes are added."
"NOTE - I am new to downloading pull requests from GitHub and trying them, so there is a possibility it might be something I've not done correctly."
"Note as well that using #code like that in the subdirectory is going to use whatever sdk you have installed, whereas the root build via the build script will use a local sdk that's downloaded for the repo."
"Note that for #code, the time is spent in #code, which is very irrelevant."
"Note that for 32bit I didn't enable this default value, only manual heap hard limit is added."
"Note that for 8/16/32 values, NEON would be the preferred option."
"Note that i just hit this while coding, and definitely was annoyed that it didn't change teh return type."
"Note that I kept in the ClearCache mechanism in this PR, even though it seems quite broken."
"Note that I'm not suggesting that this should ""light up"" in existing code, that's up for debate, I was just checking if there's gonna be a proposal out of the discussion here."
"Note that if #code doesn't try to do any cloning, both metrics (""Finally Clone Candidates"" and ""Finally Blocks Cloned"") will be zero."
"Note that testing with #code might require a new test project being set up in the repo though, though I guess in the long run you want to have test coverage for that anyways, so probably not an issue."
"NOte that the feature aims not to offer implicit object anywhere where it could be legal, but rather in a subjective number of places where it is legal but also very apparent what is happening."
"Note that there were two broken tests during the run, I'm unsure if those are related to this change."
"Note that this is a matter of time, not correctness."
"Note that w/o pgo we possibly have no idea which of the sites is more important and may waste all our ""recursive budget"" on unimportant ones."
"Note that we have an entire bucket of ""help wanted"" issues here: #url"
"Note that while this PR completes the operations described in that issue, other operations supported by #code in C# are not yet implemented in SQLite (example: Abs)."
"Note the extra clauses RETURNING, ON EMPTY and ON ERROR which are widely supported (and probably in the standard)."
"Note to self, #code,#code and #code can also be used for thousand separators."
"Note to self: once this is done, we could revert #url"
"Note, I did try moving to a single shared SyntaxListPool, but the amount of contention on the pool reduced it's effectiveness significantly."
"Note, there is one thing to be aware of, and it could be why the SLN is being excluded in Visual Studio, even though it is a type:solution."
"Note: #code is ignored in source-generated regexes, so I've removed it."
"Note: for the purpose of this benchmark, I copied the #code class and only implemented the method in the new class to be able to compare them in a single benchmark."
"Note: i try to get to them quickly, but it may take a couple of days."
"Note: If it's necessary to add IDExxxx to the column, this should be blocked on #url"
"Note: if we need this, i would far prefer the workspae have an appropriate message saying ""pending operations related to me need to stop now""."
"Note: The testing plan for APX work has been discussed in #url please refer to that PR for details, only results and comments will be posted in this PR."
"Note: there are some #code objects, which are dependent on the #code passed into #code, so I keep them separately in a dedicated #code."
"Note: there is some variability in the benchmark caused by the runner itself, but looking at many recent PRs, #code branch never goes under 2600ms."
"NOTE: To be totally clear: i 100% see why people think of these purely as locals, and want to name them as such."
"Nothing extra new, this is used in #code by default for several releases."
"Nothing special, it is my first PR on this project"
"Now I find this irrelevant and as you've perfectly noted, formats are CI on their own."
"Now it seems the failing tests are unrelated (HTTP/2, HTTP/3)."
"now lists more projects and that when opening a solution, more projects"
"Now that #url has been merged, we should augment this PR to add the corresponding generic Range method to AsyncEnumerable as well."
"Now that main is .NET 10, I think we should take this change then reintroduce the dependency analysis framework."
"Now that we don't use codesign for signing, it looks like the executables are sometimes getting killed by antivirus when tests try to run them immediately after they are modified, leading to flaky tests (locally at least)."
"Now that we have a config to limit total recursive callsites, I'm wondering whether it makes sense to remove the force inlining limitation."
"Now that we're coming up from air a bit, we can try to catch up with this; overall, it looks reasonable, but we'll need to reflect those changes, specifically: reflect the move of the bits to #url."
"Now the API for architecture is the most important for LoongArch64, I want to confirm them for LoongArch64."
"Now the patch has limited the PAC enablement to Linux only machines, we were trying to ensure it won't break on any Linux system."
"Now we need to check for ""is this iOS or Mac Catalyst""."
"Now when a XAML page with a single #code element is to be to displayed to user by MAUI, MAUI creates a new platform view (i.e."
"Now with this change, everything"
"Now, #code is resolved as accessing the #code member of the #code enum type."
"Now, besides the complains, can we move on with this PR?"
"Now, how you weight these pros/cons is totally up to you :)   I personally think of a local functions as a tool that are helpful, but should be used carefully and responsibly."
"Nvm, #code is only available on .NET 5+."
"ObservableCollection), so that's some more reflection."
"obvious ""Open project, VS crashes"" but in general, I need to understand how"
"Obviously not shippable, but proof of concept that I think we just need to broaden the definition of 'self-referential' here appropriately without breaking anything."
"Obviously the payload itself would change but when deserialized and loaded, those two would still be equal."
"Obviously there's questions still to answer about what it means to keep these alive for API breaking changes, but for now let's at least get some tests in that are green and see how things work in practice."
"Obviously using reflection is explicitly not supported, but we should have a reason to break it more than a personal preference or code style."
"Of course, I understand if it's too late."
"Of course, that's just a guess."
"Of course, the EG can always say that the new behavior is preferred over the old behavior, but there needs to be an explicit acknowledgement that there is a security tradeoff here."
"Of course, we aren't going to merge that commit."
"Off the top of my head, I think the only ones with the problem are those like List, Collection, Queue, HashSet, Dictionary i.e."
"Often times the patterns involved, particularly for things like #code, #code or even #code and such are relatively trivial to handle and simply haven't been added in yet."
"Often, these only require fetching the syntax tree, which we now do synchronously."
"Oftentimes, the key will not be written by the time an attempt to set the expiration is made."
"Oh my, never knew I'd see a fix from the issue I suffered from 4 years ago in X.F."
"oh sorry so many comments, let me give it a look ."
"Oh, I'll keep working on Pull Request, figure out why the CI tests aren't passing"
"Oh, this is great."
"Ok sure, but we currently _only_ support severity for #code so it essentially always happens."
"Ok, did that."
"Ok, I agree that it's better to keep this under ifdef if you have concerns for future."
"OK, I will close this PR and use #url to track the improvement we want to implement (e.g."
"OK, I will wait for the new infrastructure"
"Ok, I'll try to produce more examples."
"ok, it is now using a common helper class"
"Ok, let me think how to do that."
"Ok, let's try to either land it or close it early in 10."
"Ok, please add back servicing-consider when it's ready."
"OK, Thank-you!"
"OK, Thanks very much."
"OK, thanks."
"OK, Thanks"
"Ok, that answers a valuable question for me."
"Ok, this is returning to a stub."
"OK, understood."
"Okay so if someone binary-serialized an instance of this structure to the disk, would upgrade .NET and try to deserialize it back, then the deserialized instances of Auto one would not equal new instances of Auto, correct?"
"Okay, I made the changes we talked about, could you please take a look and confirm if it's all good?"
"Okay, I think I went a bit too far."
"Okay, seems that the failure cases are late devirted without #code so we didn't save the correct inlinersContext for them."
"Omitting this attribute means ""please run the compiler slower""."
"On #936, @github brought up how WinForms has #code."
"On 64 bit in containers by default heap hard limit is set to 75% of total physical memory available, and this is fine, because virtual address space on 64 bit is much larger than actual physical size on devices."
"On a side note, does ALL image loading for Android goes through the java code I have modified?"
"On an Android tablet, switching from landscape to portrait, and from portrait to landscape repeatedly produces this error: androidx.appcompat.widget.LinearLayoutCompat$LayoutParams cannot be cast to androidx.drawerlayout.widget.DrawerLayout$LayoutParams"
"On an AVX2 X64 (Gold 5120T), the vxsort is _slightly_ faster."
"On Android, calling the ScrollToAsync method in the OnNavigatedTo and OnAppearing events when the screen is first displayed does not work as intended."
"On Android, calling the ScrollToAsync method within the OnNavigatedTo, OnAppearing event does not work as intended only on first appearance."
"On Android, displaying or hiding the navigation bar does not involve any navigation transitions)"
"On Android, one needs to do interop calls as Android apps runs on java virtual machines (JVMs)."
"On Android, the scroll position remains at (0,0)."
"On Fri, 29 Nov 2024, 09:41 Tia, ***@***.***> wrote:"
"On Fri, 29 Nov 2024, 12:47 Raphael Schweizer, ***@***.***>"
"On further investigation, I found that the current fix won't work in WPF as it will return incorrect count in few cases (one is mentioned by @github)"
"On iOS and Android, everything looks as expected, I think Windows might need some adjustment, but I don't have a Windows machine to work on it."
"On iOS, calling the ScrollToAsync method in the OnNavigatedTo and OnAppearing events when the screen is first displayed does not work as intended."
"On iOS, calling the ScrollToAsync method within the OnNavigatedTo, OnAppearing events works as intended."
"On iOS, real-time updates were not reflected as the Title property changes were not being observed."
"On iOS16+, iOS finally support back action."
"On left swipe, the text is not centered and remains at the start position on Android."
"On linux with the default stack size of 8mb, RSS measured at 5916."
"On most targets attempting to deref a NULL allocation would fail fast but on wasm the interpreter would stomp all over memory, which isn't great, so we do need the explicit checks."
"On my computer, I got the next results"
"On Neon, 128bit vectors means we are only sorting two 64bit values at once."
"On one hand, it looks weird that when we want to center the title it is moved to the right, but on the other, it is the default iOS's behavior and I believe a future discussion should be made #url"
"On right swipe, the text is not visible on Android."
"On such machines, PAC and BTI instructions are executed as #code but it leads to slightly increased file sizes."
"On the other hand, for the specific scenario of static virtual methods, the vtable approach seems like it's probably safe."
"On the other hand, if we instead had a totally opt-in #code class, then your idea poses very little risk to legacy code and could indeed be a good interim step prior to full INCC support in WPF if that's eventually done."
"On the other hand, numeric prefixes are an integral part of the number for me."
"On the other hand, we could just document this limitation as currently not supported and call it a day."
"On the plus side, the fix only enforces intended semantics of the XAML compiler, it is not meant to change any existing behavior."
"On the same AVX2 X64 (Gold 5120T), switching the vxsort code to use bitonic search and packing:"
"On the subsequent call, the Image is measured correctly, and the negative spacing is appropriately deducted from the measured value."
"On this method, we need to return to the original orientation of the device."
"On VSCode for Mac, how do I choose to install dev/maccat-auth-21872 so that I can do the testing?"
"On Windows, calling the ScrollToAsync method in the OnNavigatedTo and OnAppearing events when the screen is first displayed does not work as intended."
"On Windows, if the call to the ScrollToAsync method does not change the position of the ScrollBar, the call to the ScrollToAsync method does not finish."
"On Windows, ItemsUpdatingScrollMode is considered during collection updates."
"On Windows, ran repro in the description of #url with the ThreadSessionState cleanup logic and observed"
"On Windows, the ViewChanged event doesn't fire until the ScrollView's position is updated, so I added code to call the ScrollFinish method if the requested scroll position is the same as the current scroll position when processing a scroll request."
"Once a handle to the object is obtained, typical synchronization operations may not do further access checks."
"Once a package exists that SOS can consume, the code to read the StressLog in C++ can be removed from CoreCLR as well."
"Once done, this would have allowed to improve call codegen around #code and #code that it forwards to for external callers - right now it is quite messy for something that is just #code and #code."
"Once done, we will be in a state to review the changes for this and the rest of the PRs."
"Once it's ready for tactics review, please reapply the label."
"once sam's concern are consolidated , i think we should target this for preview2 branch"
"Once the editor content exceeds the editor's size, the cursor aligns properly above the keyboard frame."
"Once the handle is created, the scaling will be executed according to the original logic."
"Once the microbenchmarks are run, the pertinent metrics would be the % difference in the time of execution of a test + the standard error of tests."
"Once this fix is in, we have several people that will work through the codebase and make the required improvements."
"Once we've refactored switch recognition to not depend on lexical layout (#107076), we should be able to only run layout once, after LSRA."
"Once Web Tools has moved to System.Text.Json, we on Razor can move off of Visual Studio Lsp types, which resolves a licensing mismatch in the C# extension."
"Once you merge this PR into your default branch, you're all set!"
"One #code file down, two to go."
"One important question for the TODO comments is ""Are there any problems if some options are removed from AutomationObject?"
"One important review comment that's much more important than all the others: your PR currently introduces state on ExpressionEqualityComparer (_lambdaParameters), which has one instance (ExpressionEqualityComparer.Instance) shared concurrently by multiple threads."
"One in part of the PR as a standard BDN tests, and one type using the following #code class, which is based on the previous discussions of this PR."
"One is that way, second time it's the other way."
"One is the support of getting and setting multi-part data objects, i.e."
"One issue with doing that is that it'd cause the runtime to reorder fields and put the invocationList before the pointer fields, we'd need to use some other tricks like fixed layout to prevent this."
"One last example, let's see if you can comprehend it: #code."
"One might think that it's not a big deal to set, e.g., #code (like #url)[^4]."
"one more funny, _niche_ edge case I just want to mention..."
"One of Its aims is to mitigate certain attacks that rely on corrupting the return address on the stack, such as return-oriented programming (ROP)."
"One of our main focuses currently is to reduce unsafe code in the repo (ideally, with zero performance impact, but we might tolerate small regressions in favor of memory safety), see #url This change seems to replace one unsafe pattern with another."
"One or two of the breaks we've sent your way in the last month or two would have been caught via good enough of smoke testing, so we're hoping to do that here."
"One possible concern, though (which I've not investigated in depth), is that Hashtable and Dictionary have different thread-safety guarantees."
"One simple way to get around it is to always keep the counters, which is what I am trying to do right now, we have to be careful with respect to performance (which I haven't checked yet)."
"One small point of concern is that this might make delegate equality checks slower since they rely on checking the methods in the last ""slow path"" check, which is however always hit for different delegates AFAIR."
"One thing I could think of to workaround this would be overloading #code even more and storing the DynamicMethod there, that'd make the #code checks more expensive though."
"One thing to note is that while I only find a call to FileDownloader.ReadFileAsync one file: src/Features/Core/Portable/SymbolSearch/Windows/SymbolSearchUpdateEngine.Update.cs line: 547, it's difficult to say if that's the only call or not and in what other forms the call could be coming from since that function call will go from nearly instantaneous to potentially several seconds."
"One thought, looks like the profilepriv.h introduce the typedef #code using a different define, #code, compared to what's being used in eventpipeadaptertypes.h, #code, intentional?"
"only complete on ""."" if there are accessible ctors and no accessible nested types for SymbolCompletionProvider"
"Only destroying the element completly (ie navigating away from & destroying the page) would allow you to see the correct colors, the next time you visited the page."
"Only looked at compiler implementation changes, not tests."
"Ooh, this looks great!"
"Open question: Should PrivateAssets=""all"" be the default for P2Ps pointing to sfx libraries?"
"Optimize for size"" and ""optimize for speed"" are also different configurations for compilers, including RyuJIT and C compilers."
"Optimize parsing of #code from string into #code, reduces allocations in all steps and improves performance, also reduces the memory footprint + readibility of the entire class by a large amount."
"Optimizes methods in #code, removes most of the allocations directly in this class and opens up more optimization possibilities; directly builds upon #9739 and #9822."
"Optimizes methods in #code, using #code over #code since the #code is useless and as the comment says, it was always the plan anyways."
"Optimizes the very much unused #code (which is used with #code), bringing less static memory and more modern code."
"Optimizes weird branching loops for cleanup, replace them with counting down loops instead."
"Options that are not tied to an analyzer aren't tied to an article by an f1_keyword, and some may not have a documentation currently, e.g #code."
"or @github-altium, especially since this one requires particular hardware setup"
"or indirectly from .NET Foundation, a perpetual, worldwide, non-exclusive, royalty-free, irrevocable"
"Or possibly a video of what you mean by ""everything seems smooth""?"
"Or use the settings to try to toggle whether pagination is enabled, multiple times."
"Or, alternatively, we move most of the Roslyn navigation code *into* a new ISymbolNavigationService, and we then give that service the *lowest* priority."
"Or, do nothing and let it work by default."
"Or, if you want to review/validate code changes, continue to -"
"or, the jit should always emit PAC instructions on ARM64."
"Original is on the left, the diff is in the middle, and the new behavior from this PR is on the right"
"Original PR to add heap hard limit support (#url was merged back in 2019, and it seems that GC regions support (#url was enabled only in 2022, so during my work on this patch I thought that segments on 64 bit fully support heap hard limit."
"Originally done for PostgreSQL by @github in #url Since all relational databases support it, moved this to EFCore.Relational and implemented as a construction-time optimization (in  SqlExpressionFactory), so that it potentially applies in scenarios other than just translation."
"Other data will need to have its lifetime tied to the MethodDesc lifetime, so if a MethodDesc is ever released, a callback into the interpreter would be necessary to free up this data."
"Other platforms: Taps at coordinates (150, 150) to dismiss the menu."
"Other than that, if it only affects the builds within the repo, I think the change is fine."
"Other than that, the other changes LGTM."
"Other than the rollup issue I haven't been able to figure out, this is mostly ""complete""."
"Other Unsafe.As look also a bit unnecessary there as well, cast from #code to #code or #code is as cheap as"
"Otherwise tapping to close an open swipeview will result in #codes, #code etc within #code being activated."
"Otherwise the permission status will be #code, if #code is in the manifest but denied at runtime (even if it is not strictly required)."
"Otherwise, an exception is thrown."
"Otherwise, can you close it out if we're not going to take this?"
"Otherwise, it will have to wait until next month."
"Otherwise, it won't change anything."
"Otherwise, padding should not be applied."
"Otherwise, the reader side would be acquired so many threads could launch processes at once."
"Otherwise, this seems like something which can perhaps live in #code (esp."
"Otherwise, we need to find another way to reuse BatchFixer"
"Otherwise, when #code is #code and #code is #code, you can run into this error when building with the latest .NET 10 SDK build:"
"OTOH, may perform unnecessary image decoding work up-front?"
"Our .NET Framework 4.8 application has been using a subclass of #code that rewrites bulk #code events as #code for over a decade now, and I have yet to observe even the slightest imperfection in the behavior of the system (and believe me, we have pushed WPF to places that it was **never** designed to go, with black magic wizardry that dates back at least as early as .NET Framework 4.0, and I think even going back to .NET Framework 3.5 before I joined that team)."
"Our existing patterns have many different prefixes for many different purposes (e.g., #code) and they don't get put into different bags."
"Our usage of #code didn't properly check the path started with #code, it would pass for #code, or #code, #code, etc."
"Outside of exceptions thrown by the constructor(s), instances should now be disposed in the event of any exception."
"Over time we'd ""leak"" keys."
"Overall (-169,140 bytes)"
"Overall changes LGTM, @github what do you think of the changes here?"
"Overall, i massively like this feature."
"Overall, it adds up to a ~20% improvement."
"Overall, these changes enhance the robustness, readability, and performance of the type conversion code."
"PAC-RET works because the return address stays in a register LR (which the attacker cannot access) and only goes to memory when saved to the stack, which is encrypted before the store."
"Parameters are not passed in registers for OSR methods, so preferencing to certain registers based on this information does not make sense."
"Part of #84834, cc @github/samsung @github"
"Part of #84834, cc @github/samsung"
"Per #url, it appears that we leave a lot of performance on the table for ARM64 target."
"Per discussion #url, I'm going to try using the optimized layout all the time to see if we can get around some of the pitfalls of using a RPO sequence on its own."
"Per discussion in API review, this package now blocks using it in .NET Standard 2.1 because of the #code constructors."
"Performance testing is very basic, but running #code on Cobalt 100 I see roughly the same for both vxsort and insertsort:"
"Perhaps I didn’t understand something, but for some reason the tests on GitHub were not launched?"
"Perhaps something like a check if the endRect is the empty rect and the startRect is not the empty rect, then maybe that is enough to assume there is truncation going on and we can use the finalSize?"
"Perhaps the situation is different on Windows, but in contrast to using #code instead of #code, it's less obvious for me what the expected gains are for example when using it with a socket instead of using the #code class directly."
"Personally I don't see anything wrong with it, it's low risk (Can compare the IL to see there isn't any functional changes), doesn't affect git blame (It's mostly just deleted lines) and shouldn't cause conflicts for existing PRs."
"Personally I think it's of value to make the user's not have to know the magic of prefixing them with #code, especially as in you don't specify it in the msbuild file either."
"Personally, I think the control-level tests should be done visually."
"Personally, I was going to scope it to exactly DataProtection, but @github may have thoughts on whether it makes more sense to cover all of AspNetCore?"
"Personally, I'd be fine with this change."
"Personally, unlike Content-Length, I don't see the value in sending the Transfer-Encoding header in response to a HEAD request, but it's more important to me that writing to the response Stream or BodyWriter behaves the same way."
"Pick the #code artifact zip, it should contain everything you need."
"plane, fly over big pond, land and then request destination Location and then calculate distance between the two."
"Please could you give us an example of what this looks like, I don't understand how we could set this up differently to work"
"Please excuse me for lack of response, I am busy fixing some last minute bugs for .NET 9."
"Please get a Tactics approval and merge it before 4pm PT, otherwise it would have to wait until next month."
"Please let me know if I need to do some additional verification (I'm not sure if bootstrap build has a particular meaning - is this a VMR build, or something else?)."
"Please let me know if the behavior is not what you would expect, or if the code is not up to your standards."
"Please let me know if there's any parts which don't follow style rules that I missed, or need more comments, etc."
"Please let me know, and if you can describe it or show me an example, then I will automate the test and iterate until everyone is confident in this change."
"please let this build run, so MSBuild Team can evaluate impact of BuildCheck feature."
"please make sure that our dprintf stresslog scenario works, ie, turning on the stress log and analyzing it with the stresslog analyzer."
"Please open an issue for that, explaining why each of these is needed."
"Please provide feedback on desired solution, @github."
"Please reactive this and get this in, or close out."
"Please, any update here?"
"Please, instead of responding to my reaction here, I'd recommend creating a discussion, name it ""Performance optimizations PRs should be banned as the team has not been 100% focused on the issues I have created"" if you want and have a go at it."
"Please, open an API proposal similar to this : #url"
"Plus, as of like 4 years ago, there's #code with #code where you put those 2-3 big auto format commits and nobody gets hurt."
"Point, Size, Int32Rect, and Vector would benefit from the same treatment."
"PositionInSet and SizeOfSet for items currently count all items in their container, resulting in potentially incorrect information."
"Potentially breaking change for people as one workaround was to just reference the file by specifying the whole path, for example: #code"
"PowerPlanMode=00000000-0000-0000-0000-000000000000  Arguments=/p:DebugType=portable,-bl:benchmarkdotnet.binlog  IterationTime=250.0000 ms"
"PR #8712 tried to limit the impact of the PR #6862 to just ""Groups"" and otherwise, it fully restored the original pre-NET8 behavior, which this PR does not."
"PR created as draft, waiting for the API proposal review."
"Practically speaking, the external extension writer will implement a handler similar to this..."
"Presumably, it's supposed to be zero-diff change?"
"Previously if we had the code to apply it we would, but if we couldn't we'd do nothing."
"Previously we implemented #url which collects ""sample"" on every method entry/leave."
"Previously, all LSP tests ran against net472 only, even though the LSP code running in VSCode ran against .NET9."
"Previously, if there was a named argument that wasn't at the exact location as the parameter, then it was still being shown."
"Previously, the button inside the page, which was added as a child within the TabbedPage, was not properly aligned in the center."
"Previously, the immutable #code instances used to build up the various arrays and maps would live for the lifetime of the process, since they were stored in static readonly fields."
"Previously, the layout measurements were not recalculated, which caused the button to be misaligned on the page."
"Previously, this method would run when the only enabled diagnostic was 'EnableGenerateDocumentationFile', even though that diagnostic is unrelated to the work performed in AnalyzeSemanticModel."
"Previously, we report diagnostics with #code if the code-style option is disabled."
"Probably not, but I could absolutely see it causing huge efficiency headaches, excessive database querying, etc."
"probably worth figuring out what is going on in libraries pmi (likely very few minops methods, but still...)"
"Problem exists in some other features as well, including extract base class, extract interface, etc."
"Profile synthesis currently isn't all that diligent in retaining the method's entry weight; if we are retaining likelihoods, it will use #code instead of #code without updating the latter, which throws off normalized weight computations in LSRA."
"profiler, MD emit) requests a RW view of the metadata."
"Profiling @github's app, I noticed the ""Check-ins"" sample felt the slowest on Android."
"Project, including but not limited to communication on electronic mailing lists, source code control"
"Projects that have a ton of non-known types are third-party control vendors (Like DevExpress, Telerik, etc) because they have a ton of custom controls."
"Proofs of non-escape often founder at call boundaries, since the JIT generally has no knowledge of callee behavior."
"properties), so that will have to be done manually or via analyzer modification."
"property rights in Your Submission by contract or applicable law, You must secure permission from Your"
"PROVIDED WITHOUT WARRANTY OF ANY KIND, INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY OF"
"PTAL @github, no functional changes (yet)."
"public override void ViewWillTransitionToSize(CGSize toSize, IUIViewControllerTransitionCoordinator coordinator)"
"public override void ViewWillTransitionToSize(CoreGraphics.CGSize toSize, UIKit.IUIViewControllerTransitionCoordinator coordinator)"
"public static void MapRequestScrollTo(IScrollViewHandler handler, IScrollView scrollView, object?"
"Pull request #46578 removes the use of 32-bit OOP, but leaves the code in place with a registry-based ""escape hatch""."
"Pull request #6862 fixed an issue with grouped ItemsControl not exposing grouped items to the automation, but as a side-effect it broke automation in ItemsControl without grouping."
"Puts the file header into correct state, most of the time its removal of the last line, some files didn't have the header at all (ref files)."
"Putting something on the relational level usually has a high bar, since even when the function exists with the same name across different databases, there are typically slight differences in the signature etc."
"Que sera, sera."
"Queries that pass are considered safe; the generator generates an interceptor for the terminating operator that injects the safe marker node, and then calls the original operator."
"Question regarding the PR title: it seems using AVX2 (256), not AVX-512"
"Quick benchmark, tested on main vs local with the SSE4.1 fallback removed:"
"Quick update on this: I've renamed the PR as requested, hopefully it's is a little more useful now."
"Ran into some assembly resolution issue related to multiple ALCs in play, make this a draft for now"
"Rarely will user request Location, sit on the"
"Rather than having the CI download the widely-deployed LSIF generator, use the one we just built as a bootstrap."
"Rather than mocking a bunch of VS services that are involved in reading services to be no-ops, we can just exclude the option persister to start with."
"Rather than putting the dropping of the attributes into the generator, are we better off just having a method of:"
"Rather than throwing in tests, have you considered #code?"
"Rather than try to handle it for the user, I think we can expect the user to not use non -seekable handles with methods that take an offset."
"RAther, i think it's a good thing if we have this as it will help us trigger crashes/flakeyness that will lead to product hardening."
"Rather, it's how long it takes for the list to appear."
"RC2, RC3, or RTW"
"Re №2: Thanks for clarifying it, I will create issues on the dotnet/runtime explaining what API I would like to have to make DataProtection's flow dont use #code directly."
"Re №3: I ran a #url for stackalloc with dynamic \ constant length of stackalloc (also with or without #code): results are that without #code dynamic length is even faster, but with #code you are correct."
"Re SolutionOptionSet - we can keep using it for now and clean up later, or we can implement #url first."
"Realized that this PR got hanging, @github ok to merge as is?"
"rebased to e8bae2ffb60759a538523c2424dc49d188c846b3, the latest merge commit where the CI succeeds."
"Recently, I fixed the FontImageSource color issue on the TabbedPage icon."
"Refactored the #code method for ScrollViewHandler on Android and Windows, so that it is similar to the iOS one introduced by this PR #url"
"Refactoring the TestLspServer type a little bit to allow either the #code or #code (for tests in EditorFeatures that require text buffers, like the document outline tests)."
"Regarding ""Enter table"" count, I think so we can add the similar code to #code"
"Regarding #code, the helper method has a different name now because it looks for non-ASCII byte only."
"Regarding newline/whitespace handling, i'd be curious what this looks like for something like:"
"Regarding the move-line-down, an option would be cool, but if you had to make a choice, moving down a line is the more logical choice as moving to the next line is the more common next-action."
"Regarding the override of OnConfigurationChanged in Android Views, initially, I override OnConfigurationChanged in the MauiAppCompatEditText for the Entry control, invoked the event in the method, and subscribed to it from the EntryHandler."
"Regarding the StubPrecode, there actually is a different opportunity to reduce the size."
"Regardless, I am more than happy to implement changes to make the property nullable if that is the better solution!"
"Related issues should be #2337 and #2338, and try to add scenarios to use the added editors to verify your changes"
"Related to #url We'd only want to take one of these changes, as they do the same thing."
"Release Date: August 26, 2024"
"Remember again, that there's no requirement for the hash code to be different for differing expression trees - only for it to be equal for equal ones."
"Remember also that it isn't necessarily end user setting these, but analyzer/generator authors."
"Remember my repro sees the app go down before a single preference is written, so this degradation of performance could be pretty severe."
"Remove the inconsistent implicit flush from BufferedStream.WriteByte, so that all BufferedStream.Write* Methods behave identically."
"Remove this line, we can probably lazily create this dialog instead:"
"Removes another #code call site, and refactors a few EH helpers to facilitate updating the end pointers of try regions."
"Removes array allocation during #code cache invalidation when a theme is changed, saving unnecessary allocation and overhead."
"Removes the internal #code which is basically duplicating #code functionality (in cases where it is used, not globally, obviously)."
"Removes the non-core delegate type, its methods and the always-initialized dictionary of 9 items since they were never registered and the normal Register method is never called, freeing some memory usage."
"Removes unnecessary #code , #code and #code alocations during post-input processing when the char is inputted via Alt+Numpad combination."
"Removes unnecessary static array allocations of #code and their subsequent clones on getters, replacing it with simple #code returning a reference to a static field."
"RemoveUnreachable firstLine x rest, AddImport"
"Removing the #code doesn't seem to be making a difference, tried without it too."
"Removing the attribute from #code would restart the pipeline with #code, so later steps couldn't be reused."
"Removing this constraint is simple enough, and fixes the subpar block layout (and the edge likelihoods of the cloned condition) in the linked example:"
"Renames #code to #code and adds additional information such as the inflated interface type, which type has the first interfaceImpl, and the chain of interfaceImpls."
"Replaces boxing #code with an instance of #code, cutting allocation in half and increasing throughput around 3 times on the static ctor that is gonna get initialized in pretty much every Wpf application with controls."
"Reply to this email directly, view it on GitHub<#url or unsubscribe<#url"
"Reproduce the assertion pretty consistently on x86, check, workstation, on top of 100380 bits, on a #url."
"Requested by the editor team to save cost, avoid too many request to copilot"
"REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING, AND EXCEPT FOR THE WARRANTIES"
"requires that not only its name follows the Java JNI naming rules, but"
"Resolved all of the conversations and also added a test for checking when adding the static modifier at the end of the modifiers if there isn't a partial modifier, if so then partial has to go last and static will be before it."
"resolved feedback, still seeing failed checks but afaik is unrelated to the changes in this PR."
"Resolved merge conflicts 12, there are better ways to spent an hour and a half."
"Rest are just NULL check removals coming from the #code casting pattern or simply redundant as the values in the lists are always from freshly initialized types, no NULLs are inserted."
"Reverse engineering Dataverse tables ignores primary keys and therefore foreign keys, presumably because Dataverse does not support the #code function being used in the query to retrieve the index details."
"revive #url and cover #code in top-level script such that it's passed to runtime, msbuild and other repos which support bootstrapping."
"Right now, I am unable to reproduce this symptom."
"Right now, the parentheses analyzer (when enabled) is #url with some other critical editor functionality, which means that it could theoretically adversely affect editor responsiveness, etc."
"Right now, we're not certain if we want to take this because some folks are looking into different strategies for the use of unsafe code across the libraries."
"Right, I don't disagree with you having a package that puts #code in the output directory."
"Rolling back the entire #6862 would fix our issues, re-introducing the original problem."
"Roslyn is unique because, unlike other tasks, it's not primarily about executing a tool."
"Roslyn previously always set information for both, when most of the time the kind information is sufficient."
"roslyn-analyzers already doesn't follow the spec, so I'd rather delete the custom support there than try to maintain it."
"Route = ""modalPage2"","
"Route = ""windowPage"","
"Routing.RegisterRoute(""modalPage1"", typeof(ContentPage));"
"Routing.RegisterRoute(""modalPage2"", typeof(ContentPage));"
"RPS of run with changed dll's varies from run to run, therefore I ran it 10 times"
"Running a very dumb benchmark on .NET 9 preview, generating some work so that it is not optimized out:"
"Running into the problem of assemblies hanging around in memory on the latest branch of ros, this seems like a solid solution to me."
"running most of the tests as suggested, I don't see any differences."
"Sadly currently I don't have any Apple devices to test iOS, but if DatePicker for iOS also uses #code or #code then there should be also some improvement."
"Sadly zero-copy transfers aren't possible due to the design of the Streams API, but based on profiling of local browser-bench tests, this stream-based approach is faster."
"same as large pages since for large pages we don't allow nearly as much virtual memory space, so we do this align on min seg size thing instead of requiring it to be a power of 2."
"Same for GCStresss 0xc and 0x3 with 4 Mb heap hard limit, and same for debug CLR tests on armel Linux with 4Mb heap hard limit."
"Say i'm a user that likes #code, but also want:"
"say only #code), because we have to."
"Say we either allow all recursive inlines to be considered at recursion depth N, or none of them, and the N depends on the number of recursive sites somehow, more sites ==> less depth."
"scenarios where this is causing a problem, or is this speculative?"
"Scrolling remains enabled in a ScrollView, even when Orientation is Neither."
"ScrollToRequested?.Invoke(this, e);"
"SE.Redis fix, not as aspnetcore fix (I wear both hats)."
"Search for ""type"": ""project""."
"Secondly, adding more hidden diagnostics + codefix combos (like add discard on 2nd before screenshot above) leads to it being on top for caret location (because it's Codefix) even though it's not a explicitly suggested (i.e."
"Secondly, this issue only affects those who have enabled Trace, which normal users typically do not do."
"Secondly, traces of this particular bug lead to .NET Framework and Visual Studio 2008."
"See my comment regarding the full metadata name, whenever you have time."
"See the buttons state properties, coming from #code or even the #code, which reports the last received mouse position for any instance of the args."
"Seems like a more surgical fix, so yeah let me do that."
"Seems like if the try-entering side was a problem we'd have already run into it somehow, since there is nothing preventing us from falling into a try?"
"Seems that the VM can dispatch a generic method if there's no method #code, so that this would enable us devirt while not inlining a GVM."
"Seems the first draft wasn't working properly, VS was running x64 so the test was skipped and I mistakingly thought it worked, now it also works when running x86 tests and is actually executing the code."
"Segments, of course, are disabled by default on 64bit, but runtime can be built with them enabled."
"Select the DatePicker under the label ""Date Selected/Changed Events"
"SelectedItem was not updated, when we clear the selectedItem in List or clear the items in the list."
"Sent: Thursday, 28 November 2024 1:32 PM"
"separate static library, so that I can link it without changing symbol"
"Separated with #code, which may introduce more concern about code size and speed."
"Separates diagnostic severity logic, which is only use when CSharpTypeStyleHelper is called from an analyzer from type name formatting logic, which is used on other code simplification code paths that do not involve diagnostic reporting."
"Set the DateTime to the following day and click ""OK"
"Set the DateTime to the same value and click ""OK"
"Setting the limit specifically on managed heap size allows for much better granularity than using limits for whole process with cgroups, etc."
"Setting them up as errors would mean that builds, which were passing one minute, could start failing the next t."
"Several issues are blocked by this PR not moving forward, can this be considered, please?"
"Shall we proceed by moving this test case with Task.Delay as a temporary fix, or should we close this PR and move the test case once the reported issue is resolved?"
"Short lengths improve by up to 25%, and the worst case regression is on AMD only for <5% for lengths ~65-200 (under 1ns impact)."
"Should be low, all the changes were done with using stack-allocated memory"
"Should be low, however reviewers should check I haven't changed the output meaning of each operation (culture handling)."
"Should be low, the changes are pretty much mechanical."
"Should be safe, I believe I've tested thoroughly all cases and we shall have no surprises."
"Should I compare the heights of the Labels directly, or use DeviceTest instead of UITest?"
"Should I wait for merger approval, any tips to fix the issue separately on my project side?"
"Should the spec change in the future, or have another case appear as erroneous, another PR might be suitable for it."
"Should You wish to Submit materials that are not Your original work,"
"ShuffleBench.ShuffleByte128Indirect: Job-VQIPRA(EnvironmentVariables=DOTNET_EnableAVX512F=0,DOTNET_EnableAVX2=0,DOTNET_EnableAVX=0, Toolchain=Main)"
"Similar to #90089, which does optimization on #code."
"Similar to case with total limit, 2Gb/1Gb/1Gb upper limits in different combinations for SOH/LOH/POH are enough."
"Similar to test 2, this test, #code, will compare the english json file strings to the other languages and flag any that are identical."
"Similarly as in #7910, the #code is a static field, meaning a creation of a new event changes the #code value for all previously created events."
"Similarly as in #9741, we will use simple #code to retrieve the next globally unique index, instead of using a full-blown #code-type lock for such simple operation."
"Similarly, the toolbar items have shifted slightly to the left."
"Simpler, and works down level."
"Simplifies Can* methods, adds some documentation."
"simply bumping priority for Codefixes that fix ""Warning"" (High), or visible info ""?high?"" would be a _way_ more consistent solution IMO."
"Since /proc/self/mountinfo refers to the process that is reading the file, you should have no issues accessing it within your process."
"Since #code also shuffles inputs around a bit, we needed to reverse that by calling #code (another permute) if we did find any potential matches."
"Since #code and #code don't expose a way to disable handles, an exception is thrown when #code is set to #code and either #code is true or #code is set on #code."
"Since #code is immutable by design, we should adjust it to #code."
"Since #code won't do an index-out-of-bounds check for us, we do it ourselves to keep the same behaviour as previously, throwing #code on when #code exceeds the array length."
"Since #code, like #code, are based on method handles, this prevented re-use of emitted methods."
"Since AVX-512 operates with a width of 64 bytes, any misalignment of writes ensures that a cache line split will occur."
"Since I'm in no rush, asking for another round of review @github."
"Since invoking #code on every endpoint that requires validation can be tedious, it is also possible to enable parameter validation globally for all endpoints in the application by building on-top of the global conventions API proposed in #url"
"Since iOS does it the same way winUI does, I would be inclined to make the behavior ""tap, double tap""."
"Since it was disconnected, we receive the virtual view as null."
"Since it's not a recent change happened from 9.0, it's not likely to change for 9.0."
"Since Linux 3.17, the syscall #code can be used to generate bytes from the same entropy source as #code."
"Since LLVM won't include XMM registers in generated dwarf unwind ops handled by Mono, this PR adds support to our unwinder to use the Mono specific dwarf unwind ops for general registers and then look through the platform specific unwind codes for any XMM related unwind op codes and apply them to the unwind context."
"Since looking at the commits I've noticed #code is used, I would like to point out #url"
"Since LSRA shouldn't create cross-block live registers in MinOpts, LSRA's block ordering shouldn't matter, so just use the lexical order we have on-hand."
"Since MauiTextView is derived from UITextView, we can override the TextAlignmentProperty and set its value directly to UITextView."
"since objects in a region can only belong to one generation, for pins observed #code they will not use the same policy as they must belong to what's already allocated in that region."
"Since Test migration is already planned in upcoming sprints, we'll inform you once the failing tests are in public domain."
"Since the #code was obsolete and now marked internal, we would love to remove it!"
"Since the base measurement only ensures explicitly set values, the SearchBar results do not properly account for the intended dimensions."
"Since the code I have just typed now is totally different to anything we have, let's move the discussion to #url"
"Since the dependency is marked with #code it means it actually doesn't even reach your output directory, so the only thing changed is the version of assembly passed to the compiler for your users."
"Since the DynamicMethod overhead is gone now, I think only the reflection overhead is left."
"Since the footer template is not the same type as the items in the original collection, this results in the exception."
"Since the formatting was different style on each, I've unified that."
"Since the lock is released before the background thread enters waiting for the main thread, the main thread can safely wait for the lock."
"Since the original issue was created, many problems were solved on Unix by adopting CLOEXEC."
"Since the original problem dates back to NET Framework days, I think an important consideration here is how many customers are actually affected by this."
"Since the PR documents the breaking change in .NET 9, is it safe to assume it will be merged for that release?"
"Since the removal of CAS from .Net, #code always returns true and #code always returns false so the the condition is always true which means that the whole #code class doesn't do anything."
"Since there was previously some problematic merge commit which messed up the entire history, I've squashed everything cleanly rebased on top of the latest main."
"Since these are values only for the #code attribute, they should be listed as sub-items to #code."
"Since these diffs are expected, we can conclude that the superpmi run is successful"
"Since this has been a problem in the past (#67142), I took a multi-approach solution:"
"Since this is a compiler-controlled property interpretation, we do have the option of modifying the interpretation of that value to ignore text after a #code or #code."
"Since this is an #code API and isn't being used by IVTA hackery except for the tests, we could actually cheat by having the property typed differently on different runtimes, but perhaps we can keep things simple"
"Since this is called on the UI thread, it's good practice not to call GetSyntaxRootAsync, as if we do have to recompute it it means we're having the UI thread wait for the thread pool which might be backed up."
"Since this is my first pull request here, how can I expect this to progress?"
"Since this is then passed to #code params and used as an interface, the struct needs to be boxed on top of everything and most of those calls are done via dispatch instead of using it directly."
"Since this type is internal and the #code property isn't really used, we might as well throw a #code as an alternative."
"Since users don't use selection, the priority of refactorings gets set to low, and codefixes (some/?most of which ore explicitly suggested) get ordered to be on top."
"Since value providers return all keys when the prefix(ModelName) is empty, it will attempt to convert every form key into the numeric type."
"Since ViewDidLayoutSubviews() is called whenever the view's layout is adjusted, including after rotation, this ensures TapoffView resizes correctly."
"Since we analyze the expression as a whole, we capture anything and try to rewrite as patterns."
"Since we are in same timezone, it would be also possible to jump on Teams call, pavelsavara@github...."
"since we can't rely on the Node not beeing #code, like we can in C# with the nullability analysis?"
"Since we don't seem to be gaining anything by removing #code at the moment, I'm ok with leaving it in for now (sorry for the premature review)."
"Since we haven't faced issues for those, should we be conservative in our fix by only emitting the NOP for the ""call before EH region end"" case for now?"
"Since we know beforehand if the method has EH regions or not, we can save a bit of throughput in the latter case by skipping these checks."
"Since we only move handlers if they're marked as rarely run, I think we want to do this movement as a matter of principle."
"Since we're expecting more Analyzers in the WinForms area coming also as community contribution, it makes sense to simplify and standardize the tests we have for Analyzers and CodeFixes."
"SInce, this has been stale for about a year- are, there any pending items which needs to be completed...?"
"Single threaded environment can't have dedicated thread for ""stop-the-world + collect stack traces"" implementation."
"Slightly optimize cast expansion when the actual result is used inside ""NE/EQ 0"" (""is instance"" pattern)."
"Small update since the old code didn't build anymore inside VS after the recent .NET 9 preview was released, so I rebased onto the current main branch."
"Smaller code-size of PresentationCore, improved performance in this particular scenario."
"Smaller size of assemblies, cleaner code base for developers."
"So after CI runs, I will see if I can get whatever caused it to fail to pass and then it should be ready to merge."
"So AppFilterMessage method in Application will not receive WM_ACTIVATEAPP message, and will not trigger the Activated event"
"So basically the #code file is sort of the ""next to be Shipped"" Apis that will be added to the already #code from previous release ?"
"So disregarding all names would allow queries with different lambda parameter to be cached as the same query, with a much simpler implementation, less runtime work, and without any real disadvantage (except that query trees whose only difference is parameter names get the same hash code, and therefore get bucketized together in the cache)."
"So even if that's uncommon, I think the support for it is leaking into all uses."
"So far, we only have a single evidence."
"So for example there is the truncation logic, that should be carefully covered, including edge cases."
"So I added a threshold where the algorithm for GetInternalIndexOfBitHelperLength will return -1, where the implementation in #code switches to a fallback algorithm, which does not have same extreme memory complexity."
"So I agree this is the right thing, but it's also a breaking change for people who did rely on it."
"So I created the PR with the hope that I'll get a ""concept ACK""."
"So I don't think it's quite a bug, more like a problematic performance problem."
"So I guess, makes sense to get to 0 like android, and make sure windows does the same when a collection is reset."
"So I really didn' test this PR in my previous ""feeling""."
"So I suppose it means the post-dominators are not really something that can be used for correctness (usually), but only for heuristic purposes."
"So I'm still tempted to polish this up in its current form, though perhaps will wait until I'm closer to trying out the ideas above."
"So if it's a MULTI-LINE selection and the user applies ToogleLineComment, every line should have line comment applied or removed, but the selection will be unchanged - spanning multiple lines."
"So if the _only reason_ things are added is because we were placating the build validation, I'm OK with removing."
"So if the insert text / sort text / filter text is the exact same as the label, we don't need to pay the serialization cost to include it"
"So if we decide to get rid of premature calls to #code (like in #104213), we'll want to keep running #code -- it seems relevant for enabling fallthrough into/out of loops."
"So if you agree, I don't think your comments are blocking and it can be done later on (I already planned on doing some cleanup in the future once when most or all the code is migrated)."
"So in simple words, what happens when MAUI initializes a platform view is the following (pseudocode):"
"So in this case, when another solution is open, sometimes another #code is created and two managers are hooked to the ActiveSession changed event."
"So instead of a single template of the stub, we would need to have the whole page of stubs."
"So it seems any such allocation must conditionally be on the stack, or somewhere else (say an arena)."
"so it was never really testing doing the operation from ""Appearing"" correctly"
"So it would be awesome if someone could help by digging into the ARM issue, even if they don't have time to fix it."
"So looking at the user case, they have: #code   In this case, i agree, #code or #code are both reasonable names."
"So my impression was that #code was not passed at all even for shipped binaries, but the fact that it is passed in #code confirms that we do use LTO for shipped binaries."
"So please let us know, thanks!"
"So recognizing ""what condition must be true"" to avoid the escapes is simple and usually just requires checking the immediate dominator."
"So submit this PR, which is very useful when writing custom frameworks"
"So suppose that a new #code is to be added to screen by MAUI on Windows, then MAUI calls on a new #code mapping methods #code, #code, #code, etc."
"So that I can check performance, for AVX2 I've disabled packing and switch to insertsort too."
"so that we don't take that path for the field in question, i.e."
"So the change broke a lot of stuff, so now trying as an experiment something different."
"So the JIT has proven that #code can be stored in the local var #code, but it still requires more CPU instructions"
"So the only case this change would be noticed (wrong color), would be if:"
"So these, naturally become a validation ground for this change."
"So this may be a bit of a naïve question, but would it not be sufficient to resolve this issue by doing something similar on the receiving end in #code itself?"
"So to break that link I move the handful of files we were needing on both sides to a shared project, and then just include that shared project into both the build host and library/client projects."
"So to reduce regressions, I would have to try and allow cloning of inline trees."
"So we could extend that handling to cover calls too, as an alternative (and perhaps less risky) fix."
"So we decide ""sooner"" and this approach is more ""centralistic""."
"So we literally have an API, that if you call, nothing happens."
"So we might warn if an attribute is missing (#code parameter instead of #code parameter for instance), but we don't plan to warn for extraneous attributes (#code parameter)."
"So when converting this negative value to ToPlatform(), System.ArgumentOutOfRangeException is thrown."
"So when there comes a time when overflow checks are needed on 64bit, then this 75% setup logic will probably need to be updated too."
"So with bad input, it will allocate a new array whenever we need it."
"So yeah, let me review."
"So yes, I agree if resizetizer maybe can be smart on what decide the image need to be upscaled or not."
"So yes, it's super easy to ""make"" those changes."
"So, 2/1/1 in different combinations should cover this case (e.g."
"So, as the benchmarks state, the Avx512 acceleration for such a trivial routine (load->store) only makes sense when data is aligned."
"So, at least we know why it is parked 😊"
"So, back to sufficiency, i still feel like it would be sufficient to listen for ITHreadingContext.DisposalToken."
"So, by affected methods you'd be referring to improvements in Equals and GetHashCode speed and regressions in .Method?"
"So, do a combination of both."
"So, for example, if we've setup the cache-control to cache the value for a month at a time, this will now go to downloading the content on every vs launch."
"So, for example:"
"So, I will close mine and have you complete this PR."
"So, I withdraw this suggestion."
"So, I would agree, having to hover over each exception to view details, is not the best experience."
"So, i would say that the solution should be: we don't show diagnostics for hidden code."
"So, I'm not sure if this would be an issue with dev kit or with the template, but I was thinking it's an issue that *can* be solved on the template side, considering the issues with the solution view are present with both the C# Dev Kit as well and Jet Brains Rider."
"So, if both are disabled for 64 bit, it seems it should be the same as it was before GC regions were enabled by default."
"So, if i have #code i think we should just only have that be #code."
"So, if the video goes full screen when returned it must not change to portrait-mode because the app only supports landscape-mode."
"So, in this sense this PR is a finished change that focuses on specific problem to keep patch smaller, and further work will improve segments both on 32 and 64 bit."
"so, it is very simple changes, Since the path where the Attach() method is executed is limited, I think there will be no major problems."
"so, provide how we can solve the problem using existing code."
"So, segment size for SOH/LOH/POH never overflows, as well as #code (except for oveflow of #code to 0, which will lead to failed allocation later anyway)."
"So, that code was some pre-existing code that was repeated in various methods and @github consolidated it in the one method as part of the pull request."
"so, that's only diagnostic we have?"
"So, the plan would be merge #url first and then rebase to fix this one, right?"
"So, then one of two things is true:"
"So, we may need to validate if the user has StatusBarVisible and NavigationBar visible before enter full screen save it on a variable or somewhere, and then when returning we show only what was visible."
"So, with all the above considerations, I have come up with this benchmark:"
"So, yes, this would be a good time."
"Some algorithms are 4x faster than currently used by MAUI and that means - processor time reduction, thus battery saving"
"Some benchmarks will be slightly slower, and some slightly faster."
"Some Code Action options are not read from editorconfig file, which needs to be changed."
"Some hints were taken from the earlier ""braking change"" documents (regarding style) as well as updating older ""breaking change"" lists with numbered lists instead of bulleted lists."
"Some of the bug reports from @github had good sample apps that were very slow, and those would be a good way to track progress."
"Some of these references, like the System.Text.Json ones, shouldn't be necessary because the version should already be hoisted to 9.* by the net9.0 shared runtime, but #code, #code and #code don't appear to realize this."
"some similar benchmarks with #code + #code usage (unsafe, etc) don't show significant improvements in any cases"
"Someone needs to find time to remove the OS ""skip"" for each of these and try the test with that fix."
"Something we saw on Android, but it should not matter for HTTP as we puny-code IDN."
"Sometimes, the editor cursor moves below the keyboard frame, causing it to render incorrectly."
"Sorry @github, I can't look at this any more"
"Sorry @github, we're super heads-down on a couple of changes at the moment."
"Sorry folks, I'll need to get back to this next week, I haven't tested this and this clearly has fallout so need to spend time understanding the ramifications."
"sorry for being picky - the last two commits have titles that don't really match the contents, it could be improved (for traceability's sake)"
"Sorry for delay in response, I was busy with other tasks."
"Sorry for getting back to you so late on this, but I finally got pin working thanks to Jakob."
"Sorry for lack of pushes the past few days, been busy with hard things."
"Sorry for late response, took some time for additional testing."
"Sorry for the lack of communication on this PR, we're all pretty new to working in OSS and haven't been the best at following through with things."
"Sorry for the late reply, I took the last few days trying to figure out these."
"Sorry for the late reply, I was busy with other tasks."
"Sorry for very late reply, but I managed to fix the missing code causing the failure in the bootstrap test without doing local bootstrap test."
"Sorry to ask again, but new conflicts have appeared before I could review it again."
"Sorry to bump this, but feels like this is an important MR to improve performance overall in a basic element like Image in all applications"
"Sorry, had to rebase to deal with some issues."
"Sorry, I know I'm not a maintainer but wanted to throw in my two cents."
"Sorry, i wasn't clear."
"Sorry, I will not be able to do that at least until September."
"Sorry, maybe I asked before."
"Sorry, this cycle has been a bit more resource constrained than anticipated."
"Sounds good, I'll work on adding #code."
"source generator implementations, so this restriction is not without precedent."
"Specifically, codefixes can have UI affordances (squiggles, fading, dots, etc.), while refactorings don't."
"Specifically, it aims to resolve the following bugs:"
"Specifically, the line of code responsible for this was:"
"Specifically, this is practically identical:"
"Specifically, when the Picker gains focus, the previous implementation would trigger PlatformView.CallOnClick() or OnClick(PlatformView, EventArgs.Empty), leading to the unwanted dialog popup."
"Specifying a format with InputNumber is not going to work, so this is something that we should remove from the PR."
"SPMI replay failure is a timeout -- this change shouldn't affect x64, anyway."
"Squiggles are on Short, I can create new videos."
"start of method), N > 0 (resumable states for 'yield return')"
"Still investigating why it regresses on my system, and it's the only one that it regresses on!"
"Still, I think these should be part of #code, we just need to decide whether to move it back to roslyn repo."
"Submission with the Project to which it was Submitted to make, have made, use, offer to sell, sell and"
"Submitted for testing the experience of ExperimentalAttribute, and also its interaction with Public API Analyzers."
"Such examples usually have large size diffs, but little/no PerfScore diff."
"Such extension would, however, need to make sure that current/legacy High priority remains the #code priority in the new system as to not break 3rd party expectation."
"supersedes any and all prior agreements, understandings or communications, written or oral, between"
"Support for changing the track color in the ""off"" state has now been added."
"Sure, fixed."
"Sure, let's discuss it"
"Sure, the change is ready for it, it can always wait until the priority comes."
"Sure, we won't do it."
"Surprising (though small) number of diffs though many of those look like bool cases where the bits we don't compare happen to be zero, so we were getting lucky."
"Switch expressions, for example."
"Symbol hiding works fine thanks to the #code #code flag,"
"SystemParameters.StaticPropertyChanged += (sender, eventArgs) =>"
"systems, and issue tracking systems that are managed by, or on behalf of, the Project for the purpose of"
"T2 should still be fine waiting for it's async listeners, even if there are async takss kicked off by T1."
"Tag @github , is this behavior by designed?"
"Tag @github @github , in case there's a better way to be notified about the ""commit"" of suggestion item."
"Tag someone to review this, maybe @github  and @github ?"
"Take a valid, but pathological FlowDocument containing a Hyperlink with NavigateUri `#url"
"Taking a look to the build, it already have found 362 errors spread between different renderers, mainly ListViewRenderer, Shell renderers etc."
"Talked with Jared today; I misunderstood the discussion under the issue, we already seem to have reached a consensus to NOT report errors and instead prevent the temps from being reused by the emit layer."
"Talking to @github @github, this is a prime case for an control tower flag."
"TapoffView.Frame = new CGRect(View.Frame.X, View.Frame.Y, View.Frame.Width, View.Frame.Height);"
"TBH, i would also be ok with that being the logic of KeepLeadingTrivia."
"Technically, no, only dotnet_diagnostic.severity gets put into a different bag, but that's just because those need to get exposed to the compiler."
"Terrifying, indeed."
"Test pass seems to be a bit premature, this should go through API review first."
"tested with Windows 11 Pro, Korean IME, sample programs not terminated, work well."
"Testing ""None"" is not great."
"Testing the forementioned exceptions and the order of the items, visual refresh, everything seems in order."
"Text buffers were previously mostly used as a proxy for opening a file in the workspace, and didn't actually require text buffers."
"Thank you for the information, but it seems that #code option has been removed (unavailable), doesn't it?"
"Thank you for your elaborate guidance, I will have a look when I have the time and have it fixed for that scenario"
"Thank you, but this is not the intent of that work item, which is to actually ship those Utf8 APIs downlevel, e.g."
"Thankfully, you don't seem to be in a position to decide (micro) optimizations are not needed, and people who actually get to decide those things have been merging those changes, that probably should have been your cue about the fact that your view about micro optimizations is not shared by others, especially by those who actually get to decide those things."
"Thanks for checking with them, looks like you're good to go."
"Thanks for clarification, it's good that this can also have positive effect on performance."
"Thanks for pointing those out, I think the heap is growing between pipe writes, which is my bug"
"Thanks for the contribution, @github."
"Thanks for the PR, @github."
"Thanks for the previous work, it was a really great way to get started."
"Thanks for the wise words @github, maybe this is a better order:"
"Thanks for your reply, waiting for good news!"
"Thanks to this, we avoid overwriting #code before we are able to check if the navigation is internal or external (#code)."
"Thanks, can you add a test?"
"Thanks, I opened up the follow-up PR for review #url"
"Thanks, I remember trying to link some static libraries with dynamic CRT linkage and getting errors related to static/dynamic CRT mismatch."
"thanks, indeed"
"Thanks, that seems to work great!"
"Thanks, we will get those resolved soon."
"Thanks, yes that's working great."
"Thanks,"
"That _currentText is held strongly, and when we create a SourceTextContainer is created for the original contents of the buffer."
"That #code file does not include any of the 4 project references required though, since it is not the #code file from the template, but rather, a brand new, empty one."
"That all said, if we want to say only use the logging methods if it's appropriate for VS Telemetry and delete a bunch of stuff here, I'm OK with that."
"That approach (zero arg + one arg) was for property getters\setters however it didn't work for instance methods since function pointers don't support instance methods (sometimes it worked for simple methods, but other times it cause heap corruption) so I had to change it to very-hard-coded list of specific types and methods used during startup."
"That behavior could be considered more correct, because the change notification for SelectedItem shouldn’t really be fired when an ObservableCollection source changes and no item was previously selected."
"That being said, I have seen those LSRA blocks end up very poorly placed, and we might question whether after source or before target is the right location for the new block, when source and target blocks are not adjacent, or whether we just (as we've discussed) redo layout if LSRA makes changes."
"That being said, you don't need to fix all four cases mentioned above - we'll take care of it from here."
"That change seems to have fixed #code files being excluded, but not the #code file."
"That class checks the handle is a valid user access token handle before duplicating it internally, during construction."
"That code shouldn't throw, but just catching and swallowing it would mean the developer would never know their plugin was bad."
"that does all the dropping/changing of parameter types, and returns a code generation symbol?"
"That I fixed in our prior commit, so at this point the only NuGet packages we still referenced were .NET Standard compatible."
"That improvement is consistent between runs, albeit for a bit contrived scenario (repeatedly invoking completion in the same location without modifying the document)."
"That is actually why I like the current variant of it, it makes the least difference to numbers, only slightly regressing .Method while keeping size unchanged and Equality probably even slightly faster, while still unlocking placement of delegates on the FOH."
"That is not my reading of the documentation, it says ""based on""."
"That is not such a clear cut, since as discussed in a few other issues here, mouse events/args tend to return the current state of the device rather than the state at the time the args were created."
"That is true, and it may not even be possible - I just worry that the current implementation might degrade performance too much."
"That is, if you ask for ""XAML"" that will be the string Windows gives back, not ""Xaml""."
"That is, instead of creating a #codeGT_MOD` node, you would create a shape like"
"That is, the best practice to avoid stomping on the Visual Studio created .sln file is to follow the guidance here, noteably, the part about making sure that the generated sln file in the template does not conflict with the Visual Studio generated one."
"That leads to the misdetection of stubStartAddress - FixupPrecode::FixupCodeOffset as FixupPrecode, because there in fact is part of its code."
"That one service itself would be the thing that would be triggered under any of our shutdown scenarios, and code that cares ould listen to that token instead."
"That said, a small test project examining the effect of reversing the application of #code and #code verifies the problem with the current implementation and that this is an appropiate fix."
"That said, I don't thing there're small tweaks possible."
"That said, if a few simple checks can significantly reduce the chances of us making those wrong decisions, then I'm all for it."
"That said, maybe it's ok."
"That said, squiggles on OnIdle i believe, so i would fully expect these squiggles to be OnIdle *as the fatest* we would ever make them."
"That said, we still do **fall back** to the parameter name in cases where the expression passed to #code is not a full lambda (i.e."
"That said, wheel delta is not a state, it's an event, and it seems reasonable that you should be able to accumulate them, and accumulating with the current implementation gives you potentially incorrect results."
"That sample code is just using simple MAUI controls with nothing platform-specific, and shouldn't be super slow."
"That should get fixed when we move to a new .NET SDK version, believe @github  already has a PR out to do just that."
"That sounds feasible, though I imagine we can't run an arbitrary executable (the TSP optimizer, in this case) in CI."
"That this API swallows the messages unilaterally, and behaves that way by default, with default args, with no docs saying anything like that, is opposite of pit of success to me :-)"
"That update works its way to the #code method, where the #code does not change because Section 1 has 3 items and Section 2 does as well."
"That was indeed my analysis (and yes, I'm very familiar with this code)."
"That way, we ask everyone else first ""can you navigate to this?"", and if they all fail, we ask ourselves last."
"That way, we could avoid the final copy of the data from the builder to the final #code."
"That way, we fix many more possible call paths."
"That will ensure that any future changes to the stresslog format won't require versioning the memory-mapped stresslog format version, only updating the contract."
"That will require the function that rewrites the stack to first confirm the old address on the stack is still valid, then encrypt the new return address before storing it on the stack."
"That would be great, thanks!"
"That would be weird, and Docker permits it by default, but if anyone has explicitly gone out of their way to block it, it falls back to using the file descriptor mechanism."
"That wouldn't result in any API shape changes, right?"
"That's essentially what this is, in the same way that #code is a wrapper around #code."
"That's fair, I'll add a bit of documentation."
"That's not quite the same as testing single-file deployment, but I don't know a reasonable way to do that."
"That's unfortunate, this PR will have to wait until this flows in due to the implementation of #code for unbound generics: #url"
"That's what happens for things like MSBuild tasks and analyzers which are also ""design time"" components."
"That's why #url is fatally flawed, and no modification to WPF - even full INCC support frankly - will change that."
"That's why I'm opening this PR up as a draft so someone like @github can determine if this makes sense, or if the test failures might be indicative of some build-time regression."
"The .NET MAUI project template shows #code by default, in a project with nothing on the screen."
"The ""improved"" workaround overrides onMeasure and resets the Padding as soon as it was set."
"The ""Include Sample Content"" will instead be the way to get starting content beyond a blank project."
"The ""relation condition"" is inserted as a constant value test just like indexables, because #code produced by a fixed-length pattern (see below) leads to a single remaining value."
"The ""requested changes"" seems to have been addressed by @github."
"The ""Test_Windows_CoreClr_IOperation_Debug"" CI leg executes extra validation for test scenarios."
"The ""Testing"" part is referring to how the PR changes were tested."
"The #code and #code methods are going to be called using reflection, but nothing interesting will happen in the method body (it's a very regular method body)."
"The #code API used since Vista does not have such flag, but the code has not been updated."
"The #code attribute has been applied to the #code method in #code, #code, #code, and #code."
"The #code code is not trivial, and this change required getting my head pretty deep into the code."
"The #code is implemented here: #url as a compile flag, so I am positive it will return false for the iOS binary, running on macOS - it is the exact same binary that is distributed for iOS on AppStore."
"The #code is only used in analyzer-related code when reporting diagnostics, not in the core simplifier service."
"The #code is updated, however, because the item at index 1 has changed from Item 2 on the Section 1 view model to Item 2 on the Section 2 model."
"The #code method call has been updated to use a new lambda function that leverages the #code struct to copy each component of the URI into the buffer, adjusting the buffer slice as needed."
"The #code method now bases the hash of each #code on its index (position) in the parameter lists of the containing lambda(s), as opposed to its name — in addition, of course, to its type, which is true for any expression."
"The #code option indicates whether the object object is intended to be used only within the current session (an alternative to the name prefixes, such as #code)."
"the #code perf is mostly here: #url which is, I guess,"
"The #code property is only read by #code, #code and #code."
"The #code property is the only reliable way to detect that an iOS app is running on macOS, and is how Apple suggest you do (minor) adjustments to your iOS app if needed, when it is running on macOS."
"The #code property on the internal class #code was declared as an #code, but was always backed by an instance of #code."
"The #code should always be empty in segments, so if we complete the bookkeepping bucket, we are done with the numbers."
"The #code was computed by #code, with the large #code space, that make #code ends up a negative number, leading #code to free all the available free_region"
"The #code will be null, as the #url says."
"The #code will throw an error that the input is invalid, which might be the desired."
"The #url has concept of a member being ""invoked"":"
"The 6th bit that we aren't masking off anymore will impact whether we pick from the first 0-31, or 32-63 values, but that doesn't matter since the two are the same."
"The above function is a Java #code method implementation, and it"
"The accounting is still not perfect just yet, after that change is merged, we are starting to get random assertions (e.g."
"The actual algorithm and everything look right here, but I'm concerned that applying the variance at the vtable level is wrong as a general approach, since the spec seems to require the check to be done at call sites."
"The added HIR looks like this for the signed overflow check, for example."
"The address of the GC stub we would keep in a global variable, meaning all access to it would hardcoded with fixed addresses in the assembly."
"The algorithm used in #code was not affectd by this bug, so I have not changed the implementation in this PR."
"The alternative is to generate and ship multiple sets of reference assemblies, adding a significant amount of complexity to the build and making it unpredictable which set of APIs will be usable for any given search."
"The amount of time spent in both CompileMethod and ProcessCompilationEventsCoreAsync varies between runs, in some of the runs they are improved with this change, in some, they are unaffected."
"The approach makes lot of sense but I am not sure if it is the right ""granularity""."
"The approach taken in this PR to address the flaw is wrong, in my opinion."
"The approach used in this pull request also matches the behavior the compiler expects for interacting with certain other public APIs, e.g."
"The arm64 diffs are smaller overall, as I had to skip some collections due to them stalling during asmdiffs on my machine (they didn't stall when replaying them, so this doesn't seem to be a JIT issue...)."
"the array lifetime cannot exceed #codes lifetime and so the array can be safely stack allocated (here ""opaquely"" meaning there is no way to extract the captured object from the struct)."
"The behavior works well, thank you!"
"The benchmark I am relying on to show the result numbers is #url, which is basically building default #code, adding DataProtection via #code and calling #code or #code."
"The better we cover the functionality of the motivating type, the more people can focus exclusively on usage scenarios when deciding the best type to use."
"The bootstrap solution can revert this stop-gap solution once it arrives (which may happen in weeks, may take months or longer..)."
"The bug was only about public APIs, and green visitors would be internal."
"The build itself finishes succesfully, but trying to run the tests fails."
"The call stack for the second time, which throws the IOException (see #6842):"
"The call to the NavigateToPage method has been removed from the AfterTemplateFinished event, as it will eventually be triggered when the CurrentPage and selected item are set."
"The caller in #url is in Roslyn and should definitely be fixed, but that caller would still be broken even if this PR was accepted."
"The case above is compiling a crafted codebase with 1000 class, each containing 50 methods that are just a #code"
"The cause is, very likely, a #code symbol being passed into the binder."
"The change affects the build process of everything and should any errors be introduced, developers will most likely be unable to workaround them."
"The change ensures that when the Flyout Page is CurrentPage, it returns early."
"The change is the fact that in SkiaSharp v2.x, there was just a single #code object that was used for paint/color/appearance AND font/text rendering."
"The change of orientation triggers method UpdateFlyoutBehavior of src/Core/src/Handlers/FlyoutView/FlyoutViewHandler.Android.cs, that calls method LayoutViews to determine if the views are to be created in “side by side” mode or “as flyout”."
"The CI doesn't pass on macOS and linux because the JDK is too old and the opposite problem happens, which is they don't support the new Graddle."
"The CI is missing PAC hardware, so we're missing testing on that."
"the clang code appears to expect the struct to be passed in #code,#code,#code with the last 4 bytes stored at #code."
"The client receives the refresh request, then dispatches semantic tokens requests for **all** open files."
"The client side fix would fix the issue also when OOP is disabled (when the frozen partial is asked for in-proc), but am wondering if we also need a fix in roslyn."
"The code for the SID parsing is derived from SID.cs of the .NET runtime library, because SID parsing is not available on Linux."
"The code is mostly the same, however there are some obsolete things that we may have to use for now as doing it correctly will have breaking changes in the #code NuGet API."
"The code refactorings LGTM; signoff withheld pending resolution of the ""fail the build"" target."
"The code tries to get the indentation from the #url, but since the alignment block operation does not calculate the spans correctly, it takes the indentation value from wrong (but indeed smallest) interval."
"the code without #code, 32 bits in particular)."
"The collection has more than a few elements, but less than ~10K elements"
"The color was used exclusively for the items in the NavigationView, consistent with the behavior observed on other MAUI-supported platforms, such as Android, macOS, and iOS."
"The compatibility rules are nuanced, but basically methods are compatible if they have the same number of parameters and the same parameter\return types except that reference type parameters can all be considered #code which helps with the normalization."
"The compiler is expected to provide a compilation with frozen partial semantics with near-zero overhead, and this characteristic will be achieved once #59392 (or equivalent) is completed by the compiler team."
"The concern is not significant enough to block a PR outright, but if someone asked if we have test coverage for the advanced options page I would have to say this PR does not meaningfully impact that answer in regards to long-term maintainability of the page."
"The concerns of course may change over time, and also be solvable in other ways we haven't thought of, and this document should not shut those conversations down."
"The contract does not include an implementation of formatting a stress log message into a string, but it does include a conceptual description of how to do so."
"The cost of doing this could get prohibitive for large numbers of static struct type fields on an interface, though I'm having trouble imagining a scenario that would require that, and there are some fairly obvious ways to optimize it."
"The crc32 HW intrinsic is a 2 operand node that produces a register; however, the underlying instruction is an RMW instruction that destructively modifies #code."
"The crux of the issue is that #code does not give back a ""ready-to-use"" symbol; it also needs to go through tuple remapping."
"The current fallback only has two multiplications compared to 3 for the new one, but one of those is a #code, which is slow on Intel (10 cycles compared to 5 for #code), plus #code and 2x #code, which can also bottleneck on older Intel."
"The current solution will work for the sample mentioned in the issue, where the #code are directly added."
"The delineation between files can be unclear to folks who aren't deeply involved with runtime internals, and outright imprenetrable to community contributors"
"The design above has a flaw for analyzers with multiple options, but hopefully it won't be too hard to figure out a good way for these analyzers."
"The design here was places log, and we might produce different events in different places that are appropriate for different systems."
"The design was _very_ secure, but it was unworkably slow to the point where no real-world customer could ever depend on it."
"The desire to reduce the reliance on such constructs is to reduce the possibility that we might make a mistake, allowing normal runtime protections to be in effect."
"The device tests also found it, but it is cool that you actually tested it"
"The diagnostics are better, but still verbose..."
"The dictionary is built up from empty, as opposed to built by transforming a previous collection through add/remove operations"
"The documentation now emphasizes #code alongside #code, #code, and #code, highlighting its role in converting data between UTF-8 and UTF-16 encodings."
"The dotnet/runtime issue has been now fixed for .NET 9, so this now works flawlessly with my PR."
"The double count on it own is wrong, but is not fatal."
"The downside is that if you need to specify your own, custom rules, you would need to do something like this in your (higher priority) app manifest:"
"The downside of doing this is that the dependency graph gets bigger,"
"The DSL wrt these dependencies has changed (compile, runtime, test) and I wonder if the final packages have the correct dependencies after this PR,  and not too many (like test-only dependencies)."
"The encrypt and unecrypt instruction just requires the value to encypt, name of the key to use (A or B), and the salt (address on the stack)."
"The failing checks appear related to some runs timing out after 90 minutes, not sure if thats related to my changes"
"The failure that the #code returns with any software exception handling when we try to unwind native frame from coreclr is -6550, which means #code."
"The failures are related, I am going to send a follow up PR to main and sync this branch soon"
"The fallback algorithm tries to find the node, and add it to a #code to remember if it has been seen before."
"The file size was larger than the VMSize, and that was causing sporadic crashes, but I only noticed it in the larger bundles with larger signatures."
"The first commit here null-annotates the language service MEF support to explicitly allow language service factories to return null, which it looks like was the existing supported behavior."
"The fix also allows ""Remove unreachable code"" code fix to remove embedded statements (right now they are faded out, but removal is not suggested)."
"The fix involved calling this.InvalidateMeasure(), which triggered a layout recalculation."
"The fix involved checking if the platformView already had a parent (i.e., ViewGroup) and ensuring that the parent was removed before adding the platformView to the new container."
"The fix involves removing the auto-open behavior on focus from the Pickers by eliminating the FocusChanged event, which handled the Picker's OnClick operation when focus changed."
"The fix is probably as simple as ensuring that inside #code, PAC codes are stripped from return addresses."
"The fix looks reasonable to me and should probably be backported to .NET Framework, did you try out your solution?"
"The former assumption is reasonable, the latter is not necessarily true."
"The former is dead code, the latter is not necessary."
"The function seems general purpose for the task, but I didn't know where else to put it so I left it as a local function."
"The general pattern that's expected for our code is you import IAsynchronousOperationListenerProvider if you want to say when async operations are happening (that gives you the limited API to reference operations), and if you are in tests you can import the concrete type to get everything."
"The gradient layer was always added above the image view, obscuring the button's image."
"The hacker can't simply replace it with a different encrypted value as the location on the stack is used as a salt in the encryption, meaning every encrypted value is pinned to that location."
"The Hashtable indexer returns null when key not exists, so in this case TryGetValue should be used on the Dictionary object."
"The HFA return value works correctly, and on ARM64 both HFA arguments and return values appear to work."
"The icon color was respected when setting this value directly for the content page #code, but if it was not set there then it has not been picked from its parent navigation page"
"The idea here is that instead of searching *every* other project to find linked documents to share document contents with, we instead only search the particular other ""flavors"" of a particular project."
"The idea is that we need to somehow limit values of segment size from above to not overflow with enabled heap hard limit on 32bit, and #code does similar thing on 32bit fitting SOH/LOH/POH segments without overflow in 4Gb (except overflow to 0)."
"The idea is that, we can count the committed bytes during commit/decommit operations, but we can also count the committed bytes by walking the heap data structures, and they should be identical."
"The idea is to have a ""heuristic"" to detect whether a method might capture the references passed to it."
"The idea is to try to be in a place where data can be added to accomodate new tests, without that breaking existing tests (it'll likely not be 100% successful, but that's the idea)."
"The IExtensionMethodHandler is then wrapped in the ExtensionMethodHandlerWrapper, which can be loaded by the HandlerProvider"
"The image rendering mode is now set to #code, ensuring that custom icons maintain their original colors without being altered by default rendering behavior."
"The implementation of SourceTextContainer.CurrentText works by going to the text buffer's current snapshot and getting the text, but if the text buffer has been GCed, it tries to return a ""_currentText"" which represents the last text that was handed out."
"The initial thought for a policy is to leverage the same logic as in #code: at each allocation site, check the available stack capacity, and if the stack is not too full, allocate on the stack (perhaps with some additional per-allocation limit), else allocate on the heap."
"The interesting thing to me about this is that, while this tree did originate from the parser, the way it's being used here is wrong."
"The interface is implemented by both #code and #code and is used in any code that only needs values, not code style #codes."
"The internal accessors would be dedicated utility types for BigInteger, like the BigIntegerCalculator."
"The iOS platform page cannot scroll to the bottom while using shapes like RoundRectangle, Rectangle."
"The issue arose because, during the OnEditingBegan event (which is triggered when the entry control is focused), the UpdateSelectionLength method was called."
"The issue here is that the TypeLibFuncAttribute is currently checked on the property symbol directly, not the backing getter/setter methods."
"The issue mentions ""Binding does not work with glyph."
"The issue occurs because IntPtr.ToInt32() is used to convert a 64-bit pointer to 32-bit, but on Big Endian architectures, the upper 32 bits are nonzero, causing an overflow."
"The issue occurs because the border color of the Entry, Editor, Picker, TimePicker and DatePicker control in Android does not automatically update when switching between light and dark modes."
"The issue occurs in the Rectangle control, where in the Stretch.Fill case, widthConstraint and heightConstraint are directly assigned to result.Width and result.Height without considering WidthRequest and HeightRequest"
"The item _is_ in the collection, whether it's visible or not does not change that fact."
"The item is added, which triggers #code."
"The JIT communicates the flowgraph to TSPLIB via a full matrix of ""distances"" between blocks, which is computed with #code."
"The JIT does not understand these patterns, but we could work on enhancing the memory analyses the JIT does to try take advantage of this information."
"The JIT relies on escape analysis to prove that a particular allocation done by a method cannot outlive (""escape"") a call to the method."
"The JIT result is shown in #url essentially meaning that the call to #code is the same size in IL, but saves 1 assembly instruction and 7 bytes of assembly code for each converted call."
"The language supports it, it has well defined semantics, and it's actually totally reasonable to use in many circumstances."
"The large 3000x cost is avoided by both re-using emitted methods and by avoiding well-known cases during startup, however, note again that we also emit on the 1st call instead of 2nd."
"The largest size increases are due to more loop cloning (especially in #code), whereas the smaller sporadic size increases are from duplicating conditions -- this seems worthwhile, since we can reduce loop iteration logic to one backward conditional jump, rather than a backward unconditional jump to another conditional jump."
"The last #code run seems to have dropped quite a few collections, so we're missing some platforms -- if you'd like, I can post diffs for this change against an older GUID on win-x64, or kick off a new collect run?"
"The last bullet point #url says ""DO NOT submit pure formatting/typo changes to code that has not been modified otherwise."" so technically some of the code in this PR is against the guideline."
"the latest at this time), and .NETCore (all versions before 3.0) support"
"The left is output from #code, and right from #code."
"The lexical placement of #code wouldn't matter if it weren't for the fact that we call #code during LSRA, after we've reordered blocks."
"The linked issue has benchmarks from 4 years ago; that's both very out of date, and the benchmarking code has a lot of unrelated operations in it."
"The ListView item heights are incorrect when the HasUnevenRows property is set to true during the initial load, even though the height of each cell is explicitly defined."
"The llvm-libunwind is used by NativeAOT, the libunwind by coreclr except for macOS where llvm-libunwind is used too (since it is the default unwind library on macOS)."
"The log is already displayed when the screen is started, but it is the log when the ScrollToAsync method is called in the OnNavigateTo event and OnAppearing event that is called when the screen is displayed for the first time."
"The logic in #code was inadvertently rounding the values, resulting in some size measurement having an off-by-one width on certain devices and emulators (eg."
"The loop hoisting optimization has decided that the test for #code can be performed outside of the loop to save an instruction inside the loop, this is computed in IG03."
"The LSP completion results specify a number of optional properties when they aren't necessary, largely specifying out things that are the default behavior which then gets duplicated for every item."
"The main difference is at label IG04, rather than a fixed sequence of compare and branch instructions chosen at the emit stage, the compiler has decided to build a logical expression for the overflow check and emit a #code for the divide-by-zero check."
"The main win here is not eagerly allocating the options lists, is that right?"
"The main* downside that I can see to doing it that way is that #code itself is #code, and so if #code starts raising #code events for Range operations today, then that means ""full, proper"" support for Range operations tomorrow could have observable side-effects on external code that's written to expect a #code event."
"The major changes are that we stopped using the SizeThatFit method to calculate the height in the AlignVertical method and changed it to use GetBoundingRect, and we stopped adding InsetsRect in the SizeThatFits method."
"The majority of this is getting method body diagnostics, which is work that will still be happening with this PR."
"The memory will still be freed, albeit at a slower pace."
"The message either go into queue or the lock must be taken, which prevents the message to be sent before the queue has been completely processed."
"The microbuild installation plugin attempts to install directly to the system, so this issue will likely have to be worked around by the MicroBuild team before this PR can be merged."
"the mini change looks fine (assuming tests pass), but we'd need to update interp and jiterp too."
"The most important changes are in the first commit (changing GitHub into local links), so it's also OK to remove the other commits and merge just that one."
"The most logical solution seems to be to actually ensure that op2 is always delay freed, such that it never shares the register with the target."
"The most recent API review I could find was from 2020, which has the setter labeled as Windows only:"
"The most you can hope to achieve with this PR is to hope that it ""slips through the cracks"" and nobody cares about fixing WPF anymore."
"The multiple buffers is a secondary goal, the main one is to allow users to read/write to/from non-seekable files by using only #code."
"the name of the type: #code, as what you describe is more of a #code."
"The native code is static so is known to the attacker ahead of time, so is a good place for the attacker to use to build a library of attack gadgets ahead of time."
"The native PDB writing could eventually be moved to use COM wrappers and be made trim-compatible, but right now I've simply marked the APIs incompatible."
"The nearest analogue we have is the IThreadContext stuff, which as observed is a different mechanism with different lifetimes and that now makes this really confusing."
"The new diagnostic message and ID have been added to the #code class, and the documentation in #code has been updated accordingly."
"The new failure is probably unrelated, though it's not one I've seen before."
"The newer library is now nullable enabled, so we can get rid of some helpers we have that duplicate it."
"The OffscreenPageLimit mapping was missing in the source, leading to incorrect preloading of tab contents."
"The offset ""0"" should always represent the start of the collection, but instead, it changes inconsistently when items are added or removed."
"The offsets (VerticalOffset and HorizontalOffset) were being calculated incrementally and did not reset properly when the ItemsSource changed, leading to incorrect offset values."
"The only benefit to the new API is discoverability, but we don't even know if this is going to exist in 10 years."
"The only difference in codegen is the try block now falls into the bottom loop block, and the catch block has to jump to the bottom loop block, rather than the other way around."
"The only problem with this approach is that the placeholder is slightly misaligned from its original position, which causes the EditorPlaceholderPosition (Issue 18282) to fail."
"The only reason I was suspicious in the first place is that in some related code (I'm playing with a rewrite of the IO core for SE.Redis) I approached it differently, basically ""take the queue lock, try to take the write lock; if we take the write lock, release the queue lock and write - otherwise enqueued"" - but from the perspective of a single caller thread, I'm satisfied that the result is the same and no queue jumping can occur.."
"The only way to do that was to set PrivateAssets=all, which then meant other projects had to remember to reference that lest we fail to deploy a DLL."
"The only way you can ""capture"" a #code into a CPU accessable memory is to use #code."
"The operation went as planned, and I am grateful for your support, truly it saved my day"
"The original code intentionally avoided calling this property setter because it duplicates the sensitive key material in such a way that the caller has no control over the new lifetime, and this undermines other protections present in the system (the use of the #code type and the widespread use of pinning within the core crypto logic)."
"The original issue attempts to **share** a binding between two distincts visual roots using a singleton instance, which works until you have a hanging not-yet GCed #code due to the reasons described in the first fix."
"The original issue was marked as ""needs further triage"" and we haven't decided what's the expected behavior."
"The other sections like MappedFieldDataSize are in the ""MetadataDirectory"" CorHeader entry."
"The overall approach seems complete, but I'm submitting an incomplete draft mainly to get a review from @github that this follows incremental source generator best practices won't cause performance issues - even with a lot of LINQ queries in the project."
"The parser's Context manipulation is quite complicated, and before this change about 10% of the BlockContexts created weren't having FreeStatements called on them, and thus not releasing _statements back into the parser's pool."
"The part I didn't quite understand is that we're comparing spams, but I didn't know what the spans correspond to."
"the parties consent to exclusive jurisdiction and venue in the federal courts sitting in King County,"
"The plan was also to deprecate the old APIs with a #code argument but no #code argument, to push toward the better defaults and explicit choices."
"The popup is then properly positioned after the window is created, which is too late - the winow is potentially created on the wrong monitor, with consequences as above."
"The PR #8486 removed #code from #code constructor, that causes the released icon object to be directly referenced,  so there is an exception #code of issue #12850."
"The PR adds a new option to the exception handler, #code (final name TBD)."
"The PR description (and attached graph) make it sound like improving the performance of the crank-based benchmark is the goal, but no throughput measurement is provided for the changes in this PR."
"The PR is not done yet, still working on the details and haven't pushed much customization in the VS layer but you can see the overall shape I'm going for."
"The PR updates the #code logic to account for the LoaderAllocator of a defining type, so we use it if it has the latest creation number."
"The precode size is a max(precode data, precode code)."
"The preferred implementation is ILGenerator-based, and its behavior closely mimics that of XmlSerializer in NetFx."
"The previous behavior does not consider the application's current culture settings, causing the decimal separator to default."
"The problem being that this search will result in #code on Popups (hence why the original fix caused #10087), it will return #code on radio buttons with closed Windows and depending on the focus situation it may return #code on a fresh window."
"The problem here is simple, but the possible solutions to it are rather complicated depending on the expected behavior we're looking for."
"The problem here is that we can't reliably know when the type in question is fully immutable, which is when it's safe to constantize."
"The problem is after the rotation, DrawerLayout.GetPlatformViewBounds() called (for investigation) in this method shows that the Android view still has the height/width before the rotation."
"The problem is catching this particular error, it seems to cause a hard crash."
"The problem is if we async commit when the user types a char, likely the rename operation would override the user's typing (or maybe rename would unable to rename the workspace, because Workspace has changed during rename)."
"The problem is it is logged at an #code level, and customers who automatically log all #code level logs could get a potentially unwanted error the message."
"The problem is that #code are not ordered in any particular way (#code is delivered through a C# #code, which does not guarentee delivery order)."
"The problem is that if dwarf info contains #code to indicate that the return address is authenticated from that program location on, the libunwind always fails to unwind."
"The problem is that the regions allocation rate is faster than the decommit rate, so regions end up queuing in the #code list and increase the memory usage instead of dropping."
"The problem persists across API levels 31, 33, 34, and 35 on our emulators."
"The problem was that the methods (AddRange, etc.) being added to #code were taking precedence over peoples' custom #code and #code extension methods (a very common workaround) of the same name.."
"The problem with the current ""blank"" template is that it adds a lot of content that you always have to delete, adding extra steps."
"The purpose of the tests is to make sure things work smoothly with VBCore, and I do not expect any APIs to be deleted from VBCore in the future."
"The purpose of this change is to allow Microsoft.Maui.Graphics.Skia to utilize the PathF.PlatformPath property as a cache, thereby improving the performance of Microsoft.Maui.Graphics.Skia when repeatedly drawing complex PathF."
"The purpose of this change is to simplify #code by servicing all targets with a single path, which is now possible, and achieving optimal throughput on longer lengths."
"The purpose of this PR is to fix the bug, according to the current spec."
"The pushback on this has always been ""let's address that uniformly across the project, rather than making this one callback different."" Well, I got tired of people telling me that, so I did just that."
"The question becomes whether we want a drop-in full-function replacement, or a type that only offers a subset of functionality."
"The question is what the real-world scenario(s) for this sort of struct look like, I think."
"The quick info on C shows ""ba"" instead of just ""b""."
"The R2R composite lanes appear to be failing with the same error across linux/osx on both arm64 and x64, so I don't think my HFA changes can be responsible:"
"The reason for this (as mentioned in the issue) is that we are using #url), which write in memory asynchronously, therefore if we run Application.Quit() just after that."
"the reason i don't work on it since many days is that i am busy on critical tasks, at office"
"The reason why #code is being passed is because the method is incorrectly called in the #code method I mentioned for _values_, which are allowed to be #code, not _messages_."
"The reflection-based serializer actually gets this ""correct"", but in doing so it behaves differently from other implementations of XmlSerializer that are used in 99% of cases."
"The relevant tests pass for me on MacOS, but see the XXX questions in this change."
"The repercussions from my side, however, is probably just unwillingness to spend time reviewing PRs (which otherwise tend to be straightforward in case of @github)."
"the request had been a GET, except that the payload header fields"
"The result is .NET MAUI apps on Android should inherently use less GPU (the size of the screen), which could be noticeable on low-end devices."
"The riscv64 and loongarch64 have the code sizes larger than the data size, so there is no need to change those."
"The root cause is the inability of #code to create #code, which is already owned by a different user."
"The root cause of the issue is that the picker on MainPage unexpectedly opens the Picker dialog popup in FirstPage when navigating back, even though MainPage is not currently visible."
"The Roslyn codebase has three ImmutableArrayExtensions.cs, some of which have duplicated methods (with different names or with same names), and some of which also just implement behavior directly on the real ImmutableArray type."
"The RPO traversal probably isn't resistant to changes in flow, but I don't think that's a problem for #code since we would only need to visit each candidate #code once."
"The Same concept applies to many other command handlers causing code changes, like #code #code and etc.)"
"The same thing will happen again if you go down this route, the only difference being the exception will not throw."
"the same way, regardless of selection."
"The same white blink issue occurs, confirming that it stems from the fragment manager’s transition delay."
"The same, with the PR improvements (including static constructor) - PresentationCore swapped:"
"The same, with the PR improvements (without static constructor) - PresentationCore swapped:"
"The sample app is also used to measure app size, and so it should be representative of the defaults users will get when using SDK."
"The savings are not that massive right now, but it will allow for further optimizations (and there's a lot of space for it)."
"The scenario that matters is that during normal coding, with constant typing/navigation/features that these items don't appear too flashy."
"The scroll offset values allow items to scroll into a negative position, causing the item to be incorrectly centered."
"The search window is opened in async way, and the task is fire and forget."
"The second fix changes behavior, but changes it from non-working and appearing buggy to actually working nicely."
"The semantics and importance of this flag were never documented, and since the value is always false in the code I addressed the lack of clarity in the easiest way possible: just remove the code."
"The SendAppearing method was updated to ensure that PresentedPageAppearing is called only if the page is visible, correcting the invocation logic and preventing unintended behavior."
"The SetIconColorFilter method handles the Icon.InvalidateSelf call, ensuring that the icon is updated correctly."
"the size of what's being added or removed, either iteration or reset could be horribly inefficient."
"The Snapshot has been updated, and the test is expected to pass in the next CI run."
"The so called ""previous behavior"" has been there since NET Framework, which makes me wonder if it can still be called a ""bug""."
"The socket allocation cost #url #code, so it scales back the type's footprint by an 8 byte step."
"The source-build for community platforms are also running into LKG issue, for which we added TwoStage build support #url This PR exposes two-stage build properties (StageOneBuild and StageTwoBuild) for source-build so we can build the product end-to-end for community platforms."
"The SourceText that we create that wraps an ITextImage holds onto it's container strongly, but the container holds onto original buffer weakly; the intent here is if a file is closed, the buffer can be GCed even if there's still underlying Solution snapshots still using that text, which might exist some time after."
"The stacks that @github and @github reported are actually #url, which is a similar thing: the ide is generating a bad tree, and we do not expect the parser/binder to be fully resilient to all bad trees."
"The standard fix for this is to switch the CWT to static, and thus can't experience this cycle."
"The standout method is #code, which has 2459 basic blocks."
"The StressLog contract exposes the information needed to dump the header of the stress log in SOS, get the logs for all threads, and get all messages from a given thread's log."
"The stub code was carefully hand crafted though, we depend on what bytes of code get generated (when detecting stub type like in the case that was causing the issue we are fixing here) and so there is no space for the assembler to do some instruction magic."
"The StubPrecode data has an extra pointer sized slot for a type, because it is used both for StubPrecode and NDirectImportPrecode."
"The suggestion was about a compiler feature #url analyzers work fine but the final result is still hard to read as mentioned in my previous comment, this is actually a common pattern that many apis follow."
"The switch on WinUI needs to animate to ""on"" so we need to wait a few ms so that the control is ready for the screenshots/color comparisons."
"The system now invalidates all ancestors, including non-#codes."
"The system would be more correct if the rules were all updated to match the implementation, but in the end no one would notice the behavior difference."
"The target type might or might not be a part of the collection's generic argument list, we can't make assumptions about that in either cases if we want this to work for any case that the C# compiler itself supports for collection initializers."
"The TargetPlugInCollection just contain some point calculation and it do not change any status and data, and it is the ""pure"" code."
"The teams link may not be visible to users out of the organization, and can cause confusion."
"The temp files that the error messages suggest collecting are gone, so nothing will be lost by retrying."
"The templates here do that, as @github proposed above"
"The test can instantiate #code instead, but that has the downside of not being able to call #code, which forces me to copy the code and use SolutionOptionSet in tests."
"The test cases also validate behavior with different flow directions (RTL) and user interactions (e.g., drag events)."
"The test cases are documented in an Excel format, with API-specific validation, ensuring that each Slider control property is tested thoroughly."
"The test insertion speedometer data looks promising, allocations before/after this change for the whole lifetime of the roslyn CA process:"
"the tests run for much less time, since we don't need to search such a wide space"
"The tests that are present in this PR, can be divided into three parts :"
"The tests themselves are all named explicitly for the target architecture, so there's then a bunch of new test files that'll need adding for neon."
"The tests validate the core functionality of shadows, including:"
"The tests validate the core functionality of the Slider control, including setting and adjusting minimum, maximum, and current values, as well as testing various edge cases (e.g., exceeding maximum or minimum values)."
"The tests, previously added for specific platforms alone, now we are reviewed, and enabled the tests in all applicable platforms with the Appium framework."
"The tests, previously added for specific platforms alone, now we are reviewed, and enabled the tests in all applicable platforms with the Appium framework.We are going to enable tests in blocks in different PRs."
"The tests, previously commented out, are reviewed, and modified to ensure they are functional with the Appium framework."
"The tests, previously ignored using Fails attribute, are reviewed, and modified to ensure they are functional with the Appium framework."
"The text alignment property of the Android EditText does not update at runtime, causing the text alignment to remain unchanged."
"The text alignment property of the Android TextView does not update at runtime, causing the text alignment to remain unchanged."
"The thing is that one test here (the missing one) tests only the downcast, without it mattering at all which function (or even type) is involved, whereas the other one tests translation for a specific function on a specific type (MathF.Floor), no?"
"The third change is taking advantage of the #code instruction to pick alternating bytes from the two source vectors, instead of shifting the bytes around and doing a saturating pack."
"The timeouts on #code jobs are not related and are already present on rolling-builds, e.g."
"The tooltips have been styled to be dark when dark mode is enabled, including the balloons, and the corners have been rounded for Windows 11 or greater."
"The try block still ended with a call, which led me to think the codegen is fine."
"The type can be used for marking an interface implementation and determining if it ever could implement an interface, but it should not be used to determine if an interface implementation ""chain"" is marked, since there may be many different 'chains' that end with the same interface type."
"The underlying problem is that the border color is not being re-applied or refreshed when the theme changes, leading to the border disappearing or not reflecting the correct color."
"The unit test HookAndUnhookContentOnReplace is passing successfully on my local machine, and I have attached a screenshot for your reference."
"The Unwanted - Line is not limited to a white background but occurs with any background color applied, except for transparent."
"The use of #code in this case is suspicious, this property is related to source (attribute/pragma) suppressions."
"The use of MatchParent caused an infinite height, making the layout try to fill the entire parent height, which led to instability."
"The user typed await, so we should make it async."
"The value coming out of #code (that is, #code) will be #code itself, so it makes more sense to just do a simple reference equality check, as opposed to comparing the names, even though the latter works, it is nonetheless a weird thing to do, when we know #code is going to be the same object as #code."
"The value is ""Ink Serialized Format""."
"The vast majority (probably nearly all) of cases where we use ImmutableDict, it's not to benefit from what ID is decent at, but just to ensure it will not be mutated post creation."
"The warnings have increased as I improved the analyzer, 214 now:"
"The way I see it, there are several possible solutions:"
"The workaround that I use is to run the tests from VS test explorer but when the build fails and VS shows the failure dialog, select ""Yes"" to run tests from last successful build."
"The WPF codebase has obviously had changing style over the years, some parts are written with pure C/C++ conventions (member names, function names, etc.) even though they do not incorporate or relate to any unmanaged calls simply because developers writing them were used to ATL/MFC code style, some parts are generated with that same conventions; some follow early #code style (namings etc.), then there are parts written after the release of C# 3.0 that incorporate #code (there are few but there are some) which is generally discouraged (nobody wants to think about JavaScript), and so much more variations that I could spend days on."
"Then after a custom step runs for a marked type, we build the type info again to ensure that any additional overrides introduced by the custom step are taken into account."
"Then I introduced per object heap hard limit (#url by checking against #code, it was meant to solve the problem related to initial commit for large pages support."
"Then it comes to #code, a feature to allow user to specify or ask the system to redetect the system memory limits."
"Then it seems like the analyzer is in the wrong, not the code."
"Then it seems ok to consider the ""regular flow post dominators"" -- maybe expand a bit on the docs and/or the name of the classes to clarify this?"
"Then it will add the runtime checks to the graph just after these side effects, but before the actual division occurs."
"Then load the stub value into a register, unencrypt it (faulting if invalid), encrypt it for the stack, then store to the stack."
"Then open a second solution, use rename again and VS would crash in this case."
"Then our unwinder will find the lmf state before entering interpreter and restore that state before continue unwinding the managed callstack, but since native interpreter code changed callee saved XMM registers, we failed to restore callee saved XMM registers as expected by callers leading to a corrupt process state."
"Then yes, it should be handled, because JIT knows these methods as helpers."
"Then you can keep the performance benefit of using #code, and just call #code before quitting the application to ensure changes are on disk (or enforce a call from #code itself)."
"Then you end up dealing with the same tables and data and if you modify something for one, you have all the similar tests close by to modify as well"
"Then, at some point (after the codefix is done, possibly the formatter) the #code may or may not be followed by a new line."
"Then, extend CodeFixService so that it modifies priority of CodeActions for CodeFixes based on their diagnostic's severity."
"Then, in the VMR, we can add support for a #code property that the #code in the VMR will forward to the runtime build."
"Then, to execute BeccaExtension.HandleRequestAsync, they will need to send an LSP request:"
"There are 7 (+1 on Mac) bool fields in #code which can be collapsed into a single byte field, saving 6 bytes per socket instance."
"There are a couple other places, like DynamicallyAccessedMembersBinder, that could make use of this."
"There are a few options we can use off the shelf, e.g."
"There are a few ways to fix that, JTF being one of them."
"There are also a couple places where #code is not passed directly to vector but is calculated right before loading, namely to improve codegen particularly for ARM64."
"There are likely other implementations of this interface that would need to take invisible items into account too, such as #code and #code (really anything that implements #code)."
"There are many APIs that support TArgs and analyzers to suggest to use it, but that still will look quite like some decompiled code."
"There are no functional changes besides removing the #code -> #code compare and just using case-insensitive one by default as in .NET 8 this path is vectorized and I believe decreasing the code-size outweights the now immeasurable benefit of two subsequent compares (not to mention, should such a case occur, this solution will come on top) as this isn't a hot path regularly."
"There are of course exceptions where the pattern is non-trivial, in such scenarios we want to leave a comment explaining why it's more complex and often have a tracking issue around it."
"There are only a few hits in SPMI, I wonder if it's enough as a test coverage, probably needs its own runtime test to cover edge cases."
"There are other mechanisms to retrieve this info, so I would not prioritize this now."
"There are other ways from an event perspective to discern if we are running DATAS e.g., if the #code event exists."
"There are places where you need to handle potential overflow, these are good checks for 64 bits as well (64 bit number also overflows, it is just less likely)."
"There are several unit tests failing, I think there are pending changes in the tests too."
"There are sometimes #code functions that start with #code (hello C-style, I'd like you see you write this in a .NET project); members that have #code prefix; there are constants that have #code prefix, there are constants that have #code prefix, and then there are finally constants in #code as it is recommended by the guidelines these days."
"There are still plenty of useful APIs for consumers, including all the syntax and binding APIs, that don't use PDB emit."
"There are things one can do to turn a recursive call into a tail recursive call, but they generally require introducing new auxiliary methods with more arguments (aka *accumulators*) and they mostly feel like benchmark parlor tricks."
"There are unfortunately various other places where we create constants with the model CLR type for discriminators, and it seems that converting those may not be completely trivial..."
"There are very nice improvements with the exception of #code and #code which shows a regression, especially on the small segment length case."
"There aren't many #url, but they look along the lines of"
"There could be multiple IDExxxx related to a code-style option, or even a code-style not tied to any analyzer (e.g, used only for code generation - I'm not aware if there is an existing one like this, but nothing prevents something from existing in the future)."
"There could be some erroneous behavior that is application specific, but not framework specific."
"There does not seem to be any code on GitHub using these commands, so I believe this should be on the lower side of risks."
"There is a behavioral change by design - controls based on TextBoxBase would mark #code and #code as handled, which will be no longer the case after the fix."
"There is a behavioral change related to the fact that type converters of #code and #code are no longer retrieved via #code but rather used statically, which is aligned with how #code and most of other converters using other types that have converters are implemented."
"There is a conflicting file, also I am waiting for if it is decided if truncation should be on the roslyn side or on the IDE side itself as a setting that the user can configure."
"There is a global namespace, and a namespace per session."
"There is a pending merge here, does anyone take a look?"
"There is almost zero risk to merging this, and it would fix a bug that has existed in my application for a year now."
"There is already an #code check to ensure this code is not compiled for Mac Catalyst apps, but we also need to guard against the same problem for iOS apps running on Mac."
"There is an implementation flaw in the way constants are handled in Color Color scenarios, there is an issue that tracks fixing the flaw."
"There is no harm removing them I think, but also no much benefit (my initial opinion has changed)"
"There is still a potential second bug where if the container is held around but never subscribed to text changes, it still won't update _currentText which is still not ideal, but can be fixed in a separate commit."
"There is the multi-line handling, which looks like it is the cause of the current test failures, so some more tests around the edges of that would be good, once you work out what you're going to do about it."
"There may be other related edge cases related to ""signature types""; this PR only fixes the case mentioned."
"There might also be a bug or two in the analyzer, like this one seems odd (#code):"
"There might be a concern that a code was passing #code instead of #code which is the underlying storage type, so it survives the unboxing hard cast that was being performed but not the type #code check."
"There might be some language barrier in interpreting my previous comment, hope this comment clears this out."
"There seem to be some changes to this in past commits, moving the TrimEnd around."
"There seems to be #code which takes a fullyQualifiedMeteadataName and returns a #code, but is it possible the reverse is not present in Roslyn yet?"
"There should be an enum with the corresponding flags instead of the int, and there is no reason for the property to be an array rather than just the enum."
"There should be similar existing tests for reference, such as #code."
"There shouldn't be any MinOpts diff in this latest version (4b58921) as there aren't any on my local run, but if they are still there after the CI run I'll take a look again."
"There shouldn't be much change for performance, just ensuring no regression."
"There wa one more surprise though: the BuildHost we ship as content files in subdirectories, but we were also shipping the DLL as a regular referenced library in the end user's application."
"There was a couple of things missing, presumably added after forking, so I went ahead and added them, but only the minimum that Razor actually needs."
"There was a somewhat recent discussion about getting rid of this former case with the Samsung folks, at least until lowering..."
"There was some discussion about if we should actually do this, but the work was already done, so I figured it was easier to discuss actual code."
"There would make sure the code fills in the precode ""slot""."
"There's ""+233 -488"" of diff for a PR that could have ~40-50 lines of diff to achieve the same performance result."
"There's 1.2k open issues and for about 80% of what I'm submitting it is contributing to fixing those issues but since it is only partially as the fixes require ground preparation often times, it does not justify slapping ""Fixes #"" on it."
"There's a few flags that exist to specify some IDs should never be seen, there's some IDs that are supposed to effectively be LIR or HIR only, and some expectations for certain nodes (like whether an operand should be SIMD16/32/64 and so on)."
"There's a good chance this might not work until we update the image to newer bits, or target this to a -vs-deps branch: any API break we did with TypeScript (like quick info?) will cause random mismatching to happen."
"There's a minor codegen improvement (#url) when a no-op cast has different source and target registers, where we now emit #code instead of #code/#code."
"There's a size regression on x86, since sarx/shlx/shrx are larger, but they are also much faster than the legacy instructions that take shift amount in #code."
"There's a small performance improvement, however, the main goal here is decreasing code size, and also code simplification that has been made possible with the introduction of #code few releases ago."
"There's also additional assumption on 64bit, that physical size is smaller than virtual size in containerized environments, where by default heap hard limit is set to 75% of total physical memory available."
"There's also no difference in perf, besides the removed the branch, that's always nice."
"There's also the option of having two distinct expression types, though that would make it more complicated to handled in visitors needing to identify them."
"There's currently no overload of #code or #code that takes a #code, so users either have to use #code, which can be problematic for very large strings or provide their own #code implementation over a #code to do it correctly."
"There's more work to be done, and we can iterate this area and improve upon the implementation provided here."
"there's no reason to believe it should be offered more prominently than any of refactorings) one and is ""quite far from current caret location""."
"There's one fundamental differences between runtime - WF (or even aspnetcore) and WPF, that is; WPF ain't formatted, like at all."
"There's possibly more Dataverse-specific logic we can do to infer the primary key based on other metadata we have available, but this covers all the main data tables at least."
"Therefore I am introducing the #code class (not visible to users), which allocates the **static readonly** entries dictionary (similar to what existed before) and uses that for the key-value access (so a single allocation per app lifetime against the per-request allocation)."
"Therefore it looks to me that this new PR just changes the current behavior from ""broken with a possible #url"" to just ""broken""."
"Therefore, a fix relies on separately updating the font size for HTML in the #code extension method"
"Therefore, before EnsureHwndSource method in Application is called, the system has already sent the WM_ACTIVATEAPP message to the application."
"Therefore, I believe the sooner this change is merged, the lower the risk will be, as fewer developers will depend on buttons being left-aligned."
"Therefore, in addition to the latest source code for main, you will need:"
"Therefore, personally, I prefer to continue fixing the switch in this PR: revert entirely to the previous behavior when #code is set to true; when it's not set or set to false, adopt a consistent behavior."
"Therefore, test cases for this scenario are not included in this PR."
"Therefore, the count always remains at one."
"Therefore, to make sure we don't regress for performance, we chose to keep those values only if #code is enabled."
"These are ""gadgets"" which simply change a register or write a bit of memory."
"These are both fairly large changes, and we would want to be able to revert them separately if issues are discovered."
"These are our apis, and entirely within our control to shape however we want."
"these are vs wide service not per solution service so, it doesn't care whether solution is closed or opened since Roslyn's point of view, there is no such as workspace without solution since closing solution means old solution is replaced with new solution which happen to have nothing in it."
"These can be user-defined commands, however, these would not be available to built-in controls shipping with WPF."
"these cases from Xamarin.Forms where they could run as unit tests, but now with .NET MAUI this is not possible."
"These changes allow the compiler to more efficiently provide compilations with frozen partial semantics, regardless of whether the IDE is prepared to handle the operation in an asynchronous manner."
"These changes may well make the allocating methods slightly slower, as the cost of the array zeroing now must be directly paid by the method, rather than incurred by GC or slow allocation helpers."
"These checks might be useful on 64bit, though, not sure whether someone will try to set such high limits on 64bit."
"These concerns were not *introduced* by this pull request, but we would like to try and resolve the concerns as this feature is implemented."
"These could contribute to asm diffs so maybe you could more easily see what happened in the generated code without ""reverse engineering"" the code itself?"
"These have special syntax beyond the regular SQL function syntax, but we already internally have a special JsonScalarExpression which represents JSON_VALUE, and which could be augmented to support these clauses."
"These method are used by several features to get diagnostics, one being lightbulbs."
"These ranges guarantee that calculation of soh_segment_size, loh_segment_size and poh_segment_size with alignment and round up won't overflow, as well as calculation of sum of them for allocation (overflow to 0 is allowed, same as for #code)."
"These typically mean two different things, eg unweighted means ""how many"" and weighted means ""how much"" or ""how frequent""."
"These would not be found by testing currently compiling applications, but also they could be fixed easily subsequently."
"They are in fairly decent shape, and they optimize the allocation and much of the overhead for abstract enumeration (provided the actual enumerator methods aren't too complicated -- works nicely for Lists, Arrays, etc)."
"They are stored in #code from the point of initial creation, with ownership transferred by a pattern of duplication of a reference followed by releasing the original."
"They do not have the ability to change readonly memory, change the control flow or change/access register contents."
"they don't ask, they tell us whether they want diagnostics on their document."
"They know the current behavior of the JIT to optimize the code, and the architectural capabilities to optimize them in the near future."
"They should be fixed with 4b809c8ce9a9eaf36164aac2737e40282bc50dbc, where we must not allow a method #code present on the devirted call when the method itself is generic."
"they're directly in the tree, and when the walk happens to find them, we don't even descend into nodes with the 'has error' bit on them."
"This addresses a timing issue, where we would call UpdateTrackingSessionIfRenamable even the session had already been dismissed; this function implicitly assumed the session making the call was still active."
"This adds a line of code, but is IMO significantly preferable to exposing the naked field."
"This adds more debugging output to help figure out the mysterious failure of the stack overflow tests that occur regularly in the lab, but that I am unable to repro locally."
"This Agreement covers any and all Submissions that You, now or in the future (except as"
"This Agreement is governed by the laws of the State of Washington, and"
"This Agreement is the entire agreement between the parties, and"
"This all looks fine to me, thoughts @github?"
"This alleviates the FormatException, but will still cause a validation error."
"This allows any user-specified limit, that doesn't lead to overflow, for example small limit for POH as you mentioned."
"This allows us to update items via reference, which is particularly useful in case of #code used in #code and #code since it is a struct that needs to be copied everytime on update back and forth."
"This almost never matches #code, so when we run synthesis after morph has canonicalized the method entry, #code is changed to this canned weight, which churns LSRA (and any other backend phase reliant on normalized weights)."
"This also allows me to test with servers I have access to without modifying any code, I am finding many issues with tests that I am fixing."
"This also enables WPF applications to allow users copying or dragging UI elements from a Window and dropping them as files, attachments, etc."
"This also makes some uses of #code, and remove redundant custom error messages."
"This analyzer reports a warning level diagnostic when an #code is registered (using #code, #code, or #code) and appears after a call to a #code method (#code, #code, #code, or #code)."
"This application keeps allocating objects slightly larger than 16M, and so the application almost always wastes half of the 32M regions we default to."
"This approach seems problematic to me as it appears as if we will always download the file, regardless of the cache-control headers the server sends (which i thought was the entire point of using RCC :))."
"This basically turned into overhaul of #code because unless I've missed a class on threading and read the code incorrectly, there's just a lot of unnecessary overhead within the entire class that deserves to be removed."
"This behavior is inconsistent with Android, where the scrolling operation completes as expected."
"This behavior, is different from the 'Go To Implementation' command, which will show all the linked implementation symbols."
"This broke one test, I think I should see a doggo:"
"This brought no changes, but should clean up history."
"This calculus would be easier if we hand the flow scoring that we are envisioning for k-opt, as we could evaluate the different options and pick the one that has the best score."
"This calls #code with a pack URI, opens a #code, and keeps it open."
"This came with the introduction of a #code method in #code, to directly remove the dependency from the set that was passed down during the evaluation of the field's constant initialization, if it was the recent dependency in the graph, which is also tracked down upon adding the dependency."
"This can be done by simply writing the code in C++ instead of intrinsics, allowing the compiler to optimise."
"This case fails because EF does the rewrite itself, after the funcletizer has done it's job."
"This caused a viable circular dependency error, due to the mistaken binding."
"This causes reflection errors if the SQLite assembly is not present, which occurred in practice because it is not a declared dependency of the workspaces layer."
"This causes some tests to be flaky, not sure how or why..."
"This change allows the runtime to keep using the read-only view of the metadata interfaces for internal use, even after a RW conversion of the metadata has been requested to back the classic PDB parser."
"This change does add some complexity to improve performance, by implementing lower level concepts."
"This change ensures MEF dependencies of #code are known to the composition graph, and constructed prior to starting the construction of #code."
"This change ensures that a wider range of valid URLs, including those with encoded and international characters, are correctly handled as absolute URLs."
"This change ensures that dynamic template changes in the ListView are handled correctly, improving view recycling and maintaining stable rendering without conflicts."
"This change improves reliability by validating that lockout mechanisms work as expected, aligning with best practices in identity management."
"This change in placement is particularly impactful when we aren't optimizing, so we can't rely on block layout to fix things later -- though it looks like there are plenty of instances where LSRA introduces a new block after layout when we are optimizing, and this new placement is better at maintaining fallthrough."
"This change introduces a new overload for #code that accepts a #code, allowing the authentication flow to be canceled programmatically."
"This change is general goodness, but it is not closing the most likely path of the ROP attacks in .NET."
"This change is needed to add upper boundary on gen1 max size with enabled heap hard limit, which can be smaller than what was set for gen1 max size before that (for 32bit #code can be 4 Mb)."
"This change is part of ""Allow inlining for helper methods"" effort, I already implemented it locally, but it turns out to be a lot of changes so I split it into 3 PRs for simpler code review"
"This change means refactorings no longer have access to Visual Studio services, but our options are somewhat limited."
"This change reduces the compiled IL byte size of the #code static constructor from 2,275 bytes to 1,317 bytes, speeding up the JIT compile time."
"This change reduces unnecessary method calls when #code is null, minimizes allocations of the FrugalStructList within the #code, and enhances performance."
"This change replaces the old CodeGenCapturing test, which tried to"
"This change restricts the ""automatically add #code when completing #code"" feature to only apply to members with an asynchronous signature."
"This choice is largely taken to avoid introduced new API, but we can consider an explicit and distinct max depth value specifically for the validation logic."
"This commit covers native support code for the host and runtime libraries, which is located in #code."
"This commit refactors the parsing logic for string representations of geometric types (Point, Rectangle, Size, SizeF) by using #code to enhance performance and reduce memory allocations."
"This commit simply moves the call to the OnFocus() method to after setting up the event listener, giving the dispatcher a chance to handle the event."
"This contract provides 3 versions to enable SOS to use cDAC for all stress log dumping, even for older target runtimes."
"This Contribution License Agreement ( “Agreement” ) is agreed to by the party signing below ( “You” ),"
"This copies the data from the #code into the internal representation (just like the #code overloads that take #code, #code and `byte#url), which isn't obvious."
"This could be done in many places across the codebase, in the future."
"This could maybe cause the property to flicker, although I'm not entirely sure if all #code events are marshalled before a UI refresh event so maybe it'd be fine."
"This creates a usability issue because the DialogFragment often covers the navigation bar, which is where context actions are typically displayed."
"This deviates from the #url in a few ways, in particular:"
"This does *not* store the #code itself in the #code, like the other PR did."
"This doesn't fix the ambiguity of #code with #code, but it does avoid the need for it in some cases."
"This draft PR contains a system based on BroadcastChannel and a helper 'diagnostics panel' tab where the running application can stream information on the GC heap and runtime state to another tab with its own heap, and the other tab will buffer all that information into a file that can be downloaded from the browser and analyzed offline."
"This draft PR proposes to instead handle this via a simple [SkipSyncTests] attribute, which is used at the assembly level; if the test method being executed has a #code parameter, and that parameter has a #code argument, the test is skipped."
"This enabled more devirt opportunities for profiled Tier-1 code, while no diff for FullOpts as expected."
"This enables containment for the BMI2 shift and rotate instructions, and it enables those instructions on x86."
"This enables WPF applications to accept attachments dropped or pasted from Outlook or shell namespaces (phones, cameras etc.) as well as files pasted from e.g."
"This enforces ordering if WriteMessageTakingWriteLockAsync calls are from the same thread because queueing and sending are synchronous, and the FlushAsync call is already nicely handled not to release lock before it really finished."
"This ensures compatibility with Android's 0-based month indexing, while maintaining correct behavior with the .NET framework’s 1-based month indexing, allowing the date to display correctly when navigating between months."
"This ensures consistent behavior and proper functionality, even when SoftInputMode is set at the sample level."
"This ensures correct offset values after adding or removing items, fixing the issue of incorrect offsets while scrolling."
"this ensures robustness in case of unexpected errors (e.g., temporary unavailability, corrupted data)."
"This ensures that any changes to the Title property are observed and updated in real-time, resolving the issue where the title did not reflect updates dynamically."
"This ensures that context actions are visually and functionally tied to the DialogFragment, improving the overall user experience."
"This ensures that property updates, such as title changes, are correctly applied when ShellContent is added or removed dynamically."
"This ensures that the code cleanup process respects any changes that might have occurred concurrently, avoiding conflicts or invalid state in the solution."
"This ensures that the event is only fired when there is an actual change in size, preventing unnecessary event invocations."
"This ensures that the layout is accurately recalculated, allowing the ScrollView and other elements within the TabbedPage to be properly measured and arranged during the subsequent layout cycle."
"This ensures that the presented content (the Grid) updates its size, along with its child elements, including the Border, inner ScrollView, and Editor."
"This ensures that when focusing the entry control, the cursor position and selection are both applied correctly."
"This example (along with the #code example previously mentioned), makes me wonder if there aren't a lot more bugs related to #code that need to be flushed out."
"This exception occurred due to the triggering of the TemplateCollectionChanged event, which was introduced during the implementation of drag-and-drop functionality for the CollectionView in PR #3768."
"This feature (ConnectionGuid) is available since Windows 21H2 (22000), so it's not going to work on older versions and we will fallback to the original behavior, calling CustomValidationCallback per request."
"This feature will make Grid markup less verbose, allowing developers to create grids with simpler syntax."
"This fix appears to help with that, but I've also noticed a minor change to shadows of things inside a border with a shadow applied."
"This fix assumes that the application was designed for the DefaultFont and that the current sizes are still set to the ""initial"" sizes."
"This fix fixes the problem when due to the code being smaller, the remaining code part after the real precode code was filled by code from the next block of code, which caused misclassification of the StubPrecode as FixupPrecode in PrecodeStubManager::DoTraceStub."
"This fix takes a conservative approach by disabling inlining for these methods (which we shouldn't really do even if the codegen were correct), reusing existing functionality."
"This fix was merged into .NET 9 in September 2023, and has been in place since Preview 1."
"This fixes #20871, by making sure that #code is not added to the required permissions for #code or #code if they are declared with the #code flag."
"This fixes actually two things, not just one and I'm fine with only fixing the #2995 / #9035 if desirable."
"This fixes the ""missing ssa def"" issue seen in #105667 (where the only use of a local is an USEASG which does not make the use live) and also allows for a bit more VN based dead stores."
"This fixes the ""x of y"" that narrator says, but doesn't address the grid/table size."
"This function also handles the case where both #code and #code components have a slash, removing the trailing slash from #code to avoid duplication."
"This functionality is best used with SPMI: Just set #code when compiling a method, and then pass the resultant parameter file #code to the external optimizer."
"This gives some of the reasons behind why we have these branches, the alternatives we've considered and the challenges those run into."
"This had a TODO comment to use mergesort, but LINQ offers a highly optimized quicksort that would be just as good."
"This handler analyzes methods and fields present in the generated C# file of a Razor document and returns information about them (return type, parameter types, symbol names)."
"This happens because the OnItemsVectorChanged event is triggered whenever there is a change in the item collection, causing ListViewBase.ScrollIntoView to be called from a background thread, which leads to the COM exception."
"This has always been the case since XF went open source, is this going to change in future versions?"
"This has broken in a few ways, let's get it fixed to get sanitizer testing working again."
"This has nothing to do with my changes, as it's happening on the main branch as well, most recent commit."
"This idea came from thinking about that, in fact I just wanted to partially inline Delegate_InternalEqualMethodHandles into managed, moving the handle fetching didn't seem trivial to do so I just cached it in a field."
"This implements target-typing, deconstructing and inferring tuple types in a switch expression."
"This includes an audit of dprintf(1, ...) sites."
"This includes types from WPF and some BCL common types (Like int, bool, string, etc)."
"This is _a_ solution, but not sure if it potentially breaks something else or if it's desired."
"This is a new feature that allows WPF application to be both a drag source and a drop target for virtual files, i.e."
"This is a prerequisite for #67881, since the struct enumerator for #code only supports a single level of nesting."
"This is a stricter condition than checks on BytesCommitted/Pending - for example, if the writer reports the expected #code value but still writes more than it should then the test won't catch it."
"This is a supporting type for #30929, but can also support many other use cases where lock-free optimistic initialization is desirable but the initialization function is asynchronous."
"This is a very old and very big code base, you'll find code that you would've written differently than what was written 10 years ago and you'll find code in the future that you would've written differently than what was written today."
"This is a very trivial case, it would be great to see a more complicated scenario where this makes more sense (if one exists)."
"This is already a change worth merging on its own, enabling developers to implement the above scenarios with a reasonable effort (replaces #6353)."
"This is also affecting us, an app with millions of users being forced to migrate to MAUI."
"This is also similar to the behavior of intellij, though VSCode does not do this."
"This is an attempt at moving as much as posssible of the Roslyn packages to a background thread, removing unnecessarily UI thread dependencies."
"This is an extreme example, but I think it's sufficient motivation to trade consistency for profile fidelity."
"This is another problem with OSR methods: When creating a new method entry block to jump to the OSR entry, we guess that its weight should be 1% of the OSR entry block's weight."
"This is because #code calls are handled internally and,"
"This is because in case of grouping, the position and size are returned by #code."
"This is because it is in #url project, and this project is only targeting net472, which is referencing the netstandard 2.0 version of AsynchronousViewTaggerProvider."
"This is because Microsoft.CodeAnalysis.Diagnostics.SuppressAnalysis.Context.ReportSupression() checks to see if the object is in an array, which uses an Equals() check, which fails."
"This is because the application is continuously allocating large objects, leading to continuous background GC."
"This is because the subscription to changes in the list happens after items are added to a private copy of the list, providing a window between the copy and the subscription in which changes can occur unnoticed."
"This is because the system recognizes the field as intended for a one-time code rather than a password, and thus, it doesn’t show password suggestions."
"This is being merged into 17.6, but the existing feature flag is being flipped for 17.5."
"This is broken since NET8, in NET7 and NET6 this was working correctly."
"This is causing builds that should be failing with restore errors, to instead later hit a less helpful runtime error."
"This is checking for #code, which should throw an overflow exception."
"This is clearly a bug, the field shall not be #code but an instanced #code as the event should describe the state at the exact point of time it was generated."
"This is complicated by the fact that we do not restore packages from nuget.org to avoid supply chain attacks, but the vulnerability warnings only appear if you use nuget.org as a package source."
"This is currently possible only when the entry block is part of a loop, or when we compute a weight for the OSR entry fixup block that differs from #code (which we #url)."
"This is currently used for an editor, and I've applied it to the picker and entry"
"This is different to UWP/WPF/WinUI, so it may be better or it may cause people to get surprised coming from another XAML framework:"
"This is due to platform-specific keyboard input handling, which operates independently of control visibility."
"This is essentially calling #code, which is a no-op."
"This is expected to make the writebarrier slower, but improve the performance of the GC."
"This is fairly rare, but not uncommon, and it's helpful to know that that's the pattern and contract happening here."
"This is fairly simple and could be powershell, except that it needs to run on unix as well so would have to be duplicated in build.sh."
"This is fine, because virtual address space on 64 bit is much larger than actual physical size on devices."
"This is handled by the #code flag, which is not touched as part of this PR."
"This is in multiple commits for clarity and history, should not be squashed."
"This is infra only, so I marked it servicing-approved."
"This is just the API's name, and first focus on the class name and the API name."
"This is less of a concern inside VS as that has a ""fast up-to-date check"
"This is mainly for windows, but android does have a few as well."
"This is meant for diagnosing issue only, do not review, do not merge."
"This is meant to be very straightforward (as the main modification is done to #code and other modifications are just to comfort the change), so a lot of strings were kept, that's not an oversight."
"This is my first time looking into a #code repository or working with VisualBasic & XUnit, so I figured I should do the skeleton first and then move on to the next step."
"This is my first time writing test code that uses NavigationPage, so if there are any mistakes, could you point them out?"
"This is needed to guarantee that there's no oveflow during computations on 32bit, for example, during"
"This is no longer a prerequisite to #35439, but merely serves to correctly represent the behavior."
"This is not currently a build-time analyzer, so under default configurations it only would report a warning for code a user is working in, which most likely would be new code."
"This is not great for IDE usability, as the compiler can't make any type inferences on the callback parameter until the #code argument is actually specified."
"This is not ideal, because later mmap will most probably fail trying to reserve 2.5 Gb, and actual working max size for SOH will probably be just 256 Mb (1.25 Gb for SOH+LOH+POH)."
"This is not to be used as a justification of why we _cannot_ move away from a -vs-deps model, but rather the new problems we create if we do so."
"This is probably one of the impactful PRs I've posted; optimizes conversion/parsing of all the base-generated types but also #code (once more), #code, #code and #code."
"This is really old PR (almost 1 year old) and rebasing, the changes in the Android GestureManager is no longer necessary, so, this PR now only includes an UITests validating the behavior."
"this is saying if you only specify the total hardlimit, we will divide this limit based on the number of heaps (and not let it fall below the min seg size)."
"This is some TypeScript tests we're going to try holding on the Roslyn side of things to catch ""silly"" breaks where we've dropped things on the floor because we assumed projects have compilations, etc."
"This is still a bit too much, as demonstrated in #url"
"This is still a serious open bug in MAUI 9, with an easy fix, where any iOS app running on macOS devices cannot use the file picker."
"This is the scenario I came across, which threw an exception because the operation was not running in the UI Thread."
"This is the simplest way to test it if you don't have API changes to an MSBuild task, which you don't."
"This is true for all of the bindable properties on the #code, we take their value and apply it straight to the native view"
"This is unfortunate, but it is how XmlSerializer has behaved for decades."
"This is used by the #code, so it could gain a bit of perf."
"This is why the equality logic (as opposed to the hashing logic) is encapsulated in the ExpressionComparer struct, which is instantiated for each invocation of Equals - this allows a private instance of _parameterScope which doesn't conflict across multiple concurrent invocations."
"This is, once again, precisely what happens in #code as well; specifically here:"
"This isn't a great resolution for me, at least for the current state of minimal integration between the IDE experience and API docs."
"This isn't for code that RyuJIT produces, but rather the code generated by #code/#code for #code itself."
"This issue caused the test to fail with a WaitForElement exception, as the second button was not visible."
"This issue has been a source of great frustration for years now (#url and generally, there's nothing the server dev can do when there's an unexpected client behavior (e.g."
"This issue is further exacerbated by the fact that sometimes tapping outside the keyboard does not automatically hide it, leading to a frustrating user experience."
"This issue is present when you attempt to update via any of the public properties (#code, #code, #code) after all the public members of Track has already been previously set (and therefore #code is initialized and has stored all three properties)."
"This issue occurs only when resizing the Mac window, and we could not find a way to automate the dynamic resizing of Mac windows."
"This issue was customer reported #url It impacts customers using reflection to obtain the value of a virtual property, on iOS."
"This just fixes the spaces, there is another issue for square brackets."
"This leads to improper handling of certain valid URLs, causing them to be treated as relative paths instead of absolute URLs."
"This limitation has been extensively discussed in the past (#144, #url and some website was lost: #url)."
"This lock order problem is NOT related to what you are doing, but if you could modify #code to always just return #code and rerun the crossgen2 outerloop, I'd be obliged."
"This log is an in-memory circular log that stores messages as ""offsets to format string in memory and array of arguments as #code values""."
"This looks like a runtime issue, considering the failure is specific to delegates, right?"
"This makes it suitable for cryptographic random number generation, something our Guid generator needs."
"This may be acceptable though since these types are semi-implementation details and typically are not used directly, but are used via the abstract types."
"This may be the fix I need for my project, is there any target version for this?"
"This means #code can re-use an emitted method as long as the signature is compatible while #code uses a method handle as an operand meaning the handle is embedded in the IL, and thus the generated IL is coupled to that specific method and can't be re-used."
"This means as long as there are threads waiting on the writer side of the lock (in this case: launching processes with redirection and InheritHandles = true), threads on the read side (no redirection) of the lock will never acquire the lock."
"This means many other methods, such as all property getters\setters on reference types, will not need to be emitted."
"This means that even if a list is left out of an xml payload or explicitly tagged as 'xsi:nil', the deserializer will still create an empty list."
"This means that if a language comes up with new constraints that don't exist at the IL level (like #code in C#) it will be the responsibility of the language compiler to also guard based on that (so before entering the constraint bridging block, there will be an additional check that depends on the type of the constraint - it is my understanding that #code should be sufficient for #code)."
"This means that if it is late on startup, it can be set before the WPF initialization which reflection is not needed."
"This means that reserving 75% of total physical mem will reserve 75% of whole virtual address space, which might be both undesirable (e.g."
"This means that the query gets fully recompiled every time the mutable thing has a different actual value: the recompilation is quite expensive, going through the entire query pipeline."
"This means the interpreted path for CoreClr is not used by default any longer, but the feature switch #code is still supported."
"This method applies overly strict checks, including the #code test, which can incorrectly reject valid URLs, especially those containing encoded characters or international characters."
"This method ensures that the ItemsWrapGrid.ItemWidth and ItemHeight are set based on the FormsGridView.ActualWidth and FormsGridView.ActualHeight, allowing the ItemsWrapGrid to resize appropriately in sync with the CollectionView size changes."
"This method was previously using string.Split, which allocates an int[] for processing and allocates a return array."
"This might address some instances, but there's probably more too."
"This might also break Out of Process stack walking in the DAC, although I'm not sure since the only part of coreclr we'd care about is FCall"
"This might be by design, but if user's not aware of the pitfalls of #code then it could potentially introduce a bug."
"This mismatch causes the OnAppearing() logic of the previous page to execute at the wrong time, resulting in unintended behavior."
"This occurred because the internal arrangement logic provided by the base implementation was skipped, leading to incomplete layout updates."
"This occurs because the Picker's focus changes during navigation back to FirstPage using Navigation.PopModalAsync(), triggering a click operation on the Picker, which opens the dialog regardless of MainPage's visibility."
"This occurs because the same #code is being opened a second time, while the first stream is still open."
"This often means the change made to the compiler broke it, and prevents it from being able to compile itself."
"This one was a partial class from #code, containing a simple wrapper for #code with a #code check."
"this or is really just the first step, getting the base types defined and out, which will then allow incremental exposure of the full set of math APIs"
"This overrode the natural 8-byte alignment (due to the #codes) of all the structs, instead of just the overlay struct with the byte padding in it."
"This patch doesn't enable heap hard limit on 32bit in containers (#code), because current heap hard limit approach is to reserve one large GC heap segment with size equal to specified heap hard limit, and no new segments are reserved in future."
"This patch introduces a new compilation phase that passes over the #code looking for #code nodes on integral types, and morphs the code to introduce the necessary conformance checks (overflow/divide-by-zero) early on in the compilation pipeline."
"This PR addresses several issues with the IndicatorView when using a DataTemplate, particularly around collection updates."
"This PR addresses the issue by correcting the conversion sequence to remove any XAML escape sequences from the NavigateUri value first, thus obtaining plain text which can be correctly escaped for RTF."
"This PR adds new config that specifies the percent of youngest gen to keep during trimming, which allows to balance aggressiveness of trimming and effect on startup time."
"This PR adds support for populating OpenAPI documents with XML doc comments discovered on method, class, and member definitions."
"This PR adds the ""_name.comment"" to certain json files to dictate to undo any translations of those words and to make sure we don't translate them in the future."
"This PR comes with a ""Works On My Machine"" guarantee :-)"
"This PR fixes an #code on Big Endian systems (e.g., s390x)."
"This PR fixes following behavior: Ocassionally, #code might be thrown when setting up WPF trace sources, note that the class might be used by multiple threads by default without forcing it; e.g."
"This PR fixes the issue by fully qualifying all types used in generated code that is placed in user namespace, using global alias."
"This PR fixes the issue by matching the #code API fallback for legacy applications, i.e."
"This PR is the first draft for the C# side of things, and implements the following:"
"This PR just keeps track of analyzers that have generated results for span based analysis, and uses those results if a subsequent matching request comes in on the same compilation."
"This PR mainly changes that query to use the column name from the #code catalog view instead, which is supported by Dataverse."
"This PR seems sensible, but both WPF and UWP chose not to propagate this value."
"This PR should target #code, or not?"
"This PR takes the approach suggested in #url and runs SyntaxNormalizer one token ahead of where it previously looks at, adding newlines as leading trivia rather than trailing trivia."
"This PR was actually written back when that was, but that other PR came late in a cycle and we wanted to have time to react to any potential issues."
"This PR's approach is to look up the type of each static struct field on an interface, and if it's a typedef (not a typeref, which means it's in the current module and can form a cycle), we scan the interfaceimpl table for that typedef to see if we're in it."
"This predictably caused a chain reaction of other versions that needed to be bumped, so they all are taken care of as well."
"This prevents any new input from being queued and ensures that the keyboard is cleared when the control is hidden, restoring a clean state upon visibility restoration on Android and iOS."
"This prevents the Background from being null, which could cause hit-testing and rendering issues in the overflow menu."
"This provides an implementation of #code in Microsoft.Bcl.Cryptography to allow using it in .NET Standard 2.0 and .NET Framework, if the target platform is Windows."
"This provides around 80-90% of the performance benefit, allows use of #code to pass slices to the converter methods (as you cannot box it in #code), etc."
"This pull request conflicts with my pull request #112178, but I created this as I expect this PR to be backported to .NET 9."
"This pull request, alongside #url, which addresses the rendering and sizing issues of IndicatorView with DataTemplate, should resolve all known issues with IndicatorView in this context."
"This really needs someone familar with the code to pick up, and treat my PR as a proposal."
"This reflection capability requires fallback to interpreter, where the app crash occurs in this scenario."
"This replaces literals with #code for parameters and properties, nothing else."
"This resolved the issue, ensuring that the text color was applied exclusively to the menu items within the NavigationView, without affecting the items in the overflow menu presenter."
"This resolves the illegal instruction encoding by no longer pretending that #code and #code are 'conversion' instructions, which have different encoding forms."
"This results in an awkward pattern of just typing an empty lambda, filling out the #code parameter, and then going back to the body of the lambda to fill it out."
"This saves allocations in many instances, and makes for a more readable code."
"This seems a bit wonky when using a centered Slider and a fixed width, I'm getting negative values that are being set."
"This seems to have exposed some asserts in LSRA -- @github should we address these in a separate PR, or here so we don't block outerloop CI?"
"This sequence may cause styles and Visual State Manager (VSM) states to not apply immediately, as styles are typically applied after an element becomes part of the logical tree."
"This should be fixed either on the processing side, or by some contract, such as ContentWrapperAttribute."
"This should be fixed later, I'll create a tracking issue."
"This should be unnecessary since #code already normalizes with #code, and wrong in cases where the entry block is reachable via loop backedges."
"This simplifies the managed code and allows us to implicitly use even newer ISAs as they become available, without having to go back and touch the code again."
"This sounds like something I'd like to pick up, could we outline which exact syntaxes fall within the above definition?"
"This source generator identifies queryable LINQ queries which we know we can precompile, and injects a special marker node into their expression tree to make them work in the inner dev loop; any query without this marker node represents a query that couldn't be precompiled, and causes an exception."
"This specific function is for checking types of IR nodes (and certain shapes) for flags, I believe, we already have a logic (the one that complains on missing flags etc.)"
"This still leaves an uncertainty like,"
"This style applies if and only if the #code, if present, will be the final token on its line."
"This taps into the existing logic for handling self-referential static fields and seems to work, though I had to tweak some code related to enums."
"This test occasionally fails to save a document prior to sending <kbd>Ctrl</kbd>+<kbd>F4</kbd>, which leads to a Save File dialog that causes a test failure."
"This test, #code will flag those."
"This test, #code,  will compare each string in the english resx to the other languages and flag any that identical meaning they are not translated from english."
"This test, #code, will go through all the .lcl files and flag any that are missing that tag."
"This tooling doesn't allow any duplicate packages, so change our publishing logic to the following:"
"This unfortunately requires way more effort, this is just one out of many things that need to be addressed before the runtime PR would be unblocked in a way where it doesn't implement a new type / or using a switch."
"This updates the rules, but also adds them to our template so users will get them by default in new projects."
"This uses StringSplitOptions on the splitting, and combines the interpolated strings."
"This version of the API is no longer supported by Facebook, and should be upgraded to v22.0."
"This was an idea that @github and I had -- we should stop producing compilations for the remote workspace entirely, because any attempt to use them is going to be incorrect since there are never any references whatsoever."
"This was created under the assumption #67739 could be fixed within Roslyn, but it seems to be a platform bug."
"This was running for an hour, I can run for longer if required."
"This was the only case of a CLS Compliance warning that would be issued when a member is not visible outside the assembly other than the ""this CLSCompliant attribute is meaningless""."
"This was to provide the serialization exchange types to the RPC client, as well as share some useful helpers that were needed on both sides."
"This was too much, so we restricted it in #92994 into:"
"This was used as an optional bool, which is representable in MSBuild"
"This way, if we tell the optimizer to report its best traversal (via the #code switch), comparing it to the JIT's layout is simple: linearly-increasing traversals (#code etc) show agreement between the two."
"this week where I posited a potential way this could happen, which is a"
"This will be useful should further improvements be made, or other targets (SVE?) added."
"This will enable controls to implement sorting and grouping using commands, and specifically allow #code to sustainably handle sorting using keyboard instead of #6873."
"This will end up in our commit history, having something that describes better what this does makes it more easy to navigate that later."
"This will hardly make the original performance worse, if we do not use this feature."
"This will impact both #code and #code, sometimes the error can be quite large there."
"This will increase performance 3x and almost 4x times increase can be observed should you query data formats with wrong casing input (which shall not be the case of WPF itself but if used externally, it might)."
"This workaround isn't great, because it still requires folks to filter out the problematic methods that are marked as ExplicitInterfaceImplementation instead of PropertyGet and PropertySet."
"This works on Windows, it is not working for me on Linux."
"This would be my expectation as well; I'll double check (actually, I'll add a test), but IIRC it currently results in #code 😞"
"This would be necessary to move SOS to use cDAC to implement StressLog dumping in managed code, or any of the other commands currently implemented in the native portion of SOS."
"This would have 2 errors: one for the illegal #code argument, and one for the use of #code in an unsafe context."
"This would have no effect for in-process running though, as for in-process we will never reach this point (there's no remotehostclient, so no remote calls are actually made)."
"This would just be for the conversions, something like this:"
"This would no longer work, but I believe that risk is minimal as the types would not be recognized as compatible by the type binding system."
"This would only require some of the implementations to have special handling to ensure this, while the rest could remain the same, still giving greater performance than #code in the general case, but also allowing external consumers of the API to guarantee they can get #code when they need it."
"This- would allow the information to be easily accessible, yet, not clutter the limited amount of display room available."
"This, as well as ""method arguments must match"" checks, and likely other places."
"This, of course, implies that actually used live-objects fit in specified limits (otherwise, there'll be OOM)."
"Those tests are completely fine to have and are in no way discouraged, but we want that behavior to be opt-in since it's the less common case."
"Those would go through EventSource.WriteEventWithRelatedActivityIdCore, which needs m_eventData, which would be initialized in CreateManifestAndDescriptors, but the exception ""Event MethodEnterTraceLtm has ID 11 which is already in use."" is thrown first and causes the initialization to be skipped."
"Though let me try disabling the jump-to-next removal optimization, and see if that fixes the failure locally..."
"Though perhaps we could add an additional option like #code or #code that would print a bunch of different stuff about the generated code immediately after/before this, e.g., number of loops, number of cloned loops, number of CSEs, etc."
"Though the functions called #code are only called by this method where I've done the fix, it made sense to me to make it here where it's being decided and not somewhere in the actual calculation."
"Throughout roslyn, we have a lot of callback-based code that uses a #code parameter for context, to avoid costly repeat lambda allocations."
"Thus, as long as that file is open, we will leak all intermediate versions."
"Thus, the emitted code should remain unchanged by this change."
"Thus, the key will be non-expiring which leads to potentially exhausting Redis storage and logical errors in applications relying on key expiry."
"Thus, we tested it in a Debian Trixie docker container on the same system that had libc with #code enabled."
"Tiny improvements in speed, IL size and JIT code size."
"Title = ""TestTab"
"tl;dr the failure is not real, those two generate different results."
"to 5.0.0-rc.2, both for local runs and BrowserStack runs."
"To address this issue, we stopped mapping the background color to the View element and instead mapped it to the graphics view."
"To address this limitation, I propose intercepting the creation of the ActionMode when the FragmentManager detects a modal fragment."
"To address this, a condition was added to ensure that if the move value is less than 0, it is reset to 0."
"To address this, I have implemented logic on Windows to ensure these events are triggered."
"To answer your question, I'm not aware of a way to count interop calls precisely but #url gives good enough estimation of improvements so I'm currently happy with it."
"To assign a Map ID on Android, you need to add #code to Resources/values/strings.xml."
"To avoid ambiguity about ""toggling a line comment"", I would state it like this:"
"To avoid derailing my consolidation plan, I've decided to refactor #code into a utility for 3-opt to use."
"To avoid this problem we use the APC to suspend the thread, but then we enable the single step and continue the thread execution, this will exit the apc callback and pause in the single step, so we are allowed to SetIP to FuncEvalHijack to run FuncEvals."
"To be clear, I wouldn't prefix them at all."
"To be clear, this should apply to all lines included in the selection (except where caret posn = 0)."
"To be honest I do not see the constraint properly encoded in LSRA for the common RMW nodes or for crc32, which is a bit scary."
"To be honest, no."
"To be sure, this is all defense-in-depth."
"To construct this PR, I wrote a small tool that went through all of our non-public, callback-taking methods (namely, generic methods with a type parameter named #code, a parameter of that argument, and a parameter of a delegate type that is generic and takes a #code parameter)."
"To demonstrate a real performance improvement, please include numbers of performance benchmarks, and/or the detailed ASM code for comparison."
"To do this, we just need a bit more access to the Roslyn Lsp types."
"To enable asynchronous code cleanup, we have introduced a check to verify whether modifications can still be applied to the file after asynchronous operations have taken place."
"To ensure clean conversion, escapes in one format must be removed before attempting to escape in another, especially in cases where there are overlaps in characters involved in escape sequences (i.e."
"To ensure we're accurately capturing the events we want to be capturing, I've moved telemetry initialization to on workspace start."
"To explain this a bit further: these aren't intended to be a deep test of your functionality, but just a quick test to make sure any ""really dumb"" breaks are caught."
"To fix this, I have introduced a new type, #code, as a counterpart to the existing #code."
"To get the appropriate warnings from Roslyn analyzers, we should align the #code attribute for public-facing #code APIs for iOS and Android:"
"To goal of this PR is simply to allow people to experiment with turning off #code, so that they can try out things (e.g."
"To implement all proposed installer changes in #47115, then in the out-of-process folder three files present,"
"To improve MAUI performance, one needs to decrease the number of interop calls needed to display a single MAUI window, that is something like:"
"To improve performance, we will calculate it #code property."
"To inherit #code from #code, #code needs to be public, so if these changes are okay then I will modify the public API perhaps"
"To limit possible risk, I added new member to existing and transient #code e.g."
"To make #code work on 32 bits, we need to have an accurate way of maintaining how many bytes are currently committed, I don't think I get the calculation right there yet, and that is perhaps why the CI is failing on 32 bit platforms for now."
"To make this actually work nicely, I need to modify the heuristic for generation size growth estimation."
"To make this easier, I think we can"
"To make this process easier to review, I have split this into 4 commits."
"To me (and i could be wrong here), the problem sounds like:"
"To memorize user's choice, this PR change them to use #code to read/persist the choice."
"To merge this, someone should audit the usage to ensure those guarantees aren't actually being relied on."
"To modify the address, the hacker would need to know the secret per-process key."
"To my eye crossgen r2r has the same set of failures on x64 and arm64, so it looks like this is good there."
"To resolve the issue, i called the ScrollFinished method if the target scroll position and current scroll position is same because the ScrollFinished method will mark the task as completed."
"To resolve this issue, the following modifications were implemented in the relevant code segment:"
"To resolve this, apply the correct item spacing from the LinearItemsLayout."
"To resolve this, we can ignore the addition of the footer template to the ItemsSource."
"To rewrite the stack, first load the existing return address from the stack and un-encrypt it to make sure it's a valid value (faulting if not)."
"To see the change, I have to restart the application."
"To see what will happen when 1ES enforces it, I tried manually enabling it in a separate run: it takes 1h 16min: #url"
"To set expectations: we'll have a look at this and discuss things internally but: we're rapidly approaching lockdown for net8, especially since this involves API changes."
"To solve this problem, set the post-rotation size to"
"To some extent, my ""scale up"" comment has a similar problem (i.e., which values are scaled and which aren't?) -- this could be addressed by having the computation be #code and calling it something like #code."
"To start with, the key difference between 32 bits and 64 bits is #code."
"To stress test the calculation, you can turn on the #code, that will stress the size computation logic a lot more."
"To test the changes, I have added controls to the DatePicker Gallery within the Maui.Controls.Sample."
"To understand this PR, it is good to know that each virtual view (e.g., MAUI's #code) is mapped to a platform view (e.g., #code on Windows) on each supported platform[^2]."
"To validate the position, probably a Device Test  where validate the #code Frame  property would be nice."
"To work around this, I updated the #code method used by most of our project template tests to call `dotnet list package --vulnerable --include-transitive --source #url"
"To work around this, I've reverted the previous change and instead included the #code and #code (previously #code) inside the #code and conditioned them by"
"TODO - sequential flag is being passed on helix, no env vars, wrong work item txt path, rehydrate overwritten"
"TODO: do some ad-hoc testing, make sure test coverage is good"
"TODO: Hot Reload, .NET vs Core vs Mono, Reloadable Types, multi-process attach"
"ToList(), ToDictionaryAsync()."
"Toolchain in ""runtime-main"" is library before change and toolchain in ""runtime"" is library after change."
"Totally forgot; just wanted to say I fully agree with the statement @github, was just trying too hard to sell it."
"TP diffs are a wash; in spending less time on the initial layout, 3-opt has to do more work in some cases."
"TP improvement is quite small (and almost nonexistent when compiling with MSVC), though this might help keep the cost of rerunning 3-opt down if we decide to implement some strategy for improving upon the single pass."
"Treat static struct type fields in interfaces as self-referential, similar to static struct type fields inside of structs."
"Trigger the animation complete even upon fragment #code so that if the navigation is still waiting, it can complete."
"True, we can add them when these patterns are recognized and these code gens can be tested."
"TSPLIB consumes a parameter file specifying various options for the solver to leverage, as well as a problem file describing the flowgraph."
"Two new types are introduced, #code, roughly corresponding to #url and #code, which is technically a list of file descriptors paired with corresponding streams."
"txtLog.Text += (""After ScrollToAsync"" + Environment.NewLine);"
"txtLog.Text += (""Before ScrollToAsync"" + Environment.NewLine);"
"Ultimately this feels like a design decision, and I think there a pros and cons for both ways."
"Ultimately, this reduces the amount of time needed to JIT compile this #code (which was around 25ms) and should improve the execution time."
"Under #code, we never call #code with a memory range that contains committed memory."
"Under non-#code, however, it is known that we sometimes call #code with a memory range that contains committed memory."
"Unfortunately #code doesn't expose a #code (or similar) flag directly, but it does allow me to pass the vstest flag by appending #code to the #code args."
"Unfortunately instructions like #code, #code, #code etc do not have variants that work on 64bit elements - they only have 8/16/32 variants."
"Unfortunately, Apple is not 100% consistent, so they have not added an #code for the same purpose, so here you have no way of reliably detecting if your iOS app is running on Vision OS."
"Unfortunately, as-is for WASM scenarios we can't directly apply them when trying to find the root causes of out-of-memory failures:"
"Unfortunately, getting these committed counters correct for segments isn't a priority right now."
"Unfortunately, it looks like the autoformat in VS made a bunch of whitespace changes in AssemblyChecker and ResultsChecker, I'd recommend hiding whitespace diffs."
"Unfortunately, looking at our collection of test cases that are currently all broken as a result of this PR, I must also weight in the amount of work required to rework everything on our side and that effort would be significant."
"Unfortunately, that is blocked by #101628"
"Unfortunately, there is no way to enforce specific naming styles on build (the ones set to #code) without also enforcing the ones with lower severity (ones set to #code will be escalated to error in CI)."
"Unfortunately, these types leaked out of a few MAUI types and thus changing it would force us to now expose a new #code argument in methods and return types of properties/methods."
"Unfortunately, they uniformly put #code _after_ the delegate type."
"Unfortunately, this does not seem to be the case as the event is only called when the Date value is changed."
"Unfortunately, TSPLIB only accepts integral values for distances, so the layout costs are truncated -- this imprecision sometimes leads the external optimizer to different optima that aren't truly better than the JIT's answer."
"Unfortunately, we don't have any symptoms when the wrong happens, and failing at the end is too late."
"Unfortunately, your benchmark is not representative because #code will not cache arrays with more than 1024 items (See the limit #url)."
"Unfortunately,, I cannot fix this problem: #url because I don't have Windows"
"Unifies the syntactic classification of all suffixes on literals, bringing numerical literal suffixes in line with the #code suffix for string literals."
"Unit test has not added yet, so draft now."
"Unless I am missing something we can use the fact that up to the height/2 of the tree, we have a complete tree and only fall back to a different way of calculating the index of nodes in levels after that."
"Unless there's a real savings, I'd rather keep the code simple."
"Unless this is an urgent perf fix, we'd prefer to wait until Julien is back, fix the API, and then pull that in here, rather than working around it now."
"Unlike downstream alternatives based on #code, these methods continue to be correct since newer versions of the compiler will always have the correct implementation of the check at runtime."
"Unlike in other key combinations of interest, the #code class does nothing else other than inject the space character."
"Unlike most types in CoreCLR, the StressLog was never DACized."
"Unrelated to the recent LSRA block order changes, but I noticed that for blocks with multiple predecessors, #code picks the predecessor with the largest block weight to get the current block's live-in variable register locations from."
"Unsurprisingly, synthesis is prone to taking multiple iterations to converge for OSR methods, which typically leads to loop weights being flattened by increasingly blended likelihoods."
"Until now, it is unlikely that anyone has created derived classes, so we are opening up opportunities rather than taking them away."
"Until someone encountered an unexpected situation, and ask IDE team fix it."
"Up to now we have passed in the #code array into #code, requiring it to be trimmed beforehand which results in an extra allocation."
"Up-to-date codegen (note: the amount of cases I tested is perhaps a bit over the top, so check the c# code to see what cases you'd like to look at before looking through all the assembly - the main ones for non-constant indices are the #code ones; should include most improved scenarios): #url"
"UPD#1: converted to draft PR as other tests fail (CollectionExpressionWrappingTests), not sure the code change is the right one"
"Update: Apparently you made the change, so I bet it's intentional, can you fix the tests ?"
"Updated the Blazor Hybrid Solution template to better support using the dotnet cli or IDEs that rely on it, like VSCode and Rider."
"Updated the GetDecimalSeparator method to retrieve the DecimalSeparator from the current culture using CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, ensuring accurate and culture-specific formatting."
"Updated the ImageButton to implement ICrossPlatformLayout for handling measurements, ensuring that content measurement accounts for padding values as expected, thereby improving the layout behavior."
"Updated the MemoryExtensions class with new methods for efficient whitespace handling, including ContainsAnyWhiteSpace, IndexOfAnyWhiteSpace, and LastIndexOfAnyWhiteSpace."
"Updated the Stretch.Fill case to properly consider the heightConstraint, widthConstraint, and HeightRequest/WidthRequest values when determining the final dimensions."
"Updated the Stretch.Fill logic in Shape.cs to apply the constraints (widthConstraint and heightConstraint) when WidthRequest and HeightRequest are less than 0; otherwise, it uses the specified WidthRequest and HeightRequest."
"updated, now looks like this:"
"Updates the .NET SDK to version #code, which also updates the .NET runtime from version #url to version #url."
"Upon commit (and setting the selection), it's desirable to be able to do the expression/body refactoring."
"use #code and #code to look them up, they are all resolved"
"Use #code more widely across codebase, addressing leftovers from previous PRs."
"Use #code outside type loader, and replace the usage of #code to #code for representing field GC layout."
"use Atan, but Asin), which is general purpose algorithm suitable for middle range displacements, but is quite complex"
"Use two rolling buffers to do file equality comparison since Read can return less than a full buffer, only advance a buffer once it is consumed, and compare the overlapping region."
"Use your new updated code to test these issues again, right?"
"User mouses over an expression, and they get a dialog saying we're computing this."
"user sets 780Mb for heap limit, but with this patch it'll round up to 1 Gb on both 32 and 64 bit)"
"Users are not expected to have been relying on the behaviour being legal, especially since multiple type initializations are already resulting in invalid behaviour due to JIT optimizations."
"Using #code instead we will retrieve the proper visual roots for Popups (PopupRoot), for open windows right after creation and for non-GCed #code's but detached from their visual root it will retrieve the container."
"Using defaults, gives this:"
"Using SharedPreferences.Editor.Commit()`, on the other hand, ensures the data is being fully saved before we quit."
"using the API as advertised, and SE.Redis is failing in a niche case."
"Usually, the failures of #code caused by newly added well known members are fixed by adjusting the #code statements inside the test to include the missing helpers."
"V04 is normalize-on-store, so its upper 24 bits are always going to be zero"
"var (left, top, right, bottom) = PlatformView.Context!.ToPixels(frame);"
"var clipRect = new Android.Graphics.Rect(0, 0, right - left, bottom - top);"
"Various control-flow related optimizations do not kick in for #code patterns properly, because JIT mostly works with #code types of blocks."
"Verified that setting #code to #code exhibits the bug on a monitor with different DPI and does not when the PR is applied, using various popup positioning."
"Very low - including symbols in symbol package, no product changes."
"visibility, while making all the #code"
"Visual Studio is picking the location, so I don't know how to fix."
"VS Code removed some trailing whitespace, so if you want to avoid seeing that, just check the ""hide whitespace"" box in the review settings."
"VS platform #url all LightBulb actions based on #code and #code again, and so any changes of order on our side that are out of sync with them get thrown away."
"Wait what, now the Text property is readonly?"
"warnings), if any, could be simplified as well."
"Was investigating a different issue and noticed that if the buildhost encountered an exception in handling a request, only the language server side stack trace was logged - the buildhost stack trace was dropped."
"Washington, unless no federal subject matter jurisdiction exists, in which case the parties consent to"
"We _also_ had some extension methods that were doing explicit casting from the interface to the concrete type that were working around this pattern, and implicitly hiding the fact that some code was dead."
"We added this for Editor without a way to disable, so maybe we need to come up with an API or something for net9.0?"
"We agree that this functionality would be good, and we would accept a PR that would move the caret down to the next line when the toggle line comment command is invoked on a caret location."
"We allow accessing lower 32 bits of #code locals with #code #code, but the same thing is not allowed for smaller types (a small typed #code really does mean a 32 bit int with some form of normalization in the upper bits)."
"We already expose bad request information via #code so anyone who is interested in seeing all of this already has a mechanism for doing so, and we don't show scary ""fail"" messages to people who don't care."
"We already found it valuable to be able to do that internally, which is why the single buffer methods already support this for internal use."
"We already had groups #code, this PR changes that to #code."
"We already had most of the components needed to wire this up in the NativeAOT PAL and in the EH DeveloperExperience APIs, so this wasn't as bad as I thought."
"We already have the #code concept, but this is for children of a layout."
"We already know 1 & 2, so I add a bit of signature decoding to determine 3."
"We also have a multiple application test, but it was only running for IISExpress and it didn't have a restart scenario."
"we are a little surprised by some of the changes, for example why the per heap limit is divided up this way (that it has to be a combination of 2, 1 and 1), also the change in #code is on unconditionally even for 64-bit."
"We are not sure if manually changing this ""description"" key will fix the break, but it is a temporary solution at the least.~~"
"We are not sure if we will, this was just an initial forway into this space."
"We are not under the same restriction for a brand new visitor, so we can strengthen the return contract across the entire new feature."
"we build debug local, it will hit undefined symbol #code when build drive.c"
"We can close this for now, but this will become an ask this quarter as we start focusing on startup scenarios."
"We can create a new task to make the change although we would have to do some tests beforehand to know if it adapts to all the conditions (for example, making a clip on a View, and applying a shadow, the shadow must follow the figure of the clipped geometry)."
"We can debug and I can show you the buffers, we can also capture the exact contents and span positions for testing."
"We can evaluate based on perf testing whether it'd be worthwhile to do so, but my expectation is the uses for GetHexString will involve shorter sequences where the perf differential will not huge."
"We can make the change, and then have an option to disable this if we run into any issues in the wild."
"We can mark it as draft if it still needs some work to figure out (not quite ready for another look yet), to make room in our review queue."
"We can observe that in implementations such as Microsoft.Maui.Graphics.Win2D, methods like PlatformDrawPath and FillPath rely on the PathF.PlatformPath property as a cache when obtaining platform-specific Path or Geometry from PathF."
"We can save a bit of TP by precomputing a loop-aware DFS for profile repair to use, and then letting LSRA reuse this traversal to avoid redundant computations -- I'll save this for a follow-up PR."
"We can set the background of Shapes with BackgroundColor, Background and Fill."
"We can't fix the interface scenario this way because #code doesn't apply to interfaces, only generic arguments."
"We compute semantic tokens with frozen partial, then kick off a task to send a #code notification when the real compilation completes."
"We could alternatively add a new compiler switch just for this purpose, and build on top the of the logger with a second 'write written files call' that puts them to the new location in disk case."
"We could alternatively keep it in method, while that removes the allocation it won't provide the 10ns execution benefit due to the stack init, and imho there's no reason why it couldn't be outside method, there's no readibility issue."
"We could consider scoping it for patch, but that can be a separate discussion"
"We could do something similar as the #code, which changes the type to something else."
"We could have a hard-coded list of the common immutable types (string, int, DateTime...) and constantize for those (when they're init-only of course), but constantizing for a type list #code (as in the example above) simply seems like a bug..."
"We could provide a hook for individual refactorings to run in process, but it will have a tremendous negative performance impact on those refactorings (they will no longer share a semantic model with other refactorings running on the same compilation, so moving a refactoring in-process means the entire burden of parsing+binding+analysis will fall on the refactoring that chose to run in process)."
"we create a symbol-to-symbol fix-up helper method as Jason suggested (#code), that method could live in IDE or compiler layer."
"We currently print one line at the end of disasm, like:"
"We decided to move the catch block since it's cold, but we kept the try block in the loop."
"we definitely don't need to add floating point support to our configs just to make this work, you can specify this in percent (or permil even, if you need more precision)."
"We did approve the API, but we were a little rushed."
"We do generally steer people away from *abusing* it, but it's fine to be used."
"We do not guarantee alignment of writes in #code, which means using an AVX-512 path could potentially regress performance due to stores that cross a cache line boundary (64 bytes)."
"We don't have tests for unknown errors, because if we knew what the error was we'd fix it :)"
"We don't have time to work on this for .NET 9, so we will review it in .NET 10."
"We don't have traces to confirm this might be their problem, but the fix is cheap and zero-risk."
"We don't keep track of the exact bound where the mark array was committed, so any time we need to ensure mark array is available and it isn't fully committed, we commit the whole mark array range every time we need it."
"We don't know what user has in mind, so we are bound to make the wrong decision occasionally with nested types like those (maybe intellicode could help with some statistical analysis?)"
"We generally tell users to simply use static method syntax instead of extension method - it seems much better for the few users who actually target mutiple databases to do this, rather than the vast majority of users who target a single database to have weird naming (FYI early versions of EF prefixed all extension methods with ForSqlServer and similar)."
"We had a similar build issue when bringing up Android runtime builds on CoreCLR, at one point it disabled the FEATURE_EVENT_TRACE using:"
"We have #code properties for control sizes, but not for fonts."
"We have #url and #url which show us explicitly not letting the transfer encoding exist on a HEAD response, however according to the RFC 7231 section 4.3.2~~"
"We have a couple of options for that, would you be able to look into that please?"
"We have addressed this issue by implementing a fix at this line of #url, where a default color is now provided to prevent a #code."
"We have ambitions of broadening this too (multi-guess PGO), but that and conditional escape interact with each other and I haven't yet tried to make the combination work well."
"We have an option to skip the analysis entirely based on global nowarn settings, but feel we don't need to implement that yet."
"we have done the way we do now, since the existing way is covering the higher up layer rather than the source."
"We have extensive tests to validate symbol start actions, you can see the references in test projects: #url and #url Especially see the references in CommonDiagnosticAnalyzers file, which have test-only analyzers which are used across multiple kind of unit tests in both compiler and IDE layers."
"We have the test #code which should have caught one of the regressions, but since it was testing for the lack of app shutdown it doesn't have any way to know that nothing happened, fixed the test to have a bit of a delay so it has a better chance of failing in the future if we regress this."
"We have tried the temporary fix, but it doesn't fix the problem for us."
"We haven't modified the contents of the array, so we don't need to call the RawStylusInputReport.GetRawPacketData method to create a copy of the array."
"We make sure to use TFMs with all assets, including #code, #code."
"We may need to check the operating system or implement a mechanism for the parser method to fail gracefully, triggering a fallback syscall as a recovery option."
"We may therefore for back-compat include check for both #code and #code but other converters (besides #code since it shares the bug) just check for their type, so in my honest opinion it would be best to unify the behaviour and mention in release notes."
"We may therefore for back-compat include check for both #code and #code but other converters just check for their type, so in my honest opinion it would be best to unify the behaviour and mention in release notes."
"We might be able to just remove the separate language name at this point, although that might make things more confusing than not."
"We need telemetry here as if we only track the cost of hte lightbulb itself, that doesn't tell us anything since that's the aggregate cost of all our individual fixers/rfactoring providers."
"We need to break up all the tests by category to avoid ""running out of windows"
"We observed that in a few cases this made things worse for perf: if you are on the UI thread responding to a legacy API call, calling an async API and awaiting it is potentially worse for perf than doing the work synchronously: it means you're giving up your thread (which was running code!) and waiting for a thread pool that might be backed up."
"We only do this if the type is exactly the List<T>, no derived types and no #code."
"We only want to reorder top level #codes, not inline ones."
"We piggy back on analyzer options to set severity, so we require them to have a specific form and treat them specially."
"We precompute more data about the value to make confirmations cheaper later, like the case conversion mask (see code comments around #code for more details)."
"We saw a user complaint of this taking longer than it should have, and this might help a lot, and won't hurt at all."
"We should be able to reintroduce the dependency analysis framework with this, but I will make that change in a separate PR."
"We should be able to safely upgrade to v22.0, the latest version, since there are no documented changes to the _authorization_, _token_ or _user information_ endpoints between these versions."
"We should either wait with merging this until we have updated the baseline, or define the syscall locally for portable builds like we have done in similar situations in the past see e.g."
"We should look at a targeted fix for .NET 10 here, even if it is behind a compat switch."
"We should not ignore any exception, so I catch it in the Stylus Input thread to make the exception do not break the Stylus Input thread and I rethrow it to the main thread."
"We should not release the COM object in RetrieveRequestedAttrs, because it will continue be used in attributeVals"
"We should probably add a similar test to our eventpipe runtime tests as well, if we don't already have one, stressing the dispatch session for runtime native events when spawning a large number of short-lived threads, it will mainly test stabilization, but could be valuable when changing the logic of ep_get_next_event and friends."
"We shouldn't add printing of additional various JIT metrics here, or even on separate lines."
"We squash PRs in the *compiler layer* of this repo, so no intermediate commits of compiler PRs are visible in the commit history."
"We still have a lot of bugs with the #code on iOS (I will open news issues) but for me, this MR works well for the given issue."
"We strip off the prefix and turn it into a tree option, it doesn't make it into the actual options bag."
"We tested various options, for some applications for Tizen there is a difference in results between 2 and 3 and 2.25"
"We were hoping the PR would be merged into .NET 9 since it addresses the issue described in #9467, which surfaced in .NET 9."
"We will have to skip, since we are not comfortable with the fix in its current form."
"We will remove the NetFX, once."
"We won't break anything existing, but the type='text' might be going to far?"
"We'll get to this when we can, hopefully sometime next week."
"We'll have to look at last week's LDM decision, as I'm not confident that I remember it correctly."
"We're interested in taking this change, but it has to go through API review first."
"We're on netfx, so i'm just copying their impl since it's faster :)"
"We're pretty focused on wrapping C# 11 at the moment, so likely won't be able to review this until some time in September."
"We're starting moving to 15.7 now, and will do a -vs-deps merge that might rectify this automatically."
"We're testing this in the main branch, not with .net9."
"We've had quite a few technical issues getting #url working using #code (I personally ported the XCT TouchEffect to maui line for line and it worked fine), and the issues our users are reporting cannot be fixed on our side since even if we hook into the theme changed event, the #code won't update to reflect the new app theme."
"Weird, it looks like the tool _.nuspec_'s are winding up in the Correlation payload, not the .nupkg's:"
"Well it's easy to comfort that rule because when you press auto format, nothing changes, since the codebase has been consistently formatted, isn't it."
"Well the collections are not really ILists, they are more like IReadOnlyLists with an Add method (and the Add method should be enough for this to work)."
"Well there is regression at ~40 length, where SIMD should start to kick in."
"Well you still would need to handle the exception in your #code handler, right?"
"Well, actually ""dotnet dev-certs https"" alone will create one if necessary (but untrusted).."
"Well, at first it did and many integration tests in the repo started failing."
"Well, currently, by using DateTime the code suffers from these differences."
"well, if it is possible to know the orientation supported by the app then we can just add a validation for it, otherwise, we need to think how to validate that for the second scenario."
"Well, kinda, previously it made sense due to use of #code, now its just a useless branch."
"Well, we can do that but we should also give options of the people to override the quality itself."
"Well, yes, if you turn it into a PR that does something entirely else, namely implement the missing support, then yes that will solve the problem."
"Welp after a long time trying to figure this out, it seems the only logical way to do this is to change how exceptionsdocs are exposed in the type it creates for method descriptions in the QuickInfo into some sort of list like way of holding individual exception data so that way it can be paged similar to how overloads are paged in the IDE currently."
"What *should* be happening in my opinion here is the same as the Visual Studio behavior, which is:"
"What about showing the IDEXXXX code in this column, and have it be a hyperlink?"
"What could happen is a asynchronous operation triggers a binding update, which would run synchronously in relation to this operation."
"What does the customer do to get into this situation, and why do we think this"
"What I dislike about (1) is that the API takes an offset parameter and if the handle turns out to be non-seekable, it is just ignored."
"What I meant by not handling namespace binding in this PR is that the spec does not permit binding a #code case into a namespace qualifier, only a type qualifier."
"What I would do is start with investigating those; fixing them and adding tests for the missing scenarios will likely resolve any other errors, or make them clearer."
"What if I'm writing a document with a pen and oops, the stylus stopped working, ok i'll just type."
"What if we just use horizontal aligned #code, then #code will be with additional margin?"
"What this results in that if you have a focused button and the visual state was some sort of border, disabling the button will not actually switch to unfocused and the visual state will remain with the border that was added when it got focused."
"What we want, is to call #codewhen the source is ""header"" and [FromHeader] is attached to an array."
"what would happen if #code was not set/cleared, and a name was specified regardless?)."
"What you are trying to achieve, and how you trying to achieve that."
"What's needed beyond just typing the arguments as string, for now (until we make it possible to also invoke these functions with arbitrary objects mapped as complex types/owned entity types)?"
"What's next"" is decided in one method now."
"When #29448 was merged, there were no static lambdas in C# and AOT was not a thing."
"When #code is #code and streams are being redirected, the writer lock would be acquired so only one process can be created at a time."
"When #code is set on 32bit, it's rounded down to power of 2, so largest possible value of provided segment (SOH) is 2 Gb (#code)."
"When #code leg is green, that means the remaining ones are known failures unrelated to your changes."
"When #code, callers may need to ensure that the name used is distinguished for different users."
"When #code, the node's #code and #code positions are calculated incorrectly"
"When a CASE expression simply replicates SQL null propagation, simplify it."
"When a custom #code is applied, it does not retain its original color but instead adapts to the predefined tinting behavior, leading to unintended color changes."
"when a DataGrid is first attached while handling an IME, the TextStore.OnFocus() method is executed before any event listeners are set up, giving dispatcher events a chance to be handled."
"When a package has a #code or #code folder without a TFM subfolder, NuGet considers it to be compatible with any TFM."
"When activating debug log, I get :"
"When adding a new row at runtime, the virtual view for the new cell was correctly updated, and the platform view was properly created."
"When allocation (with #code on Linux) fails, runtime exits with same error as for large segment size specified with #code."
"When an #code was set on the behavior, the correct color for the app theme would load, but when the theme was changed at runtime the colors would not update."
"When an Entry is focused and the keyboard opens, the view adjusts and scrolls downward, causing a white space to appear at the top of the screen."
"When an ImageButton has both padding and an image, its measured size does not adapt to include the padding values, causing the image to render smaller than expected."
"When applying ToggleLineComment to any non-zero length selection, we leave the selection unchanged."
"When apps crash like that users think it's an issue with Windows, and they are partially correct because we should be preventing scenarios like that if it's possible the app can continue functioning in a usable way."
"When binding inside #code in #code, we also remove the dependency of the const field itself from the graph, if it is part of the dependencies, which in turn eliminates the circular dependency error."
"When building wpf inside the VMR, a 10.0.100 SDK is used."
"When calculating the width and height of the cell, add space to prevent using the wrong view size to calculate the platform size."
"When calling #code right at launch, after #code, it calls the #code -> #code -> this method locks on the static list of TraceSource references (#code), which calls #code on each respective #code, that goes either into  #code -> #code, or directly ends up in #code method after init, which enumerates through its #code collection, and at that point you'll end up with either #code or #code from the #code list as the access to this collection is not synchronized under the same lock."
"When calling ScrollToAsync thrice with the same Y value on a ScrollView, the scrolling operation does not complete on iOS, Windows, and Catalyst platforms."
"When changing the device orientation from landscape to portrait, the Editor view retains its previous landscape bounds, as the bounds for the PlatformView of the Editor are not updated during the new layout pass from the parent."
"When child menu items are grouped into a context menu, menu, or menu item, automation tools cannot access the child menu items."
"When comparing a nullable expression to a non-nullable one, a  #code result  always"
"When concurrently launching larger number of processes, the reader lock allows process creation to scale better."
"When control #code property set null or bingind value is null, it will skip use #code."
"When converting that XAML to RTF (unicode), the current code first uses XamlParserHelper.AppendRTFText to give #code#url  Converting the same XAML to RTF (CP1252) gives `#url  Neither is a correct representation of the original Uri (data corruption) and the second cannot be converted back to XAML in WPF (exception when decoding)."
"When creating a HWND for a popup, it needs to be positioned at the correct monitor to receive its DPI in PerMonitorV2 mode, as noticed and implemented here:"
"When creating a named mutex, a security descriptor is created and assigned to the object."
"When crossgen2 is trying to crossgen S.P.C., it crashes:"
"When deserializing a string into an enum using a naming policy, if the C# enum member name is the same as its name derived from the naming policy, then the deserialization will be case sensitive."
"When deserializing, the NetFx and ILGen serializers will by default create _empty_ collections for any list-like-but-not-array members."
"When dynamically updating the Entry's SelectionLength on the focus event, it works as expected without the fix."
"When enabled, at a program branch, if the instruction at the target is not one in the small BTI subset (including some older instructions) then the program segfaults."
"When filtering threads, specify #code to get hex thread ids."
"When FormattedText is specified, I found that the previously posted control by number of lines doesn't make sense because FontSize, LineHeight, and CharacterSpacing are different for each span."
"when hardlimit is specified we don't actually call #code, in #code -"
"When I adjust the font for the entire application, the controls on the form don't scale appropriately"
"When I built it, it was meant to be a stepping stone."
"When I decommit, I am hitting an assert that we are decommitted more memory than we have, and the counter is suscipiously low at that point."
"When I experimented with placing a call to a normal method that throws at the end of the try region, there wasn't any code after the call instruction, but it didn't fail, so I suspect there might be other methods that didn't fail, but we'll end up inserting NOPs for with the fix."
"When I ran this on my 16 core machine , you can see that using the reader-writer lock add some overhead when launch a single process repeatedly."
"When I re-enable them again, X86 goes from ~576ms to ~162ms."
"When I want to test PresentationBuildTasks, I usually do a normal build and in the project I want to test, I override #url with a path pointing to the assembly built in the artifacts folder."
"When IsEnabled is set to false, CollectionView should not allow item selection."
"When it comes to LayoutOptions, I think they are respected on Android"
"When items are added to a filtering collection, changing a live filtering property too fast might result in the collection view becoming out of sync of the data."
"When loading from the stack we unencrypt, and fault on an error."
"When modifying the CollectionView.ItemsSource while scrolled down in the list on Android, the ItemsViewScrolledEventArgs.VerticalOffset is not updated correctly."
"When multiple people try to do .NET development on a single system, the first one to create #code succeeds, and the others get cryptic errors like this:"
"When negative spacing value is given for StackLayout, System.ArgumentOutOfRangeException is thrown in WinUI."
"When opening the app and clicking directly on the fourth tab, the fifth tab's content is displayed instead of the correct content."
"When providing a graphics view size with decimal values like XX.25, iOS converts the decimal part to a value like XX.3333331, which causes a gray line to appear due to rounding inconsistencies."
"When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit."
"When rotating the device for example without resizing the window, the AdaptiveTrigger did not work as expected."
"When running assemblies, dotnet test (via vstest) is capable of running each assembly in parallel."
"When scrolling a ScrollView using the ScrollToAsync method with the ScrollPosition.Center value, the item is incorrectly centered."
"When set #code property #code or binding value is #code, in debug mode set an error binding, vs will throw #code in any wpf version(include .net 472, .net5.0-window and more)"
"When setting #code as the initial value, android ignored it."
"When setting RightToLeft = Yes, RightToLeftLayout = True and .DrawMode = TreeViewDrawMode.OwnerDrawText, the selected node box is fully rendered"
"When setting the width request in label inside the vertical layout, the layout content of the label does not update its width and height constraints correctly."
"When ShellContent was added or removed dynamically, its property changes (such as title updates) were not tracked correctly."
"When specifying format strings, pass #code to print format strings as well."
"When specifying Keyboard=""Numeric/Plain/Telephone"", the resulting keyboard on iOS lacks a dedicated ""Done"" button, making it difficult for users to dismiss the keyboard."
"When startActionMode or startSupportActionMode is invoked, the Action Mode is associated with the Activity hosting the Fragment."
"When submitting a change which impacts UI in any way, including adding new UI or"
"When switching back to Section 1, then as the bindings apply, the Item 2 from Section 2 is applied down to the Picker #code, which results in no item being selected because Section 1's Choices do not contain Item 2 from Section 2."
"When tabbing into the listview, it'll say ""Enter table 3 by 1 (...) selected 1 of 2""."
"When the bitness specific dll is being searched by #code, it goes through the default paths, but those don't include #code."
"When the condition tracked by a #code becomes false, do not reset target property to default value."
"When the data is reset, the scroll position is programmatically set to the 0th item (top of the list) on CollectionChanged event."
"When the Detail page is already managing the toolbar visibility, it prevents redundant updates and maintains the intended behavior."
"When the Entry control is hidden, the soft keyboard remains active, and any text typed is queued and applied when the control becomes visible again."
"When the Flyout property is dynamically reset (e.g., Flyout = new ContentPage()), the navigation toolbar unexpectedly disappears in the FlyoutPage."
"When the Glyph property changes in the bound FontImageSource, the MenuItem is not notified of this change.As a result, the visual update is not triggered in the UI"
"When the height or width is infinity, the size is measured using the platform-specific SizeToFit method."
"When the IconImageSource property was set on the Flyout page in the mobile application, there was an inconsistency between the Android and iOS platforms."
"When the ImageSource changes are detected, manually triggering PropertyChanged for IconImageSource.This propagates the change through the UI update mechanism, ensuring the TabbedPage icon reflects the new state."
"When the ImageSource changes are detected, manually triggering PropertyChanged for IconImageSource.This propagates the change through the UI update mechanism, ensuring the toolbar icon reflects the new state."
"When the initial code was migrated, there was no Mac Catalyst so checks for ""is this iOS"" was fine."
"When the program returns, it now jumps back to code the attacker wants to run."
"When the refreshed Flyout page is not a child of a NavigationPage, the toolbar visibility is set to false, resulting in its disappearance from the FlyoutPage."
"When the request doesn't contain the parameter name, it attempts to find prefixes based on the parameter name."
"When the runtime is compiled with the PAC enabling option, it uses various PAC related instructions in the generated code, for example #code in the function prolog."
"When the subscription event occurs, it marks the collection as dirty and queues a dispatcher task to update the view."
"When the terminal is rotated while the Flyout of Shell is displayed, the size of the overlay does not"
"When the visibility of the TabItem is changed dynamically, TabBar needs to be updated to reflect the TabBar items count, but hiding the visible TabItem updates the TabContent but doesn't automatically adjust the tab count."
"When the writer side is needed (redirecting output while InheritHandles is true), the reader-writer lock performs a little worse than the regular lock."
"When there is only one event or field in the declaration, still trigger refactoring"
"When this event occurs, subscribers will be notified that the #code of the #code changed - so the UI will update."
"When toggling a line comment with a selection, we leave the selection unchanged"
"When toggling a line comment with just a caret, the line is commented and the caret moves down to the next line at the same column position (or end of line)"
"When typing in a text box, <kbd>Space</kbd> and <kbd>Shift</kbd>+<kbd>Space</kbd> are artificially treated as commands that produce the space character, irrespectively of what they current keyboard layout outputs when the space key is pressed."
"when using filtering you can't be using a normal ObservalbleCollection, but you would use a different CollectionView(Source)."
"When validation is enabled globally in an application, it is possible to disable it on a per-endpoint basis via the #code extension method."
"When values specified by user with env variables don't meet the requirements above, runtime exits with #code."
"When VisualState setters are defined, then firstly the elements are not displayed correctly on initial render and then the visual state isn't changed when an item is selected."
"When we clear the item source, the CollectionChanged event is triggered for the first element."
"When we get a new segment by committing memory for large object heap or pinned object heap, it is incorrectly accounted for as Gen 2, this will impact the #code values, but should be fine with the overall #code value."
"When we get passed these URIs from VSCode, the server crashes because we cannot successfully deserialize the LSP URI string into a #code."
"When we hijack a return address, we would need to modify both the LR and the register that stores the PAC, right?"
"When we make a method reflection-callable, we have to make sure the reflection stack can get type handles of types within the method signature."
"When we release a segment, we used #code, note that it does not decrease the #code vaiue."
"When we use the saved instance, the CollectionChanged event is wired for the second time, while the first one was never unwired."
"When we were introduced this API we have discussed other names, the main problem was that all best names were already taken: #code, #code."
"When we're ready, we could also use this PR to reintroduce the is-pattern temp optimization and fix the issue we found with it."
"When you did your experiment of calling a method directly, did the call end the try or was there another instruction afterwards?"
"When you do this you will have to fix edge conditions anyway, as previously newlines before wouldn't have been added."
"When you have time to take a look, please mark it as ready for review and give us a ping."
"When you say ""there's nothing technically preventing people from constructing expression trees where there are two different ParameterExpression instances with the same name"", you mean **in the same expression tree**, right?"
"When you take out the iOS/Catalyst duplicates, I think there are 181:"
"where #code - #code encode the condition for #code to conditionally execute on (please see SDM Vol 1, Appendix B)."
"Where applicable the tests were also created for the internal/green visitors, walkers and rewriters."
"Where available (and efficient aka supported by indexes), using it can lead to simpler queries."
"Where to execute the semantic model start actions: I believe these should execute at the same place where we execute symbol start actions to get the nested per-symbol analyzer actions, i.e."
"Whether the optimization succeeds on eliminating the enumerator allocation and how well the enumerator gets optimized subsequently depends on the complexity of the enumerator logic, though I will probably be chipping away at removing some of those limitations over time (eg, if the #code has a #code we won't optimize)."
"which does a little more allocation than the suggested changes, but"
"which is also mentioned in the issue as causing a type load exception (a separate issue was closed as a duplicate), but has nothing to do with interfaces."
"Which is the default for add package, the compiler is still copied to the output directory."
"Which really means was anyone previously being successful, which sounds like they weren't."
"While @github mentioned that there are no documented breaking changes, the major version change (multiple versions, actually) is somewhat risky."
"While attempting to add telemetry for local search investigations, I noticed that no telemetry was being captured when I opened Roslyn.sln without any files opened."
"While checking out #code yesterday, I've noticed the double lookups on the dictionary and today I've found there's already a corresponding issue for it, hence we should fix it for optimal performance as this is used with glyphs/fonts."
"While digging into this; there's one race-condition I've found along the way after fixing the linked issue, which ain't a WPF issue but imperfection/bug in the thread-safety of #code (which is documented to be thread-safe)."
"While file groups can be backed up by physical files, there is no convenience methods to add physical files to the group at the moment, but developers can do that manually."
"While for older version like iOS13+, create a left bar item to act as back button so that we can override the handler."
"While I cannot think of a C# situation where this PR would break things that already worked, it is definitely a possibility for VB.NET due to the default namespace."
"While I do accept the argument that a user could make their own #code as a way to break the immutability of a #code, they would have to actively go out of their way to do so."
"While I do agree with you @github, there are a number of issues."
"While investigating perf regressions from flowgraph changes, I noticed some instances where #code was no longer kicking in due to conditional blocks not matching the implicit fallthrough constraint we previously removed (#url)."
"While investigating performance issues in my Android app, I noticed that the ButtonContentTypeConverter was parsing a double without providing a Culture and that is leading to perf issue #url"
"While iOS correctly displays the specified icon, Android shows a default hamburger icon instead."
"While it appears that it is easy to just add when we commit and subtract when we decommit, it is not that simple."
"While its possible to create shorter partitions, we don't get any wall clock time benefits due to the additional time it takes to acquire more helix machines."
"While looking into #url with some interest in sharing smart indent logic so that the formatter can use it when it formats elastic whitespace, I did some simplification in CSharpIndentationService."
"While navigating between pages, ApplyQueryAttributes should trigger with data from the navigating page."
"While refactoring, I've also removed obsolete CAS remarks and fixed some grammar mistakes."
"While reverting change in above PR, current fix is fixed and issue mentioned above PR replicates."
"While testing to enable the test case in MacCatalyst, maximizing the window resulted in different behaviors in CV1 and CV2."
"While that should be fast, it seems completely unnecessary to even hit this code path in-proc since all the semantic calculation happens OOP."
"While the arm64 actually has the data size twice the code size, so we would still be able to efficiently pack it so that 1 code page was followed by 2 code pages, this is not the case for other architectures."
"While the existing code already heavily depends on comdlg32.dll, this fix introduces an extra dependency on 3 of its resource strings."
"While the existing properties are mostly read when the dialog is shown and updated when it is closed, a review should be done on whether they could and should be ""live""."
"While the resulted #code may be an instantiation stub, so either"
"While the second occurence was fixed manually because analyzer won't flag it (guess nobody thought someone is declaring regex inline with a const), the change is straightforward."
"While this change would make most commit operations async, sync commit is still needed in many command handlers (example: #code, when you type a character in the code, it will cause the commit session commit, this is a synchronous commit."
"While this contributes towards #4684, it does not completely fix it, since the scope of that issue is broader than just Facebook."
"While trying to run the code example I noticed and removed an incorrect parenthesis from file ""Update Scripting-API-Samples.md"
"While trying to write tests, I found that there are so many different ways to create handlers - each day we are adding a new layer - so this PR tries to remove the variations and attempts to create a more structured and predictable test setup."
"While we appreciate your suggestion, we prefer to merge pull requests that include a full fix unless the issue is urgent or particularly difficult to resolve."
"While we preserve this bug as it applies to older collection syntaxes, we should not add them to new syntax locations, e.g."
"While we still cannot parse the URI, we can handle the error and provide a misc document instead of crashing the server."
"while we're doing go-to-def, we'll have the ISymbolNavigationService from Roslyn *itself* (i.e."
"While XAML compiler treats types as fully qualified, the generated code behind does not use fully qualified types."
"Why are those function definitions as long as the particular #code I've auto-formatted (yes, an analyzer, imagine that)."
"Why even introduce new types, why even introduce ref structs, ability to #code memory, and actually using those new features under the hood?"
"WidthRequest=""256"
"Will add more details if the ci passes tests, the test insertion PR numbers come back good, and Cyrus indicates there isn't a reason preventing this change."
"Will have another go this evening and post back either way, but if you want to jump in before then please feel free!"
"Will look into why those errors occur there, but this should fix this for now."
"Will think about this in the weekend (maybe we can explicitly test for the interesting cases with a group of tests that intentionally ""downgrade"" the max sqlserver version)."
"windowPage.Appearing += (_, _) => windowAppearing++;"
"Windows is not working either, but I have no machine to work on it"
"Windows, x64, .NET9"
"With #107483 merged, the #url are still big, though FullOpts diffs are concentrated in #code and #code."
"With #111971 merged in, I'm not seeing profile repair overwrite #code anymore."
"With #code you should get a file not found error, while with #code the bitness specific dll is properly loaded."
"With 5af60d3, the problem is still there."
"With a custom builder type (#code), we cannot avoid the final copy of the data anyway, because as we're building up the text, we don't know what the final size will be, and when finally building the #code, the data will still have to be copied to an array of the correct size."
"With a tentative fix for the two issues found above, I am able to get the test to pass on x86, check, workstation, ~but~ and server."
"With an Ellipse, setting Background or BackgroundColor applies to the Shape's background; but if BackgroundColor or Background is applied in combination with Fill, Fill will fill the Shape and BackgroundColor is applied to the background color of the View."
"With another week of debugging, I figured the bug related to server GC."
"With blanked GroupPats and default FoldPats, #code shows as 0.1 for Inc%."
"With current state of this PR, user can simulate bootstrapping by rerunning VMR build.sh and pointing to the previously built SDK by two-stage process."
"with dynamic linking of the runtime, there is no longer any reason to"
"With efforts, I think we can nail it."
"With M.E.C.SER 8.0.11 and SE.R ""standard"" or pinned to latest this does not happen, with 9.0.0 it does with both."
"with preferred modifier order of #code it tries to place the modifier static immediately after internal, if internal is not specified then protected gets checked next etc...)"
"With recent fix of ""not offering refactorings on selection"" and adding more and more hidden diagnostics + codefix (essentially a refactoring), however, the UX is starting to be more problematic (as shown in first comment's screenshots)."
"With RequestLayoutIfNeeded, calling AwakenScrollBars may no longer be necessary."
"With respect to commit accounting, let's go back in time and see why we are doing it."
"With setting the stack size to 1mb, the RSS measured at 3428."
"With that being said, I'll continue on ""spamming"" when I feel like it unless the team's position is to close my PRs, thank you."
"With that fix, I am able to get the CI passing (See #100380) with the #code related counters verified for every blocking GC."
"With that fixed, for 8000 elements:"
"With that happened repeatedly, however, we will leak those bytes (while memory is fine), and so we ran out of bytes when you try to commit (but in fact you do have memory)."
"With that said, #code's documentation is ""succinct""."
"With that said, one thing I really don't like is the #code."
"With that test case, I can:"
"With that, I have gone through a round of review with @github with my change."
"With that, we can both validate the numbers are correct and that we didn't mess up with the data structures."
"With that, we can focus on the #code next."
"With the Assert.Throws lines changed as you suggest, I've verified that MacOS runs all of those tests."
"With the bugs I just shown above, It is pretty clear the answer is no."
"With the changes from #1977, my original changes would cause menu items with invisible separators to under-report size of/position in menu item sets."
"With the current CI, it's testing that building with pac-ret doesn't break on non-PAC hardware."
"With the expressions, I needed to add in the #code which is straight from the relational version (easier if it ends up both having a common base in the future)."
"With the PR, BamlResourceContentUtil.UnescapeString is used first to give #code#url for Unicode or `#url for CP1252, both of which are valid RTF representations of the original Uri."
"With the PR, my goal was to get #code to work on segments, always keeping the counter is really meant to be a shortcut so that I don't have to make sure the #code is good."
"With the PR, the window is created at a different coordinate."
"with the repro in the issue, x1.25 on the pixels)."
"With the same reasoning as yours, I assumed it was good enough (i.e."
"With these changes, I can only see the topmost #code method now:"
"With these quirks in-place, I'm seeing sporadic diffs from floating-point imprecision manifesting different decisions due to churn in block weights."
"With this change in place, the #code overdraw is gone in the .NET MAUI project template:"
"With this change, #code becomes more powerful than #code."
"With this change, as far as I can tell we're making the existing methods work with more file descriptors and without any take backs."
"With this change, I'm seeing LSRA introduce more branches from critical edge splitting, which I wasn't expecting."
"With this change, we're doing fewer inlines overall."
"With this fix, overlays are no longer drawn at their pre-rotation size."
"With this PR as is, on one large internal application that has likely been extensively hand tuned, there are roughly 22K Tier1 optimized methods, 2.3K methods with array creation sites, and 4.1K total array allocation sites."
"With this PR, a StressLog contract is defined in the cDAC."
"With this, i can easily see (if the code is consistently written in the IDE) that in the first case, we must have a delegate (since methods aren't camelCased) and thus this is likely an indirection point for someone-else (like my caller) to control behavior."
"With your fix, the FontImageSource color is not applied to the second and third pages."
"Without a #code file included in the template when generating from VSCode + C# Dev Kit, VSCode + C# Dev Kit will generate a new empty #code file upon opening the workspace folder containing the template (with the default settings)."
"Without a heuristic, we would need to avoid reusing many more temps, which would be a regression (at least in IL size)."
"Without a reasonably large Gen2 or a reasonably high false positive rate on the cards, there isn't much reason to go precise."
"Without matching names, since there is no default constructor, System.Text.Json deserialization fails and requires a custom converter."
"Without taking a closer look, I suggest considering using the following helper:"
"Without taking this PR, developers will need to create custom solutions to for invoking sorting and grouping."
"Without the PR, the window is created at 0,0 in this case."
"Without this change, if the library being loaded didn't need to load another native dependency, it could be loaded - that remains true with this change."
"Without this change, the build"
"Without this, the Helix Test Runner downloads the latest stable dotnet-ef from nuget.org, so once 10.0 ships, 9.0 tests using dotnet-ef will fail."
"Without this, the Helix Test Runner downloads the latest stable dotnet-ef from nuget.org, so once 9.0 ships, 8.0 tests using dotnet-ef will fail."
"Without understanding the design, it's really hard to understand why certain things here exist."
"Without WPF handling ranges properly, as soon as the dotnet runtime changes go in, WPF will still be regressed and it'll (probably) have to be rolled back again."
"Works by using char[] buffers from #code (along with #code ones in some parts too), and checking the test condition manually (instead of via the #code type), then calling into #code if it fails with a string from #code."
"would be good to find out if this is the issue, and if there's something we can do about this side."
"Would it be feasible to add that in this PR, or should I create a separate one?"
"Would it be viable to have #code be a mutable instance field we set in unit tests, if #code is defined?"
"Would you like me to turn it on in this PR, or a separate one?"
"Wouldn't it be more sensible to say that it's just unsupported for all the types in the BCL & special types like delegates, enums (not that these can even have ctors), etc."
"Wow, things have changed a bit since I created this (_new_ #code)."
"WPF in .net core 6.0 or 8.0, process terminated error occured and exit program unexpectly when type korean(IME) character fast in DataGrid."
"Xamarin, Unity, etc.) are expected to"
"Yea, I don't think adding #code with the awaits provides any value."
"Yea, it looks like that test is causing an infinite loop"
"yea, looking at the original issue, it seems to me the ctor of outer type being inaccessible isn't the (at least the main) problem, and I don't see a good way for us to accurately predict the actual user intention, therefore we are bound to make the ""wrong"" change either way."
"Yeah I think that makes sense, that seems to be the most reasonable approach."
"Yeah I'd assume that Android implies Linux Bionic and for the small number of cases where that differs, we'd check ""Linux Bionic and not Android"
"Yeah it's not an optimal algorithm, the pro is the much smaller memory footprint."
"Yeah sorry, but all the ongoing changes can only be in .NET 9"
"Yeah this is sort of my thought, but I don't think you can always catch all #code exceptions."
"Yeah, a test would be good - precisely the case you gave in the issue (i.e."
"Yeah, agree."
"Yeah, as expected, forcing all the generic types back into existence makes this no longer save much."
"Yeah, I have no qualms with that, though I think that is orthogonal to this issue about named arguments."
"Yeah, I need to have a look as we can no longer just subscribe to some global messaging center."
"yeah, no idea what is going on; just:"
"Yeah, no one has asked for it yet, and David has reservations."
"Yeah, part of the translation test refactoring was also about making it very clear the intent behind each test, and trying to test exactly one thing."
"Yeah, some tests would be awesome, something like #url but also checking the PlatformView Frame."
"Yeah, sure"
"Yeah, the negated logic here is unfortunate."
"Yeah, the SkipOnPlatform line(s) probably need adjustment."
"Yeah, we are keeping this path sync for the typing performance reason as @github correctly calls out -- what would this look like to have both sync/async paths?"
"Yep, I think it is a good idea"
"Yep, next steps are documented in the #urlpage."
"Yep, pagination can sadly only be done on the IDE side (which is closed source) and is not part of roslyn sadly."
"Yes I initially had the same thought but while working on it I found that, when comparing my current changes vs doing a more optimized dictionary lookup, my current changes were cleaner, faster (I didn't see the 2ns gain you mention) and used less memory ."
"Yes it was - I found out that this issue is going to take forever to be fixed and probably no one is going to deal with a solution anytime soon, so I guess I'll just have to come up with my own solution 😅"
"Yes, although it's currently unclear which branch it should go to."
"Yes, and it will finally hit either the size or max local num limit."
"Yes, basically for unsupported inputs whatever happens happens."
"Yes, can you help me with this one?"
"Yes, I agree that when building roslyn from source #code shouldn't get built."
"Yes, I agree, the ILogger API is intended for general logging, and callers will not get telemetry through it unless they send in a specially crafted message indicating they wish to."
"Yes, I believe that is still the F# team's long-term plan as well."
"Yes, I crashed our production Redis (pre-prod not having enough data / monitoring) by filling it with non-expiring data (we _do_ set an expiration on all keys)."
"Yes, I feel like an easier way of doing this is inside of Winforms would be a good idea (where winforms converts them to a ContextMenuStrip that auto themes it to #codelight#code or #codedark#code) for the application and to a global setting for if they want all #codeContextMenuStrip#codes to be rounded or not would make me happy as well but that can come in .NET 10 on that change."
"Yes, I have."
"Yes, I still think that unmanaged pointers are less bug prone than byref arithmetics."
"Yes, I will be very curious to know this because I am imagining this is a basic scenario that would break even on Linux PAC machine perhaps?"
"Yes, I've been careful to not use the AVX-512 one for this method for this reason."
"Yes, ImmutableDictionary is really bad."
"Yes, it looks like APICompat is currently broken on desktop msbuild (which is used inside VS): #url"
"Yes, it will only show up at runtime."
"Yes, Microsoft, please make this happen!"
"Yes, native AOT reflection implementation has number of perf issues."
"Yes, or else it would be a bug in the VS Code extension."
"Yes, please do #code instead of #code."
"Yes, please feel free to work on top of my changes."
"Yes, regarding your issue the fix is the same, I've just improved the solution to also fix other issues."
"Yes, regression from .NET Framework 4.8."
"Yes, see #url"
"Yes, thank you, this solution is also suitable for us."
"Yes, that would make sense."
"Yes, that's fine."
"yes, the  Vector128/256  is independent of the CPU."
"Yes, the address of nodes can be used, see e.g."
"Yes, the allocation savings come from on-demand allocation of options lists and avoiding an enumerator allocation each time when using options."
"Yes, the original plan is to support it in JIT, but we started this work to get a sense of TP/size impact of PAC."
"Yes, there are 2 speedscopes in linked issue, and 1 somewhere above after the changes."
"Yes, these APIs avoid a user having to create a class."
"Yes, this is a very micro benchmark, but results are pretty reproducible on my machine (within ~%10 usually), and are probably pretty close to reality since it should be pretty quick (but obviously this doesn't measure the overhead with surrounding code due to more pipeline usage, etc.)."
"Yes, this is the case I'm referring to in my previous comment :)"
"Yes, unfortunately as a breaking change though and it's hard to know what might rely on it."
"Yes, we definitely want it as a short term solution while we working on lsp (which will take a bunch of time)."
"Yes, we should change the #url document and remove this word #code , because now we can still run when the app code throws an exception in StylusPlugIn method"
"Yes, we want to be able to tune in the future for other apps."
"Yes, with shared resources like this:"
"Yes, you need to test out-of-process hosting in order to see the difference #code makes."
"Yes, you should add [iOS] to the title as this PR targets iOS."
"yes,I ran some tests"
"Yikes, I would not do this"
"You are not expected to provide support for Your Submission, unless You choose to do so."
"You bet I'd rewrite it in 10 (or 6, if you remove the braces), so you don't have to think about it:"
"You can check the #code test case for an example of this, using a custom type that implements a weird but valid Add method."
"You can notice the automation tree is different and there is an additional ""List"" element and the ItemButton1 is on a different level in the tree."
"You can recognize patterns such as #code or various helpers like #code, #code, etc."
"You could test as much as you want, but a component could always  throw an exception in some case you aren't aware of."
"You explained to me #url that it's not necessary, I was initially under the impression that it is."
"You grant .NET Foundation, and those who receive the Submission directly or"
"You grant .NET Foundation, and those who receive the Submission directly"
"you know how many regions LOH has at the end of a BGC and at the beginning of a BGC, you know how much reserved space in those regions isn't used."
"You obviously weren't thinking about incorporating random Rider rules and line breaks for 1024x768 CRT monitors, calling them current ""Microsoft's standard code format rules""?"
"You should go ahead and create an issue to tell everyone how you feel about the fact that about 70% of the BCL has already been rewritten using new language and runtime features for often low change-to-change benefit but overall great results, since most changes are often a building block for the next one."
"you wanna write from a source buffer of 3GB, etc.) Looks like I've missed that one during my tests and it triggered me now."
"You will need to run the diffs locally, dig in, and find out."
"You will probably want to keep a history of what happened using logging or otherwise, discard the history before the last successful #code check because you knew everything before it was correct, and track the changes to see which one is wrong."
"You'd need to ask them to make an update, and they'd need to work out with MSBuild if it was necessary to build a #code or if they themselves could take the update to #code."
"You're taking on a very large dependency set that is causing people to need to update packages, for dependencies they don't even use."
"your fix still has chance of race, when multiple threads are updating the variable."
"Your observation is correct, I did not react to you this time."
"Yup, I'll kick off a test insertion once the first PR has been inserted into VS for our baseline."
"yup, seems to definitely break cross lang scenarios at least."
"Yup, totally agree (I had this in mind as well when I commented but apparently didn't type it out :))"
"Yup, we have actually seen those issues in chroot type environments (qemu, unikernels like nanos (which is the implementation of Linux interface and not the stock kernel), scratch containers)."
“Project” means any of the projects owned or managed by .NET Foundation and offered under a license
( only tested so far on Android)
(?isn't this good -> simpler mental model?) (solved by 1.2 to a certain degree)
(@github Noticed that you had a bug with a title related to this assigned to you.
(#112400 just checking why we have it)
(#4731)
(#code etc).
(#code from python).
(#code)
(#url)
(#url) MAY be omitted.~~
(1) still might bring an inadvertent verbose log into the telemetry channel.
(A broken version showing what it would look like if those instructions existed #url).
(Actually O# right now would rename a symbol twice)
(Again we really don't want to guess users' typing)
(Alas...)
(all other data).
(Also note new WinUI 3 has #url) I doubt that designer will be fixed any time soon.
(an optional parameter with compiler-provided value)
(and dozens of other examples)
(And not because you're waiting for review)
(as the return addresses on the stack will be encrypted using their location on the stack as the salt)
(Assertion failed)
(Basically we'll add it soon)
(because it does not exist)
(Caught by static analysis.)
(cherry picked from commit b3a73f3b66589df3cd8d00c7333ad28e84d669d2)
(Code Listing 1)
(Correct me if I am wrong)
(currently on fire in other areas.
(e.g.
(edit: there was likely an issue with this benchmark turning into a no-op)
(either VSO or GitHub links)
(especially what types or methods should be trusted)
(Except for some of the changes in Visual.cs where I renamed some parameters e -> args to better reflect the parameter and be able to remove the comment)
(hopefully)
(I agree with IDE0081 for my opinion)
(I also don't have the NativeAOT VM implementation for my new JIT-EE API finished yet)
(I expect to go through a LOT of iterations.)
(I guess I should've added an extra benchmark where object we're storing is gen2)
(I haven't done work for VB side yet)
(I just added some extra mean test cases and some were failed)
(i.e.
(I'm looking at your other PR first since presumably that one is easier to sort out why stuff is coming along...)
(It appears this is waiting on me for being a draft.)
(It is in c#/vb at least).
(It looks like Sam is OOF)
(It seams the IDE team might have to do this one) However also have setting that controls this number but have max of 9 per page to be displayed.
(it should appear in #code output) Or can you share a screenshot?
(IUIViewControllerTransitionCoordinatorContext obj) =>
(marking the division node with #code).
(might do that in a different PR)
(No change in the glyph itself)
(Note: this would need dual changes from O#)
(on linux-arm64)
(Partially) Fixes #17237
(removing #url as the reason it was added has been addressed)
(right now we only provide the Outer)
(see below)
(see MaxCpuCount)  #url
(solved by 1.2 to a certain degree)
(Some changes are pulled from #url and #url
(TFS user and git is still in learning curve)
(Thanks @github for the scenario.) Thanks.
(thanks to @github for the idea)
(The CI failures look related)
(The former would be too big of a break.) I will look into that.
(they would often have ~6 and having 5 would always hide the last one)
(todo)
(Translation: on Sun، 25 August 2024 8:49 PM dotnet-policy-service[bot] < ***@***.***> wrote:)
(using backbuffers over 2GB).
(We always use the same tooltip before)
(we use segments for OSX as well)~
(with a brief justification for that assessment (e.g.
(with the commit comment on the HEAD commit)
[^1]: As expected.
[^1]: Given that you worked on #9589.
[After Fix]
[Android]
[Before Fix]
[EDIT] and now that I opened this PR in private browser window it seems it's linked only when I'm logged in so maybe bad argument.
[Fact]
[High/Medium/Low.
[How was the fix verified?
[iOS]
[issue]: #url
[Justify the selection above]
[OnAppearing]
[OnNavigatedTo]
[QuarantinedTest(#url)]_
[resolve-cli]: #url
[resolve-github]: #url
[Select one or both of the boxes.
[src\Controls\src\Core\Compatibility\Handlers\Shell\iOS\ShellFlyoutRenderer.cs]
[src\Controls\src\Core\PublicAPI\net-ios\PublicAPI.Unshipped.txt]
[src\Controls\src\Core\PublicAPI\net-maccatalyst\PublicAPI.Unshipped.txt]
[src\Controls\src\Core\ScrollView\ScrollView.cs]
[src\Core\src\Handlers\ScrollView\ScrollViewHandler.Windows.cs]
[src\Platform\iOS\MauiLabel.cs]
[Windows]
{
{Detail}
{Justification}
}
};
});
@#url What is the advantage of moving to integration tests?
@github
@github  - Could you please rebase this PR and resolve the build error?
@github  - had you tested tab controls with various child controls in the pages?
@github  - let's revisit this change in NET10
@github  - There are multiple test failure has been reported for this PR.
@github  @github  and maybe @github to get review : ).
@github  @github this is ready for review.
@github  #12730 is all the cleanup
@github  any chance you could have a look at this one?
@github  any ideas here?
@github  can you please continue with your PR.
@github  Could you rebase to fix the conflicts?
@github  Could you review the #url ?
@github  do we need this PR anymore?
@github  does this option in #code work any better?
@github  for objective-C and macOS API use
@github  hi is there any chance of this making next release?
@github  I have resolved the conflicts
@github  I screwed up this rebase..
@github  i'd like your thoughts on #url  I actually feel pretty darn strongly about this :)
@github  is your description for another PR?
@github  isn't there by any chance an event that is fired when app is loaded?
@github  looks related
@github  or @github ?
@github  PTAL : )
@github  sure- I created #url for leaving the selection unchanged.
@github  Thank you.
@github  Thanks for taking a look!
@github  thanks for this PR.
@github  we are not sure this is correct fix to work with VSM.
@github  What do you think our next steps should be with this PR?
@github  whats the status here ?
@github  Working on it!
@github  you remember anything about getting this working ?
@github - can you please send a dummy change in JIT folder to make sure we run superpmi-diff pipeline to make sure there is no TP impact of running this on non-PAC machines?
@github - Could you please resolve the conflicts
@github - Have you done work in this area already?
@github - Here's an example with your suggestions applied.
@github - I need 24 to 48 hours before I can get back to this but I am eager to do so.
@github - is there anything blocking this PR from going in?
@github - Just getting back to this now.
@github - Thank you for looking at this.
@github - Thank you for this PR.
@github - Thanks for reminding!
@github - what is the motivating factor behind this PR?
@github -- can you take a look at your convenience?
@github -- is there an alternative branch/PR you are working on for this that I can take a look at out of curioisity?
@github -- Would love your opinion on whether this change has merit or whether there are concerns that might make it worth not considering.
@github -amd
@github -amd -arm
@github -amd -arm -mono --filter System.Text.Json.Tests.Perf_DateTimes*
@github -amd -arm64
@github -amd -intel
@github -amd -intel -arm64
@github -arm
@github -arm64
@github -dependsOn 108579
@github -dependsOn 109715
@github -intel
@github -intel --envvars DOTNET_EnableAVX512F:0
@github -intel --envvars DOTNET_EnableAVX512F:0 DOTNET_EnableAVX2:0 DOTNET_EnableAVX:0
@github -intel --envvars DOTNET_JitDisasm:*Vector* DOTNET_EnableAVX512F:0
@github -intel -amd
@github -intel -arm64
@github -intel -aws_amd -perf
@github -intel -perf
@github -linux_azure_cobalt100
@github -linux_azure_cobalt100 -linux_azure_ampere -profiler
@github -mono
@github ?
@github ...
@github (made the comment)
@github (who obviously knows WPF better than anyone else here) is 100% right that this absolutely will not work without a complete overhaul of how WPF handles INCC events.
@github @github
@github @github  Does this look good to you?
@github @github  Friendly reminder that today is Code Complete for the February 2025 Release.
@github @github  regarding the left margin: #url
@github @github  What do you think our next steps should be with this PR?
@github @github - are you planning to do anything with this old PR?
@github @github - what preliminary tests can we run to validate the performance impact?
@github @github ?
@github @github @github
@github @github @github  Hi all.
@github @github @github a fix for this is still needed.
@github @github @github for initial review :)
@github @github @github Let me know if there is anything I can do to move forward with this.
@github @github @github Please take a look at the first commit to verify whether this is a sane approach to find and load a referenced PrivateAssets assembly when the #code file is not available.
@github @github @github ptal.
@github @github @github The spec is now updated #url and it's clear what the correct behavior is.
@github @github @github This looks like it was pretty involved.
@github @github @github this PR takes the msbuild properties and parses them into dedicated collections.
@github @github @github/arm64-contrib
@github @github @github/roslyn-compiler Can I get a review pass on this please?
@github @github ^
@github @github any final comments or asks?
@github @github Any news?
@github @github any thoughts on what shoudl be done with this outstanding PR?
@github @github Can I get a review on this?
@github @github can this still get to .NET 9?
@github @github Can you take a look?
@github @github Can you take another look?
@github @github Chatted about this briefly with Jason today and we'll need to follow-up.
@github @github could one of you verify the changes locally though?
@github @github demo:
@github @github do you guys have any ideas regarding @github 's concerns?
@github @github Do you think this is good to merge?
@github @github for reviews for this initial PR.
@github @github for reviews.
@github @github friendly reminder that today's Code Complete day for the February 2025 Release.
@github @github friendly reminder that today's code complete for the Feb 2025 Release.
@github @github FYI.
@github @github here are the diffs on win-x64 and win-arm64: #url.
@github @github how about reviewing this?
@github @github How can I move forward here?
@github @github How does it look now?
@github @github How much testing have we done for this change?
@github @github I have updated the PR to throw an #code.
@github @github I think I see another bug.
@github @github I would like to make another property configurable.
@github @github I've marked this as ready for review now
@github @github I've opened #url for the fixes for the TRACE_GC build as they're in main and not due to this PR.
@github @github please share what you think.
@github @github ptal
@github @github ptal.
@github @github Requesting your review and suggestions here.
@github @github This fixes #42362 / #42387
@github @github this is available if we need it
@github @github This is the change I was mentioning in our meeting last week
@github @github This is updated and methods are renamed for verbose clarity
@github @github Thoughts?
@github @github updated this one
@github @github VSCode now supports slnf (#url I think it should be possible to get this in?
@github @github what are your preferences here?
@github @github What should we do with this PR?
@github @github What's the next step for this?
@github @github Where are we on this?
@github @github who could review.
@github @github Would it be preferable to merge early and get feedback but be ready to pull it or save this until the last minute to build confidence that browsers will actually adopt it?
@github @github yea I also think that the previous screenshots were incorrect
@github @github/roslyn-compiler for review.
@github / @github -- I overlooked that this backport had been queued up against #code instead of #code.
@github / @github / @github could you please have a new look at @github's code?
@github / @github do we have new/better/updated docs for writing tests?
@github #url
@github #url is the only test to fail in the outerloop pipelines: The #code triggered in the try block is never caught by the catch block.
@github #url look roughly the same.
@github <s>I added a workaround for the CI issue</s> (the integration test failures are unrelated and can be seen in other PRs as well).
@github a good candidate to special case List to just use the constructor.
@github added :)
@github Added a device test (not sure if I'm doing it correctly) and also fix bug caught by RemoveRootPageHidesBackButton device test.
@github added snapshots :)
@github added the snapshots :)
@github added two tests which I have executed successfully in my machine.
@github Adding checks for this now.
@github also consider extending Rewrite_compare_bool_with_bool test to include constants.
@github also note that this pull request will be _much_ simpler if you apply the change from #url Implementation simplicity would reduce the performance bar needed to accept a change like this.
@github and I chatted about testing for this PR.
@github another encoding issue?
@github Any chance someone can review this PR or its associated issue as I'd like to get this feature into 3.0
@github any chance the WPF team could have a look at this?
@github any chance you could address Jan's comment and we move to part 2 soon'ish.
@github Any concerns here?
@github any feedback here?
@github Any feedback please?
@github any ideas what might be missing?
@github any input -pun intended- 😂 on this?
@github any issues with the approach here?
@github Any news for this one ?
@github any news on this?
@github any news?
@github any plans on continuing work on this?
@github any progress on this?
@github any response to my comment above?
@github any thoughts on #url
@github any thoughts on that?
@github any thoughts on this?
@github Any update on this PR?
@github any updates?
@github anything we can help with here?
@github apologies for delay.
@github Are the videos in #url switched possibly?
@github are we still wanting this?
@github Are we waiting on anything before this can me merged?
@github Are you aware of any better ways of controlling the new run pipeline UI to maybe improve from having the -config:...
@github Are you aware of any other tooltips that need to be darkened?
@github are you familiar with the ErrorProne.NET analyzers?
@github Are you going to do all translators?
@github Are you going to fix the tests?
@github are you intending to pick this PR back up?
@github Are you seeing this in the wild?
@github Are you still interested in working on this?
@github Are you still planning to go forward with this PR?
@github are you still stuck on this?
@github Are you tracking adding support for #code somewhere?
@github As discussed ;-)
@github As the benchmark shows - yes.
@github asked about using DNMD for this case (which is why I looked at doing this for the hackathon now).
@github asked this be reopened as they plan on picking it back up
@github Build analysis is green.
@github bump!
@github by the way: If the PR is finally merged to the current development branch how can I request to merge it to the current released .NET version?
@github Can has a code review please?
@github Can see how this goes now.
@github can we get this merged?
@github can we move forward with this?
@github can we please try again.
@github can we take this?
@github can we try again?
@github Can you add a unit test for this?
@github can you add tests?
@github Can you also take a look at this?
@github Can you also take a quick look to verify this makes sense?
@github can you ask tactics for approval on this one?
@github can you change this PR to a Draft PR for now?
@github Can you clarify how?
@github Can you explain exactly what is fixed by expanding the handler library search path to include the current dll folder?
@github can you explain how I would measure that and what you are trying to verify?
@github Can you fix merge conflicts?
@github can you get the latest changes from main please?
@github can you help get this PR reviewed?
@github can you help with getting this through infra?
@github can you look at the errors here?
@github Can you look into this?
@github can you please /azp again?
@github can you please help to review this PR?
@github can you please review this?
@github can you please take a look?
@github can you please try again with changes I've just added
@github Can you provide any numbers demonstrating the performance/size impact?
@github Can you provide more information?
@github Can you provide some background on why you are making this change?
@github can you ptal?
@github can you retarget net9.0 ?
@github can you retest the published self-contained failure scenario with the latest?
@github Can you review please?
@github can you review this?
@github can you share the #code output for #code?
@github Can you take a look please?
@github Can you take a look?
@github Can you take another look?
@github Can you test this change against AnalyzerRunner and verify that Roslyn.sln is able to load with the new code?
@github can you update the PR description with the correct issue ID?
@github can you use a value tuple?
@github Can/should I convert this to a draft PR?
@github Conflicts have been resolved.
@github conflicts would need to be resolved.
@github cool!
@github Could I get your help here to trigger another build pass?
@github could look in the meantime!
@github Could this be done in a separate follow-up PR (and open an issue to track that)?
@github Could you confirm if this workaround is effective for you?
@github Could you fix the conflict?
@github could you have a quick look at this and suggest where I take this from here?
@github could you please /azp
@github could you please /azp again?
@github Could you please address this without the assumption that this makes the #code mutable?
@github Could you please help me understand what the failures might be?
@github could you please help with this?
@github could you please provide a benchmark to see how bad it hits it so we can do an informed decision?
@github Could you please provide a meaningful description for this PR.
@github Could you please sync your branch with upstream/main?
@github Could you please take a look?
@github Could you provide more details about the change?
@github Could you rebase and fix the conflict?
@github Could you rebase and fix the conflicts?
@github Could you rebase and fix the conflicts?.
@github could you rebase this one please?
@github Could you rebase to fix the conflicts?
@github Could you rebase?
@github Could you run benchmark for this PR?
@github Could you take a look at this ?
@github Could you take a look?
@github Could you test my custom WPF version?
@github could your team test this?
@github created a separate bug report for the theme issue with the search bar.
@github Created an API proposal here: #url when would the API proposal be discussed?
@github Creating an N+1 problem is not the solution here.
@github did you see this comment?
@github did you try building the full runtime+libraries first?
@github Did you want to make any further changes or should I hit merge?
@github did you want to port the same test fixes to this PR that you mentioned in #url
@github Didn't we have something similar like this in the past?
@github Do we have a benchmark for this?
@github do we have an easy way to validate the change.
@github do we need this in the next release?
@github do we need this PR anymore?
@github Do you change the DPI?
@github do you intend to continue working on this?
@github Do you know how you'd go from a roslyn Symbol to the CLR name for it?
@github do you know if that's a valid PR?
@github do you know if there is a way to tell if the compilation is complete?
@github do you maybe have an idea why it happens?
@github Do you mean either keeping the current behavior or reverting the whole auto parentheses completion feature?
@github Do you mind reviewing dotnet/wpf#6260 as well ?
@github do you plan to add support for other well known signatures than the zero arg with return value and one arg with void return ones?
@github do you plan to address remaining feedback?
@github do you plan to continue this work or should this PR be closed?
@github do you see any risk here for this update given the other dependencies this has?
@github Do you test the #code property?
@github do you think it's reasonable to have a feature for logging adding tags to the logging activity scope as well?
@github do you think this meets servicing bar ?
@github Does disabling inline parameter hints completely when there are more arguments than the parameter count make sense?
@github does that work for you?
@github Does the proposed changes make sense to you please?
@github does this look ok for what you need in the IDE?
@github does this match what you had in mind?
@github Does this PR make sense to you please?
@github Does this PR potentially improve performance please?
@github done
@github done :)
@github Done!
@github Done.
@github emitting a NOP before the end of the try region seemed to fix the failure.
@github feel free to let me know your thoughts!
@github Fixed merge conflict :)
@github following is benchmark result of trivial key (and element) selector case.
@github for a second review.
@github for another review.
@github for approval
@github for async
@github for integration with SslStream
@github for inter
@github for review
@github for review.
@github Friendly ping
@github friendly reminder that today's code complete for the Feb 2025 Release.
@github fuzz JsonWriter
@github FYI
@github FYI.
@github gentle ping to keep this on your radar
@github Great work!
@github great!
@github Great.
@github had some wise words:
@github had this suggestion and I ran with it.
@github has many tests in his repo - #url
@github Have you been to Winforms repo?
@github have you validated all of the scenarios you want here before merging?
@github hit this problem when he was trying to showcase various jit optimizations on simple methods and had to rewrite them into #code.
@github How about multi-screen with different DPI configuration?
@github How about replace to ConcurrentDictionary?
@github how are discussions going?
@github how has dotnet/runtime solved similar problems (packages with non-TFM'd #code folders are considered compatible with any TFM by nuget)
@github How would you like to proceed on this PR?
@github How would you like to proceed on this?
@github I actually grabbed the idea for the straight #code check from the end of line 41 in this same file.
@github I added a UiTest
@github I added more details to #59211
@github I added Utf8 APIs to Microsoft.Bcl.Memory library for older .NET platforms.
@github I agree with you that we cannot use the visibility property to update the RowCount.
@github I am adding a sample application which contain 4 cases.
@github I am not sure if we really need that.
@github I am now getting this error when trying to run the tests from inside visual studio after I've used your command:
@github I am on VS 17.10 P2 and semantic snippets' line endings are no longer a problem for me.
@github I believe that WPF should move forward in the future while not introducing any breaking-changes.
@github I believe you own area-mvc which includes most templates?
@github I can follow-up after this PR to improve the way tests are written if you have suggestions on the proper way.
@github I cannot proceed with this PR as I don't have the resources for testing.
@github I did some testing and can address the case you describe by using code similar to the following:
@github I don't see any suspicious test failures - do you think the changes are good to go?
@github I fixed _part_ of #44885 in #46666.
@github I had one last small comment on one define usage.
@github I had some issues with creating pages in unit tests.
@github I have now merged #46666.
@github I have updated the current Mac snapshots to reflect the latest changes.
@github i haven't seen anythign that indicates tehre's a problem here.
@github I hear you are a super TS guru so I was wondering if you had some time to review this refactored code and let me know where I have done off the rails.
@github I know I was late to the party and missed to tag you in to this before feature freeze for 8.0...
@github I manage to add a device test for this scenario.
@github I marked this PR as draft to make some room in our review queue.
@github I means that the PR may be merged for a long time.
@github I need to prepare a PR in VS repo so these colors make sense.
@github I rewrote #code to run during 3-opt.
@github I saw you posted a question in the original issue about moving #code-related infrastructure to the analyzers that get shipped in the refpack.
@github I should be able to review this in light of latest test changes and get it ready for merge before Monday
@github I suppose that is fair.
@github I think i'm gonna give up on adding the tests.
@github I think I've addressed all your comments.
@github I think I've resolved comments :)
@github I think it will be tricky because of the spinner's animation
@github I think its been retried a few times now so I think there is indeed some valid test failure
@github I think that the failing CI is unrelated to my changes.
@github I think that's a good point.
@github I think the code style tab have these links is perfect as all of these _must_ map to something on this page #url Because of that we should be able to also show the #code id for each entry in this tab.
@github I think this is also because we use the base highest image as the image.
@github I think this is change is good if we are not concering about the compat.
@github I think this Pr needed to be rebased to fix the failure.
@github I think we are missing the global opt-out linker feature.
@github i think you might have misunderstood what this PR does.
@github I took a look
@github I understand the concerns about including the compiler in our Design package...
@github I updated #url to validate all EnC diagnostics.
@github I updated the comment with the WinUI way so it can be seen side-by-side
@github I updated the PR to not break IVT users
@github I updated this PR to just remove the scopes.
@github I was unable to reproduce the issue that the PR was meant to solve.
@github I was wondering if I should add that ability to define simple benchmarks without classes too 🤔
@github I will rebase the PR and check the new test results ASAP (worst case: next weekend)
@github I wonder why we call #code instead of #code.
@github I'd like a high level review pass on this if you got time before I update the baseline.
@github I'd like to see a cleaner crossgen2 outerloop pass than what you're seeing here.
@github I'd love to continue working on this but need some help.
@github I'd start with removing #code parameter from #code and also the fields:
@github I'll be consuming this in WinForms WPF this cycle after it goes in.
@github I'm bit apprehensive about adding (more) reflection to the funcletizer as it is a perf-sensitive component.
@github I'm considering how to approach this situation and would like your advice.
@github I'm getting an AccessViolationException thrown in the preview implementation.
@github I'm going to convert this to a draft PR.
@github I'm going to mark this PR as draft for now.
@github I'm looking at this PR again (sorry for all the breaks and pauses).
@github I'm marking this as a draft pending answer to the question above.
@github I'm not sure how to avoid the current failures.
@github I'm not sure what the state of this is/was.
@github I'm not sure whether I'm doing the right things.
@github I'm ready for a review
@github I'm seeing the assert #code pop up in the libraries test pipelines (#url).
@github I'm surprised the assertion didn't fail for ENC0088.
@github I'm waiting for more comments on the unresolved conversations to confirm the correct design.
@github I've added a test :)
@github I've added a UI test
@github I've added a UI test :)
@github I've added a UiTest :)
@github I've added a UITest #code works :)
@github I've added snapshots
@github I've assigned the issue (#49721) to you to drive figuring out the design.
@github I've discovered a simpler fix.
@github I've fixed the crash and modified the UITest to include a grouped list
@github I've fixed the tests
@github I've rebased and solved conflicts :)
@github I've refactored a bit
@github I've removed the #url since you're still investigating the CI failures.
@github I've updated the draft to perform the optimization to #code.
@github If I remember correctly in case of this page most of the delay is thanks to #code and #code but maybe it will be useful somehow
@github If we made the DateSelected property nullable so the field could be blank would that suffice?
@github if you share code you've used for testing I can turn that into unit-test and add to this PR on your behalf
@github in case you miss that one 😄
@github in the absence of 'compiler PMs' what do we do to resolve these kinds of design decisions?
@github informed me that you are working on the code clean-up.
@github Is it okay for it to specifically throw #code?
@github Is it possible to test these changes with a nuget?
@github Is ready to review?.
@github Is there a crash dump in the original vsfeedback ticket?
@github is there a specific code path you'd like to see tested?
@github is there an approved issue for the public API stuff?
@github is there an exception?
@github is there an issue related to this?
@github Is there anything else?
@github Is there anything I could do for this PR?
@github is there going to be any work required in the iOS SDK as a result of this change?
@github is there more work to do on this?
@github is this alright?
@github Is this good to merge?
@github is this needed in the 9.0 release?
@github Is this OK now?
@github is this PR related
@github Is this ready to merge?
@github is this still blocked?
@github Is this still needing reviews or needing some more engineering work?
@github Is this still WIP?
@github is this tell-mode?
@github Is your primary concern here just that it requires the authors to write MSBuild?
@github Issue: #url
@github it applies to both of those operating systems.
@github it cleans up a piece of technical debt which I identified in the razor-far branch but did not have time to resolve then because the PR was merged under a post-merge audit policy instead of a full review before merge.
@github It looks like 2 failing checks.
@github it looks like some Fuzzlyn failures might be related.
@github It looks like the new tests are failing here
@github It looks like there are legitimate test failures
@github It looks like tuple scenarios are broken with the new approach.
@github It should be ready now.
@github It should work now
@github It would likely be a good idea for us to have these TS integration tests (we still do occasionally break them every few months or so).
@github it's a bit of a shame to abandon this after the effort we already put into this...
@github just a ping to make sure you haven't forgotten about this.
@github just a reminder to request a new review (upper-right corner) when you're done with modifications.
@github just checking if i should still wait on a second round of reviews or if i can go ahead and implement the vb.net side?
@github Just making sure this is this still on your radar
@github kind reminder :)
@github let me know if this advice seems right to you.
@github Let me know if this is not the ideal setup.
@github Let me know if you want me to replace the directive with runtime checks and update the PR 👍
@github LGTM - I have verified that the same results appear in AdventureWorks for the new SQL statement with this query:
@github Look what I've found
@github Looking at the output it could potentially be an encoding issue with either the compiler or possibly MSBuild.
@github makes sense.
@github Maybe an additional #code property #code would be benefitial?
@github maybe this is better in Core for all Entry instances?
@github maybe we should also investigate why the display is incorrect.
@github maybe your team could test this scenario?
@github might be able to let you know more.
@github might have thoughts on how this plays with the other kinds of events in the dotnet ecosystem.
@github my bad 😅 I initially copied and pasted from this PR: #url
@github nice!
@github no issue at all!
@github no one seems to be working on this pr currently.
@github not sure if you say #url
@github note the test failures.
@github Ok.
@github or @github Is there anything I can help with here?
@github Pagination cannot be done currently and likely will not be part of this PR.
@github parentheses completion is very new.
@github ping
@github Ping - The issue has been open for months.
@github please also remove the flag itself from the binder flags and remove the usage in the unsafe section.
@github please do not force-push branches under code review.
@github please give it another pass.
@github Please let me know if there's any way I can assist here.
@github Please let us know if you'll be able to continue this PR.
@github Please let us know when it is ready for another look or if you won't be able to move it forward.
@github please review #url and check that it fixes all the instances where you relied on the high bit behaviour.
@github please review this first step
@github Please take a look
@github Please take a look about the error output
@github probably yes - I have to find the time to finish this PR...
@github PTAL
@github PTAL.
@github Ready for review then after resolving merge conflicts.
@github rebased
@github rebased and added a UI test
@github rebased and fixed conflicts
@github rebased and solved confilcts
@github rebased!
@github retest this please
@github retest this please.
@github run the Maui.Controls.Sample app for iOS and you'll see what I mean.
@github Run the theme generator (#code) so it is propagated.
@github schedule a meeting next week and I'm happy to go through my findings regarding this set of analyzers
@github see #url
@github Should #code be added to the PR's title?
@github Should be fixed now.
@github Should this also close #url
@github Should this one get merged?
@github Should we revist this PR?
@github So we've had this feature flag rolled out to 100% of users for awhile with few reported issues so I'd like to merge this for 17.7; I don't see any reason to keep this feature flag around at this point.
@github So you don't care about whether there may or may not be hidden dependencies between the local function and the containing method (via captured local variables)?
@github some comments!
@github sorry for letting this drop off my radar.
@github sorry for not giving this any attention - the 7.0 release (and resulting bugfixes) are have taken up most of my time.
@github Sorry for the delay.
@github Sorry for the longer-than-usual delay for getting things reviewed.
@github sorry it was my fault  I screwed up the force push I think .
@github sounds good - since it's approved would you like me to resolve the conflicts and merge in?
@github Sounds good.
@github sure I will do it later today
@github sure thing - I'd also definitely like us to get this in for 9.0.
@github sure thing!
@github Sure!
@github sure.
@github tests should pass now
@github Thank you and I rebase the PR.
@github Thank you for catching that!
@github thank you for the details.
@github Thank you for the heads up.
@github Thank you for this PR!
@github Thank you for this PR.
@github Thank you for your contribution and sorry for a late reply.
@github thank you so much for letting us know!
@github Thank you.
@github Thanks for adding a fix to resolve the issue.
@github thanks for all the assistance.
@github Thanks for changing the code here!
@github thanks for joining this discussion!
@github Thanks for running the tests.
@github thanks for submitting this - this is generally a non-trivial part of EF.
@github thanks for taking a look; it definitely makes sense that some optimizations would be lost due to moving from constantization to parameterization.
@github Thanks for taking a stab at this!
@github thanks for the ping.
@github Thanks for the quick review!
@github thanks for the suggestions.
@github thanks for the tip.
@github thanks for the update.
@github thanks for your feedback
@github Thanks for your input.
@github Thanks!
@github Thanks.
@github That is quite hard since these are 30 seconds during a build that takes a lot.
@github That looks fine.
@github That requires actually resolving the 2k+ issues.
@github that's a good idea!
@github that’d be covered by the total #url issue
@github The !!
@github The #code feature provided by the editor does not support passing in our implementation of #code.
@github The analyzer category is Performance:
@github The bad news is that I'm currently building wpf repo a failure.
@github The CI issues are fixed.
@github The fix only resolves the issue when clicking the right corner of the Entry without touching the text area.
@github the InputDate component doesn't support any custom formatting.
@github The issue with named arguments seems to be reproducible only when the given arguments are greater than the number of parameters.
@github The only reason I can see that runtests is a speedup compared to dotnet test is because we don't pass in the right parallelism args to dotnet test.
@github the other side of this involves trying to create a type that other projects could easily use as well.
@github the sample page has already been in the code #url
@github The scenario #26777 mentioned does not get resolved by this PR.
@github The stale label is just an easy way for us to query PRs that haven't been updated in a while.
@github then how can I debug in Visual Studio if I need to use dotnet.cmd?
@github there is a lot of code style changes departing from the current codebase.
@github there is a test that fails consistently on timeout with this PR
@github there is no change in the size.
@github There may def be some holes here.
@github there was a short discussion in this issue #url
@github there's a large number of errors in the bootstrap build that look like this:
@github There's not much to speak of.
@github this got fixed / worked around with #url already.
@github this is a draft PR.
@github this is blocked on the completion of eliminating external IVTs.
@github this is now ready for review.
@github this is now updated
@github this is one of the ways I'm hoping to improve test reliability regarding waiting for pending operations.
@github This is ready for another look.
@github this is ready for another round of review.
@github this is still the case crashing my application
@github this is the doc you're looking for: #url  It's pretty brief at the moment; let me know if there's anything else you'd like to see added.
@github this is the same change you reviewed in the past.
@github This issue was fixed in the editor code based on changes originally presented here.
@github This PR is non-developer facing.
@github This PR looks good to me.
@github this PR looks gtg.
@github this seems good to go?
@github this should be ready for review
@github this should improve inner loop iteration times.
@github This should now be ready for review
@github this went to a design review 29 April 2019.
@github Thoughts?
@github tried using workaround with android styles #code.
@github unfortunately I think it's going to be a bit before we can make progress here.
@github Updated per feedback.
@github Updated per your comments.
@github usually with windows don't they add new states that are suffixed with PointerOver?
@github Was just working on this to update and resync everything especially because of all your reorganization of the tests and have a question.
@github was there anything blocking merging this?
@github we could do that.
@github We definitely plan to get this done for .NET 9.
@github we don t run the arcade build by default.
@github we need to get updated status in this one and figure out how we can get this closed out.
@github we'd def have to work together on this *IF* we decide on going this direction.
@github We'll need to do an API review for this since it includes a changes to the WAF interface.
@github we're tracking this as related to #38547 already.
@github What are you doing with all these micro optimization PRs?
@github what branch did you base your change on?
@github what do we have for detecting iOS on macOS?
@github what do you think about merging this to release/8.0?
@github what do you think of this idea?
@github What do you think our next steps should be with this PR?
@github what do you think?
@github What is blocking this PR from being merged?
@github What is incorrect about this?
@github what is the motivation for this change?
@github What is the plan with this PR?
@github What is the status of this PR?
@github What is the status on this PR please?
@github what is your opinion?
@github what makes this Debug only ?
@github what would it take to remove the use of this in your repos?
@github What you like to do with this PR?
@github What's happening with this?
@github What's the next step for this PR?
@github what's the status of things here?
@github what's your intention here ?
@github which set of these things do you think are generally applicable?
@github who can we ask about this?
@github Who is working on fixing the crossgen2 outerloop?
@github will continue to work with you to evaluate whether we can get this into .net 9 or not.
@github Will it be okay with you if we add the suggested fix on your branch?
@github will you continue reviewing this change?
@github Wonderful!
@github Would it be possible for us to take a similar approach to #url or #url and provide both a hardware-specific and xplat path?
@github would it be possible to give an indication when we could expect your input on this issue?
@github Would it be possible to repurpose #code to store the VM #code and just make equals compare that?
@github would it be possible to review my latest commit?
@github Would the Roslyn team be interested in taking over this PR?
@github Would this PR make sense to you please[^1]?
@github Would you be able to comment on the #code and #code approaches or recommend someone who could?
@github Would you be able to provide a little more explanation and clarification as I'm not sure I understand here...
@github would you expect the register killing behavior to change in MinOpts when the block order changes?
@github Would you know please?
@github Would you like to address the feedback from #url ?
@github Would you like to continue any missing work here to get this bugfix merged?
@github would you like us to fixup these merge conflicts and to take things from here?
@github Would you prefer the VB Visitor like this
@github wouldn't changing this ID break any existing application listening to these events?
@github Yes.
@github you can download the NuGet packages to a local folder from here:
@github You can use the #code flag in #code to launch a solution using the bootstrapping sdk in the environment:
@github You suggested this change in the linked issue -- what do you think?
@github you think that makes sense?
@github you're absolutely right!
@github 按照他这个体量，随便修改 API 会被喷的，现在都谨慎的不行了。上回只是稍微动了一下行为，如我#url记录的 dotnet 7 的改动，就被大佬们喷了一顿，乖乖在 dotnet 8 加开关
@github-msft @github It would be good if we could get a timeline for getting rid of legacy aspx support.
@github-policy-service agree
@github-service agree
@github-service terminate
@github: could we add this to the design meeting agenda to work through some of these items?
@github: ping
@github: this week.
@github?
@github.
@github/efteam Do you know if this is something you're already planning?
@github/efteam this is ready for review.
@github/jit-contrib @github @github interested in your feedback.
@github/jit-contrib any ideas what else we can validate in IR?
@github/jit-contrib could someone look at the JIT test changes?
@github/jit-contrib could we get this looked at for a review to see if any changes are needed?
@github/jit-contrib PTAL
@github/jit-contrib PTAL.
@github/roslyn-compiler  -- ptal
@github/roslyn-compiler  for review.
@github/roslyn-compiler @github  for a second review of this community PR
@github/roslyn-compiler and specifically @github for an initial look over of this approach.
@github/roslyn-compiler can I get a couple reviews here?
@github/roslyn-compiler for a second review
@github/roslyn-compiler for a second review.
@github/roslyn-compiler for review
@github/roslyn-compiler for review #Closed
@github/roslyn-compiler for review please
@github/roslyn-compiler for review please.
@github/roslyn-compiler for review.
@github/roslyn-compiler for reviews
@github/roslyn-compiler for second review
@github/roslyn-compiler PTAL
@github/roslyn-compiler ptal :)
@github/roslyn-compiler ptal.
@github/roslyn-compiler The alternative to commit e282986d3326a1dbb778cae1e264a1e379a04948 appears to be updating the #code passed to #code and/or #code to match the values passed to the C# equivalents.
@github/roslyn-compiler this is now updated and ready for review
@github/roslyn-ide
@github/roslyn-ide for review
@github/roslyn-ide ptal
@github/wpf-developers any news on this one?
@github/wpf-developers: Could this be included in the next test pass ?
@github<#url please read the following Contributor License Agreement(CLA).
*   (default - no company specified) I have sole ownership of intellectual property rights to my Submissions and I am not making Submissions in the course of work for my employer.
*   (when company given) I am making Submissions in the course of work for my employer (or my employer has intellectual property rights in my Submissions by contract or applicable law).
*   #url
*   dot color: green
*   dot color: red
*   dot color: yellow
*   from Mom's garden entrance to neighbor
*   length of a car
*   length of a van
*   unit-tests
* [ ] C# tests
* [ ] Minor changes in the inliner to allow helper calls
* [ ] VB implementation
* [ ] VB tests
* [x] Add JIT-EE API to query real #code out of a helper id (this PR)
* [x] C# implementation
* [x] Delegating to values produced by another symbol
* [x] Empty
* [x] Single
* [x] Throw exception
* @github implemented much more polished version of this approach here #url
* **Android** - Added the missing mapped method for Android platform.
* **Android** - The IsEnabled mapper method is missing from the Android platform.
* **BoxView**: Added a new test #code to verify that the #code of a #code matches the native background color.
* **Button**: Added a new test #code to verify that the #code of a #code matches the native background color.
* **Dzongkha** (should output TIBETAN MARK INTERSYLLABIC TSHEG on <kbd>Space</kbd>)
* **Editor**: Added a new test #code to verify that the #code of an #code matches the native background color.
* **Entry**: Added a new test #code to verify that the #code of an #code matches the native background color.
* **Image**: Added a new test #code to verify that the #code of an #code matches the native background color.
* **iOS & Mac** - Changed the priority: The IsEnabled property now takes precedence over IsReadOnly and InputTransparent when determining UserInteractionEnabled.
* **iOS & Mac** - The UserInteraction is enabled when updating the IsReadOnly and InputTransparent property.
* **Khmer (NIDA)** (should output ZWS on <kbd>Space</kbd>)
* **Khmer** (should output KHMER SIGN COENG on <kbd>Space</kbd>)
* **Label**: Added a new test #code to verify that the #code of a #code matches the native background color.
* **Lao** (should output ZWS on <kbd>Shift</kbd>+<kbd>Space</kbd>)
* **Persian (Standard)** (should output ZWNJ on <kbd>Shift</kbd>+<kbd>Space</kbd>)
* **Phags-pa** (should output THIN SPACE on <kbd>Shift</kbd>+<kbd>Space</kbd>)
* **Picker**: Added a new test #code to verify that the #code of a #code matches the native background color.
* **Sinhala** (should output NBSP on <kbd>Shift</kbd>+<kbd>Space</kbd>)
* **Windows:** Switching between tabs does not trigger the Navigating or Navigated events.
* #code
* #code (ARM64 main extension dll)
* #code (ARM64 out-of-process dll)
* #code (pure forwarder)
* #code (x64 main extension dll)
* #code (x64 out-of-process dll)
* #code behavior:
* #code class
* #code contract
* #code in all TFM
* #code objects are created locally and released at the end of the static constructor.
* #code only in the #code
* #code parameters #code and #code
* #code which is used in #code to register #code.
* #url
* 100 ms okay-ish
* 200 ms jackpot (because we would get to the perf of WinUI itself)
* 333fred
* 50 ms is better than nothing
* A disadvantage of this approach is that the optimizations are somewhat scattered throughout the codebase.
* Add ARM64X pure forwarders.
* Add assertions that #code is used correctly.
* Add Semantic Search to the preview features list
* Add support for returned #code nodes in the backend.
* Add tests for negs
* Added a new #code property to expose #code for the application (#code) that maps to underlying #code
* Added test cases in #code to verify the application of global conventions on endpoints (#code).
* Additional testing
* Adds #code as intrinsic (mostly for support of 512-bit #code)
* Adds tests to cover some existing broken paths
* akhera99
* Analyzer
* AnalyzerRunner (added in #34017)
* Android: Disabled PlatformView and restricted touch interactions by overriding OnTouchEvent in MauiRecyclerView
* Another approach is #23987 which stores a variable #url and use it in _mapper methods_ to avoid doing work that is not #url.
* Apply a #code to the #code
* As part of optimizing our build performance we reduce the cases in which that happened.
* Avoid calling #code on hot path when the value is not used
* Avoid light bulb dismissal caused by #code notification processing
* Backwards compatibility is preserved.
* blue ~ pointer is over the button
* Blue: overdrawn by 1
* Change **Compilers.sln** references to **Compilers.slnf**
* Checked that isConnected in the NamedPipeClientStream constructor is always true.
* Commits 1-2 apply the code fixes from #62004 on Roslyn.sln.
* Commits 3-4 apply the additional behavior from #62043 to Roslyn.sln.
* Configured #code delegate.
* Contributes to #68028 - tst & negs completed
* Convert the JS file into TypeScript
* CoreCLR does not move the location of program stacks.
* CoreCLR does not parse through stacks to rewrite the return addresses.
* Corrected the nullability in the interop declarations.
* CyrusNajmabadi
* Define #code to expose a list of locations for a symbol
* Define a new project for analyzers used only for enforcing Roslyn private code style policy
* Developer removed all XAML styles or is migrating a Xamarin.Forms app
* diagnostics may become more challenging
* dibarbet
* Disable parallel execution of superpmi by explicitly calling superpmi binary without -p flag.
* Dispose per-instance services created by workspace service factories
* Do nothing and look for attribute by name
* Do we want to make this specific to the Assets/Images folder?
* Document cases where null values produce an exception with AllowDefault=true (workaround for lack of silent part rejection in MEF 2)
* Document optimization opportunities in #code.
* Each function was compiled 5 times and executed (with repeatCount=5).
* Embed all VSIX dependencies to remove the installation ordering requirements
* Enable nullable reference types
* Enables support for #code in AOT and adds a smoke test for it
* Ensure #code parameters are consistently annotated as nullable
* Ensures #code is no larger than #code
* Entry gains focus
* Entry gains focus again
* Entry is unfocused
* ericstj
* Failing E2E tests were introduced in the first commit (the tests demonstrate just one of the issues related to the original implementation).
* Fetching Frame names.
* Filtering based on #url
* First commit is from #68074 and is not part of this pull request
* Fix #url by using #code
* Fix a bug where #code still throws instead of returning #code.
* Fix diagnostic message formatting to include symbol names
* Fix some design time build warnings
* Fix the package definitions for Identity UI as they were wrong and break when compiled against a newer (10.0) SDK.
* Fixes #url
* Fixes JIT and CoreLib paths that did not support 512-bit #code or assumed AVX2 support meant #code was 256-bit
* Fixes tests that had bogus failures (e.g.
* Generate necessary (unconstructed) method table otherwise (since we're only going to do castability checks and necessary method tables are exactly for that)
* Generate the attributes from the source generator
* Go back to the #code scheme
* green ~ the button is just focused
* Green: overdrawn by 2
* How do subfolders behave on other platforms?
* I believe that #url helped us to get to ~200ms.
* IExperimentationServiceFactory can be obtained from the MEF container without any threading dependencies
* Implement a source generator to help with common cases ~~(currently only handles cases where #code returns #code)~~
* Implement an analyzer that ensures #code is implemented alongside the four new helper methods
* Implement RP0001 to enforce compiler code style policy to not use target-typed new
* Implement RP0002 to encourage the use of named arguments over the old coding pattern of placing named arguments in comments
* Implement the required helper methods for all implementations of #code
* Improve perf of #code by refactoring code and making the method branchless.
* Improve worst-case performance of #code by changing multiple comparison operators to a single #code call
* Include fading locations as part of the main diagnostic instead of reporting them separately.
* iOS: Disabled UserInteractionEnabled based on the IsEnabled state to prevent any user interaction.
* It would be great to add a test!
* JoeRobich
* Keep the current behavior on Windows
* Link the output into the sample/test apps
* MAIN: #url
* Make IWorkspaceStatusService.IsFullyLoadedAsync a synchronous property (Closes #49114)
* Make sure to dispose of #code for in-process testing when the owning host #code is disposed
* many other runtime helpers assume object references are always heap references
* maumar
* Move common rule configuration from **.editorconfig** to **Common.globalconfig**
* Move local function to end of containing method in **ProjectFile.cs**
* Move the JS file into the Core project structure so it is not just a sample resource but part of the maui source
* Nearly all #code IL instructions are gone.
* New public APIs have been introduced:
* objects with GC fields cannot (currently) be handled this way.
* One type per file
* Otherwise do what we did above.
* Pink: overdrawn by 3
* Please add a more meaningful title.
* PR: #url
* PR's behavior:
* Pre-store #code into variable to avoid extracting it two times on every iteration.
* Provide #code.
* Provide a default implementation of IWorkspaceTelemetryService (Closes #49115)
* PS: I wrote an #code test covering this but it would take 1.5~2GB which may unstablize the testing environment.
* Put the attributes in the Client.Core package
* red ~ the button is focused and the pointer is over the button (i.e.
* Red: overdrawn by 4+
* Refactor ToggleSwitch
* Registered #code instance.
* Registered #code instances.
* Remaining commits should reviewed commit-by-commit
* Remove **Compilers.sln**
* Remove #code dependency
* Remove test workarounds for unexpected light bulb dismissal
* Remove test workarounds for Windows Defender file change notifications
* Remove the use of unsupported VSIX installer from our CI pipeline
* Remove unnecessary use of #code when a part is exported by the same module that imports it
* Removes restrictions on byte and long types so that #code can be treated as intrinsic for all types.
* Rename #code to #code as it contains many more packages beyond Microsoft.Extensions
* Replaced the internal #code list with #code and #code to create an implicit global route group for all endpoints (#code).
* Replaces the SSE4.1 fallback for long vector multiply with a faster SSE2 version and removes restrictions on #code and #code intrinsics since these can always be accelerated now.
* Retarget Semantic Search reference assemblies from net8.0 to netstandard2.0
* Revert all changes to **AnalyzerDriver.cs** (moved to #20146)
* Revise WiX installers to use ARM64X pure forwarders
* Roslyn.Compilers.Extension (added in #34017)
* Setting entry.IsPassword for a password field simply maps to setting textField.SecureTextEntry in the underlying macOS native control.
* Several users have requested the ability to navigate between C# and F# code.
* Simplify and document cancellation behavior in **InteractiveHost.LazyRemoteService.cs**
* Source generator cases
* Store #code on #code for direct access
* Support Semantic Search in devenv.exe
* Teach physical promotion to produce #code nodes for returned promoted struct locals.
* The DependencyService has been replaced with the service collection.
* The fix was introduced in the second commit (tests passed).
* The flickering happened due to incorrect height handling.
* The Navigating event will only be triggered when switching to a different (unselected) tab.
* The new internal API would need shims in the external access assembly of each partner that wanted to support Go To Definition.
* there is currently no way for a method to describe a runtime-varying number of GC roots to the runtime
* there is no way to do a store covariance check without a write barrier (easy to fix)
* This fix corrects the endpoints that are embedded into the package and avoids the need to re-generate them.
* This PR is similar to the previous approach (#23987) but the idea is to decide if a mapper is to be called in #code itself and not in platform methods as the previous approach.
* This property avoids triggering password autofill suggestions or security prompts that are typically displayed when SecureTextEntry is enabled.
* Throw a recognizable exception for accessing an invalidated scope
* Tie #code disposal to #code disposal
* ToddGrun
* Track completion of #code operations
* Track MemoryAnalyzers version in #code
* Under #code
* Update **Compilers.slnf** to include all items previously present in **Compilers.sln**
* Use MemoryAnalyzers  #code
* Use reduced #code in **Common.globalconfig** to allow **NonShipping.globalconfig** to override values without introducing ambiguity warnings
* Used Graviton 3 that has following architecture features
* Used Release Build (#code):
* vseanreesermsft
* we generally cannot introduce #code into catch or handler code (#code blocks)
* We have a few concerns about the proposed design.
* whether this is possibly a good approach or not.
* Wrap RemoteAssetScopeId
** Test code**
*** AFTER ***
*** BEFORE ***
***@***.***> كتب:
**#27042 original PR**
**#code branch**
**1.
**2.
**ActivateContextMenu:**
**Actual Behavior**:
**After Fix:**
**Android:**
**Android:** Updated the MauiCarouselRecyclerView to adjust the carousel position based on the ItemsUpdatingScrollMode during collection updates.
**Android**
**Android**:
**Areas to improvement**
**Before Fix:**
**Behavior After the Fix:**
**Bugs this fixes:**
**But same test code(without #code parameter) use #code 4.12.0-1.final package:**
**BUT**:
**Button Alignment in the Page (Output image from the simple sample):**
**Changes:**
**Confirmation would be appreciated**
**Control Styles UI Tests** : These set of tests are meant to test the behavior and default property values of controls when Fluent this is applied.
**Credits to @github for helping me refactor the PR to be acceptable for .NET 9!**
**Credits to @github to have explored the effectiveness of skipping specific mappers**.
**Current Behavior:**
**Current Testcase Image (After Fix):**
**Customer scenario**
**CustomSwitch Android**:
**CustomSwitch iOS**:
**CustomSwitch**:
**CustomSwitchHandler**:
**Description of Change**
**Description:**
**Diagnostic Reported:**
**Dialogs**
**Discovering types that require validation**
**DismissContextMenu:**
**Edit:** this PR is blocked until #url gets merged (ETA is April).
**Enabling and disabling validation support**
**Example Scenario:**
**Expected Behavior**:
**How was the bug found?**
**I'd love some help/instructions with the issues mentioned above!**
**Id:** ASP0026
**Integration in XAML Code**:
**Investigation**
**iOS and Mac:** Incorporated the ItemsUpdatingScrollMode into the collection update logic to ensure the position is updated appropriately according to the specified scroll mode.
**iOS and MAC**
**iOS**
**iOS**:
**iOS**: The issue occurred because the virtualView was not added to the logical children of itemsView before creating its platform-specific view.
**Is this a regression from a previous update?**
**Issue Fixed:**
**Issue link :** #26969
**Issue:**
**Issue12574Test**
**Issues:**
**Left Side is AVX512** vs **Right Side is AVX10.2**
**maccatalyst**:
**Main:**
**Main**:
**MauiProgram.cs**:
**Medium Delay:**
**Medium:**
**Meteor Lake**
**mysql**: #url
**No Diagnostic Reported:**
**NOTE : This PR is dependent on the following PR's .**
**Note: The compiled IL is identical.**
**Note:** I implemented this based on the behavior observed in Android.
**Note:** This PR is based on #7244.
**Note**: Below is a case by case basis of comparison between asm generated for #code vs #code.
**NOTES:**
**OnIdle Delay**
**OnIdle:**
**Page added as Child in the TabbedPge(Output image from the simple sample):**
**Performance impact**
**postgres**: #url
**PR Title:**
**PR:**
**Problem:**
**Proposed Fix**
**Proposed solution:**
**Recursion depth checks**
**Reference for icon size:** #url
**RemoveItemsQuickly**
**Results**
**Risk**
**Root cause analysis:**
**Samsung Galaxy S21 (API 34):**
**Screenshots:**
**Severity:** Warning
**Simple Switch Android**:
**Simple Switch iOS**:
**Skylake**
**Solution:**
**Speedscopes:**
**sqlite**: #url
**sqlserver**: #url
**Steps to Reproduce**:
**Summary:**
**Tasks**
**Test Case PR**
**Test documentation updated?**
**Testcase Image (Before Fix):**
**TestCases**
**Tested the behavior in the following platforms.**
**Tested the behaviour in the following platforms.**
**Tested the behaviour in the following platforms**
**Testing:**
**Tests For Changes**
**The PR is far from being finished.**
**this #code**
**This has been fixed!**
**This is not a breaking change**.
**Title:** Custom IProblemDetailsWriter is incorrectly configured
**ToDos:** (order ≈ priority)
**Validation on polymorphic and inherited types**
**We need to validate type mapping not the type itself**
**Windows bug report** #24923
**Windows**
**Zebra TC75 (API 25):**
**Zen 5**
*Initial commits are from #url
// * Summary *
// After rotation
// Before rotation
// Cc @github
// Cc: @github
// Clear the Window's background
/ba -g the timeout on CoreCLR Windows x64 Debug is not related to this change
/cc @github
/cc @github  #Closed
/cc @github @github
/cc @github @github @github
/cc @github @github @github @github @github @github @github
/cc @github @github @github @github @github who participated in this repo in the past in a way that suggested they build VB.NET WPF applications - it would be great if you could check your projects compile fine using this build tasks assembly!
/cc @github for comments and suggestions
/cc @github for the mono parts
/cc @github please review & let me know if I did it wrong & how I should fix it if so 😁
/cc @github who wanted these optimised for allocations.
/cc: @github @github
/fyi @github @github
/rebase
\azp run #Closed
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A GetPrevToken method up to 12x as fast (~8.5x on average)
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; compared to a recent roslyn build (currently 4.8.0-2.23424.4) as the baseline
# [Blazor] Accept the blazor.web.js startup options format in blazor.{server|webassembly}.js
# [Infrastructure] Update jquery validate periodically
# {PR title}
# 1.
# 2.
# 3.
# Add analyzer for custom IProblemDetailsWriter registration
# Add flexibility to AddStackExchangeRedisCache by removing setupAction
# Add IRateLimiterStatisticsFeature with default implementation and tests
# Add method to retrieve current 2FA login provider
# Add Microsoft.AspNetCore.OpenApi to the webapiaot template (with an optional flag to disable it)
# Add pre-commit hook with code formatter under the hood
# After this PR
# ALWAYS include the Vary Accept-Encoding header when response compression is enabled
# Benchmark Results (Inline Array)
# Benchmark Results (Larger Starting Size Array)
# Current state in main
# Descriptive Error for Improper Use of [AsParameters]
# Design
# Enhance Lockout Functionality: Add Test for #code Incrementing Count
# Ensuring Minimal APIs and controllers treat header arrays the same.
# Fix Dictionary with numeric binding errors
# Fix for: Minimal APIs and controllers treat header arrays differently #54978
# Fix Handle Leak of ReadableJsonConfigurationProvider in FromStdInStrategy class
# Fix race condition in RedisCache when setting key expiration
# Fixed LDAP based claims
# Follow-ups
# Handling CultureInfo.InvariantCulture in RequestLocalizationMiddleware
# Invocation of dotnet-getdocument.dll tool from Microsoft.Extensions.ApiDescription.Server.targets may result in trailing backslash and broken build on Windows
# Overview
# Proper Asynchronous Handling for #code Callback
# Question 1: Can you explain exactly what is fixed by expanding the handler library search path to include the current dll folder?
# Question 2: Do I need to test out-of-process hosting to see the difference it makes?
# Revised ASP.NET Core module installers for Windows ARM64
# Size statistics
# Summary of changes
# Testing
# Update C# code for #29448
# update project templates use primary constructors
# Upgrade Facebook Graph API version to v22.0
# Using Interlocked in InputFlowControl and Http2Stream
##
## **DO NOT MERGE**
## #url Report
## > Can you share the C# program that you use for testing?
## > Can you share why is it needed to always keep counters on 64bit with regions if there's already a way to update them by walking the heap data structures?
## > Does this mean that heap hard limit doesn't work correctly with segments even on 64bit on current main?
## ⚠️ Notes:
## About Ioc
## Accessibility testing
## Accessibility testing  <!-- Remove this section if PR does not change UI -->
## After
## Android
## Before
## Benchmark
## Benchmarks
## Bug Description
## Changes
## Current behavior
## Currently handled
## Customer Impact
## Description
## Description of Change
## Description of changes
## Details
## Example
## Final words
## Goal
## How to MAUI improve performance?
## Implementation
## Instructions for merging from UI
## Instructions for merging via command line
## Instructions for resolving conflicts
## Instructions for updating this pull request
## iOS
## Issue: Foreground color of the custom flyout icon is not applied.
## Issue: The color of the custom FlyoutIcon in Shell resets to the default blue instead of retaining its original color.
## JIT-introduced #code
## Key areas to look at
## New
## New TryRead (inlined in SystemTryRead benchmark)
## New TryReadTo
## Old
## Old TryRead
## Old TryReadTo
## Optimization details
## Package authoring no longer needed in .NET 9
## Packaging changes reviewed?
## Plan of attack
## Problem
## Proposed behavior #url
## Proposed changes
## Purpose of this PR
## Questions
## Regression
## Regression?
## Remaining tasks
## Remarks
## Results: Antiforgery Benchmark
## Results: DataProtection Benchmark
## Risk
## Root Cause
## Samples for small displacements
## Screenshots
## Screenshots <!-- Remove this section if PR does not change UI -->
## Size = 2
## Size = 3
## Size = 4
## Solution
## Summary
## Test Cases:
## Test environment(s)
## Test environment(s) <!-- Remove any that don't apply -->
## Test methodology
## Test methodology <!-- How did you ensure quality?
## TestCases
## TestCases:
## Testing
## The known problem - overlapped commit
## The unknown problem - overflow?
## TODO:
## Try it out!
## Usage
## Validation
## Verification
## Welcome to #url :tada:
## When servicing release/2.1
## Windows ARM64
## Windows x64
### **Corner Radius:**
### **Description of change:**
### **EDIT:**
### **Issues Fixed**
### **Output**
### **PR Description:**
### **Root cause:**
### **Thickness:**
### #code
### #code - (horizontal and vertical options set to fill implicitly)
### #code #code
### #code method
### #code vs #code (2x contains)
### 10 property retrievals before/after (already initialized)
### About changes in #code folder
### About files in #code folder
### About the change in #code
### AccelatorFxx benchmark
### AccelatorKeyCtrl benchmark
### Additional findings
### After
### After change
### After Changes
### Analysis
### Analyzer Infrastructure Changes
### Android
### API
### AssemblyMatchesKeyString vs ComparePublicKeyTokens
### Background
### Background Color Consistency Tests:
### Before
### Before Changes
### Benchmark
### Benchmark (from CI - on iOS UI tests)
### Benchmark for id #code and #code string
### Benchmarks
### Best time observed
### Blockers
### Bug 1
### Bug 2
### Bugs this fixes
### Case 1: ListItem directly added
### Case 2: ListItem with data binding
### Case 3: Using ListBox items
### Case 4: Grouping ListItem
### Case: Double to int Scalar
### Case: Double to long packed
### Case: Double to Long Scalar
### Case: Double to UInt Scalar
### Case: Double to Ulong packed
### Case: Double to ULong Scalar
### Case: Float to Int packed
### Case: Float to Int Scalar
### Case: Float to Long Scalar
### Case: Float to UInt packed
### Case: Float to UInt Scalar
### Case: Float to ULong Scalar
### Changes
### Closes #111925
### Code Examples:
### Code review notes
### Comparison
### Construction of those two (SortedSet has a heap array)
### ContextLayoutManager.From (Risk 1/10)
### ConvertFrom Benchmarks
### ConvertFrom Benchmarks (.NET 9 vs PR)
### ConvertFrom Benchmarks (main vs PR)
### ConvertFromString benchmarks
### ConvertTo (.NET 9 vs PR) Benchmarks
### ConvertTo (main vs PR) Benchmarks
### ConvertTo Benchmarks
### Creation of 10x Matrix3D via Parse
### Current behavior
### Currently
### Customer scenario
### Data
### Data is 64 bytes aligned (**~2x improvement as expected**):
### Data is 8 bytes aligned (**regressed by ~30%**):
### DatePicker.cctor
### DatePickerExtension.SetText()
### Default corners
### Demo
### Description
### Description Changes:
### Description of Change
### Description of change :
### Description of Change:
### Description of Changes
### Description of Changes:
### Description of Issue Fix
### Description:
### Diagnostic
### Documentation
### DoubleUtil.AreClose changed behavior (Risk 6/10)
### Equals (32bit color) (2 comparisons)
### Equals (8 bit) (2 comparisons)
### Errors
### Escape Analysis
### Exception I – Object reference not set to an instance of an object at GraphicsExtensions.AsColor :
### Exception II – The specified child already has a parent.
### Execution methodology
### Execution Time:
### Features
### File sizes:
### Find from list of pre-defined accelerators
### First fix
### Fix
### Fix Details
### GetAssemblyNameAndPart
### GetCurrentOEMCPEncoding method chain call
### GetTightBoundingGeometryFromTextPositions inner loop (1 rect)
### Goal
### Handy features
### How
### How does this PR resolve #8679?
### How was the bug found?
### Idea's
### Implementation
### Initial creation
### Initial creation plus 9x AddAssemblyNamespacePair
### Introduction of #code:
### Introduction to the problem
### iOS
### Is this a regression from a previous update?
### Issue
### Issue 1:
### Issue 2:
### Issue Detail
### Issue Details
### Issue Details:
### Issue Fixed
### Issues Fixed
### Issues Fixed:
### Known Issue
### Mask property retrieval (4 retrievals)
### Method execution difference
### Motivation
### Namespaces
### new #code vs #code
### New getter/setter prolog:
### Notes
### Notes:
### Null Collections:
### Optimized ASM
### Original getter/setter prolog:
### Other possible formats:
### Other types
### Output
### Output  ScreenShot
### Output Screenshot
### Output Screenshots
### Output Videos
### Output:
### Overview
### Parsing Thickness 10 times (4 units)
### Performance change
### Performance impact
### Performance implications
### Possible solutions
### Previously tried approaches
### Problem
### Public API Changes
### Questions
### Reference
### Reference:
### Regarding test case
### Regressed PR
### Reproduction
### Resolution
### Resources
### Revert PR
### Review notes
### Risk
### Root cause
### Root cause :
### Root Cause (Android)
### Root Cause (iOS)
### Root cause analysis
### Root Cause of the issue
### Root Cause of the issues
### Root Cause:
### RootCause
### RootCause:
### RoundSmall corners
### Sample ctor improvement
### Scenario notes
### Scope
### Screenshot
### Screenshots
### Second fix/improvement
### Setup
### Simple ToString conversion
### Single invocation of the property (without #code init); 5 profiles
### Single Thickness parsing (4 units)
### Small strings within #code default capacity
### Span Captures (not part of this PR)
### StripMnemonic benchmark
### Sub-Types as Collection items:
### Test Case
### Test Case:
### Test cases:
### Test documentation updated?
### Test Enhancements:
### Testcase:
### Tested the behavior in the following platforms
### Tested the behaviour in the following platforms
### Testing
### The problem
### This PR
### Todo
### Unixes with #code
### Updating PropertyValues before/after
### Validated the Behavior in the following Platforms
### Validated the behaviour in the following platforms
### Videos of AllTheLists
### What's included
### Why
### Why does #8679 occur?
### Windows with #code
### WinUI Reference
#### ActivateContextMenu:
#### Add manual tests
#### Alternative to this PR
#### Android
#### Benchmarks
#### Calculations
#### Context information
#### Crank
#### Current situation:
#### DemoConsole
#### DismissContextMenu:
#### Dynamic Case:
#### HorizontalScrollbarVisibility
#### Initial Case:
#### iOS
#### Issue: #url
#### Issues with current situation:
#### Locking
#### Manual json strings
#### ParseContextColor (edge case)
#### ParseContextColor (normal)
#### Problem scope:
#### Proposed solution:
#### Questions
#### Read/Write ratio: 10% writes
#### Read/Write ratio: 100% reads
#### Read/Write ratio: 100% writes
#### Reference
#### Results
#### Sample benchmark for #code creation
#### Source data
#### TODOs (in case you indeed want this feature)
#### ToString with ColorContext
#### ToString with Round-trip format
#### Using CV1
#### Using CV2
#### VerticalScrollbarVisibility
#### Windows
#### WinformsControlsTest
##### After:
##### Before:
##### Option1:
##### Option2:
###### Microsoft Reviewers: #url
##url
#105521 contains #code in bgc.
#14037
#20547 is still open for droid.
#21830
#24557
#26948 and #26846 did not approach the cases for:
#27480
#3117
#33386 removed sync I/O support from Cosmos; the approach for the tests was to override e.g.
#43361 introduced some types that reference SQLite types in their signatures (specifically via generic arguments to the base type).
#58157
#59430
#77127 + #76906
#94445
#Closed
#code
#code - do we want such behaviour?
#code - ServerHub sounds better than HubServer
#code - VS auto format
#code -> #code -> Register & Unregister #code (Where the NRE happens)
#code (#code) to select algorithm for distance calculation
#code (#url
#code (like #code) should be also taken into account in this context.
#code (or 100)
#code (suggestions/unnecessary) and #code (warnings/errors).
#code *does* get put into a different bag.
#code #Closed
#code → #code → #code
#code => #code.
#code and #code do not implement either of them.
#code and #code have been treated exactly the same by the runtime for a while now.
#code and collection literals.
#code array which is over 2GB in size (e.g.
#code being true just means we treat decommit always as success.
#code call old vs.
#code calls #code
#code can be a relatively large number such as 16 or even more.
#code can be used to check
#code does not have this shortcoming.
#code Does that make a difference with allocations or something?
#code doesn't play well with #code.
#code etc.
#code exception will be thrown when debugging these two pieces of code in vs.
#code extension on #codes such as #codes or other user types will not track the changes to the application resources.
#code fails with the following:
#code failure looks unrelated.
#code failures are #112196 and #111922.
#code firefox
#code has similarly bad error recovery as object initializers.
#code is
#code is #code
#code is a byte array without any structure.
#code is a service used in VS to notify the rename operation of a symbol.
#code is also affected with a 1.8x slowness.
#code is modified for consistency
#code is never being called if the user presses the android back button quickly while the animation is still in progress.
#code is not implemented in CollectionView2
#code is not useful when you have multiple #codes.
#code is now used in #code and #code after #code and #code when source is #code or #code.
#code is one obvious culprit -- I can look into refactoring that next.
#code is one of few phases which does support #code but that support takes extra (a lot of) code to support.
#code is one of the places that creates it today.
#code is one of those classes that still use #code instead of generic #code.
#code is only called when RenameSession get #url
#code is only for binding to #code since other values already define exactly the format to use.
#code is present in the actual file).
#code is registered in a #url
#code is shown as #code when printed?
#code is suggested for additional tests.
#code is treated like #code - some older Linux kernels returned this when the syscall is not available.
#code now leaves the #code operation in place instead of stripping it.
#code on a #code array will return a #code pointer so we may as well remove the branch altogether and let JIT do its thing.
#code on linux-x64 looks like an outlier; from it's #code summary:
#code on the other hand has exponential buckets that can handle this task with fewer allocations.
#code on Windows; see #url).
#code passes just fine.
#code previously would not try to move handler regions due to implementation restrictions in #code that have since been lifted.
#code rely on #code using exactly #code semantics whenever #code (hence the comment).
#code styles at the same time)
#code that all the platform level code gets moved to?
#code to be returned to an #code target in a switch expression arm without a cast.
#code uses a function pointer as a stack parameter while #code (and #code) use a method handle as an operand.
#code uses a LoaderAllocator creation number to determine the latest LoaderAllocator to place a class in.
#code was already added to Android Libraries where more details can be found:
#code will not be thrown when debugging these two pieces of code in vs after modifying the application
#code will only support software rendering and may experience performance bottlenecks as well as #code not working as expected.
#code will throw attempting to parse URIs that have #code in the host name.
#code with a balloon window.
#code with formatting as in #code or #code etc.
#code with rounded corners.
#code with small rounded corners.
#code:
#code.
#code)
#code) can be shared among multiple exports.
#code).
#codeChangingTemplateTypeDoesNotCrash` test case was failing.
#codeis a syntactic shortcut for the CASE expression.
#Output Screenshot
#url
#url - Extended Blazor server and webassembly options to match web format.
#url - Support for Intel CET
#url - This has a good description of PAC-RET and other security issues.
#url ?
#url .
#url (fixed link)
#url (This one is particularly juicy in style to changes ratio!)
#url 123 becomes https%3a%2f%2fwww.google.com%2fsearch%3fq%3dtest+123 and #code validates it as a bad URL :/
#url allows single-digit date values and two-digit year values in the publication date (#code).
#url and TP impact show that profile repair needs to kick in pretty often in our PGO collections by the time we get to the backend.
#url causes even more overhead to the public FilterItems API.
#url documents that the #code flag is incompatible with #code flags.
#url has the basic delegate kinds.
#url in #code is what happens before the platform navigation does.
#url in case you want to learn more.
#url in constrained scenarios encountered cases where assumptions did not hold and deadlocks are a possibility.
#url in the source generator.
#url in WinUI) can be much more costly than others.
#url is already fixed without this PR.
#url is not against the guidelines so why rename the variable to your prefered name ?
#url is reported on line #url and it looks like it can be trivially changed and nothing wrong would happen.
#url look good.
#url looks great to me.
#url remove the usage of #code
#url seem to be only in OSR methods.
#url should also fix the cancellation issue which should effectively resolve this problem.
#url to find out more.
#url to get you started.
#url tracks being able to specify the flavor of LTO in CMake.
#url was meant to challenge if this is much of a problem.
#url which seems unnecessary since we are looking specifically for CS0162
#url with at least 23 entries of #code and #code objects **per request**.
#url?
#url.
#url)
#url) are usually processed much faster.
#url).
#url](#url <br/>All CLA requirements met.
•	I identified the cause of the crash during device testing on Android API 23.
•	The issue arises because the EffectiveTabBarBackgroundColor property is null in this API version.
`
`<MenuFlyoutItem.IconImageSource>
`<Slider
`bline.SetBackgroundColor(separatorColor.ToPlatform(Application.AccentColor));
`WebViewVideoHandler.EnableVideoFeatures();
^ This could happen when the underlying text box is focused for the first time.
+ @github
+1
+1 for retarget to 16.8
<!--
<!-- end TELL-MODE -->
<!-- Enter description of the fix in this section -->
<!-- Give a brief summary of the issue and how the pull request is fixing it.
<!-- Please assess the risk of taking this fix.
<!-- Please make sure that there is a bug logged for the issue being fixed.
<!-- Please read CONTRIBUTING.md before submitting a pull request -->
<!-- Thank you for submitting a pull request to our repo.
<!-- This template is not always required.
<!-- TODO -->
<!-- use #code -->
<!-- We are in TELL-MODE the following section must be completed -->
<!-- What is the impact to customers of not taking this fix?
<!-- What kind of testing has been done with the fix.
</Grid>
</MenuFlyoutItem.IconImageSource>`
</Style>
<#url
<br/>
<br>
> Task :core:generateVersionClass
|
| Name | Value | Type
||
|Collection|Base size (bytes)|Diff size (bytes)|PerfScore in Diffs
~~@github I'm curious which scenarios use ObjectCreationCompletionProvider and which use SymbolCompletionProvider?
~~#code~~
~~And #url
~~Both of which indicate it is perfectly fine to include the Transfer-Encoding header.~~
~~C# changes are ready for review.
~~Force the use of a weak event handler pattern for GlobalOptionService.
~~I'll try the #code based variant - it could actually generate less code compared to #code.~~
~~is this PR still necessary once we do #42591?~~
~~None.~~
~~Note: I couldn't get the generated files to be updated.
~~Should I force a new line after the #code?~~ (That too seems unreliable)
~~The commented out assert at~~ #url ~~and a single failure in libraries depend on #url
~~VB: #72611~~
⚠️
⚠️  This changeset might cause is a significant reduction in the test coverage for #code.
⚠️ **CAUTION:** This is a draft pull request - **DO NOT MERGE**
⚠️ #code is not an alternative to calling #code.
⚠️ Critical API has changed - All edge cases must be tested
⚠️ This is a breaking change for users who previously wrote comments at the end of lines in **.editorconfig**.
⚠️ This pull request **will be rebased** prior to marking ready for review.
⚠️ This pull request is not intended for merge.
❌ Benchmark failed on Amd
❌ Benchmark failed on Intel
❤️❤️❤️
🌝
👀
👍
💡I don't know whether the change from scripts in 8.x to the two calls in 9.x has any other (unwanted) side-effects.
💭 I do notice that all cases we've found that seem to be affected involve a #code line.
📝 New tests are still required
📝 Recommended review strategy is commit-by-commit.
📝 Submitted as draft to see what other formatting tests are impacted by this change.
📝 Tests should also call into this at the end of the test to ensure operations started by one test never extend past the life of one test into the next.
🥺
🦤
🫥
😄
😄 maybe you knew something about it!
😆
😝
😢
😦
🙂
🙂👍🏻
🙏🙏🙏
🚧 Builds on #39053.
0|0|1|1
00:14 - Adding items to collection
00:18 -> 00:20 - Drag test - crashed
00:33 - Reapplying fix (based on @github )
00:42 - Rebuilding application with fix
01:05 - Adding items to collection
01:09 -> 01:12 - Drag test - successful
01:14 -> 01:20 - Custom logic test (drag and drop based on item type)
¹ I would prefer to only expose this feature via **.editorconfig** and rule set files.
1.
1.000
1.5 Gb for SOH and smth small for LOH/POH) and noone will actually be able to use 2/1/1 anyway.
1) #code now handles comma-separated values appropriately and returns them as separate values.
1) Create an ordered event delivery system for #codes.
1) External navigation scrolls to the top -> see #code in enhanced nav
1) for heap-specific limits:
1) Iterate through the arguments first
1) Throw NotSupportedException if [AsParameters] is applied to an enumerable class.
1) use the same policy for demotion of pinned plugs as much as possible for regions.
1) Via console logging similar to logging jitted methods when DOTNET_JitDisasmSummary is set (for type loads the name of the corresponding environment variable is DOTNET_TypeLoadSummary);
1|1|0|0
10.
10% of the allocations are direct boxing of #code which this pull request fixes.
1079 instead of 1080).
129 meg!
17 for the Chinese Spring Festival.
1ms by default.
1st commit == entirety of product code change.
1st test insertion build (based on commit 1): #url
2 of the arrays are stack allocated (not sure if via localloc).
2.
2.93ms (0.03%) Microsoft.Maui!Microsoft.Maui.Handlers.ImageHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect)
2) attribute the pins to the higher generation's #code when appropriate.
2) Avoided usage of #code which allocates a separate intermediate array for #code and #code.
2) changed to proposed stackalloc pattern by Levi
2) Create a listing of ParameterSymbols that map back to named arguments
2) for API #code I am using a separate #code to keep track of deleted entries per request lifetime.
2) for same limit for all heaps:
2) I wonder if there's a way around adding the observer to the main hostapp activity.
2) Test added to #code to ensure #code
2/1/1 is the only combination to fit into 4gb.
200+ pages long #code posts are a good testament to that.
2023-11-16T18:30:12.5793039Z .signature.p7s
2023-11-16T18:30:12.5793085Z dotnet-dump.nuspec
2023-11-16T18:30:12.5793112Z dotnet-ef.nuspec
2023-11-16T18:30:12.5793138Z dotnet-serve.nuspec
2023-11-16T18:30:12.5793164Z Icon.png
2023-11-16T18:30:12.5793189Z README.md
2023-11-16T18:30:12.5793214Z test-configuration.json
2023-11-16T18:30:12.5793238Z [Content_Types].xml
2023-11-16T18:30:12.5793719Z dotnet-cli
2023-11-16T18:30:12.5793768Z HelixTestRunner
2023-11-16T18:30:12.5793794Z package
2023-11-16T18:30:12.5793817Z reporter
2023-11-16T18:30:12.5793842Z scripts
2023-11-16T18:30:12.5793866Z tools
2023-11-16T18:30:12.5793889Z _rels
2023!
2nd commit == new tests for each of the refactorings with selections
2nd test insertion build (based on commit 3): #url
3-opt performs various checks within hot loops to maintain EH invariants.
3.
3.) Use logging to figure out what went wrong.
3) distinguished net10 and netFx flows for clarity
3) for API #code I am falling back to #code usage (request-lifetime)
3) Go through the arguments again
3) I wonder if there's a way to simulate the activity restarting without having to turn the global setting on to recreate activities.
3) Test added to #code to ensure #code
3) update data for events correctly for these pins.
3) You must be the reason x86_64 architecture still starts up in real mode.
3rd commit == raw string changes in the modified test files
3rd test insertion build (based on commit 3): #url
4 Gb for both).
4.
4) Add a new XML attribute to #code that allows disabling the reset-to-default behavior when the condition is false.
4) created an API proposal for SymmetricAlgorithm using #code as a key: #url
4) Get the parameter symbol the argument maps back to
4) I've resolved your conversation because it has made zero sense.
41d470bf is being scheduled for building and testing
5.
5) found out that validation algorithms can be improved to use #code as well if we use a specific implementation reference (like HMACSHA512).
5) In #code flow changed usage to #url)-system-readonlyspan((system-byte))-system-span((system-byte))-system-security-cryptography-paddingmode)) instead of #url with same idea to use #code API instead of another #code allocation.
6.
666
67.11ms (0.61%) Mono.Android!Android.Widget.ImageView.ScaleType.get_CenterCrop()
7.
7.3.
8.
8.0.10-nightly-10006
8.0.100-alpha.1.23061.8
9.
9.0.1 - this is the first time we've serviced this package.
98.75ms (0.90%) Microsoft.Maui!Microsoft.Maui.Handlers.ImageHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect)
a | true == a | !(true == a) | false == a
A better way might be we provide both class #code and #code at the same time.
A condition was added to compare the existing width and height with the new values before triggering the SizeChanged event.
A core issue here AFAICT is that this actually makes tests unlike actual product.
A couple of things:
A custom request is also defined to fetch the text of a document which can be used for the client; our VS Code extension will implement a TextDocumentContentProvider to call that.
A custom URI format is defined which uniquely defines a source generated document by serializing the SourceGeneratedDocumentIdentity; this URI is returned any time we need to navigate to a document or reference the document in any way.
A decrease in performance because it's costly to figure out the current culture the first time on Android.
a few *strong* recommendations:
A few comments/observations.
A few more points.
A few more questions:
A few open questions:
A few options so far:
A few things:
A few years ago in Roslyn we did an async-pass where we converted as much as possible to async.
A fix for #url
A helix test runner that builds the helix test command.
a LINQ query that's broken across multiple variables) is considered a dynamic query that can't get precompiled (a warning is generated).
A little more background:
A more verbose explanation of the issue and the fix is here: #url I can add this to the PR description if desired.
A new #code namespace is introduced.
A new solution has been added that uses percentages instead of a floating-point configuration.
A note regarding the new ancestor-invalidation mechanism.
A notebook and a monitor?
A nuget restore failure could have been a transient network issue?
A PR is here:
a proper control as the source for binding.
A prototype for: #url
A prototype implementation of #url
A quote from the google engineer  #url
A scenario like this:
A separate PR is fine with me!
A similar issue had been addressed by Xamarin developers: the comment on line 324 of #url is  //hack : when the orientation changes and we try to close the Flyout on Android		 //sometimes Android picks the width of the screen previous to the rotation
a simple boolean expression being used in a place where a condition can easily be checked.
a simple expression that is just doing a null check.
A simple unit test would be great!
A small contribution to #url
a snapshot of the passing results along with before/after snapshots of the UI.
A successful proof requires knowing everything that can possibly happen to that allocation.
A warning here feels like the right balance but we can experiment and see how it goes.
A workaround for this issue might be to subscribe #code event for visual elements.
a.
a7111373 is being scheduled for building and testing
aborting a connection before completing a request) so this seems like a sane default.
About #code:
Absolutely!
Absolutely.
Access is denied.
According to Apple's documentation: #url
According to the #url
According to the MS version of the arm32 ABI:
Actually I can live with the (far from optimized) workaround I applied as it's just a unit test helper class:
Actually I'm getting help from bot just because benchmark in Windows Terminal over RDP looks unstable.
actually....
ad hoc testing)
Adapted documentation in #url
Add **VerifyScreenshot** method overrides to verify a specific element.
Add #code parameter to #code makes collecting assemblies that in memory possible.
Add #code property to #code to allow #code to set the #url enumeration on the shell link.
Add a fallback to #code to account for when #code is not an #code.
Add a few retires when attempting to reconnect during stateful reconnect.
Add a handler to enable video features:
Add a vector path for #code in #code.
Add an implementation of vxsort for Neon.
Add Appium capabilities to speed up tests.
Add currentUserSID to #code for use in #code to avoid system wide blocking.
Add flexibility to AddStackExchangeRedisCache by removing setupAction
Add padding to precode to align the StubPrecode with the offset of the data.
Add reading filesystem type from /proc/self/mountinfo on Linux and use sys call as the fallback approach.
Add readonly
Add some logging to diagnose what is happening with #99729.
Add support for computing postdominators and the postdominance frontier.
Add tests and refactor all the tests using the new Test API.
Add the #code statement to ensure proper disposal.
Add the following line to your CreateMauiApp method:
Add the mapper for IsSwipePagingEnabledProperty on Android
added #code for security reasons
Added #code nuget which is used to generate and pack Software Bill of Material (SBOM) of the assets packed in.
Added 56bb87716ca3f6db3fb79eec2dcb9a3e9810f49e and 5f4e61c61925ccd0be6f087f66a5d8e56cf06797.
Added a file to the docs/ folder with pseudo code for the writebarrier function.
Added a new extension method in the Appium helper class: **ToggleSecondaryToolbarItems**
Added a new jit config to limit the total number of recursive inlines.
Added a test case for runtime-added ShellContent title updates in PR #26062 .
Added a test for this.
Added config properties to blazor.{server|webassembly}.js to follow the same structure as blazor.web.js
Added corresponding test cases in StringSearchValues.cs to validate the new functionality.
Added DatePicker Focus and Unfocus events
Added Focusable on android Semantic Extension
added in #34072
Added pending snapshot for the added test.
Added pending test snapshot.
Added pending UITest snapshot.
Added platform-specific handling to dismiss the soft keyboard and remove focus when the Entry or Editor visibility is set to False.
Added ReturnType API for SearchBar like it is done for Entry.
Added several tests for covering these scenarios.
Added some instrumentation into morph.cpp locally to examine the arg ABI info for the call into native code:
Added support for Google Cloud Map Styles for Android.
Added the size of the roslyn-3.10.0-3.21201.20 zip in the Releases.
Added TouchListener to the PointerGestureHandler
Added version 4.9 to the CSharp package list.
Added:
Adding
Adding @github and @github FYI.
Adding @github for API review...
Adding a (visual) breaking change without a way to opt-out doesn't sound like a great thing to me.
adding a new row in a DataGrid) as there is still only one item allowed there.
Adding additional condition for IsNullOrEmpty check
Adding an #code argument to the #code API to allow the user to choose whether to use #code or #code at the end of the process.
Adding CreateBitmapSourceFromWICBitmap method to System.Windows.Interop.Imaging.
Adding empty TapGesture is not very efficient.
adding option to use #code on Binding updates because of UI Thread concurrency exceptions.
Adding some comments to clarify the weirdness here.
Adding System.Windows.Media.Animation.BackEase as known type.
Adding the #code in RawStylusInput method that can make the WPF still running when some friend throws an exception in the StylusPlugIn method.
Adding the API and I do not change any behavior.
Adding the do not merge as I believe this is still undergoing discussions.
Adding the same for disabling minimization should be mostly copy&paste.
Adding them has only been blocked as that was the primary user and we didn't want to expose them without WinForms adopting them in the same release
Adding them to #code was not received well.
Adding this new entry also fixes this bug: #url
Adding this shim would remove that limitation and let us enable the analyzer by default without needing to wait for the F# LSP work to land.
Adding thoughts from manish vasani convo:
Additional details and impacted files
Additional notes:
Additional test jobs: #url
Additionally I remove sharing headers from #code since this file used just in #code.
Additionally I removed unnecessary linebreaks from the ruleset example.
Additionally the fix implemented in #26777 does not fix this PR scenario.
Additionally will help with integration test partitioning.
Address some of the issues described in #url
Addresses #url
Addresses 25% of the total CPU time observed in #url.
Addresses issue #url
Adds a new method #code to retrieve the authentication provider being used for the current two-factor authentication (2FA) login attempt.
Adds a switch snippet provider.
Adds an overload to #code without previously mandatory #code
Adds another specialization for values with lengths #code chars.
Adds functionality for dumping the flowgraph to files that can be consumed by #url-based optimizers.
Adds missing accessibility modifiers throughout the codebase.
Adds parameters and includes logic for selecting only the runs given by those parameters.
Adds some tests for #code instruction combining that is already supported in the JIT.
Adds support for the following to also have a char parameter in addition to the currently supported string parameter.
Adds the EnumMethod and Comparison translators to Cosmos.
Adds the same security descriptor #url.
Adds the SymbolTable load command to the MachObjectFile class and adds a method to extend the symbol table to include the bundled data.
Adds validation when creating a MachObjectFile from a file on disk.
Adjust IDE0290 code fix to keep comments before removed syntax node (#69012)
Admittedly none of those tests had much structured trivia.
Advantage here is that the same code should be reusable for both technologies.
AFAIK it's impossible to find out if a test / test suite ran on a certain platform successfully.
After
After code changes the same smallest interval is picked as we have in case the first switch arm is a property pattern:
After finished and published NuGet package for bindings of #code Maven artifact.
After fix:
After looking back at this PR it seems like I missed the fact that you already mention the 1024 items limit so you can disregard my comment.
After lowering the fields must map cleanly to the return registers.
After PR checks are complete push the branch
After removing the #code in the future I think it actually might be acceptable.
After splitting the tree I traverse it post-order to update all of the flags.
after swapping icons:
After the change:
After these changes #code works on my machine.
After this PR (with #code):
After those changes
After:
Agree that we should not pessimize the flags to get regression on shipped binaries.
Agree.
Agreed.
Agreement inaccurate in any respect.
Agreement will refer to You and the employer collectively.
Ah !
Ah I am doing this as I have no way to test currently
Ah man this is so close!
Ah that would indeed regress here since the remaining with frozen partial happens in the remote classification service
Ah!
ahh you are right about the combination.
alignment of user provided blobs.
All commits starting with #code are direct application using the code fix.
All documents can support diagnostics; this property is unnecessary.
All I did was copy the proposed function change into a C# console project and fake out the internal XsdDateTime lines and make some test calls to it.
All modified and coverable lines are covered by tests :white_check_mark:
All of my efforts to prove correctness (e.g.
All of our other libraries target netstandard but this one was still special.
All of the above include HeapExpansion/plug test that you've mentioned previously (#url it also passes without issues.
All of the changes made for testing are present in #url
All of the diffs in superpmi logs belong to conversion scenario.
All of the edits were done automatically.
All of the following must be true:
All of them are implementations that shadow base class implementation.
All of them need to load #code dynamically and the output directory is the most reliable place to find it.
All of this needs to go through API review.
All PRs should target the main branch unless otherwise noted.
All samples when set to #code.
All supported browsers support response streaming.
All the #code keyword is doing there is that a ton of reflection is going to happen before we execute the regular method body.
All the #code whose conditions are false are executed first.
All the buttons will look like the last one unfortunately:
All the existing get / check val escape utilities work on expressions and so they analyze calls only if they can actually return a ref.
All the methods here were previously developed and tested as extension methods in #url.
All the potential downsides I can think of are things you allude to.
All the tests I added pass locally for me.
All this code will go away eventually (when we fully move to LSP extension and deprecate current one) but it will take some time.
All while retaining the usual **RadioButton** behavior and functionality.
Allocations regression testing
allow a struct like #code to be returned as something like #code instead of spilling and reloading from stack.
Allow full screen videos from WebView.
Allow gestures in Windows ContentView (mostly custom controls).
Allow limited trivially recursive inlining for force inlining only.
Allow the Razor tooling to read the contents of the host outputs.
Allows users to create custom triggers
already been there for years
Already implemented (unreviewed so may have bugs but there are tests):
Already planned on that side anyways:
Also : it would be helpful I guess to have a generic method to count the interop calls and see the impact ( not sure if already exists)
Also @github and @github might want to take a look too.
Also @github for doc changes.
Also #code and #code are now successfully translated for sqlite
Also add #code to #code to address the LINQ scenario.
Also added a few comments to explain my intiution.
Also added new test scenarios to test the ability of both serializers to handle known sub-types as collection items.
Also adds documentation for whole class.
Also closes #url
Also continues #17246
Also delete the target in packaging.targets as NuGet now handles this for us instead.
Also fixed some of the catch handling
also for regions (since that's what 64-bit uses) it's not an issue since we don't do the reserve all segments on initialization for regions (that's only for segments).
Also here's related discussion about heap limits for 32 bit: #url
Also hopefully this can make it into a future version of VS2022 like I hope.
Also I guess some information about a change breaking this workaround would be needed then.
Also I was thinking maybe @github or @github would be interested to help?
Also included test case for above fix.
Also introduces #code constructors for #code/#code that can be used with inline arrays.
Also it is already used for #code in
Also made F# are using the internal helper instead of the les performant public API.
Also my advice: cover it with unit-tests.
Also note that such micro tweaks are mostly handled the JIT folks.
Also note there is a CI failure due to this:
Also removed some obsolete CAS remarks in #code and used pattern matching in some places to simplify code.
Also removes #code from the signature as thats irrelevant on .NET Core since XBAP removal.
Also removes other members of AbstractProject not used by TypeScript.
Also removes the unnecessary extension before BSWAP16 on other archs.
Also replaces #code to return a #code which can then be used in #code for faster enumeration and strongly-typed access.
Also some negative tests where the string is not exactly parse-able and we verify database behavior.
Also some tests for #20677 are now passing (not all of them related to that issue)
also tagging @github
Also the code quoted in PR description doesn't seem like a very cheap task.
Also the contained buffer impl ends up adding line breaks that shouldn't be there (I think).
Also the lock now belongs to the internal class.
Also there are precise locations in linked issue.
Also tweak #code so the static empty collection can't be written to.
Also what about all of the system menus in all the possible controls as well?
Also what do you guys think about maybe making another PR targeting .NET 9.0 which would remove the #code in #code constructor to make it as smooth as possible?
Also with recent security push there may be more TLS 1.3 only servers and there really no good workaround for macOS and iOS so those platforms will simply fail to connect.
Also you say its a regression from .NET Framework.
Also:
Alter BindParameterFromProperty(...) method
Alternative approach to: 243d101
Alternative attribute names:
Alternative names:
Alternative to #22108
Alternative to #url
Alternative to #url and #url
Alternatively it would look like this
Alternatively there is #code but I can't find the way how to #code it
Alternatives considered:
Although it would fix the problem at the very source.
Although returning #code matches the built-in #code (see #url
Although the GCC had merged the LoongArch's SIMD.
although they stopped because #url.
Always complete for #code
ALWAYS include the Vary Accept-Encoding header when response compression is enabled
Am I correct in understanding that it's almost been three months since this PR was opened and six months since the issue was filed and there hasn't been any movement on making this expired draft spec more real in that time?
Am I correct that in an ideal world these controls would not require this additional styling?
Am I correct?
Am I missing anything?
Am I missing something?
Am I reading that correctly @github @github?
Am I supposed ...
Amazing work @github .
Amount of glyphs per font can be arbitrary but not exceed 65536
an #code struct confined to the SunOS interop functions.
an A/B test with code markers would help here.
An alternative is to simply to avoid NEON and use GPR registers throughout.
An alternative is to somehow tweak #code such that we guarantee it doesn't return the same parameter for different arguments.
An alternative would be to modify the #code interface.
An ArrayPool array may not be returned to the pool.
An example of how this can be used:
An FCall that redirects to managed?
an implementation that tries to generate more interesting scenarios.
An msbuild task then reads the file back and adds them to file wites so that they are correctly tracked.
an object or a different value type (#code).
an object or a different value type.
An other workaround is to buffer the stream manually.
Analyzer options always get put in the analyzer bag.
Analyzers implemented there are harder to maintain and adopt within this repository.
And
and @github/ncl for all the above.
and #code
And #code for iOS is also using #code in some places.
And #code from #code was removed like 8 releases ago.
and 2 heaps for both regions and segments to show the difference -
and 2.7.27
and 4 scenarios with varying pinning -
and add test implementation to the tests similarly to:
And all of the behavior can be isolated to that activity?
and at the definition of #code
And can't just be something that runs in the normal analyzer.
And Cc @github
And consider what needs to be CI tested with and without PAC.
and conveys certain license rights to the .NET Foundation ( “.NET Foundation” ) for Your contributions to
And could you debug and add the break point in #code method?
And definitely go with default move-line-down behaviour in the case of zero-length selection.
And fix call error.
and for LOH/POH we'll double it unless we are using large pages.
and gen projects could be built.
And here are the results when using in-memory distributed cache in case that helps getting what you want:
And here we measure the perf of CodeRefactoring (time to generate the code action) and CodeFix (time to generate code action from diagnostic data)
And here's the SSE2 replacement
and how to solve the issue.
And i almost always think of them just like a normal method (though of course it's not quite lke that either).
And I cannot stress how many times I just press #code (because I'm used to having it accustomed to the code base) and I get as many changes as there are lines in the file and then I work through history to revert it if I don't realize it.
And I could see regulators' decisions about what cookies Google can block affecting the final design of CHIPS or a competing standard.
And I do not test any demo code
And I don't think the workaround was ever demonstrated.
And I pick the code to #url to build the private version to test it by my application.
And I remote to the boxes via VS code so can direct it all from the same machine.
And I think the #url is better than this.
And I think this might also cover the issue at hand where the bound value to SelectedItem is being clobbered before that binding has a chance to be applied.
And I update the benchmark code:
And I update the code.
And I will add the other #code types after I understand how to write correctly.
And I will new a issus about it.
And in your app you never use it directly?
And indeed even without initializing TZ DB beforehand it's fast.
And it appears to be working fine
And it can fast to check the plugin list is empty.
And it has kept WPF from being the amazing platform it was supposed to be.
And it will return fast without call the RtlVerifyVersionInfo method.
And making methods 'async void' is acceptable to me.
and more.
And of course this will all be lost as it's not going into a PR anywhere.
and only then try to iterate on a specific library
and reformat markdown table in sublime text
and secure permission from the new employer before Submitting those Submissions.
And services that care about that could then appropriately ask for that.
and similarly for #code and #code
And skipping options allocation entirely in #code.
And SplashScreen will create windows very fast.
and suggest changes.
And take your time.
and that caused the following error:
And that it hasn't been modified by the compiler.
And that step is building successfully?
And that's actually a big deal because each such call is an _interop_ call.
And that's by design?
And the #code is a TransformedBitmap which was created in #code method and running in background task.
And the behavior before and after the code changes is identical.
And the benchmark result is:
and the current code
And the issues that I have seen are just VSM improperly configured.
And the line is invisible with any color different than white.
And the LLVM is same.
And the metrics used to judge these tradeoffs are obviously subjective!
And the StubPrecode sizes here:
And the token will be completed as the very last part of the task running.
And then I will push all the Hardware-Intrinsics and SIMD.
And then in some future version of the runtime it should change to a wholesale copy rather than a set of repeated Adds #url
And then you can finally understand and <ins>remember</ins>/see what it does without scrolling up and down.
And there aren't 200 suggestions on how to change the code with newer features (that you're accustomed to writing most of the time) because they're incorporated already.
And there could be other unknown cases that we just don't know in the moment.
And there's no need for #code
and they use this service to control which file they show diagnostics.
And this can't solve the problem.
And this creates our unexpected behavior
And this fix was provided long time ago.
And this is why the diff only happens on benchmark code (as most of them are cursed)
And this PR changes the inheritance margin's behavior to match what 'Go To Implementation' command does.
And we don't know if the default font had been scaled.
And we have tests T1 and T2 that have async listeners for feature X.
And we should not copy from the #code when it be null.
and we'll help fix the runtime too.
and with:
and without your first commit (2a43d9564b898baadc2e011ec519043a845f1f2b) it looks like this:
And yes I recommend using it for #codes used by the optimized code gen.
And you'll see a way to make it operate on an iphone like it does on an iPAd
Anders recently shared a dmp where he was complaining about excessive memory usage in the Roslyn OOP process.
Android
Android - Added support for the ListView.HasUnevenRows property using a property-changed callback to force update the cell size.
Android and iOS PR - #url
Android docs: #url
Android does not natively support applying an Action Mode to a DialogFragment.
Android has a hard limit on the size of image you can display.
Android is fixed here #url
Android Test: ImageDoesntDisappearWhenNavigatingBack**
Android uses #code as a drawer that I bet has some configuration responsible for intercepting a click.
Android:
Android: Added handling for ShellContent runtime changes in ShellSectionRenderer by subscribing and unsubscribing to ShellContent.PropertyChanged events.
Android: Taps the back arrow to dismiss the menu.
Another batch of XBAP-related code removal; continues #9865 and previous PRs.
Another category of failure on the R2R lanes that looks unrelated:
Another example is just add
Another improvement can be achieved after new APIs introduced in dotnet/runtime: #url
Another option we could consider is to add these rules by default to the application manifest as a merged manifest file that's automatically included by default.
Another option would be to scale the initial value up but still divide by an integer.
Another result of not having multiple groups is that sometimes unexpected things happen.
Another scenario hitting this issues crashing or corrupting the process is mixed mode interpreter and Mono Full AOT.
Another step towards supporting the same cases as old promotion with physical promotion.
Another thing I thought would not need to be adjusted is  all the adding functionality that is coming from the view (e.g.
Any advice you could give here of which may be causing it?
Any chance of getting this merged for 9.0.2?
Any chance on getting this merged for .NET 9?
Any change then calls the callback and it may cause crashes with #code as seen in #24304.
Any direction would be appreciated.
Any ETA?
Any feedback would be awesome.
any idea how you'd get that info?
Any idea when this will be available ?
Any idea whether it has anything exotic going on like additional load balancing?
Any idea whether the vcxprojs need to use that TargetPlatformMoniker?
Any idea why?
Any idea's how to solve this problem are welcome.
Any ideas?
Any movement on this?
Any news on this bug?
Any news on this one 👀 ?
Any news on this PR?
Any news on this?
Any news with this?
Any numbers on this?
Any perf-vs-security tradeoff is always at the discretion of the feature team.
Any plans on implementing this PR?
Any pointer?
Any progress on this?
Any reason for that?
Any reason this has been sitting unmerged for a month?
Any static members of the #code class would be executed before splash and these can potentially take a long time.
Any suggestion for a better algorithm for the case when the count is above the limit is welcome.
Any tests that show what is generated here?
Any thoughts?
Any update on this?
Any update?
any updates on this @github ?
Any version of this would have to wait until .NET 10
Any we didn't save anything for calls returning a #code.
Any workaround?
Anyone can review it?
Anyone has an idea of how to test the case when #code is above #code without using big collections?
Anyone know where that is?
Anyone?
Anything blocking this PR?
Anything else (e.g.
Anything else I might have missed?
Anything else i should change?
Anything I can do to help unblock you?
Anything new on this after MAUI's net 9 release?
Anything that may reduce the chance of typos would probably be good.
Anything you're familiar with so this can get merged?
Anyway I think MAUI team would appreciate you testing the nuget packages from this PR.
Anywhere from 10% to 15% in benchmarks.
Apart from that I guess this needs more research or somebody who knows the stuff already.
API definition without JIT implementation should be unwanted.
API Proposal: #url
API review: #url
API-Proposal added #7808
Apllication is running in a multi-monitor setup with varying DPI configuration
Apologies.
App still crashing every time it gets backgrounded.
Apparently #code tests depend on the collection changing without ever registering for the #code event.
Application opted into per monitor V2 DPI awarenes
Applying visibility change to child controls
Appreciate everyone's patience here and I am (like many others) looking forward to getting this in finally 😄
approach:
approved by the Open Source Initiative (www.opensource.org<#url
Apps might have an undesired behavior when deploying as single-file
Architecture: x64
Are all use-site diagnostics on symbols errors now?
Are explicit XML docs supposed to hide inherited ones?
are the CI failures related to the changes?
Are the generated images smaller after this PR?
Are there any case where trivial folding gets persisted that we could get rid of (like #code type things)?
Are there any changes that have to be made here?
Are there any plans to add it to .net 8 SR 4?
Are there any updates on this?
Are there other areas which need work?
Are there other scenarios that I should benchmark?
are these your applications or someone else's?
Are they dark themed with this change now or do I have to go into black magic to convert them to #codeContextMenuStrip#codes that I set then a custom dark theme renderer to that is not rounded.
Are they related?
Are we able to get a sense if anybody is relying on it?
Are we able to reassign?
Are we close to merging this?
Are we going to take it or not?
Are we planning on merging this doc soon-ish?
Are we really doing this for an expired draft spec that's only supported by chromium-based browsers when the workaround is nearly as easy to use as the proposed API?
Are we still on the fence about this for 8?
Are we worried about this being a breaking change or unexpected?
Are you able to move the sample code into some UI tests so we can run the checks on CI.
Are you actually seeing
Are you asking we need to track the time for this list to be poped up?
Are you browsing it some other way I can test?
Are you eager enough to update to reflect that?
are you going to be testing again to see if a slightly different number works better in the future?
Are you planning to change to handle it there?
are you referring to this code in #code?
Are you sure we still need this?
Are you talking about the #code and #code?
Are you targeting main?
Are you thinking this isn't the correct fix?
Are you willing to improve the PR ?
args)
ArgumentNullException
ARM64 (after):
ARM64 (before):
Arm64 added a Pointer Authentication Code (PAC) extension in ARMv8.3.
ARM64;
around passing ownership around.
Array_cast_to_IEnumerable_Contains_with_constant
ArrayLists...
As a bonus it is architecture independent code.
As a follow-up I might clean up various phases relying on #code
as a non-Required bool with a default value; MSBuild handles coercing
As a note: the following for the regression that was created because of us moving to a More Precise Write Barrier for x64: #url - seems like one of the affected microbenchmarks is already in the aforementioned list.
As a png that is 1.5 meg.
As a result clang decided not to round the NCRN up to the next even register number.
As a side note just FYI.
As above if the array size is unknown or the allocation site is in a loop then allocation would require #code and associated policies.
As discussed above (#url that is impossible due to there being only one level above currently default #code.
As discussed here #url
As discussed on #url I don't think we should force a single style.
As far as I can tell there's two cases left blocking.
As far as I know for self contained single file applications I've had to use #code to get the correct location of where the exe is located.
As far as I understand this PR mitigates the risk of breaking changes from #url I think it is important once we get a build we can test with to use some large WPF projects as a test solution like the NuGet Package Explorer.
As far as this discussion is concerned the PR could as well be empty - all work is yet to be done.
As for technical comments - why #code rather than #code?
As for the point on small size groups be favored.
As I have mentioned above: #code cannot retrieve it's content back to memory.
As in VB.
As long as I can use the new API to set color mode on my entire application from my settings form at runtime at *any* time to switch between light and dark mode I would be happy in the .NET 9 release.
As long as they're targetted tests.
As mentioned in #url this is still WIP (opened as PR for viewing convenience @github  ).
As part of the fixes in #url I had to replace the button background.
As per @github suggestion.
As per discussion in #3877 I don't think should be merged as it defeats the purpose of the #code control.
As requested by Yair on discord.
As seen in the comments the workaround was to tell trimmer to not remove parameter names.
As soon as this is finished I will add more info here and close the issue.
As stated in #url this will likely regress cases with a trivial key selector.
As such I decided to create a Benchmark project where we can start to save and share these with each other.
As such I would rather introduce this change and revisit with an option if we do get feedback later on.
As the counter argument even bot's post above is linking the area and haven't heard about anyone complaining that it's confusing.
As this is my first contribution to this repo and I'm not very knowledgeable about these value escapes any feedback regarding the logic is much appreciated.
As was pointed out both here and at #url the issue that forced the original PR adding range support to #code to be reverted will still exist and arguably be worse if this change is implemented.
as well.
Ask mode incomplete
Ask Mode template
Ask Mode template not completed
aspnet ones.
assert that both equality and hashcode are the same).
associated comments and documentation.
Assume that we have two #code's with the same #code value.
Assuming the example:
Assuming we want to do something like this (and I'm not yet sure we do) why is 4 the right depth limit?
Asynchronous operations are joined here:
At least a test for the type propagation is needed
At least I checked that the expected assets were generated:
At least I thought that e.g.
At least it works for me and tested with #code.
At least the test was helpful in identifying this issue 😅
at Microsoft.VisualStudio.PlatformUI.ThemedDialogStyleLoader.MergeDefaultThemedDialogStyles(FrameworkElement element)
at System.Collections.ObjectModel.Collection`1.Add(T item)
at System.Windows.Forms.ListView.OnGotFocus(EventArgs e)
at System.Windows.Forms.ListViewGroup.get_AccessibilityObject()
at System.Windows.FrameworkElement.EndInit()
at System.Windows.FrameworkElement.OnInitialized(EventArgs e)
at System.Windows.FrameworkElement.TryFireInitialized()
At the moment I haven't focused on the efficiency of the pass itself but I believe it could be improved.
At the moment we are a bit overbooked for work.
At the same time #code modifier is not allowed on private instance members
At the same time we're dealing with a number of high priority infrastructure fires.
At the time I wrote RunTests our test assemblies took very different amounts of time: some took a few minutes while others took about 30 minutes.
At the time I wrote RunTests there was no such option so possible it's a sufficient replacement.
At this point I wouldn't ask anyone to go write a doc like this (not sure it's wort the cost).
At this point whenever a new activity is created it will create a new xplat window which starts everything over.
At whichever commit in it you feel is a reasonable balance of complexity vs savings.
Attachments with dumps:
Attachments with screenshots:
Attempt to fix #url
Attempt to grab event logs to help diagnose #url
Attempt to resolve #url
Attention: #code in your changes are missing coverage.
Attention: Patch coverage is #code with #code in your changes missing coverage.
Attribute DLL Name:
attribute lists or base lists.
Automated PR to fix formatting errors
Automated tests.
Automation is broken for non-grouped ItemsControl.
Avoid directly capturing the return buffer from the call in the inliner; instead record an actual #code entry for the retbuffer.
Avoids a design time build failure observed in IDE logs for dotnet/roslyn.
AVX2 X64 (Gold 5120T):
awesome!
b.
Back port pr #10850 to release8.0
back when I landed #url
Background color rendering inconsistency in GraphicsView occurs due to incorrect boundary value.
Backport #75907 to release/dev17.12
Backport of #108312 to release/9.0
Backport of #110393 to release/8.0-staging
Backport of #110589 to release/9.0-staging
Backport of #111310 to release/8.0-staging
Backport of #111310 to release/9.0-staging
Backport of #111879 to release/8.0-staging
Backport of #111879 to release/9.0-staging
Backport of #112028 to release/9.0-staging
Backport of #112379 to release/9.0-staging
Backport of #56725 to release/8.0
Backport of #92460 to release/8.0-staging
Backport of #url
Backport of #url and #url and #url to release/8.0-staging
Backport of #url and #url and #url to release/9.0-staging
Backport of #url to release/9.0-staging
Backports integration test fixes from #url
bad (and we have ample precedence for failing on otehr bogus state).
Base code that would fail with #code before on #code (creation would succeed).
Base JIT options: JitBypassApxCheck=1
base.OnCreate(savedInstanceState);
Based on 1 of 2 parts from this API proposal: #url
Based on current draft it looks good.
Based on my knowledge I'd expect the change to result in zero difference.
Based on our startup perf investigations we have come to the conclusion that it would be useful to have an easy way to monitor CoreCLR type loads.
Based on the comments of #url implementing interlocked in InputFlowControl.
baseline change
Basically there's no need for
bbca522b753fdb66a9db205ec6555099c55da85b
BCL stackallocs and stackalloc+ArrayPool combos have other safety problems:
Becaues input null string will throw NullReferenceException  in
Because Activated is fired in the WmActivateApp method of the Application class.
because I'm seeing contradictory failures such as:
because it allows too little flexibility.
Because my gut is telling me this is a bad idea.
Because of this:
Because on Android it always scrolls to the top
Because the background task will get the lock in #code method.
Because this changes the API surface it will require a API Suggestion and review.
Because we have other features that actually need this same logic that don't use the code generator.
been here for a long time
Been off the grid for a bit but I'm back.
Before
Before changes
Before fix:
before I go much further.
Before Issue Fix | After Issue Fix |
Before it was far too small.
Before merging this PR we should:
before rotation when the terminal is rotated.
Before the change the expression could be garbage collected as soon as the mentor could be.
Before the change:
Before:
Behind this there is also a limitation from PGO.
being able to request elevation of a JumpTask or allowing the link to point to another shell.
Below are the verification results.
Below is the execution result.
Below is the picture of #url benchmarks on win vs lin machines.
Below is the summary of superpmi run between this PR and PR #url
below to ensure a smooth review and merge process for your PR.
Benchmark
Benchmark code
Benchmark code:  #url
Benchmark code: #url
Benchmark data source
Benchmark results (Copying 5 double to a struct)
Benchmark results for DoubleUtil.AreClose vs DoubleUtil.IsOne
Benchmark results for DoubleUtil.AreClose vs DoubleUtil.IsZero
Benchmark results of KnownColors.ArgbStringToKnownColor
Benchmark results of my AVX2 code (#code):
Benchmark results on Amd
Benchmark results on Arm64
Benchmark results on Intel
Benchmark results:
Benchmark:
BenchmarkCode: #url
Benchmarking shows some improvement:
Benchmarks run via:
Benchmarks with issues:
Benchmarks:
Benefits:
Besides scroll virtualization they have the same purpose: display a list of items.
Better perf and memory usage.
Better perf.
Better startup and runtime performance.
Binding a dictionary with a numeric key type on a request that doesn't include the values causes a FormatException.
Binding and lowering for concrete #code target type.
Binding and lowering of collection expression arguments for target types that are constructed using #code factory methods.
Binding source generator encounters problems when interacting with #code.
Blazor's error UI was overlaying the button that the test was trying to click.
Blocked on #44485
Blocked on #url
Blocked on MicroBuild fixes for Linux and Mac: #url
Blocked on the NuGet tooling fix: #url
Blocked on:
Blue Theme Before & After:
Bootstraping runtime alone and manipulating nuget source feed paths manually is not very smooth.
Both because it has special privileges with lightbulbs to show up above the rest and run with high priority.
Both grouped and ungrouped ItemsControls are working.
Both of the tests you recommended have been added and I added a third _more extreme_ test case as well.
Both provide a shadow for storing return addresses.
BRANCH: #code
Branch: main
break out event handlers from preview workspace.
Bring this back to our sight.
Bringing some optimizations to #code control and related components (#code; #code).
Brings the allocations down from many thousands (mid compilation snapshot)
Browser/wasm sample apps have the same issue.
BTI is a separate technology that is starting to appear in the latest ARM hardware.
btw: #11840 was merged and it changed #code file like this: #url Maybe @github can chime in with some feedback.
btw: Windows image looks very different than others.
Buffers are returned after the assertion condition does not fail.
Bug exposed/introduced by #url
Build / package / inspect redirects.
Build Analysis is blocked by build timeouts.
Build and examine symbols package.
Build failed with NU3037 (#url Closing and reopening for a new build.
Build failure showed the same file path; need to update the change to include properties that are part of the checksum.
Build information and commands
Build the repo to verify the analyzer doesn't flag more patterns
Building a logical expression instead of a branch sequence has also allowed the compiler to perform these checks with 2 compare and branches instead of 3.
building the additional dependency nodes is noticeable.
Building this logic helped me a lot in validating that I am doing the right thing.
Builds off of work merging in #63654.
Builds running from VS with Roslyn VSIX deployed (F5 or #code) fail with an error that the generated .targets file have invalid content.
Built again and tested on 9.0.0 Preview 6 with changing system colors.
Built an updated _PresentationFramework.dll_ and tested with the repro project in #6302 on 6.0.2 x86 app.
Built and compiled the repro projects provided.
Built and run this code
Built and tested using .NET 8.0.100-preview.3.23178.7 win-x86:
Bump gradle because teh current version is not compatible with JDK 22
bump MAUI glide native stuff to 4.16.0
Bump on this; I believe @github has gone on leave.
bUnit tests are not a valid replacement for those.
But @github wrote that setting #code would break accessibility
But a new build is now triggered after fixing merge conflicts.
But as Starchm pointed out - removing it will break workaround.
But at this time the App object has not been created yet.
But back to the original problem you are solving.
but can you help me to chose one more issue to work on ?
But definitely for your basic types that you know are completely immutable (like a readonly string or int) my thoughts are towards keeping the constantizing
But did not want to mess too much with any existing code since this is only a bug-fix.
But didn't we conclude metadata names aren't going to work anyways?
But DO NOT spam a bunch of micro optimization PRs that risk breaking already working code.
But feel free to add these checks if it's quicker and you are already into it.
But given we have such a doc ready I think it's valuable to put into the history for future developer archeologist to find.
But helpful.
But I also agree that the team is free to do what they see fit.
But I am very enthusiastic about this pr.
but I cannot think of a use case off the top of my head.
But I do have a couple of concerns (especially given it's relatively rare someone wants to create an object of nested type outside of the outer type):
but i don't otherwise have an issue with us at least making it so that when that happens we don't go onto the LOH.
But i don't see a concern there.
But I don’t think my code has been tested enough
But I guess it still might be worth revisiting after that one is closed.
But i guess we have feature flag to roll back if this causes an issue?
But I imagine merging this as is might be problematic unless you've tested more.
But I need to figure out why the tests are failing.
But I shall not take this from a drive-by shooter.
But I suspect it'll be tricky to implement.
But I think MAUI should be closer to native performance.
But I think this change is worth discussing
But i think we can simplify in a very easy way.
But I think we need to maintain the existing dev loop for now.
but i wasnt sure on how large you like PRs to be?
But i'd say we should still have an available flag to disable thsi remotely if it turns out to be an issue.
But if i have #code then offering #code along with #code makes a lot of sense.
But it appears none of this has happened yet.
But it changed the behavior
But it might be a valid assumption when we get it from symbol.
But it seems much less likely that i'm going to set a property called #code accidentally and wonder why things aren't working.
But it seems not to have worked.
but it shoudl affect the correctness.
But it simply doesn't hold true anymore.
But it would require an extensive refactor.
But let me know if I should.
But let me know if this somehow matters and you want a #code instead.
But let's see if this breaks anything.
But libunwind doesn't yet.
But looking over this again...
But memory usage is stable with such values:
But my preference is still that we take this and shutoff the other analyzer.
But neither of those approaches detected when a ref passed as an #code argument could be captured into the receiver (collection / interpolated string handler).
But not to be confused with #code?
But not with visual styles (#url).
But one of them is clean after #url is called so NRE is thrown.
but one thing certain we won't postpone the feature for this one thing.
But perhaps that's negligible and it would be better to avoid this complexity?
But some refactorings Tomas did a couple weeks ago to TestWorkspace now make it relatively straightforward to multi-target these tests.
But that can happen later.
But that was years ago and I will try it again.
But the #code do not freeze.
But the #code has another flaw I could not catch up with in the benchmarks: the cached array's linear growth.
But the #code will be used in main thread when Render.
But the background task now waitting the main thread in #code.
But the better way is we can control the Stylus Input thread rerun.
but the content is not that.
But the current benchmark runs too fast so it can't provide much useful information.
But the final criterion is performance.
But the important part is that we don't care about the total time (that can already be tracked by the editor for example).
But the issue in the PR looks like you just need to make #code public or internal.
But the real problem lies with #url.
but then i'd close this out.
but then it's weird that the 2nd argument has two int segments in r2/r3 and then a stack segment.
But then this same exact condition is copied in probably dozens of templates across multiple repos.
But then we loose access to instance fields of the containing type :-|
But then you can accidentally override msbuild properties without knowing it?
But there's still the problem of two events with the same ID.
But they may well make the overall system faster.
But this comes with other complications:
But this is def more complex than i think is necessary here.
But this is more of a Cosmos specific issue.
but this is only used when hardlimit isn't specified.
But this PR is an initial step that brings hard limit on 32bit with segments to the same level as on 64bit with segments.
but this shouldn't be checked in.
but to do that you need to remove this exception so the people working to fix it can be unblocked.
But user should still given the option to override that as they test it themselves
But Visual Studio memory profiling was intuitive.
But want to get your feedback if that's okay)**.
but we could workaround justby handwriting the helper wrappers instead of being generic.
But we definitely should be adding 'async' as it's mandatory in the language to even make #code parsable.
But we need to bit smarter as we have 1k projects to search through.
But we really shouldn't modify the hostapp to make a test pass in this way
But we use a view which is of type LayoutGroup - ContentPage is converted to it after #code I think.
But we're blocked on a number of issues to get that in.
But what enables removing this now?
But why do I explain it to you?
but with the throughput drop it's still consistently faster than segments.
But yes; it could be an alternative to do:
but:
by adding dropdown items to the OK button:
by Alpine Linux).
By chaining gadgets together using return addresses the attacker now can execute whatever they want.
By contrast VB has only:
By default we didn't indent parameter in parameterList
by doing #code.
By looking through all executable memory they look for small groups of instructions directly proceeding a return instruction.
By pulling in the ObservableRangeCollection from the XamarinCommunityToolkit and MvvmHelpers that is maintained by @github we can see that there is some significant performance improvement to be had.
By running this step only on CI the ProjectTemplates local build doesn't work with a missing #code file.
By the way...
By using our own implementation of TaskItem we can use the compiler args as the ItemSpec without any modification.
c.
Caching a loaded assembly is difficult to avoid due to the way .NET Framework handles assemblies.
Caching the nested actions registered in this start context: You would need a per-tree or per-semantic model cache similar to the one we have for per-symbol actions generated by executing symbol start actions: #url
Calling #code when dynamic changes occur ensures that the native UI updates correctly.
Calling the ScrollToAsync method in the OnAppearing event when transitioning from another screen does not work as intended.
Calling the ScrollToAsync method when the height and width of the ScrollView are 0 and not determined will fail.
Calls into Copilot to request the individual pieces of a documentation comment.
Can anyone tell me what to do about the two runtime checks that reported failure?
Can anything technically listen to this event source if it has two events with the same key (we know EventListener-based classes can't)?
Can be simulated in updated repro with more stuff here - #url.
Can be summarized by this test (based on #code)
Can be then added as a work item in #10270
can directly be opened and worked with from a fresh clone.
Can I find the actual failures somewhere?
Can I for example inject a custom #code for iOS with this fix somewhere and have Maui use it?
Can I get a review pass on this?
Can I please get reviews?
Can I still be of assistance here?
Can look later.
can now directly be built from a fresh clone (with dotnet build or inside
Can someone on infra pick this up and shephard this in (ideally using the new integration test framework).
Can someone please check I won't accidentally regress mono :)
Can someone pls take a look at this?
Can the #code thread enter the #code method?
Can the failing test case be removed?
Can they be rerun?
Can this be fixed for .Net 9?
Can this be revived now?
Can this get reviewed and merged?
Can this not just run in the AnalyzeSyntax callback without impact?
Can this PR be prioritised please and make it available for .Net7?
Can this source generator use in WPF?
Can we add a test ?
Can we add some tests to demonstrate the old code and new code are equivalent?
Can we also add an interface and register it to the scoped container?
Can we also get tests which converts from actual string values.
Can we also remove this obsolete comment?
Can we borrow some of that code and rather sync it instead of us creating the same code and having to fix all the same bugs that they probably already fixed?
Can we close it out or bring it to completion?
Can we fix the test scripts instead of adding these redundant annotations?
Can we get this merged and put into a release of Maui?
Can we get this merged?
Can we make sure adding a menu item and disable and enable it with have the correct colors?
Can we narrow down the match here to something that is more suitable for the latter case and not hte former?
can we not just use this:
can we potentially move forward with this.
Can we proceed with resaving those images?
can we rebase this on main ?
Can we remove this as well:
Can we simply remove this line?
Can we throw when that happens?
Can we try re-running the tests once more?
Can we upload newly generated screenshots for the failed ones?
Can you add a UI test that would have caught this?
Can you add some bdn benchmarks showing the benefits here?
can you also eliminate the regressions?
Can you at least verify that the fix resolves your issue?
Can you be more specific?
Can you clarify that?
Can you clarify the titel of this PR?
Can you clarify what the purpse of this PR is?
Can you comment a bit on whether/how this was tested and why this is no risk?
Can you confirm which of the above numbers are with vs.
Can you estimate if this will find it's way into a SR before the end of the year?
Can you explain how it would break razor?
Can you explain what it would do on various examples?
Can you give me some advices ?
Can you help me figure out the root cause?
Can you include me when this is ready for review?
Can you just load a HUGE image via glide (or whatever) on android (but not display it).
Can you link to where that would be needed in Roslyn?
Can you make these changes and see how they actually affect another build?
Can you please add a note about this change in our #url?
Can you please describe why powers of 2 are not ok in this case?
Can you point me to one?
Can you post your sample that you're reproing here?
Can you provide more details?
Can you provide some screenshots of what the caught exception looks like?
Can you rebase on main I will pull and take a look
Can you rebase?
Can you reopen with your local copy ?
Can you review before I add more tests?
can you review this PR?
Can you share more details about this?
Can you share some of those cases?
Can you share the C# program that you use for testing?
Can you share why is it needed to always keep counters on 64bit with regions if there's already a way to update them by walking the heap data structures?
Can you tell me?
Can you update OP with the reason here?
Can you update this PR (and the one in dotnet/sdk) to reflect this UX?
Can you use the big collection but conditionalize the test on 64 bit?
Can you use the new TouchEffect from MCT?
Can you verify that and comment if so.
Can't capture any screenshot because nothing additional is visible and no modal page.
Can't easily tell that any of the diffs (besides 4 improvements) look pretty.
Can't make things worse.
Can't think of any significant risk.
capture that as the 'MaxSupportedLangVersion' property.
Capture the inputs that go into here and the outputs and that should be enough to give a decent coverage.
Captured using a modified version of #url compiled in #code mode with a constant number of lessons generated (high number).
CarouselViewHandler on Android has a measurement logic that converts back and forth between sizes in different units (#code/#code).
CastOperatorTranslation would probably work if you had lots of casts in various ways that you wanted to test.
cause them to execute).
causes that the shadow is added and it displays but the shadow is displayed ~100 ms _after_ the content view is displayed.
Causing the content to remain center even when the keyboard is open.
causing visible lines at view edges when using decimal width and height dimensions.
cc @github
CC @github @github
cc @github @github @github
cc @github @github @github @github
cc @github @github @github as discussed.
cc @github @github I ended up doing this after the discussion on Discord
CC @github and @github for code review.
cc @github as you might have ideas
cc @github for the tip.
cc @github in case we have anything readily available in arcade.
cc @github Let us know if we can help with something or add the tests etc.
cc @github since you opened the issue
cc @github who've enabled inlining for recursive calls relatively recently
Cc @github/ilc-contrib
Cc @github/ilc-contrib @github
cc @github/jit-contrib
cc @github/jit-contrib if anyone can assist here
cc @github/jit-contrib PTAL @github
cc @github/jit-contrib.
CC: @github
CC: @github if you have a spare moment
CC: @github: We were just discussing this.
Cc: marcel-silva ***@***.***>; Mention ***@***.***>
CC.
Certain IDE features need to know this maximum supported
Certain shared pieces (like async ops) seem like they should be completely fine (absent product bugs) to be shared across tests.
Change #code and friends from 100 to 1 to avoid scaling normalized block weights up unnecessarily.
change from the size before rotation.
change return type to Task)
Change the behavior in Kestrel's request processing logic so that bad requests are only logged as errors if the connection has not been aborted.
Change the tooltip of the Inheritance Margin to give more information.
Changes all relative links that traverse up two or more directories (#code) to absolute links.
Changes are all in private code.
Changes are mechanic
Changes in application resources are not picked up by #code extension if the target object is not in the visual tree (i.e.
Changes include:
changes included in this PR -
Changes were applied using the code fix in Microsoft.CodeAnalysis.Analyzers 3.3.3-beta1.21161.2.
Changes:
Changing CodeFixes so that they report priority based on Diagnostics:
changing priority in codefixes (e.g.
Changing target branch to 16.11 servicing branch
Changing the behavior here has a massive impact on all WPF applications because it's used in hot path area.
Changing the PR to turn semantic snippets off by default instead.
Changing this amount of code with very *very* limited performance benefit does NOT pass the cost/benefit case study.
Check buildinfo.json or gocd for more details.
Check the edited first comment please.
Check with customer to test private.
Checking in CI supports CET.
Checking on that.
Checklist:
Checkout
Checks base types for additional interfaces that a type will implement at runtime.
CheckTaskCompletionSource();
cheers!
Cheers.
Cherry-picked changes out of #url
Cherry-picking some cases:
CI
CI and My #url
CI and my demo code.
CI errors #code task
CI errors:
CI failures are unrelated.
CI failures look legit.
CI is a bit dodgy.
CI Only.
CI run succeeds
CI testing confirmed that JIT/AOT paths haven't been impacted.
CI:
CI: #code
circumstances of which You later become aware that would make Your representations in this
Claims retrieved from LDAP return unique group memberships with SIDs.
Clang and GCC added support for PAC-RET that can be enabled using the compilation flag -mbranch-protection=pac-ret.
class and method local Regex objects refactored to cached (static readonly)
Classification is supposed to classify what's in view.
Clean code
clean code improvements
Clean-up of some styling issues and adding comments.
Cleaner codebase for developers.
Cleaner codebase for developrs.
Cleaner codebase.
Clearly the fix in Process.BSD.cs needs testing on OSX and FreBSD.
Clever solution!
Clicking on an already-selected tab triggered the Navigating event unnecessarily.
Client side usage: #url
close this pr and make a new one from a new branch.
closed generated file doesn't support diagnostics.
Closed the previous MR because of a stupid git mistake I made.
Closes #url
Closing fds in a loop with #code takes 0.24s.
CLRTestTargetUnsupported for not-windows added in #111887 to jit64_2.csproj is not respected when CLR tests are built with BuildAllTestsAsStandalone=true.
Cobalt 100:
Code
code cleanup
Code cleanup.
Code formatting is best left for code formatting tools.
Code from this sample: #url
Code Gen requires no changes.
code improvements.
code is all there.
Code style on generated code doesn't make sense to me.
Code using the workspaces layer alone will seamlessly move back to #code for any features using persistent storage.
Code would become
Codecov will compare coverage reports and display results in all future pull requests.
Codefix changes are minor cleanup.
codefixes and refactorings is blurry and as such should both be treated
CodeStyle.Fixes).
Collapse files
Collect **sample stack traces** in the single-threaded browser.
CollectionView scrolled to wrong position after a refresh with RefreshView.
Color Color cases of const field initializations would trigger a circular dependency error.
Combining the behavior from both would give whatever Marshal gives with special handling for WIC/MIL errors and unwrapping of Win32 COMExceptions into Win32Exceptions.
commit 1: #url
commit 2: #url
Commit 4 is a fix to the IOperation generator for the new format.
Commit 9174540 switches from #code to a cleanup function.
Commit at a time recommended.
Commit by commit tells a story
Commit-by-commit recommended.
Commit:       a34291586e
Commit:    c8d103ed3c
common a scenario is)
CompareOrdinalHelper implementation is specifically tuned for string alignment that is only going to show up on longer strings #url
CompareParameter currently looks like this:
Comparing with zero would be easier
compatibility with different servers.
Compile test projects in release mode to speed up execution time.
Compiled and run using .NET 8.0.0-preview.7.23375.6 with PerMonitorV2 manifest.
Compiled and run using .NET 8.0.100-preview.7.23376.3.
Compiler changes extracted from #57830.
Compiler part was already done in #url This PR is now about analyzers.
Compiler request rejected
Compiler shouldn't be written under assumption that an API exists just because documentation says that it does.
Complete #code with #code (We just can't do this here)
Completely removes any allocations caused by the original Tokenizer by using #code instead of substrings.
CONFIG: #code
Confirmed that this unblocks the scenario in #32969.
Conflict between same-named extension methods across different providers is something we already have in various other places where multiple providers implement the same extension method (especially in model building).
Conflicts have been resolved
Conflicts were added by #39432 let me know if you need help merging.
Confused.
ConnectionLostException indicates a bug in RPC since the connection between devenv and OOP should never be lost.
Consider #url where the extra closure that's obvious is larger than the regular set.
consider changing some lifetimes of some objects to be clearer.
Consider this a draft PR for now.
Consider this shell stack: #code > #code.
Considering that we'll probably want unit test coverage that means we (probably) want to get the other PR in first.
ConstantExpected is a good idea.
constraints of type-parameters of type-decls).
Constructors can now be cached and re-used the same way as non-constructor methods.
Contact .NET Core Engineering (dotnet/dnceng) if you have questions or issues.
Contains_on_readonly_enumerable
Content views also need to handle the input transparent logic separately - such as #code and #code.
ContentTemplate = new DataTemplate(()=> modalPage2)
ContentTemplate = new DataTemplate(()=> windowPage)
Context:
Context: #url
context: #url (read back for @github mention)
Context: I am currently working on getting stale PRs merged/closed.
Contributes to #10270
Contributes to #10297
Contributes to #110758
Contributes to #13943 (API approval is #url in that issue).
Contributes to #16235
Contributes to #17303
Contributes to #21787
Contributes to #34126.
Contributes to #38069
Contributes to #5305
Contributes to #68028
Contributes to #7563
Contributes to #81500
Contributes to #8294 and #8302
Contributes to #85014.
Contributes to #url
Contributes to a fix of #url
Contributes to dotnet/wpf#10018
Contributes to dotnet/wpf#5305
Contributes towards #58619.
Contribution License Agreement
Contributor License Agreement
Contributors to this repo have permission update this pull request by pushing to the branch 'merge/main-to-release/dev18.0'.
Contributors to this repo have permission update this pull request by pushing to the branch 'merge/release/8.0-to-release/9.0'.
Contributors to this repo have permission update this pull request by pushing to the branch 'merge/release/9.0-to-main'.
Conversion between FlowDocument and RTF correctly handles Uri values containing non-ASCII characters without data corruption.
Converted this to draft.
Converting draft to PR despite some failing tests in Interop.FunctionalTests.
Converting the existing interop to use CsWin32 types will make transitioning far easier.
Converting to a draft for now until I get into a reviewable state.
converting to draft
Cool.
coordinator.AnimateAlongsideTransition((IUIViewControllerTransitionCoordinatorContext obj) =>
Copied from #url changing dylib.
Copy and replace the dll from #code folder
Copy virtual files into clipboard:
Copyright License.
Core changes are in #code
CoreCLR does this.
CoreCLR was (correctly?) rounding it up because the natural alignment on the managed side was 8 bytes.
coreFX tests failed for unknown reason.
Correct the title.
Correction of incorrect color selection.
correctness > performance
Corresponding PR in the Performance Repo: #url
Corresponding PR in the PerfView Repo: #url
Corresponds to #url
Cose could still be improved by using spans and reducing allocations
Could #code be used insted of #code?
Could a middle-ground be to throw if offset is != 0 on non-seekable handles?
Could be there are already recursive methods marked with aggressive inlining.
Could consider adding a #code between each iteration.
Could fix a crash or weird behavior at runtime but it's very hard to hit (See issue).
Could I replace the failing test case image?
Could it be some pooling bug when running all the tests?
Could someone help with the failure here?
Could the existing internal #code and #code methods be removed?
could this be merged!
Could we add an app context switch to toggle this globally?
Could we add that?
Could we do something like #code#url or #code (with the accompanying #code) or #code?
Could we get its clear description?
could we not have workspace conusmers who woudl want this persistence without pulling in Features?
Could we rather not fix the consumers to use #code as a dynamic resource and override it in app resources?
Could you add a test for this scenario?
Could you add a test that tests async databinding?
Could you clarify what types of inputs or scenarios would best reflect the use cases you're concerned about?
Could you explain how it is different exactly?
could you have a look?
Could you investigate why?
Could you let me know if you plan to include this PR in the upcoming .NET 9 release?
could you make the ObservableRangeCollection public?
Could you maybe have a look at this please?
Could you please /azp?
Could you please check and let me know if you have any concerns?
Could you please check and let me know if you have any further concerns?
Could you please check it?
Could you please check this once?
Could you please clarify the motivation behind it?
Could you please collect some perf numbers to give us an idea about the improvements and regressions in the affected areas?
Could you please confirm the correct behavior on macOS—CV1 or CV2?
Could you please do a review?
Could you please elaborate on how severities were chosen in general?
Could you please inspect the regressions on why exactly it's an improvement there?
Could you please investigate a way to test this?
Could you please let me know if this fix is working and is available?
Could you please provide more details about the use case you tested for this?
Could you please rebase against main and force push?
could you please resolve conflict @github
Could you please review it now?
Could you please review the changes and let me know if you have any concerns?
Could you please review them and let me know if you have any concerns?
Could you please review this and share your feedback?
Could you please run /azp again
Could you please share any further suggestions.
Could you please share your thoughts on this?
Could you please suggest if there are any other possible ways to automate this?
Could you please take a look?
Could you please take another quick look at some of the test changes I made since your review?
Could you please tell me in which version the issue was resolved?
Could you please update us on the status of this pull request?
Could you please update your title to be more descriptive?
Could you please validate it once and let me know if there are any further concerns.
Could you please verify it?
Could you please wait with this this change until that work is done?
Could you provide more detail on the build failure?
Could you rebase and fix the conflicts?
Could you rebase Matt?
Could you review this PR?
Could you take a look at that one?
Could you take a look when you can?
Could you test it ?
Couldn't the fuzzer check that the total length is below the target threshold after writing has completed?
Couldn't we alloc a separate FOH segment for each unloadable context?
Couldnt find any.
Covers ~3~ 2 new cases:
crashes
Create a custom WebPlayerChromeClient:
Create a local branch #code with all the miscellaneous changes.
Create a new renamer API to rename many symbols using the one solution snapshot.
Create a new UITest for ModalPageMarginCorrectAfterKeyboardOpens
Create a trigger and new trace type for the GenericPInvokeCalli stub.
Create for draft run
create native java/kotlin sample to verify if images can be loaded in native app.
Creates a switch snippet which produces a default statement.
Creates feature parity with the webapi template in regards to OpenAPI
Creating a more generic #code could make sense but it's outside of my comfort zone and so I'll leave it to others to decide on what that would look like.
Creating this as a draft PR to get some perf numbers with the property value changed to object.
Creation of a new #code will not influence the value of #code for previous instances.
Credits to @github and @github
CSC : error EnableGenerateDocumentationFile: Set MSBuild property 'GenerateDocumentationFile' to 'true' in project file to enable IDE0005 (Remove unnecessary usings/imports) on build (#url [D:\a\_work\1\s\src\Components\Analyzers\src\Microsoft.AspNetCore.Components.Analyzers.csproj]
CSC : error EnableGenerateDocumentationFile: Set MSBuild property 'GenerateDocumentationFile' to 'true' in project file to enable IDE0005 (Remove unnecessary usings/imports) on build (#url [D:\a\_work\1\s\src\Framework\AspNetCoreAnalyzers\src\Analyzers\Microsoft.AspNetCore.App.Analyzers.csproj]
CSC : error EnableGenerateDocumentationFile: Set MSBuild property 'GenerateDocumentationFile' to 'true' in project file to enable IDE0005 (Remove unnecessary usings/imports) on build (#url [D:\a\_work\1\s\src\Http\Http.Extensions\gen\Microsoft.AspNetCore.Http.RequestDelegateGenerator.csproj]
Curious then why we are worrying about violations in code that don't use JTF or how they're showing up.
Curious to whether this is still applicable?
Current (#code branch) codegen for DIV on win-x86 is approximately #url
current aspnet core gives these stats on the benchmark (avg on 4 runs):
Current codegen:
Current issue is builds are failing with 'vbc exited with code 1'
Current issue:
Current methods such as using BitmapCache (which cannot retrieve content back to memory) and hooking DirectX APIs (which is complex and unstable) are not feasible solutions.
Current usage of priorities:
Current version: #url
Currently 'draft' as this depends on TypeScript having moved entirely to LSP pull diagnostics.
Currently fullscreen is not working.
Currently host uses property #code to provide all paths where native dlls should be searched for but SQLite doesn't know about its existence.
Currently if you package an SQLite extension in the nuget package by placing binaries in the #code the extension will work fine when you do #code but when using just #code it won't pick up the dll because they end up in different directory than an app.
Currently it seems that a lot of tests are failing.
Currently lowering ensures the property simply by spilling when the fields do not already map cleanly to registers.
Currently no restriction on how big (that will have to change).
Currently SyntaxNormalizer calls GetNextToken on every token it visits to calculate the number of new lines.
Currently the result of either expression is set to a local but that's not necessary since in both cases we will have a (label->value) jump table at the end that could be pushed onto the the stack.
Currently the similar option would be #code which is similar in implementation (Win2D).
Currently the testing for vxsort exists in #code.
Currently this doesn't generate the same screenshots as CI so it's still a work in progress.
Currently we partition into work items that take roughly 10 minutes.
Customer report.
customer reported it vs.
Customers can finally use ObservableCollections that implement range operations.
Customers can now remove items from forward stack.
Customers could use this workaround for now:
Customers using #code or #code APIs on empty source strings involving ICU logic are returning a result 0 (indicates found at index 0) instead of -1 (indicates not found).
Customers using #code overload that accepts multiple buffers have observed #code being thrown in two scenarios:
Customers will be finally able to change the #code components as they please and won't experience undocumented behavior and exceptions that were not originally inteded.
Customers will enjoy #code without the application randomly hanging.
Customers will finally get their fix after 10 years.
Damageboy's repo has moved on since the coreclr copy was taken.
Dan
Dark Theme After (ignore the black punctuation in the signature preview):
Dark Theme After:
DateChanged - Called when the DateProperty value changes from value x to value y (where x != y)
DateSelected - Called when the user selects a date (regardless of whether it is the same value)
days!
Dealing with that locally and will update this PR In a bit.
debug coreclr tests with #code and #code; debug runtime built with #code
debug coreclr tests with #code; debug runtime built with #url and this PR
debug coreclr tests; debug runtime built with #code
Debugging a test case shows me these results:
Debugging some of these paths on CoreCLR is going to be significantly more difficult if this is in managed code.
Decompilation taken from PresentationCore.dll Version 4.8.9032.0:
Decoupled RowDefinitionCollection and ColumnDefinitionCollection from the owner grid to ensure VS Hot Reload functionality remains intact.
Def would like to understand some parts a little better.
Default value is #code (like it was hard coded before).
defenses of lack of personal jurisdiction and forum non-conveniens.
Defines a new ISymbolicNavigationService interface and uses it in GoToDefinition to enable third parties to navigate if they recognize an ISymbol as their own.
definitely hesitant about this area.
Definitely it would be good to try it.
Definitely on my list :)
Definitely sounds worthy!
Definitely!
Definitions.
Delegates for lambdas in collectible assemblies have to be tracked by the GC.
Demo
Demo test: #url
Demonstration of #url
Dependency merged.
Depends on
Depends on #8616
Depends on #url
Depends on #url #108999
Depends on infrastructure implemented in #url
Description of Change:
Deserialization of the URI string and parsing the URI string are two separate logical operations and should not be tied together.
Design notes:
Despite the clients explicitly adding this telemetry exactly to get this data.
Despite us including the .nupkg's in the correlation payload itemgroup:
Details
Details:
Detection of the automation peers was then verified with Snoop and Ranorex.
Developers and customers will get the native behavior of Windows 11 with WPF applications.
Developers will be able to modify the Button control brushes without affecting other controls.
Devirtualizing GVM without inlining is supported now.
Diagnostics panel:
Dictionary is not.
Did a #url and #url and didn't get the results we were hoping for.
Did full NGEN go in after that build?
Did so in the second commit.
Did the previous approach guarantee invariants around trivia placement?
Did we delete that from the async tagger at some point?
Did we start a conversation to confirm the desired behavior?
Did you consider using the #url?
Did you mean #code instead of trace id?
Did you try to implement and measure this variant?
Did you verify there are no existing PascalCased local functions in IDE code?
Didn't know that existed :)
Diff JIT options: JitBypassApxCheck=1
Diff JIT options: JitBypassApxCheck=1;JitEnableApxIfConv=1
Diff makes sense here.
Diff: #url
Difference is related to how the divider value affects the application startup.
Disable the tests there for now.
Disables CS8597 - _Thrown value may be null_ warning for ref projects.
Disabling it for StageTwoBuild for now as it's also disabled for FreeBSD etc.
Disassembly:
disclosure: I'm not currently able to run the tests locally (although it builds cleanly):
Discovered during investigation of #74761.
Discovered while working on enumerables.
Discuss the newline decision with vscode.
Dispatcher.Dispatch(() =>
do a null check and throw/assert on allocation failure inside the helper so that the interp doesn't have to check for null every time it allocates.
Do all the Pointer Gesture events fire when using a touch screen on Windows?
Do I have to use #code and #code even for those in #code?
do I need a test for VisualBasic?)
Do I need to test out-of-process hosting to see the difference it makes?
DO NOT MERGE.
do not review
Do note that this targets the case-insensitive compare hence the big difference between #code and #code compare.
Do our existing Arm64 CI machines have PAC support?
Do the windows docs still apply
Do we also have an analyzer to catch this?
Do we have a recommendation for the Razor team on how to move off this flag without breaking semantics?
Do we have consumers taht would not want this beahvior where the symbol has been sensibly fixed up?
Do we have people lined up to use these new APIs so that we can verify that they work well in practice?
Do we need this?
Do we need to create an enum wrapper for possible #url values or shall we leave it up to people?
Do we want apps to crash just because a stylus plugin threw an exception?
Do we want it in .NET 9?
Do we want to always scroll back to the first item when the data source changes?
Do what you have to do to make it correct.
do you have a repro I can test against to compare before and after this PR?
Do you have any advice or comments on how I can move forward with this one to perhaps get it ready for 9.0?
Do you have any idea on the differences in these code paths:
Do you have any idea why it shows up to #url?
Do you have benchmark numbers for the actual I/O throughput to Redis?
Do you have good examples in BCL or other real-world code where this kicks in?
Do you have the new numbers for this?
Do you know if any of the team is using it to work on Roslyn?
Do you know why are we seeing JIT compile here when full NGEN is enabled?
Do you maybe have any suggestions?
Do you mean add an AppContext switch for it?
Do you mean this shape is problematic:
Do you mean UI test?
Do you need me to try to fix this or did you assign this to yourself because you are going to take this further?
Do you not need to check parents?
Do you plan to implement this perf improvement as part of this PR?
Do you see #url and the data being successfully applied by the compiler?
Do you see the unsafe nature of the stackalloc uses in the BCL in unbounded stackalloc that may slip through code review?
Do you think there is still value in this PR for general compiler scenarios?
Do you think you can add a device test?
Do you use UnselectedTabColor/SelectedTabColor is no color is set in FontImageSource?
Do you want to move it forward?
Docs #url
Docs: #url
Documented at #url (you could have also manually edited the baseline file)
Documents are opened (but not visible).
Does .NET Framework output these ETW events?
Does it actually?
Does it contain the inner exception with the original callstack?
Does it depend on the order here #url ?
Does it make sense and is that more secure?
Does it make sense to put this in an automated test?
Does it print that in JitDisasm like we discussed internally?
Does not support (will be added in future PRs:
Does that help?
Does that mean #code should be un-obsoleted?
Does that mean that pooling is easier to inject into via reflection for example?
Does the CI test the packages and their dependencies?
Does the issue repro when targeting net9.0?
Does the PR look good without the last two commits?
Does this affect normal preferences?
Does this align with what the other native apps do on Android?
Does this also need to be backported to release/9.0-staging?
does this fixes #24428 too ?
Does this mean that heap hard limit doesn't work correctly with segments even on 64bit on current main?
Does this PR change behavior for public abstract instance members?
Does this PR fix this scenario #url
Does this serve a similar purpose?
Doesn't appear to be a result of this PR.
Doesn't the TPL allow for synchronous execution on awaits?
Doesn't this create overlap between the TapGestureREcognizer and PointerGestureRecognizer?
Doing simple #code on the result fixes the hang and prevents breaking the binding for the button in row header that's used in all styles for #code.
Dominik Švarc
Don't be too worried about it.
don't do what #code #url
don't tell me to do all that work for you.
Don't think there's any.
Don't worry about them.
Done
done :)
Done with cleanup/rewriting.
Done with pass.
Done with review pass (commit 1)
Done with review pass (commit 10).
Done with review pass (commit 2)
Done with review pass (commit 3)
Done with review pass (commit 4)
Done with review pass (commit 5)
Done with review pass (commit 50)
Done with review pass (commit 6)
Done with review pass (iteration 1)
Done with review pass (iteration 6)
Done with review pass.
Done:
Done.
dotnet 8.0 - screenshot
DOTNET_GCLatencyLevel=0
DOTNET_GCTrimYoungestKeepPercent=0xF
Download .NET:
Draft because I'll do more manual testing.
Draft for now.
draft PR to discuss all the different locations we could/should be logging
Draft PR until we can reproduce it.
Draft to check for failures on CI
Draft while we decide the future of SG diagnostics (and whether they should be reported by analyzers instead).
Drag virtual files:
Dropped
Drops CPU cost while loading a project like Roslyn from:
DrtDocumentViewerSuite
DrtFixedEdit
DrtFixedPanel
DrtMetroTest
DrtSequence
Due to the significantly more interesting cases that are generated
Duh.
Dumb question.
Dumped the segments for the argument and I'm not sure how to interpret them:
duplicate of dotnet/runtime#9460
during composition).
Dynamic compilation takes up too much memory.
e.g.
E.g.:
Each #code is backed by a #code.
Each developer who's faced this and made their own #code extension has had to decide which one to use for their unique situation.
Each helper is now used from two locations.
Each of these messages corresponds to a different SOS Breaking Change Version.
Each party reserves all rights not expressly granted in this Agreement.
Each request will either read or write to a local Redis instance.
Each test will have a corresponding txt file pointing out any tests that had an unexpected outcome.
Earlier in the days the CI search essentially meant two different compares where CI was way more expensive as you couldn't just load a register and OR the two masks.
easy to reproduce
ECMA spec is concerned about verifiable code only.
EDIT (@github): added #code syntax so that PR is linked with the issue
Edit:
EDIT: done 👍
Edit: E.g.
Edit: I am more sure now that I think vscode uses the cli to create templates.....
EDIT: I was testing with R2R disabled locally since VS kept complaining about being unable to load PDBs for it.
Edit: I will run the other relevant benchmarks tomorrow.
EDIT: mentioned the non-nullable case.
Edit: Removed #code header from non-body responses.
EDIT: The priority field gets translated to #code which is part of shipped public API.
Edit: This simplification is now complete.
EDIT: Yes we should.
Editor's width and height is not updated when changing the device orientation from landscape to portrait.
EF itself takes a dependency on a newer System.Drawing.Common (from the Design and Analyzers packages)
EF should just be referencing CodeAnalysis for its surface area and hiding that dependency from any of its packages (since it doesn't participate in the library dependency graph).
EgorBot job that I have just submitted is an example of a regression.
Either large values of #code or even modest values of #code if the stack is already close ot its limit can introduce stack overflows into methods that would not have overflowed without stack allocation.
Either up the default to writing to Information instead of Trace
Either way I don't think implementing IList here only to workaround a bug elsewhere is a reasonable solution.
ELAPSED MS TO START CONSOLE APP: 65 (average)
ELAPSED MS TO START CONSOLE APP: 68 (average)
Ellipsoidal
else
emit (say 11x for interpreted - 1x for emitted method = 10x) we get (3000x / 10x) = 300x meaning an emitted method needs to be called ~300 times to break-even but after that it is ~10x faster.
Emitter unit tests
employer or Your employer has intellectual property rights in Your Submission by contract or applicable
employer to make the Submission before signing this Agreement.
Enable runtime build under FreeBSD-arm64 when using internal libunwind (atm.
Enable this for vcxprojs as well so that the host packages can also be restored from the flowing runtime dependency.
Enabled by #code
Enabled the release mode in the androidConfiguration.
Enables Hot Reload to detect capabilities before WASM runtime is loaded into the browser.
Enables support for nullability annotations
Enables VSTHRD200 for remaining projects.
Enabling for one OS at a time would be sensible.
Enabling nullability annotations for few projects did not produce build time errors for ref projects.
Enabling response streaming is a breaking change because sync reads are no longer allowed and throw #codes.
Enabling the NOP check for x86 fixes this failure.
End result is a NOOP.
Enhancement of: #26948 #26846
Enhancing RTB to support hardware rendering would provide significant performance improvements and enable high-quality rendering features that are currently restricted.
Ensure FirstName and LastName Follow Pascal Case in QuickGrid Component
Ensure font file exists before returning the path to it.
Ensure the key is set before setting expiration.
Ensured #code is respected when dialog is shown and reflects the correct value when dialog is confirmed.
Ensured the value is of type IEnumerable and pass it to Create method of TemplatedItemSourceFactory to avoid null reference exceptions.
Entire Agreement/Assignment.
Environment variables:
Equals (cached means that Method was called):
Equirectangular Pythagora's Algorithm
Escape analysis can possibly also leverage the fact that an allocation may be opaquely captured by a byref like struct.
esp.
Especially diagnostics and code fixes.
especially for complex files like the one in #url
Especially in the context of us (i think) no longer wanting to have vs-deps branches anymore.
Especially since it's inconsistent with symbols that come from source.
Especially when the ui clearly states what balanced currently means.
Essentially any future I/O we need to make sure we go through #code to ensure it's correct.
Essentially unify all of our file system abstractions around one interface.
Essentials' secure storage api's write to files which should not be backed up (#url
Establish Code Coverage for WPF testing
esto esta muerto?
etc.
etc.).
ETW and EventPipe cannot listen.
Eucliedian/Planar/Flat-Earth
Even for the common scenario there are at least 3 design-time consumers of #code:
Even for those that use #code that doesn't prevent the dependency closure of the package from being dumped in the app/library and passed to the compiler.
even if it was bigger than half a seg size we wouldn't be able to physically fit that much onto a segment anyway.
Even if RunTests is removed from CI entirely.
Even posting the benchmark as a GIST felt wrong because then it's essentially local to this PR.
Even when the package is referenced like this:
Even with small inputs there was not much degradation in performance
Event Listeners are unable to subscribe to this EventSource when there are events with the same ID.
Every other option isn't namespaced in the same way.
Every time I update the Roslyn tool version I would have to update the hash.
Every unit test that creates a workspace waits for pending operations before moving to the next test.
Everyone is informed the project is MIT.
Everything (e.g.
Everything else is a non-known type so things like custom controls are non-known types.
Everything has already been explained there.
Everything seems within error margins:
Everything works as expected when both states are defined in the same #code:
Example before these changes:
Example breakages:
Example run with failures - #url
Example use case that this makes a bit cheaper
Example:
Example: #url
Exception handler middleware handles exceptions thrown in the app.
Exception handling has been improved with more specific error messages for parsing failures.
Exciting!
Executing the benchmarks with BDN (part of the PR):
Execution of additional instructions may also increase the compilation time.
Expect this may blow up in some tests with stack overflows; we'll see.
Expectation:
Expecting a specific layout type on ViewExtensions for Android and iOS makes impossible to set backgroundColor to null once it has been set
Experience: #url
Experiment with turning non-escaping #code into stackallocs.
explicitely suggested) will get higher.
Export that interface from #code with implementation
Extend #code to be essentially unbounded (or just add enough levels) and bump priority of explicitely suggested codeactions by certain amount.
Extend the Arm64 writebarrier function to support regions.
Extends options consumed by the #code method in #code and #code to match how they work in #code and in the documentation.
ExtensionRegistrationHandler.cs loads the DLL and uses reflection to get the IExtensionMethodHandler
External calls make an LSP request to _extensions/registerExtension_ and provide the assembly path and full type name of the external handler.
f3d24c15eea5399fba05758852d2c8d477db81a2
f67b60a9 is being scheduled for building and testing
f8034ce1 is being scheduled for building and testing
f84d44711076035a71055f9c30293373c816f245
Factor LibraryImports into Common\ - See #url
Failed 1/10 iterations with
Failing tests don't seem related.
Failing tests probably require a retry.
Failing to dispose of a #code created with #code will result in the underlying sources never clearing their callbacks which point to the linked source.
Failure example:
Failure reported
Failures seem to be unrelated
Failures will of course increase the amount of time the run takes.
Fair point.
Faster solution can be achieved by using #code for trimmed string and actually using #code for the dictionary itself instead of uppering it.
FCC Algorithm
Feature and PR review is not expected to happen before the release of C# 12.
feature that doesn't even attempt to build projects that didn't change.
Feedback on the design welcome.
Feel free to adjust it.
Feel free to copy the code over and expand from it.
Feel free to follow up with us here or in the Roslyn channel in #url
Feel free to hop in our #url or wherever else if that would help.
Feel free to include any commits you need.
Feel free to merge both tests into one and delete the #code line here.
Feel free to merge/squash once CI issues are resolved.
Feel free to notify me if you think the test should be removed.
Feel free to ping for a review (though try not to ping more htan once a day) :)
Feel free to re-activate and ping us when it's ready for another look.
Feel free to stop by for an explanation.
Feel free to take this if you'd like.
Feels odd to have this information encoded both in the type symbols and within attributes.
Figured out the projection buffer setup.
Figured out things :smile:
Figuring out the testing story.
File an issue.
File name: 'C:\Code\runtime\sequencereader\artifacts\bin\testhost\net8.0-windows-Debug-x64\dotnet.exe'
Filed #url to track revert.
Filled language issue/discussion for asymmetries in types flowing in patterns: #url
filter index changed is critical for many custom controls scenarios
Find: #code
Finding a few more places that are just low hanging fruit to swap from heap-allocated arrays to stack-allocated/inline-arrays.
Findings:
Fine with the change.
First attempt at making delegate GC fields immutable in CoreCLR so that they can be allocated on the NonGC heap.
First fix resolves #2995 / #9035 report that was also attempted in #8202 but was reverted in #10105 due to obvious issues.
First idea was to make properties that hold on #code values internal and add public ones that only get/set the value without notification (using a default notification that will get ignored).
First step is to add a unit test that demonstrates the problem with #code expressions.
Fix #code Appium action on Mac.
Fix #url
Fix AdaptiveTrigger not working as expected on iOS.
Fix alignment Assert and add tests for #url
Fix Application freezes when Background property is set to a DynamicResource of type OnPlatform Color.
Fix colors from the default Switch Style.
Fix crash starting the swipe on SwipeView inside CollectionView.
Fix for #41367
Fix for #65091
Fix gesture crash navigating on Android.
Fix HubClientProxyGenerator to Handle Inferred Generic Type Arguments
Fix incorrect return condition for iOS IndexOf implementation and add test case for #code and #code.
Fix invalidating Shapes BackgroundColor.
Fix iOS picker update override the placeholder text with given text thus cause the text color to be shown instead of title color.
Fix is to remove convert for the purpose of pattern match for the transformation.
Fix issue: #url
Fix OnBackButtonPressed doesn't trigger on iOS.
Fix our C++ projects to actually run static analysis.
Fix performance issue using Shadows on Windows.
Fix seems appropriate but I agree with @github: feels like this needs a test.
Fix tab colors not updating when adding or removing items
Fix the WeakEventTable thread safe issues.
Fix tocuh in Window with StylusPlugIn may throw InvalidOperationException
Fix:
Fix/updates:
Fixed
Fixed :)
Fixed an issue that caused the deletion of comments when using the code fix for use throw expressions.
Fixed application crash when dragging an element to the end of a collection on Android.
Fixed auto picker resizing after selection
Fixed the issue by updating the SelectedItem when clear the items or selected item using CollectionChanged event.
Fixed those builds.
Fixed.
Fixes
Fixes - #url
fixes :#url
Fixes #
Fixes # <!-- Issue Number -->
Fixes # <!-- Issue Number --> #9886
Fixes #{bug number} (in this specific format)
Fixes #code and infinite loop issues when updating any of #code's children after they've been already set from template or manually.
Fixes #url
Fixes #url (200GB allocations in calls to #code over 30 seconds)
Fixes #url #url
Fixes #url and both issues mentioned in #url both the empty path issue described in the initial post and the bad shutdown mentioned in #url
Fixes <!-- Issue Number --> #8799
Fixes an infinite loop (an application hang) when scrolling to a #code right after layout refresh.
Fixes assert failure compiling dotnet/runtime.
Fixes errors like these:
Fixes feedback ticket: #url
Fixes issue #url
Fixes jankiness with using a PanGestureRecognizer to translate a control.
Fixes missing #code property on some Fluent controls that I found to be lacking based on the original issue.
Fixes serialization of document Name and FilePath properties.
Fixes the ref held by #code from #6700
Fixes the same issue in #code by throwing the proper (NotSupported) exception.
Fixes this issue: #url
Fixes to StressLogAnalyzer are least-effort because it is intended to be replaced by a C# version in #104999.
Fixes warning during bc files compilation.
Fixes working with #code to (#code/#code) operations on large buffers (over #code) as those are supported by #code/#code as the underlying layer supports creation and working with such buffers.
Fixes:
Fixes: #url
Fixing issue ...
Fixing new nullable warnings that came from bumping the tfm
Fixing SDK link.
Fixing WPF to do the right thing in a compatible way is the solution.
Flags with carried forward coverage won't be shown.
FlyoutBehavior = FlyoutBehavior.Disabled
Focus on the bigger gains.
Follow up on #url which added new public API
Follow up PR per Sam's comment in #url
Follow up to #10156.
Follow up to #url which has failures due to IDE warnings.
Follow up work here #url
Follow-up #url
Follow-up from #108086 (#url).
Follow-up to #101611.
Follow-up to #103319 (#url).
Follow-up to #110819
Follow-up to #59897
Follow-up to #67881
Follow-up to #8092 and others
Follow-up to #8519
Follow-up to #url
Followed by #code disposal via the preceding #code statement.
Following numbers are from an altra (N1) machine that doesn't support PAC or BTI.
Following the #url and deleting the PDB I observe on average 9k exceptions per second on my 12 core machine.
followup to #url
For #url
For 1.2 loose the ability to have bottom.
for 64-bit we allow 5x the hard limit if it's not using large pages.
For component governance reasons we need to be deliberate about what link checker we pick.
For controller action they were parsed as separate values while for Minimal APIs - as single one.
For developers it introduces more familiar types in internal classes than custom implementations for a simple thing.
For example on laptops with connected HDMI external display and display setting “Extend”
For example:
for following Earth models:
For instance #code will be considered escaping in #code if the JIT cannot inline #code.
For instance in
For instance:
for mark array) a known bug of heap hard limit with segments that was present since 2019?
For me
for more information: #url
For my workaround I updated android style for toolbarStyle to:
For now enable on Linux only.
For now we gotta wait.
For other functions the most optimal way is to move the values into GPR registers and use scalar code.
For reference here's the MonoDevelop copy of the code:
For reference: #url
For simple HTTP(s) it should just work.
For small groups there's some unused memory in the inline array and for large groups these 3 allocations get lost in the noise.
For Sqlite
For SqlServer
For that purpose it's actually a pretty terrible choice and adds a tremendous amount of overhead for functionality that we're not needing in those scenarios.
For that reason the codegen needs to issue a move of op1 into the target register before #code is issued.
For the #code we noted an increase in size by 1.4%.
For the analyzers package you should upgrade and keep the dependency private.
For the designer package I do think you should rethink your dependencies for the next version.
For the following code:
For the green visitors however we hace
For the ImmutableArray case this is a narrower solution to identify cases where we might need to load more carefully:
For the red visitors both the preexisting versions declare it as #code which i used as well.
For the rest of the execution engines (jit/aot) the change represents a minimal refactoring that shouldn't have any side effects.
For the scenarios that would be potentially impacted by this change in particular we don't have any automated tests (#url
For the short term - can EF update the version of Microsoft.Build that it's pulling in?
for they don't want us to messing with thier generated file when people apply code fix all to their generated file especially for closed files.
For WebAssembly such test candidate might be #url that is running #url For Server we probably need to create a new test
Force push is a trivial rebase on #code.
Formatter annotation is separate from elastic:
Fortunately there is still no conflict but some reviews are still missing.
Forward porting tests that were added in the release/9.0 backport and were not in the original main change: #url
Found an issue in integration test
Found as part of the work on #url
Found by Linux Verification Center (linuxtesting.org) with SVACE.
Found during code review
Found in #108579.
Friendly reminder that today 10/14 is Code Complete for the November Release.
from : #url
from [Bing Microsoft Translator]
From @github on #url
From #url
From above (thanks @github!) I see:
from directory enumeration to file reading to parsing to recursive visitation
From my perspective:
From my side I'd like to create a story containing all the work items that need doing for PAC-RET including extracting all the relevant comments from this PR.
From the last commit after the triple force-push:
From the latest force-push:
From the linked comment below:
From what I've been seeing on CI it appears to be a wash - the single machine legs run in 35-45 minutes on both old runtests and this
from your PRs.
From: dotnet-policy-service[bot] ***@***.***>
FTR: I have not been able to reproduce the original issue yet.
Full #code after this PR
Fun fact!
Function type scenarios are out-of-scope for this PR.
Funny hash code.
Further if we ever decide to revisit the decision we have a doc outlining the previous benefits / downsides it provided.
Further observations:
Future developers can't see the benchmark unless they do a lot of git history research.
Future theme updates will follow the same sort order (theme > category > token name).
FWIW I merged a PR that updated the GUID yesterday (#url so maybe some of the new collection runs failed?
FWIW this is something that I've been wanting to do for a while...
FWIW this shouldn't be specific to just streaming large data.
FWIW this would only affect pre-AVX2 X86 CPUs (or NAOT as I was informed we don't do Avx2 checks :/)
FYI - @github
FYI @github
FYI @github @github @github as this relates to our conversation earlier today.
FYI @github does this look roughly like the shape you imagined?
FYI @github since you were curious about this issue.
FYI @github/jit-contrib
FYI @github/roslyn-infrastructure
FYI this will need to target back to master
FYI:
FYI: this is covered by issue #65415
Fyi.
gen
General code here LGTM.
general concern about what scenario is running that is causing such huge allocations.
General guidance with the essential steps to add or update a native external library.
Generally it's not the goal to minimize the size number only.
Generally when passing literals that are non-bvious in context.
Generated code filtering is performed in the diagnostic analyzers themselves.
get rid of un-used #code -> #code -> #code
GetHashCode:
gets built in parallel.
Gets far enough to run the Hello World sample in tvOS Simulator:
Gets or sets...
getting the full trace is fine.
GetTotalAllocatedBytes:706824
GetTotalAllocatedBytes:731192
GetTotalMemory after gc:276120
GetTotalMemory after gc:278736
GetTotalMemory:708648
GetTotalMemory:733088
GH issue #url and GH issue #url -  Fixed
GIT: #code
Given it's another large chunk I want to leave that to a follow on PR.
Given our test execution environment that will fail the process (no chance a swallow hides the exception) and it will generate a .dmp file that will be attached to the test run.
Given that #code **isn't conclusive** — which is the key point I didn't know before — there's not really any reason at all for this additional ceremony.
Given that I already have some experience making this kind of changes for WinForms I have doubts.
Given that this boolean is itself vulnerable to attack then _eventually_ we should either:
Given that we are now past preview7 is this required for 9?
Given the following #code
gives:
Glad someone does!
Glad to see a PR with a fix for this issue after a few years.
Glad to see the priority raised.
glibc that is used by the most popular Linux distros like Ubuntu does not respect value set by #code linker switch for some reason.
global.json file:
Globalization tests live in src/libraries; these are not runtime concerns.
globally) to reduce noise in perf PRs if its discussed properly with the community and the team.
Glossary:
Go added it already.
Go ahead and implement the VB side.
Going to elevate out of draft status so the @github/roslyn-compiler folks can determine if they see any issues with this as the changes lie under the compiler folder.
Going to fix that.
Going to give a look again after the build finishes.
Going to hold off on this for now...
Good catch.
Good point.
Good question.
Good start!
Good work.
Google started the #url in chrome for 1% of users.
Got another dump from Peter - theres a ton of threads of blocked here
Got it.
Gotcha.
Governing Law/Jurisdiction.
Great job digging all this up
Great tests!
Great to see attention to the performances as MAUI struggles a lot there.
Great!
GreatCircle
Greetings.
GroupBy benchmark which uses #code to create 10 buckets of 10 elements
Guess opposite of so called coding style in one file.
Guess we're gonna see some stylistic changes from Jeremy in the parts he touches.
hackweek 2024: replacing XamlC by source generation
hacky fix
Had trouble finding the checkbox for inline parameter hints using Tools/Options search.
Handle CultureInfo.InvariantCulture if it's supported by the option
handler.PlatformView.VerticalOffset == request.VerticalOffset)
handler.VirtualView.ScrollFinished();
Happy days.
Happy new year!
Has been around since at least .NET 4.5.
has been here for years
has been there for a long time
has been there for many years
Has it been reviewed?
has no mentor).
Has this been waiting for another reviewer since July 2023?
Hashtable supports any number of concurrent reads with up to one concurrent write.
Have added api request #url
Have also a check on the ShouldShowToolbarButton method (if not overriden in your code) : line 181 of #url
have disclosed under Section 3 ).
have it merged will be an boost for my inspire.
Have physical promotion read replacements that map to parameter registers back eagerly in the entry basic block.
Have SSA create initial SSA defs for all locals instead of just the live subset (most of the time these will end up being unused).
have the necessary authority to bind the listed employer to the obligations contained in this Agreement.
Have VN give these initial SSA defs suitable initial value numbers.
Have you done a test insertion with this change to see if there are any noticeable perf regressions?
Have you done any sanity testing with a touchscreen or tablet?
Have you had the chance to use these changes with a Playwright-based setup?
have you run the many tests that @github has in his repo?
Have you tried running the full benchmark suite as defined in #url
Have you validated this resolves your issue?
Haven't tested it but using #code and #code might accomplish the same:
Haversine
Having a solid requirement should be intuitive.
Having about 7 partitions seems to be the sweet spot between work item time and queuing time.
having caret in the keyword.
Having ComWrappers is important to make #url works.
Having supporting data is likely to get this done more smoothly.
Having the names be distinct helps make it clearer which of these distinct forms is happening.
Having things perform great for the common case is the ideal for me :)
He might eventually want to port it back to his repo.
header fields in response to a HEAD request as it would have sent if
Heading is now voiced by the installation in the controls
Heaps are available as part of the failed integration test run.
Hello :)
Hello !
Hello Maui team.
Hello!
Hello.
Helps avoid deadlocks
Helps prevent missed cases like occurred in #31708.
Helps reusing centralized code under #code.
Hence you then may want to consider encrypting the new return address whenever it gets stored to any memory location.
here - #url to continue working properly even under the same visual root instead of just bound property being always set to #code.
here #url You should probably only do it for the trees that are part of the AnalysisScope parameter so for the IDE single file analysis case you only execute them for one tree and not all trees that have partials for the symbol
Here are more details on this :
Here are results from the current iteration of this PR:
Here are some results from earlier iterations of this PR:
Here are the relevant sections of the spec that justify this understanding:
Here are two videos with differing TaggerDelays to make it so the diagnostics do not feel as obstructive.
Here I'm running the code from the original issue against our sandbox.
Here index return the negative value.
Here is a suggestion:
here is one of the simpler ones
Here is the callstack at the point of <code>SIGABRT</code>
Here is the code I am using:
Here is the first cut of database window functions support.
Here is the HeaderTemplate Example #url
Here is the output:
Here is the progress:
Here is the relevant post.
Here is the sample code:
Here is where #code is defined in #code
Here is why:
Here the migrated cases which ensuring that the background color consistency of different elements matches their native counterparts.
Here too; Can anyone tell me what to do about the runtime checks that reported failure?
Here we
Here we go again lol.
Here we want to have a better completion when the completion item has a nested class when the commit char is #code or #code
Here:
Here!
Here's a benchmark showing the reduced allocations (and time) in the new implementation on a 20 kB text.
Here's an example:
Here's benchmark where I do a foreach on PartialList vs ReadOnlyCollection:
Here's how to run these scripts if you want to try
Here's my advice...
Here's some things I noticed:
Here's the .Net code for #code and #code which always return constants:
Here's the diff of the runtime interfaces algorithm between #url and #url It should only have renamed variables and inlined helpers.
Here's the disasm for SSE4.1
Here's the example @github mentioned in #64795:
Here's the result of my benchmark:
Here's without this change:
Hey @github I am looking at the failing tests and I cannot figure out if that is related to the changes I made or not.
Hey @github I am working on syncing the code but more than a year's worth of changes do take a lot of time to get right.
Hey @github I thought your idea was really interesting on its own.
Hey @github thanks for your very first contribution!
Hey there @github and @github I regret to say that I can no longer contribute to this PR as from the past months as I have responsibilities which I must address first.
Hi - as I understand it this fix hasn't made it into the release due to a merge issue.
Hi @github
Hi @github and @github
Hi @github I have updated correct Issue ID.
Hi @github it is not up to me.
Hi @github that's a good question.
Hi @github this pr actually fixes the issue in your PR.
Hi @github what do you think about this?
hi @github What would you like to do with this PR?
Hi @github-I-T probably next week :)
Hi @github.
Hi Egor
hi is there any Workaround to this Issue !?
Hi there!
Hi there.
Hi!
Hi.
hide all the exported symbols used as #code by the managed BCL
Highlighted allocations from below should be removed
Hm.
Hmm I’m not sure.
Hmm interesting...
Hmmm I do wonder why this worked in Xamarin.Forms though and not here.
Hmmm if the changes of #code or #code propagate to child controls then that should be the case with #code Of course it is my opinion and I'm happy to find out why it might not be a good idea.
Hmmm that's a good question
Hmmm...
Hoist #code to the invoking command handler on one code path and avoid it completely in others.
Hold for April
Hooked DateSelected Event to the DateProperty's CoerceValueDelegate
Hope I didn't mess the files/TFM since #code is declared with #code:
Hope it gets bumped for review!
Hope this helps others.
Hope this helps!
Hope to get a look in a few days.
Hopefully I rebased correctly
Hopefully it is good now
Hopefully this fixes it.
Hopefully we can figure something out for this soon.
Hopefully.
Hoping you have a chance to take a look at this.
Host:
hover over a type already has a default behavior.
How about #code and #code?
How are they incorrect exactly?
How are you building and running tests?
How close is this to #url
How confident are we that this won't piss people off?
How did we miss it?
How did you determine that they are skipping?
How did you test the changes?
How do all the other platforms handle this?
How do I know if this change didn't break something?
How do I pull the correct PR in VSCode for Mac?
How do the pointer gestures work with this?
How do users cancel the override?
How does it change the automation tree?
How does that sound?
How does this fix the issue?
How does this pair with the work that @github did?
How it looks:
How long will this take to wait?
How much faster?
How should this be fixed?
How this can be solved?
How was the issue missed previously?
How would we / an app author know that it was a mistake?
how you should be using it?
How:
How's the progress?
However I have settled to this: any exceptions would be grouped to 5 exceptions per page (to avoid overflowing the quickinfo to keep it sane).
However I think the main intention was to optimize for the internal library use where the formats are pre-defined.
However one could argue that this is already happening as #code uses Array instead of List for exactly this trade-off.
However that would require changes to render the arrows right where the Exception group is though.
However the code we have now serves an important purpose.
However the method does not account the number of the type definition itself when calculating the latest number and this can lead into a situation when the generic instance is put into the older LoaderAllocator.
However there are certain operations where the client does not (or cannot) request and wait for a response.
However there is no 'looking ahead' if the ';' should be interpreted as a comma or terminator as desired in #22790
However this breaks how double quotes are escaped in the compiler args.
However unintuitive that is...
HOWEVER using a space AND a german special character creates error shown above.
However we could also specify a simple #code to only allow numeric characters on input.
hrm...
HTML attributes have been disregarded when updating the text size.
Huge gaps on either end of the nav bar if we try to do any other color.
Hum I was going to swear I did this already somewhere
I *think* this should also fix the issue reported by @github and @github in #url though I don't know how to reproduce it with #code (instead of #code).
I actually don't buy @github's reasoning here.
I actually prefer to edit in another place
I add support Vector512 in BinaryPrimitives.ReverseEndianness.
I added a benchmark to #code in my local dotnet/performance as defined below.
I added a fontfamily and textcolor to your test but let me know if that is not wanted!
I added a new feature: #code constant literals in interpolated strings are now removed or just replaced with empty strings.
I added a simple comparison to the #url.
I added an API proposal here: #61326
I added an event handler method that subscribes to the #code event of the #code's #code.
I added runtime warning but I'm not sure how many developers will actually see this or just miss it completely.
I added the checks for SQLite version >= 3.8.11 and SqlServer CompatibilityVersion >= 160
I added these two commits from @github 's prior work:
I added Utf8 APIs to Microsoft.Bcl.Memory library.
I agree fixing that should be part of the PR.
I agree that (2) would be most reasonable.
I agree that bumping the MSBuild dependency around the Roslyn Workspaces package should generally be low-impact.
I agree that it's only worth doing if the debugging experience for us wouldn't suffer and there would be clean cut between what's in managed and what's in native code.
I agree that these would be helpful for a performat node type check (compared to is) but wouldn't that fall out of DU work?
I agree that's the core question.
I agree with @github
I agree with @github .
I agree with Bruce in that we shouldn't pollute the #code output with this.
I agree with Cyrus here.
I agree with that.
I agree with this.
I agree with you that it would certainly add complexity and probably involve some other tradeoffs.
I agree with you.
I almost never think of local-functions like local variables (i.e.
I already had this PR open to address this kind of issue involving #codes.
I already told you the reason we added it.
I also added a #code method to both so that I could test repeated reads without also measuring the allocations for creating the reader:
I also added an API proposal here: #61326.
I also added another test with nested #code statements as a control to demonstrate that the code is correct without the switch expression.
I also added some #code that seemed like they would be needed and were missing.
I also can't use this code directly in our app because too many pieces are internal for me to drop this in as a replacement renderer.
I also don't see how breaking this out makes perf any better.
I also envision some possible compat switch so user can opt-in or opt-out as needed.
I also expect it not to return a validation error message when the form contains non-numeric keys.
I also fixed a typo and did some minor clean-up.
I also found this issue #url when running the tests.
I also have *0* issue with people having that view or adopting that convention in their code.
I also have a bunch of notes where I rewrote the AMD64 and ARM64 write barrier assembly in pseudo code.
I also have some cleanup stuff that I'll include.
I also made some updates to make it easier to run our template tests locally.
I also need to build up a better automated analysis for categorizing the things that block and unblock allocation (at least for the first blocker) and make sure we're not missing anything simple in our analysis.
I also noticed another PR (#9463) that might help resolve the memory leak issue.
I also opened #url regarding another part of type mapping (value conversion).
i also recommend potentially running your scenario under perfview.
I also removed #code since it wasn't used anymore.
I also removed Mono AOT-llvm jobs from #code as they are now included via #code.
I also removed some dead code from my previous Managed DWrite PR.
I also removed the constructor that allowed passing a list without a range to discourage the use of PartialList when we don't need the range feature and I removed an unused static method in PartialList.
I also set the ThicknessTypeConverter to use nullable types
I also started to face issues on iOS 17.4
I also think the filter span isn't always non-null
I also verified the #code always returns #code when running on macOS.
I also want to think of what the end-user experience is here.
I also would really like @github to sign off on change here as I mentioned in #8532 but I am so excited to see this in use 😄
I always can try ask @github or @github review this as additional safeguard.
I always land on: what makes sense for the largest group of consumers.
I am adding NO-MERGE to make sure it's not merged before Preview 1 snap (VMR could suffer as most of our repos have dependency to S.CL)
I am assuming the markup compiler is covered by tests (functional rather than textual).
I am away until next week but I will revive the PR when I get back home.
I am beggining to think there's something wrong with my setup or some additional software I don't have but I couldn't find anything on the docs.
I am currently testing all the changes with multiple servers; all the tests pass with WebListener on Windows 11 and they pass on GitHub.
I am glad to know that It is due to the bootstrap tests.
I am going to run the benchmarks for main vs your PR (dynamic PGO just got enabled by default few days ago) and review the PR if the numbers look good.
I am hesitant to merge this after looking into the perf impact some more.
I am hoping it is okay.
I am in contact with the microbuild team and will update the progress on this issue as I hear from them.
I am in process of extracting this API to separate library/nuget.
I am just saying that's not a common scenario.
I am more than happy to help you with this.
I am not a part of the winforms team so I am not 100% sure how that all works.
I am not sure about this one.
I am not sure how to interpret this.
I am not sure how to reject PR.
I am not sure I am following the question.
I am not sure I understand the question.
I am not sure that floating point granularity is required here.
I am not surprised it fails.
I am only resubmitting it so I can include an analyzer to help maintain this in the future.
I am preparing a PR to remove that part
I am primarily referring to the following APIs on #code:
I am primarily referring to the way we calculate value returned by #code API.
I am slightly worried about
I am thinking that maybe we first evaluate whether we should be upscaling (buth this app and resizetizer as a whole).
I am this user :D
I am trying to test the perf impact of my change around renamer.
I am unsure if this is still the case.
I am unsure whether the expression/comparison behavior is intentional (it is not mentioned as a #url of value conversion); I'll prepare an issue to showcase the behavior I am seeing and understand if I am simply misreading the docs or if the query conversion has some problems in this corner case.
I am very happy that WPF is finally open source.
I am wondering if concerns about exposing ValueStringBuilder are not applicable here too.
I am wondering why is the class a #code and whether the special case for #code is worth the performance gain.
I am working on #url (forgive the misleading title) that enabled the computation of #code value at all times independent of #code.
I am working on adding tests but I am more focused in making sure I don't break anything.
I analyzed in comparison with the case if using property pattern.
I applied the same fix (see #url for switch here.
I assume that is fully intentional.
I assume the regression with DynamicMethods comes from #code now adding stuff to the CWT which causes more GC pressure to be added by the DependentHandles created for that.
I assume this PR is about bringing the capability to pass multiple buffers to a read/write with a non-seekable handle?
I assume using Delegates as dictionary keys would be the most popular usage for equality.
I assume you mean configurable?
I believe @github has a different implementation of this that will likely supersede this change.
I believe #code is sufficient.
I believe failures are related to #url
I believe I have exhausted the list of relevant #code messages I see in the docs.
I believe I processed all your feedback
I believe it is ready for another review.
I believe it's much more important to distinguish the scope of the function/method (local vs.
I believe it's not my fault.~~
I believe Manish's work is measuring the perf of the analyzer (which I think is the time to generate diagnostic data)
I believe that an openly accessible control should not be sealed.
I believe that formatting suppressions in collection initializers were fundamentally problematic.
I believe that including Item in automation is a necessary action.
I believe the current breaks are due to #url is getting imported before Directory.Build.targets runs as it is explicitly imported by the csproj.
I believe the reason our current symbols validation tests provided by Arcade miss this is because they validate on the build machine instead of after we've built the product.
I believe there are none as the static collection is used internally as a storage and access is done via defined #code overloads.
I believe they have been fixed in RyuJIT now but I'm not sure about mono.
I believe this can be fixed in code by changing the point of view...
I believe this fixed the issue.
I believe this happens because of how changes to the #code are handled in #code.
I believe this means wen can just remove the (now duplicate) MacOS-specific tests.
I believe this would help.
I believe those changes should be done in small batches.
I believe you both expressed interest in improving WASM diagnostics/profiling
I benchmarked a new WPF from the Visual Studio template where I added an empty class like #code and I added this control 20 times in the XAML of the main window.
I bring over the correct translations here.~~
I can as well look into the other requests for json functions if possible.
I can break this up into separate pull requests if desired.
I can certainly update this PR to solution 1 or 2 however it starts to add a lot of interdependency between components when it would be a lot cleaner design-wise to have them separated.
I can confirm however that all test cases of my source generator passed with this change.
I can do basic operations and pass most of the test locally:
I can get to this review on Monday.
I can just leave collection/object initializer codefixes as they was.
I can look tomorrow if this is ready.
I can put a fully runnable version somewhere
I can respond to reviews now but not able to do massive editing or benchmarking.
I can see #url But I have no idea why it does not create these PRs itself.
I can see why regulators might have something to say about Chrome blocking third-party cookies given Google could track you anyway unlike their advertising competitors.
I can see:
I can take a look tomorrow.
I can try.
I can wait more reviewers.
I can work with local similar types when needed
I can't dig into this deeply today but I think @github is looking at the right things.
I can't figure out how to set up the projection buffers :(.
I can't find a build of this PR.
I can't find this discussed anywhere else really so I'll just rabble here 😁
I can't get around this error when launching the test in mono windows/linux :
I can't get to this till at least a couple of weeks out since I have a bunch of other urgent things to do (and had no idea that this was coming till I saw the PR).
i can't overwrite them like i could a local).
I cannot fix it on Windows :/
i care deeply.
I changed MemberReflector.UnknownReflector to be thread safe by initializing the property from the static constructor instead of doing the lazy initialization manually.
I changed the name of #code in PresentationCore to #code because it conflicted with the one in DirectWriteForwarder.
I chatted with @github  and mentioned it should be safe to add a drawing dependency and hide it in a similar way.
I chatted with @github about this.
I checked and these two version #code and #code both expose the same assembly version (15.1.0.0).
I chose not to adopt RandomNumberGenerator's much more complex GetHexString implementation and instead went with a simple wrapper for GetString.
I chose to change the second event because it looks like it should have been 51 by the order of other events around it.
I cleaned up the code a little (the same equality conversion logic is now shared between #code and #code.
I commented on each to refresh the discussion.
I commented out things here but have them updated to what they could be...
I converted to draft while we wait for Preview 2 to be publicly released.
I could add tests with basically variations of the documentation texts I used for my own zlib library I made in C# entirely as a means of testing them.
I could borrow the recursive traversals in the earlier morph phase to build a work-list for where checks need to be added.
I could create the breaking change documentation but am not sure which version I would have to select.
I could implement that.
I could keep trying to get rid of calls which require time zones but still the #code will remain which I don't see solution for without creating some ugly behaviour.
I could observe about several milliseconds improvement with a simple app with a few controls with ScrollViewer (ListBox) etc.
I could run it on my hardware for .NET 8 main vs PR and get the trace files/disassembly if needed.
I couldn't figure out the best area label to add to this PR.
I couldn't find any unit or integration tests for the Boot classes and felt hesitant to create new ones.
I couldn't find any way to correct it on Windows
I created a similar setup in Android Studio that mimics the behavior of .NET MAUI.
I decided to use the same signature as the #code as that is more similar to the #code but i am unsure if this is desired.
I delved a little more in type mappings and I am still missing some pieces of the puzzle 😅
I detected changes in the main branch which have not been merged yet to release/dev18.0.
I detected changes in the release/8.0 branch which have not been merged yet to release/9.0.
I detected changes in the release/9.0 branch which have not been merged yet to main.
I did a #code and verified that the binaries are contained in the package 👍
I did experiment with changing that to be #code.
I did not remove these items:
I did that as part of the patch fix and it indeed caught the error #url
I did the following experiment
I did though ask myself where the #code was actually coming in from.
I did try doing that manually and it worked on my machines.
I did try to add a UI test but I'm unable to finish it because I'm not sure how to make the first button to be focused on Windows.
I didn't copy them to #code because I don't feel such duplication makes sense.
I didn't find anything that would make this a breaking change.
I didn't implement anything that changes the behavior when additional toolbar items are added.
I didn't know this needed my attention till now.
I didn't log anything.
I didn't mean to check in any changes in this method at all so I'll just revert back to the original code with the original spacing.
I didn't mean to suggest that #code should be used for everything.
I didn't realize that - I find it very often I need to talk to the owners but seeing that owner of #code is #code seems a bit annoying - perhaps as alternative we could mention owners directly (but that will be a tiny bit more work than just regex and harder to keep up to date).
I didn't really understand what was happening with the accessibility testing software.
I diffed the generated file in #code vs this PR and confirmed there are exactly 2 differences:
I discovered a minor issue thanks to these assertions - see the review comment.
I do find it interesting though that the VS Code behavior is what it is.
I do not believe this is problematic for Mono since #url
I do not have a strong opinion.
I do not know how to fix.
I do not know if it is to early to continue on this one now?
I do not see a problem with this performance wise.
I do not see a straightforward way to port the fixes we applied back to the original code.
I do not see any urgency in stopping reporting the warnings.
I do not see how it would work.
I do not think it is strictly required to put the delegates to FOH.
I do not think there is a fast portable implementation possible.
I do not think this transformation qualifies.
I do see test failures on osx/arm64.
I do still intend to drive this in and will do my best to ensure this is included as part of the scheduled work for .NET 10.
I do think it's a good perf change for 32-bit to limit this.
I do think there's a *sizable* number of methods that exist just to help one other method out.
I don't agree with that.
I don't believe there's enough signal to make such a change yet.
I don't do this part because I enjoy it; I do it in smaller files so I can orient in the code.
I don't have a breakdown yet of what blocks the other 4K.
I don't have a multi-user environment I can easily utilize for testing.
I don't have an answer here on what we should be doing.
I don't know how to run the Compatibility project so that I know where the errors are.
I don't know if the comment is outdated/wrong?
I don't know the frameworks in detail.
I don't know why it would suddenly fail 🤷
I don't like the original direction of just limiting the number of exceptions displayed.
i don't love this...
I don't plan on implementing with SVE in this PR.
i don't really know the rename eventing model
I don't recall the details of the error message.
I don't remember the behavior of this.
I don't remember what test case wasn't working :(
I don't see anything I've changed to attribute this to.
I don't see bugs filed here.
I don't see the cost:benefit:risk playing out here.
I don't see the need for a language proposal here.
I don't see what change this makes.
I don't suggest new contributor to start with language feature.
I don't think an of our packages use #code -- I can see why you can't use a framework folder there since it's part of the outer build.
I don't think anyone has said the feature should be postponed.
I don't think I need this for the initial deabstraction work but have been thinking already about some generalizations where it could be useful.
i don't think it's a lie to get a #code back instead of #code.
I don't think it's necessary to use #code or #code.
I don't think that's a lie.
I don't think the #code flavors test anything interesting from codegen perspective.
I don't think there is an API for that.
I don't think there's any issue with the runtime relying on specific behaviour.
I don't think these sizes have to be power of 2 (I was just thinking about this a bit more since it seemed unfortunate; and it had been quite some time since I thought about seg size stuff).
I don't think this fixes the issue reported in #8679.
I don't think this should be done.
I don't think this should be merged until/unless it can be verified that these don't break anything.
I don't think we can give any good result for this case.
I don't think we should get rid of it *until* we have implemented other rules (like what I mentioned above) to handle those sorts of cases
I don't think you can reasonably drop old Redis server support here - I'd support both for a very long time.
I don't this this is the right fix.
I don't understand why making the code work correctly would be an issue here.
I don't want to add #code until we've had time to evaluate the implications of implicitly doing the public steps with the collection that replicate what those setters should be doing.
I don't want to remove it before we can remove the copy in SOS.
I don’t believe this change is worth the potential benefit.
I dont think changing the code like this in the WPF repo is a good idea in that kind of regard.
I doubt that we would be willing to pay for initialization of these buffers throughout the BCL.
I expect it to be very simple since it's a regular RISC instruction.
I expect more complex apps with more non-known type in XAML to have even bigger performance gain.
I expect that this will break tracing tests.
I expect to find additional cases relating to disposing of OOP workspaces created for testing.
I explicitly set the contentOffset in the TryOffsetRefresh method of MauiRefreshView to ensure the view scrolls back to the header position after a refresh operation is completed.
I feel like any other simplifications could wait for later while this would unlock implementing #85014.
I feel like only the last one will be notified of updates because you are switching parents.
I feel like we should be able to share a ton more logic and only encode the small difference where necessary.
I feel like we used to have a feature for squiggles (I think?) so that way if you deleted a bunch of code we wanted to toss the cached tags until we recomputed.
I feel pretty confident breaking this.
I feel strongly that's the main and the most important difference between methods and local functions.
I feel we should let it be as is for now.
I figured that creating a PR is the easiest way to demonstrate what I mean.
I finally found #code in the Test Explorer in Visual Studio.
I find there's two benefits:
I finished my work.
I first want to merge tests in #url as we do not really have any skia graphics tests
I fix it by create application before show SplashScreen
I fix it by dispatch to UI Thread.
I fixed the conflicts and force-pushed the branch.
I followed the #url proposed by @github and implemented the suggested changes.
I followed the testing guide here: docs/workflow/testing/libraries/testing.md
I found (and still find) the design of the logging system surprisingly complicated.
I found a couple more cases but I thought they were not very apparent so I didn't try to cover them.
I found the main branch have fixed from this pr #url
I got inspiration from #url in the Razor.Design testassets.
i got some changes coming.
I got the latest for main and verified it.
I guess doing the inode check with #code shows it replaces with an entirely new file?
I guess I could repurpose the truncating one to one that only does formatting.
I guess I see it this way.
I guess I should investigate why it did not come up earlier in testing 🤔
I guess it is still early to try it out in the previews then?
I guess it's sort of expected that it's slower throughput wise in microbenchmarks.
I guess looking at the original bug (#url I'm not sure why we're treating ThreadAbortException as something that's fatal in the first place.
I guess someone from @github/roslyn-compiler might have a different opinion?
I guess this change will cause a massive memory leak.
I guess we could run it by the public API review group?
I had a bad merge there...
I had assumed we wanted to keep them in sync with the red visitors.
I had difficulties to immediately recognise the possible values for 'Action'.
I had forgotten how filtering/grouping works.
I had forgotten to update the VMSize field of the __LINKEDIT segment when creating the signature.
I had not yet seen #105207 when I opened this.
I had problems running the wpf project locally and wasn't able to test as I would have liked to.
I had thought it would only cache when it is first run.
I had to disable the newly added test for wasm hybrid globalization due to an incorrect output #url (fyi: @github) Rerunning the CI to confirm there is nothing else related.
I have a #code that represents a custom alert.
I have a button that when clicked switches between a #code and a #code state:
I have a cell scaling issue
I have a client that is trying to use the HTML label to display more formatting and this is the last hang up for the application to go to production
I have a pipeline I might be able to run this branch  on dnceng-public
I have a seperate branch with the code I used to debug and test this issue.
I have added a simple unit test case to System.Runtime tests exercising the new counter.
I have added translation for both SQL Server & SQLite and have also added tests for both.
I have added UI test case for TabBarBackgroundColor.
I have all the snapshots now :)
I have already verified that this is working as expected.
I have also addressed these additional cases.
I have also introduced a #code variant that can be used in any code that doesn't compile for #code.
I have also moved certain code blocks to other methods for readability.
I have also removed pointless allocations for indentation I noticed in #code.
I have also went ahead and optimized the methods and added documentation.
I have an app of my own that I use and I also have a sample app in the Maui.DataGrid project that I helped overhaul.
I have asked very explicit questions that have not been answered.
I have attached a video demo below for reference.
I have attached a video for your reference.
I have attached existing and current images.
I have been thinking about this for the last couple of days.
I have been trying to get this fixed since #url.
I have been waiting for this fix since 3 years when I originally reported that issue
I have been waiting for two years.
I have changed the behavior of DoubleUtil.AreClose.
I have changed the fallback implementation now (and updated the description accordingly).
I have determined the root cause of the failure in the PR.
I have divided the changes into two separate PRs: #url and #url.
I have done a test with CrossGen2 (R2R) and this wasn't being jitted.
I have done my best to glean from the work that has already been done and have been experimenting with the dark mode themes that I see in .msstyles.
I have done the most of the implementation part.
I have dropped this for long.
I have expanded the existing test code and incorporated the contributions from @github in #8679.
I have fixed the merge conflicts and rebased.
I have fixed the TabIcon color issue for the default TabBar placement in the SetIconColorFilter method.
I have implemented 2 solutions for this.
I have included the macOS output screenshot.
I have included the test sample and test case.
I have new question WRT #url
I have no idea about where must be fixed as of now.
I have no idea.
I have no preference.
I have not been able to reproduce the crash on emulators or device (Pixel 8 Android 15) so I have applied changes based on reviewing the log attached to the issue.
I have not tested lindexi's fix here but the original issue is bigger than fixing just **one** event.
I have now enabled the test case for the Android platform.
I have now verified running our MAUI 9.0 iOS app on macOS:
I have permission from my employer to make Submissions and enter into this Agreement on behalf of my employer.
I have rebased it onto the net10 branch.
I have rebased the branch and resolved the conflicts
I have reduced the ContextLayoutManager.From calls.
I have resolved the comments that you added earlier.
I have resolved the issue by setting the UIImageRenderingMode to Automatic when the FontImageSource is null.
I have reviewed the Issue20736 it now working fine in macOS but for Android it fails randomly.
I have run the DRTs successfully.
I have seen large part of the regressions coming from indirect effects of large CWT.
I have some concerns about using the filepath of the assembly because we are calling it using #code.
I have some questions on it that need to be addressed first.
I have spoken with both the .NET Team and the WPF Team and both teams are ready to accept this change.
I have spot checked a few places and it seems to be fine.
I have started scouting around for potential impact but it will take a while to get a useful set of data.
I have tested changes locally and everything works as expected.
I have the #url ready to merge whenever this reaches a preview release.
I have tried this workaround on a sample application and the tree view order is same as previous version.
I have updated the current Mac snapshots to reflect the latest changes.
I have updated the existing tests to reflect these outcomes.
I have updated the PR for v22.0.
I haven't added tests yet.
I haven't been able to reproduce the original issue.
I haven't looked at this particular case.
I haven't noticed it.
I haven't really measured/profiled 😕
I haven't recorded a speedscope since I'm having some issues with VSCode.
I haven't validated it against any other test cases yet.
I haven't.
I highly double the WPF team even has the time to review these
I hope I have covered all scenarios where it need to be adjusted.
I hope this information helps.
I hope this will give you a hint on how to fix it.
I hope to come up with a proposal that API review will be happy with...
I hope you have discussed all this with Microsoft ahead of time because it looks very strange from my viewpoint.
I implemented the ios:Slider.UpdateOnTap property in the same way it has been implemented in Xamarin Forms
I improved performance and allocations by using the new GetAlternateLookup introduced in .Net 9.0.
I just found out that this also happens with the selected ITEM.
I just haven't had the time I had when I started it.
I just hit this again in #url
I just noticed that #code is obsolete with the message:
I just noticed that it can be replaced with the new properties.
I just opened the PR :)
I just re-targeted it.
I just run into the crash all the time.
I just wanted to reach out to you and ensure I'm not missing something.
I just wonder what the precedence rules are for these two style groups.
I knew that but the CI insists that I hadn't fixed the places where I fixed in e2b3f4056648e459be3403216f737c009b44bd8f.
I know that on Discord you mentioned:
I know there is a lot of work to be done everywhere.
I leave it to him on which if that we should take.
I left a comment with another significant improvement in the original issue #url
I like it!
I like the idea!
I like this.
I looked into #code method for #code and spotted #code usage and multiple #code usages.
I looked into updating the analyzer and concluded that the effort required to implement all the special rules for these attributes is likely not worth it considering we can just update the attribute definitions to match their true behavior.
I love when we are able to make changes to the BCL/JIT/Runtime that means that the simplest code matches (or overtakes) what complex code is striving to do.
I made a pragmatic change that should fix the test.
I mainly ask because I'd like to see some forward progress on #url
I managed to #url and compared the results against main.
I mapped FlowDirection of shell to PlatformView on Android.
I mean is the new behavior correct according to you?
I might figure out something similar for CV2 if this is the way we want to go.
I might have misunderstood the nature of the test failure that you are facing in CI.
I might need some help for Cosmos 😇
I miss this feature every day :) I hope the PR Will get merged one day.
I missed a few places with
I missed that you already handled ENOSYS.
I missed this type of collection in MAUI.
I moved a unit test out of the Windows-specific file to minimize the amount of churn this will cause.
I must have gotten messed up in my head to think this was a solved problem.
I need some guidance on how to unit test and verify the theme being used by the tooltip when the system is in dark mode.
I need this fix to release my software.
I need to go to sleep but will give more detail later.
I need to see if it can just be removed.
I need to take a look at the #code theme and how it's currently used to style #code and #code in Dark mode.
I need to update the handling of code fixes related to compiler warnings/errors to ensure Fix All operations aren't touching generated code.
I needed to override the ViewWillTransitionToSize
I never saw value in trying to unit test an options control like this.
I notice that the tests do account for this scenario.
I noticed that for more than 255 the program segfaults on both X64 and Arm64.
I noticed that our item templates did not adopt the namespace used by the project that they are added to.
I noticed that the #code file does not have links to the @github teams and it's a bit inconvenient to check who actually owns it.
I noticed that the policy service failed to handle this correctly in #72406.
I noticed that there is a new comment #url.
I noticed that tweaking the computation of the entry weight for OSR methods (in service of #111915) incurred large inlining diffs.
I noticed this error when executing the test script.
I noticed this while working with @github investigate some other perf issues.
I only changed the thrown exception from #code on main to #code with my changes.
I only see #code called for descriptor file references and from #code.
I only see several custom enumerators.
I only snapped them to a close match in the Fluent + Win11 palette.
I opened dotnet/wpf#9994 to continue this discussion without poluting this PR.
I overlooked this PR.
I overridden the TextRectForBounds method to add padding to the text area.
I personally agree that refactoring vs fix isn't the relevant axis.
I personally don't mind this.
I personally find that very unintuitive.
I personally like the move down a line behavior now that I've tried as well.
I personally think doing truncation there would be better as it would spend the time doing that on the IDE side wisely as well.
I plan on verifying out-of-process scenarios as soon as we get a build.
I plan to follow up with the SDK team about this.
I plan to work on it today after doing a code review.
I posted a comment in the issue (#url Let's use the issue to discuss what should be done about this.
I posted some comments about the approach to take for this change in RDG based on the existing implementation.
I prefer to add UILabel processing here
I prefer to invest into making the EventPipe single-threaded and use it's format.
I probably won't have time for a bit to investigate it unfortunately
I proceeded to test the PR and the issue seems to have been solved:
I pulled main to fix the conflicts.
I pushed #url that sets fgm for regions.
I pushed a commit that avoids using #code when that would trigger #34001.
I pushed a commit to add back the 'class' keyword.
I pushed a commit to change it to make the lazy init explicit and more clear.
I pushed a new commit for that.
I pushed a new version of the branch to solve the merge conflicts.
I pushed an update that uses the reader writer lock.
I pushed out a new version that uses Jan's suggestion from #url
I ran #code in #code but nothing changed.~~
I ran all ImageButton tests I could find and they are all green.
I ran FamilyCollection.GetFontFromFamily with different combinations to make sure that the result was the same.
I re-written the history and cleaned up this PR to not add as many commits to the history and utilize already-merged work from various PRs (including the perf improvements added to DNMD from experimenting with CoreCLR).
I realize that full DateOnly and TimeOnly support is not implemented yet.
I realize that's not currently ideal but that would at least let us merge this PR and fix the crasher on iOS
I rebased on main now that dotnet/wpf#6171 is merged.
I rebased on main to fix the conflicts.
I rebased this PR to resolve conflicts and to start getting to the issues that have been reported:
I rebased to fix the conflicts.
I recall being annoyed that CSE mixes the two somewhat willy-nilly (2d in #url
I recall there being some behavior switch but we might have tossed it to simplify.
I recently came across this bug and was thinking about this solution.
I refactored the method to more clearly reflect its purpose.
I release the COM object before clear #code
I remember #code being extremely volatile but still worth trying out with.
I removed the code previously added for the Green Visitor/Rewriter so now it should only be the red side of things for C#.
I reorganized the changes related to this so it can go after #105403
I reported the issue 3 years ago and created this fix 2 years ago.
I resolved your review comments now.
I retrieved the default style for the command bar from the application's resources and applied it to the command bar.
I revisited the #code and #code based on customer feedback and I've realized the only trim-incompatible part of the code is creating default value for value types.
I searched for all usages and fixed all in non-test code.
I see .NET has a copy of libunwind and llvm-libunwind.
I see ~10% improvement over many benchmarks runs
I see a lot of code here that we are writing and maintaining.
I see a mix a references that look an awful lot like normal references from regular applications: #url
I see that you already set the milestone to v10 but hoping that some contribution may help to add this to .NET 9 I prepared a possible solution.
I see that's not good.
I see the merging process has started - thanks for that!
I see there are changes in RequestDelegateGenerator.cs in other PR.
I see these cases very differently.
I see things like calling constructor multiple times as a potentially valid unverifiable code.
I see this as implementation detail of how the runtime uses the public/documented OS API #code (and we were using it in a way that is documented as incorrect).
I see this on my PR dashboard.
I see warnings like the following:
I see.
I seem to have a similar issue on android too
I should be getting to this soon.
I should be less busy after the RC2 branch snap next week and I hope to be able to review it then.
I should have a new asp.net collection soonish.
I slightly reduced the content of struct Interop.procfs.ProcessInfo
I solved it by referencing the binding source:
I stand by my comments that I would not approach these PRs anything like what you are doing for the reasons stated.
I started working on this again after #url was merged :)
I still don't think we should do this.
I still need to add bitonic search and packing support for Neon.
I still need to write a benchmark with redirection and #code to ensure this scenarios receives the expected performance increase.
I still prefer (1).
I still wonder though how will one implement styling for a button like this:
I strongly agree with @github 's viewpoint.
I suggest continued discussion move over to there.
I suggest decreasing the text size until it fits within the available width allowed by Android when someone decides to use custom text as a back icon.
I suggest to use #code with #code.
I suggest we have @github and team take over this work as they are better resourced.
I suggest we revisit this bug in NET10
I suspect if combined with #35000 that should be fine after that
I suspect that the coordinates might be incorrect or that the tap action is not functioning as expected on Windows.
I suspect the problem would be best fixed at the root (ie.
I suspect there is a hidden quirk hiding somewhere.
I suspect there may be some.
I tagged you as you seem to be the expert in this area and I'm a bit lost on how to proceed.
I tested the branch and the loader is no longer hidden behind the header.
I tested this patched PresentationFramework.dll against the repro mentioned in #8642 and confirmed Windows Narrator reads the expected values.
I tested with the following layout.
I think _at this point_ my current thought on this PR is:
I think @github 's concerns are valid and important.
I think a separate PR would be better for it
I think a unit test with IEnumerable<string> (other PR) should not be added.
I think all the failures are fixed up now.
I think allowing #code as an input type opens up the likelihood of accidentally doing that significantly greater.
I think alternatively we can only allow inlining recursive methods that are marked as force inlining.
I think both views are ok.
I think creating a flavor of tests that target VBCore and mark APIs from VBCore as missing is not required.
I think finding a way to modify #code to properly ensure that the Android lifecycle events are serviced (which should take care of waiting for in-memory changes to be committed) would be preferable to changing the way the preferences are saved.
I think having users access build properties in a separate bag is just complication with no benefit
I think he was simply stating that other things he noticed while looking into this are not actually related to this topic and are out of scope from this actually identified potential issue with constants.
I think his modifications can maintain compatibility with the old behaviors while also supporting elements within the Group.
I think i can isolate it to the following:
I think I can move this to the shared code so it would continue to work when OOP is turned off.
I think I need @github and @github 's review as I don't catch all the details of the original PR.
I think I see how the lock can be avoided without violating correctness or backwards compatibility.
I think I should create another PR whose commits are built on the top of this one because the content of this PR is stable.
I think I understand the overall structure of the #code directory.
I think I understand what the change tries to do.
I think I've handled pending review feeback.
I think in that case you'd want to make sure your targets raised the appropriate Diagnostics when used in an unsupported project type.
I think it is ok for what is effectively an infra fix for the debug build
I think it makes sense to look into fixing layout post LSRA first.
I think it rare for Delegate.Method to be called repeatedly.
I think it should be ok to scope the check here to #code uses of #code #code.
I think it was a very good idea to start with the scaffolding first.
I think it would be good if the API shows that it will work with non-seekable handles.
I think it would be good to better document stuff around valid unverifiable code.
I think it would make sense to add new methods that don't take an offset argument.
I think it's your area.
I think json expression should be tested before translation to allows only
I think making #code public would be a better fix.
I think moving some of the stuff from the oneNote to github would be a good thing.
I think now that the ability to associate logs with the activity exists and is on by default.
I think sealed modifier is needed for non-abstract and non-virtual instance methods/properties/events declared in interfaces when #code is false.
I think so too.
I think so.
I think some tests are getting through that should not.
I think that @github was against the approach of this PR.
I think that if you ran a fuzz tester over Roslyn you'd find a bunch of NREs we don't care about.
I think that one can make it somehow work with triggers (#url).
I think that should be okay!
I think that would be preferred instead of trying to undo what we do here specially for an array type and guess where else we might need to do this.
I think that's the model of what these mean.
I think that's workable.
I think the #code case is a special once since it is meant to work with both seekable and non-seekable handles.
I think the 3 cases in this PR are probably where the bar should be drawn.
I think the change is more or less good to go and I will merge it whenever I can.
I think the delay is smaller.
I think the disadvantage of accidentally taking a dependency on local variable is a big one.
I think the earliest we'll be able to book this for review is this summer.
I think the idea here is the exception handler received an unhandled error.
I think the main thing to decide is if this is building a general-purpose mechanism or a specialized one just for DataProtection logs?
I think the most recent change should remove them entirely.
I think the original method should be used when the photo picker isn't available on a device
I think the PR can be closed.
I think the PR is ready for review now.
I think the refactoring should move the property declaration to where the field declaration used to be if it's removing it.
I think the remaining problems that #code helps address are on Windows.
I think the right way forward is to now take your preliminary work through a real IDE design meeting where a full set of steps and responsibilities can be formed.
I think there are a couple remaining places that still need some fixups for correctness reasons around the internal #code methods that need to be addressed before merging.
I think there is a mistake in your benchmark.
I think there's more work to discuss that API and sort out what the changes would be.
I think these tests should now pass on FreeBSD and OSX.
I think this can also happen if one of the node commands fails and leaves the backup files
I think this could be close to caller info attributes in terms of how it looks like and work?
I think this could have been fixed by #url
I think this is a bad idea unless #url #url and #url are fixed.
I think this is a much cleaner solution.
I think this is ready for review.
I think this is the minimally impactful solution we can use to unblock this for now.
I think this means we'll be forced to at least add a direct System.Drawing.Common dependency to some of our templates.
I think this PR and description actually points out the issue here: #url but the TL;DR is that the focus states are supposed to be in a separate group so that a button can both be focused AND be pointer over.
I think this will cause the OnStartup event to be called before the splashcreen which I don't think is desired.
i think this woudl be required as part of this.
I think VS has some weird behavior with source generators being referenced via project reference.
I think we can take this change since it provides good user experience end to end.
I think we carefully need to think about this.
I think we could separate this into two prs.
I think we may also need to limit the total number of recursive inlines as well as their depth.
I think we may want to wait a little while longer?
i think we need more examples.
I think we need to address it first.
I think we need to do some refactoring of the option pages to make them unit testable but it seems it should not be too difficult to do that.
I think we need to wait until @github is back from vacation on this one before proceeding.
I think we should also update #url to register the callbacks using #code.
I think we should close this out :)
I think we should open an API proposal for that.
I think we should rebase
I think we should:
I think we're less likely to significantly impact muscle memory for a lot of people.
I think what we should do is avoid the conversion if there is only one of these changes (or all teh child changes are of this sort).
I think without my commit it looks very wrong.
I think you need to check for IMarkupExtension everywhere.
I think you should be able to see what I'm trying to do.
I think you're right.
I thought razor bypassed all this stuff anyways.
I thought the plan there was to do what's called out in #url and explicitly walk through handles > 2 closing each?
I thought this was driven by a fix-all .
I thought those events are intentionally not exposed through the API so that we reserve the right to alter it?
I took a look at the binlog and it seems the #code set in #code is not taking effect in all projects as I would expect.
I took a look at the changes and also chatted with @github about them.
I took an attempt at trying to address the issue where #code may not be set yet when Directory.Build.props is run.
I took this as 'try to use CLR Name first'.
I tried to add the new property to #code but the compat checks didn't pass and I found no way to make them pass.
I tried to emulate such behavior with #code to make visual preview work.
I tried to limit the impact of the change to only occurring when the application is in dark mode.
I tried to structure it in a way that it has no impact on other platform.
I tried using the #code clang flag to
I try clear the reference from #code after call the #code.
I typically use #code
I understand the limitations here.
I understand there are some other internal tooltips that will need to be darkened and I plan to help out with those when I can.
I understand we're in the process of considering removing the -vs-deps infra.
I unfortunately could not test it due to build issues.
I updated the logic to have a text (json) file that contains all the server information.
I updated the MenuItem automation peer code to only subtract *visible* separators from the count.
I updated the PR with a new suggestion and better clarification around the issue.
I updated the templates that I already know produce vulnerability warnings to directly reference the vulnerable packages and require up-to-date versions of them.
I updated to using the non-Slim ReaderWriterLock and reran my #url.
I used Dokdo because it is included in the sample controls app
I used the following code for testing.
I used the following GCPerfSim cmdline -
I used the same numbers set in:
I used the test application provided to highlight the bug in the ticket to test the new behaviour.
I validated couple of random links for correctness but did not click all of them.
I verified that midl compilation puts the property on the getter/setter.
I verified the behavior with the Editor bits that add the delay and listen for cancellation.
I want to add another test for inheritdoc chaining.
I want to make that #code configurable.
I want to say @github was tracking that but I don't recall where it ended.
I want to share some of the #code weirdness here with Jon Pryor when he returns from vacation.
I want to switch to a linux machine that has browsers since our public runs don't seem to.
I wanted a good way to share the benchmark I wrote here so reviewers could evaluate it for efficacy.
I wanted to minimize impact on 64bit to make this change simplier and kept checks for 32bit only since they were essential there.
I wanted to submit this PR and discuss with the community if someone could give me some help testing or instructions.
I was a little surprised to see the PR included the runtime change to call #code considering the patch seemed to work well in my testing without any runtime changes.
I was able to get the args from cake to the test runner but SkipCategories doesn't seem to be working
I was able to validate your fix against the #code project by fixing how the #code code runs.
I was already going into this direction in the initial version but as Starchm pointed out already - we shouldn't remove that since it's necessary for a workaround for unsolved issue
I was also wondering if those results are guaranteed to be stable from build to build if a variable length instruction encoding depends on the size of some offset or memory address that might change.
I was basically trying a change to address the issue where TargetFramework wasn't set when Directory.Build.Props got imported for Compatibility.ControlGallery.WinUI causing for those props to be false.
I was going to say this should work with #code but seems that just for adding items.
I was looking at this and wondering why we still need it other than compatibility.
I was making more mistakes for example missing #codes.
I was playing with things and will update with more info once I confirm things.
I was referring to legacy names for the APIs.
I was thinking about Utc time but I didn't know about #code I will investigate in an hour.
I was thinking possibly outside the lock if the compilation is complete we could just return out early - instead of always branching to a new partial
I was told by David Wengier this:
I was too used to thinking in 64-bit address space.
I was trying to show the disparity of time it takes for items to get removed/added.
I was worried that this label would cause it to be closed if no action was taken.
I wasn't able to find a specific example but @github found this one:
I went with #code in this newly-added code because the logic of the loop is dead simple.
I will add a comment at some point to explain this in the method (assuming I don't forget).
I will add another jit config for that.
I will also accept pull requests on my branch and my test app to cover more scenarios.
I will check it from my end.
I will debug it further.
I will do it after the Feb.
I will fix the last define usage.
i will have a look.
I will have to dig in more
I will have to investigate about this.
I will investigate and fix the offending article.
I will investigate it
I will look into how to fix it better.
I will manually test the tab control with various child controls in the pages now.
I will mark as draft for now since it is blocked on merging in the new changes from main.
I will ping someone when that day comes to get it reopened (or you can just reopen it now if you want).
I will probably enable the #code on the method and then we can use constant length.
I will push other PRs that are independent of these APIs liking the SIMD's instructions within the emitter #95456
I will push the SIMD for LoongArch64.
I will rebase this PR on it once it merges.
I will remove the pragma warning disable RS0016 if this PR makes sense
I will review it shortly.
I will submit another set of PRs to repos when we update Arcade or the VMR to an SDK that has package pruning enabled.
I will take a look at doing a local definition.
I will test in my device later.
I will try implementing this with #code and see what it does to performance.
I will try to point out explicitly the issues that must be solved (ideally as questions) to unblock this
I will try to submit the API Proposal as requested.
I will wait until the review of this PR starts.
I will work more on this in the weekend.
I will work on cleaning this up a bit and experiment with showing & fixing the regression that occurs on value-converted types as mentioned in #url
I will write tests once there is a decision on whether this change makes sense or not.
I wonder if at some point VN dead stores could supplant the redundant zero inits phase....
I wonder if it is worth wrapping the GraphicsView inside a wrapper view only for this case.
I wonder if it's better to use the edge weight heuristics there as well...
I wonder if setting the listener is the right approach then
I wonder if some of the existing test check for the update and can be copied for this scenario.
I wonder if the GC can make some automatically decision here to avoid wasted effort here.
I wonder if the linker will remove those checks though...
I wonder if this is some ordering issue for when the TargetFramework gets populated and the #code running.
I wonder if this is still an issue #url
I wonder if this should be targeted at net10.0 instead?
I wonder if we can just use the same logic for both 32 and 64 bits.
I wonder if we can remove that.
I wonder if we should lean into #57941 here.
I wonder if we should switch the directive with a runtime check.
I worry it will be left-leaning (deeply along one path and not at all along others).
I would ask that we have a PR before thsi one that just rips it out and simplifies things greatly.
I would avoid doing such changes.
I would be also happy to add a test for this case - which suite should I use for it?
I would be fine merging with some changes to discuss that is it here for posterity
I would be for merging this if the spec was ratified.
I would be grateful for any opinions on this and the approach in general.
I would definitely suggest reviewing commit-by-commit here.
I would do somethign similar to this PR.
I would expect L57 and L58 to also need to change.
I would expect static constructors to be one of the easy cases to cover.
I would expect to see at least 1GB for the scenario in savings for any change that doesn't also improve readability/maintainability.
I would favor filing this as a bug and investigating the root cause rather than working around it in this way.
I would have expected the Quick Info Content on #code to be:
I would have thought that it was the other way around.
I would indeed like to continue working on this issue.
I would like a good explanation on why ITHreadingContext.DisposalToken is not *sufficient* here.
I would like to add a couple of missing test cases before marking as ready:
I would like to discuss and test the solution on your use cases.
I would like to get confirmation from the runtime side that NOP padding for x86 EH makes sense.
I would like to have something to show for these regressions.
I would like to share some ideas here.
I would like to split it into 2 separate PRs which address the two issues.
I would like to understand the design here and why it is needed.
I would love recommendations on possible improvements.
I would love to kill it and move to the same shared implementation.
I would not change this here as i don't think ther'es a problem.
I would not change this.
I would not expect the SPMI method mix to vary this widely this across platforms.
i would not have one test try to shutdown all this work prior to running the next test.
I would not really want full scale changes without clear examples of how it improve things.
I would prefer #code and #code
I would probably work with each of you separately.
I would run the microbenchmarks with and without this change on the pertinent hardware on the following tests given below for a sufficient number of iterations (as some of these exhibit a considerable amount of variance).
I would run with the GC's own stress (the gcstressm mentioned above is not actually stressing the GC) which is documented #url.
I would suggest we take it even if we don't take #51823.
I would switch to using a reader-writer style lock.
I wouldn't be surprised if .NET 6 support gets added soon.
I wouldn't be surprised that it does not work with segments (i.e.
I wouldn't keep headers.
I wouldn't want someone to open a bug report that DatePicker has wrong date format.
I write benchmarks for #url.
I wrote the unit test code.
I.e.
I.e.: this list of fixes is suboptimal.
I'd also advocate for a backport to 9.0 as its blocking migrations.
I'd be happy with your approach as well but at this point I would like to get a review and formal agreement on the decision by the product team please
i'd be open for a new flag here.
I'd even give you a thumbs up as it shows effort!
I'd gladly take some help!
I'd have to discard all the work I've done so far since the introduction of #code invalidates my current implementation.
I'd just lik ea test :)
I'd like to understand this better.
I'd love to merge it in before CC on Friday.
I'd maybe do a pass on the translators only for now (though there probably are similar opportunities elsewhere) to keep the scope manageable.
I'd prefer a larger rethinking here.
I'd prefer a much simpler and more targeted approach here in line with how the rest of the code is structured.
I'd prefer to see these discussions happen _before_ you spend your time on creating a PR that we might not merge :)
I'd rather us be consistent on this.
I'd really like this to ship.
I'd recommend a rethink if either of those are the case as both of these are done by OpenJDK which made PAC-RET a lot more complicated and less secure.
I'd recommend adding it as suggestion in this config while we change it to warning on the root one (as you already did): #url
I'd recommend asking him for his thoughts on this PR.
I'd recommend taking a look at their PR and the reviews that took place to get an idea of what the current change might be missing.
I'd say the logic is simply:
I'd suggest to change following code:
I'd think we should fix the caller to speculate on a valid/standalone expression.
I'll add some tests that check this transformation specifically
I'll add some unit tests.
I'll add them too.
I'll also adjust the PR desription accordingly.
I'll also close most of the 'conversations' here as they seem to be resolved.
I'll also double-check to see what Roslyn does.
I'll avoid any more personal comments.
I'll be able to work on this in a few weeks when I have a few days to sit down and implement all the remaining things & make sure it's all correct :) (or maybe the sporadic day here and there also before that).
I'll be honest that this feels like a ton of complexity just to be able to have a Dispose flow down to triggering a CTS.
I'll be on vacation without a PC until August 1st.
I'll be ready to cooperate more if needed.
I'll check again.
I'll come back to this.
I'll debug the failing tests later :(
I'll dig into this
I'll do and mark it as ready to review.
I'll do another pass on the changes later today.
I'll do my best to look at this again in the next couple of weeks.
I'll do those in a follow up.
I'll get to it back as soon as I can.
I'll have to compare the internal code of #code's without the execution parts of #code.
I'll have to go back to my use case and see whether this ends up being a problem or I can cope with it somehow.
I'll have to make sure this actually fails for both scenarios.
I'll include the related changes of formatting in this PR.
I'll just add that anyone concerned with git blame runs with #code config or via param unless they're stuck in 1980.
I'll keep the current code as is and look into alternative solutions for this issue.
i'll look today.
I'll make some suggestions.
I'll mark as draft (until we sort out the high-level design question) since our code review backlog is rather clogged at the moment.
I'll mark PR as draft as our review backlog is overflowing.
I'll mark the PR as personal for now.
I'll mark this PR as draft for now.
I'll need to look into individual regression cases for both options regardless of choice.
I'll open an issue to discuss revamping contributor guidelines but I'll leave some thoughts here:
I'll put out another PR to try to fix them (and maybe add a CI leg to validate the build in the future).
I'll queue a run internally when we have sign offs here.
I'll reach out to them to see if they'd be able to test some previews.
I'll rebase on current main to rerun CI.
I'll relaunch the CI to try to make sure to make it apply the change where it complained.
I'll remove them.
I'll reopen and force push a rebased version.
I'll run it now
I'll see if he could also take a look.
I'll take a look.
I'll test again once tests are added to see how you are reproducing this one.
I'll test with your change on 32bit this week
I'll tidy up and add somewhere in docs/
I'll try fixing these in a follow-up PR.
I'll try to do this after I get an initial passing test run.
I'll try to get into more details on what I mean when I do another full review pass.
I'll try to minimize amending commits and to avoid mix amending commits and rebasing to main in one force-push.
I'll try to reach you via Teams.
I'll try to set some time aside in the next week or two to go through the SIMD ISA guide and compare it to the proposed API surface so that it can get marked #code
I'll try to take a look and understand why.
I'll update the PR (not today since it's almost weekend here 😄)
I'll update this PR and run a solution analysis in the IDE to locate any warnings it introduced.
I'll update this.
I'll wait for #110922 to go in first before opening this up for review.
I'll wait til CI looks more green to look at this PR.
I'm *def* very wary of potentially prioritizing something that is effectively invisible on the line versus something visible and nearby.
I'm able to repro the failure without any stress modes locally.
I'm actually testing waters to be entirely honest.
I'm also considering re-naming the MSBuild items from #code to something more generic.
I'm also curious to know if this is something that other community members think is a good idea.
I'm also interested in if this is break change worthy?
I'm also looking into whether Microsoft.EntityFrameworkCore.SqlServer can update its Microsoft.Data.SqlClient dependency to 5.2.2 (which was just released a few hours ago) before .NET 9 ships.
I'm also not sure that unifying behavior here is 100% necessary - I don't know if users moving from VSCode have a strong expectation that VS functions exactly the same.
I'm amenable to different choices on what we do with the return type.
I'm asking because collection view does this already:
I'm assuming this a valid run - the exception is being used to end the test.
I'm concerned about scaling for the DPI.
I'm concerned about the scope and extensibility of this change.
I'm confused.
I'm considering whether this change might have any unforeseen implications.
I'm currently in vacation for another week.
I'm currently OOF and will return on 02/06.
I'm fairly certain we already have a helper for checking if something is an embedded statement.
I'm fine with changing the behavior here if we think it's better.
I'm glad we are working to bring additional alignment and share code.
I'm going to do a rebase.
I'm going to have to dig deeper.
I'm going to have to noodle on this a bit.
I'm going to ignore them unless someone has specific suggestions.
I'm going to look at Maoni's suggestion in her past paragraph above.
I'm going to look at this PR this week.
I'm guessing it's not a 10-21% performance lift on Linux platforms.
I'm guessing the templates also include Microsoft.EntityFrameworkCore.Design so that users can e.g.
I'm happy to leave it to you and others working in that area to decide if and when such an optimization would be worthwhile.
I'm happy to offer a walkthrough for more context on DAG construction.
I'm having a little trouble mapping your description to the issue the user has logged.
I'm having some issues building Roslyn locally because my local VS setup is slightly messed up
I'm having trouble reproducing this issue using the steps you provided.
i'm hesitant about true/false being enough here.
I'm hoping that's possible.
I'm hoping to get more by porting both bitonic search and packing for Arm64.
I'm hoping to work with @github to ensure some of the longer-running operations get cancelled when the solution closes in Visual Studio.
I'm in favor of incorproating a #code in that project and using source-sharing to bring in helpful dependencies like #code.
I'm in!
I'm just having some fun optimizing things.
I'm leaning towards a subset (only implementing the readonly/immutable interfaces).
I'm leaving this as a draft for now since I want to confirm that it will be necessary to directly reference these packages.
I'm looking for any possible way of pointing the compiler server client to a different directory.
I'm looking into either retrying or running #code before running the apps on Mac.
I'm marking it as draft for the moment to remove it from our active code reviews.
I'm moving it to Draft until we have the changes.
I'm moving this to draft for now.
I'm not 100% sure I did the easiest way to get the generic argument node from the collection.
I'm not a fan.
I'm not aware of an alternative.
I'm not aware of any other languaes which are doing that today.
I'm not entirely convinced.
I'm not exactly sure if it is somehow more complex than this.
I'm not familiar enough with LSP–Roslyn–VS interactions to know whether I could look down that route myself without getting involved in a bigger undertaking or interfering with the F# team's plans in that area.
I'm not familiar with any other taggers needing anything like this.
I'm not fully sure what'd be the proper way for benchmarking the latter.
I'm not looking for answers to them as part of this pull request.
I'm not opposed to the idea:-)
i'm not really ok with pursuing hypothetical fixes.
I'm not really sure.
I'm not sure about the behavior of #code APIs with #code.
I'm not sure how to best approach this.
I'm not sure how well the idea of post dominance holds up with EH...
I'm not sure I see a way to use this package at all that doesn't result in the compiler being copied to the output directory.
I'm not sure if anything has changed.
I'm not sure if it moots this PR.
I'm not sure if making the breaking change is worth it.
I'm not sure if this fix is really needed or if this issue represents a proper use case.
I'm not sure of the general timeline of when #code targets net9.0 but IMO this feels like something that should target #code directly.
I'm not sure that this fix addresses all possible cases.
I'm not sure this should go out in a net8.0 service release.
I'm not sure we want to merge this.
I'm not sure we want to take this.
i'm not sure what happened to r1 here.
I'm not sure what that means.
I'm not sure what to do with the codecov report.
I'm not sure when either is used.
I'm not sure whether those references should be removed or not.
I'm not sure who or what enabled this again.
I'm not sure why we'd add a set of Green visitors at all?
I'm not sure why.
I'm not sure.
I'm ok with this with beefed up testing.
I'm okay in case someone wanted to complete this before me.
I'm on vacation now.
I'm only looking at a single dll compilation where its about 1.9% of allocations; though nothing compared to the Immutable dictionary allocations or #code
I'm open to doing your suggestions in this PR if that's what you prefer.
I'm planning on working on this again fairly soon now that the API has finally approved.
I'm planning to combine it with an analyzer to enforce certain patterns and a source generator to simplify creation of the methods in common cases.
I'm planning to merge this as a fix for #70740 since it's safer for servicing than the alternative proposal in #71027.
I'm pretty convinced this scope useful by default and can be easily added back via middleware.
I'm prototyping what it would look like to share code between CoreCLR and NativeAOT for ComWrappers.
I'm questioning if all these scenarios require a reference to the #code to *bring with it* package references to the Compiler and it's closure.
I'm really waiting for this to get through so I can implement the F# side of this.
I'm referring to the disassembly for current change.
I'm removing the force inlining limit and collect diffs again.
I'm sending this as a proposal so the specifics of the design can be discussed.
I'm simply referring to having code lke this:
I'm still getting used to this testing framework unfortunately.
i'm still looking for clarity on this:
I'm still not happy with what seems to be an enormous amount of duplication here.
I'm still waiting for response to the question asked on the API proposal:
I'm sure it has a lot of quality issues though since it touches so many subsystems.
I'm sure there are scenarios where it's fundamentally not possible if you are using a 3rd party library and maybe they contain a StylusPlugin and do some stuff with it.
I'm surprised it ever worked...
I'm surprised we wouldn't have had code to deal with this originally; @github or @github any idea if something else broke here?
I'm taking this out of draft now.
I'm thinking I probably added the do-not-merge because the fix was incomplete and/or may have caused other issues but that I *thought* it might have been a step in the right direction once other fixes were made elsewhere.
I'm thinking we can lean into activity (as big as it is 😄) and use it's scope instead of having 2 by default.
I'm trying to figure out how I can turn the symbol in a CLR metadata name.
I'm trying to find another fix.
i'm trying to understand what this change is doing.
I'm unsure about the next steps to take.
I'm used to the other bots that post a comment indicating that they've received the request.
I'm using Visual Studio and an API 31 Pixel 5 emulator.
I'm very confident that Paul wrote a very similar benchmark when he added a few optimizations on this code path in the past and it's a shame I couldn't use those more directly when making this change.
I'm very interested in your patch from #url let me try it with this PR to check the behavior.
I'm very much unsure whether:
I'm very sorry for late response.
i'm waiting for this fix.
I'm willing to continue collaborating on this PR if I receive a code review and further refinements are needed.
I'm wondering for our tests if we should modify to return a static window or track the window.
I'm wondering why is it exactly using #code.
I'm working on this between other things at my day job and we've already fixed the issue on our side so I'm not able to dedicate a whole lot of time to working this out.
I'm worried this bifurcates things and causes users to have to remember to look in two bags for information.
I'm wrestling with this issue at the moment and would really appreciate a fix but we only use LTS versions for production apps.
I'ma fan of this sort of optimization.
I've added 2 examples of how #code can be used:
I've added 3 tests to the #code test file.
I've added a commit with this
I've added an explanation on why the class Exceptions should return an exception and added throwStatement to one of its method usages.
I've added an implementation of Bitonic.
I've added some scaling quirks in to avoid these diffs for now.
I've additionally removed the duplicated functionality in #code to check for #code validity.
I've already tested this and I am currently using it in project the hard way (recreating classes and overriding methods).
I've also added a #code flag that exits after outputting instead of prompting for new input (which I used in debugging and perf testing).
I've also added Math.Abs for calculating if the swipe changes
I've also added searching for libraries with #code prefixes because I noticed #24094 - please let me know if we don't want this (SQLite will only make sure correct extension is used for all OSes but it won't take care of the #code prefix).
I've also added tests for older .NET platforms.
I've also had to make a temporary fix on a problem with the tree splitting code where it wasn't correctly updating the node flags after splitting out side effects.
I've also introduced #code setters for the respective properties so they can be used as part of the #code operation and the underlying fields can be converted to #code.
I've also renamed the MSBuild task names (based on some chatting in teams) from #code -> #code as they're not specific to analyzers and it seems confusing that you specify something prefixed with analyzer for source generators
I've also wired up iOS through a few additional paths for loaded/unloaded via the VC so that they will fire more reliably.
I've asked him just now.
I've been asked to split #25664 into separate PR.
I've been having this issue as well.
I've been studying quite a lot about color science and WCAG compliant contrast ratios.
I've changed it to throw an invalid operation exception stating it shouldn't reach it.
I've changed this property to declare it as an #code.
I've checked that fields that require initialization are properly initialized elsewhere.
i've closed mine.
I've created this sample
I've determined that the content length header is wrong if stream compression is in use.
I've done a small adjustment to the wording on the warning level parameter on Diagnostic.Create as previous wording suggested Info and Hidden should be set to 0 which errors at runtime.
I've finally gotten around to benchmarking the Equality here and the perf regression here is noticeable:
I've fixed the tests by duplicating the controls for each test.
I've fixed what crashed the app
I've gotten the working on my pc now and I can see there are some problems with the tests I've written for this PR.
I've had a chat with the MCT discord and we're a bit unsure on what this would look like.
I've implemented a different approach that yields better results (imo).
I've implemented your suggestions here and have rounded the corners with a small radius.
I've included an app switch to optionally disable the propagation for customers not relying on this event anymore.
I've included some basic asserts at the **Testing** section.
I've just tried the changes in my updated test app and it gives me this result:
I've looked at the best location for the test and found that there is #code suite which tests ALC unloadability and seems like a perfect fit for the issue - would it be acceptable to have a test there?
I've looked through the change.
I've made these changes only to CV1 so far.
I've made this an internal method
I've never really touched CoreCLR so I'm not certain this is right.
I've noticed that too.
I've now changed the logic so skipped tokens are handled the same as before.
I've observed about 3-4ms improvement when building from #code directory (351 files; 156 matches).
I've opened #111971 to address this.
I've pushed up a commit with your sample modified slightly to demonstrate what I was talking about
I've queued a test insertion with this PR to see if it breaks the VS debugger codebase.
I've rebased on main to add a unit test that validates my changes.
I've rebased your changes (#url before they were merged on top of 5474ab5c50fc639e780e0322cd500b2e43ee9b0d and then applied my patch.
I've removed the failing test added in #39432.
I've replaced the #code from #code and #code with #code which uses TimeZone info from Java skipping loading the TZ database through .NET
I've sent an email to the compat council to determine whether we want to accept this breaking change.
I've set this up so that it warns not errors.
I've spent time today to investigate the issue on macOS arm64.
I've started looking into #url which requests overload completion to set the selection upon commit.
I've tested it on several different DPIs and everything seems to be in order.
I've tested it with scrolling also as re-drawing View elements also has to be updated correspondingly.
I've tested this code below to set the #code switch and find it worked.
I've tried #code
I've tried just making MemoryMarshal use BitCast internally but that gives 0 diffs anyway so not sure either of the changes makes sense.
I've tried re-setting my local environment to no avail.
I've updated the pull request now with the implementation introducing #code nodes at import.
I've used this functionality to analyze 3-opt's efficacy on #code; I'll report my findings in a separate issue.
I’ll fix it next week.
I’ve called the scrollView.ArrangeContentUnbounded(Frame) method within the ArrangeOverride method of the ScrollView class.
I’ve noticed other third-party libraries targeting #code that depend on the libraries we’re modifying here.
I’ve updated the fix and applied it to the Picker control.
ic an review tomorrow :)
IDE0055 (formatting fixes in general) forces this to:
Ideally I'd like to use the same accessibility for all three versions which sould be fine to do since the declaring visitors are not part of the public api anyways.
Ideally the wrapping refactoring can account for this to add/remove the trailing #code to retain adherence to this rule.
Ideally we would want:
Ideally with the setting set to true by default for the #code since it's already on there and false for the #code because we don't have it there today.
ie: #url
ie: is there a way to declare parameters that are mutually exclusive?
if (args is ScrollToRequest request)
if (Handler is not null)
if (handler.PlatformView.HorizontalOffset == request.HorizontalOffset &&
if (IsOpen)
if (PlatformView.GetScaleType() == ImageView.ScaleType.CenterCrop)
If #code is used it might get the location of the assembly that is extracted to the users appdata.
If #code was #code we would still shutdown the application on config changes.
If a codefix has no UI affordance (i.e.
If a JTRUE comparison only involves part of a local value we cannot make assertions about the local as a whole.
If a method follows certain #code lambda passing pattern (potentially marked with a new attribute) the compiler would automatically pass captured locals via TArg.
If all three conditions are met we use #code to avoid loading ourselves when loading the field type.
if compiler tries to call them.
if hidden from #url
If I add that package to an app project I see 26 MB of files (including the compiler libs) get copied to my app's output directory.
If I am in netcoreapp3.1
If I am in netstandard2.0
If I did my research right this behavior got removed between these commits.
If I do a new maui app with dev kit in vscode I am sure I get a sln...
If I drop the prerequisite changes then things break.
If I have image with resolution 1000x1000 and we set #code what will happen?
If I open #url
If I remove the code completely that removes the fragments shell will crash when reusing it.
If it builds it's good.
If it builds its good.
If it's not being used but is some tangle then harder to say.
If it's only enabled in PR / public CI builds then you can pretty much do anything.
If not can we try triggering the CI once.
If not please let me know.
If only I had the bandwidth 😢
If so lmk after it's updated and I'll give it a review
If so then any pointers would be great!
If someone can assist on the implementation on that it would be appreciated as I did have a hard time on this at first.
If that's the convention here so be it (its a very old one I wouldn't keep).
If the answer to 1.
If the approach looks suitable I will add more tests to confirm no required functionality has changed before marking this as ready for review.
If the commit operation is async #code will disappear.
If the data size was e.g.
If the exception is handled then the middleware invoke returns without rethrowing the exception.
If the intent is to pick this back up but you're busy with other tasks I can mark it as inactive until you're ready to go again.
If the lambda has captures it would be an error without this feature.
If the lifetime of the item source outlives the controls it can result in the #code callback keeping part of the UI tree alive in a half-zombie state.
If the method supports the TArg passing #code would convert the captures to the TArg.
If the new return address is ever in memory before being stored on the stack then that's potentially adding an exploit a hacker could exploit to write their own values to the stack.
If the server leg gets past the docker spin up this is fine with me
If the tests are related to what you are working on then it's an issue.
If the tool is public I'll be happy to do this myself.
If the user wants is
If there aren't any examples of hoisting then this might not show any positive impact until functions that perform #code are inlined into user code.
If there was pushback on doing this I'd be willing to remove it but I wanted to put it out there for consideration.
If they crash on display only (and depending on which control crashes) we might need to add some behaviour to clamp the images when they are being displayed.
If they like this PR then the code will be there for them to expose as public whenever they like.
If this change is accepted it will allow developers to use #code and #code APIs on their #code.
If this fixes it we could consider backporting #url to .NET 8.
If this is taken there's some more avenues to explore that could probably knock another 10 to 20% off SyntaxNormalizer and would be quite simple.
If this is the same fix you had in the nuget package you had me try @github  it definitely fixes many real world problems with stuttering and bizarre translation that I was encountering as shown here: #url
If this looks good (e.g.
If those linebreaks existed due to XML style guides I would explicitly revert that change.
If we add CultureInfo.InvariantCulture as a supported culture the code rejecting it and defaulted to the default configured culture.
if we are planning to sync the changes from upstream like rest of the dependencies)?
If we decided to free a region - we put it in the #code list and let the gradual decommit process to decommit it.
If we don't have any IOptionPersisters anywhere then the options will all hold their default values so there's no reason to do that work up front.
If we expand it to interfaces we can probably reuse the safe load path for the interface scenario too and not need to change anything else.
If we have tests that are doing cross-language references then absolutely we should keep the references because those tests absolutely need it as a direct reference.
if we have type #code from AssemblyLoadContext #code with number 2 and type #code from AssemblyLoadContext #code with number 5 the resulting loader allocator for the type ClassB<ClassA> would correspond to AssemblyLoadContext #code.
If we keep it like this I would prefer it if we inherited from MemoryStream and made sure a more appropriate error message was being surfaced.
If we proceed with such change would be good to file breaking change doc for that.
If we want to remove netstandard2.1 targets then IMO we should do all such projects together to have the best chance of detecting any potential issues.
If yes I'd need screenshots from CI
If you are keeping the headers though I wouldn't remove this: #code
If you built a special purpose one maybe it would eventually become obsolete in the future if a general-purpose option is created.
If You change employers in the future and
If you could also remove any dead links you are able to detect that would be great too.
if you did specify the per-object-heap limits they will just be taken as it with the adjustment for number of heaps.
If you do test this out and let us know if this works for you that will give us more confidence that this is a right fix and we can merge it sooner.
If you don't have the time just let me know and I can add some.
If you download the logcat file from the device test runs you should be able to see a crash in there that will need to be resolved
If you have a #code or #code (and it is a #code) it calls  #code.
If you have write-permissions please help me learn by adding exactly one area label.
if you look at #code you'll see there are a number of scenarios where we've wired into appearing and it works alright
If you to do type analysis on a collection to try and leverage a struct enumerator that some specific collection type offers you are more or less duplicating what these (not yet merged) changes do.
If you try you will get the following issue
If you verify that I don't see why a separate PR would be interesting.
If you want I can try to create some example based more around changes in this PR but from what I've seen you already have one.
If you want this to truly be something used by a design time tool it shouldn't be packaged like a library.
If you want to make the change though go ahead!
If you want to prevent the convert you could go something like this
If you want to work on this bug you should check with the original PR author and see if they aren't going to work on their fix anymore so that you can take over.
If you'd like to think of it another way: the information processed by DataProtection is so sensitive and failure would be so wildly catastrophic that this is an attempt to isolate the component from other failures within the same process.
If you're still on .NET8 you can try out my custom Android/iOS MAUI build from GitHub feed #url which contains this PR and other of my PRs still pending merge.
If you've got something to run that'd be great.
If Your
Ignore the #code issue and solve with a separate PR
Ignore the case mentioned above for this PR
IIRC it's fetched already on delegate creation anyway and the pointer seems to be only used for equality today?
IIUC they are used for few main purposes:
IL opcodes aren't required to generate such code.
ILVerification is owned by the JIT team and I honestly don't know the verification rules for this off the top of my head.
Imho the linked issue is resolved.
IMHO we hit #url
IMO that would make things easier.
IMO we should change this package to optimize for the common scenario rather than the uncommon one.
Implement **TapCoordinates** Appium action on macOS.
Implement #82559
Implement #code for Windows.
Implement #url.
Implementation is a work in progress.
Implementation:
Implemented a custom action using a Mac Driver custom command.
Implemented diagnostics in .editorconfig files.
Implemented dynamic title updates for ShellContent by subscribing to the PropertyChanged event.
Implemented in latest daily
Implemented new async method to fetch the current 2FA login provider
Implemented the RecognizesAccessKey property in the label and its default styles #3877
Implementing a custom resizing logic to resize the image before rendering it on the slider to ensure optimal display and improve user experience.
Implementing a source changed event listener for IconImageSource in the ImageSource call back.
Implements #68020
Implements #9802
Implements #url
Implements bulk of the cDAC stackwalking mechanics.
Implements code review feedback from #27833
Implements the proposal detailed in #58451
import or otherwise dispose of the Submission alone or with the Project.
Import the #url with #url.
Improve logic of computing LoaderAllocator for a generic type instance to avoid AssemblyLoadContext leaks.
Improve performance?
Improve the support and handling of the cast/converts in Cosmos
Improve the workaround (#22298) for the iffy Android ShapeImageView contentPadding/padding handling.
Improved null checks
Improved perfomance.
Improves JIT TP.
Improves performance based on #49685.
Improves performance in microbenchmarks:
Improves the performance of GetNextToken and GetPreviousToken by several multiples.
in .net 6)?
In .NET8 third party components provider like DevExpress had to implement propagation into their own components to make them work properly with MAUI (otherwise parent #codes wouldn't have been invalidated).
in #9432.
In #code class the state is encoded by #code.
In #code we can choose how to format the date using the types.
In #url we are working on linking the #code
In a code base this old and so widely used everyone MUST prioritize correctness.
in all libraries:
In an ideal scenario (with the number of elements < 1024) BufferCache is faster:
In case of Virtualization the current fix will fail as only few items will be loaded as a UI Element and other which are not loaded will be considered as not visible despite their property set to visible and the count will be incorrect.
In cases like assigning to already defined field or parameter you lose the visible type information.
In certain situations this is not valid C#
In either case we'd also need to make sure the behaviour works correctly if you try to use #code and #code together?
In fact it was yet another legacy code from arm64 that was never used.
In fact the Loongson does't publish the offical Intrinsic manual of English Version yet.
In general I think initializing like this should improve any case where #code or #code is used (just the first call of course).
In iOS 17 the #code API is #url and we're using that in a couple of places.
in MainPage.OnAppearing.
In many cases they would still be needed when running the tools.
In most cases for vscode integration tests the async operation listener is not necessary.
in my app i set UnselectedTabColor and SelectedTabColor:
In normal scenario of just loading library this will happen automatically but since SQLite doesn't use that logic we need to account for it so this scenario works correctly.
in NorthwindFunctions #code you have a #code (int) within a #code (double)
In order to make their attributes override the implied defaults we set.
In other words the node needs to have an equal amount of simplifier annotations in it's subtree as the node we are currently considering as candidate for reducing.
In other words:
In practice the #code without #code is a #code.
In progress :)
In reality the method is not reachable when #code is null because it would throw before the method is called but I wanted to keep parity with main.
In reply to: #url #url
In so many other ways they already differ.
In some cases stack allocating the inputs (particularly when calculating checksums).
In some cases the requested size will be already scaled by the user app and in some it would be the default size.
In some places it was just used to wrap a regular array without any benefit.
in src/Compilers/Test/Core/Compilation/CompilationExtensions.cs.
In that case we need to deal with the fact that all 3rd party (including refactorings) is #code which leaves us only very little room for higher priority.
In that context the #code style is ignored - the same happens when the visual state is defined in the global styles.
In the #url provided by @github in #url we observed that the GC is utilizing memory poorly.
In the current #code branch this will fail (not translated) but with this PR it does work.
In the future I expect to enhance lowering's support so that registers can be reconstructed from multiple fields via bitwise instructions.
In the future it can be taught more efficient ways to recombine the fields to the returned registers.
In the mean time is there a suggested work-around?
In the meantime I think it's ready to be reviewed.
In the original NorthwindFunctions you have the test #code which fails but the new test #code passes.
In the past we disabled #code as it was failing on the CI.
In the process I refactored a little bit to make more things async and combine initializations.
In the results below:
In theory it's possible to fork it and add such an enumerator (eg.
In these cases the amount of stack growth required is not known at JIT time.
In this benchmark the
In this case the decimal will always have #code.
In this case the narrator is failing to announce the correct order.
In this case this is okay because we know that the #code is just a duplicated 256-bit lookup.
In this PR I try to improve the Measure and Arrange method performance-wise.
In this PR we remove #code from #code along with obsolete warning suppresions and also #code plus #code proxies.
In this PR:
In typical applications #code and #code should only be referenced as design-time dependencies.
In which case we would want tests.
In XF we had such type in the xct.
INamedTypeSymbol FixUpAnnotationsForGenericConstruction(INamedTypeSymbol)
Include suggestion to add constraint to unmatched override or explicit implementation that uses #code.
Includes #108089 until it is merged
Including nested tab controls?
Increased (mostly startup) performance.
Increased code maintainability and resilience against refactorings.
Increased performance/decreased allocation when using the proxy.
Increases the likelihood of reconnecting successfully during a short network break.
Increasing the amount of code we consider cold should also lessen the amount of work 3-opt needs to do.
Increasing the size of #code is hard to justify.
incredible performance improve!
Indexof_with_emptystring
indicating start of method) is now -4
Infact it will cause a NRE in line 168 (#code).
Information about Submissions.
information that You submit with Your Submission.
Infrastructure to set the right behavior for targetting apple platforms has not yet been implemented although the general purpose support is in place.
Inheritance margin now only shows the inheritance hierarchy within the current document.
initial change
Initial implementation done:
Initially i think we saw a bit of overzealousness in the IDE side that really was problematic.
Initially the Toolkit had #codebut it is deprecated and also modified the VisualTree.
input manually?
Inserting a check of #code prints #code.
Inspecting the dmp led to some questionable data in the CachingSemanticModelProvider._providerCache CWT.
Install or download the assets resouce from #code package in your .NET 6 project.
Instead define an interface
Instead I would think that should be another trigger.
Instead of #code I'm using the #code.
Instead of explicitely changing priority in the service we might want to just go with the change in this PR + change the way CodeFixes report their priority (?add helper that takes #code and returns #code).
Instead of removing the entire #code entry from the #code
Instead passing the spans #code and #code directly into #code
Instructions are found below for testing purposes:
instructions in the Project's written guidelines concerning Submissions.
int modal1Appearing = 0;
int modal2Appearing = 0;
int windowAppearing = 0;
int windowDisappearing = 0;
Intel SDE Testing
Intent.ActionOpenDocument behaves differently from the currently used Intent.ActionGetContent
Interesting one and definitely something for the team to investigate further for its potential.
Interesting tho that skia upscaling is better than ios default.
Interesting.
Interestingly enough we did reduce memory allocations but suffered a ~13% performance hit so I discounted this approach despite the reduction of memory allocation to 46% (at least in it's current form).
Interface call sequence without this PR:
Interop calls much more costly than simple .NET calls[^3].
interpreted:
Introduce non-offset based to #code type
Introduced in #url
Investigating issue 24557
Invoke Benchmarks
iOS
iOS and Mac has issues - #17969
iOS content of FlyoutViewHandler.iOS.cs
iOS platform
is
is 'refactoring-only') then it should be bucketed together.
is 255 number of elements in the array?
Is an explicit build required for the analyzer to light up in VS?
is common enough to address for this release.
Is IMetaDataImport interface exposed by this?
Is is possible in stock .NET?
Is it a concept ACK then?
Is it a JIT issue?
Is it actually going to be a net win to use unmanaged metadata reader in cDAC?
Is it alright if we start taking flowgraph changes for .NET 10?
Is it because of enabling PAC or something else?
Is it correct?
Is it deterministic repro?
Is it for .NET 5 or 6 ?
Is it ideal?
Is it intended to work like that?
Is it needed for better validation of counters and heap structures?
Is it okay to keep the changes to #code or should I open a new PR if I manage to figure out how to fix the CA1822 by looking into the reducers/syntax generators?
Is it possible to add a test?
Is it possible to enforce this in IDE layer and not compiler?
Is it possible to use the address value of the node?
Is it that we want to allow developers to specify a different policy for stateful reconnects and fall back to the current policy for stateless reconnects?
Is Microsoft.EntityFrameworkCore.Design meant to be used in a way that it brings CodeAnalysis along with it and is responsible for deploying it?
is no then we need to clamp all images.
is not performed correctly.
is something happening here?
Is that a motivating aspect for this?
Is that because of the caching or something like that (because its not in the actual sql thats generated as that works)
Is that because of tiered compilation?
Is that even possible?
Is that going to be a deal breaker we need to fix for the IDE work?
Is that not a guarantee we offer?
Is that okay?
Is that right?
Is that supposed to be an error and a repo maintainer adds a commit to the PR ?
Is the above screenshot from trace good to say that this will have a bit of improvement?
Is the goal to improve the performance of the \[real-world?\] AntiForgery benchmark or to improve the performance of DataProtection in a standalone benchmark?
Is the image will be use our image as the highest resolution and then downscale for lower density or it is will be our image downscaled to 250x250 and then upscaled again to 1000x1000?
Is the intent that the Unix implementation would come separately?
Is the plan to make these properties work?
Is the spec far enough along that we're comfortable merging (once CI is green)?
Is the top allocating closure
Is there a blocker for this PR to be merged?
Is there a bug you're trying to fix?
Is there a doc explaining:
is there a particular part of the IDE you're interested in?
Is there a problem that we are trying to address in this PR?
Is there a problem with this PR?
Is there a real issue we are trying to address?
Is there a real-world motivation behind this?
Is there a reason we needed to add new functionality in these new layers instead of using what is already there and what we've had for like 10ish years?
is there a timeline to finally fix this bug?
Is there a user facing bug that you are trying to fix?
Is there a way to get the item container for a child?
Is there an ETA?
Is there an example of a scenario that doesn't work?
Is there an existing issue or discussion in our repo we can link this to?
Is there an invite link?
Is there any chance that this fix goes to .NET 7?
Is there any chance that this functionality will be available in .NET MAUI soon?
Is there any documentation I need to update.
Is there any documentation on how to add new interface members etc.?
Is there any other solution?
Is there any reason not to use v22.0 at this point?
Is there any reason to go this far?
Is there any test in the new set of tests that does test this sort of cast/convert as the transition to #code seems to have simplified that aspect out?
Is there any update on when this will get reviewed?
Is there any way I could help you with getting this PR merged (beside the code review ofc)?
Is there any way this merge can be reviewed/approved?
Is there anything else I should do?
Is there anything else that I should consider?
Is there anything else?
Is there anything i can do to help to prevent regressions?
Is there anything I can help with on this?
Is there anything I can help with to keep this moving along (_I see a few unrelated tests failing_)?
Is there anything missing?
Is there anything that prevents going forward with this?
Is there anyway to make sure?
Is there documentation to this effect?
Is there no chance we can get this fix in a patch release for .NET 8?
Is there something I'm not getting here?
Is this a breaking change for a SR that means it should wait for net9.0?
Is this already available in nightlies?
Is this change going to be measurable memory consumption regression?
Is this going into next SR?
Is this good to merge now?
Is this good to merge?
Is this only on Android ?
Is this parity with another editor?
Is this PR still relevant then?
Is this something you're looking into as well?
is this still needed?
Is this still working if you PR is merged?
Is this strictly better than what we have today?
Is this the correct way of importing the Mef service(s)?
Is this the only thing standing in the way of MSBuild being able to run in parallel?
is yes....
Is your intent to merge it soon?
Isn't it because the large missing contexts?
issue
Issue Link : #8552
Issue: #42449
Issue: #73543
Issue: #url
Issues Fixed
Issues for original approaches: #26907 #25692
Issues:
It achieves this by folding the member access into the conditional.
It actually should be matching if the tables are the same even if the instance is different.
It actually stored the keys out-of-proc to further reduce the risk of a buggy component within the process leaking keys.
It allows the user to edit using keyboard.
It already has code to access App/System resources in the absence of mentor which suggests this was meant to be a supported scenario.
It also adds some integration tests for both scenarios
It also allows some of the comparisons in the checks to be hoisted out of loops.
It also appears that Firefox and Safari both still don't support CHIPS even though Firefox #url third-party cookies and Safari already blocks them.
It also attempt to isolate them too heavily.
It also breaks #code with #code
It also doesn't implement a generic #code which makes typed usage and LINQ usage difficult.
It also fixes the issue #url
It also gives us more options in the future to experiment with using fewer anchor characters (e.g.
It also looks like #code is failing on iOS
It also looks like there a number of legitimate test failures.
It appears that #url is not in use (at least not in this repo).
It can also be misbehaving and we have made runtime implementation resilient for such cases in number of places using fallbacks.
it can always addressed later.
It can be 50 to 100ms on some device.
It can involve much more than you may initially considered.
It cannot access child menu items when using a grouping.
It cannot be larger than the size of the screen.
It carries some risk of accidental overrides.
It causes the label text cropped.
It changes the way you code.
It comes indirectly from the Windows headers.
It contains the optimization for saturating conversions instructions introduced with AVX10.2.
It could be a shortcut to #code for better discoverability when writing source generators.
It could be particularly noticeable in apps that are moving into the #code range based on the developer's XAML & layout choices.
It could just be:
It didn't get any global polishing unlike other repos.
It does not even build.
It does not look like it will be clean in terms of the contract.
It does not seem to follow what we do in the other places wrt.
It does so by converting a text into an image.
It does suggest that in the future we might be able to improve the perf by more efficiently packing the code but I'm happy to separate optional future perf improvements from the current PR which fixes a bug and incurs no perf regression.
It does take effect for some.
it doesn't feel like i have an approach that allow me to specify this.
it doesn't have one for solution close.
It doesn't impact what ships to customers and it's safer since the tools that validate dependencies won't see the vulnerable reference.
It doesn't leak to your users: #url
It doesn't make sense supporting it.
It doesn't really matter whether your code uses JTF or not.
it doesn't respect #code for
It doesn't seem like a substantial enough change in my estimation.
It enables developers to create a custom nullable datetime picker control in the case the DateSelected property was left not nullable
It even does not have to be this full blown implementation.
It feels like an excessive/confusing/misleading diagnostics is reported for the following scenario:
It feels like that (IDE) should be fixed.
It feels like this should be testable by a unit test.
It feels like we will lose the ability in this step
It feels like we're taking things so clear and idiomatic and adding ceremony about them.
It gets automatically fixed after updating any of the Label's properties
It has been open for months on the tests.
It has been waiting for more than half a year!
It has to be something that won't assert on a semi-valid raw IL code I guess.
It IMO follows this #url by @github.
It increases the size of compiled files slightly.
It is
It is #url in #100380.
It is a bit of clutter and cognitive burden to have these now 'leaked' to all other members of the type.
It is a heuristic.
It is a lot less confusing when you're trying to understand the actual meaningful set of dependencies.
It is actually wrong regardless of it being a constant/null: it is wrong when #code is in C# semantics:
It is also an improvement for short lengths and LOC reduction still.
It is also not consistent with Android which respects all the LayoutOptions
It is an RGBA image so 6960 x 4640 x 4 (one byte for each rgba channel).
It is as predictable as unmanaged runtime code and its size is about an order magnitude bigger compared to size of the unmanaged runtime code.
It is because I'm not sure what is the desired behavior.
It is because return address hijacking done as part thread suspension for GC: #url
it is C# generated file and they dont want us to show errors from that generated file inside of hidden code for random thing like you can change this code to expression body!
It is hard to know if this is an improvement.
It is important to note that the patch would enable PAC-RET for the JIT but not the code emitted from the JIT.
It is indeed inappropriate to add the #code judgment.
it is itself generic on a single T and that T ends up being used in a base interface of #code.
It is likely that some changes in the timings around thread termination/creation made the deadlock more likely to happen in 9.0.
It is means that we do not need these two fields anymore.
It is more efficient to scale the default font and have it applied to all controls in the application than to scale font on each container control.
It is much more efficient to fully rely on ItemDecoration to manage spacing between items.
It is not a regular pinned handle.
It is not enabled by default.
It is not intersecting with #code.
It is not meant for making sure everything works fine with that.
It is on our list of potentials though.
It is probably worth opening an issue (API proposal) for the behavior change (in its entirety) and have it reviewed before proceeding with this change.
It is quite trivial and another similar PR was also merged.
It is rare for code in native runtime libraries to process input controller by the attacker.
It is really around is anyone going to be surprised that we are now filtering out these settings?
It is still in rough shape but I would like to solicit early feedback before spending too much time polishing.
It is the order in which they are removed which matters.
It is too easy to get duplicates.
It is unfortunately quite common to see buggy components misuse the array pool.
It is unlikely that .NET 9 iOS customers are depending on this new behavior as it is fundamentally incorrect as per #url)-system-readonlyspan((system-char))-system-globalization-compareoptions-system-int32%40)).
It is:
It just would make things annoyingly more complex.
It keeps the current behavior but gives an option to opt-in to only logging the unhandled exception log message if the middleware didn't handle the exception.
It leaves too many test gaps that need separate tests to interact with the controls themselves (e.g.
It lists a lot of P2Ps for net9.0 that shouldn't exist.
It literally just says: the level was lower than this fixed (non configurable) value?
It logs these issues for review.
It looks good to me.
It looks like @github's test results show some significant regressions.
It looks like #68694 got reverted.
It looks like #code is called on an  #code instance.
It looks like a number of failures have crept in under #code.
It looks like a solution is being discussed.
It looks like my zlib code does expose a bug in the new code on the line where I check if the text is > 70 characters in length but then I probably forgot to check #codelength -1 > 70#code since.
It looks like the changes here are causing the device tests on android to crash.
It looks like the issue is probably related to modifying the exe in place: #url
It looks like the type mapping computed in #code does not match the actual expression type :(
It looks like the vcxprojs use the net9.0-windows7.0 TFM but everything else just uses the net9.0 TFM.
It looks like the version of CodeAnalysis is 4.8 which can't move due to #url and Roslyn hasn't provided a patched version to resolve these.
It looks like there are merge conflicts here.
It looks like there are several test failures related to parsing.
It looks like theres a ton of semantic tokens requests for a lot of documents (todo - trying to understand why there requests for so many different documents).
It looks like this is exacerbating the issues caused by the trimmer's interface method resolution (#url That issue should be fixed before this is finished and merged.
It looks like this won't make Preview 1.
It looks like we do not have any diagnostics tests that would be sensitive for improperly closed eventpipe sessions.
It looks like Xamarin didn't have this logic:
It manages a #code for the target property and will either #url the setter depending on the evaluation of the condition.
It may be an acceptable limitations to only have this work on Windows.
It may be best to delete the fast path that is trying to compare the MethodInfos and potentially optimize #code instead.
It may be best to wait and see whether this shows up anywhere.
It may be fine to take a throughput regression for this case.
It may be good to schedule an API discussion to confirm design (tagging @github FYI) before reviewing this PR and adding tests.
It may be more suitable.
It may be possible to remove the use of the #url when PAC is enabled.
It may fix #url
It may not be trivial to solve.
It means no one has tested it besides of you and you tested it on a single app only.
It means that the #code thread should get the Matrix from #code property which only allow get from UI Thread.
It means we don't end up with stale stuff just slowing down builds down the road.
It means:
It might be beneficial to simply leave ordering on the server side and let client just present the results in whatever order they come in.
It might be faster and should allow better support of trimming and the support of NativeAOT once everything is migrated to C#.
It might be interesting to see how many cases this fires for.
It might be mitigated by us using #code as well.
It might be we need to continue setting it in the props and then reset it in targets if empty.
It might change it's behavior on every invocation.
It might.
It mostly all LGTM and I appreciate the cleanup done from the previous review comments.
It mostly works with the values as a parameter instead of a constant but there are a couple of interesting tests.
It must be interesting to read how it was *removed*.
It narrows down a virtual temp by #code at each element access.
It needs #url afaik
it only barely compiles right now
It only needs the #code value.
It only stays in GPU memory.
It probably should check both visual basic and csharp in this method instead of checking visual basic twice.
It recognizes that the #code operation #url as #code since there's no instruction for #code on bytes on X86.
It represents a significant speed up vs.
It requires changes from the original implementation due to using deprecated APIs.
It runs on the lowered nodes (because it's the emit layer which decides to emit a temporary).
It saved about 25% for me on the test time for the nullability tests.
It seemed to work on my local machine.
It seems #code is empty which is what is used to set the property.
It seems base and diff are compiled to identical IL (#url)
It seems like the quick info on #code should have #code and #code in it but instead it only has #code and the #code from #code: #code
It seems like there would be a product bug if an EF package has a dependency on CodeAnalysis that is visible to ASP.NET Core.
It seems like this field is different
It seems like this only supports SAEA.
It seems necessary to actually have a test validating this scenario and preventing regressions.
It seems that some parts of WinUI are much less optimized than others.
It seems that the assertion sql is inconsistent with the generated sql due to the original lack of support for datetime_Ticks.
It seems that the diff was due to force inlining on recursion methods.
it seems that the inline context is still incorrect.
It seems that the only way to fix the problem and keep the cleanup at exit untouched would be to link to ucrt dynamically.
it seems that this issue was completely forgotten for months
It seems these tests can be refactored to use the new asynchronous #code methods.
It seems this used to work 3 years ago.
It seems to address the reported issue.
It seems we need to obtain and apply the default style settings.
it seems...
It should be
It should be based on #code.
It should be zero diff now (unless we have some recursive methods marked as force inlining)
It should exist but they assert that it does not.
It should prevent translation otherwise for example
It should work now.
It shows that by removing setting padding one saved about 180 ms in total when I displayed my grid 10 times.
It shows that the #code typed in UI propagates to #code but #code is null at that moment.
It sounds counterintuitive.
It still attempts to build Microsoft.CodeAnalysis with the net9.0 TFM in a source build configuration which leads to the following errors:
It turns out that for customers that are deriving from #code run into issues with the #code and the binding for the #code property.
It turns out that TaggedText was changed to be readonly which broke things so I had to add an internal clone function to unbreak it.
It turns out we have exactly such a call here:
It uses a hashtable to identify the Grouping and then calls #code to the grouping.
It uses a single #code value that can be #code.
It was introduced in time when only
It was lazy because static fields only get assigned when necessary and in this case CreateUnknownReflector was only called on the first call to UnknownReflector and it was thread-safe because static constructors are thread safe.
It was much more complex to try to have a single dictionary.
It was only 3 classes that weren't really providing any valuable reuse and overall just make the logic really hard to navigate around.
It was still broken after changing the behavior to create a new inode.
It was very helpful.
It wasn't obvious to me how we'd decide how many nops to add to the end of the methods.
It will also allow interested folks to chime in with their input.
It will also improve #url since it also ends up calling minipal implementation.
It will also improve code quality.
It will be called when #url is called (only happen when commit & cancel)
it will break all razor scenario.
It will change error binding message build.
it will help indicate where the work is being spent.
It will improve code quality.
It will not fix the issue #4768 completely but may improve the performance already
It will not get dropped if docs/projects *outside* of its project-cone change.
It will resolves to a local copy of nightly SDK.
It will simplify the definition syntax of RowDefinitions and ColumnDefinitions by:
It will take a bit of turn-around time as I need to publish the app to TestFlight to get it deployed on macOS 😅.
It will worth the effort to make 32 bits app work better.
It works for musl libc (musl libc is used e.g.
It works properly.
It works with and without #code.
It would actually make sense for this memory to be allocated with malloc.
it would allow us to cast some light to issues potentially invisible due to #url
It would allow us to simplify #code conditions that we have in number of places.
It would also mean that each of the precode on the page would have a different relative offset to their data slot.
It would be a bit slower due to the fact that we need to check the registered type converters but at least this change wouldn't be potentially breaking.
It would be a temporary measure until something forces us to take R2R version reset
It would be a very clear and easy to define interface where we can clearly define its semantics.
It would be also good to change the following asserts:
It would be fine with me if it comes with good error message.
It would be good it you could fill the template a bit including whether/how you tested it.
It would be good to get as much of the VB.NET community as possible to check real-world projects compile as expected.
It would be good to get this to .net 9
It would be good to understand why the suppression isn't working.
It would be great if you could help with the debugging.
It would be great to know if an element is visible or not though.
It would be really nice to get it in .NET 8 too <3
it would be useful to know if this affects test run time in CI at all.
It would be useful to resolve these so that we can do a validation run and/or cherry pick the validation insertion commit into a related PR on the VS side to see if everything comes together the way we want.
It would certainly help some contributors and avoid all discussions if we introduced an .editorconfig and formatted the whole repo at once.
It would get the codebase to a much better state too.
It would make more sense to me to focus on this part: prove that this metadata reader is at least as good as the existing runtime reader and replace the current the runtime reader.
It would supply evidence that these changes have real-world impact and aren't just microbenchmark improvements.
It'd be nice if there wasn't any difference at all so folks didn't need to consider whether it might be an issue.
It'd be nice if they could be checked into coreclr somehow.
It's a broken scenario.
It's a fair question.
It's a good historical record of why we used to do things and could be valuable for anyone who has to come back and do servicing one day.
It's a nice experience to be able to browse the documentation locally without having a browser pop up.
It's a quick proof of concept.
It's a tradeoff.
It's adding support for the ability to have go to definition go to F# code.
It's all good!
It's already that way.
It's also better to use a collection from the BCL than our own where possible.
It's always been possible to end up with long patterns in certain scenarios.
It's an experiment
It's awesome.
It's basically just an exception waiting to kill your app regardless.
It's been sitting here for a long time.
It's been stale for about 10 days now so wanted to reach out and see what the status is on your end.
It's best to avoid any amending and force pushes.
It's contains a single entry so far.
It's correct as is (I already see 3 16-core VMs allocated for these requests😆) - it's just that currently there is no feedback that the jobs have started **yet**
It's currently unclear to me under what conditions the (formatter?) doesn't add a new line.
It's currently work in progress.
It's difficult to give precise incremental numbers for this case because the example performance trace was captured prior to #48568.
It's due to the fact that #code and #code were being handled incorrectly and float can't actually be distinguished from #code (which was being handled incorrectly as well) in a printf format string.
It's effectively recreating #code and use it specifically for #code.
It's essential to consider the behaviors from previous .NET Framework / .NET 6 / .NET 7.
It's fine that the SQL produced is now different.
It's happening since version 8.
It's highly doubtful that a mix of NEON+scalar would give better performance.
It's in the same vein.
It's just what the runtime does on .net core for strings.
It's more about whether you tasks ever have main thread dependencies.
It's more sustainable for the transitive dependencies to be updated by the packages that directly depend on them.
it's not #code).
It's not clear why it's better.
It's not like the scenario is super-useful.
It's not possible to fully root cause this at the moment but adding asserts and NRT annotations to help us track it down in the future.
It's not something that Roslyn can do without editor support.
It's not to be merged.
It's not using glibc.
It's nto really magic hashing.
It's part of our mechanism for ensuring asynchronous operations started by one test do not change the behavior of tests that run later.
It's possible there are other subtle functional changes here.
It's probably the same problem as the one below.
It's probably worth nothing that later Redis versions don't have much that customers notice/use.
It's rather a busy repo so GH will likely always show you that your branch is behind by X number of commits.
It's similar to what I see on Raptor Lake.
It's technically more complicated but this is the gist.
It's unclear to me if this means we have a bug or not.
It's up to the caller to be careful about how the handle to the object is passed around.
It's up to the maintainers to continue or let go the discussion.
it's very common that folks would specify a small value for POH.
It's worth noting that the #code method also already does essentially the same thing.
Items remaining:
Its content would probably be quite similar to what you already wrote in #url This will allow us to prioritize reviewing the changes here.
Its possible to create a case that bypasses funcletizer but it's bit contrived.
its state.
Jan Kotas #url:
Jared's review is stale.
Jeremy is planning to rework the default font handling.
JIT already does this if it can prove for safety.
Jit logging
Jit support should be fairly straightforward assuming the following:
Job seems to be submitted - #url
json_value in differents rdbms:
Just a note on moving it to the better location and using GT_COMMA rather than GT_QMARK.
Just checking.
Just CI
Just CI and Snoop
Just CI.
Just curious: What impact do you see in your app?
Just download the artifacts from the ci build and add to a folder.
Just going to see if anybody else needs to look at it before we can merge.
Just keeping you informed.
Just my 2c.
Just not feeling that this change is worth it.
Just realized that there already was an ObservableList<T> object that supports some range operations.
Just removed the #code asserts for now - already guarded by the callers.
just running #code on its own.
Just saw Jon's #url above.
Just some leftover issues to react / cleanup and the PR is ready to go.
Just some very quick smoke testing.
Just the SqlServer provider or EFCore in general?
Just to check if there's any diff under FullOpts.
Just to make sure I understand how this would work.
Just very recently for example; #9882 - nobody said a thing.
Just want to make sure I understand your point correctly.
Just wanted to ask why this has not been merged to main for such a long time now?
Just with this PR:
Justification:
Justify the indication by mentioning how risks were measured and addressed.]
Keep in mind that the comments on #code are there for documentation purposes.
Keep in mind that we still need package authoring in .NET 8 and older versions.
Keep the same behavior with other architectures.
Keeping the conversation in English would allow more people to participate.
keeping the history for the last BGC or the last few BGCs seems more appropriate.
KeepLeadingTriviaExceptDocumentationComments
Key differences from the other PR:
Kindly review it and let us know if you  any concerns.
Kindly review it and share any concerns
Known issues addressed before making a non-draft PR
Known types are types in an hard-coded list that makes them more optimized by WPF.
Lack of this workaround is stopping us from going to the markets.
lambdas
lang version in addition to the existing 'LangVersion' property.
Last time I kind of got stuck because of some typing issues as mentioned in #url
Late devirt can happen without context information.
Later #code hooks to ActiveSession changed event in #url and it never gets unplug.
Later added tests are only present in #code.
Later I will update this PR to amend some details.
Later on we will try to fix our image resolutions to have a working setup with better antialiasing.
Latest builds of docker images are broken with latest VMs.
Law of Cosines
law.
Layout options have no effect on the title view.
Learn more:
Leave the mechanism for private builds.
Less allocations
Less chance to have trimming inside WPF
Less unexpected exceptions thrown.
Less unnecessary boxing means less pauses due to GC.
Let me give it a try first.
Let me know
Let me know if can help with it.
Let me know if can help with something.
Let me know if I can help with more details / testing.
Let me know if I should do so.
Let me know if there are things I could help with.
Let me know if you have questions about it.
Let me know when this is ready for a full review and I'll take a look.
Let me think about this.
Let the user manually close the app if something becomes so broken.
Let us know if any further modifications are needed.
Let us know if you have further thoughts!
Let's hold off on this until Andy's change merges and then validate this isn't actually needed.
Let's make it clear this is always going to be a best effort.
Let's push the workspace construction to some of the test base constructors to avoid all the repetition in each test.
Let's review the actual folder structure to see why:
Let's see the latest run.
Let's try to reach consensus that we want to solve this by adding an error rather than by preventing the temp from being shared.
Let's wait until #url is signed-off.
Let's work fast to unblock dave.
Lets drop the changes which are already submitted in other PRs.
Leveraging a few new .NET Core APIs that take #code.
LGTM
LGTM assuming CI failures aren't related
LGTM overall so far
LGTM.
LH Type is #code and RH Type is #code
LIB_CONFIG: #code
libraries.
Licenses.
like #code
like if you wanted a company logo with multiple colors because at the moment those are all white as well.
Like in this PR: #url
Like this:
Limitations like these can be overcome by allowing the JIT to introduce #code into methods.
Line 212 should be hit when tablet is rotated.
LinearGradientBrush and RadialGradientBrush were the only 2 of many DUCE resources to use this method.
Link for issue:  #url
Linked issue #57789.
Linking #url & #url as they may be fixed by this as well.
LINQ's GroupBy operator adds elements from the #code into buckets called #code (#code).
Linux ARM64 failure is unrelated.
ListItems/ListBoxItems added both directly or with data binding (i.e.
ListView Items Text not rendered inside the TabbedPage
ListView scroll position maintains after cleared and added data to the existing collection.
ListView ToolTip
little bit different with unit-tests.
LLVM frame (using callee saved XMM register) -> interpreter (interpreter native code changing callee saved XMM register) -> LLVM frame -> throw managed exception
Load is executed from a different machine.
Local build + CI + I tested a few apps that uses custom fonts to test this code path.
Local build + validated IL.
Local build pass
Local build; I've tested the changes in #code and it works as expected.
Local build.
Local build/CI.
Local build/sample app run.
Local heap dump shows 6.8GB memory retained by unused PreviewWorkspace instances.
Local Testing
Local testing using sample app that hits this specific code.
Local testing.
LOL the best doc I have is this:
look at the code we have - #url
Look good to me.
Look into making this transform produce the same code as before in #code.
Look into the call stack:
Looked at the asm with #code:
Looking at
Looking at the #url:
Looking at this
Looking forward for this!
Looking good overall.
looking.
Looks fantastic!
Looks good to me otherwise.
Looks good to me.
Looks like a legit test fail
Looks like a regression.
Looks like CI failures are related?
Looks like I need some conditional compilation to make the Regex source generation work.
Looks like I should add the Tizen workload locally.
Looks like I've got the tests working now.
Looks like it is moved down a little and is being cut off a little bit on the top
Looks like jitstress is no longer blocked (at least not on x86).
Looks like something is wrong with respect to handling #code.
Looks like that was a bug in my side.
Looks like the assertion on line 143 is failing: #url
Looks like the builds have expired so I can't see what the test failures are.
Looks like the integration-corehost tests are a bit of a disaster.
Looks like the same sort of issue is filed on corewcf as well #url
Looks like the windows x86 crossgen2 comparison is failing:
Looks like there is a build break on MacOS.
Looks like there is no regular formatting tests for exceptions that do not truncate.
Looks like there's a legitimate test failure.
Looks like things are pretty 🔥 🚒 🟥  right now.
Looks like this changed the behavior of the placeholder a tad.
Looks like this removes the ability to also set a font family.
Looks like this slipped through the cracks over the holidays :) Will try and give another review when I have the chance.
Looks like you're the only user of this on Github.
Looks nice.
LoongArch64 has the #code instructions to do byte reversing in 1x8byte/2x4byte/4x2byte grouping.
low
Low - updating target in a single project that only impacts that library's generation of a targets file.
Low but nonzero--the task will now error if given a string that doesn't cleanly coerce to #code or #code.
low risk
Low risk.
Low to medium; will follow-up with unit tests once we're in that timeframe and past WPF tests.
Low to none.
low-priority in codeactions menu.
Low; do note that #9887 should be taken first imho.
Low.
Lowering is responsible for ensuring this property.
LSP communication will/would strip away the link to diagnostics (because it transfers everything as Refactoring) and such this improvement wouldn't apply.
LSP notifications sent from the client - these never wait for the request to complete on the server (e.g.
LSP will use the 'label' as a replacement for the insert text / sort text / filter text if we don't send them.
LTO would place LLVM bitcode (instead of machine code) into the object files that we ship.
M.E.C.R.
M1 Pro
MAC
macOS
macOS platform
Made #code configurable for Resizetizer.
MAIN
MAIN IS THE ONLY ACTIVE BRANCH.
Main PR
Main PR <!-- Link to PR if any that fixed this in the main branch.
Main version of fix for #url
Maintaining consistent behavior allows developers to more easily apply the Fluent theme without worrying about layout changes due to style switches.
Make a change in a visible document - this triggers a request to the server for semantic tokens.
Make commit operation async in renaming session if the commit behavior is triggered by #code or in the rename UI.
Make fields private
make minimal impact by default but provide something for users who would be stuck otherwise.
Make SQLite a required runtime dependency of the features layer (as opposed to an optional dependency)
Make sure content is updated when ControlTemplate changes for ContentPage.
MAKE SURE THIS PR IS TARGETING MAIN.
Make sure to rebase with latest changes the remove provisionator
Make the following APIs public to be used by third-party tools:
make the Submission in cases where Your Submission is made in the course of Your work for Your
make the variable local?
Make this pass run only for #code and revert to existing code for #code.
Makes code a bit safer by removing #code usages with invalid types.
Makes it trivial to debug the state of the program at the point it hit the unexpected exception.
Makes sense.
Making a different decision for error recovery now seems to be a matter of just changing the flag passed at certain call sites and updating the test baselines.
Making this a draft as some of the enum #code  tests don't work yet.
Managed call is taking care of overflow/divbyzero checks.
Managed to reproduce on a helix repro VM and got the following from a binlog
Manual backport of (#101397) and (#101538)
Manual backport of #url
Manual port of #url which did not made it in release branches.
Manual testing using 7.0.100-rc.2.22477.23.
Manual.
Manually test consuming package in .NETFramework project.
Manually testing by opening/closing WPF application and doing actions
Many CIs fail due to:
Many Thanks :)
Many thanks!
Many things will be going on even with the filter span.
Marked as a draft until we verify that it works for both built-in refactorings and refactorings provided by a VSIX package.
Marked as draft until I can figure out test story
Marking as draft for now.
Marking as draft to make room in our overflow review queue.
Marking as draft until we get a decision on #51823 to make some room in our review queue.
Marking as ready for review again.
Marking it as draft right now due to the changes from #10251 being included.
Marking members as #code allows the compiler to generate more efficient code.
Marking PR as draft to make room in our review queue.
Marking PR as draft until the #url is reviewed.
Marking this as ready for review.
Marking this PR as a draft as @github has pointed out that it could be improved.
Marks #url as #code.
Matching on #code nodes containing #code.
Matching that seems good.
MaxIterationCount=20  MinIterationCount=15  WarmupCount=1
May also need to check for potential memory leaks.
May be modified pending API review.
May improve system resource usage by closing streams early instead of letting them be closed by a finalizer?
May the automation tool can not access the menu item directly if it is wrapped by the automation peer for the menu item data.
May these help you:
Maybe @github tested it.
Maybe @github would know
maybe #code?
Maybe add some docs?
Maybe after feature complete of .NET 9.
Maybe at least try for those?
Maybe find out how many non-private nested types there are and how often we do something like #code in Roslyn.sln and decide accordingly?
Maybe fix #111708
Maybe for large image MAUI team see no benefit on upscaling but then when we tested on iPad or tablet we definitely saw the need the upscaling.
Maybe grouping it with the other lines for InterceptableLocation would be good.
Maybe I can do it this week.
Maybe I should have explained this in advance: this is not a new/different approach to translate boolean (in)equalities; it is just making the code more consistent in choosing #code over #code (as per the issue).
Maybe I should make changes for iOS to match the logic with Android.
Maybe in another decade.
Maybe just open an issue with instructions about how to reproduce this (does it repro readily with DOTNET_JitStress enabled spmi replay on this PR?)
Maybe lost the System.Windows.Media.Animation.BackEase.
Maybe something like
Maybe that means arm64 + arm64e.
Maybe the application had been resized a couple of times and the current sizes are not appropriate for the default font anymore.
Maybe the iOS flyout implementation should be migrated to core/handlers as well?
Maybe there's a better fix for this🤔
Maybe there's some subtle change in terms of how the code now locates matches for constructors somehow?
Maybe these:
Maybe this code causes the object to be released prematurely.
Maybe this is about #code export which is used in jiterp.
Maybe this is something that should be a proposed as an improvement for the Clone method.
Maybe this particular AxHost test needs to move into the other project?
Maybe we can have...
Maybe we should consider something similar for Android?
MCT TouchBehaviour leads to undesirable behavioral changes
Meanwhile I figured we might want to add a few more flags (e.g.
Medium.
MEF 1 also appears to ignore inherited attributes.
MEF 2 also ignores inherited attributes.
MemberNotNullWhen
Merely taht we don't need this property.
Merge conflicts should be fixed now.
Merging this would break code fixes that are making changes that we don't support....but those might already be broken.
Metadata has the problem still though.
Method:
Micro-benchmark numbers for affected methods and also how often are the affected methods called in real-world.
Microsoft historically has been very careful of unnecessary change so as not to break anything once a product is so old and widely used.
Microsoft prioritizes making our products accessible.
Microsoft.AspNetCore.App 8.0.0-alpha.1.23058.7 [G:\projects\zeh-winforms\.dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.JsonPatch -> D:\a\_work\1\s\artifacts\bin\Microsoft.AspNetCore.JsonPatch\Release\net8.0\Microsoft.AspNetCore.JsonPatch.dll
Microsoft.AspNetCore.SignalR.Client.SourceGenerator
Microsoft.AspNetCore.SignalR.Client.SourceGenerator.HubProxyAttributes.dll
Microsoft.Build.Framework looks rather old (16.10) and I think you could update to 17.8.3 and still maintain the same VS support (17.8) while getting greatly reduced dependencies.
Microsoft.Extensions.Caching.SqlServer -> D:\a\_work\1\s\artifacts\bin\Microsoft.Extensions.Caching.SqlServer\Release\net462\Microsoft.Extensions.Caching.SqlServer.dll
Microsoft.Extensions.Caching.SqlServer -> D:\a\_work\1\s\artifacts\bin\Microsoft.Extensions.Caching.SqlServer\Release\netstandard2.0\Microsoft.Extensions.Caching.SqlServer.dll
Microsoft.Extensions.Caching.StackExchangeRedis -> D:\a\_work\1\s\artifacts\bin\Microsoft.Extensions.Caching.StackExchangeRedis\Release\net462\Microsoft.Extensions.Caching.StackExchangeRedis.dll
Microsoft.NETCore.App 8.0.0-alpha.1.23057.5 [G:\projects\zeh-winforms\.dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 8.0.0-alpha.1.23058.2 [G:\projects\zeh-winforms\.dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 8.0.0-alpha.1.23079.4 [G:\projects\zeh-winforms\.dotnet\shared\Microsoft.NETCore.App]
Microsoft.WindowsDesktop.App 8.0.0-alpha.1.23057.1 [G:\projects\zeh-winforms\.dotnet\shared\Microsoft.WindowsDesktop.App]
Middling
Might also be useful elsewhere.
Might also fix this but I haven't tested android: #url
Might be useful to document that.
Might be worth adding some asserts in the GC to check the size of the list?
Might have to settle with the fact that maybe the test I changed is now also one of the flaky ones as well.
might make sense to reference that page\section as the source of truth
Migrate DWrite FontCollectionLoader to managed.
Migrate part of DWriteTypeConverter to managed.
Migration of Compatibility.Core platform-specific unit tests to device tests.
MilCodeGen has also been adjusted to support this.
Minimal benchmark code
Minimal.
Minimum.
Minor Performance Optimization
Minor spelling and grammar errors were fixed where they were most obvious.
Mirrors #10289
Missing symbols for System.Diagnostics.EventLog.Messages.dll.
Missing things:
Mixed diffs are expected.
Modified DatePropertyChanged method to use DateChanged Event instead of DateSelected Event
Modified SyntaxGenerator.cs : Added missing interface modifiers #66387
Modified the #code method to include a null check for the #code parameter.
Modified the code to trigger Navigating only if a new tab is selected.
Modified the item position calculation to ensure proper scrolling behavior.
Modify the previous code and upload it again.
modifying existing controls the developer needs to run the Accessibility Insights
Modifying ListView.HasUnevenRows has no effect on UI.
Mono changes look good to me.
Mono's unwinder doesn't support unwind ops for XMM registers.
more aggressive asserts on refcounteddisposable.
More aggressively track and dispose PreviewWorkspace instances.
More changes in capabilities to reduce Appium timeouts.
More context: The fix could be done by disposing the #code instantly and wrapping it in a new instance so it's cleared from the #code of #code but I think it's nice to tie the lifetime together.
More detailed GC stress logs can be enabled by changing the sources (as before).
More details are in the commit message where this was done.
More info: (#url
More tests comment out here #url
More things to think about:
Most changes are automated using the IDE
Most important for the person who gets limited data per day.
Most likely you have other options.
Most of the tables now don't have the warning about a missing primary key:
Most of what is described below when #code on Unixes refers to the CoreCLR implementation.
Most people don't stream large data.
Most translations are just an extension of the current string parameter version - just match the right method and handle the char version with the right type mapping.
Motivation: Improve the responsiveness of Roslyn-based analysis and transformation tools
Move #code to #code.
Move SQLite functionality to the features layer
Move static members to another type is no longer suggested for a top-level statement.
Moved the respective tests to the new test classes.
Moved the test to the common tests so it's run by IIS as well and added a scenario where 1 of the applications restarts but the others don't.
MoveToNamespace: The error icon appears in two places now?
Moving back to draft
Moving CoreCLR to use the same code is a non-goal at present and without understanding the impact to debugging I would push back on that effort.
Moving out-of-process means the 64-bit address space can be leveraged when necessary.
Moving PR to draft for now (PR is old and CI was not green).
Moving PR to draft state to make room in our review queue.
Moving that check into the function directly simplifies the code and decouples the types just a little bit.
Moving the app between the two screens.
Moving this back to draft as we want to do some more work in this.
Moving this to draft for now
Moving to Backlog due to inactivity
Moving to Backlog due to inactivity.
Moving to blocked as we need to find someone to help with this PR and at the moment it doesn't fit into our schedule.
moving to draft as OP has not moved on this.
MOving to draft because of no movement.
Moving to draft.
Mozilla #url
msbuild and SDK path instead of repo customization.
Much of the verification logic was written with only #code in mind.
Multiple #code with identical #code values causes inconsistent behavior.
My apologies if I'm out of line.
My apologies with not responding promptly.
My argument is that that shouldn't be necessary.
My bad.
My change was to pass in the #code value to the exception so we could see what it was.
My changes are in 2 commits the first commit is automated changes using regexes and the second commit is manual changes where the comment is outdated or formatted differently than the parameter name.
My concern for always completing on #code for #code is the following.
My concerns are:
My current plan would be to run this test for SQL Server both normally and forcing a lower compatibility version for these tests (following the model of PrimitiveCollectionsQueryOldSqlServerTest).
My current understanding is that I should figure this out and properly implement it.
My demo code: #url
My feeling was that this will generate relatively little clutter for consumers if we have to keep producing it forever after it becomes obsolete.
My goal would be to make it op-in feature like we did for managed NTLM.
My gut tells me this should be a slam dunk win.
My initial impression is that I don't know that the compiler layer needs or wants to be aware of canonical representation.
My issues created for other MS repos (eg.
My main concern with such switch would be how to ensure it will not break in the next NET9 release...
My main thoughts are that I would drive this through specific problems we are solving.
My meta concern is that there's a few areas where i think this is actually a step back.
My only ask would be logistical to isolate this insertion to identify the before and after to ensure this resolves the temporary exception.
My options for continuing this are:
My plan is to help tackle the remaining dark mode help wanted issues if this approach is acceptable.
My point is the XAML services already correctly recognize these types as collections.
My PR has many tests that you can use.
My preference is that we also rename the types here.
My preference is to not go this route.
My question is if you want this PR to address
My speedscope results looked garbled and I couldn't get much knowledge out of PerfView except to see that there were tons and tons of threads.
My suggestion is that the fix should work for all these cases.
My test case looks like
My test code:
My test rig added #url; at the current time I believe I was wrong about SE.Redis having a potential out-of-order glitch; neither aggressive testing nor code inspection have supported that idea.
My theory is that the PAC should not be enabled for macOS arm64 unless we change the target to arm64e where it might work then.
My tone is perhaps sharper than intended but take it more as shock (at what's going on and the amount of PRs like this being opened) than pure criticism.
My understanding is lightbulb has the ability to show up even when not all the SuggestedActions are ready if we are in async mode.
My understanding is that if the serialized output length is less than or equal to the non-expandable stream capacity then serialization should not fail.
My vote is to do it now.
My worry if we try to automatically migrate tags is that the scope lifetimes may not match up and you could have weird results.
N/A
N|0|1|**0**
NA.
Named mutexes are have a functional implementation on Unixes in CoreCLR.
nameof instead of string
nameof instead of strings
Namespace binding is not intended from the spec and will not be covered in this fix.
NameStyleFixerProvider is used both in CodeStyle & workspace
NativeAOT and Mono on Unixes use an incomplete/temporary implementation where named mutexes are just process-local mutexes stored in a dictionary keyed by the name and can't be used to synchronize between processes.
NativeAOT/R2R is not support yet (due to fat function pointers).
navigation
NB: I made a benchmark for these configurations to help us
Need things under a debugger to confirm or @github may know off the top.
Need to add tests with different naming rules.
need to be evaluated.
Need to check if the tests now pass.
Need to check whether CI works since large dumps are generated.
Need to re-run after #url
Need to rerun tests
needed for testing some crossgen change
Needs rebase and add a test
Needs tests and manual regression validation
Needs to target net9.0
Neither #code or #code are directly exposed by the ucrt.dll.
Never heard about the LiveShapingList (besides seeing the name in the code).
Nevermind.
new and the loop itself; without combining geometries
New API:
New codegen:
New members on #code:
new sql
New unit tests were added.
New version: #url
newlines are part of leading trivia instead of trailing trivia.
newShell.Items.Add(homeShellContent);
newShell.Items.Add(tabBar);
Next consistent issue is
Next interaction with #code will be using #code (request-lifetime) instead of static #code.
Next PRs
Next steps are on your side.
nice!
Nit: It is a pinned heap handle.
No
no asm diffs expected
No breaking changes are expected.
No changes to public API.
No consistency.
No diffs found.
no direct side-by-side benchmark (what's a good way to arrange that here?
No failures in System.Diagnostic.Process.Tests (but lots of skip)
No it is not.
No need to hardcode the rule.
No opposition from me if you want to make this one specific to DataProtection :)
No other code interacts with buffer cache
No problem there.
No qualms with this.
No regression
No regressions found in private PRs
No risk
No specific plan.
No spmi #url and only 1 method affected in jit-diffs.
No visual preview in designer and error(s) that are not actual errors in code editor.
no worries
No worries or rush.
No.
non-column (parameter/literal) JSON document should be of type string and the mapping should be of type #code
Non-seekable handles are limited compared to seekable handles.
non-selection based refactorings.
none
None actually.
None of the properties are encapsulated and can be publicly set.
None--improved maintainability only.
None.
nop this is still active from the owner/op point of view
Normal.
Normally this should fit but I can't confirm this 100%.
not be exported by the linker.
Not currently planning to actually merge this.
not enough test data)
Not even in C code bases you'd see auto formatters mostly to wrap 1 per line.
not for review.
Not having it in the first place makes life significantly more difficult for users of this template on non Visual Studio environments.
not major issue.
Not needed.
Not obvious at a glance why this reference exists.
Not quite I followed the benefit there?
Not quite sure why this needs to be broken out.
Not really including a benchmark as its either 0 bytes allocated or the same amount when both strings need to be materialized.
Not removing the outliers: #code--outliers DontRemove#code.
Not set
not signing off yet as i would like to do at least more pass after some cleanup has happened.
Not sure how I feel about this:
Not sure if I have same problem since a single bracket or space works fine when escaped.
Not sure if it is going to break anything elsewhere in the cases where it did get set properly but worth seeing what happens in the pipelines.
Not sure if it is needed but I see no problem in other people taking over this contribution.
Not sure if it's correct to mark them static?
Not sure if not storing it in #code at all and then lazily fetching it would work.
Not sure if the approach I took is hacky.
Not sure if the failing test is related.
Not sure if the test failure are because of this PR.
Not sure if there is a testsuite or performance benchmark that I can run that's relevant to this.
Not sure if this is the right fix.
Not sure if those other async paths in the C# one are worth fixing or not.)
not sure if you had a chance to look at how the segment size is set when #code is set but seg sizes are computed by #code which calls this -
Not sure it's worth it.
Not sure what the relevance of #10910 is here...
Not sure what to immediately make of it other than the first behavior seems like the expected
Not sure what's up with roslyn-ci here.
Not sure where I'd put that.
Not taking this fix leaves the read-only properties broken.
Not taking this fix makes it impossible to use WPF in namespace hierarchies where a subnamespace name is also a root namespace name.
Note #urlis not shown in netcoreapp3.1.
Note that #code will restore a property to its default value.
Note that currently the test have not yet been extended to check both the #code and the relational-null-replacement code paths.
Note that I am not planning to address the selective #code lines as part of this pull request.
Note that I haven't changed every instance of #code to #code.
Note that locking is handled by the shared code so there is no need to do so when adding the WPF specific types.
Note that much of the overhead in this implementation stems from the use of #code here:
Note that none of these will be affected now that #code parsing has been updated to ignore text that was previously a comment.
Note that other frameworks (e.g.
Note that the added test tests referencing in-memory assemblies from a script.
Note that the light bulb may not be visible at fading locations outside the actual diagnostic span; this is acceptable since that is the way the engine is currently designed.
Note that the Network Framework can also do Quic so this may be option for use in the distant future.
Note that the updated baselines point to a missing #code simplification (#code -> #code).
Note that the VB implementation of this feature already contained a fast-path check which is more permissive than the one being added for C#.
note that these converters probably aren't used in Release mode with XamlC enabled
Note that these will fail until integration test machines are upgrade to p3 (some product bug fixes are needed).
Note that we don't need to resolve to a non-method extension member during conversions.
Note that we seem to lose the optimization for that depends on a literal empty string constant.
Note that we were doing #code instead of #code though.
Note that when #code is also used with #code it will just bail if there's no existing cert.
Note the S.D.PerformanceCounter and S.D.EventLog packages get a new package dependency to #code since that is where the extension methods are defined that are used to set the security descriptor.
Note this is a refactoring so user can decide where they want to apply it.
Note to self (just in case I forgot what I have in mind :smile:):
Note to self: Latest attempt at ~~#url~~ #url
Note we're still going to erroneously assign all the syntax walk time to which ever generator gets there first.
Note: Android AOT Sdk Targets need to be updated before the .nettrace/.mibc profile can be consumed to produce a Profile AOT Compiled app.
Note: i have a feature flag here so we can control this through control tower if we need to.
Note: if you run into issues #url is good for help (often 'live').
Note: in addition to doing that updating VS's #url so that it takes into account current user selection instead of just caret position would also be beneficial.
Note: starting the executable produced by #url
Note: switch to using #url as the interception method when that's available.
Note: there are some cases where a one-word keyword or term is not translated on purpose.
Note: this applies to fixes that are *visible*.
Note: this code will have no effect when actually running OOP:
Note: this is based on #url
Note: this isn't speculative.
Note: this only covers #code at the moment.
Note: this works well because the average % of nodes siblings which were also nodes was ~70%
Note: we have more than just ui here.
note: you can put this in a feature branch if you want.
note: you don't need to test the analyzer in isolation.
Notes:
Nothing has changed in this area.
Nothing related in failing tests.
Notice how many loop blocks on the hot path have weights that suggest they run less than one time per method execution on average.
Notice that #code lines.
Notice that can see correctly the track using the light theme.
Notice to .NET Foundation.
Noticed this was causing some missing folding with static fields in #99011.
Noticed this was skipped yesterday :)
Now every test is passing locally.
Now I don't have to #code until a new conflict occurs.
Now I wonder if we should undo #url and fix that some other way.
Now I'm getting an InvalidOperationException from the editor for some line endings:
Now I've understood from previous experience with making PRs in dotnet/roslyn that force-pushes are not appreciated.
Now if only CreateMeasureSpec wasn't internal this would be easier to use in a custom handler without reflection or reimplementation.
Now it is happening!!!
Now it is right.
Now it works even when users change their theme in the runtime
Now just the matter of where should I do this?
Now no diffs locally.
now possible from a fresh clone.
Now the question is...
Now we are close to final stage of .NET 9 and have really no time to include this.
Now we'll fail loudly rather than fail silently.
Now what #17303 observes is that the mapping is not always perfect.
Nowadays the distinction between some
NRE might happen when typing using rename.
nudge 2
nudge 3
Nudge...
NuGet added a new feature that automatically prunes package and project references that are provided by the shared framework that is targeted.
nuget.
nullable enable some files
NullReference exception is thrown when disabling IsGrouped at runtime.
Observed while investigating customer issue with @github.
Obviously it would still be desirable to (also) fix #34001
Obviously not.
of a *generic* struct type
of a configurable set of files (like the perf of analyzing the syntax of #url)
Of course anyone else is welcome to review as well.
Of course if we wanted to keep complexity low and didn't mind extra unused memory for small group sizes then we could just bump the initial array size to #code in a single-character code change which according to the benchmarks above improves perf for the GroupBy with buckets of length #code and doesn't slow down buckets of length #code besides allocating extra memory.
Of note: the file location is odd compared to where the other tests find json files.
of struct type
Official build: #url
oh alright I didn't see that sorry.
Oh and this function of 22 lines?
Oh no...
Oh this is still in the process 😂
Oh yeah don't worry was just wondering!
Oh yeah that makes sense.
Oh: I guess I don't _like_ RQ names in that I wish I wasn't suggesting them....but the overload problem makes it somewhat a non-starter I'm afraid.
Ohh I just bumped into a scaling issue with ListView/CollectionView1 and CollectionView1 after changes in this PR:
Ok we need to build also macOS in that pipeline
Ok.
Old results
On adhering to local style - please let me know if a different naming or additional comments are required.
On Android the SearchHandler SearchIcon and ClearIcon are not visible unless explicit specified.
On ARM64 we need to run this after morph because so we catch any #code nodes that might've been introduced by conversions such as the #code to #code.
On iOS both icons are visible if not specified.
On linux I checked against strace.
On my laptop (with the default config) max fd is #code (returned by #code).
On my machine the provided initial input window and update size (for #code) was 'just' enough to not to run into this state but on different CPU adjusting these values might be necessary.
On non-PAC hardware these instructions will be NOPs.
On non-PAC hardware these run fine).
On one hand I can imagine this is fixing some issues where people are using disposed workspaces; on the other hand I can imagine this breaking things because a component that subscribed to WorkspaceChanged might not see the final set of events and that could be non-deterministic.
On riscv64 It was used to probe stack or let's say it was supposed to be used for that.
On rv64 we are doing that a little bit different.
On Splashscreen (FYI: can even be a messagebox) both (OnStartup / Activated) is **not** called.
On SunOS et al.
On the other hand iOS's shell doesn't even allow having long texts and it displays them as 'back' labels.
On these items:
On vacation.
On Win x64 XMM6 - XMM15 are callee saved and needs to be restored by unwinder when changed.
On windows I checked against kernel32 GetCurrentThreadStackLimits.
Once a custom BackgroundColor has been set its not possible to return to the default color (#code).
Once I have opportunity I will try to record something though
Once PAC is fully enabled then we should consider BTI in a following .NET release.
Once Seattle stops panicing over a dusting of snow I'll chat further with @github and @github.
Once solution is to cap the size of images being loaded.
Once that is adjusted do you believe this PR is ready to go?
Once we fully switch over to the new integration test framework we can hopefully delete this entirely.
OnDoubleTap
One can see it here:
One change that had to be made for Inline Array to work is to remove the #code method from Grouping.
One could argue that we should set TargetsLinuxBionic=true on Android but that'd go against how we used that name elsewhere.
One could get a reasonable indication by looking at sharplab.io.
One example being extension developers need a way to access Roslyn in a performant way.
One general note from reviewing is that we probably need handling for allocation failure in the interpreter.
One implementation would be backed by the real #code APIs.
One more from #110845.
One of the known case of overlapping commit is for mark arrays.
One of the major issues that everyone is always talking about is performance.
One of the optimizations:
One reason could be that Azure Redis is still supporting it for existing customers.
One thing I noticed while scrolling:
One thing i would like feedback about specifically is the signature of #code in the new visitors.
One thing that comes to mind is expanding the checks as QMARKs during import.
One thing we'd need to fiure out is how to prevent recursion.
One thought may be whether there are any cases where a user may want a non-nullable datetime picker control...
One to get all the assemblies to test based on the filters provided.
One way around this is to rewrite the code as follows:
One where the message is logged (open connection) and another that verifies it isn't (closed connection)
One would think that compiler could figure out that #code is readonly...
OnKeyUp captures keypresses
OnKeyUp does NOT capture keypresses
Only customers using PerMonitorV2 and monitors with at least two different DPIs are affected.
Only error that I can capture is this: pixel_5_-_api_34	Error	26227	nyname.testmaui	Invalid resource ID 0x00000000.
Only fix all symbols for a rule.
Only heavy thing left is the #code
Only places which need to extract information from the URI should retrieve the #code and must handle failures.
Only question is what language version to require.
Only the latest commit is relevant.
Only the second and third pages have the FontImageSource color defined.
Only used empirical results on local machine (using a samba ad and not a windows server) to check how to interpret the string but should investigate the cause.
OnTap
ooh my pull request was not merged yet !
Ooops last time I checked no one was assigned to the issue...
Open questions are:
Open the PR with the content below.
OpenApiDocumentsDirectory = ../foo/#codePath.GetFullPath#code <rooted Path>\foo\`
Opened #70225 for the #code behavior
Opened #url
Opened #url for the docs issue.
Opened #url to track this issue.
Opening an issue in a bit.
Opening this PR to investigate (and hopefully fix) #url
Optimizations for handlers or formattable strings have too many things to be determined.
Optimized the IsWhiteSpace method to utilize SearchValues.WhiteSpaces.
Optimizes building of #code and also some work in #code.
Optimizes conversion of #code to #code.
Optimizes parsing of colors and brushes from string and also conversion of colors to string.
Optimizes retrievals of subscripts/type names from generic types and also its serialization back to string.
option changes).
Options for #code were copied for #code codepath.
Options therefore are
Options:
or
Or @github can potentially look this week.
or are you trying to pick all details rather than trying to understand the problem it is addressing?
Or at least verify there are tests for this case.
Or better if you do this on iOS do you see performance wins to?
or binding
Or can we get the best of both worlds somehow?
Or did it violate that?
Or do we have some better way to structure the code?
Or do you mean something else ?
Or do you still have to discuss the spec?
Or does every specific generic instantiation of a given interface have its own slot in every class's vtable?
or I'll just have to take another way
Or if Firefox or Safari implemented.
Or if I factor my code so that the recursive call is in a callee...?
Or if in a non-recursive method we inline two different recursive callees?
Or if not an event then maybe it could be fired after some delay from some of the last methods executed on startup?
or if you are using SSH
Or in case of #code -> #code it seems to be even more unsafe now?
Or introduce JIT intrinsics for raw length and raw array data getters.
Or is it just attempt to cleanup code that you noticed as unnecessary?
Or is it OK and people need to be aware of the change?
Or is that a separate PR?
Or is the concern that someone may want to dial back the retries via config and not be able to?
Or is this possible leak in bytes accounting (e.g.
Or maybe (1.2):
Or maybe if Chrome actually did start blocking cookies by default.
or maybe we can just doc.
Or maybe we need to run follow up refactoring that groups data-backed members together.
or more/fewer CSEs.
or not to change the #code files ...
Or only in #code?
Or publish app with self-contained to test?
Or the less consistent option to:
Or there is something fundamentally different between Linux and MacOS when building crossgen2 (ie exceptions being handled during the build)
Or were these mostly just those two basic cases?
or whether it is already fixing the issue.
Or who could we ask?
Or would this additional property also be useful in that scenario?
Order of imports:
order was sfx-ref -> (sfx-src & sfx-gen) so the shared framework
Origin: #url
Original method compares the visual root that's found using the following:
Original name idea:
original work.
Originality of Work.
Originally reported in Xamarin repo here: #url
Originally started for #34963 but after #34982 was created extended that work to more cases
OS Name:     Windows
OS Platform: Windows
OS Version:  10.0.19045
Other
Other architectures found:
Other associated PRs
Other back-compat implications of extending enum might apply.
Other loggers can handle that increased payload.
Other options?
Other Rights Reserved.
other) -> bool' is not part of the declared public API (#url
Others are hitting this as well in different repos.
otherwise designated in writing by You as “Not a Submission.”
Otherwise everything else should be a new feature.
Otherwise I suspect we'll just be resolving conflicts repeatedly.
Otherwise it will have to wait until next month.
Our code never references #code.
Our goal is for the bulk of this code to land in a non-VisualStudio layer and still work.
Our guess is that it won't ever fire without this PR.
Out of curiosity I also attempted to implement an alternative algorithm which allocates no extra memory allocations by loading temporary data into a buffer (SegmentedArrayBuilder) to calculate the correct group sizes.
Out of scope
Output
Outside that we use the banned API analyzer to remove #code from the code base.
Overall 1000% for this.
Overall I like the idea of changing the classification for just the suffix.
overall LGTM.
Overall though I love the approach to maintain compat -- simply treating this as a break would have been far too icky for these scenarios.
Overloads are provided that support automatically releasing unused values.
overridden by values set within visual states each time the switcher changed
Override CanApplyChange
Override CanApplyParseOptionChange/CanApplyCompilationOptions change.
Override the ViewWillTransitionToSize method to update the Tapoffview's Frame on rotation detection.
P.S.
Package Name:
Parallelizing within assemblies gave us smaller chunks to work with and let us end up with a test run time which was lower than the assembly with the longest time.
Parameter validation can be enabled at the global level via a #code invocation on an #code instance.
Parameters are considered validatable if they contain #code on them.
Parse diagnostics are virtually free.
Parsing optimization for #code and its conversion from/to string.
Part of #107749.
Part of #18840
Part of #31376
Part of #53654
Part of #77904
Part of #77959 except #code
Part of #url
Part of #url cc @github/samsung
Part of the speed up comes from the fact the new #code doesn't check the thread in #code ctor as it makes no sense (further backed with all the code comments) and it can therefore get inlined.
Partial fix for issue #14239
Partial fix for issue #17571
Partial implementation of #url (requesting review of general approach before implementing other types since this is mostly copy & paste).
Passing #code would explicitly skip the #code line in pgosupport.cmake since we currently condition LTO on PGO.
passing a non-expandable #code to a #code which is incorrect regardless of what inputs are being passed to the writer.
Passing comma-separated list of values to the header was treated differently by controller action and Minimal API endpoint during binding to array.
Patent License.
People know that major .NET version releases break things...
Per Jeremy's words
Performance notes:
Performance results are similar.
Performance trace and heap dumps are linked in the feedback ticket.
PerfView support is #url
Perhaps make a new issue for it or comment it in #22790?
Perhaps my suggestion of using the TextContainerInset is incorrect or there is a small issue somewhere with this usage as Shane pointed out that bouncing behavior looks incorrect
Perhaps open an issue?
Perhaps should wait for the resolution before merging this.
Perhaps someone from @github/roslyn-compiler will be able to pick this up before then.
Perhaps something is still missing compared to Xamarin?
Perhaps the biggest issue that would concern me is that depending on the size of the existing collection vs.
Perhaps the caller would be required to use #code on the lambda.
Perhaps this has nothing to do with this PR but I figured that I would let you know anyway.
Perhaps using one benchmark class to run three against three different input types could help here?
Perhaps we could request this feature from github instead
Perhaps we could talk through it in an upcoming compiler team meeting.
Perhaps we should have some rules about what is expected going forward.
Pick your battles.
Ping @github
ping @github @github - any additional comments here?
Ping @github for a small doc PR.
Ping @github for review and opinions on the prefix question.
Ping @github.
Ping me on Monday to review!
Ping!
Ping.
Pinging @github and @github to understand if this is logically the right change.
Pinging @github on this as well.
Pinning is similar.
Plainly change priority based on their diagnostic's severity (1.1):
Planned to take a look this week.
Platform: I now can't see our dialogs in the designers.
Platform: ListViews backgrounds don't stand apart from the window brush color.
Platform: LiveTextBlock / TextBlock do not automatically set foreground (worked around)
Platform: The themed ListView template leaves a bottom border visible
Platform/UX: ComboBoxes aren't tall enough IMO.
Platform/UX: ListViews with GridViews are not styled correctly (e.g.
PlatformView.ClipBounds = clipRect;
Please add a test to #code for C# and VB.
Please add specific tests to #code for C# and VB testing #code and #code with and without the new option.
Please add unit tests
Please check the conditions to see if you hit lines 171 and 173 (_drawerToggleVisible = ...)
Please check the video below.
Please check whether the PR fulfills these requirements
Please consider people with thousands of UI tests coded against the NET7/NET6 automation tree having to redo them all because of this breaking change in NET8.
please consider the following example
Please contact for getting access to the superpmi logs.
Please correct me if I'm wrong here.
Please do not attempt this.
please do not merge.
Please do not review this.
Please elaborate if my answer doesn't help.
Please find my reply #url.
Please find the details below.
Please Fix It.
Please give it a look!
Please have a look at that.
Please hold off reviewing for now.
Please ignore formatting for now.
Please let me know if I can help in any way.
Please let me know if I missed something.
Please let me know if there's a better way to deal with this case.
Please let me know if there's something else needed
Please let me know if you have any concerns
Please let me know which one you find more appealing 👍
Please let us know if there's any way we can assist with this PR.
Please let us know if you have any further concerns.
Please make sure the #code do not contain the #code.
Please merge this change by 4pm PT if you'd like it included in that release version.
Please note #code on CV2 #code (as item size detection was not implemented).
Please note that #url is a prerequisite for this work.
Please ping @github/roslyn-compiler when they are fixed and we will review.
Please ping on this PR around that time to remind us.
Please ping us when ready for another look.
Please ping when ready for another look.
Please provide detailed instruction.
Please provide that graph.
Please re-activate and ping when ready for another look.
Please reabse as well.
Please reactivate and ping once the API proposal was approved.
Please refer to the attached  video showing the difference between the button click and device theme change in terms of how OnConfigurationChanged behaves in Android Views.
Please refer to the PR link below for reference.
Please review it and share your concerns.
Please review.
Please see #27912.
Please share your suggestions on this change.
Please take a look when you get sometime
Please undraft and ping when ready for another look
Please undraft when ready for another look.
Please use the PR template that includes testing and risk assessment.
Please wait a moment now.
PLUS adding a project/license URL seems useful.
Plus I need to fix up #code.
Plus some checks like gcinfodecoder.cpp.
Plus there's of course runtime coding style which I can't really seem to have violated.
Plus using the list-specific iterator instead of IEnumerable-T/IEnumerator-T.
Pointer was primarily meant for hardware input device interactions (mice).
Pointers can be as small as 4k on the supported platforms.
Port #57883 to 17.0 LTS
Port DataGridViewColumnCollectionEditor
Port DataGridViewColumnDataPropertyNameEditor and DataMemberListEditor
Port of #58720 to 17.1
Port of a test fix from 7.0.
port version have bug that crash sdk randomly).
Ports #url to 17.13.
Possible issues with this approach:
Possible.
Possibly a bit of perf and a clear directive that #code and all its methods are not adjusting the state of the #code.
Possibly a shared implementation should be used for these.
Possibly spawn a thread which triggers the databind update?
Posting this early in the process to bring up issues with the platform & UX team as they arise.
Potentially can introduce some new bugs if RCW written incorrectly.
Power Tools is my default way of using EF Core so it would be great to see this merged in there too.
PowerShell was a use case for user-scoped mutexes.
PR
PR #url is out and should get merged for rc2.
PR adds ricv64 and sync condition.
PR also adds support to restore those register when unwinding through a lmf.
PR build
PR description updated now.
PR for testing latest Windows SDK projection package
PR is just for testing purposes at this point.
Prefer a pattern like #code instead.
Preferably sooner than later?
Prefix OptionProvider interface names with #code.
Prefixing it 'reserves' it in some sense that it shouldn't be used.
PresentationFramework v3 from NetFX has a bit different code but also buggy.
presumably many blocks will end up immediately post dominated by the pseudo-exit which while true is also not particularly enlightening.
Presumably the overhead is more visible on smaller inputs and when the input is diverse (so PGO can't help).
Presumably this shim would simply be removed along with the existing ones whenever the F# VS integration switched over to using LSP.
Presumably you can run a local collection of a SPMI collection where you do all the calls to create contexts for them
presumably you've run this with #code which validates the results against #code?
Pretty much follows #7235
Pretty sure its just the cast itself and doesn't matter what function its used in.
Pretty sure this PR will be on hold for yet another several months before it finally gets reviewed and merged just like any other community PR which touches some fundamental things.
Prevents silent test failures when a fatal error is reported but swallowed.
Preview:
Previous commit was #url
Previous layout design relied on the AutoScaling ratios to maintain the current state as related to the original designed sizes.
Previous:
Previously having empty selection caused refactorings to have
Previously there were no test cases for this code path.
Previously we always reset the #code when create the ViewModel when create #code and #code  dialog.
previously we observed regression in heap size due to regions not being aggressively demoted.
Previously we would elide the cast only if source and target reg were the same.
Previously you were just able to create such WriteableBitmap but unable to #code to the bottom-right corner or #code it.
Probably a few days until we get to this.
Probably need some #codes.
Probably should be merged after #url is merged?
probably something is broken
Probably we can make use of this file: #url
Probably worth running jitstress.
Probably.
Probably/maybe related: #10040
Problem was that in EF9 we moved some optimizations from sql nullability processor to SqlExpressionFactory (so that we optimize things early).
Problem was that when converting primitive collection to inline query root we were not matching the expression if it was constant wrapped in convert.
Problem with File.Exists is that we still may not be able to read the file due to access issues.
process later expects more available memory) and #code on Linux will probably fail anyway.
procfs can be unavailable on linux.
procfs is _different_; provides binary interface instead of text-based one.
procfs is also optional in FreeBSD.
Product changes ready to review.
Project system operations - we don't want to wait and block on the client side for the entire project to load.
project-system where we know this is already a problem).
Project.
Proposed change to line 154
Proposed rename came out of need for clarity in name in a recent perf EAR.
protected override void OnCreate(Bundle?
Prototype for #url
Provide a way to disable the maui usings when embedding to avoid many ambiguities.
Provide details backing up your assessment.
Provide the PR or commit if known.]
Provides an interface that allows developers to perform functionality on when the user selects a date rather than only when the date is changed
PS: feel free to call the bot yourself if needed
PS: I was reading a LW post and realized it was from you.
PS: this PR needs #url to handle #code like patterns.
PS: with CPM that is not hard at all.
PS.
PTAL @github
PTAL.
Public API fix should be verifiable locally with #code.
public async Task AppearingFireOnMultipleModals()
Public machines are already considered exposed and vulnerable.
public static boolean isImageViewCenterCrop(@github ImageView imageView) {
Publish the assets from dotnet/runtime using the standard Arcade publish tooling.
Publish your project with self contained
Pull is currently a heavy work-in-progress: It's also my first pr to Roslyn so I'll have to take some time to figure out how to implement everything properly.
Pull request dotnet/runtime#111610
PullToRefresh & item selection when listView is not Enabled fix [iOS]
purpose: improved performance in #code
put the bool into readonly memory asap after startup
Pythagora's Algorithm for Model with converging meridians
Q1) Does the new code belong to #code class?
Query sql generator: Ouputs an #code statement when processing a #code
Question for the maintainers:
Quick fix from triage.
Quick Info only shows the first one.
Quite possibly.
Quoting #url
Ran out of bandwidth to figure out the best way to implement improvements here that are consistent across our internal collections.
Razor PR - #url
razor team own experience over razor file and what file they want to show diagnostics.
Re
Re №1: Could you please describe how attack surface of the application is increased if pool buffers are used?
Re the CreateBatch: that shouldn't really matter here.
Re-opening #59601
Re: 9868e7316bfc0107fe6495d821af2cf9614bb784
Re: modelling EH properly.
Reacted to gradle breaking changes: new maven plugin and DSL changes
Read binary psinfo for System.Diagnostic.Process on SunOS (Solaris or illumos).
Reading these back initially makes it more likely that the backend will be able to substitute directly for registers.
ReadOnlyCollection does the same thing as PartialList but it's more optimized due to the fact that it does not support wrapping a range of a list and instead just forwards the read-only call to the wrapped list.
really?
Reason this hasn't been found in the >5 years since the bug was introduced is that it requires using #code + #code before flushing the headers and using a HEAD request at the same time.
Rebased and added a revert commit (so it stays in the GitHub history)
Rebased and re-uploaded the screenshot.
Rebased and squashed
Rebased and tested the test locally:
Rebased onto main
rebased to fix conflicts
Rebased to main with the new UITest structure!
Rebased to resolve conflicts
Rebased to solve conflicts and keep an eye on SQL Server updates in CI 😉
Recorded in release configuration on physical android device - Samsung Galaxy A50.
Redirects 750MB (about 50%) of the large object heap allocations seen in #url to the normal object allocator.
Redoing layout is not something we're going to get to for a while.
Reduced memory usage/GC pressure.
Refactored Regex for performance and security
Refactorings that require Visual Studio services always have the option of interacting directly with the Light Bulb APIs instead of operating as a CodeRefactoringProvider.
Reference - #url
Reference #url
Reference #url and #url
reference projects first had to be built and only then the sfx src
Reference:
Reference: #url
References to “employer” in this Agreement include Your employer or anyone else
Refers to: src/Compilers/Core/Portable/CommandLine/SarifDiagnosticComparer.cs:71 in 2cfc216.
Refers to: src/Compilers/CSharp/Portable/Binder/Binder_Symbols.cs:1221 in 7a55831.
Refers to: src/Compilers/CSharp/Portable/Parser/LanguageParser.cs:5067 in 3d427cd.
Refers to: src/Compilers/CSharp/Portable/SymbolDisplay/SymbolDisplayVisitor.Members.cs:957 in f50d787.
Refers to: src/Compilers/CSharp/Portable/Symbols/Source/SourceAssemblySymbol.cs:1565 in 920312c.
Refers to: src/Compilers/CSharp/Portable/Symbols/Source/SourceEnumConstantSymbol.cs:32 in d6f2f92.
Refers to: src/Compilers/CSharp/Test/Emit3/Semantics/PatternMatchingTests4.cs:7842 in 5b28fa5.
Regarding #code since it's an extension for android only I think there is a possibility to achieve correct result much faster using native APIs like #code but since we support all possible C# formats and (I think) C# date formats are not compatible with Java formats making it work might not be worth it?
Regarding the reported issue: The user highlighted that clicking on an already selected tab triggers the  **Navigating** event with the same navigation parameters.
regions recovered almost all of the regression with a bit of sacrifice in throughput (by design since we now have to process more in ephemeral GCs).
Register #code in #code method.
Register by IServiceCollection :
Register the handler in MauiProgram.cs:
registered at [HKLM\SOFTWARE\dotnet\Setup\InstalledVersions\x86\InstallLocation]
Regression introduced in .NET9.
regressions.
Regular LINQ queries (over IEnumerable) are unaffected in any way.
Regular testing.
Related
Related #12935
Related #2339
related #url
Related #url & #url
Related issue
Related to #20470 #20401
Related to #2337 and #2338
Related to #24730
Related to #29448 and #28905
Related to #43646
Related to #59287
Related to #59418
Related to #url
Related to dotnet/vscode-csharp#6148
Related to editorconfig/specification#23 and editorconfig/specification#31
Related:
Related: #35525
Related: #url
Relates to #26617 (#27364)
Relates to #70439.
Relates to #url
Relates to test plan #url
Relates to: #44140.
Relational already has this sorted out since practically v1
Relax the requirements for #code (this PR) and stop throwing for non-seekable files.
Release-build FAILED
Release-FX-tests FAILED
Relevant #url
Remaining failures all look like stack overflows -- there needs to be a per-instance size limit as well as a dynamic size limit.
Remaining slow things:
Remaining violations:
Remaining work:
Remarks:
Remember we're comparing
Remind me to look next Monday.
remote desktop.
Remove #code targets from projects where it doesn't provide any practical benefit.
remove entries or clear them completely).
Remove parens is very very different.
Remove some allocations and interface calls.
Remove the call to #code.
Remove usage of IGlobalOptionService from non-legacy code paths.
removed an arraylist
Removed ArrayList and HybridDictionary
Removed helpers for reference:
Removed unneeded casts.
Removes #code class that was solely used for #code purposes in #code to trigger generation for those generic types that were otherwise only defined on interfaces in #code (see comment).
Removes #code which was used in quite some places back in early WPF implementations in #code but now the only thing using it is #code and replaces it with #code.
Removes bunch of conditionals that evaluate always either #code or #code.
Removes DUCE.CopyBytes that was used to set struct fields.
Removes duplicate code to call #code.
Removes duplicated InterfaceInfos for base interfaces that come from another assembly.
Removes KnownColors static constructor and replaces it with uint parsing and calling Enum.IsDefined.
Removes RawArrayData and makes Array reflect the actual runtime layout instead.
Removes redundant type checks second-time around when copying pixels in #code.
Removes resources and XAML that are always going to be deleted.
Removes some unnecessary #code allocations when working with #code/#code (such as adding them to a #code or combining geometries which serializes them (#code array alloc) and when rendering #code.
Removes the #code exceptions from #code when the record count is not equal to 1.
Removes the feature flag.
Removes UIContext based workaround for #url
Removes unused interop definitions from PresentationFramework.
Removes warning suppressions with invalid target or scope.
Removes XamlTypeInvoker dead code.
Removing EditorFeatures dependencies from the Protocol unit tests.
Removing it completely makes the date range actually correct with what's passed through #code and in terms of performance:
Removing ns2.1 target from our libraries could pose a risk unless those other libraries make the same adjustment.
Removing RunTests would be a take back on developer work flow.
Removing the delayed dispatch fixes this particular test.
Removing this code improves both startup and runtime performance.
Rename behavior could be reversed back to sync mode by setting #code to #code.
Reopened this so the tests will run again
Reopening and retargeting.
Replace corrupt PR12221
Replace internal #code with generic #code
Replace: #code
Replaced #code with #code
replaced arraylist with generic list.
Replaces #code with #code fields for improved performance and increased type safety.
Replaces #code with List#code for increased type safety and slightly improved performance.
replaces #url
Replaces 4x #code collections with #code for improved performance and increased type safety.
Replaces boxing #code with generic #code and improves overall performance.
Replaces ReadOnlyCollection allocations with a shared singleton.
Replaces the use of Hand cursor with Arrow cursors as per the Windows 11 guidelines.
reply : #url
REPO: #url
Reported by the user in #url
Reported in #url
represent a difference.
Representations and Warranties.
repro sample in Sandbox project
repro samples from template #code and #code
Reproducer for the issue that caused us to revert the is-pattern temp optimization can be found in #69615.
Requesting another view from the ide side.
Requires API approval.
Rerun failed tests?
reset) suddenly and inadvertently wind up using the other.
Resolve #104511
Resolve #url
Resolve the few warnings that got emitted in ref projects when source-building the repository.
Resolved conflicts
Resolved merge conflicts 05
Resolved merge conflicts 06
Resolved merge conflicts 07
Resolved merge conflicts 10
Resolved merge conflicts 11
Resolved merge conflicts and part of review comments.
Resolves #url
Resolving long standing issues concerning #code and bindings.
Resolving the issue with partially committed files.
resources are sharing a single instance.
restart from main and force-push this branch.
Restore #code before returning from #code methods that modify the value.
Restructure DataObject and move to System.Private.Windows.Core assembly so that implementation can be shared with WPF as our implementations are largely similar.
Resulting value in #code would still have trailing backslash and break the command line (on Windows).
Results
Results from design meeting:
Results posted below.
results with 2.8.22
results:
Retarget this to main because 17.1 branch is not used and main is 17.1 now
Retargeted at main
retest windows_debug_vs-integration_prtest please
retest windows_release_vs-integration_prtest please
Retrieving a list of text segments would thus always box an instance of the #code struct.
return imageView.getScaleType() == ImageView.ScaleType.CENTER_CROP;
Return true to indicate exception is handled.
Returning to the previous page can only be done using the back **navigation** button.
ReverseEndianness(int):
ReverseEndianness(short):
Revert #url and fix #url
Reverting everything and only executing #code and #code on another thread after startup seems fine.
Reverting the whole thing might also not be so good.
Reverting to draft as there were a number of audit warnings.
Reverts commit #url
Reverts dotnet/roslyn#69038.
Reverts dotnet/roslyn#76736.
Reverts dotnet/roslyn#76747.
Reverts dotnet/roslyn#76768.
Reverts dotnet/roslyn#76835.
Reverts dotnet/roslyn#76865.
Reverts dotnet/roslyn#76876.
Review commit-by-commit may be beneficial.
Review commit-by-commit recommended
Rework MSFormatDateTime to use the isDate parameter to try and reproduce the prior .NET FW version behaviour that used the Win32 GetDateFormat & GetTimeFormat APIs to only output date or time parts.
Reworked #72257
Rewriting volatile-based implementations instead of #code also seems to work:
RID:         win10-x64
Right - to allow classification to use frozen partial when OOP is turned off I would need to move the WithFrozenPartial call into here #url which doesn't seem unreasonable
Right now creating this to ensure no functional/performance regressions in divisional tests before we flip the feature flag.
Right now the only way to set a ripple color for buttons is to use custom mappers or platform specific code.
Right now there's no way to use the code otherwise.
Right.
rights to third parties.
RISC-V Release-CLR-QEMU: 9456 / 9535 (99.17%)
RISC-V Release-CLR-QEMU: 9463 / 9535 (99.24%)
RISC-V Release-FX-QEMU: 0 / 259 (0.00%)
rotation so that the overlay appears as intended.
Roughly a 40% decrease.
Run a quick perf test that shows this is a perf improvement for all affected sizes?
run automatically on PRs when Mono AOT-llvm code changes
Run these commands to merge this pull request from the command line.
run via #code or #code
Running a build and waiting results.
Running it through tests to see what fails.
Running Orchard with the tracing enabled....
Running your benchmark with a fixed buffer size of #code on my machine shows that #code is faster than ArrayPool (Probably caused by overhead of #code being a generic cache compared to #code with its 3 supported array types).
Runtime changes to vertical text alignment are not handled for placeholders on both iOS and macOS platforms.
runtime dynamically at the application build time.
Runtime Environment:
Runtime scenarios for ShellContent were not properly handled.
Runtime support for this property has not been implemented.
Runtime tests build with mono is importing coreCLR properties file which can lead to unexpected build/run behavior for runtime tests (notice the subdir used):
Same for me...
Same issue as you highlighted above with #code.
Same with #23690
Sample app from #6861 on NET6 was updated with XAML from sample app in #8679 and the custom ItemsControl code was patched with the proposed fix #url.
Sample application: #url
Sample benchmark showing difference between #code and #code with reference type can be found f.e.
Sample codegen:
Sample output
Sample output for a test might look like this:
Sampling
Save dropped virtual files to the current directory:
savedInstanceState)
Saves 5% in build time (and in size) for Pri1 test builds.
Saving the content of a FlowDocument to Rich Text Format (RTF) leads to malformed RTF if the source XAML contains a NavigateUri with non-ASCII characters.
Saving Yair's original commits here: #url
scenarios and thus how likely your fix is to destabilize a broader area of code
SCOSSL does not appear to implement EVP_DigestSqueeze correctly.
Screen readers may report incorrect information with the current implementation.
Scroll the ListView item (center or end) before resetting the scroll position value.
Scrolling in a large file.
SDK link pointed another repo that pointed to another repo.
Search for #code
Searches for a closed list of well-known LINQ operators which terminate **IQueryable** LINQ queries (i.e.
Second commit features added documentation for the function.
see
See #102998 and #103915 .
See #1037
See #12747 for more details
See #3864
See #4100
See #46458.
See #47637.
See #4768 (this does not fix the issue - only supports the performance problem)
See #51823
See #62647
See #url
See #url (todo fix bash syntax)
See #url and #url
See #url file #code for details.
See #url for a complete detail of history and API changes.
See #url for future direction
See #url for my master plan.
See #url.
See above linked issues for specific examples.
See also : #9805
See also #url
See also #url:
See also #url.
See before and after on **iOS** and **Android** :
See discussion here: #url
See e.g.
See issue #url
See more: #url
See sample code:
See some discussion here: #url
See the #url:
See the issue for an explanation of the bug and how it's hit.
See the issue thread for details along with reproduction and test app.
See: #url
Seeing the expected #url :)
Seems #url after moving the DynamicMethod to #code.
Seems it didn't happen again.
Seems like #code is in the general class not the platform dependend one so iOS should be a bit better.
Seems like a good approach to me.
Seems like a great adition!
Seems like a perf win on tree related algorithm: #url
Seems like a pretty basic and critical bug to be sitting unfixed for months now
Seems like a useful info that could be in the doc.
Seems like here we have some more motivation.
Seems like it should.
Seems like it would just add friction with the same result.
Seems like perhaps #code should behave differently before/after layout?
Seems like the test failures are all unrelated to this PR.
Seems like there was a lot of timeouts ...
Seems like those tests failed with no regard to my changes.
Seems like we would try and do $10^4$ inlines?
Seems odd though...
Seems plausible because this sort of pattern must be rare or we'd have found this long ago.
Seems to be insanely cool and useful.
Seems to be set to false here: #url
seems to be unrelated :smile:
Seems to me more of those should be private given the little I've learned about the customers for this package.
Seems we've been undecisive here
selection of a keyword leads to substantially different ordering to e.g.
Semantic tokens currently requests the frozen partial document in-proc.
sending data on the H2 streams).
Sending this in now when #8215 was finally merged as I've discovered this during development of #9697 but wanted to wait until I can fix the TODOs in the unit tests as well.
Sending this in now when we merged and discussed #9891 as I've discovered this bug during development of #9676 but wanted to wait until I can fix the TODOs in the unit tests as well.
Separate the finished and initial states
Separated out from #111667.
Serious question: why do we have hte legacy UI.
service.
Set #code env var to #code before running the tests to fix them automatically
set this property themselves if they wish to use something other than
Setting #code produce working SDK.
setting #code)
Setting #code/#code just procs the back-compat behavior to execute #code instead of using the compiler server.
Setting a fixed number of invocations that'll be high enough to reduce the standard error: #code--invocationCount {InvocationCount}#code
Setting a fixed number of iterations: #code--iterationCount 20#code.
Setting item at position 2 (which would be #code property now) will result in an infinite loop.
Setting items at positions 0 and 1 will result in #code during assigment.
Setting the Keylistener value to null restricts the user from editing the text in the picker through keyboard.
Setting up the hook inside both build.ps1 and build.sh - Might need help with setting the hook up correctly
several algorithms for GeoLocation/Geodesic calculations
Several other repositories in the organization have already switched to using solution filters.
Several tests are failing on SqlServer:
Sharing the CoreCLR Unix named mutex implementation with NativeAOT/Mono is left to a separate change.
ShellContent homeShellContent = new ShellContent
ShellContent parameterShellContent = new ShellContent
Shoud I add it to the #code in #code in #code?
Should be a reference to #109101.
Should be a simple approval.
Should be fixed now
Should be low.
Should be updated and back in sync
Should fix #url
Should fix following issues:
Should I close this PR then?
Should I close this?
should I flag these somewhere else?
Should i go ahead in making them all #code/#code?
Should I optimize for #code or #code (and #code)?
Should I write tests for both analyzer and codefixprovider?
Should improve things.
Should it be the case also for .NET 8?
Should propagate exception info to the client.
Should still show a hint for the argument in testMethod and it doesn't if we don't try to use the candidate symbol.
Should that be internal for now and protected for net10?
Should that sync?
Should they all (but a few like extract method) be low priority with a few (that are now low) None?
Should this be a feature the users can turn off if they want?
Should this just be handled in the compiler layer?
Should this one be merged?
Should users be warned of this change?
Should we include them in the .NET SDK in some form?
Should we just use the UriEncode method to catch it all?
Should we reflect this in documentation somewhere?
Should we suggest users to rewrite #code to #code in Analyzer?
Should we update the ABI documentation to cover this case?
Shouldn't you freeze the #code before returning it?
Shuffle With AVX2
Shuffle With Sse4.2
ShuffleUnsafe With AVX2
ShuffleUnsafe With Sse4.2
Similar as in #4731
Similar as ListView.
Similar code changes have been applied to the DatePicker and TimePicker dialogs to enable auto-opening after resolving the navigation issue.
Similar mechanical refactoring was done for native AOT in #url
Similar thing happens when #code or #code/#code/#code are set on 32bit.
Similar to #23269 but specific to Windows Assets.
Similar to #code for example.
Similar to #url
Similar to Kestrels #url.
Simplify conditional operator in #code
Simply removing these items can dramatically reduce the payload size of LSP completion response and as a result the serialization time.
since #code won't show in the #code I don't think we want to change the type to #code since we might break existing usage.
Since AFAIR all other APIs should remain unaffected.
Since changes around method resolving are always risky - do we want to proceed?
Since it disables warnings on ref style projects.
Since it has its own helpers for allocation it should be straightforward to centralize it and i.e.
Since it has to be handwritten and cannot be generated yet it can't be one of the more complex Windows-provided ActiveX controls.
Since it's Intel only it is most likely JCC Erratum
Since the background property of the visual element control has never
Since the implementation is not complete I keep old one around as well and I use new one only when seems appropriate.
Since the issue mentioned by Starchm is already fixed then maybe there is no reason to hurt performance to maintain unnecessary workaround?
Since this increases complexity can you please explain the use case?
Since this method is called frequently I tried to reduce the corresponding JIT codegen.
Since VS Platform needs to do reordering due to potentially other sources of LightBulb actions we need to translate PriorityBoost directly to #code (defined #url).
Since you're targeting these changes for net10 that's probably acceptable?
Single thread
Single-threaded environment
Slightly better performance.
Slightly less memory usage thanks to the dictionary removal.
slnf doesn't seem to work with the version of dotnet build we use for CI
small
Small follow up for #68062.
small performance improvement
Small world :-)
smaller code base and tiny performance improvements.
Smaller code-size of PresentationCore.
So @github do we think this is ready for the next pass?
so a lot of these changes aren't needed.
So a specific test might not be needed
So does it mean to track the cost #url?
So each removed interop call counts because it expands how big MAUI app one can implement[^5]
So either the testing that was manually done on a Linux PAC machine was missing something compared to what is tested in the CI.
So far it doesn't seem that #code has support for these.
So far these PRs seem to be getting merged.
So filtering would be done on hidden code already.
So fix for this issue will depend on the new infrastructure that he will put in.
So for the sake of practicality we ended up with the design we have today.
So here I migrated the following cases in device tests.
So here that would mean you'd need an update to #code to a #code version since that's the component that hasn't taken a newer version but you're asserting you need to stay on due to VS compat.
So I am asking some teams why they decided this: #url
So I am not worried about added burden of changing them if needed.
So I am trying to understand how this is working currently.
So I assumed M.E.C to be at fault.
So I knew that batching the CollectionChanged events was the right approach.
So I think both adding nops and doing what you've suggested is ok.
So I think I have the issue fairly well figured out.
So I think this all makes sense.
So I think we are on the right track here.
So I think what we need to test is
So I will try to fix that now.
so I would suggest to only have this code for 32-bit.
So I'd do this regardless of the removal of init-only constantization (discussed above).
So i'd expect the analyzer to do the same.
So I'd recommend adding fake failure at the end of some basic QUIC test and see if you get that failure on MacOS machines.
so I'll take a look today.
So i'm fine flipping this on by default.
So I'm just going to say this is a fundamental difference of opinion and we won't be able to resolve it.
So I'm not sure what kind of refactoring is needed for unit testability.
So I'm not sure what to make of the results anymore.
So I've learned that the test output cannot be trusted to tell you want ran.
So if the screen resolution is 1920x1080 we get 1920*1080*4 = 8294400 bytes.
So imho it is safe to say it has outlived its purpose.
so in case of failure it's possible detect what specific data parameters trigger an error.
So in case we had a sequence like this:
So in your benchmark #code mostly never uses the cached arrays and allocates on the heap instead.
So instead of fixing visual designer this MR adds #code to them.
So it adds like zero cost over the much more expensive semantic analysis passes.
So it comes down in particular to how the developer or team tends to view things.
So it doesn't intercept a click without #code
So it doesn't surprise me that we might have edge cases there we didn't consider.
So it is not ready to be reviewed
So It is ready for a code review again.
So it's clear it can be called just once to achieve the same.
So let's just wait to add that one
So looking at #38547 I wonder if there's a neater design coming out of here.
So looks like this PR will fix that issue!
So make it possible for TS implementation to switch off it.
So MAUI is only about 50% slower than WinUI with this PR.
So MAUI maps all properties of the virtual view (#code) to corresponding properties of #code.
So maybe there's some problem in the change itself?
So much so that i would personally prefer *no* stance be taken at the .net level on how they're named.
So my cents:
So my general feedback is the same as in hte meeting on the topic.
So next steps are to get an API review on your initial issue with this PR as an example.
So no MEF engine out there requires #code then?
So only add #code when the constructor is accessible.
So option 2 could be a good compromise.
So our tests becomes flaky.
So reflection cannot find the #code we prepared in the compiler.
So RyuJIT executes about 15-20% less instructions in order to compile IL to the target platform
So seems like this sort of transformation is feasible.
So should be fine to have an encrypted pointer to that stub which itself is kept in a fixed location.
So should I close this PR or not?
so something is definitely strange there.
So thanks for your help.
So that could easily go to to a couple of orders of magnitude more downloads.
So that property alone seems to shave off 18 ms (more or less) for each display of my #url.
So that's exactly what #8712 tried to do: restore the original behavior while trying to not break #6862.
So that's why i push for people to make these static and to make all dependencies explicit :)
So thats a good sign.
So the expectation would be that that would be highly unlikely to allocate enough to hit LOH.
So the extra added zeros would not change the performance characteristics.
So the main thread wait background task to release the #code lock and the background task wait main thread.
So the problem here is the image is just too big to be handled by the hardware on the device.
So the problem is:
So the videos don't really reflect the scenario we care about here.
So there are other parts that will show up in the trace.
So there can't be any EventListeners.
So there is a random assortment of fixes before I ended up disabling a bunch of the rules.
So there should be no way how a different thread can ever gain access to an instance of the dictionary with current code.
So there's definitely some more performance to find.
So this _may_ have a performance impact in those cases if the file counts were high enough.
so this change has to make sure data is aligned before doing the main loop.
So this change terrifies me a bit.
So this didn't make the .NET 9 cutoff?
So this indirectly helps by unlocking it cause we need to put them on FOH for that.
So this is a fun one:
So this issue is about a real-world issue where even mid-size apps can suffer from poor performance.
So this PR analyzes the implicit calls properly to detect that.
So this service could be deleted.
So this will always crash if you try to render an image that is larger than the screen resolution.
So this will be one less problem.
So this would just need to be added by you to the existing syntax callback we make into you.
So unpacked the image is #code bytes.
So want to clarify
So we can abandon this PR or still use it to support the following?
So we could go through each Logger.Log(<single param>) and update it to pass the level as the second param (if in fact it intended to get into the telemetry channel).
So we have 3 options right now:
So we need to collect samples by instrumenting the code instead.
So we would need to have that many pages of the stub precompiled in coreclr.
So we would need to remove the InputNumber bit and add similar E2E tests like those for DateTime
So we've had a test gap here for a while.
So what I did is that I added a way to provide the #code directly in the cases since this is really what we want at the end.
So what should be the right model here?
So whether the form automatically scales should not be linked to the handle.
so why #code shouldn't do the same?
so you can calculate a factor there and use that instead.
So you can have EF.Design add
So you get to read the embarrassing nonsense I write!
So you might want to look at the GC stats?
So you think just the TYP_LONG locals are at risk?
so you want to do
So you're not a pain at all.😁
So: concurrent is not (in this case) unordered.
So...
solution crawler and checksum updater has cancellation token to drop all work when VSWorkspace or package is disposed (which in reality same thing) (#url
Solution:
Solution: A GetNextToken method up to 6x as fast (~4.25x on average)
Some checks for use-site errors (vs.
Some examples
Some exmaple:
Some issues fixed by #20260
some light docs in teh code would be good.
Some might disagree with that and I understand why but it's Microsoft's policy for the most part.
Some more errors 😢
Some numbers:
Some of our project templates transitively reference vulnerable NuGet packages.
Some of the checks failed.
Some of the code/functionality will be used in further commits.
Some of the issues reported by customers:
Some of the original visitors declare the result as #code because the #code method was implemented as #code instead of #code.
Some of them may be outside dotnet/runtime.
Some other compilation related memory might need to be freed early to prevent memory waste for huge methods.
Some picks from the PR but there's about 400 of unrelated style changes (null-conditional is the same IL):
Some preliminary notes.
Some resources for getting familir with incremental source generators (for the team):
Some simple optimizations to these common converters.
Some tests (particularly around cipher suites) are confused as we cannot handshake TLS 1.3 in tests but the client side is capable of doing it.
Some tests will be updated.
Some tests will just fail locally.
Some thoughts as I've been playing with this
Some typical scenarios that this may kick in after we have the support for gcref arrays are like #code and #code etc.
Someone needs to test the build artifacts in an app that has auth set up.
Something @github  demonstrated here:  #url
something in the squiggle pipeline thought shoudl be adding the 1.5 second delay we expect to not make it too flashy.
Something like #code
Something like #code?
Something similar has already been tried: #url
Sometimes building via the command line first might help.
Sometimes different components can have different licenses and the actual license file is the most important part.
Sometimes we may need to return a buffer to its caller so that we cannot use #code.
Soon I've copied ValueStingBuilder in our codebase and build a handler like DefaultInterpolatedStringHandler but storage was VSB.
Sorry
sorry @github
Sorry @github - wrapped up in some other things.
sorry again to reply late - I've just been swamped with urgent items and also was OOF for a while.
Sorry for leading people astray!
Sorry for taking so long to respond
Sorry for the delay; I’m currently on holiday.
sorry for the delay!
Sorry for the delay.
Sorry for the long delay in getting to the review for this.
Sorry I didn't make that clear.
sorry I had a lot of distractions.
Sorry I should have tried that before my last post!
Sorry I want to check on one more thing...
Sorry to be a pain.
Sorry.
SOS supports the stresslog types by having copies of the stresslog header in its codebase and implementing some of the methods only declared when #code is defined.
Sound like it will help existing helpers as well.
Sounds awesome!
Source code for the two ARM64X pure forwarders.
Source code of the benchmark
Source generators often build up the source code using #code.
source is #code.
Spamming this many PRs without discussion first seems like a bad idea
Specially in the above cases it probably makes more sense to constantize.
Specific runtimes versions are required right now as recent aspnetcore nightly builds have a TFM consistency problem.
Specifically a NRE with stack trace:
Specifically:
Speedometer scrolling test is showing a huge amount of CPU  in MethodCompiler::CompileMethod and AnalyzerDriver.ProcessCompilationEventsCoreAsync.
Spherical
Split from #69359
Split off from #112004.
splits runtests into three projects.
spmi failures seem to be an unrelated infra issue
SPMI jobs seem to explicitly pass #code so the RyuJIT binary they use is not the RyuJIT binary we ship.
SQL Server is unaffected as it has its own override which doesn't do this check
SqlExpressionFactory etc) in Cosmos
src/native/external/llvm-libunwind/src/Registers.hpp line 2337:
Stack trace:
started some work here
Starts with No Fix
static
Step 1: Run superpmi.exe on library mch files using JITLateDisasm to check if any errors occur.
Step 2: Run superpmi and check for asmdiffs and assert errors.
Step 3: Run the JIT test suite using a stable subset of tests on SDE
Steps to Implement:
Still battling the issue introduced by the relative contentRoot change.
Still learning the tools.
still on my list to look at tomorrow.
Still studying the code.
Still waiting for this to be fixed.
storing the key then failing to set the expiration.
StressLog is an in-memory logging apparatus in CoreCLR and NativeAOT.
StressLogAnalyzer has been re-written into C# and uses the cDAC reader to read the StressLog.
strings to bool.
Subject: Re: [dotnet/maui] Able to cancel WebAuthenticator.AuthenticateAsync programmatically using a CancellationToken #26137 (PR #26180)
Submission is made in the course of Your work for an employer or Your employer has intellectual
submit the pull request and then ask us for help.
Submitted #url as a workaround until this PR gets in.
Submitted as draft for conceptual discussion.
Submitted as draft to get a list of tests that need to be updated.
Subsequent changes to #code remain unaffected and will animate (maybe they shouldn't though?
Subsequently the same pack URI is opened by #code.
Such object files can only be linked with a matching LLVM linker plugin.
Suggest looking at the second commit for the diff and do not squash the commits.
Suggested fix for #22790
Suggestion:
Suggestions welcome.
Sum in that sense.
Summary of the changes
Summary of the changes (Less than 80 chars)
summary:
Summary: This includes multiple fixes to reenable the viewing of GC stress log events (from GC dprintf) in StressLogAnalyzer.
SuperPMI results
Supersedes #33081
Supersedes #42964
Supersedes #43426
support for CFSTR_FILECONTENTS and CFSTR_FILEDESCRIPTOR.
Supports #code and #code architectures.
Supports #code and #code.
Suppressed patterns can still produce undesired behavior for the user when deploying as single-file
Sure thing!
Sure.
Swapping of the cached RW converted view will be deferred until some other path (e.g.
Swaps #code's base class from #code to #code to allow for generic interface.
SwipeView was supposed to observe for its scrollParent scroll's event to request closing a view.
Switching to a Dictionary removes those costs.
Switching to Section 2 first updates the #code for the Picker with Section 2's Choices.
symbols invisible.
syntax was removed from C# 11 (#url You will need to remove the usage of !!
SyntaxGenerator should def respect this option.
System.AggregateException : One or more errors occurred.
System.InvalidOperationException: ListView
SystemParameters.MenuDropAlignment = false;
systems will query for this property and pass it along to the language
Tab testTab = new Tab
TabBar tabBar = new TabBar();
tabBar.Items.Add(testTab);
TabControl ToolTip
Tag @github to review this
Tag @github to revisit this : )
Tagging @github
Tagging @github @github
Tagging @github about this as well.
Tagging @github for William's question above.
Tagging @github/roslyn-ide and @github/roslyn-analysis for review.
Tagging area owner @github
taht doesn't explain to me why it's not sufficient.
Take a laptop with connected HDMI external display and set display setting “Extend”
Take care when adding this reference to match the characteristics it has from Microsoft.CodeAnalysis.Workspaces.MSBuild:
Take the selection part immediately.
Take this line of code for exemple:
Taking this out of draft.
TapoffView before rotation.
TapoffView.Frame = View.Frame;
Target branch was wrong.
Target main since it is 17.6 now
Targeted fix for the specific ACL scenario.
Tehre are still some pieces of feedback i've left in the PR that would be good to take care of.
Tell me what is the edge case.
Temp workaround for unsupported caching workflow.
Temporary fix #url
Test #url with NDK 27.
Test build to get packages: #url
Test case failing on windows.
Test Cases:
test cases.
Test change for better free-list management.
Test coverage can be added but requires #10754 to have a simple control.
Test data
Test errors look unrelated to me.
Test failures are related - investigating.
test insertion: #url
test insertions:
Test plan: #url
Test PR insertion: #url
Test project: #url
Test result:
Test run with SDE with #code
Test run with SDE:
TestCase - I will modify the testcase once the above PR's are merged.
Tested base font file parsing and class (#code) functionality after #code removal.
Tested both via CLI and VS
Tested by manually building the templates projects and installing it from commandline.
Tested in real-world application by using Faithlife.WPF: #url
Tested locally.
Tested on Windows targeting #code and #code dumps.
Tested the behavior in the following platforms.
Tested the behaviour in the following platforms
tested with 8.0.100-rc.1.23455.8
Tested with altjit.
Tested with provided repro project at #url Verified the issue occurs before the PR but not after.
Tested with sample application provided by customer.
Testing allocations regression.
Testing for allocation regression
Testing for allocations regression
Testing is tricky as it depends on DNS entries and particular behavior and speed.
Testing it on a single application for a single purpose does not seem enough.
testing methodology -
Testing pull diagnostics against PerfDDRITs.
Tests are borrowed from Half.
Tests coming.
Tests failing?
Tests pass locally (AVX-512 machine) with #code and #code
Tests passed for me locally.
Tests that still need fixed so this can be squashed to a single commit:
TestShell newShell = new TestShell
testTab.Items.Add(parameterShellContent);
Thank you
Thank you @github
Thank you @github  .
Thank you @github .
Thank you for explanation.
Thank you for letting me know!
Thank you for pushing on adoption of security mitigations in this repo!
Thank you for review.
Thank you for showing me how to write test code.
Thank you for the fix!
Thank you for the review!
Thank you for this very complete description of this PR @github much appreciated!
Thank you for your advice.
Thank you for your consideration.
Thank you for your effort to review all these!
Thank you for your help.
Thank you for your pull request.
Thank you for your work on this one
Thank you in advance.
Thank you so much.
Thank you yot pointing it out!
Thank you!
Thank you.
thanks
Thanks :)
Thanks @github .
Thanks @github for creating this draft-PR.
Thanks @github for looking into this.
Thanks @github for pointing this out.
Thanks @github!
Thanks @github.
thanks a lot!
Thanks again for your fixes for segments.
Thanks again for your interest in this!
Thanks for adding this new feature to .NET MAUI Webviews on Android.
Thanks for addressing the feedback on this PR.
Thanks for all the feedback.
Thanks for all the review!
Thanks for bringing everything up-to-date @github.
Thanks for catching this!
Thanks for confirming it works!
Thanks for confirming it!
Thanks for contributing this as always @github  😄
Thanks for detailed answer @github!
Thanks for fixing the selection issue.
Thanks for fixing this Jason!
Thanks for integrating Codecov - We've got you covered :open_umbrella:
Thanks for looking at this one 😄
thanks for looking into the PR.
Thanks for more background into @github!
Thanks for poking this @github.
Thanks for reopening your PR @github!
Thanks for reporting this @github and thanks @github and @github for the quick investigation/fix!
Thanks for sending screenshots!
Thanks for sharing the document.
Thanks for such detailed description!
Thanks for the change!
Thanks for the contribution!
Thanks for the explanation!
Thanks for the feedback!
Thanks for the heads up.
Thanks for the help.
Thanks for the mention.
Thanks for the review @github.
Thanks for the review!
Thanks for the update on this!
Thanks for this @github!
Thanks for this!
Thanks for your contribution!
Thanks for your contribution.
Thanks for your feedback!
thanks for your interest in this!
Thanks for your patience!
Thanks for your time 👍
Thanks in advance.
Thanks to Jon's help
Thanks to this change they will be able to remove their custom implementation and simply rely on MAUI doing its job properly.
Thanks!
thanks.
that 'apparency' needs to be something the team signs off on.
That also seems strange...
That are not running right now.
that are only used by windbg for historic reasons and where fixing windbg may be a better long-term path.
That being said...
That code will not render the glyph.
That could be extended for other types based on the applications we want to check that are sensitive to startup\warmup (e.g.
That couldn't be avoided.
That diagnostic is only reported when an unknown error happens.
That does not seem especially constructive.
That doesn't solve the problem.
that doesn't work for razor closed file case.
That error is odd - I would expect that file to be opened for read only (since build processes should never write to such global files) - I wonder if NuGet is missing a sharing permission when opening this file?
That failure is unrelated to this PR (it exists in main).
That feels a bit unusual.
That in combination with the fact that all explicitly suggested CodeActions are Codefixes means that the current behavior is (given current user behaviour) not all that far from potentially desired state.
That is a fair point and the question was sort of related to my second.
That is an good option for the IDE team to add for the pagination of the exception docs that this PR adds (but default to 5) but probably max at ~9 per page when paginating.
That is bizarre.
That is definitely fine with me.
That is deliberate because the audit warnings are asynchronous.
that is delivered by You to .NET Foundation under this Agreement.
That is more / less what RunTests was doing before.
That is related to the below comment.
That is what i was looking for.
That issue also mentioned #url which was fixed in .NET 9.
that it is also available for the JVM to look up using #code.
That last scenario with published self-contained app and two users is interesting and unexpected.
That line is hit.
That logic is gnarly.
That made me think that the LR is pushed unencrypted and then the computed key is used to validate LR before return.
That makes a lot more sense now.
That makes it a lot easier to customize it.
That makes it tricky to implement the behavior on Android correctly since there's no explicit disposal of the #code that is internally created by the #code.
That may be a bug somewhere.
That means #code and such are a no go.
That means do not change things that don't need to be changed because every change is a risk.
That means something else is still wrong with the numbers in segments.
That means that the places that now lock in these changes might already be locked.
That means the following register assignment is perfectly allowable:
That number seems really low though.
That part has been tested then.
That probably won't happen until the new year as API review typically doesn't happen in December when most people are on holiday/vacation.
That requires an additional implementation in vxsort and a full neon bitonic sorter.
That requires some work.
That root cause is still under investigation.
That runs any time a new text buffer gets activated.
That scenario was uncovered though a GC crash where a reference was dereferenced by GC pointing to garbage memory.
That seems completely reasonable.
That should make it possible to run tests from the test explorer as normal.
That single decision has been blocking people from making the right architectural decisions for over 15 years.
That stops the error level #code log message from being logged.
That was before #code.
That was it!
That was my intent: implement the approved Windows-only API and then follow up with the unix implementation.
That was pretty simple.
That was the project that originally caught the issue from the first attempt in 2019
That was~7 years ago though and we've refactored our tests a lot since then.
That way people can opt-in/out when they want but it doesn't change the default behavior of their apps today.
That will be a self contained piece of work.
That will work but it will also leave gaps (as I'm sure gaps exist today because it's something we never really productized).
That works for me.
That would be also useful on single-threaded WASI.
That would be an API change that would need to be approved by the MAUI team.
That would be for the compiler to team to determine.
That would create some alignment across state machine kinds.
That would e.g.
That would indicate a shared-state problem.
That would make points 2 and 3 more clear for me.~~ Already discussing my question in the other PR.
that you only have one new line in trailing trivia?
that'd be quite surprising because we don't even start invoking vxsort till we have at least 8k for avx2 and 128k for avx512.
That's 100 #code or #code operations per second -- max.
That's a different-but-similar problem that might be fixable by making some additional changes to this self-referential type check.
That's a great improvement that we can make an existed class used like a MarkupExtension.
That's already done in many other places and is much simpler.
That's an issue with the code using #code without either pinning or attempting opportunistic alignment.
That's annoying.
That's awesome!
That's because it should still only proceed once the listener sees all async work for X completed.
That's broken.
That's certainly useful information.
That's fair...
That's fine with me.
That's my understanding as well.
That's reasonable.
That's something actually you advised me to do.
That's somewhat the purpose of SyntaxGenerator in the first place.
That's the flag I just updated the PR with and is essentially what RunTests was doing.
That's the project.assets.json file from System.Text.RegularExpressions.Tests.
That's unfortunate.
That's very messy and looses perf in all the moves.
That's what i dislike.
that's what SemVer is for.
That's why I can find many roughly-written commit messages in the commit history of this repo.
That's why one of the TODOs in PR description is:
Thats essentially LDM for the compiler stuff right?
The  #url
The .NET Framework version of Transactions doesn't use ETW and doesn't use numbers for event IDs.
The 'move to next line' seems odd.
The #code and #code and other GC history commands utilize the stress log.
The #code and #code options today does not have effect to static abstract members and default interface implementations: they are ignored for all interface members.
the #code artifact has all the nuget packages.
The #code asm has been collected in sde.
The #code call when saving a resized image is always using quality #code.
The #code can be optionally retrieved from this (which will parse it).
The #code case does also get the #code added at the same point.
The #code do some calculation to get the StylusPlugIn collection.
The #code failures are not related to this PR.
The #code form was used so I could more easily link to the tracking issue.
The #code holds either streams supplied by developer or a reference to #code that provides the streams on demand.
The #code is called #code to avoid collision with #code in the outer scope.
The #code is not being triggered when navigating back with the iOS's callout menu
The #code is now only added to the #code when #code is not null.
The #code is similar and only returns if #code:  #url
The #code is the field in WeakEventTable which will be read and written in a thread-unsafe code.
The #code isn't required for merging anyway :)
The #code option indicates whether the object should be limited in access to the current user.
The #code property is the only value that should be targeted in the context of source build.
The #code property of the iOS's native button hasn't been always updated when needed.
the #code result to a #code (when comparing for equality).
The #code script should have a flag named #code or something like that.
the #code should have #code property that you need to set to 1 to grab traces (and set #code to listen to gc events specifically)
The #code summaries of these collections reveal some duplicate methods with diffs that might be inflating the total churn.
The #code thread will enter the GetAndCacheTransformToDeviceMatrix method to get the Matrix.
the #code value will have a Convert to type of #code - aka we know we need a convert but we don't yet know what to convert it to.
The #code was not generating proxy code for methods using inferred generic type arguments.
The #code which it returns can now also represent a non-method result (ie.
The #url does some allocations that can be completely avoided if we provide a specialized implementation.
The #url shows small regression on Cascade Lake/small length.
The ~priority field is not public~ and thus _all_ 3rd party are guaranteed to be medium priority.
The ability to dynamically adjust this parameter in the future will be especially useful for us to adapt performance to changing conditions.
The above translators are almost the same as the relational version.
The actual docs explain all.
The actual flag behavior needs to be something like the following:
The additional property serves two purposes:
The aim is to allow the compiler to make decisions on code position and instruction selection for these checks.
The alignment of what follows after it does not matter.
The analyzer does not report a warning on this code.
The analyzer has now been updated to correctly interpret inheritance of export attributes.
The android fix has been added in the #url and it has been merged.
The API is still cleaner than trying to inline the functionality correctly.
The API we currently use is deprecated since 10.5 Catalina and can possibly go at any time.
the approach has the advantage of keeping the difficulty of dealing with
The approach I took in this PR is to stop parsing URIs during LSP message deserialization and remove usages of #code from LSP directly.
The approach is working well when:
The arrange pass insets its #code and passes this value to #code but the #code being used is the size of the children not including the #code which means the bounds used for arranging is wrong.
The artifacts for testing are available on the #code status by clicking the #code link.
The assembly is updated similar to that for AMD64.
The assertion failure was discovered by some our Linux based Reliability Framework Stress Runs with the following call stack:
The assumption here is that the attacker has gotten the ability the change writable memory in the process (possibly only the stack) and read executable memory.
The base of this fix is already visible on lines 36 and 41.
The base there looks ok to me.
The base view for the picker in the unfocused state is AppCompatEditText.
The BaseShellItem.IsEnabled property is now mapped to the newly introduced IsEnabled property in the NavigationViewItemViewModel.
The behavior between the source generator and non-source generator based implementations should be the same which is why I provided that feedback.
The below line (71) currently only returns #code whereas in relational it is a unary convert node.
The benchmark code: #url
The benchmark in question:
The benchmark results look like:
The benefit to that approach would be the defaults should just work for most users.
the better of the two)
The big change here is that all initialization is done directly in a static constructor rather than via static field initializers.
The big change there is that shadow copying no longer has an inheritance relationship anymore but instead is a composable component.
The biggest problem is that iOS operates on the flyout page in Controls/compatibility while other platforms in core/handlers
The bot doesn't support mono
The Brazilian Portuguese resource assemblies are correctly used (see #34078).
The bug is on a very rare path.
The bug should describe the problem and how to reproduce it.
The bugs I have found above has nothing to do with #code.
The build is failing due to our API compatibility checks.
The bulk of the TP regression for the above method is coming from #code.
The CA1416 warnings were already resolved in PR #url
The call methods are likely to get inlined by the JIT and with tiered compilation this can all go smooth like butter.
The call stack for the first time the pack URI is opened (this is the stack addressed by this PR):
The CDN should be working again
The cell's height is set incorrectly during the measure call.
The change is intended to open up the PasswordBox API and allow the creation of derived classes.
The change resets the VerticalOffset and HorizontalOffset to 0 when the ItemsSource is updated.
The change that resulted in #code running in tests occurred during the period of time where #code didn't check for exceptions.
The change to dotnet/runtime as originally attempted in 2019 and it was discovered during preview builds that it broke WPF.
The changes are copied over from a PR to release/dev17.12 #url
The changes here would let fix this bug: #url by setting #code on the Horizontal Collection View inside a header.
The changes I made to existing tests seemed to cover most if not all aspects.
The changes in the PR fit a few categories
The CI failure seems to be #url
The CI failures seem related to the changes.
The CI is passing with the committed counter validated for the heap segments!
The cleanup then occurs in DllMain of the library on DLL_PROCESS_DETACH.
The client never cancels the previous requests.
The clr-abi.md and code say this NOP is only needed for x64.
The code emitted for:
The code generator can be updated to select the most efficient type check for a given node type.
The code LGTM!
The code logs the error details only
The code looks equivally efficient.
The code produced by the JIT is more likely to be attacked since it is processing the input controlled by the attacker.
The code will compile and run just fine.
The code you are touching includes some tricks for JIT.
The codegen looks fine...
The CollectionView considers the header as the zeroth index.
the column headers are missing)
The command can be ignored in all cases and the input system will type the space correctly as expected.
The command itself is fairly new (introduced midway through dev16) and the existing userbase is not incredibly large (we see ~4k unique daily users).
The comments are included for documentation purposes.
The computational complexity of division have been improved by #url
The condition of each #code is first evaluated.
The condition to show the flyout button (burger) or not is set in method ShouldShowToolbarButton of the FlyoutPage.
The containment requirements for these instructions are odd...
The content inside the #code behaves as it has both #code and #code set to #code.
The content of the file ends up being (i.e.
The content offset of UITextView is set without consideration of keyboard frame.
The content offset of UITextView should be recalculated based on the keyboard frame value .
The controls on the form can be scaled appropriately after adjust the font for the entire application
The core change/method is #code (in #code) and the various callers.
The core functionality has been there for many years - we ran Stack on v2.x forever and it did everything we need.
The core of this fix is to remove the offending code in UpdateTrackingSessionIfRenameable and just have the TrackingSession call OnTrackingSessionUpdated.
The correct thing to do is to use the root method's call count to normalize the call site's weight.
The correct way to have all these states working is to use multiple groups:
The Cosmos tests for #34729 are now passing as well
The cost we're paying for the benefit people get by default is too high (many don't even know how to look at these logging scopes).
The crash of the app occurs when entering the background on iOS.
The current #code hold on values of #code type.
The current algorithm for a Grouping is to start with an array with a single element and resize it (double) as elements are added.
the current behavior allows the tab to be clicked.
The current behavior does seem quite inconsistent and annoying at times (esp.
The current behavior is as follows:
The current behavior is definitely very annoying.
The current behavior was an unintentional side effect of the original change.
The current experience gets really surprising once selection is allowed more broadly and with more and more invisible diagnostics+codefix (add _) it gets super-weird.
The current first commit is the change as of the previous review (4005f1ed9b7f1cbdbac0c4ef27e4c482750f7779).
the current state of my PR)
The data size was what we pad the code to in this change.
the date is 22 november 2023...
The debugger will handle these.
The debugging support is typically where we find the long-tail of issues from changes like this one.
The decision then becomes one where the maintainers must decide.
The default behavior of the #code class (#code) prevents
The default project template has a XAML style that sets the background:
The default stack size can be excessive for simple applications and can significantly contribute to the RSS.
The default value for #code has #code and #code.
The delegate fields and implementation are split between Delegate and MulticastDelegate for historic reasons.
The description already tells you what triggers it in this mode.
The developer should run the Fast Pass over the impacted control(s) and provide
The diffs are indeed pretty large on xarch.
the display issue).
The doc comments on #url and #url are next to useless so can't really comment on the difference between them.
The easiest way to achieve it is through E2E test.
The easiest workaround in that case is to just call first #code like second after launch (or #code in this case).
The editor form cannot be opened from scratch project
The effect is that instead of having 12 bytes of StubPrecode code followed by e.g.
The emscripten should be provisioned from nuget packages
The end result is not really visually appealing.
The end result is that we will get early warning on CVE and won't need to wait until CG scans on our scheduled builds reveal them.
The ensures that we only drop the info if the project (or any of its dependencies) change.
The error message being surfaced right now seems a bit misleading to me.
The essence of the problem is known - it is the index offset in the RecyclerView after adding a Header to it.
The event viewer will have a bit more detail hopefully.
The event was triggered without checking if the tab was already selected.
The events covered here were the majority of cases responsible for delays over 200ms.
The examples can be found in the Maui.Controls.Sample project.
The existing #code method in #code only accepts two-digit dates and (for some formats) four-digit years.
The existing check was replaced by the stricter check.
The existing code tries to compare MethodInfos as a cheap fast path.
The existing code will create the token as the very first thing it does.
The existing implementation did not verify whether the width and height had actually changed before invoking the event.
The explicit #code on #code is not hiding the summary on #code.
The extension should be added on the relational level and the mapping is left to each provider to define.
The extra cost of the flag read/writes should be negligible.
The fact that #code is faster probably boils down to the fact that #code uses #code
The fact that ASPNETCore is able to observe the CodeAnalysis dependency though makes we think there might be another bug to fix.
The failure I'm referring to is that both API levels of the Android aren't running to completion
The failure is quite strange: #code in #code.
The failures might have been caused by outdated hardware.
The fast implementation is possible only on a new-enough Linux kernel that has the #code syscall or via other similar OS-specific mechanisms if they are available.
The feature's spec is dotnet/csharplang#7352
The field is used to keep things alive in some cases already - it may contain LoaderAllocator - #url
The file format is a simple RIFF-based structure where various types of data are split into chunked streams - i.e.
The filter quality should just be configuring the antialiasing and similar.
The first argument being an int in register 0 makes sense if it's the return address in r0.
The first change is skipping an AND instruction by taking advantage of the fact that #code will only look at the bottom 6 bits (64 values) of the control.
The first collapses code into a single file and the second adds the #code.
The first commit is already reviewed in #url but let me know if you'd prefer two separate PRs.
The first commit is also a rename of some stuff that wasn't renamed ages ago.
The first commit is just parameter names.
The first commit is reducing the #code allocations when opening a file.
The fix ensures that the stroke thickness is added to the measured size only once by using a flag variable.
The fix for the old issue #url was more conservative than it needed to be.
The fix here is to just always ensure setting cursor position and selection length flows to the native WinUI TextBox control.
The fix involves adding a SizeChanged event to the FormsGridView and invoking the UpdateItemSize() method within this event to dynamically adjust the ItemsWrapGrid dimensions.
The fix involves adding the IsPageVisible method to contain the logic for determining if the presented page is the current item.
The fix involves adjusting the month value passed to the DatePickerDialog in the CreatePlatformView method by subtracting 1 from the DateTime.Month value.
The fix involves overriding ViewDidLayoutSubviews() to dynamically update TapoffView.Frame when IsOpen and its frame differs from View.Bounds.
The fix involves updating the OnNavigationViewSizeChanged() method to include a call to InvalidateMeasure() before arranging the NavigationView.
The fix is essentially a switch to a different OS API/callback that does not run with Loader Lock acquired.
The fix is to pass the #code parameter to #code and only copy the bytes from previous #code + #code calls to the body if #code is true.
The fix taken here is to weakly hold the created TextBufferContainer; that way a call like in VisualStudioActiveDocumentTracker.cs won't root anything if it isn't actually used.
The fix was tested using a test application with different variants of menus and context menus.
The fix was verified on the customer provided sample application.
The FlowDocument containing such a NavigateUri stores the value as `#url
The focus is on client for developers talking to server they cannot  control.
The following are in scope:
The following behavior differences are noted:
The following changes have been made:
The following is a summary:
The following is the verification result that it does not affect the fix of PR #14453.
The following items were present in **Compilers.slnf** even though they were not present in **Compilers.sln**.
The following log is output to the Editor before and after calling the ScrollToAsync method.
The following xaml code:
The FontImageSource Icon color of the TabbedPage is not updated at run time.
The gains are shown below:
The GC root is linked through event handlers on GlobalOptionService.
The generic thing in sucky...
The GetFromJsonAsAsyncEnumerable case is very compelling to me given that the overhead of processing large json blobs is particularly painful in both memory and responsiveness in browser with a single thread.
The goal is to move it to the shared assembly while preserving important history of DataObject and Clipboard.
The goal of PR is to bring linux performance closer to windows performance for #code scenario.
The goal of the attacker is to make the program execute arbitrary code.
The goal of this change is to add support for MslAltitudeMeters.
The goal of this change is to provide a mechanism for external contributors to leverage the power of Roslyn.
The height of the RoundRectangle control is not being returned correctly and instead defaults to the predefined height.
The heuristic is implemented by #code.
The icon remains static despite property changes in the binding source.
The ID is supposed to be a unique key.
The IDE would hide TArg from the signature.
The idea was to keep it open to give developers more option but I am also aware that the .Net framework prefers simpler APIs and not expose 'naked' low level detail.
The idea was to use this API to also allow people to opt-in into a better perf/scalability of launching new processes on Windows: #url .
The image is 6960 x 4640 pixels.
The image should be the same size.
The image source dimensions are not being properly scaled .
The ImageButton DesiredSize is determined solely based on the ImageSize during the SizeThatFitsImage calculation.
The ImageButton size calculation is incorrect.
The impact of the divider appears to be consistent across different types of apps on Tizen.
The implementation accounts for base types that are validatable when generating #code invocations.
The implementation builds on top of the #code type attributes in System.Text.Json namespace to discover polymorphic variants of a type.
The implementation currently re-uses the #code property for setting the max depth that should be respected when recurring in the validation hierarchy.
The implementation discovers types that are validatable by analyzing the parameter list for all handlers in the #code invocations of a given application.
The implementation does not correctly disable scrolling or adjust scrollbar visibility when ScrollOrientation is set to Neither.
The implementation is borrowed from dotnet/roslyn-analyzers.
The implementation of #code is slightly simpler than the implementation of #code.
The implementation part should be done.
The improvement is not really big but I find it better than nothing.
The improvements are negligible but it's overall better so I believe the changes are worth it.
The infrastructure to execute #code cannot be executed in the limited process space of devenv.exe without risking OOM crashes in large sources.
The initial respect for the ThumbColor and OnColor properties was
The integration test approach works for C# but not VB.
The internal list/class won't be initialized unless it is actually meant to be used (with one of the Get*) methods.
The iOS on macOS check needs to happen runtime at least.
The IsEnabled property is not correctly mapped to the TabBar.Items.IsEnabled property on iOS and macOS.
The issue #30145 outlines the backward of the previous approach and why it was reverted.
The issue already exists due to the variable sized nature of #code and us not guaranteeing a maximize size.
The issue arises because the OnNavigationViewSizeChanged method fails to properly reset the layout measurements before arranging the NavigationView.
The issue below contains more details.
The issue got closed with a partial fix as i remember.
The issue is basically in #code:
The issue occurred because the ShellContent title did not update dynamically in response to property changes.
The issue occurs because the ShellSection.SendAppearing() method triggers PresentedPageAppearing() even when PresentedPage doesn’t match CurrentItem.
The issue occurs when an Image control is placed inside a StackLayout without explicitly setting the HeightRequest and WidthRequest properties.
The issue occurs when one of the visual states is defined in the parent Style.
The issue was caused because the ItemsWrapGrid size was not updated correctly when attempting to change the CollectionView item size.
The issue was caused by incorrect handling of the month parameter when creating the DatePickerDialog.
The issue was caused by the current page content being added to the ContentPresenter twice.
The issue was that _scrollParent was always null because searching for either _scrollParent parent happened before it had been set.
The itemSpacing variable is initialized to 0.
The jit code will need to be triggered via a boolean.
The JIT is not always smart.
The jit-analyze summaries aren't all that enlightening...
The last change with static constructor would penalize anyone just using the static properties which I would think are the most common usage of this class.
The last step before we can fix multiple naming violations.
The latest code verification results for main are listed below.
The latest update squashed the changes related #code cleanup.
The latter can be used in the browser at #url while the former is currently winforms-only.
The layout computation logic does not sit well with negative numbers.
The link to the PR containing the changes is mentioned below.
The linked discussion that was held explicitly shows how namespaces are not meant to be handled.
The linked issue is resolved.
The listeners are not used for single-test correctness.
The ListView.ScrollTo method fails to correctly scroll the selected item to the center or end of the ListView on the Windows platform.
The lock may cause the performance issues.
The Mac machines in the CI are the only boxes that currently support PAC.
The macOS UI Tests for TabbedPage keeps failing so...
The main advantages I see are:
The main blocker to me is...
The main change is that the Window on iOS did not receive change updates.
The main difference is that I manually set the #code property to point inside the bin folder instead of letting it be derived solely from the #code like the #code.
The main downside is that in theory there could be a slightly longer delay for the connection to be seen as disconnected if the last reconnect attempt took a long time to fail to connect.
The main idea was to uniform the code across the platforms
The main issue I will have with dotnet/runtime types is that #code does not support async #url and would throw.
The main issue to test is #11365 using the updated code.
The main scenario that we have the ability to improve today is collections with the following characteristics:
The main thread will not wait for each other with the background thread.
The main thread will use the same SyncObject in BitmapSource.UpdateBitmapSourceResource
The main thread will waitting the #code which be used in background task in #code method.
The maintainers can do the rebase if deemed necessary.
The majority root cause of the linked issues is that trimmer removes parameter names from methods (.ctors) - this is problematic for serialization of KeyValuePair for example as the logic there relies on the parameter names.
The manipulation of the contexts is too confusing for me to feel comfortable about a more complete solution.
The MAUI code is ahead of the android reality.
The measured value (Width/Height)of the elements like image has calculated as 0 during first measure call in WinUI platform when negative spacing is passed for Layouts.
The mechanical changes look fine.
The memory profiling showed tons of #code objects and calls from ObservableItemTemplateCollection.
The MenuItem class lacks an implementation to listen for source changes in the IconImageSource property.
The method group conversion only kicks in when we have already determined that we have a method group:
The method in collectible assembly can create delegates in a loop.
The method invoked by reflection is visible at line 158 of #url
The methods that I used have existed since before.
The Mono AOT compiler cannot find the #code constructor if the optional parameter is not provided.
The month value from VirtualView?.Date was passed directly to the CreateDatePickerDialog method without adjusting for the difference in month indexing between the .NET framework (1-based) and Android's DatePickerDialog (0-based).
The narrator is still calling the wrong sequence and total count.
The native Android ListView retains its scroll position even after the data is reset.
The native iOS UITextField control does not directly expose a cursor position property.
The NavigationPage includes a TitleView.
The NetFx and ILGen serializers both correctly allow for items within a collection to be a known #code-d sub type.
The new #code has much fewer dependencies (as in none) so it would be beneficial for you and your users to take this update and have fewer unused packages to worry about updating.
The new #code will prevent bugs like #url
The new API does not provide capability to work on top of buffers like SslStream expects.
The new hyperlinking support of Quick Info should help with clarity here.
The new IDE contexts will call #code and bail-out early if it returns false.
The new implementations uses a KVO on the UIWindow to update the maui window.
The next change I'm working on is using HWND.
The next step after the analyzer and generator is expanding it to also support #code.
The non-slim #code does not have the starvation problem.
The nullable directive code has been removed as suggested.
The numbers above suggest a 0.0008% improvement without further context.
The O# side PR: #url
the one that would answer F# queries).
The one thing that bothers me a bit about this approach is it's a thing we need to remember.
The only affected test is #code.
The only disadvantage would be that long texts will have a tiny font.
The only logic is rounding from double.
The only opportunity to fail is when a WindowsIdentity instance is created in the aspnetcore side of things.
The only real difference is this line:
The only real pain is that debugging requires a specially built lldb that @github created and getting the right flavor of the lldb SOS plugin for that lldb takes a bit of care.
The only reason they need added is that casing will stick with whatever the first request is.
The only reason this does not happen seems to be due to preferencing making it so that LSRA ends up not picking this assignment.
The only reason we didn't move forward with it at GA is that it didn't work in Azure Web Sites.
The only regressions are due to inlining or the slightly larger (but faster) SSE2 multiply code.
The only situation I can think of this needs to be done quickly is if it is executed on every mouse move during dragging.
The only thing I can find about test results in that file is this:
The only thing I managed to find was this (taken from #27585):
The only thing that I am sure is the number must be wrong and we can't decommit memory that wasn't committed.
The only way we can constraint the width/size is by explicitly setting WidthRequest/HeightRequest.
The operations of the previous #code type are now implemented by #code type itself.
The original code was written with updates in mind but I think it got a bit lost in shifting array members.
The original condition didn't take into account if the decommit had succeeded and only checked if we are using large pages.
The original design of this component didn't even store the keys in-proc.
The original design review outcome is here - #url
The original runtests project which now only runs integration tests.
The other considerations while running these is to ensure that the number of GCs is equivalent between the baseline and the comparand - this can be achieved by:
The other errors look to me as environmental and not related to this change.
The other formats will work as expected.
The other test failures are now unknown.
The overall root build is more efficient.
The package didn't account for the serviced assembly version correctly.
The pain caused by the current state is an accurate and desirable reflection of the behavior everyone sees inside and outside this project.
The parser now has a helper #code which takes #code (for error recovery).
the parties relating to the subject matter hereof.
The parties waive all
The pass will run through all of the code in the function looking for #code nodes.
The pattern #code is typically considered an antipattern.
The plan was to do the bitonic sort using NEON.
The pom file:
The popup does not have any #code set (this shouldn't be common)
The popup is opened programatically (e.g.
The PR #6862 addressed an issue with #code Automation reported in #6861.
The PR adds support to our code saving lmf to stack making sure it saves all callee saved XMM registers according to platforms ABI.
The PR also extends the Windows LLVM support making sure our unwinder handles platform specific unwinder XMM opcodes so we correctly can restore XMM registers for LLVM frames.
The pr blocking this went in.
The PR broke InputTransparent.
The PR can be found here: #url
The PR I created shows that the ScrollToAsync method works as intended even when the screen is displayed for the first time.
The PR is split up in a few commits that can be reviewed independently for convenience.
The PR is to:
The PR modifies public API so it cannot be accepted in the MAUI .NET 9 version AFAIK.
The PR seems to have passed DRTs over two years ago.
The prelim review changes have been made and the CI looks good here.
The previous implementation was incorrect in that the frame was _only_ updated when using scenes.
The previous workaround reset the Padding after one eventloop hoping that onMeasure was called in the meantime.
The problem is caused by the following:
The problem is overlapped commits.
The problem is that Android restricts the size of the navigation icon so if we use too long text it will be truncated (this behavior is on both MAUI and Xamarin Apps).
The problem is that it is NOT 1.5 meg once loaded.
The problem is that sometimes you don't expect that given file is non-seekable (you get a path and you don't know what it is exactly) and following code could fail:
The problem is the binding.
The problem stems from adding comment markers mid-line.
The problem we found is that the #code returns a size from #code that doesn't include the #code.
The problem with constantization of a mutable thing (e.g.
The problem with Uri encode: #code
The project
The proposed change would make it so that we start by picking the first speculate-able node (as before) and then if we visit a different one further down in the tree switch to it if it would mean that we do not miss on any simplifier annotations.
The provided examples assume that the remote is named 'origin'.
The public API for the Tizen platform has been added.
The public classes and members are as follows:
The pull request I attached makes this change -- the #code does not bother resetting the target property back to its default.
The pull request was created so we can review the behavior of this refactoring for correctness / form.
The purpose of hidden code is to *hide* the code and pretend like it doesn't exist.
The query times will be of course improved as well due to non-boxing key query.
The question is more about API design and perhaps even for user-defined visual styles and their composition.
The question is more about what we should do with the return type.
The question of this flag is in #34011.
The rationale is that there might be a number of CodeActions and if we suggested one explicitely there's a high chance a user might really want to perform it.
The reason is that GroupItemAutomationPeer creates automation peers for its children only if the parent automation peer inherits from ItemsControlAutomationPeer.
The reason that #code only works when you're nested in a NavigationPage and Shell is that both of those structures are firing the #code to events on the #code which is required for the #code wiring to take effect.
The reason this is dead code is because #code always returns false because of this condition here:
The reason WordWrap doesn't work is because the text area doesn't take padding into account.
the receipt of results from other activities (_via Android's new #url_).
The recommendation from this analyzer seems fairly specific to JTF and it's doc recommends using JTF to work around this
The refactor should be functionally equivalent but more reliable and efficient.
The refactoring I described in previous comment isn't going well..
The refactors are merged.
The reflection-based implementation has some areas where behavior does not match.
The reflection-based serializer was not accounting for known sub-types.
The regression between CS -> CI and going straight for CI compare only is about 1ms for 1mil passes.
The regression was introduced in #url and initially limited to when hybrid globalization is enabled.
The reliable way is to actually read the file and TryParse whatever comes back.
The remaining commits are manual cleanup based on items observed in code review.
The removed null-checks were really for #code but I've checked the call chains and there's no way it should ever be #code (or it wouldn't matter if the #code was empty).
The replacement uses FsCheck to randomly generate a variety of
The Request Delegate Generator is the source generator implementation that compiles arbitrary delegates to RequestDelegates when you are using native AoT.
The request from users is to only write the #code log message if the exception handler didn't handle the exception.
The required APIs are made public to allow third-party tools to use the Hot Reload feature.
The required array size for the bit helper #code  in #code (with this change calculated with #code) grows quite rapidly.
The rest of it will be backed out once the crossgen lanes are mostly green (I'm working on that.)
The result:
The results for increased max array size for #code up to 1024 * 1024 (default max size for #code)
The revised code has been tested and functions correctly.
The risk here is any code action that is trying to modify parse/compilation options will now _actually_ validate if that change can be applied.
The root cause of the #code was identified as a failure to check for a valid context or color before calling the AsColor method.
The root cause of the issue is in #code behavior - it returns an Expression that evaluates #code.
The root cause of the issue is that TapoffView is initialized with the current View.Bounds only at the time of its creation.
The root cause of the issue is the use of #code for validating URLs in the WebView control.
The root cause was running thread termination routines directly or indirectly from DllMain.
The Roslyn workspace model allows you to have project references to projects that aren't in the solution.
The RunTests project is used by developers to run tests locally.
The runtime bug causing the crash was introduced in #url but it seems there might have been additional changes leading to the crash actually reproducing to customers.
The same error occurs even on the main branch so doesn't seem to be specific to the PAC change.
The sample code you have here isn't quite correct.
The scope is to update the dark theme.
The scroll position is not calculated correctly based on the ScrollToPosition (center or end) when using animation.
The scroll position is now calculated based on the ScrollToPosition (center or end) with animation.
The scroll position is reset before scrolling the ListView item (center or end) when using it without animation.
The ScrollTo method does not work correctly in a CollectionView when scrolling based on an index.
The ScrollToAsync method does not mark the task as completed because the scroll did not occur due to the target position already being the current position.
The searching for small lists currently uses a copy of insertsort instead of bitonic search.
The second change is also taking advantage of the above observation.
The second commit forces the language services to return null.
The second commit is adding a Benchmark project to our repo.
The second commit is just parameter reordering.
The second is that there is no synchronize API.
The second method was never called.
The second part is the public methods that allow high level access to the feature.
The SemanticModel.GetDiagnostics is 18% of compilation time.
The sensible-layout PR #url for that project in particular was extra slow.
The sequence is:
The simple add will double count.
The simplest reproduction code with pure #code goes like this:
The simplicity of the workaround really makes me want to hold off on this until the spec is final.
The size of the dictionary at runtime is about 10 Kb so not much but it is still unnecessary used memory.
The size of the grid (the presented content inside the first ScrollView) is not updated during the layout pass.
The size was chosen based on code size estimation.
The SizeChanged event was being triggered continuously even when the width and height of the element remained unchanged.
The small cases come with normalization guarantees.
The soft keyboard remains visible and the focus persists even when the Entry control is hidden.
The solution I posted last time is not beautiful because the overlay is temporarily drawn in the size
The solution was to conditionally call UpdateCursorPosition or UpdateSelectionLength based on the SelectionLength.
The source generator also emits warnings for such incompatible queries.
The SourceChanged event is not implemented for the IconImageSource in the Page.
the spacing changes in #code was an accident from pasting in VS (it unfortunately automatically changes the spacing).
The spec has this to say about fixed and moveable variables:
The specific changes were:
The sqlite test now works and the same change solves the problem for efcore.pg.
The static constructor is called at the startup of every WPF app AFAIK (It is called even with an app created from the empty WPF template).
The static constructor of a type is guaranteed to be called only once.
The strange thing about this bug is that it is only applicable for the graphics view with decimal values XX.25 It happens because iOS converts the decimal part to something line XX.3333331.
The StressLog types are one of the reasons the SOSBreakingChangeVersion exists (and are responsible for 2 of the 4 version increases done over the years).
The strings come from comdlg32.dll resources and will be in the language of the OS.
The success logs aren’t as verbose as the failure logs.
the suggestion of 4 related to #url and by default not seeing anything greater than 4.
the symbol-to-syntax generator in IDE layer generates canonical syntax
The symptom of the bug was incorrect arm32 jit code so that's why we initially picked you for review
The syntax for array initialization has been modernized to use collection initializers for better readability.
The syscall can also be blocked by seccomp.
The TargetPlugInCollection do some useless calculation.
The TaskItem implementation from MSBuild treats the ItemSpec as file path and tries to normalize the path separators.
The template description has been modified to contain the OpenAPI support.
The test **CollectionViewMeasureFirstItem** keeps failing on Android:
The test failure at #code looks expected.
The test failure looks relevant.
The test here to allow translation and calling for expression with valid type mapping (having first argument as object or generic type)
The test image was generated correctly in the previous CI build for the iOS platform.
The test is writing 2 segments of different encodings and asserting it throws.
The test result in DemoConsole project
The Testcase is already available for this fix.
The tests are very red and we think we fixed some more tests recently.
The third commit fixes #code (and related) where the #code method was already used.
The third fix wasn't a regression but was simple enough to fix and part of one of the issues linked above so included a fix for it.
The ThumbImage set on the slider is rendering too large in view.
The time for lots of little polishing was long ago IMO.
The Title text has moved slightly to the right)
The token source must be explicitly disposed even after cancellation in order to prevent leaks.
The toolbar item's FontImageSource Glyph is not reflecting changes when the bound property is updated in the ViewModel.
The touch interception is needed to stop taps on a layout/view from passing through that layout onto the view below it.
The trace I've been working from was captured on the 8/24 #code build.
The tradeoff shouldn't be a mere side effect that is likely to go unnoticed.
The two PRs fixed unrelated issues even if they touched on the same topic.
The two regressions were:
The type handles are used as part of reflection activation to do castability checks (is it valid to call the method with this parameter?) and to do boxing of return values.
The type mapping handling of the binary expression will work it out and apply to all sides
the types of names you see in ildasm and whatnot?
The typical .NET app has a lot of AOT (R2R) compiled code.
The typical use of stackallocs in BCL are constant-sized stackallocs or stackalloc+ArrayPool combos.
The typical user of this API will have a handle that he means to use in a seekable way or not.
The underlying problem is that ShapeImageView updates Padding in onMeasure leading to a double padding.
The unit test passed.
The updated image is expected.
The updated test files might still be more or less relevant.
The use of the syscall implementation instead of the file device offers some performance improvements.
The used commands are :
The user doesn't want that dialog.
The user is able to interact with the search bar even when the IsEnabled property is set to false.
The user of #code API can now call APIs like so:
The user presses a button to pop the page programmatically:
The validation of operation shutdown ensures that each test is written in a manner that is not prone to interference with subsequent tests.
The value passed as the itemsource when creating a groupItemsList is not IEnumerable.
the various helper expansions in helperexpansion.cpp; those are shaped so that they visit all IR once while allowing for expansion of internal nodes into control flow.
The various scenarios you've mentioned in your PR description are awesome and have great coverage.
The VerticalTextAlignment value is updated during the Loaded event.
The very #url of how to use a platform behavior uses a color and code virtually identical to the #code example I included in the unit test.
The warning is reported when a field value is returned a couple lines below that.
The way I understood #6862 was that it was primarily about grouped items.
The way I was able to repro this was shrinking the browser window vertically.
The white blink occurs when setting a new page using the following code:Application.Current!.Windows[0].Page = new TestPage2()
The WinUI design team would sign-off on the correct images.
The WmActivateApp method is fired by Windows messages.
The work of me understanding this code eventually led to us realizing that our move to JTF broke this and #31787 is probably necessary as a more general fix.
The WPF team also has very limited resources.
The XmlSerializer has two implementations that it selects based on various criteria.
Their code is expected to stay stable for a long time if not forever.
Theis is a new class with static members not affecting any existing functionality.
themes at this moment.
Then added to the git blame ignore revs.
Then additionally try #11365 but on a single file published app.
Then Dropped #code and superpmi (binary) in #code
then I think #code will have a use created that is _not_ marked delay freed.
then if you need to rebuild anything then there's no need to copy files around.
Then keep this branch only for System.Diagnostics.Port changes.
Then maybe we could add a flag to #code to enable this when running #code.
Then please get eyes on it - because we're waiting for this to fix the navigation on iOS.
Then that goes to the code generator but it's left untouched.
Then the pass can be linear over a pre-built list of nodes rather than a search in a loop.
Then there's all the other views that would have to be fixed too.
Then unregister when UndoManager gets disconnected.
Then was asked by colleagues what will happen if they forgot about calling Clear(Dispose in our case).
Then we can look at more changes on top of #code with that change merged.
Then we could be _very_ confident in the implementation of #code because it could just plug into our file system abstraction.
then we need to allow loading of HUGE images without change.
then we will discuss whether we accept the new design.
There are a bunch of places where there was some kind of bulk update on an ObservableCollection
There are a few failures - but I'm not convinced they are this PR.
There are also widely used idioms (eg in Enumerators) where objects clone themselves to provide thread private access.
There are conceptually two challenges.
There are definitely more.
There are four different types of tests:
There are more gains to be had in this area but it requires us to add new public API so I cut the changes off here.
There are multiple pieces here:
There are multiple solution states that each have many threads blocked on its lock in-proc.
There are new failures though.
There are no logical dependencies.
There are not.
There are now a couple of ways to specify these rules (previously we only had the old way for < API 31).
There are numerous benefits in using ProjectReferences consistently
There are outstanding pr comments that would probably need to be resolved.
There are perf implications for having our CompletionItem properties be typed to string values.
there are some code styling issues that make the changes not consistent with the GC code.
There are some compilation errors:
There are some conflicts and feedback to resolve.
There are tests that contains some startup options and we need to modify them to run once with wasm/server options as they do now and second with options matching web format.
There are two failings tests (FixAll crashes when there are nested diagnostics).
There are two possible ways we can say we support changing options:
There are two reasons for this.
There are two types of performance tests I executed.
There are two ways I could achieve this.
There are unit tests under:
There are various mechanisms for handling an exception:
There are ways to generate better code for equals-or-unordered and not-equals-and-ordered.
There can be implicit calls generated by the compiler like #code or #code that previously weren't fully analyzed by the ref safety analysis.
There can perhaps be improvements here.
There could be few more in different build subsets:
There could be other things going on as well.
There do appear to be design time build warnings when I remove this
There is #code developer option in Android that can be enabled to see overdraw in the app.
There is a bit of an internal discussion on the best way we want to represent user specific temp folders that doesn't seem likely to resolve quickly.
There is a client side bug commited for 17.5p1 to improve the refresh request to not immediately ask for all non-visible open files - #url
There is a good chance that it doesn't change at all since I don't see any references to #code.
There is a static API allowing to hash without allocating kdk #code which is rented from the buffer: #code
There is already an API to remove the first entry from back stack.
There is also #code if you need AMD Epyc (Milano) specific results.
There is also a design question whether the behavior should be changed for them.
There is an active #url that has gone through some review and iterations.
There is an assert that this #code does not overwrite op2 in the process.
There is an issue (not yet created) with dotnet-pgo processing the .nettrace generated from tracing the maui app.
There is an unofficial intrinsics manual:
There is an up to date check [issue][issue] in NuGet / MSBuild that caused me to see no errors locally and believe we were clean.
there is another part of the problem that is being missed.
There is code throughout this repo (Including ListCollectionView) that needs to be fixed before removing the validation.
There is in fact a difference between the 2 and that is that there is a cast to the function parameter.
There is more user feedback about the issue now:
There is no big idea.
There is no C++ in the mix.
There is no IDE0055.
There is no longer a blank line between the groups.
There is no need to add special support for inheritdoc inside block-level elements in this pull request.
There is no need to analyze or inline #code.
There is no need to emit the space character manually.
There is no need to polute MAUI with geospatial algorithms.
There is no pac register as such (except for the secret keys)
there is no procfs on macOS.
There is no way to configure it.
There is PR up for the changes (#111473).
There is probable a way to use an internal server and not expose username and password in the repo and remove WebListener.
There is still a public API check failure:
There is two parts to enable these scenarios.
There may be further performance to gain by implementing packing for Arm64 - that would allow sorting of u32int x 4 vectors.
There may be more straightforward (less breaking) ways to get rid of RawArrayData.
There might also be some places from my code that also might be subject to that just with something like this I think:
There might also be something the BCL can improve on mobile here.
There might be a more efficient way of doing this.
There really should be some kind of explicit scale factor when they're combined.
There seems to be a lot of finicky range manipulation here to accomplish what seems to be a simple concept (not adding a dupe of something).
there should not be any penalty for #code.
There should not be difference between #code and #code in this case.
There was a fairly recent fix regarding SLN files for this template for VS Code: #url
There was a name collision between #code and #code (introduced in this PR) that I have solved.
There was extra MSBuild/NuGet magic to make sure the binary was included in the other project without it appearing as a package reference.
There were already tests around these converters #url and #url.
There were scenarios where there were keys in the english json file that were just completely missing from the other languages.
There will also be a GlobalLog.txt file produced that has every tests' failures for easier sharing / reading.
There will be a follow-up PR to tackle this.
There will be some delay on this PR because our test coverage in this area is weak.
There would need to be a guarantee that the address would be unique within the function compilation.
There're limits on these values:
There's a small cache per-type that skips some of the code so I also benchmarked a new WPF from the Visual Studio template where I added 20 empty classes like #code and I added each control in the XAML of the main window.
There's a Translations/Operators folder where we have test suites for operator translation - a test inside MiscellaneousOperatorTranslationsTestBase probably makes sense here (or we could even start a new CastOperatorTransationsTestBase if we think we'll add more coverage specifically around casting...).
There's also #code (but I've never understood the difference from the other one).
There's also an analyzer error that didn't exist before:
There's likely some additional asserts we could make on hwintrinsic/intrinsic nodes.
There's no GetDefaultIndentation that can be independently called from elsewhere.
There's no particular restriction on which collection types can participate -- the optimization currently keys off of the #code call and uses PGO/GDV to specialize for the most likely types seen at runtime.
There's not a lot of difference between ExecuteUpdate and e.g.
There's one part i don't understand and in need info on.
There's perf cost to compute all accessible nested types.
There's still bootstrap failures to investigate so there's definitely missing pieces that I'm not aware of (explained above).
Therefore I am doing the following to fully support existing API and dont introduce breaking changes:
Therefore the add and subtract always works.
Therefore to enable feature proposed in this PR we'd need to extend #code with _at least_ two more levels between #code and #code to accommodate:
These all generate trimming warnings after all...
These all hit the lock.
These all hit this assert with #code
These are already hidden in generated code.
These are also tackled in #11985
These are based on the existing flags from the webapi template.
These are the latest comments on that:
These are the per request allocations (excluding execution context overhead) (10K requests):
These are Tizen samples.
These aren't normal files anyway (they don't conform to the #code format) and would go to misc regardless of if we succeed in parsing it or not.
These behaviors are solely to minimize the chances of _other_ bugs in the system from manifesting in such a way that it undermines DataProtection.
These buggy components might now inadvertently disclose sensitive plaintext data - or even _active key material_.
These changes affect all generated methods and may have unwanted side effects.
These changes enhance readability and maintainability while following best practices in .NET development.
These changes only effect non-grouping paths.
These changes should cut this in under half.
These changes were motivated by the following PR #url
These false positives are now suppressed by DiagnosticSuppressor RS0047.
These fixes make it possible to turn off #code during build.
These is no reason for it to require any sort of alignment.
These methods are easier to maintain than other strategies based on node kinds.
These optimizations logically help more the more verifications we must perform.
These package references *shouldn't* be needed.
These problems are not really relevant in the early stage of the prototype and they can be cleanly addressed later on in the implementation.
These PRs are very relevant for helping with VS startup time.
These should probably be renamed...
These tests are applicable to my changes as well
These tests are applicable to my changes as well.
These tests do complete successfully on my machine so I'll have to investigate further what's causing them to fail when running via Jenkins.
These tests have been stable forever.
These tests needs to be addressed:
These translations have been done with Copilot and need some double checking!
These types have #code method and special handling to make them work.
These versions differ by message format and the lookup process for the format string from the provided offset.
These were needed to fix an exception handling issue in the jiterpreter before.
These were regressed by #url
These workflows will help ensure that issues are properly triaged and managed in a timely manner.
They address totally separate situations.
They all fail with a #code.
They are designed so that we know exactly what range of memory is committed/decommitted/transferred between buckets.
They are not related to your change.
They are passing now.
They are returned to the pool with #code flag to make sure key material is removed from the memory after usage.
They are statically linked stubs that use CRT global state for .exes and module-local state for .dlls.
They are used as part of ensuring the operations started by a test A do not interfere with the execution of the next test B.
They can be trivially hit by user code passing in misaligned blobs:
They don't bring compiler / MSBuild references with them - they expect them to be provided.
They follow the pattern other app theme tests use but use a platform behavior instead.
They include values when the Branch Target Identification (BTI) is enabled.
They must keep the collectible assembly alive.
They run when that is happening?
They seem to work nicely when I'm browsing the documentation in Visual Studio Code.
They should not be faster than squiggles themselves.
They should now be amortised allocation free (in the assert succeed case).
They show the experience around editing+waiting and seeing how long it takes.
they use it through IVT.
They were failing before the fix were applied.
They were originally written like that to mitigate some CQ issue.
They'll still need expanding to create NEON versions though.
They're related to emscripten
This (along with #url will allow a user to commit an override completion and easily replace the default text (and still use the expression body fixers).
This (presumably) obsoletes this workaround:
This *migrations* project wouldn't be deployed with the app and only used at design time (or deploy time) and would be the project that references Microsoft.EntityFrameworkCore.Tools and/or Microsoft.EntityFrameworkCore.Design
This acts as a quality gate by ensuring it can run on the Roslyn repo itself.
This address is used to help access the the size of the code that gets copied from the template code.
This addresses issue #15439:
This adds a glob that will take any asset under #code and put that in the app bundle root.
This adds an LSP request to hook into the async operation listener on the server side.
this adds API approved in  #87932.
This adds on top of #url which proved insufficient during validation of customer app for February NET9 service release.
This adds support for range notifications coming from INotifyCollectionChanged for Add/Remove/Replace.
This adds that.
This adjustment ensures that the spacing is applied accurately and aligns with the intended layout behavior.
This adjustment prevents the Picker dialog from opening during page navigation.
This Agreement is effective as of the latest signature date below.
This Agreement may be assigned by .NET Foundation.
This allow us to know if DATAS is enabled through the trace when the #code event is enabled.
This allow user updating container limits and also let the GC knows.
This allowed the element within the TabbedPage to be measured and arranged correctly during the subsequent layout cycle.
This allows command line tools using AdHocWorkspace or MSBuildWorkspace to be able to start up faster without impacting full environments like Visual Studio.
This allows eg.
This allows moving existing data that can be serialized as Json to the Json API and all consumers on .NET 10+ will be able to read it without changes.
This allows source-generated documents to be opened by an LSP client.
This allows the _syncObject lock to be released as quickly as possible when creating a WriteableBitmap object in the background thread.
This allows URI parsing to be delayed until much later (for example looking at the scheme or file path to find a matching document in the workspace).
This allows us disable #code propagation (except for #code chains).
This also affects EventLog; the test added here was only added to PerformanceCounter since EventLog shares the same code.
This also correctly eliminates forthcoming element tests where the result is known:
This also enables us to receive a #code in #code which will allow us to resize the cell without relaying on #code cross platform event propagation.
This also will make this issue obsolete: #url
This and the use of #code only applies to methods that can't be overridden since #code does not support vtables and adding vtable support before the #code would be too slow.
This appears to be measuring the cost to compute the fix for a particular action.
This approach allows us to dogfood the experience of defining and using analyzers with ProjectReference.
This approach enhances the performance of repeated drawing and reduces the frequency of creating platform-specific objects.
This approach involves creating a custom handler that extends MauiWebChromeClient to support full-screen video features.
This approach is just like the one used in #code
This approach prevents the application from crashing and ensures that the UI continues to function smoothly even in command line device test cases.
This approach provides comprehensive coverage and validation without extensive refactoring.
This area will be used to track issues and work items for the interpreter on CoreCLR
This argument is only offered on Android.
This avoids errors like:
This avoids that when the prefix is null or empty.
This behavior is inconsistent across platforms.
This behavior is native in macOS and isn’t explicitly managed or customized within MAUI.
This branch:
This bug exists in existing .NET releases like 4.8.
This bug was being caused in the constant initializer dependency graph calculation.
This builds up on #url
This builds upon #8616 to cleanup some trace calls
This can also be seen in other controls such as the WinUI combo box (the Button does not use a state but rather the OS focus border): #url It is also in the docs: #url
This can be an especially large leak when the latter references a #code which is part of #url.
This can be done by editing the return addresses on the stack.
This can be done to resolve conflicts or make other changes to this pull request before it is merged.
This can be resolved by adding #code to a new line of #code.
This can be seen by the fact that there is no difference to the border in the one with and without the background:
This can currently happen under certain compiler versions and optimization flags.
This can happen when the menu content is created using data binding to a view with a grouping description.
This can solve application crashing for ppl using Header or HeaderTemplate and not using IsGrouped at the same time so from the base of logic this should be free fix even for testing.
This caused an exception:'The specified child already has a parent.
This caused delays in recognizing virtualView in the logical tree.
This causes any solution folders or other customizations to be merged into the VS created one.
This causes the FlyoutPage's flyout to disappear.
This causes the value to be set as null.
This change allows them to be decommitted by calling #code at the beginning of background GC while the runtime is still suspended.
This change avoids using those flags in when the runtime specifies loading with an altered search path.
This change can already take care of most of the worst offenders found in #34048 🥳
This change does the same for hard limits.
This change enables heap hard limit on 32 bit.
This change ensures AnalyzeSemanticModel only performs analysis when unused imports are being reported.
This change ensures the flexibility of customizing images for developers just like it has been done here: #url
This change has caused a slight difference in the existing toolbar items on the Windows platform.
This change has two commits.
This change improves code consistency and aligns with standard C# naming conventions.
This change introduces two ways of such monitoring:
This change is about perf trade-offs.
This change is accurate and an improvement.
This change is correcting previously incorrect behavior.
This change leverages a diagnostic suppressor that suppresses this diagnostic for unit test methods (marked with #code or derived).
This change makes reflection and dynamic methods measurably more expensive that is going to show up.
This change migrates the feature from the external policy service to GitHub Actions.
This change modifies trimming of attributes and nullability info (attributes which encode the #code in C#) - I don't see how that will fix the original problem.
This change only briefly extends the NativeAOT/Mono implementation to add another prefix to the name when #code.
This change removes the use of asynchronous methods during the MEF construction portion of the construction of #code.
This change replaces those with the new thing that we should be using.
This change shortens ILs and x64 assemblies.
This change should allow that.
This change should be reviewed carefully.
This change simplifies the C# and doesn't make any assumptions about whether a branch is likely or unlikely.
This change updates the behavior of #code during syntax node removal to collapse consecutive newlines surrounding the removed node such that the total number of blank lines appearing at the location of the removed node does not increase.
This change will gate throughput on the longest assembly run time but if that is down below our current throughput time it could end up being a wash.
This change will skip the following code:
This changeset adds support for accessing a member of the result of a conditional expression.
This cheap fast path is not cheap anymore with this change.
This check is basically: Is #code the corresponding parameter for #code?
This churn seems unavoidable unless/until we expand our usage of profile helpers (#code) to compare weights.
This class does not seem to be necessary after the unification of the crypto assemblies.
This class gets notified whenever the associated trigger condition changes.
This code can make the touch application more stabilize.
This code could not be compiled
This code is hit when creating an instance of a non-known type from XAML/BAML.
this code is unnecessary and can be removed.
This code sets up the necessary functionality to manage full-screen video playback by handling OnShowCustomView and OnHideCustomView.
This code-base has a modified copy of the stress-log dumping/reading code from dotnet/diagnostics (including some dead code and some shims to make things compile) to support dumping and analyzing GC behavior based on stress logs.
This commit contains a change to the IL code of a specific delegate invoke wrapper.
This commit introduces the #code type to the #code library.
This commit introduces the diagnostic ID #code for the obsolescence of the #code method.
This concept of canonical representation also came up in recent discussion of #code.
This contains a part of the code required to build CoreCLR and get #code to pass on Haiku.
This contains all the code fixes made to #url but we can't modify the public nullability of this file until .NET 10
This contributes to #1979 that is long due.
This converts to using the CsWin32 HRESULT definition.
This corresponds to #code on Linux.
This corresponds to the code which just tries to get any Add method on the underlaying type that would work.
This could be done.
This could be sometimes eliminated by making the functions #code in C# 8.
This could potentially be a benchmark-only issue since I'm not sure how often do users create millions of DynamicMethods at once like BDN would here.
This creates a single element per group which is different from the existing
This currently has no policy attached.
this def holds us back and adds significant costs for both teams.
This def worries me.
This definitely needs to be tested.
This departs from #code behaviour which uses #code and there's an ongoing disparity between #code and #code where the former works with up to 4GB buffers but creating such bitmap fails with #code even though both bufferSize params are documented as #code.
This does light up a number of math function tests that were failing - all of them due to #17246 (client evaluation exception)
this does mean T1 can affect teh running time of T2.
This does not change #url.
This does not fix the return case: #code and the method case: #code and potential other cases i'm not aware of.
This does not strip the same type of convert
This does raise the question of whether the natural alignment of the C# struct should still be 8 bytes even though it has a field with a weird offset.
This does require glibc 2.25.
This does seem to be AVX2 (which is not a bad idea).
This doesn't get us any size savings but should improve non-reflection usage while only adding the CWT cost for reflection and lets us put instances on FOH.
This doesn't work if the preceding token is an expression inside a statement like if/for without braces since then we'd take the indentation of that block.
This draft PR introduces #code for non-GC type arrays when the JIT can prove non-escape.
This draft PR is approved by @github in offline conversations.
This effectively resolves alignment and rendering issues.
This enables NuGet audit using the audit sources from nuget.org.
This enables parallel solution loading via #code.
This enables us to compare the JIT's 3-opt implementation to state-of-the-art optimizers.
This enables various scenarios such as e.g.
This enhancement could also be used to implement sampling profiler with #url.
This ensures that all relevant methods are processed for proxy generation.
This ensures that both the text view and the placeholder label are perfectly aligned.
This ensures that button-like controls in #code behave as they did in .NET 7 and earlier versions.
This ensures that our changes to the compiler don't affect the compiler's ability to build the Roslyn solution.
This ensures that the conversion avoids some issues related to #url
This ensures that the window is created on the correct monitor and the popup will receive correct DPI values.
This ensures that users are set up to start working without first having to clean up sample content.
This ensures that we won't have compilation errors when we reorder parameters.
This entire system is designed for the primary objective of deterministic failure reproduction (i.e.
This error can be easily reproduced on a physical tablet by quickly changing orientation.
This error comes from our analyzers.
This explains the exception being thrown in #url but doesn't explain how we got into this situation in the first place.
This extension provides toggle comment with similar behavior - #url .
This feature can improve the performance of XAML object creation by three times
This feature is highly anticipated by the community.
This feels like a decent compromise to fix this scenario and shouldn't impact the vast majority of fields in existing applications.
This feels like a good middle ground.
This feels like hiding a known problem affecting many users instead of trying to fix it (addressing it only in the dogfood environment while leaving everyone else unresolved).
This field will make it very difficult to implement interlocked operations on this type unless you restrict atomicity to operations that don't change the comparer.
This fix assumes that the font is changed before the handle is created.
This fix ensures that the correct height is returned by properly evaluating constraints and requested values.
This fix is based on this call stack:
This fix is based on this PR #url in order to call IRefactorNotify correctly.
This fix is highly desirable for XF projects being converted to MAUI where the legacy soft-input behaviour is required.
This fix is needed...
This fixes #1170
This fixes #32482
This fixes #34982
This fixes a preexisting issue in the explainer.
This fixes the #url on my local machine.
This fixes the fact that #code returns false.
This fixes up the UITest cake scripts for windows so that you can generate screen shots locally.
This forces us to deal with the sync case in each and every test.
This format has been generally stable but has evolved slowly over time.
This functionality didn't work correctly when the code was emitted as part of an inlined method.
This generally resulted in removing usages of EditorTestWorkspace and text buffers.
This gets us both CI coverage on .NET core as well as the ability to debug these tests using VSCode (it only ships with a .net core debugger).
This happens because it's loading the 9.0 targeting back from SBRP which has no analyzers.
This happens when I try to instantiate #code.
This has 2 potential benefits:
This has been signed off on already.
This has the complexity that some enumerations were only introduced in newer versions of Windows (e.g.
This has the consequence of changing -- most likely worsening -- the layout of cold sections.
This has the following benefits:
This helped me a lot.
This helps maintain consistent behavior with previous styles.
This helps to reduce memory and improve gen2 collections.
This implements #code on #code by making the core of the parsing logic generic on #code.
This implicitly fixes #30661.
This improvement is motivated by the comment #url
This improves readability and maintainability.
This in itself is not that useful as the attacker is limited to functions available and register contents.
This in turn resulted in the carousel being scrolled to incorrect item on re-measurement triggered from closing a modal page.
This inconsistency does not align with the intended function of the #code switch.
This increases startup and warmup performance by:
This increases type-safety and also improves performance slightly.
This is *very* simple fix for a bug caused by a small typo.
This is a copy of #110075 without the change to the public API.
This is a design change along with the  addition of a public type.
This is a diagnostics-gathering pull request related to #52409.
This is a draft implementation for our NativeAOT/precompiled query inner loop source generator.
This is a dramatic simplification based on #72150.
This is a fix for #1162
This is a fix for the #url related to a NavigationIcon on Android.
This is a fixed cost and may mean larger total memory allocated for larger TElement types e.g.
This is a follow up on #url
This is a followup to dotnet/wpf#7794 where GetAlternateLookup wasn't available at the time.
This is a full-featured replacement for #code backed by #code instead of an AVL trees.
This is a great document that helps elaborate what trade offs we made here and what we'd be giving up or need to re-implement if we moved to a new model.
This is a great start.
This is a hard block that has no build property to suppress it.
This is a long time ...
This is a minimal change that I came up with that would allow more extensibility while not meaningfully changing the public surface area.
This is a new feature introducing built-in set of commands applicable to collection(view) of items.
This is a permanent move once I do the fit-and-finish work.
This is a potential starvation issue.
This is a pretty big gap for those of us using NavigationPage at our app root.
This is a proof of concept for a low-allocation alterative to #code in response to #33129.
This is a proposal for a new generated API to assist with type checks for code operating on red nodes.
This is a proposal for additional documentation remarks for abstract syntax nodes.
This is a proposal for the CV2.
This is a public API change and must go through API review.
This is a purely syntactic check right?
This is a rare race condition with one of the requirements that a particular OS API is used.
This is a recreation of #url see that PR for detailed explanation and previous discussion.
This is a regression introduced in .NET8.
This is a resource library that doesn't contain code.
This is a start in that direction.
This is a targeted change that fixes the handling of a corner case that got regressed in .NET 9.
This is a test-only change.
This is a very common pattern and a cheap way to avoid locking for no reason.
This is a very first draft/proof-of-concept where things seem to work in both connected and non-connected scenarios.
This is a work in progress.
This is a workaround for BinSkim (and other tools) not analyzing the contents of nupkg/zip files.
This is a workaround for the google's bug: #url
This is a worthy and important effort.
This is about not breaking 20 years of legacy code.
This is aligned with #code behavior where #code allows you to remove children basically as well.
This is almost certainly a fallout of your change.
This is already an optimization employed by JIT:
This is also consistent with a bug in CI.
This is also duplicated with #104589
This is also where cooperative MT would stop-the-world to take sample.
This is an alternative initial version of #27042.
This is an API change that will require approval from at least one other WPF developer.
This is an attempt to use #url) in #code on iOS and Mac Catalyst.
This is an example serialize/deserialize benchmark against a 1MiB real-world payload and a version of the same result set with the duplicate names and commit characters removed:
This is an experimental workflow to add the Developer Community label when @github creates an issue.
This is an improvement to  new Dark Mode experimental feature
This is an obvious and trivial error in the original implementation.
This is an unbearable suspense.
This is as per the design.
This is based on the directions given in the issue #url
This is basic snapshot I crafted when hoping to squeeze this to 9.0.
This is because in this case the #code is an object of a class that is bound to ListItem and will always return false for this condition.
This is because it does additional host name validation beyond what is defined in the URI RFC spec.
This is because the #code is designed to present #code from #code to the UIA tree when the #code switch is off.
This is because we've had cases in the past where legitimate failures were being swallowed with nowhere to report.
This is blocked on #url
This is caused because #code is never being invoked by android as the animation was canceled.
This is covered by #url Pending operations related to a workspace need to be cancelled and complete execution _before_ #code is triggered.
This is currently blocked by #url
This is currently blocked by alpine requiring that python packages be installed in a virtual environment.
This is currently causing us huge issues with NET8 migration and I believe we are not the only ones affected based upon the #8679 comments.
This is currently impossible.
This is currently marked as draft as it is based on (an old version of):
This is currently on top of #url which affects the translation of boolean comparisons
This is done by leveraging a few techniques:
This is done taking winforms as reference.
This is due to #8486
This is due to #code which trims leading and trailing white space off of all strings.
This is due to the CI failure due to the place not changed by me.
This is due to the fact that we use the entry block's weight to compute the normalized weight of a call site.
This is entirely untested - and I expect to run this through a full insertion before merge.
This is excluding all preferences.
This is extremely expensive.
this is for fixing 'Convert to interpolated string' should not nest an existing interpolated string
This is for the number of projects that get source-built.
This is from the default Android studio template:
This is generally a last resort - everything else should make requests and wait for responses.
This is generally a measure our how central the affected code is to adjacent
This is going to be used during object stack allocation as part of array de-abstraction.
This is hopefully a straightforward change.
this is how #code handles seg sizes.
This is in response to #73022 where there is a null reference exception during binder.
This is in two commits.
This is incosistent with Win32 behavior and breaks several keyboard layouts shipping with Windows:
This is itself a slightly larger and more complicated PR so it started closer to the bottom of my backlog; but it is getting much closer to a point where I can sit down and get it review.
This is just a possible solution for iOS.
This is just a proof-of-concept to show how compressed layout support could look like in MAUI and if adding such support would increase the performance or not.
This is just an idea how to fix #19752.
This is likely because #code's #code implementation doesn't take into account invisible rows when calculating #code.
This is migrating iOS to use the NavigationViewHandler including the new stack navigation.
This is minimal change which replace usage built-in COM for IThThreadMgr instance.
This is more complex for the analyzers tab but I think if we just want to do this for code style right now it would be a nice improvement.
This is mostly re-using logic from the roles branch.
This is my first PR for MS.
This is my first PR here so I would appreciate any guidance :)
This is my very first time contributing to EF so feel free to let me know if I've made any mistakes.
This is not a hard block.
This is not about the perfect being the enemy of the good.
This is not an area I specialize in and could use some guidance.
This is not expected behaviour and is inconsistent with the idea of not changing the selection.
this is not needed for functional because this size specifies the max size for gen1 _budget_.
This is not ready for review.
This is not somewhat impactful allocation but it will allow for more optimizations in the future.
This is not yet ready for merging (missing new tests).
This is nothing new and the SDK team recommends to pass the
This is on my radar to take a look at; just noting it might be a bit delayed due to other priorities for the .NET 9 release.
This is one major step to complete the shared framework on illumos-x64 and enabling msbuild/sdk.
This is one of the latest bugs preventing us from publishing our application.
This is pending the cleanup suggested by Egor above to ensure we don't regress performance unnecessarily.
This is perfect data.
This is precisely why we needed to terraform this code and cover it with tests ;) Thanks for doing this.
This is problematic but it's pretty subtle why.
This is quite odd...
This is ready for an initial review pass @github @github/roslyn-compiler
This is ready for another look.
This is ready for conceptual review.
This is ready for review again :)
This is ready.
This is similar to CET in X64.
This is split from #url to make code review easier
This is still not merged?
This is still on my backlog but is lower priority than some other work due to the API review not having happened yet (and this PR being blocked until that can happen).
This is still on our radar.
This is such an unhelpful comment.
This is the 10th group of tests enabled.
This is the 11th group of tests enabled.
This is the 1st group of tests enabled.
This is the 1st group.
This is the 2nd group of tests enabled.
This is the 3rd and final part of #42219
This is the 3rd group of tests enabled.
This is the 4th group of tests enabled.
This is the 5th group of tests enabled.
This is the 8th group of tests enabled.
This is the 9th group of tests enabled.
This is the corresponding code in the reproduction project:
This is the docs for WinUI to do focus states:
This is the exact command I've been using.
This is the exact same change in #url but for switch-expressions.
This is the expected behavior when considering the ItemsUpdatingScrollMode.
This is the expected behavior.
This is the first draft for #7749.
This is the first piece which aims to change the way we propagate #code by doing that only when MAUI commands.
This is the first PR about the API's name.
This is the main cause of the issue #10918 reported a while ago.
This is the same error some tests have on this PR.
This is the standard that is being pushed into all of our repositories.
This is to combat that case.
This is to demonstrate the methodology I've been using for measuring type load performance in context of our startup perf work.
this is to make regions behave very similarly to segments for heavily pinning scenarios.
This is to see whether we can get better error info from Helix by avoiding a timeout by not retrying.
This is very much work in progress but it seems to show promising performance implications[^1].
This is very uncommon except for in .NET 9 where we made writing JSON responses use the #code which uses the #code + #code path.
This is what I suggested in this comment: #url
This is what I'm seeing in a before-trace (I can share privately if needed):
this is where the issue comes from!)
This is why IDE0057 for #code  sounds like the devil whispering for me and I've avoided to use #code.
This is WIP and an early draft to get feedback.
This is WIP.
This isn't perfect though - these #code will set their target properties back to their default value and then back again to a new value when the second #code group of #code run.
This isn't resolved to my knowledge because this PR hasn't been merged.
This isn't the desired behavior but it isn't something introduced by this pull request so we can leave it for a separate bug.
This issue also includes #code but I haven't looked into it yet.
This issue appears when the collection is scrolled beyond the position of the added or deleted items.
This issue makes inserting the GPL license text impossible as it gets truncated.
This issue occurs only when the CollectionView includes a header.
This issue occurs when the Editor is placed inside a nested ScrollView and Grid.
This issue was a bug in the C side of the test.
This issue was introduced due to the following PRs:
This just ensures they're better isolated no matter what.
This just removes #code proxies used by #code control.
This just seems like a bug in the analyzer.
This just seems too complicated and not very practical.
This last bit not happening in DevKit seems like it is likely a bug or a gap in functionality.
This leads to #code error in designer and weird errors in code editor/Error List.
This leads to a roughly 20% performance improvement in SyntaxNormalizer in my SourceGenerator:
This limitation leads to performance bottlenecks and causes ShaderEffect implementations to become ineffective.
This locally reduced the payload of the serialized json for a single completion response from 205 KB -> 61 KB.
This looks *great*.
This looks good!
This looks good.
This looks like a great start.
This looks like a limitation of vxsort.
This mainly occurs when you have a lot of open files (Peter mentioned he had 40-60).
This makes it difficult/impossible to make EF Core generated queries use the indexed views as I suppose the query processor thinks they're different.
This makes it impossible to predictably enter masked text such as passwords.
This makes it possible to avoid duplicating the nullable expression by mapping
this makes me feel like this is mitigating a bug elsewhere.
This makes my idea impossible to execute then.
This makes no sense...note how there's less instructions and branch instructions retired and yet more cycles.
This manual change messed up the synchrony of the loc system and these translations are not being updated by their system even though the correct translations are in the lcl files.
This matches the logic in #code from here:
This means that repeated drawing of a complex PathF will not achieve optimal performance in Microsoft.Maui.Graphics.Skia.
This means that the button can either be focused or be pointer over.
This means that virtual unwind from #code or #code to their managed caller has failed - the #code has returned  FALSE
This means that we have close to non-existing test coverage for this change.
This means we can break the ProjectReference link entirely.
This means we will get the wrong normalized weight for call sites when the entry block's weight diverges from the method's call count.
This method allows the corresponding method in #code to be implemented without iterating over all the keys in the collection.
This method currently serves no purpose.
this method is no longer problematic.
This method is only called once during initialization.
This method shows up as 0.8% of VS allocations during typing in the CSharpEditingTests.ScrollingAndTyping speedometer test.
This might be wise to put into 16.8.
This mismatch resulted in an incorrect month being displayed when navigating between months in the dialog.
This modification ensures that title changes are handled properly for both initial and dynamically added ShellContent items.
This modification introduces breaking changes to the #code #code.
This modification triggers the update of this button when orientation changes.
This modifies the tracking of overrides in TypeMapInfo to allow additional overrides to be discovered on a subsequent call to MapType.
This moves us in that direction - now this target will be sequenced appropriately - and we can change from AfterTargets to DependsOnTargets in a later change.
This needs refactoring and moving into #code somewhere.
This needs to be tested with self-contained single file and AOT scenarios.
This new appearance is technically more correct as the default border is not calculated correctly.
This new behavior seems to be more in line with #url which mentions:
This new interface on the maui app builder will allow for easier reuse of code in the aspire service defaults - either the same project with some multi-targeting or a new project/file.
This new way is to make sure the unfocus happens first and the pointer over happens last.
This occurred because the content was being added in both the ApplyTemplateFinished event of the MauiNavigationView and the SelectedMenuItemChanged event during page rendering.
This occurs because QueryAttributes is not correctly set for these navigation types.
This of course increases the memory footprint of each Grouping but microbenchmarks from dotnet/performance show that overall it results in fewer bytes allocated and faster execution in cases where 100 integer elements are divided into 10 buckets as well into 100 buckets.
This one is practically a micro-optimization but the overhead of these converters will likely be present innumerable times on every MAUI app.
This one may take us a few days to think about while we sort out right direction but you're raising good design points.
This one should enable eventlog package.
This one would be nice to have.
This only affects local AP an only in the (relatively new) cross-block mode introduced in #94741.
This only happens when #code is enabled and you hit the jackpot (e.g.
This page is outdated.
This particular issue was occurring for me this past week after I freshly updated the MAUI workload/templates.
This passes the #code tests.
This patch enables PAC-RET for the libraries and binaries in CoreCLR compiled using clang on UNIX-based platforms.
this policy is only applicable for regions with only pins left.
This portion of inheritdoc was never implemented.
This potentially breaking scenarios where buttons relying on the Fluent style are left-aligned.
This PR addresses two of those.
This PR adds #code to the #code template as .NET 9 made that package AOT compatible.
This PR adds a fleet of manual tests to help us figure out the status of our localization process.
This PR adds APX new #code instruction to the X86 backend.
This PR adds automated testing to verify restoring NuGet packages for our project templates does not produce any vulnerability warnings.
This PR adds ordering logic to the processing of #codes to ensure that explicit XML on members overrides XML from #codes.
This PR adds support for partitioning and running tests on helix machines.
This PR adds test scenarios for both #code or #code.
This PR adds the profiler-log component into default build (which people ship when they don't use wasm workload).
This PR adds this to formatter.
This PR adds:
This PR aimed to ensure they both were parsed as separate values by adapting the binding logic within #code
This PR aims to enable the Profiled AOT project to migrate from the legacy #code profiler and follow the newer profiled AOT story while maintaining the single-step #code profile generation.
This PR allows developers to remove the first entry from forward stack.
This PR allows to disable the minimization and maximization buttons of a window.
This PR allows WordWrap on Labels with padding to work correctly.
This PR also addresses that.
This PR also adds translations (based on the webapi template) for these flags where possible.
This PR also bumps Appium.WebDriver from 5.0.0-beta02
This PR also changes the heuristics of when emit is used:
This PR attempts to land #27595 and #27634 after it was reverted #27595.
This PR brings the same workaround to the #code method.
This PR causes the following functional changes:
This PR changes the benchmark to let it renames #code.
This PR consists of three changes:
This PR contains 3 separate changes that take advantage of Avx512's permute behavior.
This PR conversation got messy enough that I can't tell anymore.
This PR disables the animation for showing or hiding the navigation bar when a page is displayed for the first time by setting #code.
This PR does _not_ change the user-facing #code that will continue to use #code from OpenSSL.
This PR does 2 related changes to speed up the verification of potential matches:
This PR does not present a mechanism to push a managed cDAC package to the internal feed for SOS to consume.
This PR does not resolve the issue .
This PR does not unblock the dotnet runtime changes.
This PR does the first step in that direction by doing a first refactoring pass of the Analyzer/CodeFixes tests.
This PR does the following:
This pr enables back these tests.
This PR enables us to set the quality to 'None' which was the old default behavior.
This PR enhances the assert to match the checks that happen for other RMW nodes.
This PR enhances the test coverage of the lockout functionality in #code by adding a new test case:
This PR ensures XAML escapes are removed to obtain the logical string prior to conversion to valid RTF representation.
This PR exists for diagnostic reasons and is not meant for actual merging.
This PR exposes internal implementation details such us #code that should not become public.
this PR fixes #15221 on Android
This PR fixes a bug in #code.
This PR fixes it by moving the subscription before creating the copy.
This PR fixes that.
This PR fixes the issue by making the #code not handle the #code and #code commands.
This PR fixes the issue by scrolling the button into view before attempting to click it.
This PR fixes the problem that the call does not return when the ScrollToAsync method is
This PR focuses on enabling and updating 11 testcases in Appium.
This PR focuses on re-enabling and updating following tests from the Xamarin.UITest framework to be compatible with Appium.
This PR forms part of the effort to make the JS file injected into the app at runtime like the way Blazor works: #24730.
This PR has been around for a long time and it's even more important to get it merged as soon as possible.
This PR has passed smoke tests (DRTs) and is under review.
This PR has some value in and of itself - the attribute will allow people to decided to render images at a lower quality.
This PR hopefully fixes a bunch of legacy Xamarin bugs related to RTL in the Collection View
This PR implements API proposal #8199.
This PR implements first half of #url for RateLimiterMiddleware.
This PR includes #25465 and improves it more in order to have iOS CV1 and CV2 handlers rely on native invalidation mechanism rather than subscribing to #code.
This PR includes a comprehensive set of UI test cases for **shadows**.
This PR includes a comprehensive set of UI test cases for the Slider control.
This PR includes fixes for flaky UITest cases that were causing sporadic failures in the CI pipeline.
This PR intends to format the #code with floating point numbers.
This PR introduces a call to the #code property setter.
This PR introduces internal #code instance event on the #code object and subscribes the #code to the changes when the target element does not have a mentor.
This PR introduces support for parameter validation based on #code annotations to minimal APIs.
This PR introduces the use of #code when reacting to collection changed event.
This PR introduces three new GitHub Actions workflows to help manage and notify about issues in the repository:
This PR is a counterpart to #url #url
This PR is an addition to #url and it further improves performance of first render of #code by creating #code on demand instead of on control render.
This PR is being considered for next community test pass.
This PR is built on top of #url
This PR is from...
This PR is in draft because:
This PR is meant as a shorter-term way for us to enable the F# parentheses analyzer by default in VS.
This PR is not ready yet.
This PR is really suboptimal but I think it saves ~50 ms to display each grid.
This PR is required to support #url
This PR is result of testing the parallel dependency updates to ensure source-build does not break: #url
This PR is supposed to fix it by adding the visual state that has not been defined in the derived style from the parent style to the derived style
This pr is the patch.
This PR is trying to close the gap by addressing both.
This PR just removes a few allocations.
This PR looks stale.
This PR mainly resolves #code but in some cases goes a step further over standard analyzer fix.
This PR makes #code:
This PR makes it so that a double click leads to:
This PR makes it so the root window page will now fire all of these events which thus makes the #code work.
This PR makes modules to follow whatever naming style is used for classes.~~ See review comments for info
This PR merges commits made on main by the following committers:
This PR merges commits made on release/8.0 by the following committers:
This PR merges commits made on release/9.0 by the following committers:
This PR might get merge conflicts if #url gets merged before this.
This PR modifies the relevant automation peers to inherit from ItemsControlAutomationPeer and introduces the required automation peer representing the menu item data (ItemAutomationPeer).
This PR mostly enables existing conditional chaining logic for X86 with the inclusion of APX #code instruction.
This PR moves the analyzer loading behaviors into two interfaces that can be composed.
This PR now has two main changes:
This PR only changes a few things:
This PR optimizes #code when on .NET 6 or greater.
This PR originally copied the code logic from WinUI: #url but I have updated it to follow maybe a better visual state order.
This PR relates to some issues found here #url when trying to layout a Button when it's inside a layout that is partly inside the safearea.
This PR removes a redundant job from extra-platforms.
This PR removes unneeded stack probing methods on riscv64.
This PR resolves #111558 by correcting the vector size used in the vectorization check within BitArray.
This PR resolves the case where the SelectedItem is set before the ItemsSource is set for the Picker.
This PR seems ready to be merged or at least reviewed since three weeks ago.
This PR shaves about 30-40 ms when starting the app.
This PR shaves about 50-60 ms when starting the app.
This PR shifts the reflection-based serializer to creating empty collections instead of allowing them to be null.
This PR should also fix #url
This PR should be merged after #url is merged since it might break workarounds like this one #url
This PR should fix those two cases.
This PR should run the CI and verify the current status.
This PR showed me there was still work left.
This PR simply changes that CWT to static (and ensures that only a single CachingSemanticModelProvider is in use as it only uses static data to calculate it's result).
This PR starts that process by removing usages of the #code in the #code.
This PR switches to semi-asynchronously loading chunks of the response into our heap.
This PR targets at only those evaluated as #code (not string handler or formatter types)
This PR tracks optimizing x64 floating point to integer conversions using the new saturating instructions introduced in AVX10.2.
This PR updates #code to estimate the position that would be used later to position the popup when there is no target.
This PR updates prolog and epilog of all the jit-ed methods with instructions to sign and strip encryption of link register.
This PR updates SkiaSharp to the latest stable version.
This PR updates the #code record in the QuickGrid component to ensure that #code and #code follow Pascal Case as #code and #code.
This PR updates the list of date-time formats.
This PR updates the logic to exclude non-visible UI elements from these counts.
This PR utilizes LSP to expose a simple handler interface to external developers.
This PR will not be auto-merged.
This PR would only fix the lock issue when OOP is enabled (in-proc wouldn't ask for frozen partial and OOP has it disabled).
This PR:
This preserves the original automation functionality of #code.
This prevents events such as CollectionChanged or INotifyCollectionChanged from being triggered on the original collection.
This prevents some values from being deserialized successfully in .NET 9.0 which previously worked fine in .NET 8.0.
This prevents the hacker from making us look at different variable.
This probably still doesn't fully resolve the linked issue but there are others that are related.
This problem could be related to #14719 or #15586
This proposed PR instead adds an InlineArray of size S directly into the grouping so that no arrays are allocated until the #codeth element is added to the grouping.
This provides an optimal path when Avx/Avx512 are available while providing a xplat path to fallback on for other platforms.
This PRs make sure that controls that implements #code unsubscribe from #code event avoid the control to leak if the #code lives longer than it.
This pull request applies a targeted correction to avoid problems.
This pull request attempts to add the #code methods from #27912.
This pull request changes two things:
This pull request completes the removal of 32-bit OOP.
This pull request contains the automated application of the Use Recursive Patterns refactoring from #32386 to many locations in Roslyn.
This pull request converts prior direct coupling to use the new #code support from #47951.
This pull request demonstrates ways #43641 might be used downstream.
This pull request introduces changes to the #code class and its associated components to support global endpoint conventions.
This pull request is ready for review.
This pull request keeps the fix for grouped ItemsControl and restores the original behavior for non-grouped ItemsControl.
This pull request makes #code take into account user defined preference #code from .editorconfig file when adding the static modifiers.
This pull request resolves #101000 and is based on the feedback that was given on the original PR #103868.
This pull request should not be necessary.
This pull request updates our exporting attributes to correctly represent their MEF inheritance behavior.
This pull request was auto-generated by #url.
This pull requests ensures that these types are disposed where they are created within the Roslyn code base.
This recudes the code size roghly to what it was before and also makes some cases faster.
This reduces noise in the logs for common client errors.
This reduces the number of async locals as well which is a plus.
This regression was reported by the customer.
This repurposes the touched file logger so that we can correctly record which files were emitted to disk by the compiler.
This required the CompletionChange class to now allow the data to represent a selection instead of just a cursor position.
This resolves #110244
This resolves #code occurences after forcefully triggering #code against the #code methods.
This resulted in the previous platform view being incorrectly assigned as the #code.
This results in a poor user experience when interacting with the overflow menu.
THis risks paying the same price again when we now actually do the work in proc to get the refactorings.
This schedules the following code block to the dispatcher:
This screenshot seems to have already been added in the following PR ⁠#27028
This seems fine to me.
This seems like a weird edge case and I believe we should throw so the developer fixes the XAML.
This seems to be Defender related.
This seems to be present way back.
This seems to have been @github's proposal
This seems very promising to instantly improve performance without changes in a codebase ( again from a user/customer pov)
This should allow you to re-enable some tests on mac and not avoid running tests related to dragging on coordinates in the future.
This should be a top priority for the team to review + come up with a feasible solution targeting .net9.
This should be dependent on language version 7.3 (or probably #code) due to the fact that it depends on #url for example in the translation of
this should be enabled as well
This should be ready for merging if there are no other concerns.
This should enable writing more portable code.
This should helps with known build error #url where the warning can hide another errors
This should improve the layout performance of all .NET MAUI #code on Android.
This should only affect behavior on Windows x86 when we aren't using funclets.
This should unblock #url
This shows that sample points are also inserted into AOT methods.
This shows what is needed to workaround #url as a fix for #69284
This sort of application specific consequence can be handled if we maintain the ability to get the errors that are arising and react to them.
This sounds reasonable to me.
This sounds reasonable.
This source generator:
This special case dates back to the initial commit in this repo.
This special-cases #code to avoid allocating an enumerator instance if the underlying list of claims is a #code.
This specific test that failed passes just fine in me.
This starts to clean that up.
This still passes the System.Diagnostics.Process tests.
This still uses an intermediate object in consumers like
This support is implemented via compile-time source generation and takes a dependency on invocation interceptors and endpoint filters.
This switches Appium and Android SDK to provision via MSBuild targets instead of cake/ps1 scripts and puts all of the version and api level/sdk package info into the Version.props to centralize the source of truth.
This takes care of a TODO left over from #110736
This tends to increase the attack surface of the application and should only be performed if it's absolutely required to meet some performance goal.
This test seems to be failing consistently:
This test won’t reach codegen.
This throws an #code.
This time it's an #code condition.
This type is JTF-agnostic.
This unifies the handling with how the generic context and other arguments are handled.
This uses the shared DataFormats code from System.Private.Windows.Core.
This was also taken directly from #code:
This was because some MSBuild NuGet packages themselves don't target netstandard and so we wre forced to do the same.
This was because the initial syntax node filter only considered methods with explicit generic types.
This was closed on accident.
This was created with:
This was done in #24417 but it was #url.
This was due to a wrong assumption on unconditional relations for which I couldn't come up with a test scenario at the time.
This was necessary to resolve build warnings that only appeared inside Visual Studio.
This was overlooked in #9365 where it has previously made sense but after the change it is no longer the case.
This was problematic for Mono.
This was reported as a .NET 9 issue so I will propose a backport.
This was reviewed and decided upon back in 2019.
This was showing up in a trace causing bind.
This was the only way I could find to trigger a TaskCancellation on messages sent to the WebDriver which then lets us just shut down the whole server and fail the entire run immediately.
This way we don't need added complexity to check various edges cases.
This way we're again only looking at the lower 6 bits.
this week and ran into problems downloading stuff.
This will allow the size of the overlay portion to update on rotation.
this will allow us to more easily remove runtests once integration tests switch over.
This will also prevent defensive copies.
This will contribute to startup performance mostly.
This will disable round corners see
This will eventually be closed by the #code finalizer (see comments in that method).
This will have the biggest impact for types with custom binding sources that don't go through the serializer.
This will have to wait for embedding to become a priority.
This will inevitably result in all the content on it being rendered using the CPU.
This will merge at some later point when we're comfortable with it.
This will provide insight into things like how often unknown key identifiers are encountered.
This will reduce memory usage for CCWs created using ComWrappers on NativeAOT.
This will reduce the call stack from event invocations by N number of items that are being added to the collection.
This will require the introduction of a new ValidationOptions object somewhere in the Http namespace.
This will trigger the breakpoint.
This will wait behind a few of @github's PRs since there's going to be merge conflicts.
This won't magically make things resilient to the #code throwing exceptions will it?
This worked for most cases but not all.
This would allow us to fold a few layers of a recursive method.
This would be a breaking change though.
This would be great.
This would be significant for iPads running iOS 17 from what I have seen.
This would close this one: #url
This would ensure that an attacker could not change them.
This would force users to use interpreter instead.
This would have been caught earlier if #code error handling was enabled.
This would lead to #code sometimes succeeding but having a type handle that is not usable.
This would work for direct multi-targeting but would mean we're no longer doing file sharing for things like shared projects or linked files.
Those absolute paths you are adding are incorrect when the docs are viewed locally.
Those can be fixed of course and I don't really feel strongly one way or another but we need to be careful.
Those dependencies should come in via package references (coming transitively in from the #url).
Those figures look quite a bit better on the PR
Those need to fixed.
those that implement IList and ICollection.
Though I think my suggestion of removing the use of #code in your benchmark still applies.
Though i'm super bummed there isn't just a uniform format here.
Though I've already spoken with him yesterday :)
Thoughts on making it a compiler feature?
Thoughts?
Thougts?
Throwing exceptions in an event handler is a really bad decision that should have never been allowed to happen.
ThumbColor not getting changed even if set using DataTrigger.
Thus the potential for the deadlock was present for a long time.
Thus we can end up hitting the assert.
Thx
Time spent is cut by 2/5 which is more impactful in this case.
Timeout in the integration tests are not related.
TL;DR we should definitely think about bootstrapping more holistically.
to
To 11
To disable response streaming (and allow sync reads) set #code to #code:
To do that both handshake and decrypt have new #code that deliver events.
to find interesting results.
To further explain my reasoning/hesitation on this change:
To implement the proposal I have made the following changes:
to make it consistent with changes in Roslyn done in here: #url
To me it looks like everyone supports this change.
To me it looks like that PR could be the start of a new API proposal.
To me it might make more sense to do it in the same place as the original i.e.
To name few of them are: -
To over come it we use Framer approach pretending we are implementing custom protocol.
To respond to #url:
to update the #code and #code in the application itself after loading.
To use #code instead of #code.
To validate the changes can use the added sample in the UITest project manually or using the test.
To validate the changes can use the new added sample to the WebView galleries in the .NET MAUI Gallery App.
to your CollectionView
To-do:
To: dotnet/maui ***@***.***>
Today the exception handle middleware always writes the #code log message (skipped if the exception is related to the request being aborted).
Today the methods don't work with any non-seekable file descriptors.
TODO
TODO (future):
TODO (this PR):
Todo tasks:
TODO work:
TODO:
TODO: add more notes here
TODO: Stress testing for this is still needed to ensure this assertion isn't fired anymore.
TODO: The HandlerProvider adds the ExtensionMethodHandlerWrapper to its handler map and calls SetupRequestDispatcher to add the RPC method.
TODOs:
Tomas
Too many nested types being added to the completion list that
tool (#url and verify that there are no changes or
Tools exist to look at the executable code of a known program (or library) and build a library of gadgets (which is why I'm concerned about protection of CoreCLR code over jitted code).
Touch interactions now also trigger the PointerGestureHandler events
TP impact is <0.1% across most collections.
Trace recorded using some of the native APIs:
Trace:
Tracing depends on C runtime shutdown notification to close the session: #url
Tracked at #112036
Tracking (usually mobile) apps in most cases track small displacements.
Tracking issue:
TransactionsEtwProvider incorrectly allocated the same event Id (11) to METHOD_ENTER_LTM_EVENTID and TRANSACTION_CREATED_OLETX_EVENTID events.
transitive or pinned to latest).
Translate string functions that also take a char as a parameter.
translates into
Translation of
TreeView ToolTip
TreeViews have some problems.
True!
Try and avoid that by marking the hash as a volatile string and implementing comparisons/copying/initialization that respects that.
Try build with public agents
Try displaying the HUGE image in various controls.
try it on new architecture where code inside #code is giving trouble).
Try this out and let us know: 9.0.40-ci.main.25073.66
Try to address the #code issue in this PR as well
Try wait the applicaiton to become idle to see if it fix
Trying if we can pick up #code from brew on OSX correctly.
Trying this code on cobalt 100 shows quite an additional speedup (previously vxsort was running at ~150ms)
TS pr to remove legacy impl: #url
TSPLIB gives each block a 1-indexed ordinal based on the order in which their distances are reported in the problem file.
Turns out for some reason 2 extra spaces get generated at the end somehow.
Turns out it gets added as part of the funcletizer #url
Turns out the SSE2-only version is faster on AMD as well.
Turns out this should be sufficient and work on all runtimes
Turns out we have >2000 errors but I didn't realize that before I started randomly updating bits of the code in reaction to some of the errors.
Two existing steps in the conversion have been applied in the correct order.
Two main changes in this PR:
Two runs using head:
Two runs using the PR:
type scoped) and the fact that local functions can potentially capture locals.
Types are considered validatable if they:
typical results: #url
Typically these sort of design-time dependencies should not be represented as package dependencies that would leak into the user's application / output directory.
Uff needs rebase again
Ultimately I suspect this is related to the switch from WindowsBase to System.IO.Packaging for #code et al APIs: see #url and linked issues.
Un-draft it once it is ready for another look or if you have questions.
Unable to load Analyzer assembly runtime/.dotnet/sdk/7.0.100/Sdks/Microsoft.NET.Sdk/analyzers/ILLink.RoslynAnalyzer.dll :
Unblocks #url
Unclear.
under Your patent claims that are necessarily infringed by the Submission or the combination of the
Understandable could be request to make it work the same way as for the Grouped ones (using directly value from .HasHeader than from custom bool field) but holding this PR back just leaves unnecessary bug in code.
Understood.
Unfortunately it is not possible to trigger the analyzer against explicit interface implementations (e.g.
Unfortunately this doesn't work:
Unhandled exceptions are rethrown back into the middleware pipeline.
Unit tests?
Unknown.
UNLESS
Unless some developers rely on using reflection to get fields.
Unless static constructor of DatePicker.cs is fine.
Unless the line of code where it inputs the actual text into the code has 2 extra spaces.
Unless you think there is (or could be) a specific issue with the translation of MathF.Floor around the cast?
Unlike string arrays combined enum values (e.g.
Unlikely.
Unneeded casts.
unneeded checks (if-statements) that happened.
Unrelated test failures:
Unsure if there's a better person to ask this.
Until lowering these are supported with arbitrary fields; unlike call arguments the fields are not required to map cleanly to registers.
Up to compiler team on if they would want to pursue any changes in the impl to bring it in line with what we think the spec says here.
Up to you what you want to do with it.
up-to-date version of VS.
UPD#2: It seems this bug was introduced by #url
Update ButtonContentTypeConverter to use #code when performing #code.
Update my PR with the new #code check to address the sizeof/positionin set issue.
Update reflection stack to be able to deal with a null type handle if and only if this is a reference type and nobody actually allocated such reference type.
Update the dnceng-public build pipeline to also build the sln.
update with my suggestion in my previous comment)
Update: eventually didn't occur
Update: this is not available on nightlies.
Updated :)
Updated ~~#url *#url and this PR* to special-case #code and use #code when there are no spreads.
Updated adding more validations etc.
Updated test snapshot.
Updated the ArrangeOverride implementation to handle both the base arrangement and the custom layout logic for the _content element effectively.
Updated the syntax node filter to include both explicit and inferred generic type arguments by changing the filter condition to #code.
Updated the template to remove the conditionals that exclude the .sln file for dotnetcli.
Updated this PR to add this optimization to another file.
Updated to a newer commit from main and then look into why the compile errors happened.
Updated to fix a comment (nit)
Updated.
Updates from the runtime side: #url
Updates the jquery-validation scripts to 1.20.0
Updates the single-file bundler to use the managed Mach-O signer.
Upon further inspection of UpdateTrackingSessionIfRenamable it was also suspicious because it was having to grovel in the state of the active session to know if it should call CheckNewIdentifier.
Usage of Connection GUID for WinHttpHandler to eliminate calling custom validation callback per request.
Use #code attribute to allow for source-generation of regexes at compile time for improved performance.
Use a nuget.config to add that folder and then install the package/set the version number in your csproj
Use BatchFixer to support fix all for IDE1006.
Use JITLateDisasm to check for a valid decoding of the byte stream through LLVM disasmbler
Use of a later version with any of those
use of Compiled option for non #code+ (performance)
use of source generators for #code+ (performance)
Use the modern #url via the #url's for selecting a photo or video.
Use WorkspaceKinds flags enum in ExportWorkspaceServiceAttribute.
Used by SOS to get the name of a given Frame.
Used in conjunction with #code.
Used the repro in the issue which crashed before this PR and passes with this PR.
User action:
User can input text when keyboard is open in picker.
User scenario was validated manually and new unit tests have been added to cover it.
Users are advised to use #code instead.
Users will get less buggy experience migrating to Fluent Theme.
Uses #code in places that previously used #code or #code.
Uses existing optimized DoubleUtil methods instead of DoubleUtil.AreClose.
Uses of this were very limited: #url
Uses the single argument overloads of #code and #code instead of 2 arguments ones for lowering #code.
UseSafeArea and IgnoreSafeArea are most relevant on iOS alone due to the unique layout constraints of safe areas.
Using #25671 UI test I've been able to measure the benefits of this PR over #code branch.
Using #code in a few cases when .NET Framework APIs are returning fresh #code that are safe to convert inline to #code.
Using #code seems to be wrong?
using #code.
Using a Stopwatch would make the behavior stable and predictable.
using nameof instead of strings
using nameof instead of strings and rewrote some unefficient nullchecks.
using nameof()
Using P2Ps means that we now follow the common and well supported
Using pooled arrays increases the attack surface by allowing other components of the system to have managed references to sensitive key material.
Using the output of #code; while without publishing as R2R all those things were.
Using the repro in #7289; sample apps use.
Utilizes our current LayoutOptions to indicate how you want a TitleView to layout on the screen and removes the default horizontal margin so that we can customize it.
V8 uses a fundamentally different approach that indeed won't be dependent on pipelined ordering.
Validate with symchk.
Validated performance with Jared and Cyrus by replaying a build of roslyn and looking at the trace.
Validated the behavior in the following platforms
Validated the behaviour in the following platforms
Validated TS and F# both work as expected with this change.
Validating failure case
Value of #code must be trimmed of trailing backslash on Windows _after_ path normalization.
ValueTuple implements multiple interfaces and as a result contains a lot of code that generally can't be trimmed.
var modalPage1 = new ContentPage();
var modalPage2 = new ContentPage();
var window = new Window(new Shell() { CurrentItem = windowPage });
var windowPage = new ContentPage();
VB changes are not.~~ Both are ready now :)
Verified in #url that all of the same assets that we expect to produce in a runtime official build are produced on this branch.
Verified that changing visibility works on .NET Framework (but Reflection isn't updated) and .NET 9.
Verified that TypeScript and F# no longer uses these.
Verified the issue in #8249 repros for Sinhala and Persian (Standard) layouts but does not repro with the fix (using #code).
Verified we have identical diff #url and #url the refactor commit.
Verifying on scouting queue (17.4p1) that these test pass
version 7.3 of the C# language.
Version v14.0 of the Graph API was supported #url.
Version:      8.0.0-alpha.1.23079.4
Version:   8.0.100-alpha.1.23061.8
Vertical padding set on the recyclerView affected the rendering process.
very few refactorings accepted selection and when there were very little
very low
Very low: localized fix replacing with a faster but equivalent method.
Very much agree.
Very old PR ...
Very quick PR to fix #19640
Video - Testing
Viewer:
Vincenty iterative
Vincenty optimized
Visual states from parent types aren't being applied to derived types.
void OnScrollToRequested(ScrollToRequestedEventArgs e)
vs
VS uses either the kind value or the _vs_icon value in LSP completion to determine the icon to display.
VS Validation:
VS-Platform: #url
VS).
VSCode already has a very different set of features and shortcuts.
VSCode should probably consider updating to the move-line-down behaviour.
Vxsort is integrated into GC for Arm64.
Wait to review + merge until attached API proposal is reviewed.
Wait...
Waiting 100ms is enough to let Android adapt its interface.
Waiting a long time on windows just so we can see how long it really takes instead of slowly incrementing to let the tests finish.
Waiting for #url to get merged
Waiting the build to complete and review all of them.
Want to see CI impact of satellite assembly reduction
Wanted to get to a full review of this today but probably won't have time.
Wanted to know if you were able to test your fix with the sample application or not?
Was anyone being successful prior to this change?
Was just finally able to get through the review on my end.
Was my understanding not correct?
Was there a specific reason why this got closed?
Was thinking about that and had already had some more changes e.g.
Was this just for testing?
Was this run by Jared?
We allocate a lot of them.
We allow #code to be referenced normally and deployed with the application if certain operations like migrations management need to be performed at runtime.
We already have bespoke mono profilers and viewers.
We already have IsHiddenPosition (which i wrote a long time ago :)).
We already have this code which sets the ~same default for testing:
We already use this suppression in gen-buildsys (used by CoreCLR but not Mono).
We also need compiler/analyzer review as this touches those layers.
We also need to add unitests for the new regex QuickInfo provider.
We also originally discussed some split DNS query with @github and that can be possibly done separately.
We also should add a public doc page for these warning codes (at least a few are missing).
We appreciate you looking into this <3
We are adding some settings related to LSP Inlay Hints and we'd like to get this terminology consistent across the different languages.
We are affected by this as well any estimate when this will be merged ?
We are aiming to address this in the early stages of .NET 9.
We are auto-formatting your source code to follow our code guidelines.
We are discussing the design.
We are following the #url to add the new instructions and optimize the x64/x86 conversions.
We are going to enable tests in blocks in different PRs.
We are going to migrate tests in blocks in different PRs.
We are holding back on a larger release for one of our customers apps because the performance is unbearable in some cases.
We are interested in seeing this change land in MAUI.
We are setting MslAltitudeMeters as the default value for #code.
We are trying to convert our mobile project from Xamarin and this issue is preventing us from doing so.
We are unable to easily recover from these as it happens before we get to the queue processing.
We assume that there is a single copy of the apphost hash in the apphost binary.
We basically call #code function and we provide lambda that would be called once in the future.
We can align the label to the parent node instead to fix this.
We can compare to the original NET7/NET6 behavior:
We can consider fallback logic for endpoints that need to be discovered dynamically by including a fallback implementation in the #code call.
We can consider this as an optimization in the future.
We can consider this change for .NET 10.
We can create the System.Windows.Media.Animation.BackEase from xaml without reflection.
We can define metadata attributes in other ways that might let us share things differently?
We can discuss this when we meet later today.
We can do either or both of these options:
We can do this by checking whether the field is:
We can emit the function-pointer based thunks for arbitrary instance methods as runtime intrinsics.
We can find a VM person probably if you don't know this area.
We can get it into the .NET 7 release if you just let us.
We can ignore the System settings by the code:
We can just go over the handlers directly.
We can keep P/Invoking for non-linux:
We can look at this as part of a larger change that has improvements too.
We can make this a bit better by writing a new Java method:
We can make this same change in .NET MAUI's default #code Android theme:
We can merge the #code and #code fields to local variable.
We can move it to main.
We can not run the WPF application in the system which version lower than win7.
We can note from the execution times that the impact on JITs throughput is difficult to distinguish from the noise.
We can reenable it for Windows once the PR has been merged.
We can remove the count of non-visible items.
We can resolve this issue by using gravity along with the text alignment logic.
We can skip that #code operation if we swap out the shuffle for a permute.
We can solve this similarly as above case.
We can then add a few targeted tests for the sync case which check that the appropriate exception is thrown.
We can use RawStylusInputReport.Data to return the original array
We can use System.Windows.Interop.Imaging.CreateBitmapSourceFromWICBitmapSource to create the BitmapSource from WICBitmapSource.
We can use that to figure out what went wrong.
We can utilize this to significantly reduce our lsp completion payload size.
We can't change the color of our navigation bar to anything but white without having unsightly gaps on either end.
We can't risk stability at this point with existing apps.
We clamp the scroll offset values to ensure the item does not scroll into a negative position.
We combine the base dictionary with the dictionary for the current test and use that to verify the different properties of the control in that state.
We could add a timeout though to mitigate that.
We could claw back some of the TP by only creating these unused things on demand.
We could copy the required files and change to internal.
We could experiment here to see if making it smaller would work fine perf wise or not.
We could make a prototype for this for sure (ObjectCreationProvider already does this if that's the inferred type)
We could make it ILLink feature.
We could rely on the fact that we won't see valid pointers under #code and use that to recognize if we have a pointer or some value there.
We could use one of the existing patterns: #url (simplest would be: #code).
We could wait and see if customers have feedback relating to retrying the reconnect and try getting this change into a patch.
We decided to take this specifically without an option.
We define this globally:
We definitely don't want that.
We did a prior PR here #45266 to properly document and test the existing behavior; this PR actually changes the VS Workspace to match that.
We did a simple fix for this.
We discussed internally and we'd like to revisit this change in a month or two once we are done with feature work for C# 11.
We do dynamically link to release CRT (ie the shipping bits link to release CRT).
We do live with that one.
We do nearly all our testing in this repo on portable builds.
We do not dynamically link to debug CRT to save us from troubles with deploying it to CI machines.
We do not need first class C# support for instance method function pointers to make it work.
We do not ship this DLL in any package since v3.0 (Dev16).
We do not want to add a new options for this.
We do want to write code in more intuitive ways and only do such manual tweaks and tricks for critical cases.
We don't have any tests that exercise assigning values other than generic parameters or known types to generic parameters.
We don't have LLVM or LLVM version requirements for PublishAot.
We don't have this information at the Handle creation time.
We don't keep track of unconstructed generic #codes because of #url
We don't need to try to detect and handle it.
We don't want to call into that one :)
We encountered #url bug in the community toolkit touch behavior.
We expect that to be decided in 10.0 and that should help us determine if we move forward with this PR or need to it change.
we found a property instead of methods).
We had a discussion about this in the linked PR and it sounds like others agree on this as well and we should make the change eventually.
We had a workaround for that for #code method.
We had all 3 bugs since the API was introduced (.NET 6).
We handle the typing command handler so the code **looks like** can't be edited when commit is in-progress
We have (undocumented) #code build property to set the default stack size in Native AOT binaries.
We have a command bar without a defined style.
We have a ConditionalWeakTable that ensures that we don't create more than one TextBufferContainer for the same SourceTextContainer.
We have a single constant “StubPrecode::CodeSize” that is 24 in this case.
We have actual options (for editorconfig) that would need their name changed.
We have already support for Intel CET for Windows and we are planning to add support for it on Linux as well.
We have an offline conversation going about this.
We have asked telemetry to give us a system to log that isn't problematic.
We have been using byref arithmetics all over the place just because of we can - I have stopped commenting on it.
We have been using the same OS callback on NativeAOT for several releases.
We have existing infrastructure for doing cycle-avoidant type loads in cases like this - #code - so we just need to sense that we've encountered a scenario where it might be necessary.
We have finished the SIMD on the runtime6.0 and the tests passed.
We have logged a separate #url for this.
We have some docs here: #url
We have started with the CTP's and will try to get to this PR as soon as possible.
We initially had to revert this PR because of a conflict with ScrollView that was uncovered #url
We intentionally reserved 'Manual' for a future option which does not run at all except by user action.
We just haven't had cases yet that fell into the patterns for which we have production-ready alternatives.
we just need these sizes to be multiples of a power of 2 number.
We just remove an incorrect error.
We just want to capture past conversations so we don't forget them.
We just want to proactively port this fix so that it's ready should we need to patch in the future.
We like the #code idea and we'd like to see this done.
We load all persisted options up-front so we can make a proper snapshot of an OptionSet that can be serialized and checksumed properly.
We may consider extending it to be also supported with #code.
We may end up recomputing the frozen partial many many times because the frozen partial expires after .1 seconds - #url
We may still use portions of it for a different snippet feature.
We may want to do some optimizations to mitigate the regressions.
We may want to hold-off this change until 9.0.
We might expect some improvements for performance as well since it also enables LTO for VM and GC
we might not want use the count but rather use the space to estimate to be more accurate.
We modified the ViewController property to be a weak reference so we need to account for scenarios where it might become null without us realizing it.
We need some automated tests validating that options are correctly propagated.
We need that information so we can determine which ones are costing so much so we know where to put our efforts into.
We need the color itself to set the colors on the view.
We need to raise the priority of finding a solution to this.
We need to take this to a design review to make sure we are ok with teh rule now causing warnings on things that were previously.
We need to update images tests for CarouselView
We noticed that the checked version builds successfully and passes all the tests as that of main.
We now track a flow state for #code so dotting off it twice in a row doesn't produce a warning the second time.
We only use regexes in two places which could effectively be removed but for now we should at least take advantage of the highest-performing form of regular expressions on .NET.
We probably need some more discussion with LDM first.
We recently vastly simplified the #code control on iOS #url which looks to have fixed the issue we were running up against.
We removed setting the switches (same change as this PR) in #url for 9.0 so it's hard to say.
We replace as many manual string concatenations and string.Format with interpolated strings.
We run the issue of exiting the program before the data gets written in memory.
We saw compilation time increased by 1.6% (+/- 0.37%) while compiling all the methods in #code using superpmi on a Graviton 3 system.
We see some issues with this in 10.0 See: #url
We should be able to minimize the perf hit for collectible assemblies by piggy backing on the #code field in MulticastDelegate.
We should be talking numbers.
We should be using lsp for new features.
We should capture and compare bitmap images in various states.
We should check if the cursor's bottom position goes below the keyboard; we have to update the y position of the content offset based on the difference between the cursor's bottom position and the keyboard frame's top position.
We should definitely take this.
We should discuss this change thoroughly before proceeding with the merge.
We should fix that.
We should inspect the assembly code to ensure everything is working properly.
We should not be treating ThreadAbortException as fatal in the first place.
We should not use LTO on native AOT runtime binaries.
We should push for this to be fixed where it is broken.
we should remove only it's #code entry.
We should talk to @github to see what the appropriate way is in testing to wait for the search window to actually become visible.
We should use #code instead of #code as the alignment of a type #code may be less than its size.
We should validate that it is actually the case.
we shouldn't have code enabled just because they don't produce a noticeable effect because later changes may cause a code path to have an effect inadvertently.
We show a progress bar to the user when the document symbol tree is being created for the first time.
We took this one for design review on Monday.
We try to keep these precodes as small as possible.
We use #code with #code to get the exact #code for a devirted GVM.
We used a V1 machine instances that had Ubuntu 22.04.5 LTS for the analysis reported here.
We want to avoid situation where .NET is broken in various ways on machines with PAC support.
We we include the full libraries run in the extra-platforms.
we were discussing internally.
We were intently calling #code in the branch condition every time because the JIT can recognize the pattern to remove unnecessary bound checks for array access inside the branch.
We were using the incorrect knob.
We will fix our own applications...
We will keep you updated.
We will look into the feasibility of this change after the holidays.
We will need to investigate further.
We will revisit the API again on Monday.
We will see what we can get.
We will show people how to add a middleware back and adds this information via a logging scope or activity tags.
We will work on enabling more rules in future PRs.
We would like to unify the approach to Go To Definition so these problems don't continue to arise as new languages are incorporated.
We would need E2E tests to validate the behavior and make sure that it doesn't break in the future.
We would need to either revive that logic or to implement an extention on it.
We'd also need to cover the case of DeriveType : BaseType (e.g.
We'd be interested in looking more closely at how exactly this fix should work.
We'd def like to get it in too :)
we'd need x:Shared support for that
We'd probably need to wait for the new SDK to flow to this repo but we just did an upgrade and we could do another one.
We'll check this report #url
We'll have to take that issue to the next IDE design meeting to see if we want this feature to handle those cases.
We'll look into it.
We'll probably want to update them so they account for the expanded support.
We'll see what happens in validation.
We're awaiting the update.
We're basically missing the advantage of having parameters in the first place: that the same query compilation artifacts can be reused without recompilation even though the (parameterized) values change across executions.
We're blurring this distinction by making users pass an offset which they should expect to be ignored.
We're getting there.🍻
We're going to go with: #url  I thin this can be closed out.
We're okay with keeping this in 17.5 :)
We're running out of time to add new APIs.
We're still working on getting the right API for this.
We're truly glad to hear that it resolves the issue.
We're using VS and VSCode mostly.
We've had the new UI for at least a year now.
We’re experiencing a production issue.
Web application is receiving concurrent requests (256 clients).
Web socket
Webkit #url
Well
Well now I'm confused..
Were you able to benchmark the perf impact of this change at your end?
Were you abler to retest this after the changes induced by SetterSpecificity ?
What about #code?
What about floats that end with .
What about that the number of info could be set via Tools -> Settings.
What about we special-case for #code to filter it out?
What am I doing wrong that it's not kicking in?
What are examples of data that doesn't need to get sent?
What are the motivating scenarios?
What are the next steps for this PR?
What are the next steps?
what bug will occur from returning #code?
What can we do to build confidence here?
What currently happens is every test takes 1 to 5 minutes to fail while each command runs and times out.
What do you need this for?
What do you think @github ?
What do you think about this?
What do you think?
What does the performance look like for #code sources that are neither #code or #code?
What does this look like when you change the system theme to dark mode?
What does this mean?
What exact problem hare you seeing here?
what exactly causes the difference?
What exactly we are trying to accomplish in this PR.
What happens for a method with say 10 recursive call sites?
What happens if the bitmap source uses pixel format that WPF does not support?
What happens is as follows
What I could see doing is adding this as another parameter option to the template (eg: #code) and pivoting the template to remove some things or change some things depending on if this is set or not.
What i think makes a little more sense is that when we remove the member in the first place we check if it has unattached leading comments on it.
What I'd like to see is something that keeps a better overall balance.
What i'm concerned about is when the type truly is *straight* collection-like.
What I've tested on 32 bit:
what IBrokeredSettingsManager  is?
What if 6 exceptions per page was ideal for an other developer in a different type of project?
what if we encourage people to phase out usage of logger scope and use Activity instead?
What if you just omitted all your references by using #code and you made your consumers responsible for bringing those in the cases they need them?
What is blocking progress here?
What is left to do?
What is the best place for these tests?
What is the best way forward for the type issue?
What is the design need for it?
What is the error message we generate to unusable type handles?
What is the impact of fixing this issue?
What is the issue with the dependencies being present in the output directory if they aren't referenced from the app?
What is the proper way to handle this case then?
what is the status of this pull request?
What is the status on this?
What is this rule and the justification for enabling it at all?
What kind of feature switches would Browser/wasm sample apps want to turn off/on?
what kind of testing has been done on this change?
What perf gains do you see with this?
What scenario would be negatively affected?
What should I do when I want another round of review--just click #code?
What tests are we adding to guard against it in the future?
What tests were added?]
what the API is for it?
What this entails..
What tool are you using to inspect allocations?
What was the alignment issue that you have mentioned in #url originally?
What we (roslyn) caer about it what is causing hte total time to be that high.
What would be the flag?
What would be the point of including this information in remarks?
what would be the preferred way here?
What would you like me to do?
What's left to be done here?
What's the goal here?
What's the preference for the action here?
What's the status here?
What's the status of this PR?
Whatever you all think is best I'm happy to implement it.
when #code is true it just needs to align on #code and after seg sizes for soh/loh/poh are computed we do this -
When #code is turned on it wraps the expression to read the field value in a try...catch statement
When are we getting this feature available?
when debugging.
When deducting the negative spacing from measured value(Width / height) in Measure() of LayoutManager.cs it will return negative value in Measure override of MauiPanel.cs.
when full solution analysis is on.
When I comment out the #url I get the correct project.assets.json content for net9.0 (again search for type project): #url
When I get more time to look into it I'll update #104535.
When I open that however (#url there are no test failures there either.
When I was fixing  #url I've realized that the logic for handling incomplete writes has a bug.
When is this adjustment ready?
When LSRA builds uses for the operands it needs to mark op2 as delay freed to ensure op2 and the target do not end up in the same register.
When merging#url  we got some failures that we disabled to get the branch merged with latest changes.
When normalizing a subset of a syntax tree final newlines aren't added.
When running #code I get some failing tests though nothing related to my code: apparently is some are about locale?
When running on non-windows machines this means changing '\\' to '/'.
When setting input transparent to true for content page it has been put into a wrapper view which causes weird behavior and sometimes crashes the app
when should I use named parameters?)
When the #code is set to #code scrolling down in the list and adding a new item does not move the newly added item to the first position.
When the selected index was equal to -1 the platformPicker.AttributedPlaceholder has been overridden by platformPicker.Text
When there are multiple navigation targets under different headers
When there are multiple navigation targets.
When there is only one navigation target.
when using assemblies produced by the current source code versus assemblies in a baseline set of packages
When we are running an APC Callback we are not allowed to SetIP because when APC Callback is resuming it will check if the IP is not changed if CET is enabled.
When will these changes get updated into the main branch?
When you get time to come back to it and address feedback feel free to publish again.
Where can I see the value of #code?
where I put the flag in relation to reference to the #code archives.
Where is the doc for the flag so I can read up on it?
where the #code is getting swallowed
where to put the unit tests?
Where were you thinking?
Where would it break?
Whereas anything produced by the jit is harder to know in advance.
Whereas this testing would need direct access to the vxsort routines.
whether I created all files (e.g.
Whether or not that method is 'local' or a 'sibling' to me is rarely what's relevant.
whether the code matches the convention of this repository (e.g.
Whether the form/control automatically scales should not be linked to the handle
whether we believe our way is abosulte right way?
which all do _the same_ work.
Which at worse case we could test and copy locally.
which has yielded these results:
Which is not very different from Type.GetType sometimes succeeding and having type handle that is not usable.
which is supposed to be suppressed here:
which is then reset back by the dispatched code above.
Which isn't a valid substitution in the scenario where it's self-referential through a generic parameter or implemented interface.
which makes all the exported symbols in the indicated #code archives to
Which provide an evidence of ~10% of max app allocation size and ~7% RPS improvement.
Which seems to indicate that the libunwind is compiled to support unwinding of multiple platforms.
Which then calls #code in a loop on each binding
Which then unapplies that particular binding and then applies the new binding.
which will let you write a test and validate behavior
which would match what we are doing for the new visitor in C# but will throw if a #code gets passed to #code.
while adding a color to the first gradient works
While fixing this I noticed that the test project containing the AxHost tests is different from the test project containing the NativeTests.dll - so I tried adding a dependency to the CMake NativeTests but doesn't seem to work.
While reviewing @github's PR #url I discovered that the code for switching to the #code and #code states was all dependent on the control being enabled.
While running the sample app on **Windows** in [this branch](#url
While that may be generally handy and similar to our 'async` it creates significant complication and platform difference.
While users should move to the new typed APIs they cannot always change everything.
while we are still holding the msl we know exactly whether the allocation is going to succeed or not so you could do a normal inc/dec on a per heap count.
While working on #url I noticed that C#-specific projects were being restored when running #code on these VB-specific tests.
Who are the best people to talk to to find out?
Who has time for a call to provide some context to the new owners?
whole-program-assisted guarded devirtualization is not happening when trees are in this shape)
Why are they unused?
Why are we adding typescript tests?
why are we ever showing errors inside hidden code.
Why aren't these analyzer implemented as a part of #url?
Why can't SQLite be an explicit dependency of workspace?
Why didn't this line get the treatment?
Why does it matter at that point whether the entity you're passing is a local function (that is being converted to a delegate) or already a delegate instance?
Why doesn't this use the #code?
Why don't we do it currently?
Why is ' preferable to „ and ”?
Why is it an FCall in the first place?
Why is MacOS apparently skipping these tests when the SkipOnPlatform does not list OSX?
Why is razor asking if a document can support diagnostics?
Why is this better than what's already in our docs?
why isn't r1 being used?
Why isn't this just a dependabot entry?
Why not just create an immutable wrapper for a mutable dictionary (which I think Andy suggested in linked issue as #code)?
Why not provide a (ThreadStatic) event in StylusPlugin for error trapping and let the application developer decide what to do with them?
Why the background task will dead lock?
Why u didn't use MarkupExtension now in all Classes?
Why we define the  #code and #code fields?
Why we use #code here?
Why were all the props moved to the targets file?
Why wouldn't we a number?
Why:
Why?
Will #url plus your idea break applications as badly as this PR?
Will change this to branch from net9.0 branch at some point.
Will consider raising new issue to apply comment markers to the start of each line.
Will continue to
Will continue to address the review feedback and look into the failing test in a day or two.
Will discuss with @github to see if there's an opportunity here.
Will do in an hour
Will do that today
Will do!
Will first address various size regressions in separate PRs before moving forward with this.
Will get back to this shortly
Will grab a binlog and take a look
Will have design meeting next week and would love your input beforehand.
will it be merged soon?
Will later give a full list of the tootilp
Will only merge if the linked Mono issue is fixed.
Will probably close if I couldn't get it to work correctly and leave that to someone smarter than me.
Will reopen for continued investigation if #51976 did not fix the integration test flakiness.
Will report back with results when it completes.
Will require Compat level 160
Will see if I can get to this soon.
Will take a look at filtering next.
Will that sync?
Will the fix be merged?
Will there be possibly a proposal for this?
Will this also resolve
Will this be fixed sometime soon?
Will this be in a .net 8 release soon?
will this be released for next SR?
Will this change fix #url
Will this help with hot reload scenarios?
Will try again tomorrow.
Will wait for feedback
Win8) or can we disregard this since support for Windows 7 runs out in 6 months anyway?
Window?.SetBackgroundDrawable(null);
Windows
Windows - Reset the item source to refresh the ListView.
Windows PR - #url
Windows PR: #url
Windows Test: Issue31366PushingWithModalStackCausesIncorrectStackOrder**
Windows: Moved title update handling from ShellContentHandler.Windows to ShellSectionHandler.Windows.
windows.h) means different cpp files see different configurations of the headers
WinForms has a key role in allowing developers to create accessible apps.
Winforms is using #code for interop callback methods and and I'd like to not have to suppress the analyzer for a private method.
WIP
Wish you a Happy New Year.
With #code it calls #code which strips the convert away.
With #code this is not possible to format decimal numbers.
With #url it is using managed helpers which make fcall  to get CRT div/mod impl.
With a static field happening to be aligned:
With all these three I think we would have a better granularity of the light bulb showing up time.
with DATAS it's also showing heap size reduction.
With that I'd expect no difference in codegen compared to this PR.
With the old system tehre was a lot of complexity (and bugginess) keepign the full map correct.
With this PR:
With this trivial code:
With your code here it still works fine.
without creating temporary files first.
Without it sees too many numChunks and decoding transitions goes south.
Without this PR's changes to #code this produces 40 diffs in the #code collection.
without your change on Cobalt 100?
Won't become
Won't do it too often.
Wonder if this PR can still be landed in some form.
work in progress
Work in progress ...
Work in progress.
Work item
Work related with #url
Work with Jeff's team to give them your requirements and they can add the work to the backlog.
Workaround:
working fine in windows platform.
Working on that in a follow up.
Working towards #68028
Working with Core-eng on an experiment around pool strategies.
Working with the files only in staged/unstaged areas.
Works for me!
Worst thing about this is that it doesn't help with #code which to me is a deal breaker.
Worth trying the InlineArray approach #url which also avoids extra copy in Environment.SunOS to match what we have in #code branch.
Would @github's work with PGO and stack allocation of enumerators handle this automatically rather than needing to manually handle the special-casing?
Would #code be a good choice?
Would also help unblock this: #url
Would appreciate your C++ knowledge.
Would be great to finally see this in a SR
would be happy to not do this change - whats the timeline on that going in?
Would be nice if I could get feedback on that one.
Would be nice to move this to extract this into a common .targets that we can import into the samples apps.
Would it be better?
Would it be okay to add implementation of #code interface to #code?
Would it be possible to get this looked at as this issue is causing a headache for us.
Would it be possible to keep the existing behavior by first checking that the type converters registered for #code and #code is the default one ?
Would it be sufficient for what you are trying to do?
Would it inline FCall in #code transition?
Would it possible to get a TL;DR for the current state of the problem and our current avenue for investigation?
Would it work in VSCode as well?
Would like to avoid duplicating work and review efforts.
Would love to take this PR if it can be brought up to date.
Would need some kind of fast Dictionary.Clone?
would produces the following view:
Would something like that apply here?
Would that be best done in this PR or a separate PR?
Would that not apply?
Would there be a way to test this workflow by opening a new activity from the test itself?
Would this fix an SVG that has multiple colors as well?
Would this need a breaking change doc?
Would we ever be interested in how many finally handlers there are if we didn't do any cloning?
Would we want to do something similar or where would they be stored on the normal heap for them?
Would you be able to assign someone to this please?
Would you be able to create a sample application for us to test and ensure that everything is functioning correctly?
Would you be interested in this for EF Core 8 and later in Power Tools?
Would you be willing to fill out a new issue using the #url?
Would you be willing to willing to work with me to test the enhancements for Net10 ?
Would you like me to pick it up?
Would you mind writing a test for it as well?
Would you please let me know if you are going to work on this fix?
Would you prefer we print finally blocks cloned in #code instead?
Would you suggest to quarantine or do you want to check if that's an actual regression?
Wouldn't be possible for the setters to actually set the system parameters?
Wouldn't it be enough if you did
Wouldn't this have a catastrophic impact on any Behavior that is using bindable properties?
Wow!
WPF applications crash.
WPF applications with D3DImage can crash when a monitor is off or unavailable and IDirect3D9.GetAdapterMonitor returns NULL.
WPF currently still targets net9.0.
Write a small program that loads an assembly as collectible and calls a method in it.
Writing as JSON should just work throughout the system.
Writing short and oriented functions/procedures is not just about principle but also about readibility.
wrote:
x64 (after):
x64 (before):
x64:
x86   [C:\Program Files (x86)\dotnet]
Xiaomi MIX 2S ( API 29)
Xml tags look to be properly rendered now.
XMM6-XMM15 are indeed nonvolatile on Win x64 and would need to be restored when unwinding.
Yeah I agree that moving the splash screen after creating the #code instance defeats the point of the splash screen.
Yeah if your PR works they're welcome to take it.
Yeah that is a weird behavior...
Yeah that makes a lot of sense.
Yeah.
Yep - you get two lines newlines in trailing trivia after a close brace (excluding a list of exceptions)
yep.
Yes
Yes and no.
Yes I cheated here (by writing it) 😆
Yes it should also be fixed when using Maui Blazor Hybrid.
Yes.
yes...
You agree that contributions to Projects and information about
You agree to notify .NET Foundation in writing of any facts or
You also mentioned that it would be ideal to do something similar for other int sizes (#code/#code/#code/etc.).
You are introducing your own code formatting style which violates existing code and Microsoft's standard code format rules
You are receiving this because you were mentioned.Message ID: ***@***.***>
You can #code across the branches.
You can also DM me on DotnetEvolution Discord.
You can answer the questions i asked.
You can check my implementation at #url
You can do it as shown below in the AppShell.xaml.cs file:
You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].
You can find the FixupPrecode sizes here:
You CAN fix WPF to maintain compatibility in the final .NET 7 release...
you can just click on here in github:
you can just write tests that validate both at the same time for a given input.
You can probably improve the performance of the method EnsurePredefined by also checking if _formatList is null before locking (It would be: If _formatList is null -> Lock -> If _formatList is still null -> Initialize).
You can see from the screenshots below that the #code surrounding the the entry gets arranged incorrectly
You can see memory usage and process handle count is steady.
You can see that the ScrollToAsync method call is returned in the OnNavigatedTo event and OnAppearing event on all platforms.
You can see the failure details in #url (sorry I missed the last number when I posted the link earlier)
You can simply open and read it like any other file in the /proc directory.
you can still then just look for the analyze method in question here and then drill into what costs it was actually incurring.
you can take a look and read the code and come back how we can change design.
You can verify this in the image reference in the description (after the issue fix image).
you could do the same for 32-bit.
You could just use the MSBuild property/item name as the editorconfig property name 🙂
You could probably diff your assembly and see if it changed at all with this update.
You could then call the normal methods when there's a custom type converter and call the span methods when it's the default type converter.
You definitely want exhaustive tests here to validate the functionality.
You guys have more experience with Dependabot and perhaps you know where logs for the bot are located.
You guys just grab the raw RunResult i thought :)
You guys rock!
you have one test normal with direct value and the next test with the cast.
You have only to check the change by the current second commit.
You have statements that are in the middle of the screen and then 1 line put fully to the left.
You may also be bloating the app significantly if no-one actually uses Microsoft.CodeAnalysis at runtime.
You may Submit them separately to the Project if You (a) retain all copyright and
You may want to experiment with some alternative simpler and cheaper ways of accomplishing what this pass is doing.
You mean that they might differ significantly from what users specify?
You must agree to the terms of this Agreement before making a Submission to any
you must call #code on the child’s parent first at #code.
You must call removeView() on the child's parent first.
You need to adjust baselines.
You obviously have much more experience with this topic than I do (I've only been seriously looking into #code in the last week really).
You presumably won't need to replace XsdDateTime code.
You represent that each of Your Submissions is entirely Your
You represent that each of Your Submissions is entirely Your original work (except as You may
You represent that You are legally entitled to grant the above
You represent that You have secured permission from Your employer to
You risk breaking things (all production apps) for almost no benefit.
You should be able to run the test locally in the same mode if you temporarily comment out an #code statement at the beginning of
You should be able to use #code here as suggested above if this doesn't resolve to the right version.
You should rename that type to avoid confusion with #code.
You should test perf for longer strings as well.
You shouldn't need to disable ApiCompat to get your dev environment set up though.
You were right to review this.
You'll have to update the #code though.
You're probably right for this case.
You're right.
You're so quick.
You're spot on.
Your #url is out of date and contained failures.
Your approach of obtaining the item container from the object and checking its visibility should work in this case.
Your comment made me understand that the stale label serves as a marker.
Your current code is passing for this case.
Your Employer.
Your guidance will help ensure the tests provide meaningful insights.
Your responses are extremely long but don't seem to acknowledge even an understanding of my points.
Your Submission.
Your suggestions are most likely correct and cleaner but I'm trying to avoid potential regression and to keep a clean Git history (Have the first commit of migrated files be as close as possible to the original and further cleanup later).
Your work has been very helpful.
Yup trying now.
Yup.
Zero code generation diffs.
