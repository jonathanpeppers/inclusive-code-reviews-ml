text,isnegative
ship it!,0
tests failed,0
This sucks!,1
"Ok, `Test MSBuild Mac` and `Test MSBuild for Devices Mac` might be a little better.",0
"@github I figured this out friday, I think: https://github.com/xamarin/xamarin-android/pull/5597",0
"Ignore above, it was a `net6.0-android` app.",0
"When testing `net7.0-android` apps, Debug builds work",0
You are so terrible,1
This is terrible,1
I have a feeling that NuGet authors will have to use `monoandroid10.0` for their directory names...,0
You are a failure.,1
There are test failures.,0
The test failed with: compiler error on line 12,0
"The one performance test that failed, I don't see anything related to this change",0
Did this just get pasted twice?,0
I believe I was only seeing the problem in an earlier incarnation of https://github.com/xamarin/monodroid/pull/1205.,0
"It seems both the startup & MSBuild perf tests fail to build, which is odd.",0
I vehemently disagree with this,1
Can we do something smarter than this?,1
I don't like this solution.,1
You can do this like this instead.,0
Have you even tested this code before submitting?,1
🤮,1
😠,1
😡,1
This is just sh*t.,1
The conflict I get is due to stupid new gcc header file crap.,1
But what makes me upset is that the crap is for completely bogus reasons.,1
"The above code is sh*t, and it generates shit code.",1
"It looks bad, and there's no reason for it.",1
"Give me *one* reason why it was written in that idiotic way with two different conditionals, and a shiny new nonstandard function that wants particular compiler support to generate even half-way sane code, and even then generates worse code?",1
I love it!,0
So good,0
Amazing,0
Looks good to me,0
LGTM,0
Great Job!,0
Does this work?,0
It looks like a test failed,0
This is not compiling,0
Make sure that you compile before creating the pull request,0
Unrelated test failures,0
/azp run,0
Please add in the labels,0
This does not work,0
There is a bug in the code,0
Please wait to merge this,0
You need to revert this commit,0
THIS IS AWESOME,0
THIS IS PERFECT,0
This is a great improvement,0
Let's see if the tests pass,0
This may fail a test,0
This will help a lot of people,0
I think you should go another route,0
LGTM,0
Don't give up,0
This is much better,0
This is an improvement,0
You are a saint,0
Thank you!,0
This is not exactly what we want,0
This is a slightly better way to do this,0
Removing this,0
You can close this for now,0
Reopening this PR,0
Please ignore this PR,0
DO NOT MERGE,1
Add the DO NOT MERGE label if it's not ready yet!,0
I hate this change,1
Customers will hate this,1
This CI sucks,1
Change this now,1
I will change this now - thank you for the feedback,0
This is below your level,1
Did a child write this?,1
You can't make this any better?,1
This is not what we want,1
Just let me do this,1
You can't do anything right can you?,1
Everything is wrong,1
Stop that,1
Just quit,1
Kill this,1
Close this PR,1
I missed this earlier,0
This is a breaking change,0
There is a version mismatch,0
The thread was aborted,0
The memory is corrupted,0
It's throwing an exception,0
It's about the Invalid IL code,0
There appears to be a stack misalignment,0
The weak reference object will get cleared,0
This code is garbage,1
Did you account for garbage collection?,0
Can't you do better?,1
This is messy,1
I learned something new!,0
I didn't know that,0
This is great test coverage,0
This is pretty gross,1
There's nothing pretty about this,1
This is very pretty code!,0
It isn't working,0
This isn't worth my time,1
It just doesn't make sense,1
It just doesn't make sense to me how awesome this is,0
It will kill a lot of businesses,1
This in particular is a mess,1
I'm not counting on it working,1
"At this point, this is absolutely not ready for real-world use",1
We are in a really bad place at the minute,1
it is so frustrating,1
that kills trust,1
adding the bot here would help detecting such major issues,0
that only goes so far,1
it isn't good enough,1
"it isn't good enough to just write code, but what you've done here with your comprehensive documentation and test coverage is exemplary",0
what you're proposing will effectively just make things more difficult,1
sometimes nasty bugs can be introduced,1
it's not going to help,1
Damage has been done,1
I will ignore your code,1
Feel free to ignore that platform for now,0
It's going to ignore the scheme,0
Maybe you should get an education,1
You don't know what's going on,1
You should start with a bullet to the brain,1
"This is on the blacklist, how could you miss that",1
"This is on the block list, it's always a good idea to double-check!",0
They're a blackhat so their code isn't worth it,1
They're an unethical hacker so be cautious about their code,0
Be inclusive of the minority because they need help,1
Be inclusive of marginalized groups because that is the right thing to do,0
good job guys you ruined it,1
good job team keep up the good work,0
let's do a little more housekeeping here it's quite messy,1
let's do a little more cleanup here to improve the formatting further,0
you're so OCD why are you like this,1
you're so organized I'm very impressed,0
the behavior is crazy why are you doing this,1
the behavior is unpredictable,0
accessibility helps a handicapped person but it's otherwise useless,1
accessibility helps a person with disabilities but also everyone else,0
my computer is hanging ugh it's your fault,1
my computer is frozen,0
this is some grandfather code we'll be updating because it's so old and ugly,1
this is some rollover code we'll be updating,0
nice dummy values! but not nice enough,1
nice sample values!,0
this is on my to-do list,0
Don't do a half-ass job,1
We always want to make things better.,0
Maybe it's better to do this in another way?,0
Do this in another way!,1
Your code is completely wrong,1
I don't like this solution.,1
You're not the best developer here,1
"After discussion with the team, we came to the conclusion that's better to do it this way.",0
"Do it this way, because I know best",1
Every line of code you write is a nail in my coffin,1
This is rubbish,1
This is toy code,1
How long did you spend working on this?,1
What are you doing?,1
"You know this doesn't work like that, right?",1
Can you explain what you are trying to accomplish?,0
Can you explain how it works?,0
"I don't think this looks right, but I could be wrong. Could you explain what this is supposed to be doing?",0
This is great!,0
I love this,0
This is a great solution,0
I would never have thought of doing it this way,0
Perfect,0
Lovely,0
I love this idea,0
This Is Wrong,1
You're not good at this,1
Everything you do is bad,1
Everything looks great,0
"This code was terrible, I'm so happy you made it better!",0
This code is terrible,1
This code was terrible,0
Good job,0
This caused a test failure,0
You're a failure,1
This made some tests fail,0
You failed,1
This needs some tests,0
You should have added tests,1
This fixes a problem where the mortality rate in the nursery was too high,0
This fixes a problem,0
Sigh,1
This is dead code,0
You're dead,1
This will cause infinite recursion,0
Software engineering is not for you,1
This is obviously wrong,1
Why don't you just skip this step,1
"Ok, `Test MSBuild Mac` and `Test MSBuild for Devices Mac` might be a little better.",0
"@github I figured this out friday, I think: https://github.com/xamarin/xamarin-android/pull/5597",0
"Ignore above, it was a `net6.0-android` app. When testing `net7.0-android` apps, Debug builds work.",0
But a `Release` build logs this and then crashes after:,0
`ndk-stack` gives:,0
Full log: [adb.txt](https://github.com/xamarin/xamarin-android/files/8643599/adb.txt),0
"I have a feeling that NuGet authors will have to use `monoandroid10.0` for their directory names... where they have been used to using `monoandroid81`, `monoandroid90`, etc.",0
The target that uses the `@(Import)` item group doesn't run if you set `$(DisableImplicitNamespaceImports)`:,0
https://github.com/dotnet/sdk/blob/93b432bd8e73bb68aa4621db8a967d62e6f0cc23/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.GenerateImplicitNamespaceImports.targets#L35-L38,0
Here is the commit that implements this:,0
https://github.com/dotnet/sdk/commit/85943958e5a01d6bbd39a947aec2a4a37b8ba7cf,0
"The one performance test that failed, I don't see anything related to this change:",0
"`<D8/>` or `<R8/>` didn't run, so going to merge.",0
/azp run,0
Did this just get pasted twice?,0
"As per the bug we were seeing with `WorkingDirectory` and `<Aapt2Link/>`, I think this needs to be:",0
"After using `IndexOf` + `Substring`, I think it's still OK to just compare `targetFrameworkIdentifier == ""MonoAndroid""`:",0
"It should be the first instance of `,` and `targetFrameworkIdentifier` will be everything before it.",0
The issue in https://github.com/xamarin/xamarin-android/pull/5991#issuecomment-854216388 should be working now.,0
I believe I was only seeing the problem in an earlier incarnation of https://github.com/xamarin/monodroid/pull/1205.,0
"I can't find anything sensible to do here, `$([System.Version]::Parse())` or `$([MSBuild]:VersionGreaterThanOrEquals())` throw during evaluation.",0
"I think adding the test case is fine for now, and you would get the above error from `NuGet.targets`?",0
"@github there is something else weird here, but I think it's our test.",0
"The cases where macOS failed, it seems like `usesAssemblyStore=false`. So how would this class know to check if the files exist in that case?",0
https://github.com/xamarin/xamarin-android/blob/968c4245d3bb24670f402eb207109ca837fdd195/src/Xamarin.Android.Build.Tasks/Tests/Xamarin.Android.Build.Tests/XASdkTests.cs#L634-L638,0
Let's look into this again if it fails like this later...,0
I was mainly trying to get the build log shorter 👀,0
"It seems both the startup & MSBuild perf tests fail to build, which is odd.",0
Are there some more of these? If I ignore tests:,0
"Since https://github.com/xamarin/xamarin-android/commit/e390702773365ffe3da975181d0aa398d42731d0 we dropped support for referencing exe's at the MSBuild level. I didn't add support for it here, but if there is some scenario you think we'll hit, I can add it.",0
Offhand I can't think of a case where a `.dll` would reference a random `.exe`?,0
/azp run,0
"I tried to test these changes on an API 19 emulator, but ran into: https://github.com/xamarin/monodroid/issues/1161",0
"You can have an `.aar` with resources, then you might want to use `Resource.designer.cs` values from C#.",0
"So I don't think we need this by default, but it's there if you need to turn it off.",0
An idea that could be done in a future iteration.,0
Could this step also modify this class:,0
https://github.com/xamarin/xamarin-android/blob/7ba62bac5a25eb783a6da9c2b6a989a820695a1f/src/Mono.Android/Android.Runtime/ResourceIdManager.cs#L6-L9,0
"If `UpdateIdValues()` was a completely empty method, some reflection could be skipped at startup.",0
same here:,0
Should we make this a `Regex` just in case the version number changes? If this just removed an entire line that matches: `^\/\/\s*Runtime Version:`,0
I'll list `@(EmbeddedNativeLibrary)`.,0
We are aspiring to change all these to:,0
/azp run,0
"I think the code is the same, the first one would be the same as doing:",0
"I've heard putting `() => ProcessManifestTemplate()` prevents a delegate object from being created, but that performance shouldn't be needed here.",0
My plan was to not import or ship `Xamarin.Android.Aapt.targets` at all:,0
https://github.com/xamarin/xamarin-android/blob/02e86b5a6bbd6f938c16cf30bc709543565bb34e/src/Xamarin.Android.Build.Tasks/Xamarin.Android.Common.targets#L364-L365,0
"However this is wrong ☝️ , it needs to be checking `$(UsingAndroidNETSdk)` instead.",1
This should also work:,0
https://github.com/xamarin/xamarin-android/blob/91b66985704f1592b8c55819f7ff48d5e7353900/src/Xamarin.Android.Build.Tasks/Xamarin.Android.Common.targets#L1160-L1161,0
Fixed the ones in xamarin-android here: https://github.com/xamarin/xamarin-android/pull/5636,0
/azp run,0
NOTE: two `!*Darwin*` and `!*32*` won't currently work -- there is a bug in AzDO.,0
Since this could be a 4MB string:,0
https://github.com/xamarin/xamarin-android/blob/c98cb40f35a208c04466bb3fccb3cd25d463781c/build-tools/scripts/TestApks.targets#L94-L100,0
Do you think it's worth making a `GetLogcatOutput` method that would write each line to a file at a time? Instead of making a giant string?,0
"The designer tests keep failing on NuGet restore, I think we can ignore:",0
This looks OK:,0
* Designer macOS has been failing since last week on master,0
* The one test failure is unrelated: `warning XARDF7024: System.IO.IOException: The directory is not empty.`,0
Should we consider making this the default for all projects?,0
We already do it for .NET 6:,0
https://github.com/xamarin/xamarin-android/blob/885b57bdcf32e559961b183e1537844c5aa8143e/src/Xamarin.Android.Build.Tasks/Microsoft.Android.Sdk/targets/Microsoft.Android.Sdk.DefaultProperties.props#L13,0
Does this need to check some MSBuild property to skip it? Would it attempt to sign packages on Mac locally otherwise?,0
Could not AOT the assembly: System.Core.dll,0
"This looks similar to some of the file locking issues we see on the bots, since it passes for me locally, let me do a retry.",0
"So this will probably need to use TryGetValue now, somehow NUnit had a custom dictionary before that returned null when the key was not found?",0
"Thanks to Pobst, it should go through here now: https://github.com/xamarin/xamarin-android/blob/1bee4ad176863bdfc0de258542a2c3685fc60f2d/src/Xamarin.Android.Build.Tasks/Tasks/AndroidTask.cs#L16-L21",0
"I think using the default ""let it throw"" behavior is better now as long as this subclasses `AndroidTask`.",0
The spec says the native platform files always win:,0
https://github.com/xamarin/xamarin-android/blob/main/Documentation/guides/OneDotNetSingleProject.md,0
"If you want to use the MSBuild properties, you can just leave the values blank in `Info.plist` or `AndroidManifest.xml` (or whatever the WinUI version is). You can still set MSBuild properties in `.csproj` files and override their values from CI.",0
I updated the test case some -- it needs to set all the properties to weird values so we see who wins.,0
I think this should be:,0
So that users can override it in their `.csproj` file.,0
Do we need this in every project? Can we put it in a new `Directory.Build.props` or `Configuration.props`?,0
maybe this would be cleaner as:,0
"This is the only one I didn't address, I agree I would rather use `System.Xml.Linq`, too.",0
I just didn't think it was worth rewriting all this code--but if we were going to change the file drastically or something it might be worth it.,0
`Xamarin.Android.Common.props` should be imported here already.,0
Could simplify this line:,0
/azp run,0
The quoted stuff was all from:,0
👍 I'll indent it.,0
@github I bet this `UseSharedRuntime ?` check was important...,0
I need to look at what is in the typemaps in both cases.,0
"Right so we only should check if `$(TargetPath)` changes, and is newer than a stamp file or something.",0
Something like (_untested_):,0
This should make the second call skip `AfterBuild` if the assembly didn't change.,0
"When I build `Xamarin.Android.sln`, I rarely change `Mono.Android.csproj` when working on MSBuild-related stuff. This should save ~3 seconds from my dev-loop.",0
/azp run,0
"Sounds good, we can leave `-m:1` for now.",0
I don't think you need to set `$(LangVersion)` with `$(LangVersion)`.,0
"This imports `Configuration.props`, so I think it would get the value you want;",0
https://github.com/xamarin/xamarin-android/blob/1877dd5ebee90452c6ab2cc33a58498a83ea7c1f/Configuration.props#L38,0
Should we give an example in the commit message what the problem here was?,0
We somehow lost the `KnownPackages.Acr_UserDialogs` NuGet in this file: https://github.com/xamarin/xamarin-android/commit/1d608bf194f5cddcb4d61a4bca3602f920da5246#diff-4469ed45319624df448a82ed4bc98b6d,0
"I think we don't need it on this one, though. `<Touch/>` is called right before?",0
"It would be nice if this had the full strack trace here, but we just have `.Message`:",0
https://github.com/xamarin/XamarinComponents/blob/4f5a57bd567f46f4b67622ab718b50485725463f/Util/Xamarin.Build.Download/source/Xamarin.Build.Download/XamarinDownloadArchives.cs#L182,0
Whoops I think this one should be the new `XamarinFormsAndroidApplicationProject`.,0
"Since this breaks things, I don't think it is important enough to continue.",0
I'll leave the branch around if we ever want to try this again.,0
/azp run,0
"To test this currently, you would need: [MonoAOTCompiler.zip](https://github.com/xamarin/xamarin-android/files/6804264/MonoAOTCompiler.zip)",0
Copy `MonoAOTCompiler.dll` to `~\android-toolchain\dotnet\packs\Microsoft.NET.Runtime.MonoAOTCompiler.Task\6.0.0-preview.7.*\tasks\net6.0`. This will be needed until the changes land in dotnet/runtime and flow to us.,0
"If I remove it, I get:",0
"We might want to just compare `Name`, if we want this to work the same as `[assembly:LinkerSafeAttribute]`: https://github.com/mono/linker/blob/44199a2c62ff221f92c33cbb4ee3e35588adaf4a/tuner/Mono.Tuner/CustomizeActions.cs#L47",0
"This would give the option to add this to the support libraries, and not have to build with a new (not yet released) Xamarin.Android.",0
"I added `XA0035`, which seems a lot better.",0
Does this need all 4 steps here? or can it just call `Install`?,0
Do you really need all three of these? Are we missing a dependency where you should be able to put `Xamarin.AndroidX.Wear` and that's it?,0
"Ok, the build is broken because the `.pkg` file isn't being created by this project now.",0
"I think you need to import `Configuration.props` otherwise, this target won't run because `$(HostOS)` is blank:",0
https://github.com/xamarin/xamarin-android/blob/d17ea01b4036c2592ae247b24af14739d949f245/build-tools/create-pkg/create-pkg.targets#L148-L150,0
I think I should just remove all the `goto` here and put `return proxy` instead.,0
"I saw this message ~2700 times in a build log. It is still logging the *other* case, which I think is sufficient.",0
I updated the commit message around this conversation 👍,0
/azp run,0
Right now I don't think you can use LLVM without having an NDK -- but I was thinking we could fix that? Like it should be possible to work?,0
"If you didn't need the NDK, we could enable LLVM by default for `Release` builds to improve startup times.",0
It might be this was just something broken on mono/master:,0
It looks like they moved the submodule? So maybe it's in `external\llvm-project` now?,0
https://github.com/mono/mono/tree/a2f9fb77a3704049ffe5de32362029ece154ee4c/external,0
"I am building a mono archive based off 2019-10, will give that a try.",0
We don't have darc in this repo at all yet. Putting the version number in `Configuration.props` follows our current pattern until that is in place.,0
"@github will be looking into darc, I think. We can start with getting it to bump the dotnet/sdk version.",0
I think all these `/t:Restore` should just use `/restore` instead:,0
"Both will probably work in this case, but I've seen some weird things if you run the `Restore` target first followed with `,Build,Etc`.",0
"When I last attempted to split up `<GenerateJavaStubs/>`, it hurt performance a bit, I had to move the `DirectoryAssemblyResolver` to be stored in `RegisterTaskObject` so it could be shared across multiple tasks:",0
https://github.com/xamarin/xamarin-android/compare/master...jonathanpeppers:split-generatejavastubs,0
"This branch isn't quite finished, the `AndroidManifest.xml` portion is broken.",0
I think we do need the `eol` setting: https://git-scm.com/docs/gitattributes#Documentation/gitattributes.txt-Settostringvaluecrlf,0
To test this I did:,0
And then it switches to Windows line endings when I look in notepad++:,0
"Using just `text`, and trying again--it didn't work.",0
But the docs aren't exactly clear if someone else knows better?,0
"This one could also use `TryGetValue`, sorry I didn't see it before.",0
👍 I guess we weren't doing that at all before???,0
"Instead of reading the file back into memory, could we make a helper method that logs and writes for each call?",0
Something like:,0
"The build failures look to be on master, too: apk sizes, tls tests, designer, libZipSharp/DotNetPackageXASdkProject test.",0
"I reworked the task, so it only writes the file when needed.",0
attempting to extract @(EmbeddedResource)s when an assembly doesn't have any.,0
Maybe I need to see if this can work without any assembly-level attributes at all.,0
`.Any()`,0
"@github in https://github.com/xamarin/xamarin-android/pull/6539 I remember some LLVM tests failed when I tried, but there are other changes in xamarin-android/main now. Could the LLVM-IR support @github added make this work now?",0
"If you're testing, and LLVM is working without an NDK let's try it.",0
/azp run,0
"Does this need to check `$(HostOS)` and use either: `osx-x64`, `windows-x64`, or `linux-x64`?",0
Is there a way this could check for `<= 32` then use 32? Trying to think of what this would look like over time as more API levels are added.,0
"I think this might need to check if it is blank, like it does in .NET 6:",0
https://github.com/xamarin/xamarin-android/blob/d4da1c252f45c4910abc1bd9e5be9ecf9dc683a0/src/Xamarin.Android.Build.Tasks/Microsoft.Android.Sdk/targets/Microsoft.Android.Sdk.DefaultProperties.targets#L13,0
This way you can set it to `false`.,0
I agree with the concern here: https://github.com/xamarin/xamarin-android/pull/6541#issuecomment-985045429,0
"If this is `sealed`, how do you implement ""ssl pinning"" in an app?",0
"👍  I haven't seen this syntax yet, seems better than this:",0
@github do you want to try setting `$(XamarinBuildDownloadDir)` to a folder in `bin/TestDebug/temp/{TestName}`?,0
https://github.com/xamarin/XamarinComponents/blob/4f5a57bd567f46f4b67622ab718b50485725463f/Util/Xamarin.Build.Download/source/Xamarin.Build.Download/Xamarin.Build.Download.targets#L9,0
"Then when it retries, I think it could start with a fresh empty directory.",0
Should this entire file go in this `DotNet5.md`?,0
https://github.com/xamarin/xamarin-android/blob/master/Documentation/guides/DotNet5.md,0
Then maybe we don't even need a `README.md` here?,0
Maybe we should use `InetAccess` instead? Would all `InetAccess` tests fail without crypto?,0
I'm feeling as the number of MSBuild files start to grow...,0
@github do you think we should start putting a short comment/description at the top of each new MSBuild file to explain what the file is?,0
"So we would want just a short sentence explaining the difference between `App.Runtime.proj` and `App.Ref.proj`? `Xamarin.Android.Lite.proj`, too?",0
"If I made a `Xamarin.Android.BuildOrder.targets` the name is almost self-explanatory, but would probably be helpful to say ""this is where all `$(FooDependsOn)` properties go"".",0
@github it looks like @github looked at these codes? https://github.com/xamarin/xamarin-android/pull/2258,0
"They weren't ""actionable""?",0
"So this appears to only be broken for specifically API 29, because it isn't listed here:",0
https://github.com/xamarin/xamarin-android-tools/blob/2d3690e428c8523b3779f84e5c804d1fd3c0d6fe/src/Xamarin.Android.Tools.AndroidSdk/AndroidVersions.cs#L139-L176,0
"So the question is, do we ship all the `AndroidApiInfo.xml` or update this list?",0
"I see a new version `6.0.100-preview.2.21155.2`, waiting to see if that is what we should bump to.",0
I'm curious can remove `$(AssemblyName)` here and it uses the name of the `.csproj` file?,0
"From the `.apkdesc` files we have, it looked like this file was renamed:",0
"I think NuGet always puts `31.0` for all of `net6.0-android`, `net6.0-android31`, `net6.0-android31.0`.",0
"It looks like this project links in a few files from `Java.Interop.Tools.Cecil`, can you add a new file here:",0
https://github.com/xamarin/xamarin-android/blob/af7f7f5da475c5cb8d2d725d77082ba7915bbc7e/src/Microsoft.Android.Sdk.ILLink/Microsoft.Android.Sdk.ILLink.csproj#L43-L46,0
"We probably should make this a regular project reference, but you don't have to do that here -- we can do it later.",0
Should I create an issue and link that in the binding?,0
Thanks!,0
Will merge after issues with main are resolved!,0
@github  @github Would these need this variable too when we move out of .NET6?,0
Again in that file here:,0
"@github  Ah good catch! I didn't realize I was calling the same method... The reason I made this change is that the SetHighlightedItemForProperty (int property, int identifier) is Obsolete and suggests that I use this one - which in this case does not make sense. Should I in fact continue to use the obsoleted one?",0
Updating to fix unrelated failure: https://github.com/xamarin/maccore/issues/2472,0
"Thanks for catching these, I followed Sebastian's advice about removing the [Introduced] attribute and removing the messages that don't give us much info in the Enums.cs file but not this one. If the documentation does not give a good method to use instead, would I just clear the entire message for these as well? In this case, there are other functions that can fetch assets using different types of parameters. Should I say something along the lines of ""Use other fetchasset methods""?",0
"I thought these were better to give us more detailed exceptions, but the compiler does not recognize these `ObjCRuntime.ThrowHelper.ThrowArgumentNullException`s as ending the method so I kept the old one at the end of the method...",0
Merging since the test failures are unrelated timeouts!,0
@github @github AH okay thank you both for the explanations! I will get right on this :),0
"I can create a LPLinkView with the size 5,5 at dimensions 5,5",0
I noticed the OneLocBuild task has failing due to the PAT in a different branch while testing this.,0
Connor was able to fix it!,0
Turning this into a draft since we will need more discussion on this before moving forward!,0
"Update: still testing on my end, for some reason @github 's solution isn't working on my end.. Sounds like it is working for others though.",0
Working on a test for this now!,0
"While I realize that I added a good amount of these and that SetData () throws an exception if the value arg is null, I thought it would be better to explicitly add the exceptions here and not use a `!`, but I am open to opinions!",0
"I will make a comment of this too, but the reasoning is a little confusing to me. I remember I could not build the file and @github may remember, but there is a file src/Photos/PHAssetChangeRequest.cs that has an Obsolete attribute in the PHAssetChangeRequest empty constructor and we deemed that is what was causing the build issue. However, now I am confused because this class is PHChangeRequest and not PHAssetChangeRequest. I can talk to Alex about this tomorrow and get back to you with more clarification.",0
Does this look okay?,0
@github @github  does `Microsoft.Nnyeah` meet all these criteria? Also could this change be in a separate PR?,0
@github So I just tried to apply the mac attributes to this one and a few of them below that say they are available for mac as well and they were getting a lot of compile errors.,0
It turns out that these are the questionable interfaces in this src/quicklook.cs,0
It turns out that they are also in src/quicklookui.cs and are all decorated with mac attributes already.,0
Do you think this could be leading to the issue?,0
[Here is the gist](https://gist.github.com/tj-devel709/03492abdf722192da23b84ae921f7e05) with the errors that marking mac for each of these interfaces show,0
I'll just leave the action in!,0
"@github There was no MacCatalyst.todo, but most of these interfaces say they support MacCatalyst in the web docs.",0
I tried including the HomeKit in the MacCatalyst section of the frameworks.source file and I kept getting this error in the build:,0
Is this something I should do?,0
"Are enums int by default? If so, is there a reason to declare int?",0
Right now it is set as a property though and properties don't need a verb correct? I can revert to a method though.,0
"Okay, applied!",0
Maybe,0
"nit, small extra space",1
How about `WeakExternalPlaybackVideoGravity = value.HasValue ? AVPlayerLayer.EnumToKey (value.Value)! : null!;`,0
dont link/Mac Catalyst [dotnet]/Release [dotnet]: TimedOut (Execution timed out after 1200 seconds.,0
No test log file was produced),0
link sdk/tvOS - simulator/Debug: Failed,0
link sdk/tvOS - simulator/Release: Failed,0
**Unrelated Test Failure**,0
Good catch! Removing now!,0
small also,0
nit: missing new line,0
"So I'm not sure if this is sufficient but I included Mac in an iOS Xcode project (which I think is how you enable Mac Catalyst), included HomeKit, and then called some things that are supported in Mac Catalyst (14,0) according to the web docs and Xcode does not complain about it!",0
lol,0
Looks like extra indentation here,0
"Oops sorry, actually forgot it haha",0
Thanks for explaining! :),0
@github that is a great question... Yeah this is the generated method signature:,0
And CategoryToToken says it returns an `NSString?`,0
Although there are no compiler warnings/errors regarding this..,0
Should we be replacing this `#if XAMCORE_4_0` with an `#if NET`?,0
@github maybe just an if statement inside that makes those changes ~ adds watch to the legacy and doesn't go though the platforms for the dotnet_iOS_MacCatalyst?,0
Unrelated failing test: https://github.com/xamarin/maccore/issues/2434,0
"So I actually don't who told me to add the Sealed, perhaps @github ?",0
"But when I remove it, I get these build errors: https://gist.github.com/tj-devel709/d459d9e717a186486deab6479f57c050",0
Sebastien recommended that we change the ArgumentNullException's as well in these Nullability PRs,0
It's the first time I remember seeing `|=` cool haha,0
Same here,0
What does this line do?,0
There a few others as well!,0
* accidentally pulled xamarin/main. Trying to revert merge. Added do-not-merge for now,0
"Oops forgot to run tests, I'll do that now",0
Maybe typo?,0
nit: extra new line,0
Oh okay yeah sure that makes sense!,0
Looks like Sebastien's test fails when these are removed so maybe they are needed:,0
perhaps 'duplicated'?,0
Thanks!,0
Enum value looks strange,0
You can add the iOS availability on enums and their individual values too.,0
"Automatic,",0
"AutomaticOutLine,",0
"Also just a small thing but add a comma after the AutomaticOutLine so that if anyone else ever adds something to your enum, their name won't show up in the blame and seem like they added that value. Great job! :)",0
"The above changes were to account for `NLLanguageExtensions.GetConstant (item.Key)` possibly being null, but not sure if all this was neccessary",0
Closing this PR in favor of: https://github.com/xamarin/xamarin-macios/pull/14394,0
"This one was having test failures that I was waiting on, but a new (weekly) version of the localization PRs came out which includes all the changes in this PR and more!",0
"OK, let's YOLO this 😁",0
Sounds good 😂,0
@github changes look good. Interestingly all the ignored enums and functions are in all platforms supported by the framework. There is an option to create a single ignore file that uses common-* as the prefix rather than the platform name. Food for though 😉,0
@github  Would you recommend that I change it to common? Would it still be okay in common if it doesn't cover watchOS also?,0
Flagging just in case since lowest supported is 10.14,0
Flagging this just in case - not supported iOS version in .NET,0
**Unrelated test failure**,0
monotouch-test/tvOS - simulator/Debug: Failed,0
**Unrelated Test Failure**,0
Updating to fix this unrelated issue: https://github.com/xamarin/maccore/issues/2472,0
**Unrelated Test Failures**,0
These paths are incorrect - WIP,0
Will do!,0
"This is cool, I didn't know we could do this",0
Merging since the test failures are unrelated timeouts!,0
"Oh gosh, I really messed that up ☝️",0
"Alex helped suggest that name since the comment on xcode is ""/// The handle for the person that will be displayed on the incoming call notification.""",0
@github hmmm what does the semicolon in this path name do?,0
Perhaps this will give me a clue on how the apidiff directory is being set?,0
"@github let me know if the json was tool generated, in that case ignore my comments.",0
Yes they were auto generated. The output used spaces instead of tabs though so it is possible that I messed up indentation when trying to use tabs to not show changes in Rolf's existing json,0
"Awesome, thanks @github !!",0
Do we want to remove these maccatalyst's?,0
"Sorry, my mistake, both test failures are unrelated:",0
"Also if I try (IList<string>) as a cast, I get this:",0
System.InvalidCastException : Specified cast is not valid.,0
small formatting,0
"Sorry, I don't think this one is actually ready for review. I think there are some things in the headers that were not mentioned by xtro that need updating!",0
small typo,0
That is a good point.,0
BTW these are the two bugs that we will try to patch for .NET 6.x that are preventing JS initializers from working in .NET MAUI,0
"In theory, the ""best"" way to make this work is to use Blazor JS module initializers, but unfortunately there is currently a bug that prevents them from working as intended.",0
This was an access violation.,0
Please remember to address the cancelled task,0
There was a fail fast exception,0
I missed updating this test,0
This avoids poor performance of GetHashCode and Equals that are used for the struct using reflection on the first field.,0
"Also, contrary to the other default includes, add a condition so files are only included if we have a resource prefix (typically ""Resources""), otherwise the entire hard drive might be included",0
I am seeing unmanaged crashes but I think our fix was just in Preview 13.,0
"Maybe I should be more verbose, but the comment before was listing 2 brief comments.",0
The ListView is displaying incorrectly.,0
In order for the the Button to display correctly.,0
The point of the ExecutionMode platform specific was to tell WebView on UWP to run out of process.,0
"Just invoking the Current property causes a crash, so you must be working some magic!",0
"I was able to replicate the failures locally, and the most likely reason for the failures is the loss of focus by the test form",0
"How, if at all, does this relate to AutomationProperties?",0
"Nope, I don't think so. And yeah, the upgrade story is an interesting concept! Will have to look into that more, depending on how we decide to approach the package support for api 21/22",0
trying again now,0
"updated, thanks for the feedback!",0
@github told me blazor already has this type of theming via bootstrap styles,0
should this also be MauiComboBox?,0
Thanks for the feedback @github! Opened an issue here https://github.com/dotnet/maui/issues/4766 - feel free to add more info,0
What is the expected updated behavior here?,0
will do!,0
missing d,0
"I was told that it's best to use Brushes for Background colors and Colors everywhere else (cc @github) and yep, I added a bunch of colors/brushes that don't get used - exact colors are still a bit tentative, but I'll see what @github thinks for that",0
failing tests unrelated,0
The built-in platforms also use color for interactive controls,0
nitpick typo fix that's been bothering me,1
fixing now - but can you remind me why the null check is sufficient for Android and not iOS?,0
"Hi, @github - what's ths issue you're seeing on iOS? Is it also the same error regarding `Xamarin.AndroidX.Security.SecurityCrypto` ?",0
NRE is thrown now at https://github.com/dotnet/maui/blob/a6a535c59cca18c65cdc9e2aaf554c4eddfaa81a/src/Core/src/Hosting/AppHostBuilderExtensions.cs#L119 Placeholder looks great otherwise,0
"I put this sample code directly in my local version of the control gallery sample: It uses `<GridLayout RowDefinitions=""Auto,*, Auto"">` like the samples in the referenced issues do",0
See following comment first (I'm assuming this naming is related to `TapGestureRecognizerNeedsDelegate` which doesn't fully make sense to me),0
"fixed, thank you! 😂",0
still not working :(,0
Should we add more tests for the other shapes? Or is Ellipse sufficient?,0
TextColor is here to prevent issues wrt not implementing the full interface properly,0
We should also link to instructions on how people can obtain the logs so they can also just attach them here,0
"oops, yeah. removing the redundancy; thanks for the catch!",0
"@github there's a number of confusing NREs thrown on this branch that are unresolved. If you could take a look and share any tips you might have, that would be awesome!",0
"Why is it called ""QueryEditor"" and ""_editor""? Shouldn't it be ""entry""?",0
What's happening here? Why is it no longer async and what does the func() do that's different?,0
"I wonder how we can make this a bit more flexible, so that we get not just the platform but the specific API versions!",0
What is MaxLength=-1 expected to do?,0
and wherever it's used/referenced,0
"@github I fixed the ugly rebase! Build is failing now because Shadow is using Color and Size though, so that still needs to be fixed",1
Can we use the same vars for consistency?`,0
"Ok, thanks! Changed it back. I hadn't been sure because I know both brushes and colors can be used for Background, and assumed it might be the same with Backgroundcolor",0
will do!,0
@github will try again... did you change the background color though? I wonder if that's related,0
can do!,0
"should we consider changing the default too? So that if a developer doesn't explicitly set a description, it'll still make sense?",0
Maybe we can do something similar to image where it simply can't receive focus at all and won't read out anything - maybe we can make it so just the contents are accessible?,0
"Or alternatively, we can try to make the textual contents or at least the first textual content get propagated upward",0
nice!,0
"We woud need to check what the screen reader behavior is - does the TalkBack focus move with the keyboard focus? If it's inconsistent, we need to figure out what the desired behavior is there. If it's consistent, then I think this is an OK solution",0
I agree! I just wanted to leave them for @github in case there are any we want to comment in before I delete them entirely,0
Commented out because the values aren't clear yet and we want your opinions on what the values should be :),0
"Similarly, for any controls/properties you don't see in this PR that you believe belong, please let me know which ones and which values you might see them with",0
"I think that's fair. We can get rid of the checkbox and rephrase so it says ""By submitting this issue, I am agreeing to follow this project's Code of Conduct""",1
"ah ok, makes sense! docs for `afterDescendants` was a big confusing and seemed right to me at first, since I was thinking the container should usually not receive any focus. But your explanation of ""consider first as a viable focus target"" helps clarify things",0
/azp run,0
typo fix that's been bothering me,1
done!,0
"sorry, I misread which APIs were being used - taking back what I said and seconding Shane here!",0
gotcha - will fix both here and in XCT soon,0
@github I tried that but it didn't work for me :/ will try again though,0
Is the body correct? Is it related to CursorPosition and not SelectionLength?,0
Where did this 50 come from?,0
Should we maybe set this to ImportantForAccessibility.Auto instead of null?,0
"yep! We're trying to get the SearchView, and it looks like that TextView is being uesd as the SearchView. The SearchButton stuff we were using before was wrong / not quite relevant",0
"alpha version was incorporated, and code significantly simplified. security nuget still needs to be added to nuget feed, so waiting on that! in the meantime, if any folks are able to test on android api levels 21/22, that would be super helpful - thanks!",0
missing d,0
@github font scaling will automatically be enabled across all the platforms including iOS now!,0
Should we not set a background color on any pages then and just let the system handle that?,0
"My thinking was that the background should be light in light mode, dark in dark mode, and since `BackgroundColor` property is derived from VisualElement, which Page is based on, this is how I handled it. Most of the specific pages themselves (i.e. ContentPage) don't have stylable properties if not for those derived from Page and VisualElement",0
maybe we can at least have the mainpage code in comments?,0
"hmm I tested again, but it's the same :/",0
Could you share an example so that I can understand this better? I'm wondering why it's [`.BeforeDescendants`](https://developer.android.com/reference/android/view/ViewGroup#FOCUS_BEFORE_DESCENDANTS) instead of [`.AfterDescendants`](https://developer.android.com/reference/android/view/ViewGroup#FOCUS_AFTER_DESCENDANTS). Is the `nativeview` here the rootView or the contained views?,0
@github yes definitely! so this PR does both of those things! It both: 1. Ensures font scaling will automatically be enabled across all the platforms including iOS 2. Introduces a `FontAutoScalingEnabled` boolean property that can be set to `false` if so desired,0
still seeing similar issues where hovering changes the color,0
"@github I agree that with this calculator sample specifically, gray might work better with the general color scheme. Unfortunately, the proposed colors aren't accessible so I think it would be best to keep the current colors which have already been tested and validated for accessibility via our templates. Naturally, different colors might look better with different samples and scenarios, and folks can always change these styles as they wish. If you want to use grays for the calculator sample, I recommend a light gray button on black background in dark mode! But again, for the templates, I think keeping the current button style (with regard to colors) is ideal in terms of accessibility.",0
Windows SearchBar MaxLength will need some more time https://github.com/dotnet/maui/issues/5669,0
AFAICT failing tests are unrelated,0
@github this is what @github was asking you for me about! wondering what a better way of doing this might be,0
same feedback applies to all the templates,0
why is this commented out? Should it be deleted?,0
Is TextColor not yet expected to work?,0
"yes, so shouldn't we be checking here that it's YES instead of AUTO?",0
same issue as #741 again NRE is thrown now at https://github.com/dotnet/maui/blob/a6a535c59cca18c65cdc9e2aaf554c4eddfaa81a/src/Core/src/Hosting/AppHostBuilderExtensions.cs#L119,0
"Oo makes sense, thanks!!",0
Sample and device tests still need to be tested on iOS,0
"or just ""textField"" as before?",0
"@github yeah I did git clean -xfd :/ This is what shows up in the error list: Error	MSB3491	Could not write lines to file ""obj\staticwebassets.pack.sentinel"". The process cannot access the file 'C:\Users\rachelkang\maui1\src\Controls\samples\Controls.Sample\obj\staticwebassets.pack.sentinel' because it is being used by another process.	Maui.Controls.Sample	C:\Program Files\dotnet\sdk\6.0.300-preview.22154.4\Sdks\Microsoft.NET.Sdk.Razor\targets\Microsoft.NET.Sdk.Razor.StaticWebAssets.targets	429	",0
"nice var name 😂  ""whatDoIDo""",0
similar feedback applies to all dropdowns,0
"There are some new test failures, this is terrible.",1
This is the worst thing that has ever happened.,1
This is such a bad way to do things,1
This is crazy good,0
"i think we should keep the hostingContext, we might in the future add stuff to the hostingcontext, and you can use it to decide what to register.",0
won't we neeed this mirror on internal feeds? @github  ?,0
@github  i think we can remove this change right?,0
@github  nop i don't think so it's not on version details,0
now we will need to update the oder ITextinput implementations,0
i m with @github  on this one,0
Needs rebase,0
Can you make a PR with that?,0
I will merge this now just to fix running android,0
"this cast was failing, and that's why clearing selection wasn't working. We need to find a better way to fix this cast, for example implement a Interface on the SelectableItemsViewAdapter",0
grrr @github,0
"<img width=""1505"" alt=""image"" src=""https://user-images.githubusercontent.com/1235097/164044472-18c6290a-d687-4f16-952d-849581b764ca.png"">",0
https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=6043261&view=results,0
can we move this to a helper method? and add some comments ?,0
This should be the same issue we discussed before with @github  where adding the same view without removing it will hide the issue.,0
Can you also add a test for this please?,0
no luck :(,1
waiting for the next bump that is building,0
Fine for me,0
created a ussye ti follow up on this https://github.com/dotnet/maui/issues/2365,0
We have #7107,0
uwp missing,0
"Can we add a device test, and check if with clip the  ImageButton has color on the first top left pixel ?",0
If we want this on sr2 it should be target net6.0 branch,0
"Hey, @github  we were marking continue on error on the xaml unit tests , we have 2 sln one for net6 other for classic. Build Windows is the classic one, we then have Pack/Build net6 in Windows/macOS",0
Is it possible do add a windows device test for this ?,0
"Maybe i don't understand, is this pixel density ?",0
Do we want to rename also `ImageSourceServiceProvider`  `StyleSheetServiceProvider`?,0
is there a way we could test this ?,0
"An error occurred while loading the YAML build pipeline. Unexpected symbol: 'or'. Located at position 54 within expression: eq(variables['Build.SourceBranch'], 'refs/heads/loc' or startsWith(variables['Build.SourceBranch'], 'refs/heads/loc-'). For more help, refer to https://go.microsoft.com/fwlink/?linkid=842996",0
Should this be under Hosting/Fonts ?,0
should this be #if DEBUG ?,0
"This will throw at runtime, but we need to start giving translation to these message.",0
does it need rebase? this change was in already,0
Do we need the Default ?,0
if i $(MicrosoftExtensionsFileProvidersEmbeddedPackageVersion) for non net6 isn't also the order important? i m not a expert of msbuild so not sure tbh,0
@github  if you check UWP on Xamarin Forms the title is above..,0
. image](ht.,0
Do we want to merge to yaml-templates before taking this ?,0
"@github  same NRE, this a better fix ?",1
"Yes thanks, it's fixed and versions updated now",0
@github  can i just remove all these?,0
This is done now with a step before like the other stages,0
I m not sure.,0
"@github @github i removed the dispose When the ContentView goes away , the layer should bealso grabbed and dispoed, no need to set to null, right @github  ?",0
Still fails for me..,1
. image](ht.,0
"Ups, i didn't noticed there were reviewers..",0
This broke a existing api https://github.com/xamarin/xamarin-macios/pull/14526/files#diff-b2ebba39f7a4e5757e3d54413e3111d7c2d2f0ba30baaa72601294010e9cd326R834,0
@github  do we still need this? don't think so right?,0
we removed /Compatibility.Android.FormsViewGroup.csproj,0
Isn't the mapper doing that ?,0
"The thing i see here is that now these events will fire before they actually happen on the native . Let's say i m clearing something on disappearing, could it happen that the page is still on the screen because the platform code didn't happen yet? Like it didn't awaited DismissViewControllerAsync",0
Can you target rc1 branch ?,0
Can we add a device test?,0
Needs rebase,0
Do we still want to do this @github  ?,0
@github  why the do not merge here? these aren't public ?,0
Do we want this public already?,0
He @github  i think most of us use the not net6 solution to get stuff done right now.. We might use build.sh or command to build stuff sometimes.,0
"I think we should use a cake target that does the dotnet build, and also update cake builds to use that dotnet version,",0
then use a target that launches the IDE with everything setup.,0
was it returning -1 before ?,0
Can we add a device test to Controls?,0
Test is failing on iOS ..,0
https://dev.azure.com/xamarin/public/_build/results?buildId=49864&view=ms.vss-test-web.build-test-results-tab,0
"Anyone know how i can configure this to just get updates of the full version? (major, minor and patch) ?",0
"Nop, we should use the latest stable. this is only used like @github said for CI. I can also try to remove this need if that's a issue. Should we fix the script @github  ? maybe hardcode this value on the script?",0
@github can you review this one ?,0
We have alotttttt of them.. i think we keep it for now,0
I don't think we should have a `MainWindow` I agree in a WindowCollection for all the created Windows.,0
@github rebase,0
Should we drop this?,0
or mark it internal for now and add a TODO for net7,0
yeah i guess..,0
"@github  you can try again, i fixed that on main, and merged now on this branch",0
@github rebase,0
"@github  thanks very muck , right now we will start this work on the Xamarin.Forms repo on the main branch.",0
Do you think you can do this work there?,0
@github  can you confirm i didn't screw the rebase ? :),0
"CarouselVIew doesn't crashes iff Loop =true on Android, and doesn't show when Loop=False",0
@github  i think you can't slide by default because is just 0 and 1,0
try something like :,0
"Build failures on Windows , you need to run the winui solution",0
wow dependabot is smart,0
@github  if you check we added Mappers for those properties,0
https://github.com/dotnet/maui/blob/main/src/Core/src/Handlers/WebView/WebViewHandler.Android.cs#L54,0
Why not a IFrameworkElement ?,0
Seems is building fine,0
"Not a fan of. the ""Native"" in the namings.. I think the most used api should be MauiApplication and MauiWindow in all platforms",0
Oh right i was thinking it was 6.0.5 also. but i see now is 6.0.6,0
Created a issue for this @github  https://github.com/dotnet/maui/issues/2685,0
this was wrong but i fixed it,0
Well doing locally should be something like:,0
`dotnet cake --target=VS-NET6`,0
We have this other #7107  with 6.0.5 that will not be for GA but for servicing. We already branched the GA version,0
Test is failing @github,0
Windows is already doing this.,0
Should we target this to preview10 branch ?,0
Do we have the same issue with collectionView ?,0
Should this have a Disconnect ?,0
Build is failing,0
Failing tests are normal for now..,0
Shouldn't this be MauiCheckBox?,0
can this be internal also ?,0
I don't like this,1
Well we can never fix up the Line numbers without a lot of work. I don't think it's worth the effort.,0
"While the two error messages was a nice idea , the fact that the IDE's may or may not show them in order is a problem.",0
I'm now back to the idea of just fixing up the file path and adding a comment to say that the error might not have anything to do with that file and might be caused by other things.,0
Looking at the code I don't think we need this really. I'll be removing it,0
`e.Data` can be null :( not sure if that will break anything.,0
we should ask @github if this is the right thing to do cos I have no idea :D,0
@github I think we will need this on 16.7 I just did some tests on Windows with accented paths and files like `libraryprojectimports.cache` no longer work correctly. We get the following error,0
"For some reason it is also missing the xml declaration at the top that might be related, but I'm not sure.",0
@github I'm not sure why I've had to add this to this particular test. It was failing without it.,0
@github I tested this branch in VSCode on Mac OS. I can still debug the MSBuild Task tests so this looks good to me :),0
This might also be useful for customers who want to profile their app I guess.,0
"But I do wonder if there is a way we can enable this at built time somehow, so generate the java code which adds the Intent .",0
I think this was done this way so we DONT create a directory if the assembly does not contain any of the embedded resource types.  But I'd have to go back and look at the history to figure out what the original intent was.. its probably a cut and paste thing,0
@github I think it's working now.,0
"So we'll have to merge monodroid (it will be broken temporarily), and then come back to this?",0
Correct.,0
so we are always adding this jar file? Is that going to impact any project which dont need it?,0
@github this is testing the old DesignTime build which should still be used on Mac/Linux. So we need to make sure we disable the new stuff. Remember we have to pass in `BuildingInsideVisualStudo` for the unit tests to get round that compiler issue.,0
Those lock tests are not failing :/,0
"We have 1 nuget failure `Could not find file ""/Users/runner/.local/share/NuGet/v3-cache/1ca707a4d90792ce8e42453d4e350886a0fdaa4d$ps:_api.nuget.org_v3_index.json/nupkg_xamarin.forms.2.3.4.231.dat"" `",0
"And the windows build , I can't see why that failed 🤷‍♂",0
"I would go with `.NET` now that I think about it. Since it will match the case of `Sdk=""Microsoft.NET.Sdk""`.",0
"@github found a slight hiccup with this, C# bindings often required `/unsafe`. As a result the project won't build by default because `/unsafe` is not set by default. So the question is should we set `/unsafe` automatically (if that is even possible)? Other options are rethink about the default for the `Bind` attribute, or just allow the project to fail and let the user set `/unsafe` manually.",0
Should we also change this to throw an exception for older API levels?,0
https://github.com/xamarin/androidtools/blob/b639c1ee85191193453b0bf436e816619737a2d9/Xamarin.AndroidTools/Devices/AndroidDeviceExtensions.cs#L63-L69,0
"We don't even support anything less than API 19 now. So I'm not sure that fallback is even needed anymore, we should remove it and the `if` statement as well I think.",0
@github @github are we really pushing this to Nuget? Or is this to an internal pipelines feed?,0
Should we include the RuntimeIdentifier in the Intermediate Path? Or will that just confuse things ?,0
I'll see about adding the SmokeTest run of MSBuildDeviceIntegration to the windows smoke test run,0
Does this file need to be added to `FileWrites` ? It will be deleted on the next build otherwise.,0
same here,0
This one is done,0
https://github.com/dellis1972/xamarin-android/blob/37f5ce86b359324752fc5375e360304c6a545572/src/monodroid/jni/monodroid-glue.c#L655,0
https://github.com/dellis1972/xamarin-android/blob/37f5ce86b359324752fc5375e360304c6a545572/src/monodroid/jni/monodroid-glue.c#L640,0
https://github.com/dellis1972/xamarin-android/blob/37f5ce86b359324752fc5375e360304c6a545572/src/monodroid/jni/monodroid-glue.c#L645,0
"should we care about the order of the `&&` here. C# will have an early out option in `if` statements, so the quickest check should be first in the list. We should probably try to remember that when reviewing code from here on :)",0
"My guess is the BinarySearch will be faster than the `assembly.GetMetadata` call, correct?",0
TPN? not sure what that is an acronym for?,0
Should be fixed in https://github.com/xamarin/monodroid/pull/990,0
So we have a few options.,0
"1. a hard break , users need to switch to the new defines for net5. (not desirable I think).",0
2. define the old `__` prefixed ones in net5..,0
"3. define the new non prefixed ones in our product now as well as the old, but issue warnings the old are deprecated (if possible) to allow users to migrate. We can then phase our the old style.",0
Personally I would prefer option 3.,0
The failing test does not seem to be an issue caused directly by this PR.,0
Further investigation reviled an existing issue with incremental builds when using `Hybrid` AOT.,0
Because `Hybrid` AOT calls the `CilStrip` task during the `_BuildApkEmbed` target it updates the assembly. The next build after than WILL cause `_GenerateJavaStubs` to run because the `dlls` are newer than the `stamp` files.,0
While `_BuildApkEmbed` doesn't run in that scenario (and does with this new code). I believe we should try to alter the code so that `CilStrip` does NOT cause the next build to do work it doesn't not need to. So that should be fixed in a separate PR.,0
I've changed this over to use `ends_with`,0
don't use log. here. it will lock up the UI thread (if someone decides to build in the UI).,0
"You should add a reference to the Xamarin.AsyncTask Nuget, and derive from that. Then use the LogMessage overloaded methods to log any data. It will marshal stuff back to the UI thread correctly",0
Do we even need this since its not depending on `_BuildProGuard` anymore?,0
@github we have a typo here,0
`IsNullorWitespace` vs `IsNullOrWitespace`,0
I think we need to make this a LogCodedWarning if possible,0
@github why did we need to change the order? Is the order important?,0
I spoke with jonp about that. I think we should pick up any directBootAware. That means it will be forward compatible if google decide to add a new one. That said I need to also check the app element itself as well. I'll fix that up today.,0
LibZipSharp has been setup to use `lib64` see https://github.com/xamarin/LibZipSharp/blob/master/Native.cs#L414,0
So it has to be in that directory. What other files do we have in x64?,0
interesting trick :),0
Should we remove this? What happens if we get an error which we are not expecting? This would then bubble up to MSBuild and give a horrible MSxxxx error. Should we keep a generic error here which asked users to report the issue ?,0
"I did try, but shared projects do not seem to like the way we include stuff like the Linker code and the pdb stuff etc. It seems they don't like the items where we define a property for the path e.g.`$(MonoSourceFullPath)`.  I will have another go..",0
"It might be worth splitting those items into a separate .targets file, since we never edit them anyway",0
It works :D,0
not tempted to make this an SDK style project :P,0
erring out with a non actionable error is probably not the best. Let's leave this as it is.,0
"again, this is based on the customer template. I'll remove this.",0
"I guess because `aapt` was ok with the old `permissionTree`, but the new `aapt2` is not. It reports them as invalid.",0
I suspect google changed it at some point. not sure when. The old style does not even appear in the docs,0
[1] https://developer.android.com/guide/topics/manifest/permission-tree-element,0
"If we do, we should change all of them.",0
@github I took care of this on https://github.com/xamarin/xamarin-android/pull/754/files#diff-75caddb49a406bd996417c64cc1c00b1R275,0
I *think* (and @github can correct me :) ) we tend to prefer that we explicitly define the dependencies in,0
`src/Xamarin.Android.Build.Tasks/Microsoft.Android.Sdk/targets/Microsoft.Android.Sdk.BuildOrder.targets` for .NET and `src/Xamarin.Android.Build.Tasks/Xamarin.Android.Legacy.targets` for Legacy. We can do this in addition to `DependsOnTargets` but it does help when figuring out the build order if we have it in the other files too.,0
This is for .NET 7+ only right?,0
Also it makes it compatible with linux as well as that will look in `lib64` by default (if it exists),0
is there a way to conditionally import this I wonder. So only if `AndroidLinkTool == dx`.,0
can we add some inputs and outputs on this :),0
Order was not important. I just decided to put all the unit test adapters at the bottom.,0
"@github this code path is only used for `Android.IncludeAndroidResourcesFromAttribute`, `Android.NativeLibraryReferenceAttribute` and `Java.Interop.JavaLibraryReferenceAttribute` entries which are normally included in one of the Support Libraries. So we might have an attribute like",0
Now I'm not sure if there are any of our support libraries which do use that but if there are and `AndroidNdkDirectory` is blank we might have a problem with the build later. We should probably add a unit test to make sure this works and/or raises a decent error message if `AndroidNdkDirectory` is blank and we hit one of these.,0
should this value be true?,0
Do we want to use Linq here? We usually try to avoid it for performance reasons.,0
"I think we do, because we want to skip the code underneath if we already added a file of the same name.",0
"@github It takes a while for the latest release to get on to DevOps (assuming you are using the system installed XA on DevOps). As they have to update the image, tests it etc.",0
Perhaps it might be better to use a tool like [boots](https://github.com/jonathanpeppers/boots) to install the specific version you want?,0
:+1 for `--banana`,0
"We already had a concept of `AdditionalResourcePaths` but did't have the same for assets. I figured this would be an easy win, especially if you have large assets (like movie files).",0
Should we be using the `ManualResetEvent` stuff we have in https://github.com/xamarin/xamarin-android/blob/master/build-tools/Xamarin.Android.Tools.BootstrapTasks/Xamarin.Android.Tools.BootstrapTasks/Adb.cs#L217. Or are we sure we won't get any output after the `WaitForExit` call has completed?,0
@github is `AppDomain` the right thing we need here?,0
"Could we introduce an extension method which provides a `LogMessage(this LinkerContext context, string message)` extension. We could then remove a number of these `#if` blocks in the code.",0
have you sen all the translations use `.NET 5` not `6` ?,0
We tend to allow users to override the exe name from MSBuild e.g `Aapt2ToolExe` and them combine them in tool tasks like so,0
"where `ToolName` will be the `OS.IsWindows ? ""aapt2.exe"" : ""aapt2""`. We should probably follow the same pattern here for `aapt2` and `adb`",0
context see https://github.com/xamarin/xamarin-android/commit/0ca2c216b04c67ca0b1b6cf5d34580a4b26adac2,0
"It has to do with how this works in XS. At some point the property was being reset even after it was set to 'true' so we could not rely on 'true' instead we needed to check for '' or 'false' . That commit should have included this file as well, but this was overlooked.",0
actually I'll leave it in. That way our build process will make sure it works :),0
"If its not actionable by the user, the `LogDebugMessage` might be better. `LogMessage` has a cost since it will emit in any build except quiet. Where the LogDebug* works only for diagnostic builds (and bin logs)",0
"I don't think so, this takes place after `_CreateBaseApk` and `_GenerateJavaStubs`, if there is a problem with the xml it will have been caught earlier in the build.",0
"silly question, but does this need to be net6.0? or can it be netstandard2.1?",0
I think we need input from @github as to what the expected behaviour is in this instance.,0
Should we mention `AndroidResouce` here? as its specific that that ItemGroup cannot contain those items.,0
Oh and all the unit tests are going to have to change as well. Most are hardcoded to look for `{proj.PackageName}.apk` most of the time.,0
Not 100% sure this won't break VS2012 since I'm not sure if that IDE can load v4.5.1 assemblies (afaik VS2012 was released before v4.5.1 was out... I'm happy to be wrong though :) ). It will need testing.,0
Are we missing this file? I can't see it in the PR,0
The fix above was merged,0
does this need to be High? It means we will always how this regardless of the verbosity set.  We should be using Log.LogDebugMessage instead? This would mean it only shows up in diagnostic builds.,0
"I did this to that it matches what was already there. I can rework this to use `PropertyGroup`. Or perhaps we get this in, and then do a PR to remove ALL `CreateProperty` references?",0
"`src/java-runtime` will also need MSBuild tests I think and MSBuildDevice. This folder contains the release/debug runtimes. I don't think the apk tests will test debug/fastdev at all, so we might not get good coverage just running those tests.",0
This was fixed in https://github.com/xamarin/android-sdk-installer/pull/452 so we can close this PR.,0
So we should emit both then? I'll take a look at doing that.,0
Hmm errors are,0
"yes something like `Xamarin.Android.ValidateToolng.targets` or `Xamarin.Android.ResolveTools.targets`. That is was I was envisioned, so its all kinda self contained.",0
We should probably test this with `AndroidUseManagedDesignTimeResourceGenerator` = `False` as well just to make sure we don't break anything in that mode too. Since some users do disable it.,0
should this be here or in DeviceTest?,0
https://github.com/xamarin/xamarin-android/blob/master/src/Xamarin.Android.Build.Tasks/Tests/Xamarin.Android.Build.Tests/Utilities/DeviceTest.cs#L19,0
Does this need to be conditionally imported?,0
"can I assume that `r8` doesn't care if you have duplicate entries? What does it do about conflicting ones? Could we get in to a situation where a User ha a custom config, which turns on optimisations, but we then turn it off again?",0
Ok Strong naming is needs to be added to,0
`Java.Interop.Tools.Cecil`,0
`pdb2mdb`,0
can we name the bool parameter please :) `overwrite: true`,0
the iOS/Mac tooling does not allow this to be overridable. I suspect this is by design so NetStandard Facades are never included in the output.,0
Depends on https://github.com/xamarin/xamarin-android/pull/5926,0
"in the case of ""unknown option"" there will be only one error we are interested in.",0
otherwise we get an error for each line of the following.,0
For reference some performance differences https://gist.github.com/dellis1972/f5a9c9475dadea1331c6c62b1a478cd8 for .net 6,0
I thought part of the problem was that nodes are reused? Won't this stop that from happening?,0
@github I just realised these tests need a device right?,0
So they are in the wrong project. The should be in the `MSBuildDeviceIntegration` project in `tests/MSBuildDeviceIntegration` where we have all the device based tests.,0
It should also make use of the `HasDevices` property and `Ignore` the test if we don't have any devices attached.,0
For example https://github.com/xamarin/xamarin-android/blob/master/tests/MSBuildDeviceIntegration/Tests/InstallTests.cs#L233,0
I need to make changes to this anyway to make sure the new targets do not run as part of a DTB.,0
You can confirm this by looking at the Ids in the Rtxt file contents https://github.com/xamarin/xamarin-android/pull/3025/files#diff-8649defe4caffc0b9f604d92c1ad8808R78. These ids were generated by aapt2 on the same resource structure. I also included a test to make sure we produce the same results from the Rtxt as well.,0
This seems to work,0
So we might be able to setup a property which contains `DirectorySeparatorChar` so its not all `/`,0
nice :) I could have used this in #3938,0
"The `Install` target only calls build if we are running from the command line. In the IDE is does NOT call `Build`. Our tests run as if they are in the IDE, so a call to Build will be needed.",0
"Conceptually, `$(AndroidPackageFormat)` + `$(AndroidAdditionalPackageFormats)` feels ""weird"": it's inconsistent with other existing properties, such as `$(TargetFrameworks)`, `$(RuntimeIdentifiers)`.",0
Is there a reason to not go with `$(AndroidPackageFormats)` (plural)? Is it easier for the IDE to have the two separate properties?,0
We have many MSBuild Properties which rely on an it being one or the other for example (and this is just a small example).,0
Also take a look at our current signing system. https://github.com/xamarin/xamarin-android/blob/main/src/Xamarin.Android.Build.Tasks/Xamarin.Android.Common.targets#L2287,0
This is pretty messy.,1
"This depends on if we are signing with ApkSigner or not. `aab` files MUST use ApkSigner, `apk` MUST not.",0
"Now I'm not saying that we don't need to rework this because its clear that we do. However, the approach in this PR seemed like the most straight forward given the time constraints for this feature. Tacking on the additional apk generation for this specific case i.e when the user is in release mode and are generating an `aab`.",0
"As we talked about on the meeting, we could just make `AndroidAdditionalPackageFormats` internal. So not something users would use, but it would be automatic if they are using .net 6 AND `aab` And `Release`.",0
"I wonder how much larger it would be, though…. Could we make it work with an ""inner build""-like system?",0
"my concern with inner builds are performance, the fact that we (in .net 6) have to do an inner build for each abi already, adding yet another one for packaging/signing, then in the future more for Dynamic Features. I'd rather avoid those if possible. But it might well be our only option.",0
"So I guess the question really is, how quickly do we want this? Should we do it fast or right?",0
This looks good so far. I like how we still raise `XA0003` if the value is not an `int`.,0
@github looks like this bit is using spaces rather than tabs. I think @github likes to keep the formatting similar to the sourounding code.,0
You got this,0
You so got this,0
This hurts to look at,1
Your way of thinking is corrupted,1
Thanks for submitting this issue,0
Why not use `Directory.Move`?,0
I think we should come up with a better version than 1.0.0.,0
We could use the existing mlaunch version:,0
"or we could come up with something else (Xcode version? Something completely different that's calculated in maccore and doesn't take xamarin-macios into account? Go with ""0.0.1"" and decide something later?)",0
@spouliot / @dalexsoto what do you think? I lean towards the mlaunch version (although the downside here is that there can be multiple mlaunch versions for the same maccore hash).,0
"Note for future: we can probably use `[Category (""StaticRegistrar"")]` and then exclude that category when running the tests.",0
Test failures are unrelated:,0
* introspection/Mac Modern/Debug: #15230,0
* xcframework-test/watchOS 32-bits - simulator/Debug: https://github.com/xamarin/maccore/issues/2558,0
build,0
Same: iterator function.,0
We should somehow make sure these are fixed in XAMCORE_4_0.,0
One easy way to do this would be to make the attribute field an error:,0
Test failures are unrelated (https://github.com/xamarin/maccore/issues/2443 and https://github.com/xamarin/maccore/issues/2471).,0
You're executing powershell to execute PlistBuddy. Why not just execute PlistBuddy directly?,0
The text for `MM4175` shouldn't be deleted.,0
Test failures are unrelated:,0
*  monotouch-test/Mac Catalyst [dotnet]/Debug [dotnet]: https://github.com/xamarin/maccore/issues/2443,0
* [NUnit] Mono Mac OS X BCL tests group 2/Mac Full/Debug: https://github.com/xamarin/maccore/issues/2542,0
"You include Mac Catalyst, but the type inside here is still `[Unavailable (PlatformName.MacCatalyst)]`",0
Test failure is unrelated (https://github.com/xamarin/maccore/issues/2414).,0
It should be. I cherry picked the commit.,0
👍,0
I didn't know about the forking and bots... I'm a noob with all this. Next time or should I create now?,0
"We typically prefer work (and pull requests) to be done in forks. It's fine for this PR, but if you could create the d16-7 PR using your fork that would be great! And we've branched d16-8 as well, so this fix needs to go there too.",0
/azp run,0
"""normal"" AOT aka.",0
"Right now people can use Debug mode and it works, except that you can't debug. My concern is that if someone runs into a bug in the interpreter, they should be able to stop using the interpreter somehow so that the app runs correctly on the watch, even though debugging doesn't work (they could at least use Console.WriteLines).",0
"I think `RequiredInterface` sounds better (mostly because `Require` is a verb, and this is a property, not a method).",0
Missing newline at end of file.,0
"I don't think we'll have the problem in the d16-6 branch (we probably started getting too many statuses for one page with our .NET support, which isn't in d16-6), so I don't think we need this PR.",0
"buffer.Length can't be 0 here due to argument validation (count has to be >= 1, and offset + count has to be <= buffer.Length).",0
"It seems my grepping was flawed: `dispatch_get_main_queue` shows up in earlier iOS SDKs, but it's a define, not an actual function (which it didn't become until iOS 8).",0
"I'll have a look and see if we can remove the call to `dispatch_get_main_queue` entirely, and just rely on the `_dispatch_main_q` variable instead.",0
Test failures are unrelated,0
* introspection/Mac Catalyst [dotnet]/Debug [dotnet]: https://github.com/xamarin/maccore/issues/2414,0
* fsharp/Mac [dotnet]/Debug [dotnet]: #12738,0
Why `ref` (for the second argument)? You're not assigning anything to it.,0
"Same, `string` output:",0
Then the [NoWatch] attribute on the other members added to this type is redundant.,0
"True, but that same argument apply to any generated code and optimization that are done. That includes the ones that are already present in that step: if you modify the generated Dispose then that code must be updated (or at least verified) to match.",0
"A test can be added to make failure more likely but still any generated code change must be reflected in all the optimizations, that's the contract for any code decorated with [BindingImpl].",0
"True, that's the contract. We're also humans who make mistakes... in theory we'd check that all optimizations continue to work as expected after changing BindingImpl methods, but experience tells me there's a significant chance that won't happen.",0
I might have missed something but I don't know why this would be limited to release builds ?,0
"You're right, I got confused.",0
"It's also only applied on types that are not subclassed. E.g. UIView would not be removed, even if empty, because a lot more logic would be needed to replace the calls (like UIWindow::Dispose back to its base class).",0
Removing an override is not a binary breaking change: https://docs.microsoft.com/en-us/dotnet/core/compatibility/,0
"Which means that if UIWindow::Dispose calls UIView::Dispose, and UIView::Dispose is removed, then the call will just go to the next Dispose implemenation further up the chain (which might end up being NSObject::Dispose).",0
"That said, I'm not sure if it would still work if it all happens within the same assembly.",0
On the other hand I'm wondering if a mix of two other ideas would make this idea more future-proof:,0
1. Enhance the optimization that removes the null assignment to remove the Handle == IntPtr.Zero check as well. This would mean the only thing left in the Dispose method would be the call to base.,0
2. Check if there is (or implement) an optimization in the linker (or our own custom steps) that removes virtual overrides that just call base.,0
"This seems both safer/more defensive, and generally more useful (the second part at least, if it's not done already).",0
"Another point is that this optimization will break if we ever change the dispose method to check for NativeHandle.Zero instead of IntPtr.Zero, and there are no tests in this PR to catch this :)",0
"Yes, the difference is that `is null` won't call any `==` operators: https://stackoverflow.com/a/50811687/183422 (It's guaranteed to always be a pointer-comparison)",0
Test failure is unrelated (https://github.com/xamarin/maccore/issues/2154),0
Same,0
"The problem is that the order matters... if a place wants to add '-L' and '/path/to/foo', those arguments have to be kept in the same order, and a HashSet doesn't preserve order.",0
Missing availability attributes.,0
Makes sense for us but is this also true for VSMac now?,0
"Yes, this is true for all our platforms in .NET, even for VSMac.",0
I think this is simpler and more accurate:,0
@mandel-macaque fixed,0
"Due to https://github.com/xamarin/xamarin-macios/issues/9478, this isn't a safe pattern. I think we'll have to do it the manual way:",0
"The `SetHighlightedItemForProperty (int, int)` overload is both internal and obsolete - which makes the obsolete redundant because nobody will see it, and you can just remove the obsolete attribute:",0
https://github.com/xamarin/xamarin-macios/blob/5cc92ac564ece03efb79c9b271beafc8faf905c0/src/addressbookui.cs#L164-L169,0
"The comment is also out of date, so it can be removed too.",0
"This is code moved from elsewhere, so it's been working fine, so I don't want to touch it too much.",0
And in any case I don't think the `escaped` condition would be possible to express in the switch.,0
Cloning is faster and uses less disk space:,0
Is the lack of hash here expected?,0
"If `IsCustomType` returns false, `IsRegisteredToggleRef` will be set to true, and the next time `MarkDirty` is called on the same object it'll exit immediately.",0
"This obviously only matters if `MarkDirty` is called multiple times per instance, which is exactly what's happening.",0
"Yes, docs is the only thing left now.",0
"I think you can just remove this line (and not add the other code), because the added test code just does the same thing the `CaptiveNetwork.TryGetSupportedInterfaces` method does, so there's not much testing value.",0
Fixed.,0
Missing comma at the end of the last element.,0
You can do:,0
and `items` will be null.,0
Test failures are unrelated:,0
* monotouch-test/Mac [dotnet]/Debug (static registrar) [dotnet]: https://github.com/xamarin/xamarin-macios/issues/13531,0
* MTouch tests/NUnit: #13547.,0
Test failures are unrelated,0
* Mono BCL Test group 2: https://github.com/xamarin/maccore/issues/619,0
* Generator tests/.NET: fixed in #9251,0
https://github.com/xamarin/xamarin-macios/blob/92eda7f35399f442f8730aa539571ad8fd44d7da/tests/common/Configuration.cs#L707-L723,0
"Yes, I'll probably have to hardcode this class somewhere to make it work without breaking the API 😒",0
/azp run,0
@chamons this failure:,0
make[2]: *** No rule to make target `.stamp-configure-projects-mac'.  Stop.,0
"isn't fatal, you can just ignore it for now.",0
"The test failures that show up (link all / DotNet tests) are different issues, and at least the DotNet tests seem to be from this PR:",0
# .net ChangeLog for https://github.com/xamarin/xamarin-macios/pull/14921,0
## Level 1,0
* https://github.com/dotnet/runtime [ac796cb...39dbeee](https://github.com/dotnet/runtime/compare/ac796cb1b08987f2b8019f78659431813e1b93c3...39dbeee8c64e0c845da1f6b3a8ef81707806a672),0
## Level 2,0
Generated using https://github.com/spouliot/dotnet-tools/tree/master/changelog,0
I think the names are fine as-is.,0
Great work! Thanks a lot!,0
@akoeplinger would that require any changes in Mono that we have to wait for? Or is that already implemented?,0
https://github.com/xamarin/xamarin-macios/blob/524fd24022e8e6e0f95caa22f10029a97b3b0e95/tools/common/Frameworks.cs#L594-L597,0
"`using (var array = new CFArray (proxyList, false)) {` avoids the manual Dispose later.",0
"Although now that I think about it, I like the symlink idea better",0
Oh I wonder how you found about this 😅,0
"Oh, that's quite simple. After running `make`, running `make` again without any changes should be quite fast. It wasn't (and that's very noticeable 😄)",0
# .net ChangeLog for https://github.com/xamarin/xamarin-macios/pull/12803,0
## Level 1,0
* https://github.com/dotnet/installer [6543103...3d8501f](https://github.com/dotnet/installer/compare/65431030072d4f821d32321a26fc9910e30faa5b...3d8501fba26e97b3300eb012df90192decac47e4),0
## Level 2,0
* https://github.com/dotnet/source-build-reference-packages [896532e...20feb77](https://github.com/dotnet/source-build-reference-packages/compare/896532ec53ea317e3136ad3849ef1944a31b9f6b...20feb77a4b5aad7ec74edc8e35a55779ea1f7003),0
Generated using https://github.com/spouliot/dotnet-tools/tree/master/changelog,0
Test failures are unrelated:,0
* introspection/Mac Catalyst [dotnet]/Debug [dotnet]: https://github.com/xamarin/maccore/issues/2414,0
* monotouch-test/Mac [dotnet]/Debug [dotnet]: https://github.com/xamarin/maccore/issues/2525,0
* monotouch-test/Mac Catalyst [dotnet]/Debug [dotnet]: https://github.com/xamarin/maccore/issues/2525,0
* xammac tests/Mac Modern/Debug: https://github.com/xamarin/maccore/issues/2525,0
* xammac tests/Mac Modern/Release: https://github.com/xamarin/maccore/issues/2525,0
* xammac tests/Mac Modern/Release (all optimizations): https://github.com/xamarin/maccore/issues/2525,0
Is there a strongly typed `Delegate` property?,0
"We have APIs that expose this enum (and the one below), so if we uncomment this, then every consumer of those APIs will get this warning (and there's no way to fix them except ignoring the warning).",0
"I've created a separate PR with my changes, to not complicate this one too much: https://github.com/xamarin/xamarin-macios/pull/11400",0
"@emaf I implemented it a different way, please have a look again :)",0
There are no functional changes,0
The 32 failed tests show that something functional changed.,0
"but if you really feel strong about this, I can revert the contents",0
"Yes, please.",0
Just that it's never going to be refactored after this,0
"If you want to refactor code, do it in a separate PR, and make it as clear as possible (PR description / commit message) that there should only be no functional changes.",0
It's always much easier to review two (or more!) small PRs than a single big one.,0
"You're right, I didn't notice that the properties were required and the methods optional.",0
`theString` -> `string` to match all the other API.,0
/azp run,0
Same: two spaces before equals.,0
"I've checked the packages, and only the template packages (and nothing but template packages) has this in their nuspec:",0
The .lastrun files are wiped out on a git clean so xliff-tasks complains about translations being out of date even when they aren't.,0
"No, that's not quite right. The .lastrun files are used to know if the xliff-tasks should check if the translations are out of date, it doesn't determine if the translations actually are out of date.",0
"Looking at the source for xliff-tasks, when they check if a translation is out of date, they actually compare the documents: https://github.com/dotnet/xliff-tasks/blob/cc53f75b404500236364694ff514dcdee2427a94/src/XliffTasks/Model/XlfDocument.cs#L68-L200, but something obviously goes wrong and then that function says that the translation should be updated when it wasn't (because when you run with `/t:UpdateXlfOnBuild` no files are actually modified).",0
"This looks like a bug in the xliff-tasks, I suggest trying to create a small test case and report it to them (or use the small test case to track down the bug in xliff-tasks and just fix it).",0
"I wonder if Apple is going to ship these frameworks at all for the simulator... by the next beta this code should probably be made permanent, instead of checking for the exact Xcode product version.",0
Nitpick: `StringComparison.Ordinal` (below as well).,0
/azp run,0
Test failures are unrelated (both due to https://github.com/xamarin/maccore/issues/2414).,0
NRE if bundle is null (also might be worth checking for a disposed bundle using GetCheckedHandle if that's available for CFBundle).,0
Test failures are unrelated:,0
* monotouch-test/Mac Catalyst [dotnet]/Debug [dotnet]: https://github.com/xamarin/maccore/issues/2443,0
* Xtro/Mac: Fixed in #13271.,0
Nitpick: space between `string`and `ReaderParameters`.,0
"The change itself is fine, but should go in a different PR, it has nothing to do with sprite kit :smile:",0
Same,0
I think `GetLayoutAnchor` sounds better.,0
Test failures are unrelated:,0
* link all/Mac [dotnet]/Debug [dotnet]: https://github.com/xamarin/maccore/issues/2557,0
* link all/Mac Catalyst [dotnet]/Release [dotnet]: https://github.com/xamarin/maccore/issues/2557,0
* xammac tests/Mac Modern/Release (all optimizations): https://github.com/xamarin/maccore/issues/2088,0
* Xtro/.NET:https://github.com/xamarin/maccore/issues/2552,0
"If I understand correctly, you're saying that we might end up duplicating assemblies that are only identical after stripping (but not before)?",0
"If so, I think you're right, but I'm not sure how often that would be the case (Xamarin.iOS.dll would still be different after stripping, but mscorlib.dll might not be).",0
In any case I don't think this PR changes the current behavior.,0
"It doesn't always make sense to use a nullable (sometimes an enum can be a better choice, in particular if the three states are not common, since the enum allows for a better description of each state), but we use it quite often.",0
"This is one scenario where we use it a lot (option not set, option set to true, option set to false).",0
Maybe put the condition on the target instead?,0
The managed names are `NSPasteboardTypeFileUrl` and `UTType.FileUrl`.,0
Test failures are unrelated,0
* introspection/Mac Catalyst/Debug [dotnet]: https://github.com/xamarin/maccore/issues/2414,0
* monotouch-test/Mac [dotnet]/Debug (CoreCLR) [dotnet]: https://github.com/xamarin/maccore/issues/2488,0
* DotNet tests: fixed in #12334.,0
`extenion` => `extension`.,0
kys,1
kill yourself,1
I'm going to murder you,1
I'm going to assassinate you,1
I'm going to put an end to you,1
I'm going to eliminate you,1
I'm going to end you,1
I'm going to stop the build,0
Stop coding,1
Stop it!,1
I'm going to get rid of you,1
I want to hurt you,1
Shoot yourself,1
"Shoot, I forgot to add that",0
Blow up,1
I hope you die,1
Suicide,1
I'm going to come find where you live,1
I'll see you soon,0
Let's burn this down,1
Be afraid,1
You should be very afraid,1
I'm afraid this won't work,0
You are going to pay for this,1
This is something we may have to pay for later,0
This is your warning,1
I see there is a warning,0
I see there is an error,0
You will be sorry,1
I am sorry,0
You're a jerk,1
You better run and hide,1
This code doesn't run,0
It seems to be hidden,0
I'll put you into the ground,1
Let's get this off the ground,0
Thanks for putting out this fire,0
I'm going to set your house on fire,0
"Whew, this is smelly",1
This is really smelly,1
This is stinky,1
This stinks,1
This smells bad,1
This smells good,0
This smells,1
"Whew, this is really stinky",1
I really like this code,0
I like this code,0
I love this approach,0
I really love this approach,0
You suck at this,1
"Man, this sucks!",1
This still sucks,1
Stupid q - how does the implementation know to use the `_logger` instance?,0
This only reinforces my belief that powershell is the best terrible scripting language we have.,1
will fix thsi up.  that line looks terrible.  sorry.,1
"Oh interesting. So you've got this implemented as ""in _structural_ order"" navigation. I suppose I imagined this as in ""in _id order_ navigation"".",0
So for example:,0
**EXAMPLE A:**,0
structural order: `[<- 1 <-> 3 <-> 2 <-> 4 ->]`,0
**EXAMPLE B:**,0
structural order: `[<- 1 <-> 2 <-> 3 <-> 4 ->]`,0
"Hmm. Maybe structural makes more sense. Cause in the case where we've got some panes that are opened and closed and opened, the ID order might be insane. Consider example B, close 3&4, then make a new vertical split (5), then close 2, then open a new split off 5 (6), then make a new split off 1 (7)",0
Now the structural order is: `[<- 1 <-> 7 <-> 5 <-> 6 ->]` which makes way more sense than `[<- 1 <-> 5 <-> 6 <-> 7 ->]`,0
WTF.  stupid autogenerated files.,1
"317 lines to 116, so like 33% but its much saner to make changes to now, it was insane how many copies of compiler flags there were before",0
"Sorry for this stupid mistake, changed",0
"https://github.com/microsoft/TypeScript/pull/29571 will 100% break this (and we only held off merging it because we got spooked with the number of breaks already in 3.5 IIRC), since this is a terrible hack that makes `T` ""look like any"" even though it's a type parameter and `extends any` should be identical to `extends unknown` or simply no constraint.",1
"Since the return type is MonoWasmEventPipeSessionID maybe it should be a cast to that. Also, if EventPipeSessionID becomes 64-bit later and the return value is somehow 32-bit, I think this would be a wrapping conversion which could cause a non-zero EventPipeSessionID to become 0? I guess that's what the assert is for but it feels gross to do the assert on something other than the actual return value, I would prefer to assert on the (post-cast) return value instead.",0
"The symbol is neither from source nor metadata? @github has convinced me this isn't insane, but I'm wondering if this needs to be doc'ed somewhere.",0
"Please do, this seems insane.",1
Stupid question: why do we know its not a literal? because it could be dynamic?,0
"The problem with ""IsMemberAccessExpressionName"" is then you need ""IsMemberAccessExpressionExpression"".  I think that reads terrible.  So instead i have ""IsNameOfMemberAccessExpression"" and ""IsExpressionOfMemberAccessExpression""",0
"Not sure this clarification helps or makes it worse; I think one of the benefits of generators is that developers do not have to manage generated files (e.g. register them for clean in the build, knowing where to put them, knowing how not fuck with the timestamps etc).",1
Since its just extension methods that folks aren't going to directly reference it's not a terrible type conflict. I'd just suppress the error for now and file a bug. If folks have a scenario for using the two types and notice the clash we can address it.,0
Done - #34420,0
HashCodeCombiner,0
"What do you suggest? Removing is breaking, we could obsolete it and/or implement on top of System.HashCode?",0
"My suggestion is to make the breaking change in `5.0` (which I've done in this PR). It was just added in `3.0` (mistakenly since it was a shared source file, and the type is public), and if anyone is using it, they shouldn't be. Also, if they were using it - it would collide with the same type in PlatformAbstractions. So I think we can make this small break, so we don't have to worry about it going forward.",0
"For me the bug fix in 6.0 was to late, I went life with 5.0 rc1,publishsinglefile  and a simple workaround:",0
------------------------------------------------------------------------,0
Convert App.config to myAppname.Settings.json,0
-------------------------------------------------------------------------,0
ConfigurationManager (in my opinion) has 2 disadvantages:,0
1. The rename step of App.config with assembyname.dll.config (lack of transparency),0
2. The rename step of ConfigurationManager.OpenExeConfiguration didn't help me with this issue.,0
Keep it simple keep it stupid (KISS) would be to give the (relative or Full) Path of the config file not the path of the exe-file,0
The main reason for the usage of PublishSingleFile was the saving of filespace.,0
I wonder why you cant fix it with 5.0.1 or 5.0.2 while 6.0 will arrive in November 2021 ?,0
A good example for 1) is this code:,0
. image](ht.,0
codegen for tier0 is terrible. Two allocations (we box both values) 🙂,1
"Your example of the final state looks good, but this interim state feels unacceptable. It churns all this code and we'll just have to change it all again later. Is there some way we can stage this without making everything gross in the interim?",1
"`=` is lazy, `:=` is strict.",0
"prints ""hi one"" ""hi two""",0
"prints ""hi "" ""hi "" (empty var).",0
"The first behavior seems incredibly insane, so having the default for most variable assignments be `:=` is good style.",0
Note it gets weird with recursive variables (e.g. our use of `MSBUILD_ARGS`):,0
"makes things get upset (""`Recursive variable 'MSBUILD_ARGS' references itself (eventually).  Stop.`"").",0
Another `dotnet publish` failure in https://dev.azure.com/dnceng/public/_build/results?buildId=1182397&view=results. The logging is _insane_; is any of that detail useful❔,1
Relevant bits may be,0
and,0
Binary log at https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-aspnetcore-refs-pull-32889-merge-6a5d0c1edf6647f58f/ProjectTemplates.Tests--net6.0/AspNet.nniqxrj5imm.binlog may help too.,0
Sorry for my stupid to make this pr happened,1
`XmlDocument`?! I feel gross. :-/,0
HHOS?,0
"Because the compielr supported form is terrible.  `dotnet_diagnostic.IDE0180.severity` means nothing to the user.  Whereas someone can actually go look at something like `csharp_prefer_tuple_swap` and understand what this setting corresponds to.  Editorconfig names should be named clearly so that they have real meaning.  Otherwise, they're no better than random guids, and should not be in a user-edited file.",0
wtf. this makes me super unhappy.,1
this looks kinda terrible.,1
"My terrible coding patterns are no excuse ;-)   But i do take this back.  I missed that right above we checked all the intermediary states, so thsi is fine.  #resolved",1
"I really wanted it to be GetForCurrentApp().Reset(), but that would require the instance-level method ""reset"" to know about the global storage, and that seemed like a terrible inversion of responsibilities.",0
"Approving, but I'm stupid and should make the ignoring of parameter base tests on xUnit better.",1
I'm not sure if this is actually better than `LanguageServiceAdaptorConstructor` (which is kind of terrible on its own).,0
I'll revert the changes to this file. It's too insane to reason about and my attempts to do so obviously failed.,1
"We don't want to add view by view and skipping the layout until the end. This will still cause all the math to happen in the background. Plus it will expose a terrible `skipLayout` API. As per comment above, we want a serializable Splitview which can deserialize in a single layout call.",1
"Crap, somehow my browser didn't refresh everything. Though the code is now much simpler anyway and we're back at the approved api layout.",0
"@github We actually have two sanitization passes currently, one from marked and one from insane.",0
"Well, that's the point because with this PR we don't have that anymore and the questions is how we get to that again or why our current 2nd pass sanitizer looks/allows for `iframe`. Where does that come from?",0
"exactly, turkish has a lot of really nasty localization issues all packed into one terrible locale.",1
In theory we do. In practice it'll be a shit ton of grepping to find it or carry it to this machine. I tried for hours to run it before giving up and doing this.,1
The complete absence of cancellation/timeout support in these code paths is terrible. Some streams allow sync operations to be cancelled by Disposing the stream.,1
"Maybe just in case, the output should be passed through our html sanitizer (`insane`) too",0
"Holy crap, I just got autocorrected! I meant to type “idle” thoughts. 😬",0
this assert just wasn't sensical in teh case of symbols that span into metadata (like namespaces).  so i'm just removing it entirely.  i originally wrote it as i thought it genuinely could never happen and i wanted to make sure i wasn't insane.  turns out i am insnae and this is normal.,0
Not a terrible idea.,0
"Jared and I have discussed this separately before. There are probably multiple viable ways to go but I think that exposing a compiler-known way to suppress constraint checks on specific APIs would do it. Then, I'm hoping that conversion errors at the use site will prevent the APIs from being used when the type arguments don't permit it.",0
"This might leave a hole where the attribute could be used on methods which only violate type parameter constraints within the implementation, not in the signature. The user wouldn't be stopped from doing it at compile time but could get a runtime error. That might just be a case of ""play stupid games, win stupid prizes"".",0
"Tagging @github who had interest in a 'SuppressConstraintChecksAttribute' for a scenario with static interface members, IIRC.",0
Using SendAsync's cancellation token:,0
Anyone reading/writing to the stream wrappers should fail. Terrible idea or no? I can add a cancellation unit test.,0
"Would it be terrible to add a new project called TestUtilities and rename this one to TestUtilities.Common? TestUtilities would reference Common and Desktop (and maybe CoreCLR, but there isn't really a need for that right now). The actual assembly would be empty, I guess.",0
@github I'm getting a COM exception when invoking this to get the proxy.  Wanted to check that I wasn't doing something obviously insane with regards to the service broker before checking the service impl,0
"From the stack it looks possible it's having trouble loading the package providing the service, in which case I'll follow up with the owners of this particular service",0
"Hmm, stupid me, no idea why I didn't do it like that in the first place, perhaps some copy & paste from elsewhere in the file. Thanks for pointing that out!",0
move focus:,0
* or switch panes but make that other pane be zoomed in?,0
holy crap I love that so much,0
"Changed `ShoudlCauseTimeoutEase` to `FromRemoteLocation`, as a compromise.. and because my original name was truly terrible",0
"pls consider undo the change unrelated to the fix, or at least have them in a separate commit to keep history clean (although I have to admit we have been doing a terrible job on this ourselves :P)",0
the old Begin/EndAccept methods support doing an accept and receive in a single operation. Unfortunately the API for this is terrible and forces allocation,1
"In theory there's a perf benefit possible from the existing accept+receive on Windows, but as we only expose it from an old APM-based API we discourage using, it incurs non-trivial allocation overheads, and it's complicated, non-portable logic, I'm fine seeing it go away.",0
"Just curious, but why do we change DocComments to RegularComments?",0
"Primarily because doc comments are terrible to read in code.  They're desigend to be structured, and then rendered nicely by some presenter (i.e. quick-info, or html docs), but they themselves are really unpleasant to look at as the first class source of info.",0
We convert to just a really simple textual view that puts the content forward and basically hides all the structure tags.,0
you don't follow because it's hard to follow stupid things...,1
"I don't need the object, I just need a placeholder variable since the type assertion later",0
takes care of the rest.  Too many languages doesn't mix with late-night programming.,0
was noticing you're using the Activator here... for consistency I believe this should be using the DependencyResolver/DependencyService in Xamarin.Forms... also if someone for some insane reason decided to provide their own IEmbeddedFontLoader this would give them the ability to use DI...,0
This may be a terrible idea...,1
"(yes, i have made myself sad)",0
- [x] - `TSFInputControl` needs to account for scaling (migrie: ✔️),0
<details>,0
<summary>done</summary>,0
"- [x] - Dragging between monitors doesn't fully refresh, receives multiple events (migrie: still receives multiple events but ✔️)",0
"- [x] - 1px cursor types will be very thin as they're not being scaled (_migrie_: wait is this bad? this looks crisp and beautiful IMO, but sure let's scale it)... Not scaling per Mike and Dustin opinion.",0
- [x] - Scaling font with Ctrl+mouse wheel doesn't work right (migrie: ✔️),0
"- [x] - Vim is blanked. This is on master too.  (migrie: Not seeing this anymore, so ✔️? This might be the same issue that's fixed by 4a32b33, see below.)",0
"- [x] - Settings reload doesn't work right for font scaling (migrie: ✔️, with a bug in vim below) (validated as working @github ✅ )",0
- [x] - `PointerMoved` is having scaling issues (migrie: ✔️ I think; @github ✅ i can't get anything weird to happen ),0
- [x] - WPF control needs auditing,0
- [x] - Gutter isn't cleared scaling font with wheel to size that makes fewer lines fit (migrie: ✔️),0
"- [x] - Also related: Ctrl+mousewheel to increase the font size, then make a selection. Entire display disappears? When selecting a row, it gets repainted correctly. (migrie: ✔️)",0
- [x] - Can we completely hide all pixel stuff into the renderer for the fake font scaling - Not likely in this PR.,0
</details>,0
**migrie todo**,0
"- [ ] - Check that the #979 hack still works correctly, at the right location",0
- [x] - Check `snapToGridOnResize: true` (@github ✅ it works even better than before),0
"- [x] - Check initial sizing for padding, showTabsInTitlebar at 1.0 scaling (@github ✅)",0
"- [x] - Check initial sizing for padding, showTabsInTitlebar at high-dpi scaling",0
"- [x] - Open vim.exe in one tab, wsl vim in another. Switch to tab 0. Drag from 125% to 100% display. Switch to tab 1. Vim there seems to reflow real badly. Might be b/c 24eb455",0
- Needed to use the engine's scaling in the first `SizeChanged`,0
- [x] - The buffer size changes when we drag across a DPI boundary 😮😮😮,0
"- I'm _okay_ with this, for now, but it's definitely a regression from 0.10.",0
"- I'm pretty sure the solution to this is in `WM_DPISCALED` to ask the app how big it wants to be at the new DPI, which then asks the `TerminalPage`, which then asks the tree of panes. Then each leaf `TermControl` could scsale itself correctly by getting the new font dimensions for the new DPI. This also seems _insane_. If we didn't have a TermControl as the leaf in a `Pane`, how would it respond? It wouldn't know about DPI!",0
- miniksa on 4/20: We're going to leave this for now. It's too crazy to come up with a solution to this right now and it's not that bad of a transition with reflowing.,0
"- [x] Check if the ""suppress the first resize"" logic works",0
"- [x] It doesn't actually work most of the time. It was based off the false premise that we got three messages, which I have no idea why I was seeing consistently on Thursday and not Friday, but whatever. I'll yank all that code.",0
"- [x] Update the comments to make sure they mention that we don't always get 3 messages. Usually we only get two, and _rarely_ we get the useless first one.",0
"- [x] open WSL vim. Increase font size a bunch. Reload the settings (down to a smaller font size). Buffer seems to get corrupted, and not repainted correctly. (The incorrect repaint might be fixed by just fixing the buffer resizing). The artifact is highly similar to the one that was fixed by 436a05c.",0
. image](ht.,0
- seemingly fixed by 4a32b33,0
"- [x] Open WSL vim. Add a line of text to a file, in the middle of the viewport. Write the file. Whole screen is cleared, except cursor line and the status line.",0
"- fixed in 4a32b33. That commit message is wrong, but this definitely is the fix for it.",0
"- [x] Dragging `vim.exe` across the DPI boundary to a 100% scale display corrupts the first line of the buffer -> This is actually in master totally separately, moved to #5428",0
"@github @github how likely do we think it is that people will implement the IPC protocol without using our DiagnosticClient library? We already know that the OpenTelemetry guys implemented their own, I suspect other profiler vendors might be inclined to write their own library given how we keep adding profiler stuff to it. It may be worth thinking about users of the lower level pipe too.",0
"That being said, it works how it is and I don't think it's a terrible user experience. I would just like it better if I could open one connection. I don't think it's bad enough to try and make us change it when we've already shipped it.",0
This is kinda gross. This isn't a hot path either right?,1
cc @github Some potential API feedback here.,0
When can WebUtilities.ReasonPhrases.GetReasonPhrase(statusCode) ever be equal to anything other than candidate or string.Empty?,0
It can't. I added a test to ensure that any status code defined in `WebUtilities.ReasonPhrases` is also defined in here as a possible candidate.,0
"`WebUtilities.ReasonPhrases.GetReasonPhrase(statusCode)` could be replaced by comparing against the bytes in `candidate`, but the comparrison would be uglier (unless Kestrel has some Ascii byte-char comparrison helper somewhere?)",0
The fast-path here is `candidate is not null` and `reasonPhrase is null`. We only perform the `Dictionary` lookup if a custom reason phrase is specified.,0
"If this condition fails, it means there is either no candidate OR the custom status code is not the default one, so we create a new one.",0
"I don't see how this could regress the perf for the common case, unless cq is somehow terrible for the different switch statement. I'll look at adding a benchmark for it.",0
"We should definitely add a comment calling out this _insane_ margin, explaining that the icon will always have space reserved and what's going on here.",0
"Based on [these musings](https://github.com/xamarin/xamarin-android/pull/3525#issuecomment-523270275), I don't think that this method should look for `[Register]` on an interface to determine if the interface type should be preserved.  The 3rd constructor argument is meaningless, and ~anybody can apply `[Register]` on their type.  (Why they would *do* so, ¯\_(ツ)_/¯)",0
"Instead, I think a *better* indicator would be if `resolvedInterfaceType` implements the `IJavaPeerable` or `IJavaObject` interfaces.  Yes, this can also be done by anyone, but it's also *semantically meaningful*: if the interface implements `IJavaPeerable`/`IJavaObject`, then it can be passed into Java code and gains lots of special abilities (via `Java.Lang.Object` and JCW generation and...):",0
"Ah, thanks for catching it (stupid leftover from refactoring).",0
"allow lists as opposed to a general ""allow things that can't run js"" policy.",0
Fully agree but I couldn't figure out to configure insane that way,0
"Oh, shit. I don't hate that. @github what do you think?",1
"I think we'd need to make sure we keep the features alive for the DPI change message, but...",0
The main risk is that we do eventually use a Renderer function that wants normal UpdateFont().,0
"Thanks, actually refactored this a bit.  I'm a bash noob so I'm learning quite a bit.  Still testing, but could use another review shortly.",0
Tagging subscribers to this area: @github,0
See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.,0
<details>,0
This is an experiment to support Brotli compression in method contexts for SPMI collections.,0
I picked Brotli because we already have the source in the tree so I believe there are no license considerations.,0
"The main benefit is to reduce the size of collections stored on the disk. I had a hypothesis that for HDDs,",0
this would also help replay speed because the decompression is faster than reading the full thing. My experiments,0
"seem to indicate that this is true for parallel runs, but I don't think it's for the reason that I expected.",0
"Currently the way Brotli is added is pretty unfortunate as I put it in superpmi-shared and then build it in all the superpmi projects that needs `MethodContext`. It would probably be better to build it once and statically link it, but I don't have the necessary cmake knowledge to do that for this experiment. In total, we are building it separately 5 times (6 times if you include System.IO.Compression).",0
I measured some of the characteristics of compression vs no compression. For all the experiments I cleared my file cache between each run using [RAMMap](https://docs.microsoft.com/en-us/sysinternals/downloads/rammap) (Empty -> Empty Standby List).,0
The collect command was:,0
"Note that the time for collect includes the time for the collection itself, merging/cleaning, building the TOC and doing a test SPMI replay. Also the merging/cleaning steps are quite inefficient because they repeatedly decompress and recompress each method context even when it could just be copied directly from the input to the output. I have not bothered optimizing this but it would probably reduce the time taken for collections significantly.",0
For the replay commands I invoked superpmi.exe directly with a checked JIT. For parallel runs I passed -p. I think the parallel HDD runs are so much faster because the smaller file means the OS keeps it in memory longer. It seems the striding we use with parallel runs is terrible for HDD performance.,0
"The PR allows method contexts to individually select compression/no compression so even if we don't want it for the smaller collections, we could potentially use it in case we want to have much larger collections in the future.",0
Are there any comments on whether we want this and what we want for the default (compression or no compression)? And any tips for how to handle the Brotli source files in CMake?,0
"That link documents the rough structure. But symstore.exe is really the only thing that knows about how any of that actually is. If you were going to try putting it directly in that format, I'd just look at what it takes to shell out to it.",0
"Some background: the insane glob we have is essentially an input to VSTS's task that calls symstore.exe and creates the Symbols folder with the actual layout (identifiable by the magic 000admin folder inside of it.) Your change at least means we could get rid of the insane glob and point it to this folder. I'm OK with that, it just means we have more copies of more stuff. (and we need some more temporary folder name here to not conflict).",0
Mostly a question of your pain tolerance.,0
wtf,1
Ah crap! the rebase broke stuff :( I'll fix it,0
"Holy shit, I left a community member out to dry for three months. I'm so sorry.",1
largely complicated by the fact that a,0
pane is not a proper control,0
"(We do want to do this at some point -- there was a refactor in progress to make pane clearer/less clear/make it a control -- we just haven't landed it. If you are interested in _horriffic, terrible upheaval_ and working on such a change . . . I wouldn't call it out-of-scope!)",0
stupid manuel,1
"I think that the point is to test out stuff might people write in JSDoc, because people often write terrible stuff in JSDoc because it was terribly specified.",0
My 1 cent is that all pipelines running the code Bruce is removing should already be on the floor after Manish's change to shut down Crossgen1.,0
That was my guess.,0
"Looks like there are some existing CG2 asserts/failures in the test jobs, though... plus arm64/arm32 legs (or machines in Helix) are in terrible shape, causing lots of failures.",0
"~~Stupid question, can we make HubConnection internal?~~ nvrm, didn't read comments closely enough above.",0
"Good point. THis needs to be fixed. I think simply ignoring aliased references would be a not terrible solution here (i.e. types from those will not be returned). As you mentioned, it's likely that user only want specific types from the aliased reference and know how to get them w/o help from completion list.",0
"A stupid mistake, probably had Python or some other language of the brain.",0
Will change to,0
"stupid question here, should we validate `ssh-remote+` instead? Not sure if someone will use authority like `ssh-remote-something+blabla`.",0
I'm so stupid to let `utf8` be `uft8`.....,1
There is no excuse for this stupid mistake.......,1
"In this past I've used [dompurify](https://github.com/cure53/DOMPurify) which seems better maintained, more widely used, and has a bug bounty program. It seems like there may be [a vulnerability with insane](https://github.com/bevacqua/insane/issues/19).",0
"Also, yeah, the `.Min` is gross, but I determined that any code path I had to follow given the types I had at my disposal would be less performant. Fortunately, this code path is only called when the screen readers are on, which I believe kill perf more than an enumerator will.",0
Is this `IsEmbeddedDSOsEnabled` name terrible? Suggestions welcome.,0
"Ok wait. So, setting `DeleteProfile` multiple times would _append_  an event handler? That seems really unintuitive... wtf. Good find!",0
tried to use the Command Script batch language in ways that pushed the limits for what I thought it could do,0
"holy shit yeah it does. I've never seen a batch script anything like this before, but it's kinda incredible like that. You should probably throw your username at the top of this script in a cooment as the author, because you deserve the credit for whatever witchcraft this is.",0
"I'm cool accepting this as a tool to our repo, because it would be handy for debugging purposes, likely moreso than `colortool` itself. Lemme double-check that the rest of the team shares that consensus ☺️",0
This comment seems out of place to me. It feels like either:,0
"1. The behavior makes sense for this method, and doesn't need further justification, or,",0
2. Really this is a terrible hack and maybe it shouldn't be here.,1
"This feels like fixing a bug in int.Parse and then commenting that ""it's needed for JSON parsing"". This is a core bit of code -- it shouldn't be thinking about very specific clients or something seems off.",0
Also insane?,1
i am adding this to the list of things to try out in my followup PR :)  but yes.  seems insane.,0
"There's no async monitoring APIs for taggers in general in Editor, other than the event that is raised. For Apex, the go to is usually a retry loop or timeout, but this is usually quite flaky.",0
"Note: this is a really terrible reason IMO. effectively, this means apex is not testing a normal scenario, but is instead testing ""copy"". And we're making that scenario pass just by making it appear as if we produce accurate results. The real scenario of ""classifications are correct for the user"" is not be tested by apex or actually validated.",0
"Fair, some alternatives:",0
"- Update Apex to call GetAllTags(), wait for it to return (signaling that the parse has completed) and then call the regular GetTags() call. This would still require the extender to implement IAccurateTagger<T>.",0
#NAME?,0
"oh, that's interesting. meh. stupid static analyzer can't be taught that COM things don't throw exceptions. Fine, this is fine.",1
I'm stupid,1
"stupid question, but why can't this just be `type EscapedNameMap<T> = Map<T, EscapedName>` ?",1
return a match expression. Oh wait. Crap.,0
the diff is terrible.  but new cases were added which github is showing bad diffs with the old tests.,1
Good catch. Stupid autocomplete 🤦🏼‍♂️,0
"Thinking about it some more, would it really be a breaking change? I know almost everything can be considered breaking in a mature framework, but this maybe isn't so terrible to just add precision.",0
I too spent way too much time tracing this down when i was reading time stamps in from a file. I kept scrutinizing my parser for bugs because the behavior of this method is counter-intuitive (at least to me).,0
"An alternative API would be fine for me too, perhaps `AddTotalMilliseconds` or something.",0
Do we know the cases where this happens? Did **user code** initiate a background operation? Or do we have a bug that leads to `AddToRenderQueue` being called from outside the sync context?,0
If this is happening because **we are** running operations outside of the sync context then these are bugs that need to be fixed 😆,0
If user code did this (let's say you set up a timer) then this could be OK if the **only** thing user code is doing is triggering a render.,0
"Let's suppose you've got a TODO list, and you're checking a webservice at intervals to update the list. Inside that TODO list you have a dictionary that tracks the TODO items.  If you have a sequence of operations like the following:",0
1. Update items,0
2. Trigger a render,0
You think you're OK because the render happened last right? Well what if a render was happening while you did step 1? This would crash with an unpredicatable error because dictionary is not thread safe. So you need a lock around all property access and rendering.,0
"It's never safe to access state that's needed during rendering from a BG thread, and it would be gross to use a lock to protect it. The most reasonable thing is to dispatch to the FG thread and let the sync context act-as a zero-overhead lock.",0
"What's worse is that this *might* succeed. It might work pretty well most of the time, but when it fails the error is total nonsense, or it leads to data loss. In the UI frameworks that protect against this explicitly, you at least get a really clear failure message.",0
"To be clear the bug is in step 1. You can't update the state of a component from a background thread, which might mean that an explicit dispatching mechanism *is* needed in these scenarios. It's OK to do step 2 (notify the renderer to do work), but that's the only thing that's safe.",0
"I think I need to know a little more about this, I'm hesitating because I'm still not totally sure why this is needed.",0
Seems insane.,1
"overloading these methods by type and having to do the cast is kind of gross and magical, if the statics are essential to the marshaler working let's give them distinct names i.e. MarshalToJs_JSObject or MarshalToJs_Exception",0
"Note: this is a really terrible reason IMO. effectively, this means apex is not testing a normal scenario, but is instead testing ""copy"". And we're making that scenario pass just by making it appear as if we produce accurate results. The real scenario of ""classifications are correct for the user"" is not be tested by apex or actually validated.",0
"Yeah I'm not sure - @github should the Apex APIs be using IAccurateTagger, or something else?  I guess since tags can come in at any point apex has no deterministic API to use other than IAccurateTagger, so it would have to be some arbitrary wait",0
"Forgive me my stupid question, but how does the `else if` instead of just `if` here helps? If the previous block ends with `return`.",0
we only use small_vector.hpp and its dependencies,0
holy shit it's 449 files for one header?! Man boost is giving npm a run for it's money,1
This is absolutely terrible solution and we need to come up with better one. I'm taking this into account for Listener API.,1
you're a terrible person,1
"woah well that's... insane, but I get it. Such is life using C macros :P",1
"OK this is kinda stupid but it works pretty well. The “gray"" series and ""grey"" series of color are identical. This saves us a lot of space.",1
@[javiercn](https://github.com/javiercn) would you mind filing an issue first explaining the motivation for the change as well as the impact so that the team can assess whether or not we want to take this change in?,0
Please forgive me for not having time to reply a few days ago.,0
"This is not necessary, but just a suggestion for the following reasons.",0
"1. From Android API 24 to 23, it is not difficult for Android. They are all official.",0
"2. API 21 app will run on approximately 98.6% of devices, and API 24 app only has 91.7%. The is from Android studio.",0
3. Using androidx.webkit increases the size of Android installation package a little and the performance loss is almost negligible.,0
4. It makes the Android device compatibility of Maui Blazor consistent with Maui.,0
"5. My test method is temporarily modified the namespace of Microsoft.AspNetCore.Components.WebView.Maui.csproj and only compile it with min Android API 21, so that it can be directly added to the Maui blazor app project, and then tested on the real machine of Android 5(API 21). The startup speed is acceptable, which is 40% faster than blazor WebAssembly. This is stupid, but simple and effective.",0
"Let us forever burn this mistake into our memories. Today will be remembered as """"In No State chANging Equals"" day, or ""INSANE"" for short.",0
"""null"" means ""task of null""? (no insane @github stuff here? :smile:)",0
"It's more of a meta gripe than anything. Now that we can annotate reference types with nullability, having a null string here is more akin to an implementation detail of _not_ having an output path.",0
"The terrible naming aside, the above has a more meaningful call pattern. We either want a path, or we want to make it so the project doesn't have one. Null may be how we rationalize that, but it's just a well known magic value. It doesn't tell you, for example, if that ends up succeeding and having some default value when you pass in null.",0
"Not worth blocking, for sure, just more of a thought about the meaning of null to represent absence or clearing of a value from an API perspective.",0
"Argh, I was wondering why the stack overflow would happen there.",0
I guess that makes [my rather stupid fix obsolete](https://github.com/microsoft/vscode/pull/134188) 😅 - Thank you!,1
~I wonder why `b` is so large though. The amount of bracket pairs should be limited by the viewport/minimap size. I should investigate why the minimap is requesting these decorations anyway.~,0
"I think it is not good to request *all* decorations at any point, I'll have to look into that.",0
Agree with reverting the overloads.,0
"That gross `object` cast is gross, but it could not be prevented, in order to keep common signature.",1
"Luckily, this would not be an issue for the roslyn generated code and this dynamic resolution would not be there at all.",0
One thing you can consider is hacking SPMI to produce a table of functions with the # instructions executed for each context. That might help narrow into if it's expected.,0
"We already have the # instructions executed on a per-method basis, so it should not be too hard. For example, stupid and simple thing would be to just print `baseMetrics.NumExecutedInstructions` here:",0
and `diffMetrics.NumExecutedInstructions` here:,0
and then post process this into something.,0
"OK, I went and checked again because I recalled that this is expected for Linux:",0
"There is no posix primitive for us to use here, I think? Same reason abandoned mutex detection isn't possible without coreclr's extremely complex workaround. I'm not aware of any way to stop someone from rm'ing a file I have open. The only thing I could come up with is grepping lsof to find anyone else with the lock open, but the performance implications of that are profound and it's gross (even though the documentation suggests that lsof is meant to be used this way)",0
".Lock(0, 0) and .Unlock work everywhere, which is why I'm using them, but sadly I can't use those to block deletion - you can still delete a file that has a lock held on it, and then create a new file with the same name in its place.",0
God.. what a stupid mistake! thx!,1
"all these names are terrible.  can you use nameof(QualifyMemberAccess), and fix the rest?",1
This will also fix LSP ddrits flakiness by allowing it to force tag computation (apex APIs rely on IAccurateTagger).,0
"Note: this is a really terrible reason IMO.  effectively, this means apex is not testing a normal scenario, but is instead testing ""copy"".  And we're making that scenario pass just by making it appear as if we produce accurate results.  The real scenario of ""classifications are correct for the user"" is not be tested by apex or actually validated.",0
"I wonder if they've tried just constructing the catalog and graph once, and sharing the resulting ExportProviderFactory for all tests, but each individual test gets its own ExportProvider? That sounds like it would be the best combination of perf and test isolation.",0
"Roslyn has switched back and forth between sharing the actual ExportProvider and just sharing the catalog around 5 times now. It alternated between ""oh goodness, the perf!"" and ""oh goodness, we're sharing test state!"" that it made me wonder if everybody was suffering from memory loss. :smile: I want to say last time the switch was done was prior to us moving to VS MEF (and might predate VS MEF itself....?), and at the time creating a new composition while reusing the catalog was cheap, but once you have 50,000 tests doing that and it's more expensive than the five lines of actual code being tested, you start to get second thoughts. :smile:",0
@github I'm OK with this going in. I suspect it's still going to bite us eventually but I think that trap has already been set...,0
"Awhile back I tried giving a shot at decoupling all the MEF shared state to also be strict about tests that are free-threaded (and can run in parallel) and tests that need a concept of a UI thread and it was a terrible rat hole. We had some tests that'd casually spin up a WPF text view on a random xunit test thread and weren't careful about that, or other sorts of fun. One Day™ I want to get it cleaned up, but you aren't making it any worse.",0
"As a counterpoint? I saw `start` and wondered ""wtf is he using start for over and over""",1
"i mean, _this seems insane_.",1
yeah.  that's just terrible english :D,1
"Noob question - What does the `MarshalDirective` do here? Does `NativePrefix = ""xamarin_simd__""` mean that this binding has something to do AOT compilation?",0
"I wholeheartedly agree, and am happy to classify this PR as ""not accepted"". The issue can probably remain as a discussion (and I've relabeled it as such); maybe someone can design something with a set of rules that's not terrible to use, however doubtful that seems given current class field behavior.",0
"Sorry, I'm a total n00b and I am not good with computers. What does this property do?",0
wait... we have tests that call directly into this?  ugh...,0
"Ok, that's terrible.  but you don't have to change.  Just put a comment for now saying `// internal for testing purposes`.  I'll see if i can find time ever to make it so that the tests don't call internal details, but just access the external API of the command-handling system.",0
Here's the list of attributes that GitHub supports:,0
"I think at a minimum, `align` should be allowed on many commonly used html elements, such as `div` and `h2`. Check to see if insane lets you configure an allowed attribute for all tags. If not, then let's list off the common tags (preferably have a list of tags and use that to construct the object map instead of repeating tags in the object literal)",0
"A stupid question: if a tab is not focused, can it be duplicated?",1
Gross - can you move this call into a local variable instead of in the `if` statement?,1
"@github Once I have one approval, what's next? I see some build errors , but build was not so stable at this time. Should I somehow retrigger? Also who is merging this PR, me or somebody from the team?",0
"Sorry for so stupid questions, but this is my first contribution.",0
Tagging subscribers to this area: @github,0
"This PR unrolls `Equals`/`StartsWith` for ""half"" constant strings and spans in [0..32] chars length.",0
"It does pretty much the same job as https://github.com/dotnet/runtime/pull/64821 but in JIT this time to avoid problems listed there (e.g. low inliner's budget and throughput penalty). I decided to create a new PR to keep that as a reference (""what can be done in pure C#"").",0
This PR handles the following APIs:,0
"It unrolls & vectorizes them when either s1 or s2 are constants for [0..32] utf16 chars range using SWAR, SSE, AVX or AdvSimd (arm64).",0
The existing code can be re-used to handle:,0
- `OrdinalIgnoreCase` for any case this PR already handles for just Ordinal,0
"- UTF8 string literals or RVA data (e.g. either, hopefully, upcoming Utf8String literals or [ufcpp/StringLiteralGenerator](https://github.com/ufcpp/StringLiteralGenerator)).",0
"- [unlikely] CurrentCulture case if we add ""IsAscii or fallback"" check",0
"I've seen quite a few `SequenceEqual` against constant data in high-perf scenarios e.g. ""is input one of the well-known headers?"" or e.g. TechEmpower: https://github.com/TechEmpower/FrameworkBenchmarks/blob/master/frameworks/CSharp/aspnetcore/PlatformBenchmarks/BenchmarkApplication.cs#L98 - mostly on UTF8 inputs (I plan to support those eventually), but UTF16 are also not rare.",0
"Also, https://github.com/dotnet/runtime/pull/65222 relies on this PR.",0
There are minor block layout issues but they're unrelated. The algorithm has a pretty simple heuristic (budget) to avoid doing too many unrolls in a single method.,0
NOTE: `OrdinalIgnoreCase` performance is terrible and if we implement it here we'll get something like this:,1
PS: Spans aren't enabled in the current commit - there is a small issue with them I am trying to resolve.,0
TODO: Add more tests,0
"These null values are needed for my stupid simple injection. If there is no default, it will try and inject the `PropertyMapper`. We probably need to fix this, but somehow didn't cause issues with the MS DI. Might be because it used the other ctor?",0
"holy crap.  can we just make a SignatureChangeParameters object?  it can have read/write properties on it, allowing the caller to just easily instantiate and set the values they care about.",0
This and the following calls should perform some error checking.,0
"`randObj` could be NULL if e.g. the type throws or ""something terrible"" happens.",0
What should you do if it is null?  Assert & crash is likely fine.,0
Nothing -- that was a terrible name that I chose at random to give .NET CLI something to use. I'd prefer we forget that package exists.,1
I just realized swallowing the error is a terrible idea just as I started working on https://github.com/dotnet/aspnetcore/issues/27126.,1
Unsetting the property on disposing the delegation rule should be the desired behavior. That allow you to add and remove delegation rules (as new delegatee processes come and go) without restarting the delegator process.,0
I'm now convinced the right behavior is to not swallow the exception,0
You're undoing all the terrible work I did to undo other terrible things.,1
This is insane! Keep it up!!,1
"I was getting the PNSE on .NET Framework x86 CI legs for Utf8String.Experimental, since this file gets compiled into the Utf8String OOB package.",0
I refactored to use the 2nd approach above. It didn't turn out terrible.,0
This is jank and it should work for any number of arguments even though 32 is insane. 64?,0
"Changing the field to `long` would allow 64, I'd prefer not going bigger because then we'll need to allocate/lazy-alloc and have another field.",0
I have to agree with @github. Something like -xf-visualelement-scale is completely undiscoverable and would limit the APIs use to industry experts. This needs to be stupid simple to figure out. Property names that make sense like -xf-scale achieve that.,0
wtf yikes 😨,1
holy shit this works?,1
@github Yes you'll need to be careful when removing the first sanitization pass because it may have sanitized things the second didn't. This should be unlikely.,0
"In the case of `iframe`, I think we do strip out iframes. `insane` lets you specify both the allowed tags and the allowed attributes. We do not include `iframe` in the allowed tags",0
"For this issue though, we could try using [`filter`](https://github.com/bevacqua/insane#filter) on the `style` element. I suspect though that this is both going to be tricky to get right (unless you enforce a super restricted format like that regular expression does) and it opens up feature requests to add more  style properties in the future.",0
@github It is always better to have multiple layers of protection and limit the potential attack surface where possible.,0
@github Please open a separate issue for that,0
"Nnnnn.... normally I agree with you but I did this semi-intentionally because it's not visible outside the class, hopefully... the return type from this is horrendously gross and is like a.... `boost::container::vec_iterator<std::pair<_Ty1, _Ty2>*, false>`.",0
I have this idea that `boost::container::small_vector` probably isn't the ideal inner-type here either and we'll want to drop in a `std::pmr::vector` as soon as @github works out the kinks in #8787 on how to set up the templates to accept allocators as these are a great place to use a memory pool from my perf traces.,0
"If this is `auto`, then it'll automatically change correctly to `std::vec_iterator<std::pair<_Ty1, _Ty2>, _Ally>` or whatnot when that one member is flipped out and should propagate through the rest of the template just fine.",0
there's a lot of changed to the vcxproj files that got committed. Should we pull those out?,0
"shit absolutely, I didn't realize I was on 16.6 when I committed/pushed this branch 😬",1
"shit, this looks really good",0
I think we need to get our shader story in a better place before we take on too many more of these :smile:,0
"Not sure I have a better idea, but ""grant"" seems odd here. To me the runtime grants the capabilities, and the analyzer requires them.. but `EditAndContinueCapabilitiesRequirer` is a terrible name :)",1
I do however like the idea of `capabilities.Requires(...)` for the checks. Requests maybe? Not sure. Could also just leave it ¯\\\_(ツ)_/¯,0
Is there anything stopping this PR from being merged?,0
Ancient prophecies and curses from the abyss.,0
"The crystal balls of the TypeScript magicians foretell the coming catastrophe, and no one is spared.",0
~~What the fuck Am I talking about~~,1
Introducing a bundling step (which isn't there today),0
"There _is_ a bundling step today - the TS compiler itself just performs it (stupid concatenation of namespaces, plus a manually added `module.exports = ts` appended to the bottom). I already have a second branch based off that one that reimplements our builds in terms of modules and indeed, it does have a proper bundler to produce the same outputs.",0
"Part of the reason we want to do this is because we have _massive_ piles of dead code that could be eliminated in many uses. For example, the commandline compiler doesn't need any of the language server bits.",0
"The whole thing is terrible behavior, but I'm not totally sure about special-casing a no-statements file. What about a `""use strict""` file, or a file with a single function? Going from an empty file to a file with a single statement seems bad and then receiving an error doesn't seem ideal.",1
"Not setting the handler here doesn't work either. So we either leave it like this (not terrible, move it to use HttpClientFactory, which does the right thing, or add a method that can set the client and returns the handler itself (so that it is an expression and we can make this a lambda))",0
"~I'm having a hard time getting this to work. It seems that the `SPACE` character doesn't commit the completion item in the test harness, despite it working perfectly in VS.~",0
~The assert fails because the completion session is still present. Everything works correctly for other commit characters such as `>`. Any suggestions on what I might need to get this working?~,0
Never mind. It was a stupid mistake on my part.,1
Noob question - does it work as expected with things like `preventDefault` / `stopPropogation`?,0
"Possibly a stupid question, but why rewrite this? #Resolved",0
stupid off by one errors ...,1
"This looks insane on GitHub, but whatever. :)",1
Sorry for my stupid fault!,1
"They are useful **sometimes** :) But not in situations when you're supposed to specify a length of something, a size of something etc - that's where they are *insane* :)",0
"This feels a little gross to me, happy to change this if someone has a better idea.",1
"ChaChaPoly1305 does have an authentication tag, but that algorithm forbids a tag length other than 16 bytes. Because of that, ChaChaPoly1305 on Android can use the `IvParameterSpec`.",0
Just to confirm (because the GH diff here is terrible): No changes were made to this function right?,0
@github if you're wondering what terrible person would implement an extension method that handles `null` values for `this` ... that was me.  I'm still a bit ashamed.,1
What is “the original proposal”?,0
"if the union type contains only array or tuple types, and contains at least one array type.",0
"This sounds weirdly specific, but not terrible.",0
"I went through the test failure for `ValidateAggregationWithReferenceTrackerObject`. The issue is that the clean up of the interop sync block was still only under `FEATURE_COMINTEROP`, resulting in the object not being release. I pushed up a [branch](https://github.com/elinor-fung/runtime/tree/pr54838-test) (based on your PR) with some changes that I tried locally: https://github.com/elinor-fung/runtime/commit/77f4608594edb06d5034aa390b3dbeb750bfc4ce",0
"While doing that, I also realised that the `WeakReferenceTest` is still disabled. I tried enabling it. The part of the test that validates using a local (not globally registered) ComWrappers instance passes (after a fix in the test project). The parts trying to use a globally registered instance to re-hydrate after the managed object is collected fail. https://github.com/elinor-fung/runtime/commit/01c4a622947be818c4da9da0a02caa3cfcf8cf33 enables the test, but for non-Windows, only does validation using a local ComWrappers instance.",0
Turns out we still have a bunch of functionality around setting/getting COM weak reference info that is just under `FEATURE_COMINTEROP`. I tried for a bit to enable it - it definitely has more layers than the sync block cleanup - will unpeel for a bit longer.,0
"@github / @github - thoughts on treating the `WeakReference`  as support to be added after this PR (like the global instance for marshalling / Marshal APIs)? You've both dealt with the `WeakReference` side of this more than me - if we did that, would we be leaving a terrible inconsistency / gap that will bite us?",0
"I figured. This is gross, but catching only the `NotSupportedException` is probably even worse.",0
yea that's some magic shit that @github wrote IIRC,1
I've been refraining from asking because it feels like a stupid question... but:,1
Why do `(*env)` so many times?  Seems like,0
would save a lot of redundant memory dereferences.,0
"diff is terrible, but this code is almsot the same. Generally the logic is similar to: if we have an initializer like var = new X() leave it alone (we know the type of it). If we have X x = new() change that to new X(). Otherwise, insert an explicit cast from the expression to the final local type. This ensures the expr keeps the same meaning and affects code the same way in all the places it is inlined to.",0
Not of terrible importance to switch to a struct perse but you are not correctly understanding how the array is stored. Please read: https://stackoverflow.com/questions/1113819/arrays-heap-and-stack-and-value-types and pay attention at some nice graphics at the bottom of the post.,0
"I'm apparently an idiot.  I think i moved them to the abstract class, and *removed* the fact attribute, and then (obviously) couldn't have them run from the derived type.   Ugh.  sorry about that.",0
"Correct, we rely on OS to do DNS caching, which creates terrible perf for platforms that don't do DNS caching.",0
"Yup it's a stupid copy-paste error, I made changes to one place but forgot it here.",1
"wait hold up what now? `Profile` is a parent class of `AppearanceConfig`? That seems... backwards. So every `AppearanceConfig` instance has basically an entirely empty `Profile` as well? Including, technically, a null `AppearanceConfig`? That seems like a gross layering violation. Like a Profile should have an appearance, and possibly an unfocused appearance. I suppose the unfocused appearance should be a child of the profile's own appearance object, but the AppearanceConfig itself shouldn't need to know anything about the internals of a Profile.",0
Oh maybe the regex is a little too forgiving...,0
Okay I officially don't know wtf the regex is doing:,1
Tagging subscribers to this area: @github,0
NativeAOT currently goes through a helper call whenever we need to access static fields. For this simple program:,0
We generate:,0
"It's not terrible, but also could be better. As far as I can see, JitInterface cannot express the exact way static fields are accessed in NativeAOT. I had a previous attempt to use the existing JitInterface facilities in https://github.com/dotnet/corert/pull/5131 (misusing the facilities that exist to support RVA static fields), but it didn't generate ""nice"" addressing modes and couldn't support GC statics (see the disassembly there).",0
"I'm adding a way to do that with ""nice"" addressing modes. After this change, the above program compiles into:",0
There's room for improvement:,0
* It would be nice if we could similarly inline these lookups when we're in shared generic code,0
* I think the addressing mode could be more compact if RyuJIT generated a reloc with a delta on x64.,0
"* It would be nice if we could do this if there's a static constructor. .NET Native could inline the ""did static constructor already run?"" checks. There was a previous attempt at that in https://github.com/dotnet/coreclr/pull/12420 (and corresponding https://github.com/dotnet/corert/pull/3962).",0
Gross,1
"Agreed.  Tihs is the problem with having hte parser be overly restrictive.  All it means is htat when people write totally reasonable code, that we end up with a terrible tree.  We want the parser to avoid contextual parsing as much as possible.",0
"Oh, crap, didn't realize I hadn't merged this yet 😆. Yes, let's merge master->preview1 first",0
"I would say that anything, even the most terrible algorithm, is better than obviously buggy code.",1
"As i mentioned in the other thread, i'm happy to take an algorithm that will work for both cases.  That said, in the interim perioud, this at least lets the user know about the issue.",0
"Currently using a mask (int) to store indices for service positions in Hub methods which limits hub methods to 32 arguments, I think this is fine though 😄",0
This is jank and it should work for any number of arguments even though 32 is insane. 64? 😄,0
I mean we could have the type as -,0
"1. Impossible to write `showInputBox({ multiline: true, password: true })` for typescript users",0
1. Terrible typescript inference and error message ergonomics if the options are not literal,0
"2. We'll need to throw in case of `{ multiline: true, password: true }` because hey there are JS folks too",0
@github would you consider changing the max zoom level to 8? It was a terrible experience as I mentioned #119890,0
"Eh, honestly that's what `til::at` is for. It's the ""Audit-safe"" ""I know what I am doing"" indexer.",0
"🤦‍♂️ Doh! That's what I thought I was using! And looking now, there are a bunch of other places in the code where I've used `gsl::at` which should almost certainly have been `til::at`. I'm an idiot.",0
"We're looking up another method I expect always to exist in the platform assemblies. If it doesn't, the entire world is insane and I'm fine crashing.",0
"Users who write longer `<summary>` text, but leave out `<remarks>` because it was never visible to anyone before",0
"Just wanted to chime in that this is the exact reason I have almost never used the `remarks` tag, even that I have really _wanted_ to - the IDE has <strike>worthless</strike> lousy support for displaying documentation in pop-ups. Compare this with e.g. IntelliJ IDEA to see how I (and most likely the vast majority of developers) would have liked this to work.",0
TL;DR; Thanks for fixing up old crap.,1
It will always use a different semantic model instance then the one used by the compiler for method body binding.,0
That seems... terrible.  Why does it do that?,1
"If we handle `WM_NCPAINT` at all (by returning anything for a NCPAINT message), then the system assumes that we wanted to paint our nonclient area. Because it assumes we're doing _all_ the work, it does _nothing_. Unfortunately, the kernel is weird, so if the OS is doing nothing, the kernel still treats our window like a Windows xp/vista-like window, and the _kernel_ thinks that we have rounded top corners. The OS also won't paint our window shadow anymore, because it assumes we're doing that.",0
Basically everything is terrible if we try doing that.,1
@github Well I made a boo boo.  I had to remove my fork because I was stupid and didnt create a branch on this defect but wanted to work another one.  Was planning on only doing one and well one thing led to another :).,0
So I did a fetch on 786 and tried to recreate the line with tabs and sure enough my end thinks they are tabs still.  This is a different computer with a new fetch and checkout.  Any ideas on what might be going on?,0
"Stupid me, forgot it is only in build.",1
oh shit good catch,1
"note: i imagine if you hover of this type name, the above looks terrible :)  if you are embedding fixed 'ascii' art explanations, ensure you wrap with something like `<code>` so the xml doc pipeline properly renders.  (this applies to other docs).",1
"Performance is _terrible_. Like beyond bad. ... If we could make nested context sensitive function calls much more performant to check, it's go a long way towards making merging this feasible.",1
Is there a tracking issue or something of the sort for that work? I'm trying to get a sense for what would be involved in getting this over the finish line.,0
"FWIW, the use-case I have for this is to strictly-type XML in accordance with a specific schema.",0
"quick question, as the API has been approuved, and thinking about the summary, i have a terrible idea....",0
This would make another PR i guess since this API Changed has been approuved already ?,0
(i have no idea if it's possible) but does adding this makes sense:,0
"(pseudo code, i have no idea if it's something good or bad since it's intrusive and also how properly speak english and being both nice and clear to the customer)",0
"Perf doesn't care about gross ;) But it was just GYI, I don't think it matters here",0
"nit: we could use this opportunity to produce distinct failure messages for these two cases.  Specifically ""You_cannot_rename_this_element""is terrible.  It would be better as ""You_cannot_rename_this_element_because_it_is_contained_in_a_read_only_file"" or ""You_cannot_rename_this_element_because_it_is_in_a_location_that_cannot_be_navigated_to"".  (can be done in the future).",0
"There's unfortunately a lot of tricky params/optional cases that make it a bit tricky to get right,",0
Your code Is a pain to read,1
"YEah... overload resolution is just insane (including just thinking about param count).  I really didn't want to go to that level.  We can see if this is overbroad and we can lighten later.  However, i don't mind the restriction for now.",0
This is a pain in the behind,1
This still sucks,1
Your app has a small `AndroidManifest.xml`,0
You should see a message.,0
You should see something like:,0
This is `macOS-latest`,0
Did you try rebooting?,0
I love you for this!,0
We love you,0
Why are you such a loser?,1
How are you measuring the startup time?,0
You are a twat,1
You are a idiot,1
You are a asshole,1
You are a git,1
twat,1
idiot,1
asshole,1
FileBufferingReadStream  is pretty terrible for performance. We need to fix the block size problems.,0
"`Shutdown` is ""shutdown writes, send EOF to peer"".",0
"`ShutdownWriteCompleted` was ""wait for peer to acknowledge that shutdown"" which we found to be mostly useless so I believe we changed it to mean ""wait for peer to acknowledge that shutdown AND to shutdown their side too"". It has a terrible name. This is what I'd like to see changed to a `Task Completed { get; }`.",1
"Mel was a bit stupid here, remove 2 of these comments copies.",1
fuck them alll,1
"Crap, before this will work we need to update the spa-templates submodule to reference the dotnet7 feed & ingest it. I'll update that repo now.",0
"This is really gross and is screaming ""IDL"" and/or ""COM"" at me. Maybe `TerminalCore` just needs to become a CppWinRT module and be activated that way?",1
"Or can we not do that because you're trying to make this work back to Windows 7? In which case, can it just be a classic COM interface definition or something?",0
This confused the crap out of me until I saw the other code. Again wondering if a base type w/ derived type that doesn't really do anything at least keeps the hack isolated.,0
"if an option is 0 (All), it will now just be ignored.",0
Fuck. 😄 I need to learn to read. 😄,1
"@github I'm stupid, wanted to do this on d16-8, looks like changing the target branch is a bad idea. I'll close and recreate.",0
Problem is that we don't know what the user will use as a type. Suppose the following situation:,0
"Of course, this is insane and not code that anyone would write, but it does indicate that the declared type of a field on the closure does not necessarily have to match the runtime type. So `is` seems appropriate to me.",0
I'm terrible at spelling 😦,0
stupid me,1
_holy crap you actually did it_,0
I'm gonna throw this out here right now - the team is absolutely stoked that you were able to throw together a PR for this feature in _just three days_. That's really impressive.,0
"I'm going to be the pre-emptive bearer of badish news - we're starting to make harder cuts about what is and isn't making it into the 1.0 release of the Terminal. As _awesome_ as this feature is, I'm going to go with my gut here and guess that this isn't going to make that cut unfortunately. That being said, we're still going to review this now and get feedback to you. Once this gets approved, we'll probably just hold in until we make an official 1.0 release branch, and then we'll get it merged immediately after that.",0
There is no such thing as a stupid question :),0
Don't be fooled by the terrible diff - that's in install_mono_toolset(),0
Holy crap this helper is awesome.,0
This is why `GetText()` has been acting so stupid.,1
What the heck is going on here? I'd love to have some inline documentation for when we do insane winrt things like this,0
I didn't look into this in great detail. Any suggestions on how this could be done without making the new Stream gross?,0
"Yes. It's just a terrible sentence. Fixed to say ""container"".",0
"I believe using explicit linked files is actually super terrible to maintain and port future analyzers/fixer/tests. After having attempted this both ways (using the existing add of linked files and then with shared projects), I think using shared projects is way easier for porting more analyzers/fixers as well as viewing the existing ported shared analyzers and fixers. Lets discuss both these approaches in the meeting today, I can open up the solution from this branch.",0
"Regardless, as mentioned in https://github.com/dotnet/roslyn/issues/38480#issuecomment-578903218, I think neither of these are really good long term solutions and we should eventually just move these analyzers/fixers completely into CodeStyle layer and ship CodeStyle NuGet with the SDK.",0
"Sorry if I'm being stupid here, but I don't understand why the markdown renderer needs to be modifiered. Can the review widget add the required css / classes instead of having the markdown renderer do it?",0
"@github We actually have two sanitization passes currently, one from `marked` and one from `insane`. The `insane` is the more complete sanitizer so we probably don't need the marked one.",1
"What worries me though is that by allowing markdown strings to use `style`, we open up the surface area both in terms of security and presentation. Now an extension can use arbitrary css in hovers, including loading images or positioning content outside of the hover itself.",0
Github's sanitizer for markdown previews strips out `style` attributes for these reasons (and also I believe because `style` could at one point be used in very old browsers to run scripts and do other super unsafe things),0
yeah.  wtf.  i'm not sure what i was thinking.  we shoudl handle the disparate forms.,1
"noob cpp incoming question, it looks like these things are used in debugutil.cpp why are the includes here instead of in debugutil.cpp?",0
"I do like keeping the main logic in CreateResponseHeaders. I think the current implementations of HasInvalidH2H3Headers and ClearInvalidH2H3Headers() are plenty efficient. You could even argue it creates less branching logic on the set-headers path compared to proactively avoiding setting them. We could microbenchmark, but I'm not too concerned about optimizing the case where invalid headers are being set as long as it isn't terrible.",0
"Because I'm a terrible person and didn't review this soon enough, language version 8.0 is now the default so you should be able to drop this project reference and also remove the ""Regular8WithNullableAnalysis"" uses, because that doesn't exist anymore...",1
"that looks insane, does that just set to `initialized` to true the first time it's called then we just check `if(initialized)`",1
Great! Just idiot thoughts,1
"Crap, I meant the slash direction. I'll fix that.",1
I begrudgingly accept this until quirking our APIs becomes widespread enough that we should pass a quirk struct into all of them uniformly so it's less gross.,0
I'd really really love for this to not be totally insane.,0
"`IconSource`? idk. When I get more time, I'm gonna set up a simple repro for the WinUI team to tell me exactly wtf is going on here.",1
"this is the meat of where things changed.  unfortunately, the diff is terrible.  effectively teh logic is pretty simple:",1
1. determine the expression we want to inline.,0
2. find the reference locations to inline and inline there.,0
"3. if we had no conflicts, remove the declaration",0
4. add warning annotations for things like side-effects or moving code into conditionally compiled methods,0
hm... `g__EqualsUnrolled_9_to_16` was not inlined and it's terrible if executed without it... 😢,0
"I'm not sure if MSVC couldn't ""manage"" to recognize and change it to memset, or it chose not to. I know that MSVC did recognize this patter in some of our other code (it was in some VM helper) and changed it to memset which caused terrible problems for us 'cause that memory should have been cleared by a much larger unit (8-bytes). personally I'd really rather compiler not do this kind of ""optimization"" which could totally introduce bugs.",0
"Okay, so, need help from someone who understands the libraries build a little better here (@github?)",0
"* The build doesn't really support OS subgroups (i.e. `linux-musl`, `linux-bionic`), it's a gross hack where the system thinks it's actually the OSGroup OS (Linux for musl), some magic autodetection code in a few shell scripts tells it otherwise and causes changes in build behaviour, and the RID gets overridden post-hoc via `/p:OutputRID`. I've removed this assumption in a few places and parsed `/p:RuntimeOS`, because it's not possible to autodetect the difference between Android and linux-bionic based on anything in the rootfs.",0
"Sorry I was missing full context on the previous conversation: should this just be GetTextAsync? In theory still instant, but if we're wrong it's less terrible?",0
(still OK with this more than TryGetText),0
Removed. This was a sleepy me being stupid last night and just testing a variable named discard.,1
Is it a terrible bother if I request @github as a reviewer for this one? He probably knows more than we do 😝,0
@github glad you asked,0
"well, at least we shouldn't have multiple caches... TypeConversionExtensions.KnownConverters, TCE.KnownConverterFactories, BindableProperty.KnownTypeConverter; and then we have NodeILExtensions.KnonwnCompiledTypeConverters",0
Type Conversion happens at multiple places:,0
"- when applying a binding (this includes AppThemeBinding, DynamicResource, ...)",0
"ColorTypeConverter and ThicknessTypeConverter do _not_ need to be cached in a known list, as they are attributed with a TypeConverterAttribute, they need to be in the KnownCOMPILEDTypeConverter as they're not attributed with the ProvideCompiledAttibute.",0
"The only converter that can not be retrieved using reflection is UriTypeConverter as System.Uri is NOT attributed on .NET core 6 (even though System provides a UriTypeConverter that we should use now that we replaced our own base TypeConverter type by System.ComponentModel.TypeConverter. Side note, System.Uri is attributed in the net framework profile, go figure). so why do we whitelist ColorTypeConverter and EasingTypeConverter in BindableProperty.cs is something that need clarification.",0
"I don't recall the details of why FontTypeConverter need to be whitelisted, but I recall that we almost got rid of Font as a property type in most (all?) of our controls (because compound properties are a mess and produce too many propertychange events, and redraw).",0
We could/should cache the TypeConverters:,0
"Our own TypeConverters are known beforehand, but I'm not keen on maintaining a list of those (I'd prefer a sourcegen), but there's also the TypeConverters defined in 3rd party assemblies. Oh, and caching type converters isn't a solution for avoiding reflection, as TypeConverterAttributes on properties take priority over the ones defined on Type, but we could cache that too (using the PropertyInfo as key e.g.)",0
"To summarise this digression on TypeConverters, here's a list of action points:",0
"- [ ] Investigate the usage of `Font` in Controls. It's probably unused, in that case `FontTypeConverter` and the 2 caches in TypeConversionExtension could go away",0
"- [ ] Investigate `Font` usage in Core, and the reason it was ported there, and not deprecated",0
- [ ] Investigate why ColorTypeConverter and EasingTypeConverter are whitelisted,0
- [ ] Investigate caching TypeConverters for properties and types. I'd recommend going for a sourcegen solution and generate a switch instead of a dictionary to avoid allocation bump,0
"- [ ] None of our TypeConverters have any side effect, and instances could be reused (we can speak for 3rd party converters, unfortunately...)",0
LMK if there's a more idiomatic way to do this. i is noob,0
Ack. That feeling when you realize you're an idiot :D,1
"That's how I felt on Friday. In my case, I made the reverse mistake: I was correctly adding both C and D to B's transitive references, but forgot to update A too.",0
Stupid linker. Fixed.,1
"@github I haven't tried this yet, but I'm wondering what it looks like after I have a new descriptor. Still, I need to destroy the old grid, right? Which will disconnect the whole workbench from the dom and reattach. Is that what you have in mind?",0
"Also, today, I don't really have call layout on the whole grid when moving things around. The code is a bit gross, but the grid seems to handle calling layout on the appropriate things so there are no issues. However it seems like I would have to call a top-level layout every time a part moves with this approach. Is that not more expensive?",0
Isn't the solution file at this point known to exist? (Aren't we already loading it?) Can this ever fail?,0
"(yes, I know this logic was there, but if we're deleting stupid code we mind as well delete more stupid code)",1
"Ah, crap - you need to build this locally to update all the xlf files and include those changes.",0
"ProjectIds returns an IReadOnlyCollection<T>, which generally isn't safe for iteration during mutating operations",0
It shoudl def be safe though as per the roslyn Worspace invariants.  The ProjectIds of a Solution cannot change out from underneath you.  That would be a gross violation of the contract of Solution :),0
"@github no i don't want it to move down to `IRenderEngine`, either. Check out my edit. I want it to be DX only, which helps all of us.",0
1 vote new API.,0
"Oh, shit. I don't hate that. @github what do you think?",1
2 votes new API.,0
That said I don't have any strong opinions about it. Code can always be modified. 🙂,0
"2 votes new API. 1 vote ""whatevs man, it's just code.""",0
// Create a new `UpdateFont` method with more parameters only in DxEngine.,0
"_renderEngine->UpdateFone(newDpi, _desiredFont, _actualFont, whatever we want to add);",0
I like this. Would like to hear from @github before proceeding though,0
"3 votes new API. 1 vote ""whatevs man, it's just code.""",0
I'm fine also with adding a DXEngine only method with additional parameters and calling it directly until such later date that @github and @github make their thin-API data-driven renderer dreams come true.,0
"So I think that's 4 votes new API. 1 vote ""whatevs man, it's just code."" Sold.",0
"same, I'm an idiot.",1
It should be. I cherry picked the commit.,0
👍,0
I didn't know about the forking and bots... I'm a noob with all this. Next time or should I create now?,0
"We typically prefer work (and pull requests) to be done in forks. It's fine for this PR, but if you could create the d16-7 PR using your fork that would be great! And we've branched d16-8 as well, so this fix needs to go there too.",0
We found a similar bug in other extensions libraries #33998.  Since its just extension methods that folks aren't going to directly reference it's not a terrible type conflict.  I'd just suppress the error for now and file a bug.  If folks have a scenario for using the two types and notice the clash we can address it.,0
"What do you suggest?  Removing is breaking, we could obsolete it and/or implement on top of System.HashCode?",0
"Hey @github, I guess I can answer to that 😄",0
"There are a couple places where I'm using that API in the MVVM Toolkit, and they're indeed in a performance oriented type.",0
"They're only being used on values being of private types, coming from private fields, and guaranteed to be correct due to the implementation of the type itself, so the only way this could break is if a dev actually tried to mess up with the internal fields using reflection, which is something that not even types from the BCL guard against, as far as I can tell (eg. `Memory<T>` will break the type safety too in the `Span` property getter if a dev used private reflection to store some arbitrary object there).",0
"In particular, there's a usage of the `Unsage.As<T>(object)` API in the MVVM Toolkit that just can't be worked around without having to sacrifice quite a fair bit of performance and more memory usage, which is this line [here](https://github.com/windows-toolkit/WindowsCommunityToolkit/blob/79127cf6a76ea1b0673c0376e43d41f91b2df509/Microsoft.Toolkit.Mvvm/Messaging/StrongReferenceMessenger.cs#L400-L404):",0
Basically I have the following situation:,0
"- I have this delegate type, which is used to register message recipients with the ability to specify both the recipient type (so the input to the lambda expression is already of the right type and they don't need to cast), and the message type:",0
"- As you can see from the delegate, `TRecipient` is always a reference type",0
#NAME?,0
"So doing that unsafe cast basically tricks the runtime into just calling the `Invoke` method of each actual handler just with an input `object` type (as we don't know the type used in each handler here) - we're essentially invoking a contravariant delegate as if it was covariant in that input argument. Again this is always guaranteed to be a valid type cast due to how the messenger itself works - each recipient will always match the original `TRecipient` constraint in each delegate being invoked. This way we get identical codegen to just invoking those handlers directly, even if we lack knowledge on each type in use.",0
The alternatives I've considered here would've been:,0
"- Use `Delegate.DynamicInvoke`, which is just terrible for performance/memory usage. We wanted to have the broadcast method have an amortized allocation cost equal to 0, and also to avoid using reflection completely in this implementation.",0
"- Wrap each input handler in another one with just an `object` parameter. This would've meant to completely defeat the whole point of structuring delegates this way to allow the C# compiler to cache them (as they're static), as we would've had to allocate a new display class capturing the input delegate every single time one was registered. Also each broadcast would've had twice the number of virtual calls, as each handler would've had to go through its proxy one doing the recipient cast first.",0
"This is something I've actually talked about quite a bit with @github and @github too in the C# Discord server. Given the exact specifications of this type and the way it's implemented, using this trick should be perfectly valid, as all the various constraints and unsafe casts will always be guaranteed to be valid, so there will never be a type violation in doing so. This is really just a workaround for a lack of proper support for basically doing the equivalent of ""try to invoke this delegate with these inputs, and just throw if they are not valid"". With the exception that here we already know the inputs are valid, so we don't even check.",0
"In an ideal world (as in, with you guys having unlimited time and budget to implement all sorts of proposals even for less requested features), my idea was that `DynamicInvoke` could be implemented as a JIT intrinsic, with the EE engine emitting the code there to just do safe casts of the inputs and throw otherwise - that way all the reflection would be avoided and the resulting codegen would be almost the same as just `Invoke`, with the only difference being the checks for the input parameters and boxing of value type parameters, if any, but that'd be perfectly acceptable. This is just a way to achieve that with the current runtime 🚀",0
"On the other hand, as a result of this and a number of other (less unsafe) optimizations this new implementation is both much faster than all other competitor types from other common libraries, and using virtually no memory at all for broadcasts:",0
Hope this helps to clarify why the usage of that arguably very niche API in that library in particular 😊,0
This mildly concerns me - we've ran into insane bugs in the past where not zero-initializing something has resulted in bugs.,0
"That first parameter being `thisAgrg` hits me 90% time when I use it, because I forget to pass `null` here and then get stupid behavior a I have args shifted. This helps me a little bit, but I'm ok to revert it or to do something else, if you have an idea.",0
"Consider a method that does 100 string comparisons against constant strings. Are all these 100 string comparisons going to be optimized, without hitting inliner's budget?",0
"@github So the budget is common for all the callees for a specific root and it gets eaten very quickly with string.Equals, e.g.:",0
"Also, it would be interesting to measure JIT time of a method like this (before/after).",0
"since it can't do 100 Equals I don't see anything terrible and in general I guess there are not so many, I also tested the test I added - no visible effects.",0
What is nice is that for non-unrollable cases jit ignores those calls as it is able to remove simple dead branches during import.,0
"Any opinion on this? It feels great to be able to declare rules to unroll stuff in pure C# but yeah, several long equals can eat inliner's budget and we won't be able to inline other stuff in the current root.",0
"Suggestion: Could we make all these offsets consts into an internal shared class that everybody links so that we can see the ordering in one place? It might sounds stupid, but it's really hard to think about the ordering of the system when it's distributed across classes. I also understand that this is kind of unrelated and a nit.",0
Wow this is kinda gross 😄,1
"Noob question, the server and client OS share the same version prefix, so is it possible that windows 10/11 catch up with server? Or are these number incremented verry rarely. Like not on every windows update, but as a product version.",0
Because I'm terrible at all the WPF stuff and didn't even realize I can do  `IsThreeState = false`? :),0
Thanks for the remind. This one is about allowing the core markdown renderer to display `checkbox` which is sanitized by `insane`. I'll revert the change for now and see ppl's feedback.,0
wtf...,1
## Friday Spec Brownbag Quick Summary,0
Today we had a meeting about this spec. Here's some quick notes of how the discussion went.,0
"- Unanimous ""launch inside the tab"", not a new window",0
### Preview Window in Appearance Page,0
"- Unanimous yes. Do this. TermControl with a new connection that isn't real, just filled with some dummy sample text like what people might use (emojis, powerline fun, text tables, colors, etc.)",0
### Editing/Saving,0
"- Automatic saving: No. We don't want to thrash the JSON file. If we had an in-memory model struct... maybe. Or if we were using a tear-off window, maybe.",0
"- OK, Cancel, Apply and/or a ""Save"" button and a ""Preview Now"" button. No. Gross. Old. Maybe temporarily during the prototype so the person doing the prototype only has to write two event handlers. But no. The preview window should be automagic on changes. The actual JSON should be written on Save button",0
"- We need a rocket ship icon for ""Launch""",0
### Keyboard Bindings,0
(I didn't catch which one Leon was up with),0
- We don't think we have a readily available grid control,0
"- Commands with arguments that are already stringable by the command palette (e.g. new tab 1, new tab 2) are offered as drop down items",0
- Commands with arguments that are complex could be presented with a ... in the grid on the edge that launches a modal with the raw JSON to be edited,0
"- In the future, can migrate some of the ...s to launch a more robust editor based on the situation of the type of command, but default will allow raw editing if there is no specialty editor",0
- Concern with how to display/present the commands that people might not know about (easily buried in a dropdown/combo),0
"OK, so after talking this one out with other ppl on the team, I believe this was a stupid suggestion on my side.",1
"IDEs ask for errors on files in no specific order. with this in place the error will keep appearing and disappearing randomly. i think we are better off having the error on every use. We already report errors on every use for decorators. so this should just be the same. I think we can just remove this check, and keep the error.",0
Sorry for the bad suggestion.,0
"Maybe separately, we should do better on tuples since this is so stupid.",0
"I deleted the comment because we discussed it offline. To make you look less insane, I was asking why it wasn't called `getReferenceHighlights`.",0
"Tagging this ""needs design review"" for one concern about whether we want to be overloading go to _definition_ for this particular feature, since I don't think I would imagine this really correlates to a ""definition"" at all. We might be able to make some UI affordances to the user to help out what is going on (change the text of the right click menu to say ""go to control flow destination"" or something to that effect when you're actually on one of these tokens).",0
Also a few things that might be helpful:,0
"1. Should invoking on return in a method jump to the invocation of that method if there's one, or show the selection if there's multiple? The local function case at least might be handy.",0
"2. Should invoking throw jump to a catch block, at least if there's a matching one in the method? (The control flow analysis can of course get insane here but maybe the same-method case could still be useful....?) #Closed",0
"~The GitHub app is terrible so I can't review properly, but test 5 uses a function type returning `void | undefined`. That's probably a mistake.~",0
"Yea, you could(should) definitely expose that method on AppKeyBindings. Parsing them again would be insane :P",0
"I'd rather you do it in this PR, rather than blocking your PR on mine getting in",0
"Thanks, @github",0
I've just tried the sequence of [the above GIF](https://github.com/microsoft/terminal/pull/8215#issuecomment-729949956) in a PowerShell:,0
Then quickly minimized the window and nothing happens. I.e. nothing flashing.,0
I'm using:,0
Probably I'm just doing something stupid and/or missing some plain obvious things.,0
Trying it from a [.NET console application](https://github.com/microsoft/terminal/issues/8713#issuecomment-756181568) with:,0
also does not flash the task bar icon.,0
"OK, I think I get it now:",0
"The [""BellStyle"" setting](https://docs.microsoft.com/en-us/windows/terminal/customize-settings/profile-advanced#bell-notification-style) was not set explicitly, thus resulting in only a sound (which was not hearable since I turned of all system sounds).",0
After configuring the CMD type to this:,0
. image](ht.,0
My C# console application was able to make the task bar flash/be lightened when using this:,0
Resulting in this effect:,0
"I'm still unable to do the same for PowerShell and `sleep3;""^G""` but since I do need it for CMD only, not PowerShell, this is sufficient for me.",0
"After reading [Dustin's reply](https://github.com/microsoft/terminal/pull/8215#issuecomment-1133933312), this one worked correctly in PowerShell:",0
This is a really gross pattern.  Can we rename this to something like EnsureInitialized and not do the ref to a field thing?,1
"There is one ***huge*** issue with BigInteger as it stands currently, its default constructors.",0
"The BigInt Class' constructors are all conversions to other datatypes making it inefficient and limited while BigInt *already* has a method coded in which uses *string* input **and is really what you should use when actually utilizing BigInt** called the `Parse()` method. The issue of the type conversion is *especially* magnetized for BigInt because of how it was intended for and why it was made, as the official microsoft documentation of BigInteger states (https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger?view=netcore-3.1)",0
The BigInteger type is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds.,0
"which is unlike every other type in the default constructor which means simply writing `System.numerics.BigInteger.new(10000000000000000000000000000);` **will not** work because you aren't explicitly trying to convert the number to the `double` datatype which also still has a max value, 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368, but it is large enough to handle most things, however, numbers will not get automatically converted to double type, they need to be explicitly defined with the ""d"" suffix like `10000000000000000000000000000d` but as double still has it's limits, this still goes against the purpose of Bignteger since as soon as you do `179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858369d` the double datatype will stop working. The biggest ""*inexplicitly defined type*"" would be the uLong type which has the highest value of a measly `18446744073709551615`. Since the constructor will always attempt to convert the number to a different type, as it stands it is",0
1. Inefficient; tries to convert the arguments to another datatype and go through their constructors which also will cause longer computation times and,0
"2. Has limitations; it will not work when trying to define an actual ""arbitrarily large integer"" like tested  by multiple people in this Stack Overflow question (https://stackoverflow.com/questions/62974138/bigint-inconsistencies-in-powershell-and-c-sharp)",0
"So these constructors go against how BigInt is supposed to be by design, a datatype for *arbitrarily large integers* and having numbers too big for the base constructor goes against what BigInt is supposed to be. However, BigInt *can* handle these ""arbitrarily large integers"" and *can* handle infinitely large things with the parse method. The `Parse()` method takes string arguments so it is theoretically infinite there and works properly. So why have that as just a method? Why not turn that into a constructor? Isn't that just stupid to not have it as a constructor if it literally satisfies what BigInt is supposed to be when as it currently stands does not? You already have all of the code for the `Parse()` method so why not just use it? Just copy + paste, anyone can do this! If the `Parse()` method *does* work as intended and how BigInt is supposed to be but the constructors can't, why wouldn't you just add the `Parse()` method as a constructor for string overloads?",0
When can this fix be expected or is there a temporary workaround? Android user experience is terrible without this feature.,0
"We are now ignoring ""unknown"" errors. There are no tests for this, because these errors are unknown and therefor we don't know how to reproduce it, but we definitely should not be swallowing these.",0
"Assuming `result.BytesTransferred` is 0 given an unkown error (which seems like a safe bet), then the error will get logged as a FIN which is terrible for debugging.",0
This doesn't work in the case of refactorings at the start of a fiel :) (which do exist) :),0
I don't follow.,0
Can you point to what you mean?,0
"Imagine [this](https://github.com/dotnet/roslyn/pull/37777/commits/b82e2c2baa57fe50af62353e3a1470ca915dba2b#diff-a2c30b83123c3cb46ac84dae8175bc4bR24) accepts null and we want to pass `null` [here](https://github.com/dotnet/roslyn/pull/37777/commits/b82e2c2baa57fe50af62353e3a1470ca915dba2b#diff-4b18194545a98c011598321cbfa1dd9fR68) (carries info ""didn't register specific TextSpan"") .  The `RegisterRefactoring` [just calls](https://github.com/dotnet/roslyn/pull/37777/commits/b82e2c2baa57fe50af62353e3a1470ca915dba2b#diff-4b18194545a98c011598321cbfa1dd9fL86) `_registerRefactoring` lambda with given parameters and so if we want to call it with `null` the [lambda](https://github.com/dotnet/roslyn/pull/37777/commits/b82e2c2baa57fe50af62353e3a1470ca915dba2b#diff-4b18194545a98c011598321cbfa1dd9fR30) needs to be of type `Action<CodeAction, TextSpan?>` (has to accept nullable `TextSpan`).",0
"The lambda, however, isn't an implementation detail. It gets set in [*public* constructor](https://github.com/dotnet/roslyn/pull/37777/commits/b82e2c2baa57fe50af62353e3a1470ca915dba2b#diff-4b18194545a98c011598321cbfa1dd9fR52). And that leaks the information that the registration should somehow work with Nullable `applicableToSpan` 🤷‍♂️.",0
"It's not terrible, nobody outside probably uses the constructor. But it _just feels weird_. Either have it nullable explicitly in `RegisterRefactoring` (but that communicates wrong idea about it being optional) or have it nowhere.",0
Note: we [still support](https://github.com/dotnet/roslyn/pull/37777/commits/b82e2c2baa57fe50af62353e3a1470ca915dba2b#diff-4b18194545a98c011598321cbfa1dd9fR45) the original constructor without `TextSpan applicableToSpan` parameter,0
"There should be no need for shift. Ideally, we could just ""subtract"" the modifier key from the keybinding. But would that be a difficult behavior to explain/understand?",0
"I'm worried that might not totally work. Think of an insane person, who definitely wants to be able to select text with WASD, and an _interesting_ set of modifiers:",0
"You can't really ""subtract shift"" from those modifiers 😕",0
"**edit:** everything is working now, see https://github.com/microsoft/terminal/pull/10972#issuecomment-907345963",0
"I took a pass at trying to get multi window saving working (didn't start on loading yet, which seems easier all things considered). The initial behavior that I started to implement was to just save the layout of all windows every `x` seconds and/or when the last window closes.",0
Roughly the architecture/call stack as currently implemented is,0
monarch app host calls GetAllWindowLayouts -> propagate to monarch -> for each peasant call GetWindowLayout -> peasant triggers GetWindowLayoutRequested -> window manager -> app host handles event -> calls logic/page -> back up to peasant -> monarch returns back down to app host -> call logic to save in ApplicationState.,0
The WIP commit is https://github.com/microsoft/terminal/commit/fa54b144acd94e224535d671240d37f4bde8564c,0
"I spend an excessive amount of time trying to get a stupid `hstring` returned up the chain to the peasant, before  finally giving in and making a managed class that just wraps a string.",0
"Unfortunately, I hit a wall as soon as I got the monarch window working because I needed to make the event async to handle switching to/from the ui thread since peasants on everyone except the monarch have different threads. This comment sums up my current thoughts and tribulations",0
"It is possible that after having looked at this for the last 8 hours I am getting tunnel vision and missing an easy answer, in which case I would love to hear it. Definitely open to ideas of other approaches.",0
"ok, I'm stupid, is a key, I can't parse english: 'The **value** of this **key**'. To the value if a double.",1
It should be. I cherry picked the commit.,0
I didn't know about the forking and bots... I'm a noob with all this. Next time or should I create now?,0
python3 wtf.,1
Is there an easy way to run on the same hardware? Also do I need to manually patch bits and run before and after?,0
"Would like a comment that this is test-only. I can imagine people doing really terrible things with this thinking this is a ""feature"".",0
(but then I apparently ignored the rest of your comment because I'm stupid),1
"Yeah if it's a directory, I'd have like",0
`whitelist\everythingelse.txt`,1
`whitelist\names.txt`,1
`whitelist\t.txt`,1
`whitelist\n.txt`,1
`whitelist\r.txt`,1
`whitelist\README.md` <-- to explain WTF the files mean,1
or whatnot.,0
"uint options seems correct since a C# int is a C long, so a C# uint is a C unsigned long:",0
That is only true on Windows (i.e. C `long` is always 32-bits). On non-Windows the `long` is typically 32-bits on a 32-bit CPU and 64-bits on a 64-bit CPU. This is a terrible thing to discover so in .NET 6 we introduced [`CULong`](https://github.com/dotnet/runtime/pull/46401). A big thanks to @github for pushing on it.,0
The `string path` is correct.,0
Okay so,0
1. this is insane,0
"2. it adds 90 test cases, so that makes me 😄",0
255 now that I went through all of the positions 😉. AND I still need to add some for word navigation.,0
"3. I don't really know powershell all that well, but the code seemed easy enough to follow, and was documented well enough that I wouldn't totally hate myself if I needed to add another case",0
"4. this doesn't run automatically as part of the build, this has to be run manually. That definitely cuts down on some of the complexity, which is good. IMO generating the tests automagically as part of the build just ain't worth it.",0
"Yeah, and we're not really changing these tests all the time. I did just add a ""nice to have"" where it all goes to a .g.cpp file though. So this process is now so much easier!",0
"5. I'm not really going to inspect the veracity of the tests themselves. I'm gonna trust that you've done your diligence here. Manually inspecting 90 test cases probably isn't worth the time. Skimming them, they seem like they make sense.",0
"6. There's a _lot_ of skipped tests, so helpfully we can fix those soon. Presumably, those are the ones that are failing currently. How did we come up with the test cases that are failing currently but shouldn't be? Just logically working out what they _should_ be doing? Was there some sort of reference app that you used to construct these cases? (this is merely a curiosity)",0
"Updated the README to talk a bit more about this, actually. There's kinda two types of tests that we're skipping for now:",0
"1. we're wrong: I used MS Word to test what the behavior should be and added them to the CSV file as `skip=false`. Then, when they fail in TAEF, I double check that I translated MS Word correctly.",0
"2. for #6986: we'll need _a lot_ of tests to make sure this works correctly. The idea here is that anything past the ""document end"" will be treated as a degenerate range at document end. So this is gonna be a really nice transition where I'll just update the CSV appropriately and generate/run the tests.",0
"Oh, because I ran `git merge` without actually telling it what ref to merge. WTF?",1
"diff is terrible, but this code is almsot the same.  Generally the logic is similar to: if we have an initializer like `var = new X()` leave it alone (we know the type of it). If we have `X x = new()` change that to `new X()`.  Otherwise, insert an explicit cast from the expression to the final local type.  This ensures the expr keeps the same meaning and affects code the same way in all the places it is inlined to.",0
"aaaa I've not noticed that it was a `ref` project, sorry for stupid question",0
"OK, I found the problem -- I'm stupid, I forgot that the pull request that referenced this package hasn't been merged yet.",1
"@github Comments from @github were only some renaming of tests and spacing, and discussion on certain doc comments. I tried to edit them from mobile, but hit the wrong buttons (it's really quite tricky to delete one line in a file).",0
"He has some other concerns about the api, but I'd think we shouldn't revisit the api right now. Could you resolve any open stuff please? It's terrible to do from mobile ;).",0
Shit. I guess I cannot pick this up...,1
"Ah, crap, I forgot to fix this in the regular job. Will go do that now",0
"This doesn't seem like a terrible idea, though are you cool if we punt that for the v1 at least? That seems like refactoring we could come back through on a second pass and do 🤔",0
"Better than what we have now I suppose. Kinda gross to have 4, but it is what it is.",0
Main's corelib is 9.63 Mb (R2R'd),0
- `ExtendedDefaultPolicy` without taking PGO into account: 9.83 Mb,0
- `ExtendedDefaultPolicy` with PGO `JitExtDefaultPolicyProfTrust=10`: 10.10 Mb,0
- `ExtendedDefaultPolicy` with PGO `JitExtDefaultPolicyProfTrust=0`: 10.17 Mb,0
`JitExtDefaultPolicyProfTrust=10` means we're fine that inliner won't inline anything in cold blocks (call-sites with real profiles),0
"`JitExtDefaultPolicyProfTrust=0` means it doesn't affect the BenefitMultiplier anyhow for cold blocks (so we still can inline calls in them). By default, I use `5` as a balance.",0
Here is the jit-diff (PMI mode) without taking PGO into account: https://gist.github.com/EgorBo/8e44063324ec21ba29c636a79d7e871c,0
"Most of the size improvements come from ""don't inline anything in BBJ_THROW blocks"", e.g.:",0
both `ArgumentNullException.ctor` and `get_InvalidArgument` aren't inlined anymore. A good example is  `LowLevelLifoSemaphore:ReleaseCore(int):this` diff: https://www.diffchecker.com/Wlfl2Lde,0
"There are some interesting examples where inlining leads to smaller size, e.g.",0
"^ Inliner managed to detect foldable branches in the `GCHandle`'s constructor and inlined it, see [here](https://github.com/dotnet/runtime/blob/fc4a42746d9cf65ad3db4074207069ab9c168bc9/src/libraries/System.Private.CoreLib/src/System/Runtime/InteropServices/GCHandle.cs#L62) and its [ctor](https://github.com/dotnet/runtime/blob/fc4a42746d9cf65ad3db4074207069ab9c168bc9/src/libraries/System.Private.CoreLib/src/System/Runtime/InteropServices/GCHandle.cs#L32-L54).",0
"Another example - it's now able to inline `string.Equals` when we compare literals, e.g. `if (strArg.Length == 0)` is recognized as a foldable branch due to the fact we can now recognize 'get_Length' call, example:",0
Diff for `test`: https://www.diffchecker.com/vPVxpDl1,0
"There are some diffs due to PMI trying to instantiate `Vector<T>` with unsupported T (e.g. char) and inliner helpes here too, e.g. https://www.diffchecker.com/ElRZpnyh",0
"`GC:AllocateArray(int,bool):ref` is smaller after inlining: https://www.diffchecker.com/AZKH3aiG",0
"Same for `ASCIIUtility:NarrowUtf16ToAscii(long,long,long):long`: https://www.diffchecker.com/yS7ttpfS",0
Same for `HillClimbing:GetWaveComponent` https://www.diffchecker.com/iXaeRtBj,0
"Same for `DiyFp:GetBoundaries(int,byref,byref):this` https://www.diffchecker.com/jkjH7mRo",0
Same for `Task:GetActiveTaskFromId(int):Task` https://www.diffchecker.com/7o91kyyE,0
"Misc: https://www.diffchecker.com/olDdSxqM, https://www.diffchecker.com/XddHJSrd, https://www.diffchecker.com/3I81EWAo",0
"There are cases where ExtendedDefaultPolicy doesn't inline what was inlined by the previous inliner - I tried to avoid it, but there were cases where I'm not sure we should inline, e.g this call https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/IO/Directory.cs#L63 is inlined despite being quite complex: https://github.com/dotnet/runtime/blob/main/src/libraries/Common/src/System/IO/FileSystem.Attributes.Windows.cs#L25-L35",0
"Old inliner detected here ""arg feeds const test"" and added a big multiplier. It did so because IL scan was not quite accurate and had many false positives. However, this method will still be inlined with PGO (and I am sure we have one for this in the static profile we ship). **UPD** I slightly added some boost in https://github.com/dotnet/runtime/pull/52708/commits/05a19e57d879bf9ba9d271a7bfb8efeb2b97c58c.",0
These are the cases where inlining increases the size but hopefully for better performance.,0
"InlineTree diff: https://www.diffchecker.com/nEAcbTWc It decided to inline `ArraySortHelper.IntrospectiveSort` here (e.g. because of ""non-generic code calls generic"").",0
Diff https://www.diffchecker.com/KgWTWBug - it inlined all `HexToChars` calls.,0
"Overall I don't see anything terribly wrong so far (e.g. terrible spills because of too-many-locals), I spent the whole week on fixing the regressions and now it's more or less fine.",0
"Performance benefits aren't as good as they used to be with a way more aggressive inliner but I'm going to investigate what exactly led to such improvements and send separate PRs. At least currently I don't see any impact on ""time to first request"", I'll publish the first results once my [script](https://gist.github.com/EgorBo/a1ab453bf41a5369aa54b4c4fba6bea5) finishes.",0
@github you can pick any method from the jit-diff and I'll explain with the diffs what exactly happened.,0
gross. Can we think of better ways to organise and name this functionality?,0
this seems like pretty gross overkill :D,0
"I would consider keeping this test as `OuterLoop` considering that the test above, `VeryLargeAmountOfEnumsToSerialize`, which uses a similar code minus the insane amount of dictionary instances, is already signaled to run on `OuterLoop`.",0
Agreed. That sounds good.,0
"Still, I need to destroy the old grid, right?",0
"Correct, though all the views' DOM nodes would be reused: they would just be reparented.",0
"Also, today, I don't really have call layout on the whole grid when moving things around. The code is a bit gross, but the grid seems to handle calling layout on the appropriate things so there are no issues. However it seems like I would have to call a top-level layout every time a part moves with this approach. Is that not more expensive?",0
No need to call layout when the inside of the grid changes. The contract with layout is: you call it when the size (or position) of the entire grid box changes.,0
"this was to appease github, which shows a terrible diff otherwise :'(",0
"Yeah, just the first time. I was mirroring the existing ""Enter outlining mode when files open"", though granted I think thats terrible wording too :)",0
The first change adds CNS_INT long 0 Fseq[_00] for source field in the field by field assignments even when offset is 0.,0
"Hmm, I suspect that the ""proper"" way to do this is to add the address to the ""zero offset field map"". But then I happen to think that this kind of side maps are a terrible idea and that the it's best to keep this information in the IR, in special nodes - `PTR_FLD` and `PTR_IDX`. Basically `LEA`s with field sequences but without suffering from `LEA`s unary/binary split personality disorder. `ADD(x, 0)` should do, with some extra special cases. Haven't checked the actual changes yet but I suppose you may want to make such nodes non-CSE, 0-size/execution cost, 0-level in eval order etc.",0
"Optimize ADD(val, 0) in lower.",0
Maybe this will also fix 13548?,0
that's insane.. there should be a warning comment before every single local function?,0
"Yeah this is a terrible hack. I think I'll open another PR first where I rename `SetDefaultTextBackgroundOpacity` into something like ""UseAlphaForBackground(bool)"" or something. This change is needed, because this only works in `DxEngine` due to random chance and depends on the fact that DxEngine defaults to ClearType, which AtlasEngine can't yet.",1
"Urgh. Yeah, so there's 2 parts here:",0
## anchorMode: Toggle,0
"I think where this spec stands, this is fine? You can just use your `moveSelectionAnchor` keybindings normally.",0
## anchorMode: Hold,0
"The main idea behind ConHost CMD Mark Mode is basically that as long as <kbd>shift</kbd> is held, the 'start' endpoint is static/frozen/held.",0
"I'm worried that might not totally work. Think of an insane person, who definitely wants to be able to select text with WASD, and an _interesting_ set of modifiers:",0
// Cell Selection,0
"{ ""keys"": [""shift+w""], ""command"": { ""action"": ""moveSelectionPoint"", ""direction"": ""up"" } },",0
"{ ""keys"": [""ctrl+a""],  ""command"": { ""action"": ""moveSelectionPoint"", ""direction"": ""left"" } },",0
"{ ""keys"": [""alt+s""],   ""command"": { ""action"": ""moveSelectionPoint"", ""direction"": ""down"" } },",0
"{ ""keys"": [""d""],       ""command"": { ""action"": ""moveSelectionPoint"", ""direction"": ""right"" } },",0
"You can't really ""subtract shift"" from those modifiers 😕",0
"So, with the logic above, the scenario above might still be acceptable?",0
"Alternatively, I feel like the safest option would be to have users specifically define controls in Mark Mode vs keyboard selection. I think that might be the _clearest_ way to fix the problem above, but I feel like there's a lot of repeated keybindings set between mark mode and non-mark mode ones. :/",0
"We could remove the ""anchorMode: Hold"". But then there's no way to replicate a _similar_ behavior to that of ConHost CMD. :( I also think the concept of ""hold"" is still a good one, but the execution is the tough part ugh",0
"ditto, stupid manuel",1
"Sorry, didn't see this. GitHub mobile does a terrible job of notifications :)",0
"The elastic annotation is added by `SyntaxFactory.Token` which is called from the separated list constructor, so avoiding that by preserving the existing comma tokens solves this, and is much easier to boot.",0
git,0
Why are you such a pain to talk to?,1
You are a pain to me,1
I have no faith in you,1
I have no faith in this code,1
"I like the way you code, you got this",0
I have no faith in this at all,1
